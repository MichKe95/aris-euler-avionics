
mb_working_airbrakes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a060  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0801a230  0801a230  0002a230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aeb0  0801aeb0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801aeb0  0801aeb0  0002aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aeb8  0801aeb8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aeb8  0801aeb8  0002aeb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aebc  0801aebc  0002aebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801aec0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028da4  200001fc  0801b0bc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20028fa0  0801b0bc  00038fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043ece  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000830a  00000000  00000000  000740fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028a0  00000000  00000000  0007c408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024f0  00000000  00000000  0007eca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000327e9  00000000  00000000  00081198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c907  00000000  00000000  000b3981  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105395  00000000  00000000  000e0288  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e561d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b278  00000000  00000000  001e5698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a218 	.word	0x0801a218

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801a218 	.word	0x0801a218

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e03c      	b.n	8000fc8 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d102      	bne.n	8000f62 <calculateCRC+0x2a>
      c = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]
 8000f60:	e00e      	b.n	8000f80 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	440b      	add	r3, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f8a:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000f92:	8aba      	ldrh	r2, [r7, #20]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <calculateCRC+0x6c>
 8000f9e:	8a7b      	ldrh	r3, [r7, #18]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <calculateCRC+0x7e>
 8000faa:	8a7b      	ldrh	r3, [r7, #18]
 8000fac:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1de      	bne.n	8000f80 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbbd      	blt.n	8000f4e <calculateCRC+0x16>
  }
  return crc;
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <EnableMotor>:

osStatus_t EnableMotor(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800100a:	2306      	movs	r3, #6
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001010:	f107 0218 	add.w	r2, r7, #24
 8001014:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f957 	bl	80012d0 <WriteCommand>
 8001022:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001048:	f107 0218 	add.w	r2, r7, #24
 800104c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f93b 	bl	80012d0 <WriteCommand>
 800105a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 8001062:	2341      	movs	r3, #65	; 0x41
 8001064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 8001068:	1d3a      	adds	r2, r7, #4
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9b1 	bl	80013d8 <ReadCommand>
 8001076:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	2b37      	cmp	r3, #55	; 0x37
 800107c:	d104      	bne.n	8001088 <EnableMotor+0xa8>
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d101      	bne.n	8001088 <EnableMotor+0xa8>
		status = osOK;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800108a:	4618      	mov	r0, r3
 800108c:	3738      	adds	r7, #56	; 0x38
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 8001092:	b580      	push	{r7, lr}
 8001094:	b08a      	sub	sp, #40	; 0x28
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	f107 011c 	add.w	r1, r7, #28
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f900 	bl	80012d0 <WriteCommand>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 80010f0:	237a      	movs	r3, #122	; 0x7a
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	141b      	asrs	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b2db      	uxtb	r3, r3
 800110c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	f107 011c 	add.w	r1, r7, #28
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f8d5 	bl	80012d0 <WriteCommand>
 8001126:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001140:	233f      	movs	r3, #63	; 0x3f
 8001142:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	f107 011c 	add.w	r1, r7, #28
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f8bd 	bl	80012d0 <WriteCommand>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8001170:	230f      	movs	r3, #15
 8001172:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	f107 011c 	add.w	r1, r7, #28
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8a5 	bl	80012d0 <WriteCommand>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800118a:	4618      	mov	r0, r3
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001192:	b580      	push	{r7, lr}
 8001194:	b08c      	sub	sp, #48	; 0x30
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011aa:	2381      	movs	r3, #129	; 0x81
 80011ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0e1b      	lsrs	r3, r3, #24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	141b      	asrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f874 	bl	80012d0 <WriteCommand>
 80011e8:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 80011f0:	2383      	movs	r3, #131	; 0x83
 80011f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f851 	bl	80012d0 <WriteCommand>
 800122e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001236:	2384      	movs	r3, #132	; 0x84
 8001238:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	141b      	asrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001262:	f107 0210 	add.w	r2, r7, #16
 8001266:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f82e 	bl	80012d0 <WriteCommand>
 8001274:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001278:	4618      	mov	r0, r3
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800128e:	2360      	movs	r3, #96	; 0x60
 8001290:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f897 	bl	80013d8 <ReadCommand>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[6] +
 80012ac:	7cbb      	ldrb	r3, [r7, #18]
 80012ae:	461a      	mov	r2, r3
			(rx_buffer_read[7] << 8) +
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[6] +
 80012b4:	441a      	add	r2, r3
			(rx_buffer_read[8] << 16) +
 80012b6:	7d3b      	ldrb	r3, [r7, #20]
 80012b8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[7] << 8) +
 80012ba:	441a      	add	r2, r3
			(rx_buffer_read[9] << 24);
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[8] << 16) +
 80012c0:	441a      	add	r2, r3
	*position = rx_buffer_read[6] +
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]

	return status;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 80012f4:	2302      	movs	r3, #2
 80012f6:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 80012f8:	2368      	movs	r3, #104	; 0x68
 80012fa:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 80012fc:	2304      	movs	r3, #4
 80012fe:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	f107 021e 	add.w	r2, r7, #30
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	6851      	ldr	r1, [r2, #4]
 8001354:	c303      	stmia	r3!, {r0, r1}
 8001356:	8912      	ldrh	r2, [r2, #8]
 8001358:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fde7 	bl	8000f38 <calculateCRC>
 800136a:	4603      	mov	r3, r0
 800136c:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800136e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8001382:	f107 011c 	add.w	r1, r7, #28
 8001386:	230a      	movs	r3, #10
 8001388:	220e      	movs	r2, #14
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <WriteCommand+0x104>)
 800138c:	f00a f8bc 	bl	800b508 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001390:	230a      	movs	r3, #10
 8001392:	2214      	movs	r2, #20
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <WriteCommand+0x104>)
 8001398:	f00a f947 	bl	800b62a <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3306      	adds	r3, #6
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <WriteCommand+0xf8>
		status = osOK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200089ec 	.word	0x200089ec

080013d8 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 80013ec:	2302      	movs	r3, #2
 80013ee:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80013f4:	2302      	movs	r3, #2
 80013f6:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 80013f8:	2301      	movs	r3, #1
 80013fa:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	f107 0212 	add.w	r2, r7, #18
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	6018      	str	r0, [r3, #0]
 8001422:	8892      	ldrh	r2, [r2, #4]
 8001424:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2106      	movs	r1, #6
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fd81 	bl	8000f38 <calculateCRC>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001440:	8b7b      	ldrh	r3, [r7, #26]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 800144a:	f107 0110 	add.w	r1, r7, #16
 800144e:	230a      	movs	r3, #10
 8001450:	220a      	movs	r2, #10
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <ReadCommand+0xc4>)
 8001454:	f00a f858 	bl	800b508 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001458:	230a      	movs	r3, #10
 800145a:	2214      	movs	r2, #20
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <ReadCommand+0xc4>)
 8001460:	f00a f8e3 	bl	800b62a <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3307      	adds	r3, #7
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3306      	adds	r3, #6
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3305      	adds	r3, #5
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <ReadCommand+0xb8>
		status = osOK;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8001490:	69fb      	ldr	r3, [r7, #28]

}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200089ec 	.word	0x200089ec

080014a0 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <init_coeff+0xac>)
 80014ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014b2:	4611      	mov	r1, r2
 80014b4:	22f8      	movs	r2, #248	; 0xf8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f016 fc34 	bl	8017d24 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 80014bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <init_coeff+0xb0>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	4611      	mov	r1, r2
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	461a      	mov	r2, r3
 80014ca:	f016 fc2b 	bl	8017d24 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 80014ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <init_coeff+0xb4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	4611      	mov	r1, r2
 80014d8:	23f8      	movs	r3, #248	; 0xf8
 80014da:	461a      	mov	r2, r3
 80014dc:	f016 fc22 	bl	8017d24 <memcpy>
    const double coeff3[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000201990562985250001943459993472837845, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000001332599818626039970897811441571004127947, -0.000000000000000000000000000000000000000000000000000000000000000000000000000002625348546949809937078012282342904976127723, -0.000000000000000000000000000000000000000000000000000000000000000000000000000223727864461865003520661187439024600181539219, 0.000000000000000000000000000000000000000000000000000000000000000000000004464195222526840028513420957475197151241051746408, 0.000000000000000000000000000000000000000000000000000000000000000000002338983169198669858723678827906894927557002243871494, -0.000000000000000000000000000000000000000000000000000000000000000006912415560184160441989718978305120773037706865961972544, -0.000000000000000000000000000000000000000000000000000000000000010413732827001500036314706101719078643859924602095189421307, 0.000000000000000000000000000000000000000000000000000000000004189409028079520254470994017178321308860178893443967174876530, 0.000000000000000000000000000000000000000000000000000000025614354369933901616993599242485723226984402693215380015245905534, 0.000000000000000000000000000000000000000000000000000017039378494863200873938147795841770460467212292535660899037298363934, -0.000000000000000000000000000000000000000000000000037663076028431798602138861411457291136403355675991877262622158500780707, -0.000000000000000000000000000000000000000000000072815926705972796875656513613119001981820983531065325656503321875845255363, 0.000000000000000000000000000000000000000000018447501014541900178687391898845575613515392446088612401903946378298107262645, 0.000000000000000000000000000000000000000176710198155264991511205517529206838994318948056972059471650682635785295572654346, 0.000000000000000000000000000000000000071835866121803100252160509096347173382186418680093242878723576924609687822100523993, -0.000000000000000000000000000000000372820534942092984478403688654843534473731172425786204417355750076042081268496098051327, -0.000000000000000000000000000000252989602976263993127475788776422100805568474814989995701968345433265389187102987512967278, 0.000000000000000000000000000905170223509092071927497805678691252483018558288891743135588951403590113244795878344461925735, 0.000000000000000000000000194552177016366997577807228355801877291823980823471641161670560613928052107191035702271619811654, -0.000000000000000000002437371278037870091434718374663516278393545732460725671800379210640841165513847954571247100830078125, 0.000000000000000003555223129133779670528346764370006160828520346391329667867786668011831352487206459045410156250000000000, -0.000000000000002840735214777100016456280482905011509609210628574116341837907384615391492843627929687500000000000000000000, 0.000000000001463938313075189970311027401823124891380722978340145346010103821754455566406250000000000000000000000000000000, -0.000000000508757921832193008510020092773898023330580997480865335091948509216308593750000000000000000000000000000000000000, 0.000000119452175202401992986544132166470966183169366559013724327087402343750000000000000000000000000000000000000000000000, -0.000018465109600443501075908714348372541280696168541908264160156250000000000000000000000000000000000000000000000000000000, 0.001785007556170990035068757428859953506616875529289245605468750000000000000000000000000000000000000000000000000000000000, -0.101366848874935994162527208573010284453630447387695312500000000000000000000000000000000000000000000000000000000000000000, 3.838048220048389858050086331786587834358215332031250000000000000000000000000000000000000000000000000000000000000000000000, 3.453560767076920168250353526673279702663421630859375000000000000000000000000000000000000000000000000000000000000000000000};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <init_coeff+0xb8>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	4611      	mov	r1, r2
 80014ea:	23f8      	movs	r3, #248	; 0xf8
 80014ec:	461a      	mov	r2, r3
 80014ee:	f016 fc19 	bl	8017d24 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3340      	adds	r3, #64	; 0x40
 80014f8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4618      	mov	r0, r3
 8001500:	f016 fc10 	bl	8017d24 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800150c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4618      	mov	r0, r3
 8001514:	f016 fc06 	bl	8017d24 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001520:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001524:	22f8      	movs	r2, #248	; 0xf8
 8001526:	4618      	mov	r0, r3
 8001528:	f016 fbfc 	bl	8017d24 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001534:	f107 0108 	add.w	r1, r7, #8
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4618      	mov	r0, r3
 800153c:	f016 fbf2 	bl	8017d24 <memcpy>
}
 8001540:	bf00      	nop
 8001542:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0801a230 	.word	0x0801a230
 8001550:	0801a328 	.word	0x0801a328
 8001554:	0801a420 	.word	0x0801a420
 8001558:	0801a518 	.word	0x0801a518
 800155c:	00000000 	.word	0x00000000

08001560 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	ed2d 8b02 	vpush	{d8}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	f040 80cd 	bne.w	8001714 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 800157e:	2b01      	cmp	r3, #1
 8001580:	d004      	beq.n	800158c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b02      	cmp	r3, #2
 8001588:	f040 80c4 	bne.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001596:	a36c      	add	r3, pc, #432	; (adr r3, 8001748 <compute_control_input+0x1e8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff fabe 	bl	8000b1c <__aeabi_dcmplt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b6 	beq.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ad 	beq.w	8001714 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f913 	bl	80017e6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa15 	bl	80019f0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80015cc:	461d      	mov	r5, r3
 80015ce:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	4628      	mov	r0, r5
 80015e6:	4631      	mov	r1, r6
 80015e8:	f7ff f826 	bl	8000638 <__aeabi_dmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4698      	mov	r8, r3
 80015f2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffc2 	bl	8000588 <__aeabi_f2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7ff f814 	bl	8000638 <__aeabi_dmul>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	4640      	mov	r0, r8
 800161a:	4649      	mov	r1, r9
 800161c:	f7fe fe54 	bl	80002c8 <__aeabi_dsub>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4698      	mov	r8, r3
 8001626:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	a345      	add	r3, pc, #276	; (adr r3, 8001750 <compute_control_input+0x1f0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fe43 	bl	80002c8 <__aeabi_dsub>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fff5 	bl	8000638 <__aeabi_dmul>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	461a      	mov	r2, r3
 8001654:	4623      	mov	r3, r4
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fe35 	bl	80002c8 <__aeabi_dsub>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	4625      	mov	r5, r4
 8001664:	461c      	mov	r4, r3
                + control_data->control_input);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fe28 	bl	80002cc <__adddf3>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa88 	bl	8000b98 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f016 ff80 	bl	80185a0 <fminf>
 80016a0:	eef0 7a40 	vmov.f32	s15, s0
 80016a4:	eef0 0a67 	vmov.f32	s1, s15
 80016a8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001740 <compute_control_input+0x1e0>
 80016ac:	f016 ff5d 	bl	801856a <fmaxf>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f944 	bl	8001948 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	ed93 8a06 	vldr	s16, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001744 <compute_control_input+0x1e4>
 80016d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	f016 ff58 	bl	80185a0 <fminf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	eeb0 0a48 	vmov.f32	s0, s16
 80016fc:	f016 ff35 	bl	801856a <fmaxf>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f993 	bl	8001a38 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001712:	e00d      	b.n	8001730 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f81f 	bl	8001758 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f85e 	bl	80017e6 <evaluate_polyfit>
            compute_reference_error(control_data);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f960 	bl	80019f0 <compute_reference_error>
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	ecbd 8b02 	vpop	{d8}
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	bf00      	nop
 8001740:	00000000 	.word	0x00000000
 8001744:	3c23d70a 	.word	0x3c23d70a
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3fe19999 	.word	0x3fe19999
 8001750:	e41d1d5e 	.word	0xe41d1d5e
 8001754:	3fdfc917 	.word	0x3fdfc917

08001758 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe3 	bl	8001758 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe75 	bl	80014a0 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e00d      	b.n	80017d8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3305      	adds	r3, #5
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	441a      	add	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	ddee      	ble.n	80017bc <control_data_init+0x38>
    }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}

080017e6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 80017e6:	b5b0      	push	{r4, r5, r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e00d      	b.n	800181c <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3305      	adds	r3, #5
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	441a      	add	r2, r3
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	2b02      	cmp	r3, #2
 8001820:	ddee      	ble.n	8001800 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e07b      	b.n	800192c <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fea5 	bl	8000588 <__aeabi_f2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f1c3 031e 	rsb	r3, r3, #30
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe8b 	bl	8000564 <__aeabi_i2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ec43 2b11 	vmov	d1, r2, r3
 8001856:	ec45 4b10 	vmov	d0, r4, r5
 800185a:	f016 fed9 	bl	8018610 <pow>
 800185e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3308      	adds	r3, #8
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187a:	f7fe fedd 	bl	8000638 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fd21 	bl	80002cc <__adddf3>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3327      	adds	r3, #39	; 0x27
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ac:	f7fe fec4 	bl	8000638 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd08 	bl	80002cc <__adddf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3346      	adds	r3, #70	; 0x46
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018de:	f7fe feab 	bl	8000638 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fcef 	bl	80002cc <__adddf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3365      	adds	r3, #101	; 0x65
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190a:	f7fe fe95 	bl	8000638 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191a:	f7fe fcd7 	bl	80002cc <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b1e      	cmp	r3, #30
 8001930:	dd80      	ble.n	8001834 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001932:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001936:	f7ff f92f 	bl	8000b98 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	615a      	str	r2, [r3, #20]
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}

08001948 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe17 	bl	8000588 <__aeabi_f2d>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	461a      	mov	r2, r3
 8001960:	4623      	mov	r3, r4
 8001962:	a11f      	add	r1, pc, #124	; (adr r1, 80019e0 <compute_antiwindup_boundaries+0x98>)
 8001964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001968:	f7fe fcae 	bl	80002c8 <__aeabi_dsub>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	4618      	mov	r0, r3
 8001972:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001974:	a31c      	add	r3, pc, #112	; (adr r3, 80019e8 <compute_antiwindup_boundaries+0xa0>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe5d 	bl	8000638 <__aeabi_dmul>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f907 	bl	8000b98 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001990:	ee00 3a10 	vmov	s0, r3
 8001994:	f016 fde9 	bl	801856a <fmaxf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdee 	bl	8000588 <__aeabi_f2d>
 80019ac:	a30c      	add	r3, pc, #48	; (adr r3, 80019e0 <compute_antiwindup_boundaries+0x98>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7ff f8d1 	bl	8000b58 <__aeabi_dcmpgt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019ca:	eef1 7a67 	vneg.f32	s15, s15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	f3af 8000 	nop.w
 80019e0:	7417f6de 	.word	0x7417f6de
 80019e4:	4095dc93 	.word	0x4095dc93
 80019e8:	47ae147b 	.word	0x47ae147b
 80019ec:	3f747ae1 	.word	0x3f747ae1

080019f0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80019fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d504      	bpl.n	8001a12 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 8001a10:	e00a      	b.n	8001a28 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0000      	movs	r0, r0
	...

08001a38 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9e 	bl	8000588 <__aeabi_f2d>
 8001a4c:	a30c      	add	r3, pc, #48	; (adr r3, 8001a80 <check_apogee_approach_phase+0x48>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7ff f863 	bl	8000b1c <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8c1b      	ldrh	r3, [r3, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8c1b      	ldrh	r3, [r3, #32]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d903      	bls.n	8001a78 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3fb99999 	.word	0x3fb99999

08001a88 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001a90:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001ab0 <init_env+0x28>
 8001a94:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f80d 	bl	8001ab8 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001a9e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f82c 	bl	8001b00 <update_env>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	47c5e680 	.word	0x47c5e680
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ac4:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fd5d 	bl	8000588 <__aeabi_f2d>
 8001ace:	a30a      	add	r3, pc, #40	; (adr r3, 8001af8 <calibrate_env+0x40>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fbfa 	bl	80002cc <__adddf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f7ff f85a 	bl	8000b98 <__aeabi_d2f>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	66666666 	.word	0x66666666
 8001afc:	40711266 	.word	0x40711266

08001b00 <update_env>:

void update_env(env_t *env, float T) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	a317      	add	r3, pc, #92	; (adr r3, 8001b70 <update_env+0x70>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fbd8 	bl	80002cc <__adddf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7ff f838 	bl	8000b98 <__aeabi_d2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	a30f      	add	r3, pc, #60	; (adr r3, 8001b78 <update_env+0x78>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7ff f825 	bl	8000b98 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001b54:	ee00 3a10 	vmov	s0, r3
 8001b58:	f016 ff24 	bl	80189a4 <powf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	66666666 	.word	0x66666666
 8001b74:	40711266 	.word	0x40711266
 8001b78:	8c1557b7 	.word	0x8c1557b7
 8001b7c:	40791e2f 	.word	0x40791e2f

08001b80 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001b8c:	edd7 7a00 	vldr	s15, [r7]
 8001b90:	eef0 6ae7 	vabs.f32	s13, s15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	ee07 3a90 	vmov	s15, r3
}
 8001ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e043      	b.n	8001c54 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcd3 	bl	8000588 <__aeabi_f2d>
 8001be2:	a322      	add	r3, pc, #136	; (adr r3, 8001c6c <pressure2altitudeAGL+0xb4>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe50 	bl	800088c <__aeabi_ddiv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4625      	mov	r5, r4
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c0a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001c68 <pressure2altitudeAGL+0xb0>
 8001c0e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c12:	f016 fec7 	bl	80189a4 <powf>
 8001c16:	eeb0 7a40 	vmov.f32	s14, s0
 8001c1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	18d4      	adds	r4, r2, r3
 8001c46:	f7fe ffa7 	bl	8000b98 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbb7      	blt.n	8001bcc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	3e42c4dc 	.word	0x3e42c4dc
 8001c6c:	76c8b439 	.word	0x76c8b439
 8001c70:	3f7a9fbe 	.word	0x3f7a9fbe
 8001c74:	00000000 	.word	0x00000000

08001c78 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	ed2d 8b02 	vpush	{d8}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e047      	b.n	8001d20 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03e      	beq.n	8001d1a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	ed93 8a00 	vldr	s16, [r3]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc6b 	bl	8000588 <__aeabi_f2d>
 8001cb2:	a323      	add	r3, pc, #140	; (adr r3, 8001d40 <altitudeAGL2pressure+0xc8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4625      	mov	r5, r4
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc5d 	bl	8000588 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fdd9 	bl	800088c <__aeabi_ddiv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	4914      	ldr	r1, [pc, #80]	; (8001d38 <altitudeAGL2pressure+0xc0>)
 8001ce8:	f7fe faee 	bl	80002c8 <__aeabi_dsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f7fe ff50 	bl	8000b98 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001d3c <altitudeAGL2pressure+0xc4>
 8001cfe:	ee00 3a10 	vmov	s0, r3
 8001d02:	f016 fe4f 	bl	80189a4 <powf>
 8001d06:	eef0 7a40 	vmov.f32	s15, s0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d10:	4413      	add	r3, r2
 8001d12:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbb3      	blt.n	8001c90 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	ecbd 8b02 	vpop	{d8}
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	3ff00000 	.word	0x3ff00000
 8001d3c:	40a83d87 	.word	0x40a83d87
 8001d40:	76c8b439 	.word	0x76c8b439
 8001d44:	3f7a9fbe 	.word	0x3f7a9fbe

08001d48 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fc15 	bl	8000588 <__aeabi_f2d>
 8001d5e:	a323      	add	r3, pc, #140	; (adr r3, 8001dec <altitude_gradient+0xa4>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	4625      	mov	r5, r4
 8001d6e:	461c      	mov	r4, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fc07 	bl	8000588 <__aeabi_f2d>
 8001d7a:	a31e      	add	r3, pc, #120	; (adr r3, 8001df4 <altitude_gradient+0xac>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc5a 	bl	8000638 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fd7e 	bl	800088c <__aeabi_ddiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4625      	mov	r5, r4
 8001d96:	461c      	mov	r4, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed97 7a00 	vldr	s14, [r7]
 8001da2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001da6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001de8 <altitude_gradient+0xa0>
 8001daa:	eeb0 0a66 	vmov.f32	s0, s13
 8001dae:	f016 fdf9 	bl	80189a4 <powf>
 8001db2:	ee10 3a10 	vmov	r3, s0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fc38 	bl	8000638 <__aeabi_dmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4621      	mov	r1, r4
 8001dd0:	f7fe fee2 	bl	8000b98 <__aeabi_d2f>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ee07 3a90 	vmov	s15, r3
}
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	bf4f4ec9 	.word	0xbf4f4ec9
 8001dec:	640f3ea7 	.word	0x640f3ea7
 8001df0:	c071f0fd 	.word	0xc071f0fd
 8001df4:	51eb851f 	.word	0x51eb851f
 8001df8:	40239eb8 	.word	0x40239eb8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	f200 80a6 	bhi.w	8001f64 <detect_flight_phase+0x164>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <detect_flight_phase+0x20>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e35 	.word	0x08001e35
 8001e24:	08001f65 	.word	0x08001f65
 8001e28:	08001e83 	.word	0x08001e83
 8001e2c:	08001ecd 	.word	0x08001ecd
 8001e30:	08001f17 	.word	0x08001f17
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e40:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002000 <detect_flight_phase+0x200>
 8001e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dc00      	bgt.n	8001e58 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001e56:	e087      	b.n	8001f68 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	dd79      	ble.n	8001f68 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	721a      	strb	r2, [r3, #8]
        break;
 8001e80:	e072      	b.n	8001f68 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002000 <detect_flight_phase+0x200>
 8001e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d400      	bmi.n	8001ea2 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001ea0:	e064      	b.n	8001f6c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	dd56      	ble.n	8001f6c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	721a      	strb	r2, [r3, #8]
        break;
 8001eca:	e04f      	b.n	8001f6c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002000 <detect_flight_phase+0x200>
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d400      	bmi.n	8001eec <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001eea:	e041      	b.n	8001f70 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	dd33      	ble.n	8001f70 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2205      	movs	r2, #5
 8001f0c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	721a      	strb	r2, [r3, #8]
        break;
 8001f14:	e02c      	b.n	8001f70 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002000 <detect_flight_phase+0x200>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d400      	bmi.n	8001f3a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001f38:	e01c      	b.n	8001f74 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	b25a      	sxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	dd0e      	ble.n	8001f74 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	721a      	strb	r2, [r3, #8]
        break;
 8001f62:	e007      	b.n	8001f74 <detect_flight_phase+0x174>

        default:
        break;
 8001f64:	bf00      	nop
 8001f66:	e006      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f68:	bf00      	nop
 8001f6a:	e004      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f6c:	bf00      	nop
 8001f6e:	e002      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f74:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002000 <detect_flight_phase+0x200>
 8001f86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fdf6 	bl	8001b80 <mach_number>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe faf0 	bl	8000588 <__aeabi_f2d>
 8001fa8:	a311      	add	r3, pc, #68	; (adr r3, 8001ff0 <detect_flight_phase+0x1f0>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fdc9 	bl	8000b44 <__aeabi_dcmpge>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8001fbe:	e013      	b.n	8001fe8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fadf 	bl	8000588 <__aeabi_f2d>
 8001fca:	a30b      	add	r3, pc, #44	; (adr r3, 8001ff8 <detect_flight_phase+0x1f8>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fdb8 	bl	8000b44 <__aeabi_dcmpge>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	705a      	strb	r2, [r3, #1]
}
 8001fe0:	e002      	b.n	8001fe8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	3ff4cccc 	.word	0x3ff4cccc
 8001ff8:	9999999a 	.word	0x9999999a
 8001ffc:	3fe99999 	.word	0x3fe99999
 8002000:	447a0000 	.word	0x447a0000

08002004 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	721a      	strb	r2, [r3, #8]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b0b0      	sub	sp, #192	; 0xc0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800203c:	4b45      	ldr	r3, [pc, #276]	; (8002154 <reset_kf_state+0x120>)
 800203e:	f107 040c 	add.w	r4, r7, #12
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <reset_kf_state+0x124>)
 8002052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002056:	ca07      	ldmia	r2, {r0, r1, r2}
 8002058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <reset_kf_state+0x124>)
 800205e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002062:	ca07      	ldmia	r2, {r0, r1, r2}
 8002064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f107 010c 	add.w	r1, r7, #12
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	4618      	mov	r0, r3
 8002072:	f015 fe57 	bl	8017d24 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3348      	adds	r3, #72	; 0x48
 800207a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800207e:	220c      	movs	r2, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f015 fe4f 	bl	8017d24 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3354      	adds	r3, #84	; 0x54
 800208a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800208e:	220c      	movs	r2, #12
 8002090:	4618      	mov	r0, r3
 8002092:	f015 fe47 	bl	8017d24 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <reset_kf_state+0x128>)
 80020b0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80020b4:	461d      	mov	r5, r3
 80020b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020be:	682b      	ldr	r3, [r5, #0]
 80020c0:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80020c8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80020cc:	220c      	movs	r2, #12
 80020ce:	4618      	mov	r0, r3
 80020d0:	f015 fe28 	bl	8017d24 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80020da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f015 fe1f 	bl	8017d24 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	33b4      	adds	r3, #180	; 0xb4
 80020ea:	2204      	movs	r2, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f015 fe23 	bl	8017d3a <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	33b8      	adds	r3, #184	; 0xb8
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f015 fe1c 	bl	8017d3a <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002108:	220c      	movs	r2, #12
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f015 fe14 	bl	8017d3a <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002118:	2203      	movs	r2, #3
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f015 fe0c 	bl	8017d3a <memset>
    kf_state->num_z_active = 0;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3324      	adds	r3, #36	; 0x24
 8002130:	2103      	movs	r1, #3
 8002132:	2003      	movs	r0, #3
 8002134:	f000 fd48 	bl	8002bc8 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2101      	movs	r1, #1
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fd3f 	bl	8002bc8 <transpose>
}
 800214a:	bf00      	nop
 800214c:	37c0      	adds	r7, #192	; 0xc0
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	0801a610 	.word	0x0801a610
 8002158:	0801a634 	.word	0x0801a634
 800215c:	0801a640 	.word	0x0801a640

08002160 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002176:	2201      	movs	r2, #1
 8002178:	9201      	str	r2, [sp, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	2103      	movs	r1, #3
 8002182:	2003      	movs	r0, #3
 8002184:	f000 ff4a 	bl	800301c <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800219a:	2200      	movs	r2, #0
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4603      	mov	r3, r0
 80021a2:	460a      	mov	r2, r1
 80021a4:	2101      	movs	r1, #1
 80021a6:	2003      	movs	r0, #3
 80021a8:	f000 ff38 	bl	800301c <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	f502 7205 	add.w	r2, r2, #532	; 0x214
 80021ba:	2101      	movs	r1, #1
 80021bc:	9102      	str	r1, [sp, #8]
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fe8d 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	33b4      	adds	r3, #180	; 0xb4
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80021de:	2101      	movs	r1, #1
 80021e0:	9102      	str	r1, [sp, #8]
 80021e2:	9201      	str	r2, [sp, #4]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	2201      	movs	r2, #1
 80021ea:	2101      	movs	r1, #1
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 fe7b 	bl	8002ee8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3324      	adds	r3, #36	; 0x24
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002202:	2101      	movs	r1, #1
 8002204:	9102      	str	r1, [sp, #8]
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4603      	mov	r3, r0
 800220c:	2203      	movs	r2, #3
 800220e:	2103      	movs	r1, #3
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fe69 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 700e 	add.w	r0, r3, #568	; 0x238
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002226:	2100      	movs	r1, #0
 8002228:	9102      	str	r1, [sp, #8]
 800222a:	9201      	str	r2, [sp, #4]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4603      	mov	r3, r0
 8002230:	2203      	movs	r2, #3
 8002232:	2101      	movs	r1, #1
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fe57 	bl	8002ee8 <matmul>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	336c      	adds	r3, #108	; 0x6c
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f015 fd71 	bl	8017d3a <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e01e      	b.n	800229c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	336c      	adds	r3, #108	; 0x6c
 800227e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	33b8      	adds	r3, #184	; 0xb8
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	dddd      	ble.n	800225e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3390      	adds	r3, #144	; 0x90
 80022ac:	2103      	movs	r1, #3
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 fc8a 	bl	8002bc8 <transpose>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <kf_update>:

void kf_update(kf_state_t *kf_state) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022d6:	2201      	movs	r2, #1
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4603      	mov	r3, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	2103      	movs	r1, #3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 fe9a 	bl	800301c <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fce3 	bl	8002cc6 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8002312:	2101      	movs	r1, #1
 8002314:	9102      	str	r1, [sp, #8]
 8002316:	9201      	str	r2, [sp, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4603      	mov	r3, r0
 800231c:	2203      	movs	r2, #3
 800231e:	2103      	movs	r1, #3
 8002320:	2003      	movs	r0, #3
 8002322:	f000 fde1 	bl	8002ee8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 7011 	add.w	r0, r3, #580	; 0x244
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3390      	adds	r3, #144	; 0x90
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002336:	2101      	movs	r1, #1
 8002338:	9102      	str	r1, [sp, #8]
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	2203      	movs	r2, #3
 8002342:	2103      	movs	r1, #3
 8002344:	2003      	movs	r0, #3
 8002346:	f000 fdcf 	bl	8002ee8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	2103      	movs	r1, #3
 8002362:	2003      	movs	r0, #3
 8002364:	f000 fcda 	bl	8002d1c <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f015 fce1 	bl	8017d3a <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002384:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002494 <kf_update+0x1d8>
 8002388:	461a      	mov	r2, r3
 800238a:	2003      	movs	r0, #3
 800238c:	f001 f812 	bl	80033b4 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3390      	adds	r3, #144	; 0x90
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80023a0:	2101      	movs	r1, #1
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	2203      	movs	r2, #3
 80023ac:	2103      	movs	r1, #3
 80023ae:	2003      	movs	r0, #3
 80023b0:	f000 fd9a 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f503 701a 	add.w	r0, r3, #616	; 0x268
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 80023c6:	2101      	movs	r1, #1
 80023c8:	9102      	str	r1, [sp, #8]
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4603      	mov	r3, r0
 80023d0:	2203      	movs	r2, #3
 80023d2:	2103      	movs	r1, #3
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 fd87 	bl	8002ee8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80023ec:	2201      	movs	r2, #1
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	2103      	movs	r1, #3
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 fe0f 	bl	800301c <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002410:	2003      	movs	r0, #3
 8002412:	f000 fc2d 	bl	8002c70 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800241c:	4619      	mov	r1, r3
 800241e:	2003      	movs	r0, #3
 8002420:	f000 fb86 	bl	8002b30 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	336c      	adds	r3, #108	; 0x6c
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002434:	2101      	movs	r1, #1
 8002436:	9102      	str	r1, [sp, #8]
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	2203      	movs	r2, #3
 8002440:	2103      	movs	r1, #3
 8002442:	2003      	movs	r0, #3
 8002444:	f000 fd50 	bl	8002ee8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	460b      	mov	r3, r1
 800245e:	2103      	movs	r1, #3
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fcce 	bl	8002e02 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002478:	2101      	movs	r1, #1
 800247a:	9102      	str	r1, [sp, #8]
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	2203      	movs	r2, #3
 8002484:	2103      	movs	r1, #3
 8002486:	2003      	movs	r0, #3
 8002488:	f000 fd2e 	bl	8002ee8 <matmul>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	38d1b717 	.word	0x38d1b717

08002498 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80024a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002530 <update_state_est_data+0x98>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002530 <update_state_est_data+0x98>
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ce:	ee17 2a90 	vmov	r2, s15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002530 <update_state_est_data+0x98>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 2a90 	vmov	r2, s15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80024f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002530 <update_state_est_data+0x98>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 2a90 	vmov	r2, s15
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002510:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002530 <update_state_est_data+0x98>
 8002514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 2a90 	vmov	r2, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	447a0000 	.word	0x447a0000
 8002534:	00000000 	.word	0x00000000

08002538 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b095      	sub	sp, #84	; 0x54
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002546:	2300      	movs	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	e09a      	b.n	8002682 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3308      	adds	r3, #8
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4403      	add	r3, r0
 800256c:	3308      	adds	r3, #8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4299      	cmp	r1, r3
 8002572:	d92b      	bls.n	80025cc <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	3362      	adds	r3, #98	; 0x62
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002594:	4413      	add	r3, r2
 8002596:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3304      	adds	r3, #4
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80025b8:	440b      	add	r3, r1
 80025ba:	3b20      	subs	r3, #32
 80025bc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 80025be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	4413      	add	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e01d      	b.n	8002608 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	3362      	adds	r3, #98	; 0x62
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025f2:	4413      	add	r3, r2
 80025f4:	3b20      	subs	r3, #32
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80025fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	4413      	add	r3, r2
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4299      	cmp	r1, r3
 800262e:	d916      	bls.n	800265e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800264a:	440b      	add	r3, r1
 800264c:	3b30      	subs	r3, #48	; 0x30
 800264e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002650:	f107 0214 	add.w	r2, r7, #20
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	4413      	add	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e00e      	b.n	800267c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002666:	4413      	add	r3, r2
 8002668:	3b30      	subs	r3, #48	; 0x30
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002670:	f107 0214 	add.w	r2, r7, #20
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	4413      	add	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	3301      	adds	r3, #1
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
 8002682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002684:	2b02      	cmp	r3, #2
 8002686:	f77f af61 	ble.w	800254c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002696:	461a      	mov	r2, r3
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f975 	bl	8002988 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 800269e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	4619      	mov	r1, r3
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f96d 	bl	8002988 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80026ae:	f107 0214 	add.w	r2, r7, #20
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	4619      	mov	r1, r3
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f965 	bl	8002988 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e049      	b.n	8002778 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002702:	f107 0214 	add.w	r2, r7, #20
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800271e:	4413      	add	r3, r2
 8002720:	3b30      	subs	r3, #48	; 0x30
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	3301      	adds	r3, #1
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800273e:	4413      	add	r3, r2
 8002740:	3b20      	subs	r3, #32
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d010      	beq.n	8002772 <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002758:	4413      	add	r3, r2
 800275a:	3b20      	subs	r3, #32
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	3301      	adds	r3, #1
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3301      	adds	r3, #1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	2b02      	cmp	r3, #2
 800277c:	ddb2      	ble.n	80026e4 <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	2103      	movs	r1, #3
 8002796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002798:	f7ff fa0e 	bl	8001bb8 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 800279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dd21      	ble.n	80027e6 <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	a313      	add	r3, pc, #76	; (adr r3, 8002818 <process_measurements+0x2e0>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd7b 	bl	80002c8 <__aeabi_dsub>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	4618      	mov	r0, r3
 80027d8:	4621      	mov	r1, r4
 80027da:	f7fe f9dd 	bl	8000b98 <__aeabi_d2f>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd0f      	ble.n	800280c <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80027fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 8002802:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002806:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002808:	f7ff f97a 	bl	8001b00 <update_env>
    }
} 
 800280c:	bf00      	nop
 800280e:	374c      	adds	r7, #76	; 0x4c
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	51eb851f 	.word	0x51eb851f
 800281c:	40239eb8 	.word	0x40239eb8

08002820 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b091      	sub	sp, #68	; 0x44
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b05      	cmp	r3, #5
 8002836:	d823      	bhi.n	8002880 <select_noise_models+0x60>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <select_noise_models+0x20>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002859 	.word	0x08002859
 8002844:	08002859 	.word	0x08002859
 8002848:	08002863 	.word	0x08002863
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002877 	.word	0x08002877
 8002854:	08002859 	.word	0x08002859
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <select_noise_models+0x148>)
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <select_noise_models+0x14c>)
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002860:	e00e      	b.n	8002880 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <select_noise_models+0x150>)
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <select_noise_models+0x154>)
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800286a:	e009      	b.n	8002880 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <select_noise_models+0x158>)
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <select_noise_models+0x15c>)
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002874:	e004      	b.n	8002880 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <select_noise_models+0x160>)
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <select_noise_models+0x164>)
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800287e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	e01b      	b.n	80028be <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002888:	f7fd fe7e 	bl	8000588 <__aeabi_f2d>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002960 <select_noise_models+0x140>
 8002894:	ec44 3b10 	vmov	d0, r3, r4
 8002898:	f015 feba 	bl	8018610 <pow>
 800289c:	ec54 3b10 	vmov	r3, r4, d0
 80028a0:	4618      	mov	r0, r3
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fe f978 	bl	8000b98 <__aeabi_d2f>
 80028a8:	4601      	mov	r1, r0
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3316      	adds	r3, #22
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	3301      	adds	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dde0      	ble.n	8002886 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80028ca:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 80028cc:	2301      	movs	r3, #1
 80028ce:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80028d0:	f107 0114 	add.w	r1, r7, #20
 80028d4:	f107 0218 	add.w	r2, r7, #24
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	2101      	movs	r1, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f9c8 	bl	8001c78 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa29 	bl	8001d48 <altitude_gradient>
 80028f6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80028fa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	eef0 7ae7 	vabs.f32	s15, s15
 800290a:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	e01a      	b.n	800294a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002914:	6a38      	ldr	r0, [r7, #32]
 8002916:	f7fd fe37 	bl	8000588 <__aeabi_f2d>
 800291a:	4603      	mov	r3, r0
 800291c:	460c      	mov	r4, r1
 800291e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002960 <select_noise_models+0x140>
 8002922:	ec44 3b10 	vmov	d0, r3, r4
 8002926:	f015 fe73 	bl	8018610 <pow>
 800292a:	ec54 3b10 	vmov	r3, r4, d0
 800292e:	4618      	mov	r0, r3
 8002930:	4621      	mov	r1, r4
 8002932:	f7fe f931 	bl	8000b98 <__aeabi_d2f>
 8002936:	4601      	mov	r1, r0
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	33b8      	adds	r3, #184	; 0xb8
 8002942:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	3301      	adds	r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	dde1      	ble.n	8002914 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002958:	bf00      	nop
 800295a:	373c      	adds	r7, #60	; 0x3c
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	00000000 	.word	0x00000000
 8002964:	40000000 	.word	0x40000000
 8002968:	3c97e316 	.word	0x3c97e316
 800296c:	3fef3b64 	.word	0x3fef3b64
 8002970:	3fa01965 	.word	0x3fa01965
 8002974:	41500000 	.word	0x41500000
 8002978:	3f1e3737 	.word	0x3f1e3737
 800297c:	40ec28f6 	.word	0x40ec28f6
 8002980:	3ffa41cc 	.word	0x3ffa41cc
 8002984:	40795810 	.word	0x40795810

08002988 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e017      	b.n	80029d4 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbe3      	blt.n	80029a4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dd0a      	ble.n	80029f8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80029f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e033      	b.n	8002a6c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02a      	beq.n	8002a66 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4413      	add	r3, r2
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fdae 	bl	8000588 <__aeabi_f2d>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002b28 <sensor_elimination_by_stdev+0x1a0>
 8002a34:	ec44 3b10 	vmov	d0, r3, r4
 8002a38:	f015 fdea 	bl	8018610 <pow>
 8002a3c:	ec56 5b10 	vmov	r5, r6, d0
 8002a40:	69b8      	ldr	r0, [r7, #24]
 8002a42:	f7fd fda1 	bl	8000588 <__aeabi_f2d>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4631      	mov	r1, r6
 8002a52:	f7fd fc3b 	bl	80002cc <__adddf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	f7fe f89b 	bl	8000b98 <__aeabi_d2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbc7      	blt.n	8002a04 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd1a      	ble.n	8002ab0 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a8c:	ee16 0a90 	vmov	r0, s13
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	ec44 3b10 	vmov	d0, r3, r4
 8002a9c:	f015 ff28 	bl	80188f0 <sqrt>
 8002aa0:	ec54 3b10 	vmov	r3, r4, d0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f7fe f876 	bl	8000b98 <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e02f      	b.n	8002b16 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d026      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	eef0 7ae7 	vabs.f32	s15, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fd53 	bl	8000588 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	69b8      	ldr	r0, [r7, #24]
 8002ae8:	f7fd fd4e 	bl	8000588 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f7fd fbec 	bl	80002cc <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fe f82c 	bl	8000b58 <__aeabi_dcmpgt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3301      	adds	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbcb      	blt.n	8002ab6 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8002b1e:	bf00      	nop
 8002b20:	372c      	adds	r7, #44	; 0x2c
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40000000 	.word	0x40000000

08002b30 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8002b30:	b490      	push	{r4, r7}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	1e43      	subs	r3, r0, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	0154      	lsls	r4, r2, #5
 8002b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b56:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e02b      	b.n	8002bb6 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e021      	b.n	8002ba8 <eye+0x78>
            if (i == j){
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <eye+0x58>
				A[i][j] = 1;
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	fb03 f302 	mul.w	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	441a      	add	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <eye+0x72>
			} else {
				A[i][j] = 0;
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fb03 f302 	mul.w	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbd9      	blt.n	8002b64 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbcf      	blt.n	8002b5e <eye+0x2e>
			}
        }
    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc90      	pop	{r4, r7}
 8002bc6:	4770      	bx	lr

08002bc8 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002bc8:	b4b0      	push	{r4, r5, r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	1e43      	subs	r3, r0, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	0154      	lsls	r4, r2, #5
 8002bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf2:	014b      	lsls	r3, r1, #5
 8002bf4:	68fd      	ldr	r5, [r7, #12]
 8002bf6:	1e6b      	subs	r3, r5, #1
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0154      	lsls	r4, r2, #5
 8002c0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c10:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e022      	b.n	8002c5e <transpose+0x96>
		for(int j = 0; j < n; j++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e018      	b.n	8002c50 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fb03 f302 	mul.w	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fb03 f301 	mul.w	r3, r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4419      	add	r1, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbe2      	blt.n	8002c1e <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	dbd8      	blt.n	8002c18 <transpose+0x50>
		}
	}
}
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bcb0      	pop	{r4, r5, r7}
 8002c6e:	4770      	bx	lr

08002c70 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e016      	b.n	8002cb2 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbe4      	blt.n	8002c84 <vecadd+0x14>
	}
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e016      	b.n	8002d08 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbe4      	blt.n	8002cda <vecsub+0x14>
	}
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002d1c:	b4f0      	push	{r4, r5, r6, r7}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	1e43      	subs	r3, r0, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	68bd      	ldr	r5, [r7, #8]
 8002d4a:	1e6b      	subs	r3, r5, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	462b      	mov	r3, r5
 8002d50:	4619      	mov	r1, r3
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0154      	lsls	r4, r2, #5
 8002d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d64:	014b      	lsls	r3, r1, #5
 8002d66:	68be      	ldr	r6, [r7, #8]
 8002d68:	1e73      	subs	r3, r6, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	4633      	mov	r3, r6
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0154      	lsls	r4, r2, #5
 8002d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d82:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e032      	b.n	8002df0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	e028      	b.n	8002de2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002d90:	4602      	mov	r2, r0
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fb03 f302 	mul.w	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	ed93 7a00 	vldr	s14, [r3]
 8002da8:	462a      	mov	r2, r5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fb03 f302 	mul.w	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	441a      	add	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fb03 f302 	mul.w	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dcc:	441a      	add	r2, r3
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	3301      	adds	r3, #1
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbd2      	blt.n	8002d90 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbc8      	blt.n	8002d8a <matadd+0x6e>
        }
    }
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8002e00:	4770      	bx	lr

08002e02 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002e02:	b4f0      	push	{r4, r5, r6, r7}
 8002e04:	b08a      	sub	sp, #40	; 0x28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	1e43      	subs	r3, r0, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0154      	lsls	r4, r2, #5
 8002e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e2c:	014b      	lsls	r3, r1, #5
 8002e2e:	68bd      	ldr	r5, [r7, #8]
 8002e30:	1e6b      	subs	r3, r5, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	462b      	mov	r3, r5
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	0154      	lsls	r4, r2, #5
 8002e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4a:	014b      	lsls	r3, r1, #5
 8002e4c:	68be      	ldr	r6, [r7, #8]
 8002e4e:	1e73      	subs	r3, r6, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	4633      	mov	r3, r6
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0154      	lsls	r4, r2, #5
 8002e64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e68:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e032      	b.n	8002ed6 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	e028      	b.n	8002ec8 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002e76:	4602      	mov	r2, r0
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fb03 f302 	mul.w	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	441a      	add	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	462a      	mov	r2, r5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fb03 f302 	mul.w	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fb03 f302 	mul.w	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	441a      	add	r2, r3
 8002eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbd2      	blt.n	8002e76 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbc8      	blt.n	8002e70 <matsub+0x6e>
        }
    }
}
 8002ede:	bf00      	nop
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bcf0      	pop	{r4, r5, r6, r7}
 8002ee6:	4770      	bx	lr

08002ee8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b08d      	sub	sp, #52	; 0x34
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6178      	str	r0, [r7, #20]
 8002ef0:	6139      	str	r1, [r7, #16]
 8002ef2:	60fa      	str	r2, [r7, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	693e      	ldr	r6, [r7, #16]
 8002ef8:	1e73      	subs	r3, r6, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	4633      	mov	r3, r6
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	0154      	lsls	r4, r2, #5
 8002f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f34:	014b      	lsls	r3, r1, #5
 8002f36:	68fd      	ldr	r5, [r7, #12]
 8002f38:	1e6b      	subs	r3, r5, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	0154      	lsls	r4, r2, #5
 8002f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f52:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002f54:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f6c:	f014 fee5 	bl	8017d3a <memset>
	}
	for(int i = 0; i < m; i++){
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e04a      	b.n	800300c <matmul+0x124>
        for(int j = 0; j < o; j++){
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	e040      	b.n	8002ffe <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	e036      	b.n	8002ff0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002f82:	4632      	mov	r2, r6
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fb03 f302 	mul.w	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	441a      	add	r2, r3
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	ed93 7a00 	vldr	s14, [r3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	fb03 f302 	mul.w	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb6:	462a      	mov	r2, r5
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	fb03 f302 	mul.w	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	462a      	mov	r2, r5
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fb03 f302 	mul.w	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fda:	441a      	add	r2, r3
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	3301      	adds	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbc4      	blt.n	8002f82 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	429a      	cmp	r2, r3
 8003004:	dbba      	blt.n	8002f7c <matmul+0x94>
	for(int i = 0; i < m; i++){
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbb0      	blt.n	8002f76 <matmul+0x8e>
            }
        }
    }
}
 8003014:	bf00      	nop
 8003016:	3734      	adds	r7, #52	; 0x34
 8003018:	46bd      	mov	sp, r7
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301c <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	68bd      	ldr	r5, [r7, #8]
 800302c:	1e6b      	subs	r3, r5, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	462b      	mov	r3, r5
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	0154      	lsls	r4, r2, #5
 8003042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003046:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003048:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f014 fe6e 	bl	8017d3a <memset>
	}
	for(int i = 0; i < m; i++){
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e02e      	b.n	80030c2 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e024      	b.n	80030b4 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800306a:	462a      	mov	r2, r5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fb03 f302 	mul.w	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	441a      	add	r2, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	4413      	add	r3, r2
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbd6      	blt.n	800306a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3301      	adds	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbcc      	blt.n	8003064 <matvecprod+0x48>
        }
    }
}
 80030ca:	bf00      	nop
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bdb0      	pop	{r4, r5, r7, pc}

080030d2 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 80030d2:	b480      	push	{r7}
 80030d4:	b08b      	sub	sp, #44	; 0x2c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e01d      	b.n	8003122 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d102      	bne.n	80030fc <lower_triangular_inverse+0x2a>
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e076      	b.n	80031ea <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbdd      	blt.n	80030e6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e052      	b.n	80031e0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e041      	b.n	80031c8 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e01b      	b.n	800318c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	ed97 7a03 	vldr	s14, [r7, #12]
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	429a      	cmp	r2, r3
 8003192:	dbdf      	blt.n	8003154 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eeb1 7a67 	vneg.f32	s14, s15
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	3301      	adds	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbb9      	blt.n	8003144 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3301      	adds	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dba8      	blt.n	800313a <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	372c      	adds	r7, #44	; 0x2c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80031f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031fc:	b08b      	sub	sp, #44	; 0x2c
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	68fe      	ldr	r6, [r7, #12]
 8003208:	1e73      	subs	r3, r6, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	4633      	mov	r3, r6
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0154      	lsls	r4, r2, #5
 800321e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003222:	014b      	lsls	r3, r1, #5
 8003224:	68fd      	ldr	r5, [r7, #12]
 8003226:	1e6b      	subs	r3, r5, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	462b      	mov	r3, r5
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	0154      	lsls	r4, r2, #5
 800323c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003240:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f014 fd72 	bl	8017d3a <memset>
    for (int i = 0; i < n; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e09f      	b.n	800339c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e093      	b.n	800338a <cholesky+0x192>
            float s = 0;
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e022      	b.n	80032b4 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800326e:	462a      	mov	r2, r5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fb03 f302 	mul.w	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	441a      	add	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	462a      	mov	r2, r5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fb03 f302 	mul.w	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	441a      	add	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbd8      	blt.n	800326e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d116      	bne.n	80032f2 <cholesky+0xfa>
 80032c4:	4632      	mov	r2, r6
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	fb03 f302 	mul.w	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	441a      	add	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	eeb0 0a67 	vmov.f32	s0, s15
 80032e8:	f015 fcc0 	bl	8018c6c <sqrtf>
 80032ec:	ee10 1a10 	vmov	r1, s0
 80032f0:	e03d      	b.n	800336e <cholesky+0x176>
 80032f2:	462a      	mov	r2, r5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	fb03 f302 	mul.w	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	441a      	add	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f93d 	bl	8000588 <__aeabi_f2d>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	4925      	ldr	r1, [pc, #148]	; (80033b0 <cholesky+0x1b8>)
 800331c:	f7fd fab6 	bl	800088c <__aeabi_ddiv>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	4698      	mov	r8, r3
 8003326:	46a1      	mov	r9, r4
 8003328:	4632      	mov	r2, r6
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	fb03 f302 	mul.w	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	441a      	add	r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	edd7 7a08 	vldr	s15, [r7, #32]
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	ee17 0a90 	vmov	r0, s15
 800334c:	f7fd f91c 	bl	8000588 <__aeabi_f2d>
 8003350:	4603      	mov	r3, r0
 8003352:	460c      	mov	r4, r1
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	4640      	mov	r0, r8
 800335a:	4649      	mov	r1, r9
 800335c:	f7fd f96c 	bl	8000638 <__aeabi_dmul>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	4618      	mov	r0, r3
 8003366:	4621      	mov	r1, r4
 8003368:	f7fd fc16 	bl	8000b98 <__aeabi_d2f>
 800336c:	4601      	mov	r1, r0
 800336e:	462a      	mov	r2, r5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fb03 f302 	mul.w	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	441a      	add	r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	f6ff af66 	blt.w	8003262 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f6ff af5b 	blt.w	800325c <cholesky+0x64>
        }
}
 80033a6:	bf00      	nop
 80033a8:	372c      	adds	r7, #44	; 0x2c
 80033aa:	46bd      	mov	sp, r7
 80033ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b0:	3ff00000 	.word	0x3ff00000

080033b4 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	b090      	sub	sp, #64	; 0x40
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	ed87 0a00 	vstr	s0, [r7]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0154      	lsls	r4, r2, #5
 80033dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e0:	014b      	lsls	r3, r1, #5
 80033e2:	68fd      	ldr	r5, [r7, #12]
 80033e4:	1e6b      	subs	r3, r5, #1
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e8:	462b      	mov	r3, r5
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	0154      	lsls	r4, r2, #5
 80033fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033fe:	014b      	lsls	r3, r1, #5
 8003400:	466b      	mov	r3, sp
 8003402:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	68fe      	ldr	r6, [r7, #12]
 8003408:	1e43      	subs	r3, r0, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	4603      	mov	r3, r0
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0154      	lsls	r4, r2, #5
 800341e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003422:	014b      	lsls	r3, r1, #5
 8003424:	4603      	mov	r3, r0
 8003426:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800342a:	1e73      	subs	r3, r6, #1
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	4603      	mov	r3, r0
 8003430:	4619      	mov	r1, r3
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	4633      	mov	r3, r6
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	fb03 fe02 	mul.w	lr, r3, r2
 8003440:	fb01 fc04 	mul.w	ip, r1, r4
 8003444:	44f4      	add	ip, lr
 8003446:	fba1 3403 	umull	r3, r4, r1, r3
 800344a:	eb0c 0204 	add.w	r2, ip, r4
 800344e:	4614      	mov	r4, r2
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	0162      	lsls	r2, r4, #5
 800345a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4633      	mov	r3, r6
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	fb03 fe02 	mul.w	lr, r3, r2
 8003472:	fb01 fc04 	mul.w	ip, r1, r4
 8003476:	44f4      	add	ip, lr
 8003478:	fba1 3403 	umull	r3, r4, r1, r3
 800347c:	eb0c 0204 	add.w	r2, ip, r4
 8003480:	4614      	mov	r4, r2
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	0162      	lsls	r2, r4, #5
 800348c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	4603      	mov	r3, r0
 8003494:	4632      	mov	r2, r6
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3303      	adds	r3, #3
 800349e:	3307      	adds	r3, #7
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	ebad 0d03 	sub.w	sp, sp, r3
 80034a8:	466b      	mov	r3, sp
 80034aa:	3303      	adds	r3, #3
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	f014 fc2f 	bl	8017d24 <memcpy>
    for (int i = 0; i < n; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	e022      	b.n	8003512 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 80034cc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d4:	fb01 f103 	mul.w	r1, r1, r3
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	440b      	add	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	edd7 6a00 	vldr	s13, [r7]
 80034e8:	edd7 7a00 	vldr	s15, [r7]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fc:	fb01 f103 	mul.w	r1, r1, r3
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	440b      	add	r3, r1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	3301      	adds	r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	dbd8      	blt.n	80034cc <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	68fe      	ldr	r6, [r7, #12]
 800351e:	466b      	mov	r3, sp
 8003520:	469a      	mov	sl, r3
 8003522:	1e43      	subs	r3, r0, #1
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0154      	lsls	r4, r2, #5
 8003538:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353c:	014b      	lsls	r3, r1, #5
 800353e:	4603      	mov	r3, r0
 8003540:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003544:	1e73      	subs	r3, r6, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4633      	mov	r3, r6
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	fb03 fe02 	mul.w	lr, r3, r2
 800355a:	fb01 fc04 	mul.w	ip, r1, r4
 800355e:	44f4      	add	ip, lr
 8003560:	fba1 3403 	umull	r3, r4, r1, r3
 8003564:	eb0c 0204 	add.w	r2, ip, r4
 8003568:	4614      	mov	r4, r2
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	0162      	lsls	r2, r4, #5
 8003574:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	4633      	mov	r3, r6
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	fb03 fe02 	mul.w	lr, r3, r2
 800358c:	fb01 fc04 	mul.w	ip, r1, r4
 8003590:	44f4      	add	ip, lr
 8003592:	fba1 3403 	umull	r3, r4, r1, r3
 8003596:	eb0c 0204 	add.w	r2, ip, r4
 800359a:	4614      	mov	r4, r2
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	0162      	lsls	r2, r4, #5
 80035a6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	4603      	mov	r3, r0
 80035ae:	4632      	mov	r2, r6
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3303      	adds	r3, #3
 80035b8:	3307      	adds	r3, #7
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	ebad 0d03 	sub.w	sp, sp, r3
 80035c2:	466b      	mov	r3, sp
 80035c4:	3303      	adds	r3, #3
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fe10 	bl	80031f8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd78 	bl	80030d2 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f014 fba2 	bl	8017d3a <memset>
    for(int i = 0; i < n; i++){
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fa:	e04e      	b.n	800369a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003600:	e044      	b.n	800368c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	4293      	cmp	r3, r2
 8003608:	bfb8      	it	lt
 800360a:	4613      	movlt	r3, r2
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e036      	b.n	800367e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003610:	462a      	mov	r2, r5
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	fb03 f302 	mul.w	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	441a      	add	r2, r3
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003630:	fb01 f103 	mul.w	r1, r1, r3
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	440b      	add	r3, r1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	edd3 6a00 	vldr	s13, [r3]
 8003640:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003648:	fb01 f103 	mul.w	r1, r1, r3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	440b      	add	r3, r1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	462a      	mov	r2, r5
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	fb03 f302 	mul.w	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	441a      	add	r2, r3
 800366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	3301      	adds	r3, #1
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	429a      	cmp	r2, r3
 8003684:	dbc4      	blt.n	8003610 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3301      	adds	r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
 800368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbb6      	blt.n	8003602 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	3301      	adds	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbac      	blt.n	80035fc <cholesky_inverse+0x248>
 80036a2:	46d5      	mov	sp, sl
 80036a4:	46cd      	mov	sp, r9
            }
        }
    }
}
 80036a6:	bf00      	nop
 80036a8:	3740      	adds	r7, #64	; 0x40
 80036aa:	46bd      	mov	sp, r7
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036b0 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	210a      	movs	r1, #10
 80036c2:	4618      	mov	r0, r3
 80036c4:	f010 f814 	bl	80136f0 <osMutexAcquire>
 80036c8:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <AcquireMutex+0x2a>
		custom_mutex->counter++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]
	}

	return status;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f010 f85b 	bl	80137ac <osMutexRelease>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex, const void* global_data, const void* local_data, int32_t size){
 8003700:	b580      	push	{r7, lr}
 8003702:	b0a0      	sub	sp, #128	; 0x80
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	2264      	movs	r2, #100	; 0x64
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f014 fb0f 	bl	8017d3a <memset>
	uint32_t counter = custom_mutex->counter;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003728:	2300      	movs	r3, #0
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
 800372c:	e01b      	b.n	8003766 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f014 faf4 	bl	8017d24 <memcpy>
		if(custom_mutex->counter == counter){
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <ReadMutex+0x5a>
			memcpy(local_data, &buffer[0], size);
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f014 fae8 	bl	8017d24 <memcpy>
			status = osOK;
 8003754:	2300      	movs	r3, #0
 8003756:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003758:	e008      	b.n	800376c <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003762:	3301      	adds	r3, #1
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	2b04      	cmp	r3, #4
 800376a:	dde0      	ble.n	800372e <ReadMutex+0x2e>
	}
	return status;
 800376c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800376e:	4618      	mov	r0, r3
 8003770:	3780      	adds	r7, #128	; 0x80
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b08d      	sub	sp, #52	; 0x34
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 0; i < 5; i++){
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e07b      	b.n	80038a6 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80038c0 <ReadMutexStateEst+0x148>
 80037d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037da:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80038c4 <ReadMutexStateEst+0x14c>
 80037f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f8:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003802:	429a      	cmp	r2, r3
 8003804:	d149      	bne.n	800389a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	6939      	ldr	r1, [r7, #16]
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4403      	add	r3, r0
 800382c:	3304      	adds	r3, #4
 800382e:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	3308      	adds	r3, #8
 8003844:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe9d 	bl	8000588 <__aeabi_f2d>
 800384e:	a31a      	add	r3, pc, #104	; (adr r3, 80038b8 <ReadMutexStateEst+0x140>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fef0 	bl	8000638 <__aeabi_dmul>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	4619      	mov	r1, r3
 800385e:	4622      	mov	r2, r4
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	1e5c      	subs	r4, r3, #1
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	f7fd f996 	bl	8000b98 <__aeabi_d2f>
 800386c:	4601      	mov	r1, r0
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4623      	mov	r3, r4
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1b1b      	subs	r3, r3, r4
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	3330      	adds	r3, #48	; 0x30
 800387c:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	6a39      	ldr	r1, [r7, #32]
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	333c      	adds	r3, #60	; 0x3c
 8003892:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003898:	e008      	b.n	80038ac <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < 5; i++){
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3301      	adds	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	dd80      	ble.n	80037ae <ReadMutexStateEst+0x36>
	}


	return status;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3734      	adds	r7, #52	; 0x34
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	51eb851f 	.word	0x51eb851f
 80038bc:	40239eb8 	.word	0x40239eb8
 80038c0:	44800000 	.word	0x44800000
 80038c4:	42c80000 	.word	0x42c80000

080038c8 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80038c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ca:	b0b3      	sub	sp, #204	; 0xcc
 80038cc:	af06      	add	r7, sp, #24
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	72fb      	strb	r3, [r7, #11]
 80038d6:	4613      	mov	r3, r2
 80038d8:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	2296      	movs	r2, #150	; 0x96
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f014 fa29 	bl	8017d3a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	7aba      	ldrb	r2, [r7, #10]
 80038ec:	f107 0010 	add.w	r0, r7, #16
 80038f0:	9202      	str	r2, [sp, #8]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <logSensor+0x138>)
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	f014 fadd 	bl	8017ebc <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003902:	7abb      	ldrb	r3, [r7, #10]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <logSensor+0x46>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d01d      	beq.n	8003948 <logSensor+0x80>
 800390c:	e055      	b.n	80039ba <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fc79 	bl	8000210 <strlen>
 800391e:	4602      	mov	r2, r0
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	1898      	adds	r0, r3, r2
 8003926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	9201      	str	r2, [sp, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <logSensor+0x13c>)
 8003940:	2196      	movs	r1, #150	; 0x96
 8003942:	f014 fabb 	bl	8017ebc <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8003946:	e04e      	b.n	80039e6 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fc5c 	bl	8000210 <strlen>
 8003958:	4602      	mov	r2, r0
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003964:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003968:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003972:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003978:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 800397c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800397e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003982:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003986:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800398c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003990:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 800399a:	461e      	mov	r6, r3
 800399c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	9604      	str	r6, [sp, #16]
 80039a6:	9503      	str	r5, [sp, #12]
 80039a8:	9402      	str	r4, [sp, #8]
 80039aa:	9101      	str	r1, [sp, #4]
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	4663      	mov	r3, ip
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <logSensor+0x140>)
 80039b2:	2196      	movs	r1, #150	; 0x96
 80039b4:	f014 fa82 	bl	8017ebc <sniprintf>
	}
		break;
 80039b8:	e015      	b.n	80039e6 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc26 	bl	8000210 <strlen>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4413      	add	r3, r2
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <logSensor+0x144>)
 80039ce:	461d      	mov	r5, r3
 80039d0:	4614      	mov	r4, r2
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	6028      	str	r0, [r5, #0]
 80039d6:	6069      	str	r1, [r5, #4]
 80039d8:	60aa      	str	r2, [r5, #8]
 80039da:	60eb      	str	r3, [r5, #12]
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	6128      	str	r0, [r5, #16]
 80039e0:	7923      	ldrb	r3, [r4, #4]
 80039e2:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 80039e4:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <logSensor+0x148>)
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f107 0110 	add.w	r1, r7, #16
 80039ee:	2300      	movs	r3, #0
 80039f0:	2200      	movs	r2, #0
 80039f2:	f010 f943 	bl	8013c7c <osMessageQueuePut>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	37b4      	adds	r7, #180	; 0xb4
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a00:	0801a664 	.word	0x0801a664
 8003a04:	0801a674 	.word	0x0801a674
 8003a08:	0801a684 	.word	0x0801a684
 8003a0c:	0801a6a4 	.word	0x0801a6a4
 8003a10:	2001ccfc 	.word	0x2001ccfc

08003a14 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ac      	sub	sp, #176	; 0xb0
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a22:	f107 0310 	add.w	r3, r7, #16
 8003a26:	2296      	movs	r2, #150	; 0x96
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f014 f985 	bl	8017d3a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 8003a30:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8003a32:	f107 0010 	add.w	r0, r7, #16
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <logRocketState+0x4c>)
 8003a40:	2196      	movs	r1, #150	; 0x96
 8003a42:	f014 fa3b 	bl	8017ebc <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <logRocketState+0x50>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f107 0110 	add.w	r1, r7, #16
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2200      	movs	r2, #0
 8003a52:	f010 f913 	bl	8013c7c <osMessageQueuePut>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	37a8      	adds	r7, #168	; 0xa8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0801a6bc 	.word	0x0801a6bc
 8003a64:	2001ccfc 	.word	0x2001ccfc

08003a68 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8003a68:	b084      	sub	sp, #16
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b0ac      	sub	sp, #176	; 0xb0
 8003a6e:	af04      	add	r7, sp, #16
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	2296      	movs	r2, #150	; 0x96
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f014 f959 	bl	8017d3a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, ESTIMATOR_VAR,
 8003a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a90:	f107 0008 	add.w	r0, r7, #8
 8003a94:	9202      	str	r2, [sp, #8]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2303      	movs	r3, #3
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <logEstimatorVar+0x60>)
 8003aa0:	2196      	movs	r1, #150	; 0x96
 8003aa2:	f014 fa0b 	bl	8017ebc <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <logEstimatorVar+0x64>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0108 	add.w	r1, r7, #8
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f010 f8e3 	bl	8013c7c <osMessageQueuePut>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	37a0      	adds	r7, #160	; 0xa0
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac2:	b004      	add	sp, #16
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	0801a6c8 	.word	0x0801a6c8
 8003acc:	2001ccfc 	.word	0x2001ccfc

08003ad0 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b0ae      	sub	sp, #184	; 0xb8
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	2296      	movs	r2, #150	; 0x96
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f014 f927 	bl	8017d3a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8003aec:	f107 0010 	add.w	r0, r7, #16
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2304      	movs	r3, #4
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <logControllerOutput+0x54>)
 8003b04:	2196      	movs	r1, #150	; 0x96
 8003b06:	f014 f9d9 	bl	8017ebc <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <logControllerOutput+0x58>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f107 0110 	add.w	r1, r7, #16
 8003b12:	2300      	movs	r3, #0
 8003b14:	2200      	movs	r2, #0
 8003b16:	f010 f8b1 	bl	8013c7c <osMessageQueuePut>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	37a8      	adds	r7, #168	; 0xa8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0801a6d8 	.word	0x0801a6d8
 8003b28:	2001ccfc 	.word	0x2001ccfc

08003b2c <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b0ae      	sub	sp, #184	; 0xb8
 8003b30:	af04      	add	r7, sp, #16
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	2296      	movs	r2, #150	; 0x96
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f014 f8fa 	bl	8017d3a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 8003b46:	f107 0010 	add.w	r0, r7, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	2305      	movs	r3, #5
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <logMotor+0x50>)
 8003b5a:	2196      	movs	r1, #150	; 0x96
 8003b5c:	f014 f9ae 	bl	8017ebc <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <logMotor+0x54>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	f107 0110 	add.w	r1, r7, #16
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f010 f886 	bl	8013c7c <osMessageQueuePut>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	37a8      	adds	r7, #168	; 0xa8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0801a6c8 	.word	0x0801a6c8
 8003b80:	2001ccfc 	.word	0x2001ccfc

08003b84 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003b84:	b40f      	push	{r0, r1, r2, r3}
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8003b90:	79fb      	ldrb	r3, [r7, #7]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	b004      	add	sp, #16
 8003b9e:	4770      	bx	lr

08003ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b0a5      	sub	sp, #148	; 0x94
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ba6:	f001 ff3a 	bl	8005a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003baa:	f000 f98f 	bl	8003ecc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 8003bae:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <main+0x240>)
 8003bb0:	4a8c      	ldr	r2, [pc, #560]	; (8003de4 <main+0x244>)
 8003bb2:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8003bb4:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <main+0x240>)
 8003bb6:	4a8c      	ldr	r2, [pc, #560]	; (8003de8 <main+0x248>)
 8003bb8:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8003bba:	488c      	ldr	r0, [pc, #560]	; (8003dec <main+0x24c>)
 8003bbc:	f7fd ff64 	bl	8001a88 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8003bc0:	488b      	ldr	r0, [pc, #556]	; (8003df0 <main+0x250>)
 8003bc2:	f7fe fa1f 	bl	8002004 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc6:	f000 fb81 	bl	80042cc <MX_GPIO_Init>
  MX_DMA_Init();
 8003bca:	f000 fb45 	bl	8004258 <MX_DMA_Init>
  MX_SPI3_Init();
 8003bce:	f000 faa1 	bl	8004114 <MX_SPI3_Init>
  MX_SPI1_Init();
 8003bd2:	f000 fa2f 	bl	8004034 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8003bd6:	f000 fa0d 	bl	8003ff4 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8003bda:	f000 fa63 	bl	80040a4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003bde:	f00a fd59 	bl	800e694 <MX_FATFS_Init>
  MX_UART7_Init();
 8003be2:	f000 fb01 	bl	80041e8 <MX_UART7_Init>
  MX_UART4_Init();
 8003be6:	f000 facf 	bl	8004188 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8003bea:	f013 fb07 	bl	80171fc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003bee:	f00f fb13 	bl	8013218 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 8003bf2:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <main+0x254>)
 8003bf4:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8003bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8003bfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00f fcda 	bl	80135bc <osMutexNew>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b7b      	ldr	r3, [pc, #492]	; (8003df8 <main+0x258>)
 8003c0c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8003c0e:	4b7b      	ldr	r3, [pc, #492]	; (8003dfc <main+0x25c>)
 8003c10:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003c1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00f fccc 	bl	80135bc <osMutexNew>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <main+0x260>)
 8003c28:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <main+0x264>)
 8003c2c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003c36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f00f fcbe 	bl	80135bc <osMutexNew>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b71      	ldr	r3, [pc, #452]	; (8003e08 <main+0x268>)
 8003c44:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8003c46:	4b71      	ldr	r3, [pc, #452]	; (8003e0c <main+0x26c>)
 8003c48:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00f fcb0 	bl	80135bc <osMutexNew>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <main+0x270>)
 8003c60:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8003c62:	4b6c      	ldr	r3, [pc, #432]	; (8003e14 <main+0x274>)
 8003c64:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00f fca2 	bl	80135bc <osMutexNew>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <main+0x278>)
 8003c7c:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 8003c7e:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <main+0x27c>)
 8003c80:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00f fc94 	bl	80135bc <osMutexNew>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <main+0x280>)
 8003c98:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8003c9a:	4b62      	ldr	r3, [pc, #392]	; (8003e24 <main+0x284>)
 8003c9c:	f107 0420 	add.w	r4, r7, #32
 8003ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003ca6:	f107 0320 	add.w	r3, r7, #32
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00f fc86 	bl	80135bc <osMutexNew>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <main+0x288>)
 8003cb4:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <main+0x28c>)
 8003cb8:	f107 0410 	add.w	r4, r7, #16
 8003cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f00f fc78 	bl	80135bc <osMutexNew>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b58      	ldr	r3, [pc, #352]	; (8003e30 <main+0x290>)
 8003cd0:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8003cd2:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <main+0x294>)
 8003cd4:	463c      	mov	r4, r7
 8003cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f00f fc6c 	bl	80135bc <osMutexNew>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b54      	ldr	r3, [pc, #336]	; (8003e38 <main+0x298>)
 8003ce8:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <main+0x258>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a53      	ldr	r2, [pc, #332]	; (8003e3c <main+0x29c>)
 8003cf0:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8003cf2:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <main+0x260>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a52      	ldr	r2, [pc, #328]	; (8003e40 <main+0x2a0>)
 8003cf8:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <main+0x268>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a51      	ldr	r2, [pc, #324]	; (8003e44 <main+0x2a4>)
 8003d00:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 8003d02:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <main+0x288>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a50      	ldr	r2, [pc, #320]	; (8003e48 <main+0x2a8>)
 8003d08:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8003d0a:	4b45      	ldr	r3, [pc, #276]	; (8003e20 <main+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4f      	ldr	r2, [pc, #316]	; (8003e4c <main+0x2ac>)
 8003d10:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <main+0x278>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4e      	ldr	r2, [pc, #312]	; (8003e50 <main+0x2b0>)
 8003d18:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <main+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <main+0x2b4>)
 8003d20:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003d22:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <main+0x290>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4c      	ldr	r2, [pc, #304]	; (8003e58 <main+0x2b8>)
 8003d28:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8003d2a:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <main+0x298>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <main+0x2bc>)
 8003d30:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 8003d32:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <main+0x250>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <main+0x250>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8003d3e:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <main+0x2c0>)
 8003d40:	229b      	movs	r2, #155	; 0x9b
 8003d42:	701a      	strb	r2, [r3, #0]

	global_counter = 0;
 8003d44:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <main+0x2c4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2196      	movs	r1, #150	; 0x96
 8003d4e:	2080      	movs	r0, #128	; 0x80
 8003d50:	f00f ff0e 	bl	8013b70 <osMessageQueueNew>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <main+0x2c8>)
 8003d58:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003d5a:	4a44      	ldr	r2, [pc, #272]	; (8003e6c <main+0x2cc>)
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4844      	ldr	r0, [pc, #272]	; (8003e70 <main+0x2d0>)
 8003d60:	f00f fb18 	bl	8013394 <osThreadNew>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <main+0x2d4>)
 8003d68:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003d6a:	4a43      	ldr	r2, [pc, #268]	; (8003e78 <main+0x2d8>)
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4843      	ldr	r0, [pc, #268]	; (8003e7c <main+0x2dc>)
 8003d70:	f00f fb10 	bl	8013394 <osThreadNew>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <main+0x2e0>)
 8003d78:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003d7a:	4a42      	ldr	r2, [pc, #264]	; (8003e84 <main+0x2e4>)
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4842      	ldr	r0, [pc, #264]	; (8003e88 <main+0x2e8>)
 8003d80:	f00f fb08 	bl	8013394 <osThreadNew>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <main+0x2ec>)
 8003d88:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8003d8a:	4a41      	ldr	r2, [pc, #260]	; (8003e90 <main+0x2f0>)
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4841      	ldr	r0, [pc, #260]	; (8003e94 <main+0x2f4>)
 8003d90:	f00f fb00 	bl	8013394 <osThreadNew>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <main+0x2f8>)
 8003d98:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <main+0x2fc>)
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4840      	ldr	r0, [pc, #256]	; (8003ea0 <main+0x300>)
 8003da0:	f00f faf8 	bl	8013394 <osThreadNew>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <main+0x304>)
 8003da8:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003daa:	4a3f      	ldr	r2, [pc, #252]	; (8003ea8 <main+0x308>)
 8003dac:	2100      	movs	r1, #0
 8003dae:	483f      	ldr	r0, [pc, #252]	; (8003eac <main+0x30c>)
 8003db0:	f00f faf0 	bl	8013394 <osThreadNew>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <main+0x310>)
 8003db8:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <main+0x314>)
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	483e      	ldr	r0, [pc, #248]	; (8003eb8 <main+0x318>)
 8003dc0:	f00f fae8 	bl	8013394 <osThreadNew>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <main+0x31c>)
 8003dc8:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003dca:	4a3d      	ldr	r2, [pc, #244]	; (8003ec0 <main+0x320>)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	483d      	ldr	r0, [pc, #244]	; (8003ec4 <main+0x324>)
 8003dd0:	f00f fae0 	bl	8013394 <osThreadNew>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <main+0x328>)
 8003dd8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003dda:	f00f fa73 	bl	80132c4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003dde:	e7fe      	b.n	8003dde <main+0x23e>
 8003de0:	e0042000 	.word	0xe0042000
 8003de4:	07e01bff 	.word	0x07e01bff
 8003de8:	00070003 	.word	0x00070003
 8003dec:	200002ac 	.word	0x200002ac
 8003df0:	200002bc 	.word	0x200002bc
 8003df4:	0801a778 	.word	0x0801a778
 8003df8:	20010aec 	.word	0x20010aec
 8003dfc:	0801a798 	.word	0x0801a798
 8003e00:	2001ed00 	.word	0x2001ed00
 8003e04:	0801a7b8 	.word	0x0801a7b8
 8003e08:	20008b5c 	.word	0x20008b5c
 8003e0c:	0801a7e0 	.word	0x0801a7e0
 8003e10:	20010ad8 	.word	0x20010ad8
 8003e14:	0801a808 	.word	0x0801a808
 8003e18:	20026cf8 	.word	0x20026cf8
 8003e1c:	0801a828 	.word	0x0801a828
 8003e20:	20010ae8 	.word	0x20010ae8
 8003e24:	0801a850 	.word	0x0801a850
 8003e28:	20010adc 	.word	0x20010adc
 8003e2c:	0801a874 	.word	0x0801a874
 8003e30:	20008b58 	.word	0x20008b58
 8003e34:	0801a898 	.word	0x0801a898
 8003e38:	20008b60 	.word	0x20008b60
 8003e3c:	20010a70 	.word	0x20010a70
 8003e40:	20026d60 	.word	0x20026d60
 8003e44:	20010ae0 	.word	0x20010ae0
 8003e48:	20008b6c 	.word	0x20008b6c
 8003e4c:	20008980 	.word	0x20008980
 8003e50:	20010a5c 	.word	0x20010a5c
 8003e54:	20010af0 	.word	0x20010af0
 8003e58:	20008acc 	.word	0x20008acc
 8003e5c:	20008b64 	.word	0x20008b64
 8003e60:	20014b54 	.word	0x20014b54
 8003e64:	20010a68 	.word	0x20010a68
 8003e68:	2001ccfc 	.word	0x2001ccfc
 8003e6c:	0801abcc 	.word	0x0801abcc
 8003e70:	080043a9 	.word	0x080043a9
 8003e74:	2000897c 	.word	0x2000897c
 8003e78:	0801abf0 	.word	0x0801abf0
 8003e7c:	08005531 	.word	0x08005531
 8003e80:	20010a6c 	.word	0x20010a6c
 8003e84:	0801ac14 	.word	0x0801ac14
 8003e88:	08004be5 	.word	0x08004be5
 8003e8c:	20026d5c 	.word	0x20026d5c
 8003e90:	0801ac38 	.word	0x0801ac38
 8003e94:	08005361 	.word	0x08005361
 8003e98:	20008b74 	.word	0x20008b74
 8003e9c:	0801ac5c 	.word	0x0801ac5c
 8003ea0:	08004fcd 	.word	0x08004fcd
 8003ea4:	20008a6c 	.word	0x20008a6c
 8003ea8:	0801ac80 	.word	0x0801ac80
 8003eac:	08004e2d 	.word	0x08004e2d
 8003eb0:	20010a64 	.word	0x20010a64
 8003eb4:	0801aca4 	.word	0x0801aca4
 8003eb8:	08004d4d 	.word	0x08004d4d
 8003ebc:	20010a78 	.word	0x20010a78
 8003ec0:	0801acc8 	.word	0x0801acc8
 8003ec4:	08005801 	.word	0x08005801
 8003ec8:	2001ac14 	.word	0x2001ac14

08003ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0b4      	sub	sp, #208	; 0xd0
 8003ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ed6:	2230      	movs	r2, #48	; 0x30
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f013 ff2d 	bl	8017d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	2284      	movs	r2, #132	; 0x84
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f013 ff1e 	bl	8017d3a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <SystemClock_Config+0x11c>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	4a39      	ldr	r2, [pc, #228]	; (8003fe8 <SystemClock_Config+0x11c>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <SystemClock_Config+0x11c>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f16:	4b35      	ldr	r3, [pc, #212]	; (8003fec <SystemClock_Config+0x120>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f1e:	4a33      	ldr	r2, [pc, #204]	; (8003fec <SystemClock_Config+0x120>)
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <SystemClock_Config+0x120>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f40:	2302      	movs	r3, #2
 8003f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f4e:	2304      	movs	r3, #4
 8003f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f54:	23a8      	movs	r3, #168	; 0xa8
 8003f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f60:	2307      	movs	r3, #7
 8003f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fdc8 	bl	8007b00 <HAL_RCC_OscConfig>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003f76:	f000 fa33 	bl	80043e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f7a:	230f      	movs	r3, #15
 8003f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f9c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fa0:	2105      	movs	r1, #5
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f004 f850 	bl	8008048 <HAL_RCC_ClockConfig>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003fae:	f000 fa17 	bl	80043e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <SystemClock_Config+0x124>)
 8003fb4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 fa64 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <SystemClock_Config+0x112>
  {
    Error_Handler();
 8003fda:	f000 fa01 	bl	80043e0 <Error_Handler>
  }
}
 8003fde:	bf00      	nop
 8003fe0:	37d0      	adds	r7, #208	; 0xd0
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	00a01200 	.word	0x00a01200

08003ff4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 8003ffa:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <MX_SDMMC1_SD_Init+0x3c>)
 8003ffc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 8004000:	2200      	movs	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 800400c:	2200      	movs	r2, #0
 800400e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <MX_SDMMC1_SD_Init+0x38>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20008ad4 	.word	0x20008ad4
 8004030:	40012c00 	.word	0x40012c00

08004034 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <MX_SPI1_Init+0x68>)
 800403a:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <MX_SPI1_Init+0x6c>)
 800403c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <MX_SPI1_Init+0x68>)
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_SPI1_Init+0x68>)
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <MX_SPI1_Init+0x68>)
 800404c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004050:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <MX_SPI1_Init+0x68>)
 8004054:	2200      	movs	r2, #0
 8004056:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_SPI1_Init+0x68>)
 800405a:	2200      	movs	r2, #0
 800405c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <MX_SPI1_Init+0x68>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <MX_SPI1_Init+0x68>)
 8004066:	2200      	movs	r2, #0
 8004068:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <MX_SPI1_Init+0x68>)
 800406c:	2200      	movs	r2, #0
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <MX_SPI1_Init+0x68>)
 8004072:	2200      	movs	r2, #0
 8004074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <MX_SPI1_Init+0x68>)
 8004078:	2207      	movs	r2, #7
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <MX_SPI1_Init+0x68>)
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_SPI1_Init+0x68>)
 8004084:	2200      	movs	r2, #0
 8004086:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004088:	4804      	ldr	r0, [pc, #16]	; (800409c <MX_SPI1_Init+0x68>)
 800408a:	f006 f8b3 	bl	800a1f4 <HAL_SPI_Init>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8004094:	f000 f9a4 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	2001cc98 	.word	0x2001cc98
 80040a0:	40013000 	.word	0x40013000

080040a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <MX_SPI2_Init+0x68>)
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <MX_SPI2_Init+0x6c>)
 80040ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <MX_SPI2_Init+0x68>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040b4:	4b15      	ldr	r3, [pc, #84]	; (800410c <MX_SPI2_Init+0x68>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <MX_SPI2_Init+0x68>)
 80040bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <MX_SPI2_Init+0x68>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <MX_SPI2_Init+0x68>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <MX_SPI2_Init+0x68>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <MX_SPI2_Init+0x68>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <MX_SPI2_Init+0x68>)
 80040dc:	2200      	movs	r2, #0
 80040de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <MX_SPI2_Init+0x68>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <MX_SPI2_Init+0x68>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <MX_SPI2_Init+0x68>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <MX_SPI2_Init+0x68>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f8:	4804      	ldr	r0, [pc, #16]	; (800410c <MX_SPI2_Init+0x68>)
 80040fa:	f006 f87b 	bl	800a1f4 <HAL_SPI_Init>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8004104:	f000 f96c 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004108:	bf00      	nop
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20008988 	.word	0x20008988
 8004110:	40003800 	.word	0x40003800

08004114 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <MX_SPI3_Init+0x6c>)
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <MX_SPI3_Init+0x70>)
 800411c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <MX_SPI3_Init+0x6c>)
 800412e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004132:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <MX_SPI3_Init+0x6c>)
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004148:	2200      	movs	r2, #0
 800414a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <MX_SPI3_Init+0x6c>)
 800414e:	2200      	movs	r2, #0
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004154:	2200      	movs	r2, #0
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <MX_SPI3_Init+0x6c>)
 800415a:	2207      	movs	r2, #7
 800415c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004166:	2200      	movs	r2, #0
 8004168:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800416a:	4805      	ldr	r0, [pc, #20]	; (8004180 <MX_SPI3_Init+0x6c>)
 800416c:	f006 f842 	bl	800a1f4 <HAL_SPI_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004176:	f000 f933 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200109f8 	.word	0x200109f8
 8004184:	40003c00 	.word	0x40003c00

08004188 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <MX_UART4_Init+0x58>)
 800418e:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <MX_UART4_Init+0x5c>)
 8004190:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <MX_UART4_Init+0x58>)
 8004194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004198:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <MX_UART4_Init+0x58>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <MX_UART4_Init+0x58>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <MX_UART4_Init+0x58>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <MX_UART4_Init+0x58>)
 80041ae:	220c      	movs	r2, #12
 80041b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <MX_UART4_Init+0x58>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <MX_UART4_Init+0x58>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <MX_UART4_Init+0x58>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <MX_UART4_Init+0x58>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041ca:	4805      	ldr	r0, [pc, #20]	; (80041e0 <MX_UART4_Init+0x58>)
 80041cc:	f007 f94e 	bl	800b46c <HAL_UART_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80041d6:	f000 f903 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	2001cc18 	.word	0x2001cc18
 80041e4:	40004c00 	.word	0x40004c00

080041e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <MX_UART7_Init+0x68>)
 80041ee:	4a19      	ldr	r2, [pc, #100]	; (8004254 <MX_UART7_Init+0x6c>)
 80041f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <MX_UART7_Init+0x68>)
 80041f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <MX_UART7_Init+0x68>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <MX_UART7_Init+0x68>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <MX_UART7_Init+0x68>)
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800420c:	4b10      	ldr	r3, [pc, #64]	; (8004250 <MX_UART7_Init+0x68>)
 800420e:	220c      	movs	r2, #12
 8004210:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <MX_UART7_Init+0x68>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <MX_UART7_Init+0x68>)
 800421a:	2200      	movs	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <MX_UART7_Init+0x68>)
 8004220:	2200      	movs	r2, #0
 8004222:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <MX_UART7_Init+0x68>)
 8004226:	2230      	movs	r2, #48	; 0x30
 8004228:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <MX_UART7_Init+0x68>)
 800422c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
  huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <MX_UART7_Init+0x68>)
 8004234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800423a:	4805      	ldr	r0, [pc, #20]	; (8004250 <MX_UART7_Init+0x68>)
 800423c:	f007 f916 	bl	800b46c <HAL_UART_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_UART7_Init+0x62>
  {
    Error_Handler();
 8004246:	f000 f8cb 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200089ec 	.word	0x200089ec
 8004254:	40007800 	.word	0x40007800

08004258 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <MX_DMA_Init+0x70>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <MX_DMA_Init+0x70>)
 8004264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <MX_DMA_Init+0x70>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_DMA_Init+0x70>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <MX_DMA_Init+0x70>)
 800427c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <MX_DMA_Init+0x70>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2105      	movs	r1, #5
 8004292:	200b      	movs	r0, #11
 8004294:	f001 fcca 	bl	8005c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004298:	200b      	movs	r0, #11
 800429a:	f001 fce3 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2105      	movs	r1, #5
 80042a2:	203b      	movs	r0, #59	; 0x3b
 80042a4:	f001 fcc2 	bl	8005c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80042a8:	203b      	movs	r0, #59	; 0x3b
 80042aa:	f001 fcdb 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2105      	movs	r1, #5
 80042b2:	2045      	movs	r0, #69	; 0x45
 80042b4:	f001 fcba 	bl	8005c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80042b8:	2045      	movs	r0, #69	; 0x45
 80042ba:	f001 fcd3 	bl	8005c64 <HAL_NVIC_EnableIRQ>

}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800

080042cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d2:	f107 031c 	add.w	r3, r7, #28
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <MX_GPIO_Init+0xd4>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a2e      	ldr	r2, [pc, #184]	; (80043a0 <MX_GPIO_Init+0xd4>)
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <MX_GPIO_Init+0xd4>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <MX_GPIO_Init+0xd4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	6313      	str	r3, [r2, #48]	; 0x30
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <MX_GPIO_Init+0xd4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	6313      	str	r3, [r2, #48]	; 0x30
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004348:	f043 0310 	orr.w	r3, r3, #16
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <MX_GPIO_Init+0xd4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004360:	f043 0308 	orr.w	r3, r3, #8
 8004364:	6313      	str	r3, [r2, #48]	; 0x30
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <MX_GPIO_Init+0xd4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004372:	2200      	movs	r2, #0
 8004374:	2108      	movs	r1, #8
 8004376:	480b      	ldr	r0, [pc, #44]	; (80043a4 <MX_GPIO_Init+0xd8>)
 8004378:	f002 f9d0 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800437c:	2308      	movs	r3, #8
 800437e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004380:	2301      	movs	r3, #1
 8004382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	2300      	movs	r3, #0
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	4619      	mov	r1, r3
 8004392:	4804      	ldr	r0, [pc, #16]	; (80043a4 <MX_GPIO_Init+0xd8>)
 8004394:	f002 f818 	bl	80063c8 <HAL_GPIO_Init>

}
 8004398:	bf00      	nop
 800439a:	3730      	adds	r7, #48	; 0x30
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40020800 	.word	0x40020800

080043a8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80043b0:	f012 ff24 	bl	80171fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80043b4:	2001      	movs	r0, #1
 80043b6:	f00f f893 	bl	80134e0 <osDelay>
 80043ba:	e7fb      	b.n	80043b4 <StartDefaultTask+0xc>

080043bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043ce:	f001 fb33 	bl	8005a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000

080043e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <HAL_MspInit+0x4c>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <HAL_MspInit+0x4c>)
 80043fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_MspInit+0x4c>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_MspInit+0x4c>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_MspInit+0x4c>)
 8004414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004418:	6453      	str	r3, [r2, #68]	; 0x44
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_MspInit+0x4c>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	210f      	movs	r1, #15
 800442a:	f06f 0001 	mvn.w	r0, #1
 800442e:	f001 fbfd 	bl	8005c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 0314 	add.w	r3, r7, #20
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a65      	ldr	r2, [pc, #404]	; (80045f4 <HAL_SD_MspInit+0x1b4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f040 80c3 	bne.w	80045ea <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004464:	4b64      	ldr	r3, [pc, #400]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	4a63      	ldr	r2, [pc, #396]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 800446a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800446e:	6453      	str	r3, [r2, #68]	; 0x44
 8004470:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 8004472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800447c:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	4a5d      	ldr	r2, [pc, #372]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6313      	str	r3, [r2, #48]	; 0x30
 8004488:	4b5b      	ldr	r3, [pc, #364]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004494:	4b58      	ldr	r3, [pc, #352]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a57      	ldr	r2, [pc, #348]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 800449a:	f043 0308 	orr.w	r3, r3, #8
 800449e:	6313      	str	r3, [r2, #48]	; 0x30
 80044a0:	4b55      	ldr	r3, [pc, #340]	; (80045f8 <HAL_SD_MspInit+0x1b8>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80044ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80044b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ba:	2303      	movs	r3, #3
 80044bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80044be:	230c      	movs	r3, #12
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	4619      	mov	r1, r3
 80044c8:	484c      	ldr	r0, [pc, #304]	; (80045fc <HAL_SD_MspInit+0x1bc>)
 80044ca:	f001 ff7d 	bl	80063c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044ce:	2304      	movs	r3, #4
 80044d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044da:	2303      	movs	r3, #3
 80044dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80044de:	230c      	movs	r3, #12
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e2:	f107 0314 	add.w	r3, r7, #20
 80044e6:	4619      	mov	r1, r3
 80044e8:	4845      	ldr	r0, [pc, #276]	; (8004600 <HAL_SD_MspInit+0x1c0>)
 80044ea:	f001 ff6d 	bl	80063c8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80044ee:	4b45      	ldr	r3, [pc, #276]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 80044f0:	4a45      	ldr	r2, [pc, #276]	; (8004608 <HAL_SD_MspInit+0x1c8>)
 80044f2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80044f4:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 80044f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044fa:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044fc:	4b41      	ldr	r3, [pc, #260]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004502:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004508:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 800450a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800450e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004510:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004516:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004518:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 800451a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800451e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004520:	4b38      	ldr	r3, [pc, #224]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004522:	2220      	movs	r2, #32
 8004524:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004528:	2200      	movs	r2, #0
 800452a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800452c:	4b35      	ldr	r3, [pc, #212]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 800452e:	2204      	movs	r2, #4
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004532:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004534:	2203      	movs	r2, #3
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 800453a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004542:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004548:	482e      	ldr	r0, [pc, #184]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 800454a:	f001 fb99 	bl	8005c80 <HAL_DMA_Init>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8004554:	f7ff ff44 	bl	80043e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
 800455e:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_SD_MspInit+0x1c4>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <HAL_SD_MspInit+0x1cc>)
 8004566:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_SD_MspInit+0x1d0>)
 8004568:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800456a:	4b28      	ldr	r3, [pc, #160]	; (800460c <HAL_SD_MspInit+0x1cc>)
 800456c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004570:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004572:	4b26      	ldr	r3, [pc, #152]	; (800460c <HAL_SD_MspInit+0x1cc>)
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004578:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_SD_MspInit+0x1cc>)
 800457a:	2200      	movs	r2, #0
 800457c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <HAL_SD_MspInit+0x1cc>)
 8004580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004584:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <HAL_SD_MspInit+0x1cc>)
 8004588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800458c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800458e:	4b1f      	ldr	r3, [pc, #124]	; (800460c <HAL_SD_MspInit+0x1cc>)
 8004590:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004594:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_SD_MspInit+0x1cc>)
 8004598:	2220      	movs	r2, #32
 800459a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_SD_MspInit+0x1cc>)
 800459e:	2200      	movs	r2, #0
 80045a0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045a4:	2204      	movs	r2, #4
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045a8:	4b18      	ldr	r3, [pc, #96]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045aa:	2203      	movs	r2, #3
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80045ae:	4b17      	ldr	r3, [pc, #92]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80045be:	4813      	ldr	r0, [pc, #76]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045c0:	f001 fb5e 	bl	8005c80 <HAL_DMA_Init>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80045ca:	f7ff ff09 	bl	80043e0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a0e      	ldr	r2, [pc, #56]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80045d4:	4a0d      	ldr	r2, [pc, #52]	; (800460c <HAL_SD_MspInit+0x1cc>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2105      	movs	r1, #5
 80045de:	2031      	movs	r0, #49	; 0x31
 80045e0:	f001 fb24 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80045e4:	2031      	movs	r0, #49	; 0x31
 80045e6:	f001 fb3d 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80045ea:	bf00      	nop
 80045ec:	3728      	adds	r7, #40	; 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40020800 	.word	0x40020800
 8004600:	40020c00 	.word	0x40020c00
 8004604:	20014bb4 	.word	0x20014bb4
 8004608:	40026458 	.word	0x40026458
 800460c:	20026c3c 	.word	0x20026c3c
 8004610:	400264a0 	.word	0x400264a0

08004614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a80      	ldr	r2, [pc, #512]	; (8004834 <HAL_SPI_MspInit+0x220>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d131      	bne.n	800469a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004636:	4b80      	ldr	r3, [pc, #512]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	4a7f      	ldr	r2, [pc, #508]	; (8004838 <HAL_SPI_MspInit+0x224>)
 800463c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004640:	6453      	str	r3, [r2, #68]	; 0x44
 8004642:	4b7d      	ldr	r3, [pc, #500]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800464e:	4b7a      	ldr	r3, [pc, #488]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	4a79      	ldr	r2, [pc, #484]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6313      	str	r3, [r2, #48]	; 0x30
 800465a:	4b77      	ldr	r3, [pc, #476]	; (8004838 <HAL_SPI_MspInit+0x224>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8004666:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004674:	2303      	movs	r3, #3
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004678:	2305      	movs	r3, #5
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004680:	4619      	mov	r1, r3
 8004682:	486e      	ldr	r0, [pc, #440]	; (800483c <HAL_SPI_MspInit+0x228>)
 8004684:	f001 fea0 	bl	80063c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004688:	2200      	movs	r2, #0
 800468a:	2105      	movs	r1, #5
 800468c:	2023      	movs	r0, #35	; 0x23
 800468e:	f001 facd 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004692:	2023      	movs	r0, #35	; 0x23
 8004694:	f001 fae6 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004698:	e0c7      	b.n	800482a <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a68      	ldr	r2, [pc, #416]	; (8004840 <HAL_SPI_MspInit+0x22c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d131      	bne.n	8004708 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046a4:	4b64      	ldr	r3, [pc, #400]	; (8004838 <HAL_SPI_MspInit+0x224>)
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	4a63      	ldr	r2, [pc, #396]	; (8004838 <HAL_SPI_MspInit+0x224>)
 80046aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ae:	6413      	str	r3, [r2, #64]	; 0x40
 80046b0:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_SPI_MspInit+0x224>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046bc:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_SPI_MspInit+0x224>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <HAL_SPI_MspInit+0x224>)
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	6313      	str	r3, [r2, #48]	; 0x30
 80046c8:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_SPI_MspInit+0x224>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046da:	2302      	movs	r3, #2
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046e6:	2305      	movs	r3, #5
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ee:	4619      	mov	r1, r3
 80046f0:	4854      	ldr	r0, [pc, #336]	; (8004844 <HAL_SPI_MspInit+0x230>)
 80046f2:	f001 fe69 	bl	80063c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2105      	movs	r1, #5
 80046fa:	2024      	movs	r0, #36	; 0x24
 80046fc:	f001 fa96 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004700:	2024      	movs	r0, #36	; 0x24
 8004702:	f001 faaf 	bl	8005c64 <HAL_NVIC_EnableIRQ>
}
 8004706:	e090      	b.n	800482a <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a4e      	ldr	r2, [pc, #312]	; (8004848 <HAL_SPI_MspInit+0x234>)
 800470e:	4293      	cmp	r3, r2
 8004710:	f040 808b 	bne.w	800482a <HAL_SPI_MspInit+0x216>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004714:	4b48      	ldr	r3, [pc, #288]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	4a47      	ldr	r2, [pc, #284]	; (8004838 <HAL_SPI_MspInit+0x224>)
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	6413      	str	r3, [r2, #64]	; 0x40
 8004720:	4b45      	ldr	r3, [pc, #276]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472c:	4b42      	ldr	r3, [pc, #264]	; (8004838 <HAL_SPI_MspInit+0x224>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6313      	str	r3, [r2, #48]	; 0x30
 8004738:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <HAL_SPI_MspInit+0x224>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004744:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4a3b      	ldr	r2, [pc, #236]	; (8004838 <HAL_SPI_MspInit+0x224>)
 800474a:	f043 0302 	orr.w	r3, r3, #2
 800474e:	6313      	str	r3, [r2, #48]	; 0x30
 8004750:	4b39      	ldr	r3, [pc, #228]	; (8004838 <HAL_SPI_MspInit+0x224>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800475c:	2310      	movs	r3, #16
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004760:	2302      	movs	r3, #2
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004768:	2303      	movs	r3, #3
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800476c:	2306      	movs	r3, #6
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004774:	4619      	mov	r1, r3
 8004776:	4831      	ldr	r0, [pc, #196]	; (800483c <HAL_SPI_MspInit+0x228>)
 8004778:	f001 fe26 	bl	80063c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800477c:	2304      	movs	r3, #4
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	2302      	movs	r3, #2
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004784:	2300      	movs	r3, #0
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004788:	2303      	movs	r3, #3
 800478a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800478c:	2307      	movs	r3, #7
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004794:	4619      	mov	r1, r3
 8004796:	482b      	ldr	r0, [pc, #172]	; (8004844 <HAL_SPI_MspInit+0x230>)
 8004798:	f001 fe16 	bl	80063c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800479c:	2318      	movs	r3, #24
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a0:	2302      	movs	r3, #2
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a8:	2303      	movs	r3, #3
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047ac:	2306      	movs	r3, #6
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b4:	4619      	mov	r1, r3
 80047b6:	4823      	ldr	r0, [pc, #140]	; (8004844 <HAL_SPI_MspInit+0x230>)
 80047b8:	f001 fe06 	bl	80063c8 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047be:	4a24      	ldr	r2, [pc, #144]	; (8004850 <HAL_SPI_MspInit+0x23c>)
 80047c0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047da:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047de:	2200      	movs	r2, #0
 80047e0:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047f6:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_SPI_MspInit+0x238>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80047fe:	4813      	ldr	r0, [pc, #76]	; (800484c <HAL_SPI_MspInit+0x238>)
 8004800:	f001 fa3e 	bl	8005c80 <HAL_DMA_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 800480a:	f7ff fde9 	bl	80043e0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_SPI_MspInit+0x238>)
 8004812:	659a      	str	r2, [r3, #88]	; 0x58
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <HAL_SPI_MspInit+0x238>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800481a:	2200      	movs	r2, #0
 800481c:	2105      	movs	r1, #5
 800481e:	2033      	movs	r0, #51	; 0x33
 8004820:	f001 fa04 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004824:	2033      	movs	r0, #51	; 0x33
 8004826:	f001 fa1d 	bl	8005c64 <HAL_NVIC_EnableIRQ>
}
 800482a:	bf00      	nop
 800482c:	3738      	adds	r7, #56	; 0x38
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40013000 	.word	0x40013000
 8004838:	40023800 	.word	0x40023800
 800483c:	40020000 	.word	0x40020000
 8004840:	40003800 	.word	0x40003800
 8004844:	40020400 	.word	0x40020400
 8004848:	40003c00 	.word	0x40003c00
 800484c:	20026cfc 	.word	0x20026cfc
 8004850:	40026010 	.word	0x40026010

08004854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800485c:	f107 031c 	add.w	r3, r7, #28
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a36      	ldr	r2, [pc, #216]	; (800494c <HAL_UART_MspInit+0xf8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d130      	bne.n	80048d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <HAL_UART_MspInit+0xfc>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a35      	ldr	r2, [pc, #212]	; (8004950 <HAL_UART_MspInit+0xfc>)
 800487c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
 8004882:	4b33      	ldr	r3, [pc, #204]	; (8004950 <HAL_UART_MspInit+0xfc>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_UART_MspInit+0xfc>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <HAL_UART_MspInit+0xfc>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <HAL_UART_MspInit+0xfc>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048a6:	2303      	movs	r3, #3
 80048a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80048b6:	2308      	movs	r3, #8
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f107 031c 	add.w	r3, r7, #28
 80048be:	4619      	mov	r1, r3
 80048c0:	4824      	ldr	r0, [pc, #144]	; (8004954 <HAL_UART_MspInit+0x100>)
 80048c2:	f001 fd81 	bl	80063c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2105      	movs	r1, #5
 80048ca:	2034      	movs	r0, #52	; 0x34
 80048cc:	f001 f9ae 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80048d0:	2034      	movs	r0, #52	; 0x34
 80048d2:	f001 f9c7 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80048d6:	e035      	b.n	8004944 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==UART7)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <HAL_UART_MspInit+0x104>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d130      	bne.n	8004944 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_UART7_CLK_ENABLE();
 80048e2:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_UART_MspInit+0xfc>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a1a      	ldr	r2, [pc, #104]	; (8004950 <HAL_UART_MspInit+0xfc>)
 80048e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_UART_MspInit+0xfc>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_UART_MspInit+0xfc>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <HAL_UART_MspInit+0xfc>)
 8004900:	f043 0310 	orr.w	r3, r3, #16
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_UART_MspInit+0xfc>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004912:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004920:	2303      	movs	r3, #3
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004924:	2308      	movs	r3, #8
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004928:	f107 031c 	add.w	r3, r7, #28
 800492c:	4619      	mov	r1, r3
 800492e:	480b      	ldr	r0, [pc, #44]	; (800495c <HAL_UART_MspInit+0x108>)
 8004930:	f001 fd4a 	bl	80063c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004934:	2200      	movs	r2, #0
 8004936:	2105      	movs	r1, #5
 8004938:	2052      	movs	r0, #82	; 0x52
 800493a:	f001 f977 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800493e:	2052      	movs	r0, #82	; 0x52
 8004940:	f001 f990 	bl	8005c64 <HAL_NVIC_EnableIRQ>
}
 8004944:	bf00      	nop
 8004946:	3730      	adds	r7, #48	; 0x30
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40004c00 	.word	0x40004c00
 8004950:	40023800 	.word	0x40023800
 8004954:	40020000 	.word	0x40020000
 8004958:	40007800 	.word	0x40007800
 800495c:	40021000 	.word	0x40021000

08004960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08c      	sub	sp, #48	; 0x30
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004970:	2200      	movs	r2, #0
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	2019      	movs	r0, #25
 8004976:	f001 f959 	bl	8005c2c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800497a:	2019      	movs	r0, #25
 800497c:	f001 f972 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004980:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <HAL_InitTick+0xa0>)
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <HAL_InitTick+0xa0>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6453      	str	r3, [r2, #68]	; 0x44
 800498c:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <HAL_InitTick+0xa0>)
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004998:	f107 0210 	add.w	r2, r7, #16
 800499c:	f107 0314 	add.w	r3, r7, #20
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 fd48 	bl	8008438 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80049a8:	f003 fd32 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 80049ac:	4603      	mov	r3, r0
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <HAL_InitTick+0xa4>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0c9b      	lsrs	r3, r3, #18
 80049bc:	3b01      	subs	r3, #1
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_InitTick+0xa8>)
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <HAL_InitTick+0xac>)
 80049c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_InitTick+0xa8>)
 80049c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80049ce:	4a0e      	ldr	r2, [pc, #56]	; (8004a08 <HAL_InitTick+0xa8>)
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_InitTick+0xa8>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_InitTick+0xa8>)
 80049dc:	2200      	movs	r2, #0
 80049de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80049e0:	4809      	ldr	r0, [pc, #36]	; (8004a08 <HAL_InitTick+0xa8>)
 80049e2:	f006 fadd 	bl	800afa0 <HAL_TIM_Base_Init>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80049ec:	4806      	ldr	r0, [pc, #24]	; (8004a08 <HAL_InitTick+0xa8>)
 80049ee:	f006 fb0d 	bl	800b00c <HAL_TIM_Base_Start_IT>
 80049f2:	4603      	mov	r3, r0
 80049f4:	e000      	b.n	80049f8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3730      	adds	r7, #48	; 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	431bde83 	.word	0x431bde83
 8004a08:	20026d68 	.word	0x20026d68
 8004a0c:	40010000 	.word	0x40010000

08004a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a22:	e7fe      	b.n	8004a22 <HardFault_Handler+0x4>

08004a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a28:	e7fe      	b.n	8004a28 <MemManage_Handler+0x4>

08004a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a2e:	e7fe      	b.n	8004a2e <BusFault_Handler+0x4>

08004a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a34:	e7fe      	b.n	8004a34 <UsageFault_Handler+0x4>

08004a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004a48:	4802      	ldr	r0, [pc, #8]	; (8004a54 <DMA1_Stream0_IRQHandler+0x10>)
 8004a4a:	f001 fa49 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20026cfc 	.word	0x20026cfc

08004a58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a5e:	f006 faff 	bl	800b060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20026d68 	.word	0x20026d68

08004a6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a70:	4802      	ldr	r0, [pc, #8]	; (8004a7c <SPI1_IRQHandler+0x10>)
 8004a72:	f005 fef9 	bl	800a868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2001cc98 	.word	0x2001cc98

08004a80 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a84:	4802      	ldr	r0, [pc, #8]	; (8004a90 <SPI2_IRQHandler+0x10>)
 8004a86:	f005 feef 	bl	800a868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20008988 	.word	0x20008988

08004a94 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <SDMMC1_IRQHandler+0x10>)
 8004a9a:	f004 fb27 	bl	80090ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20008ad4 	.word	0x20008ad4

08004aa8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <SPI3_IRQHandler+0x10>)
 8004aae:	f005 fedb 	bl	800a868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200109f8 	.word	0x200109f8

08004abc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <UART4_IRQHandler+0x10>)
 8004ac2:	f006 ff21 	bl	800b908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	2001cc18 	.word	0x2001cc18

08004ad0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <DMA2_Stream3_IRQHandler+0x10>)
 8004ad6:	f001 fa03 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20014bb4 	.word	0x20014bb4

08004ae4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <OTG_FS_IRQHandler+0x10>)
 8004aea:	f001 ff90 	bl	8006a0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20028b98 	.word	0x20028b98

08004af8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <DMA2_Stream6_IRQHandler+0x10>)
 8004afe:	f001 f9ef 	bl	8005ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20026c3c 	.word	0x20026c3c

08004b0c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004b10:	4802      	ldr	r0, [pc, #8]	; (8004b1c <UART7_IRQHandler+0x10>)
 8004b12:	f006 fef9 	bl	800b908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200089ec 	.word	0x200089ec

08004b20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <_sbrk+0x50>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <_sbrk+0x16>
		heap_end = &end;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <_sbrk+0x50>)
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <_sbrk+0x54>)
 8004b34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <_sbrk+0x50>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <_sbrk+0x50>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	466a      	mov	r2, sp
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d907      	bls.n	8004b5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004b4a:	f013 f8b1 	bl	8017cb0 <__errno>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	230c      	movs	r3, #12
 8004b52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	e006      	b.n	8004b68 <_sbrk+0x48>
	}

	heap_end += incr;
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <_sbrk+0x50>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	4a03      	ldr	r2, [pc, #12]	; (8004b70 <_sbrk+0x50>)
 8004b64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	200003c8 	.word	0x200003c8
 8004b74:	20028fa0 	.word	0x20028fa0

08004b78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <SystemInit+0x5c>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <SystemInit+0x5c>)
 8004b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b8c:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <SystemInit+0x60>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <SystemInit+0x60>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <SystemInit+0x60>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <SystemInit+0x60>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <SystemInit+0x60>)
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <SystemInit+0x64>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <SystemInit+0x60>)
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <SystemInit+0x68>)
 8004bae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <SystemInit+0x60>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <SystemInit+0x60>)
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <SystemInit+0x60>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bc2:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <SystemInit+0x5c>)
 8004bc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bc8:	609a      	str	r2, [r3, #8]
#endif
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000ed00 	.word	0xe000ed00
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	fef6ffff 	.word	0xfef6ffff
 8004be0:	24003010 	.word	0x24003010

08004be4 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8004bf0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	4618      	mov	r0, r3
 8004c02:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004c06:	461a      	mov	r2, r3
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f013 f896 	bl	8017d3a <memset>
    control_data_init(&control_data);
 8004c0e:	f107 0308 	add.w	r3, r7, #8
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc fdb6 	bl	8001784 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004c18:	f00e fb8a 	bl	8013330 <osKernelGetTickCount>
 8004c1c:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8004c20:	f00e fbae 	bl	8013380 <osKernelGetTickFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <vTaskController+0x148>)
 8004c28:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004c32:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8004c36:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8004c40:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8004c44:	233c      	movs	r3, #60	; 0x3c
 8004c46:	493a      	ldr	r1, [pc, #232]	; (8004d30 <vTaskController+0x14c>)
 8004c48:	483a      	ldr	r0, [pc, #232]	; (8004d34 <vTaskController+0x150>)
 8004c4a:	f7fe fd59 	bl	8003700 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8004c4e:	4b38      	ldr	r3, [pc, #224]	; (8004d30 <vTaskController+0x14c>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c5a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004d38 <vTaskController+0x154>
 8004c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8004c6a:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <vTaskController+0x14c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c76:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004d38 <vTaskController+0x154>
 8004c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8004c86:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004c8a:	233c      	movs	r3, #60	; 0x3c
 8004c8c:	492b      	ldr	r1, [pc, #172]	; (8004d3c <vTaskController+0x158>)
 8004c8e:	482c      	ldr	r0, [pc, #176]	; (8004d40 <vTaskController+0x15c>)
 8004c90:	f7fe fd36 	bl	8003700 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8004c94:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004c98:	f107 0308 	add.w	r3, r7, #8
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fc5e 	bl	8001560 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8004ca4:	4827      	ldr	r0, [pc, #156]	; (8004d44 <vTaskController+0x160>)
 8004ca6:	f7fe fd03 	bl	80036b0 <AcquireMutex>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d110      	bne.n	8004cd2 <vTaskController+0xee>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	edd3 7a00 	vldr	s15, [r3]
 8004cb8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d38 <vTaskController+0x154>
 8004cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc4:	ee17 2a90 	vmov	r2, s15
 8004cc8:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <vTaskController+0x164>)
 8004cca:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8004ccc:	481d      	ldr	r0, [pc, #116]	; (8004d44 <vTaskController+0x160>)
 8004cce:	f7fe fd09 	bl	80036e4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8004cd2:	f00e fb2d 	bl	8013330 <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	edd3 7a00 	vldr	s15, [r3]
 8004cde:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004d38 <vTaskController+0x154>
 8004ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004ce6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cf2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004d38 <vTaskController+0x154>
 8004cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004cfa:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 8004cfe:	f107 0308 	add.w	r3, r7, #8
 8004d02:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d06:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004d38 <vTaskController+0x154>
 8004d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d12:	ee17 3a90 	vmov	r3, s15
 8004d16:	ee16 2a10 	vmov	r2, s12
 8004d1a:	ee16 1a90 	vmov	r1, s13
 8004d1e:	f7fe fed7 	bl	8003ad0 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8004d22:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8004d26:	f00e fc09 	bl	801353c <osDelayUntil>
		tick_count += tick_update;
 8004d2a:	e782      	b.n	8004c32 <vTaskController+0x4e>
 8004d2c:	51eb851f 	.word	0x51eb851f
 8004d30:	2000026c 	.word	0x2000026c
 8004d34:	20010af0 	.word	0x20010af0
 8004d38:	447a0000 	.word	0x447a0000
 8004d3c:	200002bc 	.word	0x200002bc
 8004d40:	20008980 	.word	0x20008980
 8004d44:	20010a5c 	.word	0x20010a5c
 8004d48:	200002a8 	.word	0x200002a8

08004d4c <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b09f      	sub	sp, #124	; 0x7c
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004d60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fd f94d 	bl	8002004 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8004d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d6e:	223c      	movs	r2, #60	; 0x3c
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f012 ffe1 	bl	8017d3a <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8004d78:	f107 0308 	add.w	r3, r7, #8
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fc fe83 	bl	8001a88 <init_env>
	init_env(&environment);
 8004d82:	f107 0318 	add.w	r3, r7, #24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc fe7e 	bl	8001a88 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004d8c:	f00e fad0 	bl	8013330 <osKernelGetTickCount>
 8004d90:	6778      	str	r0, [r7, #116]	; 0x74
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004d92:	f00e faf5 	bl	8013380 <osKernelGetTickFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <vTaskFSM+0xc4>)
 8004d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	673b      	str	r3, [r7, #112]	; 0x70

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004da2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da6:	4413      	add	r3, r2
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8004daa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dae:	233c      	movs	r3, #60	; 0x3c
 8004db0:	4918      	ldr	r1, [pc, #96]	; (8004e14 <vTaskFSM+0xc8>)
 8004db2:	4819      	ldr	r0, [pc, #100]	; (8004e18 <vTaskFSM+0xcc>)
 8004db4:	f7fe fca4 	bl	8003700 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8004db8:	f107 0218 	add.w	r2, r7, #24
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	4917      	ldr	r1, [pc, #92]	; (8004e1c <vTaskFSM+0xd0>)
 8004dc0:	4817      	ldr	r0, [pc, #92]	; (8004e20 <vTaskFSM+0xd4>)
 8004dc2:	f7fe fc9d 	bl	8003700 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8004dc6:	f107 0218 	add.w	r2, r7, #24
 8004dca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004dce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd f814 	bl	8001e00 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8004dd8:	4812      	ldr	r0, [pc, #72]	; (8004e24 <vTaskFSM+0xd8>)
 8004dda:	f7fe fc69 	bl	80036b0 <AcquireMutex>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <vTaskFSM+0xae>
			global_flight_phase_detection = flight_phase_detection;
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <vTaskFSM+0xdc>)
 8004de6:	461c      	mov	r4, r3
 8004de8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004df0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8004df4:	480b      	ldr	r0, [pc, #44]	; (8004e24 <vTaskFSM+0xd8>)
 8004df6:	f7fe fc75 	bl	80036e4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 8004dfa:	f00e fa99 	bl	8013330 <osKernelGetTickCount>
 8004dfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e04:	f7fe fe06 	bl	8003a14 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8004e08:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004e0a:	f00e fb97 	bl	801353c <osDelayUntil>
		tick_count += tick_update;
 8004e0e:	e7c8      	b.n	8004da2 <vTaskFSM+0x56>
 8004e10:	51eb851f 	.word	0x51eb851f
 8004e14:	2000026c 	.word	0x2000026c
 8004e18:	20010af0 	.word	0x20010af0
 8004e1c:	200002ac 	.word	0x200002ac
 8004e20:	20008b6c 	.word	0x20008b6c
 8004e24:	20008980 	.word	0x20008980
 8004e28:	200002bc 	.word	0x200002bc

08004e2c <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes();


void vTaskMotorCont(void *argument) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b090      	sub	sp, #64	; 0x40
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 8004e38:	239b      	movs	r3, #155	; 0x9b
 8004e3a:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 8004e4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e50:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 2000;
 8004e58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 8004e5e:	4b49      	ldr	r3, [pc, #292]	; (8004f84 <vTaskMotorCont+0x158>)
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 8004e62:	4b48      	ldr	r3, [pc, #288]	; (8004f84 <vTaskMotorCont+0x158>)
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t measured_motor_position = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 8004e72:	e003      	b.n	8004e7c <vTaskMotorCont+0x50>
		osDelay(1000);
 8004e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e78:	f00e fb32 	bl	80134e0 <osDelay>
	while(EnableMotor() != osOK){
 8004e7c:	f7fc f8b0 	bl	8000fe0 <EnableMotor>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f6      	bne.n	8004e74 <vTaskMotorCont+0x48>
	};

	while(SetPositionMode(position_mode) != osOK){
 8004e86:	e003      	b.n	8004e90 <vTaskMotorCont+0x64>
		osDelay(1000);
 8004e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e8c:	f00e fb28 	bl	80134e0 <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 8004e90:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fc f8fc 	bl	8001092 <SetPositionMode>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f3      	bne.n	8004e88 <vTaskMotorCont+0x5c>
	};

	if (position_mode == 0x01) {
 8004ea0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <vTaskMotorCont+0x88>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eae:	f7fc f970 	bl	8001192 <ConfigurePPM>
 8004eb2:	6378      	str	r0, [r7, #52]	; 0x34
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004eb4:	f00e fa3c 	bl	8013330 <osKernelGetTickCount>
 8004eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004eba:	f00e fa61 	bl	8013380 <osKernelGetTickFreq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <vTaskMotorCont+0x15c>)
 8004ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 8004eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	4413      	add	r3, r2
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc f9d2 	bl	8001280 <GetPosition>
 8004edc:	6378      	str	r0, [r7, #52]	; 0x34

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004ede:	f107 021f 	add.w	r2, r7, #31
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4929      	ldr	r1, [pc, #164]	; (8004f8c <vTaskMotorCont+0x160>)
 8004ee6:	482a      	ldr	r0, [pc, #168]	; (8004f90 <vTaskMotorCont+0x164>)
 8004ee8:	f7fe fc0a 	bl	8003700 <ReadMutex>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8004eec:	f107 0210 	add.w	r2, r7, #16
 8004ef0:	230c      	movs	r3, #12
 8004ef2:	4928      	ldr	r1, [pc, #160]	; (8004f94 <vTaskMotorCont+0x168>)
 8004ef4:	4828      	ldr	r0, [pc, #160]	; (8004f98 <vTaskMotorCont+0x16c>)
 8004ef6:	f7fe fc03 	bl	8003700 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 8004efa:	f107 020c 	add.w	r2, r7, #12
 8004efe:	2304      	movs	r3, #4
 8004f00:	4926      	ldr	r1, [pc, #152]	; (8004f9c <vTaskMotorCont+0x170>)
 8004f02:	4827      	ldr	r0, [pc, #156]	; (8004fa0 <vTaskMotorCont+0x174>)
 8004f04:	f7fe fbfc 	bl	8003700 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f12:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004fa4 <vTaskMotorCont+0x178>
 8004f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f1a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004fa8 <vTaskMotorCont+0x17c>
 8004f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f26:	ee17 3a90 	vmov	r3, s15
 8004f2a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Check Bounds */
		if(desired_motor_position > -2){
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	db02      	blt.n	8004f3a <vTaskMotorCont+0x10e>
			desired_motor_position = -2;
 8004f34:	f06f 0301 	mvn.w	r3, #1
 8004f38:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if(desired_motor_position < -135){
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	f113 0f87 	cmn.w	r3, #135	; 0x87
 8004f40:	da02      	bge.n	8004f48 <vTaskMotorCont+0x11c>
			desired_motor_position = -135;
 8004f42:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 8004f48:	7c3b      	ldrb	r3, [r7, #16]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d103      	bne.n	8004f56 <vTaskMotorCont+0x12a>
			/* Move the Motor */
			MoveToPositionPPM(desired_motor_position);
 8004f4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f50:	f7fc f8c4 	bl	80010dc <MoveToPositionPPM>
 8004f54:	e002      	b.n	8004f5c <vTaskMotorCont+0x130>
		}
		else{
			MoveToPositionPPM(0);
 8004f56:	2000      	movs	r0, #0
 8004f58:	f7fc f8c0 	bl	80010dc <MoveToPositionPPM>
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND){
 8004f5c:	7c3b      	ldrb	r3, [r7, #16]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d104      	bne.n	8004f6c <vTaskMotorCont+0x140>
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b9d      	cmp	r3, #157	; 0x9d
 8004f66:	d101      	bne.n	8004f6c <vTaskMotorCont+0x140>
			testairbrakes();
 8004f68:	f000 f820 	bl	8004fac <testairbrakes>
		}



		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 8004f6c:	f00e f9e0 	bl	8013330 <osKernelGetTickCount>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f76:	f7fe fdd9 	bl	8003b2c <logMotor>


		osDelayUntil(tick_count);
 8004f7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f7c:	f00e fade 	bl	801353c <osDelayUntil>
		tick_count += tick_update;
 8004f80:	e7a3      	b.n	8004eca <vTaskMotorCont+0x9e>
 8004f82:	bf00      	nop
 8004f84:	000186a0 	.word	0x000186a0
 8004f88:	cccccccd 	.word	0xcccccccd
 8004f8c:	20014b54 	.word	0x20014b54
 8004f90:	20008b64 	.word	0x20008b64
 8004f94:	200002bc 	.word	0x200002bc
 8004f98:	20008980 	.word	0x20008980
 8004f9c:	200002a8 	.word	0x200002a8
 8004fa0:	20010a5c 	.word	0x20010a5c
 8004fa4:	447a0000 	.word	0x447a0000
 8004fa8:	c30c0000 	.word	0xc30c0000

08004fac <testairbrakes>:
	}
}

void testairbrakes(){
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
	MoveToPositionPPM(-150);
 8004fb0:	f06f 0095 	mvn.w	r0, #149	; 0x95
 8004fb4:	f7fc f892 	bl	80010dc <MoveToPositionPPM>
	HAL_Delay(1000);
 8004fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fbc:	f000 fd5c 	bl	8005a78 <HAL_Delay>
	MoveToPositionPPM(0);
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7fc f88b 	bl	80010dc <MoveToPositionPPM>
}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004fcc:	b5b0      	push	{r4, r5, r7, lr}
 8004fce:	b0cc      	sub	sp, #304	; 0x130
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004fdc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004fe8:	48c3      	ldr	r0, [pc, #780]	; (80052f8 <vTaskSdCard+0x32c>)
 8004fea:	f7fe fdcb 	bl	8003b84 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8004fee:	48c3      	ldr	r0, [pc, #780]	; (80052fc <vTaskSdCard+0x330>)
 8004ff0:	f7fe fdc8 	bl	8003b84 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	49c2      	ldr	r1, [pc, #776]	; (8005300 <vTaskSdCard+0x334>)
 8004ff8:	48c2      	ldr	r0, [pc, #776]	; (8005304 <vTaskSdCard+0x338>)
 8004ffa:	f00d f88d 	bl	8012118 <f_mount>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8005004:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 800500c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005010:	4619      	mov	r1, r3
 8005012:	48bd      	ldr	r0, [pc, #756]	; (8005308 <vTaskSdCard+0x33c>)
 8005014:	f7fe fdb6 	bl	8003b84 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8005018:	4bbc      	ldr	r3, [pc, #752]	; (800530c <vTaskSdCard+0x340>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 800501e:	2064      	movs	r0, #100	; 0x64
 8005020:	f00e fa5e 	bl	80134e0 <osDelay>
		}
	} while (res != FR_OK);
 8005024:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e3      	bne.n	8004ff4 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 800502c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 80a9 	bne.w	8005188 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8005036:	48b6      	ldr	r0, [pc, #728]	; (8005310 <vTaskSdCard+0x344>)
 8005038:	f7fe fda4 	bl	8003b84 <UsbPrint>

		unsigned int file_number = 1;
 800503c:	2301      	movs	r3, #1
 800503e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8005042:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005046:	f107 0008 	add.w	r0, r7, #8
 800504a:	4bb2      	ldr	r3, [pc, #712]	; (8005314 <vTaskSdCard+0x348>)
 800504c:	4aac      	ldr	r2, [pc, #688]	; (8005300 <vTaskSdCard+0x334>)
 800504e:	f00e f81b 	bl	8013088 <f_findfirst>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8005058:	e02b      	b.n	80050b2 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800505a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800505e:	3b30      	subs	r3, #48	; 0x30
 8005060:	2264      	movs	r2, #100	; 0x64
 8005062:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8005066:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800506a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	18ca      	adds	r2, r1, r3
 8005078:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800507c:	3b30      	subs	r3, #48	; 0x30
 800507e:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8005080:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8005084:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005088:	3301      	adds	r3, #1
 800508a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800508e:	429a      	cmp	r2, r3
 8005090:	d204      	bcs.n	800509c <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8005092:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005096:	3301      	adds	r3, #1
 8005098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 800509c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f00d ffc6 	bl	8013038 <f_findnext>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80050b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <vTaskSdCard+0xf6>
 80050ba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1cb      	bne.n	800505a <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 80050c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d006      	beq.n	80050d8 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 80050ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050ce:	4619      	mov	r1, r3
 80050d0:	4891      	ldr	r0, [pc, #580]	; (8005318 <vTaskSdCard+0x34c>)
 80050d2:	f7fe fd57 	bl	8003b84 <UsbPrint>
					res);
			goto resetSDCard;
 80050d6:	e78a      	b.n	8004fee <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80050d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050dc:	4a8f      	ldr	r2, [pc, #572]	; (800531c <vTaskSdCard+0x350>)
 80050de:	ca07      	ldmia	r2, {r0, r1, r2}
 80050e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80050e4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80050e8:	4b8d      	ldr	r3, [pc, #564]	; (8005320 <vTaskSdCard+0x354>)
 80050ea:	fba3 2301 	umull	r2, r3, r3, r1
 80050ee:	08da      	lsrs	r2, r3, #3
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	1aca      	subs	r2, r1, r3
 80050fa:	b2d3      	uxtb	r3, r2
 80050fc:	3330      	adds	r3, #48	; 0x30
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8005104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005108:	4a85      	ldr	r2, [pc, #532]	; (8005320 <vTaskSdCard+0x354>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	08d9      	lsrs	r1, r3, #3
 8005110:	4b83      	ldr	r3, [pc, #524]	; (8005320 <vTaskSdCard+0x354>)
 8005112:	fba3 2301 	umull	r2, r3, r3, r1
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	1aca      	subs	r2, r1, r3
 8005122:	b2d3      	uxtb	r3, r2
 8005124:	3330      	adds	r3, #48	; 0x30
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 800512c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005130:	4a7c      	ldr	r2, [pc, #496]	; (8005324 <vTaskSdCard+0x358>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	0959      	lsrs	r1, r3, #5
 8005138:	4b79      	ldr	r3, [pc, #484]	; (8005320 <vTaskSdCard+0x354>)
 800513a:	fba3 2301 	umull	r2, r3, r3, r1
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	1aca      	subs	r2, r1, r3
 800514a:	b2d3      	uxtb	r3, r2
 800514c:	3330      	adds	r3, #48	; 0x30
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8005154:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005158:	4619      	mov	r1, r3
 800515a:	4873      	ldr	r0, [pc, #460]	; (8005328 <vTaskSdCard+0x35c>)
 800515c:	f7fe fd12 	bl	8003b84 <UsbPrint>

		res = f_closedir(&dj);
 8005160:	f107 0308 	add.w	r3, r7, #8
 8005164:	4618      	mov	r0, r3
 8005166:	f00d fef9 	bl	8012f5c <f_closedir>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8005170:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8005178:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800517c:	4619      	mov	r1, r3
 800517e:	486b      	ldr	r0, [pc, #428]	; (800532c <vTaskSdCard+0x360>)
 8005180:	f7fe fd00 	bl	8003b84 <UsbPrint>
			goto resetSDCard;
 8005184:	bf00      	nop
 8005186:	e732      	b.n	8004fee <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8005188:	4869      	ldr	r0, [pc, #420]	; (8005330 <vTaskSdCard+0x364>)
 800518a:	f7fe fcfb 	bl	8003b84 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 800518e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005192:	2212      	movs	r2, #18
 8005194:	4619      	mov	r1, r3
 8005196:	4867      	ldr	r0, [pc, #412]	; (8005334 <vTaskSdCard+0x368>)
 8005198:	f00d f822 	bl	80121e0 <f_open>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 80051a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 80051aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051ae:	4619      	mov	r1, r3
 80051b0:	4861      	ldr	r0, [pc, #388]	; (8005338 <vTaskSdCard+0x36c>)
 80051b2:	f7fe fce7 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 80051b6:	e71a      	b.n	8004fee <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 80051b8:	4860      	ldr	r0, [pc, #384]	; (800533c <vTaskSdCard+0x370>)
 80051ba:	f7fe fce3 	bl	8003b84 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 80051be:	4b5d      	ldr	r3, [pc, #372]	; (8005334 <vTaskSdCard+0x368>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4619      	mov	r1, r3
 80051c4:	485b      	ldr	r0, [pc, #364]	; (8005334 <vTaskSdCard+0x368>)
 80051c6:	f00d fbfd 	bl	80129c4 <f_lseek>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 80051d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 80051d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051dc:	4619      	mov	r1, r3
 80051de:	4858      	ldr	r0, [pc, #352]	; (8005340 <vTaskSdCard+0x374>)
 80051e0:	f7fe fcd0 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 80051e4:	e703      	b.n	8004fee <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 80051ec:	4b55      	ldr	r3, [pc, #340]	; (8005344 <vTaskSdCard+0x378>)
 80051ee:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80051f2:	461d      	mov	r5, r3
 80051f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80051fc:	c407      	stmia	r4!, {r0, r1, r2}
 80051fe:	8023      	strh	r3, [r4, #0]
 8005200:	3402      	adds	r4, #2
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	7023      	strb	r3, [r4, #0]
 8005206:	2300      	movs	r3, #0
 8005208:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8005212:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005216:	4618      	mov	r0, r3
 8005218:	f7fa fffa 	bl	8000210 <strlen>
 800521c:	4602      	mov	r2, r0
 800521e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8005222:	4b49      	ldr	r3, [pc, #292]	; (8005348 <vTaskSdCard+0x37c>)
 8005224:	4843      	ldr	r0, [pc, #268]	; (8005334 <vTaskSdCard+0x368>)
 8005226:	f00d f9a0 	bl	801256a <f_write>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8005230:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005234:	2b00      	cmp	r3, #0
 8005236:	d006      	beq.n	8005246 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8005238:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800523c:	4619      	mov	r1, r3
 800523e:	4843      	ldr	r0, [pc, #268]	; (800534c <vTaskSdCard+0x380>)
 8005240:	f7fe fca0 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005244:	e6d3      	b.n	8004fee <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8005246:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800524a:	2296      	movs	r2, #150	; 0x96
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f012 fd73 	bl	8017d3a <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8005254:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <vTaskSdCard+0x384>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800525c:	f04f 33ff 	mov.w	r3, #4294967295
 8005260:	2200      	movs	r2, #0
 8005262:	f00e fd7f 	bl	8013d64 <osMessageQueueGet>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f3      	bne.n	8005254 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 800526c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005270:	4618      	mov	r0, r3
 8005272:	f7fa ffcd 	bl	8000210 <strlen>
 8005276:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 800527a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800527e:	2b00      	cmp	r3, #0
 8005280:	d015      	beq.n	80052ae <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8005282:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005286:	4b30      	ldr	r3, [pc, #192]	; (8005348 <vTaskSdCard+0x37c>)
 8005288:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800528c:	4829      	ldr	r0, [pc, #164]	; (8005334 <vTaskSdCard+0x368>)
 800528e:	f00d f96c 	bl	801256a <f_write>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8005298:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800529c:	2b00      	cmp	r3, #0
 800529e:	d006      	beq.n	80052ae <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 80052a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052a4:	4619      	mov	r1, r3
 80052a6:	4829      	ldr	r0, [pc, #164]	; (800534c <vTaskSdCard+0x380>)
 80052a8:	f7fe fc6c 	bl	8003b84 <UsbPrint>
							res);
					goto resetSDCard;
 80052ac:	e69f      	b.n	8004fee <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 80052ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	2b7f      	cmp	r3, #127	; 0x7f
 80052be:	ddc9      	ble.n	8005254 <vTaskSdCard+0x288>
				msgCounter = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 80052c6:	4823      	ldr	r0, [pc, #140]	; (8005354 <vTaskSdCard+0x388>)
 80052c8:	f7fe fc5c 	bl	8003b84 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80052cc:	2108      	movs	r1, #8
 80052ce:	4822      	ldr	r0, [pc, #136]	; (8005358 <vTaskSdCard+0x38c>)
 80052d0:	f001 fa3d 	bl	800674e <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 80052d4:	4817      	ldr	r0, [pc, #92]	; (8005334 <vTaskSdCard+0x368>)
 80052d6:	f00d faec 	bl	80128b2 <f_sync>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 80052e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0b5      	beq.n	8005254 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 80052e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052ec:	4619      	mov	r1, r3
 80052ee:	481b      	ldr	r0, [pc, #108]	; (800535c <vTaskSdCard+0x390>)
 80052f0:	f7fe fc48 	bl	8003b84 <UsbPrint>
					goto resetSDCard;
 80052f4:	e67b      	b.n	8004fee <vTaskSdCard+0x22>
 80052f6:	bf00      	nop
 80052f8:	0801a8a8 	.word	0x0801a8a8
 80052fc:	0801a8d0 	.word	0x0801a8d0
 8005300:	0801a8f4 	.word	0x0801a8f4
 8005304:	20026fd8 	.word	0x20026fd8
 8005308:	0801a8f8 	.word	0x0801a8f8
 800530c:	20000460 	.word	0x20000460
 8005310:	0801a924 	.word	0x0801a924
 8005314:	0801a948 	.word	0x0801a948
 8005318:	0801a954 	.word	0x0801a954
 800531c:	0801a98c 	.word	0x0801a98c
 8005320:	cccccccd 	.word	0xcccccccd
 8005324:	51eb851f 	.word	0x51eb851f
 8005328:	0801a998 	.word	0x0801a998
 800532c:	0801a9bc 	.word	0x0801a9bc
 8005330:	0801a9ec 	.word	0x0801a9ec
 8005334:	20026da8 	.word	0x20026da8
 8005338:	0801aa10 	.word	0x0801aa10
 800533c:	0801aa3c 	.word	0x0801aa3c
 8005340:	0801aa64 	.word	0x0801aa64
 8005344:	0801ab08 	.word	0x0801ab08
 8005348:	2002720c 	.word	0x2002720c
 800534c:	0801aa94 	.word	0x0801aa94
 8005350:	2001ccfc 	.word	0x2001ccfc
 8005354:	0801aac0 	.word	0x0801aac0
 8005358:	40020800 	.word	0x40020800
 800535c:	0801aae0 	.word	0x0801aae0

08005360 <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005368:	f00d ffe2 	bl	8013330 <osKernelGetTickCount>
 800536c:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800536e:	f00e f807 	bl	8013380 <osKernelGetTickFreq>
 8005372:	4602      	mov	r2, r0
 8005374:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <vTaskSensRead+0x60>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]




	for (;;) {
		tick_count += tick_update;
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 800538a:	4a0e      	ldr	r2, [pc, #56]	; (80053c4 <vTaskSensRead+0x64>)
 800538c:	490e      	ldr	r1, [pc, #56]	; (80053c8 <vTaskSensRead+0x68>)
 800538e:	480f      	ldr	r0, [pc, #60]	; (80053cc <vTaskSensRead+0x6c>)
 8005390:	f000 f82e 	bl	80053f0 <ReadDataSB>
		/* Log Data */
//		logSensor(tick_count, 1, BARO, &sb1_data.baro);
//		logSensor(tick_count, 1, IMU, &sb1_data.imu);
//		logSensor(tick_count, 2, BARO, &sb2_data.baro);
//		logSensor(tick_count, 2, IMU, &sb2_data.imu);
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <vTaskSensRead+0x64>)
 8005396:	2201      	movs	r2, #1
 8005398:	2103      	movs	r1, #3
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f7fe fa94 	bl	80038c8 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <vTaskSensRead+0x70>)
 80053a2:	2202      	movs	r2, #2
 80053a4:	2103      	movs	r1, #3
 80053a6:	6978      	ldr	r0, [r7, #20]
 80053a8:	f7fe fa8e 	bl	80038c8 <logSensor>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80053ac:	2220      	movs	r2, #32
 80053ae:	4905      	ldr	r1, [pc, #20]	; (80053c4 <vTaskSensRead+0x64>)
 80053b0:	4808      	ldr	r0, [pc, #32]	; (80053d4 <vTaskSensRead+0x74>)
 80053b2:	f004 ffb1 	bl	800a318 <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 80053b6:	6978      	ldr	r0, [r7, #20]
 80053b8:	f00e f8c0 	bl	801353c <osDelayUntil>
		tick_count += tick_update;
 80053bc:	e7e1      	b.n	8005382 <vTaskSensRead+0x22>
 80053be:	bf00      	nop
 80053c0:	51eb851f 	.word	0x51eb851f
 80053c4:	2000040c 	.word	0x2000040c
 80053c8:	200003ec 	.word	0x200003ec
 80053cc:	200003cc 	.word	0x200003cc
 80053d0:	20000418 	.word	0x20000418
 80053d4:	200109f8 	.word	0x200109f8

080053d8 <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f005 fdbb 	bl	800af5c <HAL_SPIEx_FlushRxFifo>
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <ReadDataSB>:



/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum(sb1);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f861 	bl	80054c4 <calculate_checksum>
 8005402:	4603      	mov	r3, r0
 8005404:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb1->checksum){
		if(AcquireMutex(&sb1_mutex) == osOK ){
 8005406:	4826      	ldr	r0, [pc, #152]	; (80054a0 <ReadDataSB+0xb0>)
 8005408:	f7fe f952 	bl	80036b0 <AcquireMutex>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10e      	bne.n	8005430 <ReadDataSB+0x40>
			sb1_baro = sb3->baro;
 8005412:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <ReadDataSB+0xb4>)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	ca07      	ldmia	r2, {r0, r1, r2}
 8005418:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3->imu;
 800541c:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <ReadDataSB+0xb8>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4614      	mov	r4, r2
 8005422:	330c      	adds	r3, #12
 8005424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 800542a:	481d      	ldr	r0, [pc, #116]	; (80054a0 <ReadDataSB+0xb0>)
 800542c:	f7fe f95a 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum(sb2);
 8005430:	68b8      	ldr	r0, [r7, #8]
 8005432:	f000 f847 	bl	80054c4 <calculate_checksum>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb2->checksum){
		if(AcquireMutex(&sb2_mutex) == osOK){
 800543a:	481c      	ldr	r0, [pc, #112]	; (80054ac <ReadDataSB+0xbc>)
 800543c:	f7fe f938 	bl	80036b0 <AcquireMutex>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10e      	bne.n	8005464 <ReadDataSB+0x74>
			sb2_baro = sb3->baro;
 8005446:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <ReadDataSB+0xc0>)
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	ca07      	ldmia	r2, {r0, r1, r2}
 800544c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3->imu;
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <ReadDataSB+0xc4>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4614      	mov	r4, r2
 8005456:	330c      	adds	r3, #12
 8005458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800545a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 800545e:	4813      	ldr	r0, [pc, #76]	; (80054ac <ReadDataSB+0xbc>)
 8005460:	f7fe f940 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum(sb3);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f82d 	bl	80054c4 <calculate_checksum>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb3->checksum){
		if(AcquireMutex(&sb3_mutex) == osOK){
 800546e:	4812      	ldr	r0, [pc, #72]	; (80054b8 <ReadDataSB+0xc8>)
 8005470:	f7fe f91e 	bl	80036b0 <AcquireMutex>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10e      	bne.n	8005498 <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <ReadDataSB+0xcc>)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8005484:	4a0e      	ldr	r2, [pc, #56]	; (80054c0 <ReadDataSB+0xd0>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4614      	mov	r4, r2
 800548a:	330c      	adds	r3, #12
 800548c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800548e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8005492:	4809      	ldr	r0, [pc, #36]	; (80054b8 <ReadDataSB+0xc8>)
 8005494:	f7fe f926 	bl	80036e4 <ReleaseMutex>
		}
//	}
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}
 80054a0:	20010a70 	.word	0x20010a70
 80054a4:	20000218 	.word	0x20000218
 80054a8:	20000224 	.word	0x20000224
 80054ac:	20026d60 	.word	0x20026d60
 80054b0:	20000234 	.word	0x20000234
 80054b4:	20000240 	.word	0x20000240
 80054b8:	20010ae0 	.word	0x20010ae0
 80054bc:	20000250 	.word	0x20000250
 80054c0:	2000025c 	.word	0x2000025c

080054c4 <calculate_checksum>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum(sb_data_t *sb_data){
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	4413      	add	r3, r2
 80054da:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4413      	add	r3, r2
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	4413      	add	r3, r2
 8005522:	b2db      	uxtb	r3, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <vTaskStateEst>:

void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory);


void vTaskStateEst(void *argument) {
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	f2ad 5dbc 	subw	sp, sp, #1468	; 0x5bc
 8005536:	af0c      	add	r7, sp, #48	; 0x30
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 800553c:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8005540:	4618      	mov	r0, r3
 8005542:	f7fc faa1 	bl	8001a88 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8005546:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800554a:	2278      	movs	r2, #120	; 0x78
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f012 fbf3 	bl	8017d3a <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8005554:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005558:	4618      	mov	r0, r3
 800555a:	2378      	movs	r3, #120	; 0x78
 800555c:	461a      	mov	r2, r3
 800555e:	2100      	movs	r1, #0
 8005560:	f012 fbeb 	bl	8017d3a <memset>

	osStatus_t status_sb1 = osOK;
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
	osStatus_t status_sb2 = osOK;
 800556a:	2300      	movs	r3, #0
 800556c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
	osStatus_t status_sb3 = osOK;
 8005570:	2300      	movs	r3, #0
 8005572:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8005576:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800557a:	4618      	mov	r0, r3
 800557c:	f7fc fd5a 	bl	8002034 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8005580:	f107 0318 	add.w	r3, r7, #24
 8005584:	4618      	mov	r0, r3
 8005586:	23b0      	movs	r3, #176	; 0xb0
 8005588:	461a      	mov	r2, r3
 800558a:	2100      	movs	r1, #0
 800558c:	f012 fbd5 	bl	8017d3a <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8005590:	f107 0318 	add.w	r3, r7, #24
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 8005598:	f107 030c 	add.w	r3, r7, #12
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	6053      	str	r3, [r2, #4]
 80055a4:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 80055a6:	f107 030c 	add.w	r3, r7, #12
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fc fd2a 	bl	8002004 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 80055b0:	f107 030b 	add.w	r3, r7, #11
 80055b4:	229b      	movs	r2, #155	; 0x9b
 80055b6:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80055b8:	f107 0318 	add.w	r3, r7, #24
 80055bc:	f207 5264 	addw	r2, r7, #1380	; 0x564
 80055c0:	f107 010c 	add.w	r1, r7, #12
 80055c4:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80055c8:	f7fd f92a 	bl	8002820 <select_noise_models>



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80055cc:	f00d feb0 	bl	8013330 <osKernelGetTickCount>
 80055d0:	f8c7 0584 	str.w	r0, [r7, #1412]	; 0x584
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 80055d4:	f00d fed4 	bl	8013380 <osKernelGetTickFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b67      	ldr	r3, [pc, #412]	; (8005778 <vTaskStateEst+0x248>)
 80055dc:	fba3 2302 	umull	r2, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

	for (;;) {
		tick_count += tick_update;
 80055e6:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 80055ea:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80055ee:	4413      	add	r3, r2
 80055f0:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80055f4:	f107 020b 	add.w	r2, r7, #11
 80055f8:	2301      	movs	r3, #1
 80055fa:	4960      	ldr	r1, [pc, #384]	; (800577c <vTaskStateEst+0x24c>)
 80055fc:	4860      	ldr	r0, [pc, #384]	; (8005780 <vTaskStateEst+0x250>)
 80055fe:	f7fe f87f 	bl	8003700 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d10d      	bne.n	8005628 <vTaskStateEst+0xf8>
 800560c:	4b5b      	ldr	r3, [pc, #364]	; (800577c <vTaskStateEst+0x24c>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b9c      	cmp	r3, #156	; 0x9c
 8005612:	d109      	bne.n	8005628 <vTaskStateEst+0xf8>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005614:	f107 0318 	add.w	r3, r7, #24
 8005618:	f207 5264 	addw	r2, r7, #1380	; 0x564
 800561c:	f107 010c 	add.w	r1, r7, #12
 8005620:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8005624:	f000 f8ca 	bl	80057bc <resetStateEstimation>
		}

		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		status_sb1 = ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8005628:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800562c:	2301      	movs	r3, #1
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	4a54      	ldr	r2, [pc, #336]	; (8005784 <vTaskStateEst+0x254>)
 8005634:	4954      	ldr	r1, [pc, #336]	; (8005788 <vTaskStateEst+0x258>)
 8005636:	4855      	ldr	r0, [pc, #340]	; (800578c <vTaskStateEst+0x25c>)
 8005638:	f7fe f89e 	bl	8003778 <ReadMutexStateEst>
 800563c:	f8c7 0580 	str.w	r0, [r7, #1408]	; 0x580

		/* Sensor Board 2 */
		status_sb2 = ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8005640:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8005644:	2302      	movs	r3, #2
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	4a51      	ldr	r2, [pc, #324]	; (8005790 <vTaskStateEst+0x260>)
 800564c:	4951      	ldr	r1, [pc, #324]	; (8005794 <vTaskStateEst+0x264>)
 800564e:	4852      	ldr	r0, [pc, #328]	; (8005798 <vTaskStateEst+0x268>)
 8005650:	f7fe f892 	bl	8003778 <ReadMutexStateEst>
 8005654:	f8c7 057c 	str.w	r0, [r7, #1404]	; 0x57c

		/* Sensor Board 3 */
		status_sb3 = ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8005658:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800565c:	2303      	movs	r3, #3
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	4a4e      	ldr	r2, [pc, #312]	; (800579c <vTaskStateEst+0x26c>)
 8005664:	494e      	ldr	r1, [pc, #312]	; (80057a0 <vTaskStateEst+0x270>)
 8005666:	484f      	ldr	r0, [pc, #316]	; (80057a4 <vTaskStateEst+0x274>)
 8005668:	f7fe f886 	bl	8003778 <ReadMutexStateEst>
 800566c:	f8c7 0578 	str.w	r0, [r7, #1400]	; 0x578

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8005670:	f107 020c 	add.w	r2, r7, #12
 8005674:	230c      	movs	r3, #12
 8005676:	494c      	ldr	r1, [pc, #304]	; (80057a8 <vTaskStateEst+0x278>)
 8005678:	484c      	ldr	r0, [pc, #304]	; (80057ac <vTaskStateEst+0x27c>)
 800567a:	f7fe f841 	bl	8003700 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 800567e:	f207 4074 	addw	r0, r7, #1140	; 0x474
 8005682:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8005686:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800568a:	f107 0318 	add.w	r3, r7, #24
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	4603      	mov	r3, r0
 8005698:	f8d7 0584 	ldr.w	r0, [r7, #1412]	; 0x584
 800569c:	f7fc ff4c 	bl	8002538 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80056a0:	f107 0318 	add.w	r3, r7, #24
 80056a4:	f207 5264 	addw	r2, r7, #1380	; 0x564
 80056a8:	f107 010c 	add.w	r1, r7, #12
 80056ac:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80056b0:	f7fd f8b6 	bl	8002820 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 80056b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fc fd51 	bl	8002160 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 80056be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	dd0a      	ble.n	80056e0 <vTaskStateEst+0x1b0>
			select_kf_observation_matrices(&kf_state);
 80056ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fc fdb7 	bl	8002242 <select_kf_observation_matrices>
			kf_update(&kf_state);
 80056d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fc fdef 	bl	80022bc <kf_update>
 80056de:	e00a      	b.n	80056f6 <vTaskStateEst+0x1c6>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 80056e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80056e4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80056e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80056ec:	f502 729a 	add.w	r2, r2, #308	; 0x134
 80056f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80056f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 80056f6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80056fa:	4618      	mov	r0, r3
 80056fc:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8005700:	2278      	movs	r2, #120	; 0x78
 8005702:	4619      	mov	r1, r3
 8005704:	f012 fb0e 	bl	8017d24 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 8005708:	4829      	ldr	r0, [pc, #164]	; (80057b0 <vTaskStateEst+0x280>)
 800570a:	f7fd ffd1 	bl	80036b0 <AcquireMutex>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d108      	bne.n	8005726 <vTaskStateEst+0x1f6>
			update_state_est_data(&state_est_data_global, &kf_state);
 8005714:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005718:	4619      	mov	r1, r3
 800571a:	4826      	ldr	r0, [pc, #152]	; (80057b4 <vTaskStateEst+0x284>)
 800571c:	f7fc febc 	bl	8002498 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8005720:	4823      	ldr	r0, [pc, #140]	; (80057b0 <vTaskStateEst+0x280>)
 8005722:	f7fd ffdf 	bl	80036e4 <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8005726:	4821      	ldr	r0, [pc, #132]	; (80057ac <vTaskStateEst+0x27c>)
 8005728:	f7fd ffc2 	bl	80036b0 <AcquireMutex>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <vTaskStateEst+0x216>
			global_env = env;
 8005732:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <vTaskStateEst+0x288>)
 8005734:	461c      	mov	r4, r3
 8005736:	f207 5364 	addw	r3, r7, #1380	; 0x564
 800573a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800573c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8005740:	481a      	ldr	r0, [pc, #104]	; (80057ac <vTaskStateEst+0x27c>)
 8005742:	f7fd ffcf 	bl	80036e4 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8005746:	f00d fdf3 	bl	8013330 <osKernelGetTickCount>
 800574a:	4684      	mov	ip, r0
 800574c:	4e19      	ldr	r6, [pc, #100]	; (80057b4 <vTaskStateEst+0x284>)
 800574e:	466d      	mov	r5, sp
 8005750:	f106 040c 	add.w	r4, r6, #12
 8005754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800575c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005760:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005764:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005768:	4660      	mov	r0, ip
 800576a:	f7fe f97d 	bl	8003a68 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 800576e:	f8d7 0584 	ldr.w	r0, [r7, #1412]	; 0x584
 8005772:	f00d fee3 	bl	801353c <osDelayUntil>
		tick_count += tick_update;
 8005776:	e736      	b.n	80055e6 <vTaskStateEst+0xb6>
 8005778:	51eb851f 	.word	0x51eb851f
 800577c:	20014b54 	.word	0x20014b54
 8005780:	20008b64 	.word	0x20008b64
 8005784:	20000224 	.word	0x20000224
 8005788:	20000218 	.word	0x20000218
 800578c:	20010a70 	.word	0x20010a70
 8005790:	20000240 	.word	0x20000240
 8005794:	20000234 	.word	0x20000234
 8005798:	20026d60 	.word	0x20026d60
 800579c:	2000025c 	.word	0x2000025c
 80057a0:	20000250 	.word	0x20000250
 80057a4:	20010ae0 	.word	0x20010ae0
 80057a8:	200002bc 	.word	0x200002bc
 80057ac:	20008980 	.word	0x20008980
 80057b0:	20010af0 	.word	0x20010af0
 80057b4:	2000026c 	.word	0x2000026c
 80057b8:	200002ac 	.word	0x200002ac

080057bc <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory){
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	reset_flight_phase_detection(flight_phase_detection);
 80057ca:	68b8      	ldr	r0, [r7, #8]
 80057cc:	f7fc fc1a 	bl	8002004 <reset_flight_phase_detection>
	reset_kf_state(kf_state);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7fc fc2f 	bl	8002034 <reset_kf_state>
	init_env(environment);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc f956 	bl	8001a88 <init_env>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	23b0      	movs	r3, #176	; 0xb0
 80057e2:	461a      	mov	r2, r3
 80057e4:	2100      	movs	r1, #0
 80057e6:	f012 faa8 	bl	8017d3a <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7fd f815 	bl	8002820 <select_noise_models>
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <vTaskXbee>:
command_xbee_t local_command_xbee;

command_e local_command;
bool new_command = false;

void vTaskXbee(void *argument) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b0b2      	sub	sp, #200	; 0xc8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	int32_t controller_output;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	2270      	movs	r2, #112	; 0x70
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f012 fa92 	bl	8017d3a <memset>
	telemetry_send.flight_phase = IDLE;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	telemetry_send.mach_regime = SUBSONIC;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t rx = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

	/* Command struct */
	local_command = IDLE_COMMAND;
 8005828:	4b50      	ldr	r3, [pc, #320]	; (800596c <vTaskXbee+0x16c>)
 800582a:	229b      	movs	r2, #155	; 0x9b
 800582c:	701a      	strb	r2, [r3, #0]
	local_command_xbee = IDLE_XBEE_DATA;
 800582e:	4b50      	ldr	r3, [pc, #320]	; (8005970 <vTaskXbee+0x170>)
 8005830:	4a50      	ldr	r2, [pc, #320]	; (8005974 <vTaskXbee+0x174>)
 8005832:	6810      	ldr	r0, [r2, #0]
 8005834:	6018      	str	r0, [r3, #0]


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005836:	f00d fd7b 	bl	8013330 <osKernelGetTickCount>
 800583a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	tick_update = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 800583e:	f00d fd9f 	bl	8013380 <osKernelGetTickFreq>
 8005842:	4602      	mov	r2, r0
 8005844:	4b4c      	ldr	r3, [pc, #304]	; (8005978 <vTaskXbee+0x178>)
 8005846:	fba3 2302 	umull	r2, r3, r3, r2
 800584a:	08db      	lsrs	r3, r3, #3
 800584c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	HAL_UART_Receive_IT(&huart4, (uint8_t*) &local_command, sizeof(local_command));
 8005850:	2201      	movs	r2, #1
 8005852:	4946      	ldr	r1, [pc, #280]	; (800596c <vTaskXbee+0x16c>)
 8005854:	4849      	ldr	r0, [pc, #292]	; (800597c <vTaskXbee+0x17c>)
 8005856:	f005 ffb5 	bl	800b7c4 <HAL_UART_Receive_IT>

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 800585a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800585e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005862:	4413      	add	r3, r2
 8005864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		/* Write command in Global Command Variable */
		if(AcquireMutex(&command_mutex) == osOK){
 8005868:	4845      	ldr	r0, [pc, #276]	; (8005980 <vTaskXbee+0x180>)
 800586a:	f7fd ff21 	bl	80036b0 <AcquireMutex>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <vTaskXbee+0x82>
			global_telemetry_command = local_command;
 8005874:	4b3d      	ldr	r3, [pc, #244]	; (800596c <vTaskXbee+0x16c>)
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	4b42      	ldr	r3, [pc, #264]	; (8005984 <vTaskXbee+0x184>)
 800587a:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 800587c:	4840      	ldr	r0, [pc, #256]	; (8005980 <vTaskXbee+0x180>)
 800587e:	f7fd ff31 	bl	80036e4 <ReleaseMutex>
		}
		if(new_command){
 8005882:	4b41      	ldr	r3, [pc, #260]	; (8005988 <vTaskXbee+0x188>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <vTaskXbee+0x96>
			local_command = IDLE_COMMAND;
 800588a:	4b38      	ldr	r3, [pc, #224]	; (800596c <vTaskXbee+0x16c>)
 800588c:	229b      	movs	r2, #155	; 0x9b
 800588e:	701a      	strb	r2, [r3, #0]
			new_command = false;
 8005890:	4b3d      	ldr	r3, [pc, #244]	; (8005988 <vTaskXbee+0x188>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
		}

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &telemetry_send.sb1.baro, sizeof(sb1_baro));
 8005896:	f107 020c 	add.w	r2, r7, #12
 800589a:	230c      	movs	r3, #12
 800589c:	493b      	ldr	r1, [pc, #236]	; (800598c <vTaskXbee+0x18c>)
 800589e:	483c      	ldr	r0, [pc, #240]	; (8005990 <vTaskXbee+0x190>)
 80058a0:	f7fd ff2e 	bl	8003700 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &telemetry_send.sb1.imu, sizeof(sb1_imu));
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	f103 020c 	add.w	r2, r3, #12
 80058ac:	2310      	movs	r3, #16
 80058ae:	4939      	ldr	r1, [pc, #228]	; (8005994 <vTaskXbee+0x194>)
 80058b0:	4837      	ldr	r0, [pc, #220]	; (8005990 <vTaskXbee+0x190>)
 80058b2:	f7fd ff25 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_baro, &telemetry_send.sb2.baro, sizeof(sb2_baro));
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	f103 0220 	add.w	r2, r3, #32
 80058be:	230c      	movs	r3, #12
 80058c0:	4935      	ldr	r1, [pc, #212]	; (8005998 <vTaskXbee+0x198>)
 80058c2:	4836      	ldr	r0, [pc, #216]	; (800599c <vTaskXbee+0x19c>)
 80058c4:	f7fd ff1c 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_imu, &telemetry_send.sb2.imu, sizeof(sb2_imu));
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80058d0:	2310      	movs	r3, #16
 80058d2:	4933      	ldr	r1, [pc, #204]	; (80059a0 <vTaskXbee+0x1a0>)
 80058d4:	4831      	ldr	r0, [pc, #196]	; (800599c <vTaskXbee+0x19c>)
 80058d6:	f7fd ff13 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_baro, &telemetry_send.sb3.baro, sizeof(sb3_baro));
 80058da:	f107 030c 	add.w	r3, r7, #12
 80058de:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80058e2:	230c      	movs	r3, #12
 80058e4:	492f      	ldr	r1, [pc, #188]	; (80059a4 <vTaskXbee+0x1a4>)
 80058e6:	4830      	ldr	r0, [pc, #192]	; (80059a8 <vTaskXbee+0x1a8>)
 80058e8:	f7fd ff0a 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_imu, &telemetry_send.sb3.imu, sizeof(sb3_imu));
 80058ec:	f107 030c 	add.w	r3, r7, #12
 80058f0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80058f4:	2310      	movs	r3, #16
 80058f6:	492d      	ldr	r1, [pc, #180]	; (80059ac <vTaskXbee+0x1ac>)
 80058f8:	482b      	ldr	r0, [pc, #172]	; (80059a8 <vTaskXbee+0x1a8>)
 80058fa:	f7fd ff01 	bl	8003700 <ReadMutex>

		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 80058fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005902:	233c      	movs	r3, #60	; 0x3c
 8005904:	492a      	ldr	r1, [pc, #168]	; (80059b0 <vTaskXbee+0x1b0>)
 8005906:	482b      	ldr	r0, [pc, #172]	; (80059b4 <vTaskXbee+0x1b4>)
 8005908:	f7fd fefa 	bl	8003700 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &controller_output, sizeof(controller_output));
 800590c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005910:	2304      	movs	r3, #4
 8005912:	4929      	ldr	r1, [pc, #164]	; (80059b8 <vTaskXbee+0x1b8>)
 8005914:	4829      	ldr	r0, [pc, #164]	; (80059bc <vTaskXbee+0x1bc>)
 8005916:	f7fd fef3 	bl	8003700 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 800591a:	f107 030c 	add.w	r3, r7, #12
 800591e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8005922:	2301      	movs	r3, #1
 8005924:	4926      	ldr	r1, [pc, #152]	; (80059c0 <vTaskXbee+0x1c0>)
 8005926:	4827      	ldr	r0, [pc, #156]	; (80059c4 <vTaskXbee+0x1c4>)
 8005928:	f7fd feea 	bl	8003700 <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.mach_regime, &telemetry_send.mach_regime, sizeof(global_flight_phase_detection.mach_regime));
 800592c:	f107 030c 	add.w	r3, r7, #12
 8005930:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 8005934:	2301      	movs	r3, #1
 8005936:	4924      	ldr	r1, [pc, #144]	; (80059c8 <vTaskXbee+0x1c8>)
 8005938:	4822      	ldr	r0, [pc, #136]	; (80059c4 <vTaskXbee+0x1c4>)
 800593a:	f7fd fee1 	bl	8003700 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 800593e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005942:	66fb      	str	r3, [r7, #108]	; 0x6c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 8005944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005948:	673b      	str	r3, [r7, #112]	; 0x70
		telemetry_send.ts = osKernelGetTickCount();
 800594a:	f00d fcf1 	bl	8013330 <osKernelGetTickCount>
 800594e:	4603      	mov	r3, r0
 8005950:	677b      	str	r3, [r7, #116]	; 0x74

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart4, (uint8_t*) &telemetry_send, sizeof(telemetry_send), HAL_MAX_DELAY);
 8005952:	f107 010c 	add.w	r1, r7, #12
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	2270      	movs	r2, #112	; 0x70
 800595c:	4807      	ldr	r0, [pc, #28]	; (800597c <vTaskXbee+0x17c>)
 800595e:	f005 fdd3 	bl	800b508 <HAL_UART_Transmit>



		/* Sleep */
		osDelayUntil(tick_count);
 8005962:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005966:	f00d fde9 	bl	801353c <osDelayUntil>
		tick_count += tick_update;
 800596a:	e776      	b.n	800585a <vTaskXbee+0x5a>
 800596c:	20027210 	.word	0x20027210
 8005970:	20027214 	.word	0x20027214
 8005974:	0801ad04 	.word	0x0801ad04
 8005978:	cccccccd 	.word	0xcccccccd
 800597c:	2001cc18 	.word	0x2001cc18
 8005980:	20008b64 	.word	0x20008b64
 8005984:	20014b54 	.word	0x20014b54
 8005988:	2000042c 	.word	0x2000042c
 800598c:	20000218 	.word	0x20000218
 8005990:	20010a70 	.word	0x20010a70
 8005994:	20000224 	.word	0x20000224
 8005998:	20000234 	.word	0x20000234
 800599c:	20026d60 	.word	0x20026d60
 80059a0:	20000240 	.word	0x20000240
 80059a4:	20000250 	.word	0x20000250
 80059a8:	20010ae0 	.word	0x20010ae0
 80059ac:	2000025c 	.word	0x2000025c
 80059b0:	2000026c 	.word	0x2000026c
 80059b4:	20010af0 	.word	0x20010af0
 80059b8:	200002a8 	.word	0x200002a8
 80059bc:	20010a5c 	.word	0x20010a5c
 80059c0:	200002bc 	.word	0x200002bc
 80059c4:	20008980 	.word	0x20008980
 80059c8:	200002bd 	.word	0x200002bd

080059cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80059cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80059d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80059d2:	e003      	b.n	80059dc <LoopCopyDataInit>

080059d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80059d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80059d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80059da:	3104      	adds	r1, #4

080059dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80059dc:	480b      	ldr	r0, [pc, #44]	; (8005a0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80059e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80059e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80059e4:	d3f6      	bcc.n	80059d4 <CopyDataInit>
  ldr  r2, =_sbss
 80059e6:	4a0b      	ldr	r2, [pc, #44]	; (8005a14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80059e8:	e002      	b.n	80059f0 <LoopFillZerobss>

080059ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80059ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80059ec:	f842 3b04 	str.w	r3, [r2], #4

080059f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80059f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80059f4:	d3f9      	bcc.n	80059ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80059f6:	f7ff f8bf 	bl	8004b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059fa:	f012 f95f 	bl	8017cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059fe:	f7fe f8cf 	bl	8003ba0 <main>
  bx  lr    
 8005a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a04:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005a08:	0801aec0 	.word	0x0801aec0
  ldr  r0, =_sdata
 8005a0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a10:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8005a14:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8005a18:	20028fa0 	.word	0x20028fa0

08005a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a1c:	e7fe      	b.n	8005a1c <ADC_IRQHandler>

08005a1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a22:	2003      	movs	r0, #3
 8005a24:	f000 f8f7 	bl	8005c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a28:	2000      	movs	r0, #0
 8005a2a:	f7fe ff99 	bl	8004960 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005a2e:	f7fe fcdf 	bl	80043f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_IncTick+0x20>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_IncTick+0x24>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4413      	add	r3, r2
 8005a48:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <HAL_IncTick+0x24>)
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000008 	.word	0x20000008
 8005a5c:	20027218 	.word	0x20027218

08005a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  return uwTick;
 8005a64:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <HAL_GetTick+0x14>)
 8005a66:	681b      	ldr	r3, [r3, #0]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20027218 	.word	0x20027218

08005a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a80:	f7ff ffee 	bl	8005a60 <HAL_GetTick>
 8005a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d005      	beq.n	8005a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <HAL_Delay+0x40>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a9e:	bf00      	nop
 8005aa0:	f7ff ffde 	bl	8005a60 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d8f7      	bhi.n	8005aa0 <HAL_Delay+0x28>
  {
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000008 	.word	0x20000008

08005abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <__NVIC_SetPriorityGrouping+0x40>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <__NVIC_SetPriorityGrouping+0x44>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <__NVIC_SetPriorityGrouping+0x40>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	60d3      	str	r3, [r2, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00
 8005b00:	05fa0000 	.word	0x05fa0000

08005b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <__NVIC_GetPriorityGrouping+0x18>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	f003 0307 	and.w	r3, r3, #7
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	e000ed00 	.word	0xe000ed00

08005b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	db0b      	blt.n	8005b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	4907      	ldr	r1, [pc, #28]	; (8005b58 <__NVIC_EnableIRQ+0x38>)
 8005b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	2001      	movs	r0, #1
 8005b42:	fa00 f202 	lsl.w	r2, r0, r2
 8005b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000e100 	.word	0xe000e100

08005b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db0a      	blt.n	8005b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	490c      	ldr	r1, [pc, #48]	; (8005ba8 <__NVIC_SetPriority+0x4c>)
 8005b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7a:	0112      	lsls	r2, r2, #4
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b84:	e00a      	b.n	8005b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4908      	ldr	r1, [pc, #32]	; (8005bac <__NVIC_SetPriority+0x50>)
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	3b04      	subs	r3, #4
 8005b94:	0112      	lsls	r2, r2, #4
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	440b      	add	r3, r1
 8005b9a:	761a      	strb	r2, [r3, #24]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000e100 	.word	0xe000e100
 8005bac:	e000ed00 	.word	0xe000ed00

08005bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f1c3 0307 	rsb	r3, r3, #7
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	bf28      	it	cs
 8005bce:	2304      	movcs	r3, #4
 8005bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d902      	bls.n	8005be0 <NVIC_EncodePriority+0x30>
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3b03      	subs	r3, #3
 8005bde:	e000      	b.n	8005be2 <NVIC_EncodePriority+0x32>
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	43d9      	mvns	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c08:	4313      	orrs	r3, r2
         );
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3724      	adds	r7, #36	; 0x24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ff4c 	bl	8005abc <__NVIC_SetPriorityGrouping>
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c3e:	f7ff ff61 	bl	8005b04 <__NVIC_GetPriorityGrouping>
 8005c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	6978      	ldr	r0, [r7, #20]
 8005c4a:	f7ff ffb1 	bl	8005bb0 <NVIC_EncodePriority>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ff80 	bl	8005b5c <__NVIC_SetPriority>
}
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff54 	bl	8005b20 <__NVIC_EnableIRQ>
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c8c:	f7ff fee8 	bl	8005a60 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e099      	b.n	8005dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cbc:	e00f      	b.n	8005cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cbe:	f7ff fecf 	bl	8005a60 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d908      	bls.n	8005cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e078      	b.n	8005dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e8      	bne.n	8005cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_DMA_Init+0x158>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d107      	bne.n	8005d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4313      	orrs	r3, r2
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d117      	bne.n	8005da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 faa5 	bl	80062d4 <DMA_CheckFifoParam>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2240      	movs	r2, #64	; 0x40
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e016      	b.n	8005dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa5c 	bl	8006268 <DMA_CalcBaseAndBitshift>
 8005db0:	4603      	mov	r3, r0
 8005db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	223f      	movs	r2, #63	; 0x3f
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	f010803f 	.word	0xf010803f

08005ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_Start_IT+0x26>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e048      	b.n	8005e94 <HAL_DMA_Start_IT+0xb8>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d137      	bne.n	8005e86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f9ee 	bl	800620c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	223f      	movs	r2, #63	; 0x3f
 8005e36:	409a      	lsls	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0216 	orr.w	r2, r2, #22
 8005e4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0208 	orr.w	r2, r2, #8
 8005e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e005      	b.n	8005e92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2280      	movs	r2, #128	; 0x80
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e00c      	b.n	8005ed4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2205      	movs	r2, #5
 8005ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005eec:	4b92      	ldr	r3, [pc, #584]	; (8006138 <HAL_DMA_IRQHandler+0x258>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a92      	ldr	r2, [pc, #584]	; (800613c <HAL_DMA_IRQHandler+0x25c>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0a9b      	lsrs	r3, r3, #10
 8005ef8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01a      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0204 	bic.w	r2, r2, #4
 8005f32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	2208      	movs	r2, #8
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	2201      	movs	r2, #1
 8005f70:	409a      	lsls	r2, r3
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	2204      	movs	r2, #4
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f043 0204 	orr.w	r2, r3, #4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d043      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d03c      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	2210      	movs	r2, #16
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d018      	beq.n	8006022 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d108      	bne.n	8006010 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d024      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
 800600e:	e01f      	b.n	8006050 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
 8006020:	e016      	b.n	8006050 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0208 	bic.w	r2, r2, #8
 800603e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	2220      	movs	r2, #32
 8006056:	409a      	lsls	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 808e 	beq.w	800617e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8086 	beq.w	800617e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006076:	2220      	movs	r2, #32
 8006078:	409a      	lsls	r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b05      	cmp	r3, #5
 8006088:	d136      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0216 	bic.w	r2, r2, #22
 8006098:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <HAL_DMA_IRQHandler+0x1da>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0208 	bic.w	r2, r2, #8
 80060c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ce:	223f      	movs	r2, #63	; 0x3f
 80060d0:	409a      	lsls	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d07d      	beq.n	80061ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
        }
        return;
 80060f6:	e078      	b.n	80061ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01c      	beq.n	8006140 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	2b00      	cmp	r3, #0
 800611a:	d030      	beq.n	800617e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	e02b      	b.n	800617e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d027      	beq.n	800617e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
 8006136:	e022      	b.n	800617e <HAL_DMA_IRQHandler+0x29e>
 8006138:	20000000 	.word	0x20000000
 800613c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0210 	bic.w	r2, r2, #16
 800615c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006182:	2b00      	cmp	r3, #0
 8006184:	d032      	beq.n	80061ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d022      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2205      	movs	r2, #5
 8006196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d307      	bcc.n	80061c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f2      	bne.n	80061aa <HAL_DMA_IRQHandler+0x2ca>
 80061c4:	e000      	b.n	80061c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80061c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
 80061e8:	e000      	b.n	80061ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80061ea:	bf00      	nop
    }
  }
}
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d108      	bne.n	800624c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800624a:	e007      	b.n	800625c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	60da      	str	r2, [r3, #12]
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	3b10      	subs	r3, #16
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <DMA_CalcBaseAndBitshift+0x60>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006282:	4a12      	ldr	r2, [pc, #72]	; (80062cc <DMA_CalcBaseAndBitshift+0x64>)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d908      	bls.n	80062a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <DMA_CalcBaseAndBitshift+0x68>)
 800629e:	4013      	ands	r3, r2
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	659a      	str	r2, [r3, #88]	; 0x58
 80062a6:	e006      	b.n	80062b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <DMA_CalcBaseAndBitshift+0x68>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	aaaaaaab 	.word	0xaaaaaaab
 80062cc:	0801ad08 	.word	0x0801ad08
 80062d0:	fffffc00 	.word	0xfffffc00

080062d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d11f      	bne.n	800632e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d855      	bhi.n	80063a0 <DMA_CheckFifoParam+0xcc>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <DMA_CheckFifoParam+0x28>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	0800631f 	.word	0x0800631f
 8006304:	0800630d 	.word	0x0800630d
 8006308:	080063a1 	.word	0x080063a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d045      	beq.n	80063a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800631c:	e042      	b.n	80063a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006326:	d13f      	bne.n	80063a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800632c:	e03c      	b.n	80063a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006336:	d121      	bne.n	800637c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d836      	bhi.n	80063ac <DMA_CheckFifoParam+0xd8>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <DMA_CheckFifoParam+0x70>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006355 	.word	0x08006355
 8006348:	0800635b 	.word	0x0800635b
 800634c:	08006355 	.word	0x08006355
 8006350:	0800636d 	.word	0x0800636d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
      break;
 8006358:	e02f      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d024      	beq.n	80063b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800636a:	e021      	b.n	80063b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006374:	d11e      	bne.n	80063b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800637a:	e01b      	b.n	80063b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d902      	bls.n	8006388 <DMA_CheckFifoParam+0xb4>
 8006382:	2b03      	cmp	r3, #3
 8006384:	d003      	beq.n	800638e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006386:	e018      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	e015      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
      break;
 800639e:	e00b      	b.n	80063b8 <DMA_CheckFifoParam+0xe4>
      break;
 80063a0:	bf00      	nop
 80063a2:	e00a      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      break;
 80063a4:	bf00      	nop
 80063a6:	e008      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      break;
 80063a8:	bf00      	nop
 80063aa:	e006      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      break;
 80063ac:	bf00      	nop
 80063ae:	e004      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      break;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      break;   
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <DMA_CheckFifoParam+0xe6>
      break;
 80063b8:	bf00      	nop
    }
  } 
  
  return status; 
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b089      	sub	sp, #36	; 0x24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	e175      	b.n	80066d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80063e8:	2201      	movs	r2, #1
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4013      	ands	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	429a      	cmp	r2, r3
 8006402:	f040 8164 	bne.w	80066ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d00b      	beq.n	8006426 <HAL_GPIO_Init+0x5e>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d007      	beq.n	8006426 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800641a:	2b11      	cmp	r3, #17
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b12      	cmp	r3, #18
 8006424:	d130      	bne.n	8006488 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	2203      	movs	r2, #3
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	43db      	mvns	r3, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4013      	ands	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800645c:	2201      	movs	r2, #1
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	43db      	mvns	r3, r3
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	4013      	ands	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 0201 	and.w	r2, r3, #1
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4313      	orrs	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	2203      	movs	r2, #3
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	43db      	mvns	r3, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4013      	ands	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d003      	beq.n	80064c8 <HAL_GPIO_Init+0x100>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b12      	cmp	r3, #18
 80064c6:	d123      	bne.n	8006510 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	08da      	lsrs	r2, r3, #3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3208      	adds	r2, #8
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	220f      	movs	r2, #15
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	08da      	lsrs	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3208      	adds	r2, #8
 800650a:	69b9      	ldr	r1, [r7, #24]
 800650c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	2203      	movs	r2, #3
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43db      	mvns	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4013      	ands	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 0203 	and.w	r2, r3, #3
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80be 	beq.w	80066ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006552:	4b65      	ldr	r3, [pc, #404]	; (80066e8 <HAL_GPIO_Init+0x320>)
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	4a64      	ldr	r2, [pc, #400]	; (80066e8 <HAL_GPIO_Init+0x320>)
 8006558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800655c:	6453      	str	r3, [r2, #68]	; 0x44
 800655e:	4b62      	ldr	r3, [pc, #392]	; (80066e8 <HAL_GPIO_Init+0x320>)
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800656a:	4a60      	ldr	r2, [pc, #384]	; (80066ec <HAL_GPIO_Init+0x324>)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	089b      	lsrs	r3, r3, #2
 8006570:	3302      	adds	r3, #2
 8006572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	220f      	movs	r2, #15
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a57      	ldr	r2, [pc, #348]	; (80066f0 <HAL_GPIO_Init+0x328>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d037      	beq.n	8006606 <HAL_GPIO_Init+0x23e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a56      	ldr	r2, [pc, #344]	; (80066f4 <HAL_GPIO_Init+0x32c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d031      	beq.n	8006602 <HAL_GPIO_Init+0x23a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a55      	ldr	r2, [pc, #340]	; (80066f8 <HAL_GPIO_Init+0x330>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02b      	beq.n	80065fe <HAL_GPIO_Init+0x236>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a54      	ldr	r2, [pc, #336]	; (80066fc <HAL_GPIO_Init+0x334>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d025      	beq.n	80065fa <HAL_GPIO_Init+0x232>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a53      	ldr	r2, [pc, #332]	; (8006700 <HAL_GPIO_Init+0x338>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01f      	beq.n	80065f6 <HAL_GPIO_Init+0x22e>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a52      	ldr	r2, [pc, #328]	; (8006704 <HAL_GPIO_Init+0x33c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d019      	beq.n	80065f2 <HAL_GPIO_Init+0x22a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a51      	ldr	r2, [pc, #324]	; (8006708 <HAL_GPIO_Init+0x340>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_GPIO_Init+0x226>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a50      	ldr	r2, [pc, #320]	; (800670c <HAL_GPIO_Init+0x344>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00d      	beq.n	80065ea <HAL_GPIO_Init+0x222>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a4f      	ldr	r2, [pc, #316]	; (8006710 <HAL_GPIO_Init+0x348>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <HAL_GPIO_Init+0x21e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a4e      	ldr	r2, [pc, #312]	; (8006714 <HAL_GPIO_Init+0x34c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <HAL_GPIO_Init+0x21a>
 80065de:	2309      	movs	r3, #9
 80065e0:	e012      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065e2:	230a      	movs	r3, #10
 80065e4:	e010      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065e6:	2308      	movs	r3, #8
 80065e8:	e00e      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065ea:	2307      	movs	r3, #7
 80065ec:	e00c      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065ee:	2306      	movs	r3, #6
 80065f0:	e00a      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065f2:	2305      	movs	r3, #5
 80065f4:	e008      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065f6:	2304      	movs	r3, #4
 80065f8:	e006      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065fa:	2303      	movs	r3, #3
 80065fc:	e004      	b.n	8006608 <HAL_GPIO_Init+0x240>
 80065fe:	2302      	movs	r3, #2
 8006600:	e002      	b.n	8006608 <HAL_GPIO_Init+0x240>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <HAL_GPIO_Init+0x240>
 8006606:	2300      	movs	r3, #0
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	f002 0203 	and.w	r2, r2, #3
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	4093      	lsls	r3, r2
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006618:	4934      	ldr	r1, [pc, #208]	; (80066ec <HAL_GPIO_Init+0x324>)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	3302      	adds	r3, #2
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006626:	4b3c      	ldr	r3, [pc, #240]	; (8006718 <HAL_GPIO_Init+0x350>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	43db      	mvns	r3, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800664a:	4a33      	ldr	r2, [pc, #204]	; (8006718 <HAL_GPIO_Init+0x350>)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006650:	4b31      	ldr	r3, [pc, #196]	; (8006718 <HAL_GPIO_Init+0x350>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	43db      	mvns	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4013      	ands	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006674:	4a28      	ldr	r2, [pc, #160]	; (8006718 <HAL_GPIO_Init+0x350>)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800667a:	4b27      	ldr	r3, [pc, #156]	; (8006718 <HAL_GPIO_Init+0x350>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	43db      	mvns	r3, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	4013      	ands	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_GPIO_Init+0x350>)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <HAL_GPIO_Init+0x350>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4013      	ands	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066c8:	4a13      	ldr	r2, [pc, #76]	; (8006718 <HAL_GPIO_Init+0x350>)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	3301      	adds	r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	f67f ae86 	bls.w	80063e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80066dc:	bf00      	nop
 80066de:	3724      	adds	r7, #36	; 0x24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40023800 	.word	0x40023800
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40020000 	.word	0x40020000
 80066f4:	40020400 	.word	0x40020400
 80066f8:	40020800 	.word	0x40020800
 80066fc:	40020c00 	.word	0x40020c00
 8006700:	40021000 	.word	0x40021000
 8006704:	40021400 	.word	0x40021400
 8006708:	40021800 	.word	0x40021800
 800670c:	40021c00 	.word	0x40021c00
 8006710:	40022000 	.word	0x40022000
 8006714:	40022400 	.word	0x40022400
 8006718:	40013c00 	.word	0x40013c00

0800671c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
 8006728:	4613      	mov	r3, r2
 800672a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800672c:	787b      	ldrb	r3, [r7, #1]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006738:	e003      	b.n	8006742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	041a      	lsls	r2, r3, #16
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	619a      	str	r2, [r3, #24]
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	887b      	ldrh	r3, [r7, #2]
 8006760:	4013      	ands	r3, r2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006766:	887b      	ldrh	r3, [r7, #2]
 8006768:	041a      	lsls	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800676e:	e002      	b.n	8006776 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006770:	887a      	ldrh	r2, [r7, #2]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	619a      	str	r2, [r3, #24]
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006784:	b08f      	sub	sp, #60	; 0x3c
 8006786:	af0a      	add	r7, sp, #40	; 0x28
 8006788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e116      	b.n	80069c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f010 ff2c 	bl	801760c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2203      	movs	r2, #3
 80067b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f006 fd47 	bl	800d266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	687e      	ldr	r6, [r7, #4]
 80067e0:	466d      	mov	r5, sp
 80067e2:	f106 0410 	add.w	r4, r6, #16
 80067e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80067f6:	1d33      	adds	r3, r6, #4
 80067f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067fa:	6838      	ldr	r0, [r7, #0]
 80067fc:	f006 fc28 	bl	800d050 <USB_CoreInit>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0d7      	b.n	80069c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f006 fd35 	bl	800d288 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
 8006822:	e04a      	b.n	80068ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006824:	7bfa      	ldrb	r2, [r7, #15]
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	333d      	adds	r3, #61	; 0x3d
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006838:	7bfa      	ldrb	r2, [r7, #15]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	333c      	adds	r3, #60	; 0x3c
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800684c:	7bfa      	ldrb	r2, [r7, #15]
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	b298      	uxth	r0, r3
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3342      	adds	r3, #66	; 0x42
 8006860:	4602      	mov	r2, r0
 8006862:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006864:	7bfa      	ldrb	r2, [r7, #15]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	333f      	adds	r3, #63	; 0x3f
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006878:	7bfa      	ldrb	r2, [r7, #15]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3344      	adds	r3, #68	; 0x44
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800688c:	7bfa      	ldrb	r2, [r7, #15]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	3348      	adds	r3, #72	; 0x48
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068a0:	7bfa      	ldrb	r2, [r7, #15]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	3350      	adds	r3, #80	; 0x50
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	3301      	adds	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d3af      	bcc.n	8006824 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
 80068c8:	e044      	b.n	8006954 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80068dc:	2200      	movs	r2, #0
 80068de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068e0:	7bfa      	ldrb	r2, [r7, #15]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	4613      	mov	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80068f2:	7bfa      	ldrb	r2, [r7, #15]
 80068f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068f6:	7bfa      	ldrb	r2, [r7, #15]
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	440b      	add	r3, r1
 8006904:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800690c:	7bfa      	ldrb	r2, [r7, #15]
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006922:	7bfa      	ldrb	r2, [r7, #15]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006938:	7bfa      	ldrb	r2, [r7, #15]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	3301      	adds	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
 8006954:	7bfa      	ldrb	r2, [r7, #15]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	d3b5      	bcc.n	80068ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	687e      	ldr	r6, [r7, #4]
 8006966:	466d      	mov	r5, sp
 8006968:	f106 0410 	add.w	r4, r6, #16
 800696c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800696e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006974:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006978:	e885 0003 	stmia.w	r5, {r0, r1}
 800697c:	1d33      	adds	r3, r6, #4
 800697e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f006 fcab 	bl	800d2dc <USB_DevInit>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e014      	b.n	80069c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d102      	bne.n	80069b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f881 	bl	8007ab8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f007 fcfa 	bl	800e3b4 <USB_DevDisconnect>

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_PCD_Start+0x16>
 80069dc:	2302      	movs	r3, #2
 80069de:	e012      	b.n	8006a06 <HAL_PCD_Start+0x3c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f007 fcc9 	bl	800e384 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f006 fc24 	bl	800d244 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a0e:	b590      	push	{r4, r7, lr}
 8006a10:	b08d      	sub	sp, #52	; 0x34
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f007 fd70 	bl	800e50a <USB_GetMode>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 83ca 	bne.w	80071c6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f007 fcd4 	bl	800e3e4 <USB_ReadInterrupts>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 83c0 	beq.w	80071c4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f007 fccb 	bl	800e3e4 <USB_ReadInterrupts>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d107      	bne.n	8006a68 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f002 0202 	and.w	r2, r2, #2
 8006a66:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f007 fcb9 	bl	800e3e4 <USB_ReadInterrupts>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d161      	bne.n	8006b40 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0210 	bic.w	r2, r2, #16
 8006a8a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	0c5b      	lsrs	r3, r3, #17
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d124      	bne.n	8006b02 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d035      	beq.n	8006b30 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6a38      	ldr	r0, [r7, #32]
 8006ad8:	f007 fb31 	bl	800e13e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae8:	441a      	add	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006afa:	441a      	add	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	619a      	str	r2, [r3, #24]
 8006b00:	e016      	b.n	8006b30 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	0c5b      	lsrs	r3, r3, #17
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	d110      	bne.n	8006b30 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b14:	2208      	movs	r2, #8
 8006b16:	4619      	mov	r1, r3
 8006b18:	6a38      	ldr	r0, [r7, #32]
 8006b1a:	f007 fb10 	bl	800e13e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2a:	441a      	add	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0210 	orr.w	r2, r2, #16
 8006b3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f007 fc4d 	bl	800e3e4 <USB_ReadInterrupts>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b54:	d16e      	bne.n	8006c34 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f007 fc53 	bl	800e40a <USB_ReadDevAllOutEpInterrupt>
 8006b64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006b66:	e062      	b.n	8006c2e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d057      	beq.n	8006c22 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f007 fc78 	bl	800e472 <USB_ReadDevOutEPInterrupt>
 8006b82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fdde 	bl	8007764 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00c      	beq.n	8006bcc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fed8 	bl	800797c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	461a      	mov	r2, r3
 8006be4:	2310      	movs	r3, #16
 8006be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2320      	movs	r3, #32
 8006c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	3301      	adds	r3, #1
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d199      	bne.n	8006b68 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f007 fbd3 	bl	800e3e4 <USB_ReadInterrupts>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c48:	f040 80c0 	bne.w	8006dcc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f007 fbf4 	bl	800e43e <USB_ReadDevAllInEpInterrupt>
 8006c56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006c5c:	e0b2      	b.n	8006dc4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80a7 	beq.w	8006db8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f007 fc1a 	bl	800e4ae <USB_ReadDevInEPInterrupt>
 8006c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d057      	beq.n	8006d36 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	69f9      	ldr	r1, [r7, #28]
 8006ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2301      	movs	r3, #1
 8006cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d132      	bne.n	8006d2a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	4613      	mov	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	3348      	adds	r3, #72	; 0x48
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	4613      	mov	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4403      	add	r3, r0
 8006ce4:	3344      	adds	r3, #68	; 0x44
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4419      	add	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cee:	4613      	mov	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	1a9b      	subs	r3, r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4403      	add	r3, r0
 8006cf8:	3348      	adds	r3, #72	; 0x48
 8006cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d113      	bne.n	8006d2a <HAL_PCD_IRQHandler+0x31c>
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d06:	4613      	mov	r3, r2
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	3350      	adds	r3, #80	; 0x50
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d22:	461a      	mov	r2, r3
 8006d24:	2101      	movs	r1, #1
 8006d26:	f007 fc23 	bl	800e570 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f010 fcee 	bl	8017712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2308      	movs	r3, #8
 8006d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	461a      	mov	r2, r3
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	461a      	mov	r2, r3
 8006da2:	2302      	movs	r3, #2
 8006da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fc48 	bl	8007648 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	3301      	adds	r3, #1
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f47f af49 	bne.w	8006c5e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f007 fb07 	bl	800e3e4 <USB_ReadInterrupts>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de0:	d122      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d108      	bne.n	8006e12 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f010 fed0 	bl	8017bb0 <HAL_PCDEx_LPM_Callback>
 8006e10:	e002      	b.n	8006e18 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f010 fcf4 	bl	8017800 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f007 fad9 	bl	800e3e4 <USB_ReadInterrupts>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3c:	d112      	bne.n	8006e64 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d102      	bne.n	8006e54 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f010 fcb0 	bl	80177b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006e62:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f007 fabb 	bl	800e3e4 <USB_ReadInterrupts>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e78:	d121      	bne.n	8006ebe <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006e88:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d111      	bne.n	8006eb8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	089b      	lsrs	r3, r3, #2
 8006ea4:	f003 020f 	and.w	r2, r3, #15
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006eae:	2101      	movs	r1, #1
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f010 fe7d 	bl	8017bb0 <HAL_PCDEx_LPM_Callback>
 8006eb6:	e002      	b.n	8006ebe <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f010 fc7b 	bl	80177b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f007 fa8e 	bl	800e3e4 <USB_ReadInterrupts>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	f040 80c7 	bne.w	8007064 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2110      	movs	r1, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f006 fb61 	bl	800d5b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efa:	e056      	b.n	8006faa <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f2e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f40:	0151      	lsls	r1, r2, #5
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	440a      	add	r2, r1
 8006f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fa2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d3a3      	bcc.n	8006efc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006fc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d016      	beq.n	8006ffe <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe0:	f043 030b 	orr.w	r3, r3, #11
 8006fe4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff6:	f043 030b 	orr.w	r3, r3, #11
 8006ffa:	6453      	str	r3, [r2, #68]	; 0x44
 8006ffc:	e015      	b.n	800702a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	695a      	ldr	r2, [r3, #20]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700c:	4619      	mov	r1, r3
 800700e:	f242 032b 	movw	r3, #8235	; 0x202b
 8007012:	4313      	orrs	r3, r2
 8007014:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007024:	f043 030b 	orr.w	r3, r3, #11
 8007028:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007038:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800703c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800704e:	461a      	mov	r2, r3
 8007050:	f007 fa8e 	bl	800e570 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f007 f9bb 	bl	800e3e4 <USB_ReadInterrupts>
 800706e:	4603      	mov	r3, r0
 8007070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007078:	d124      	bne.n	80070c4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f007 fa52 	bl	800e528 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f006 faf6 	bl	800d67a <USB_GetDevSpeed>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681c      	ldr	r4, [r3, #0]
 800709a:	f001 f999 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 800709e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	4620      	mov	r0, r4
 80070aa:	f006 f829 	bl	800d100 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f010 fb57 	bl	8017762 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f007 f98b 	bl	800e3e4 <USB_ReadInterrupts>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d10a      	bne.n	80070ee <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f010 fb34 	bl	8017746 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f002 0208 	and.w	r2, r2, #8
 80070ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f007 f976 	bl	800e3e4 <USB_ReadInterrupts>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007102:	d10f      	bne.n	8007124 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	b2db      	uxtb	r3, r3
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f010 fb96 	bl	8017840 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695a      	ldr	r2, [r3, #20]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f007 f95b 	bl	800e3e4 <USB_ReadInterrupts>
 800712e:	4603      	mov	r3, r0
 8007130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007138:	d10f      	bne.n	800715a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	b2db      	uxtb	r3, r3
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f010 fb69 	bl	801781c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695a      	ldr	r2, [r3, #20]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f007 f940 	bl	800e3e4 <USB_ReadInterrupts>
 8007164:	4603      	mov	r3, r0
 8007166:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716e:	d10a      	bne.n	8007186 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f010 fb77 	bl	8017864 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f007 f92a 	bl	800e3e4 <USB_ReadInterrupts>
 8007190:	4603      	mov	r3, r0
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b04      	cmp	r3, #4
 8007198:	d115      	bne.n	80071c6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f010 fb67 	bl	8017880 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6859      	ldr	r1, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	e000      	b.n	80071c6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80071c4:	bf00      	nop
    }
  }
}
 80071c6:	3734      	adds	r7, #52	; 0x34
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd90      	pop	{r4, r7, pc}

080071cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_PCD_SetAddress+0x1a>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e013      	b.n	800720e <HAL_PCD_SetAddress+0x42>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	78fa      	ldrb	r2, [r7, #3]
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f007 f89a 	bl	800e338 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	461a      	mov	r2, r3
 8007224:	4603      	mov	r3, r0
 8007226:	70fb      	strb	r3, [r7, #3]
 8007228:	460b      	mov	r3, r1
 800722a:	803b      	strh	r3, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007238:	2b00      	cmp	r3, #0
 800723a:	da0f      	bge.n	800725c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	f003 020f 	and.w	r2, r3, #15
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	3338      	adds	r3, #56	; 0x38
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	705a      	strb	r2, [r3, #1]
 800725a:	e00f      	b.n	800727c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	f003 020f 	and.w	r2, r3, #15
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	3304      	adds	r3, #4
 8007274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007288:	883a      	ldrh	r2, [r7, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	78ba      	ldrb	r2, [r7, #2]
 8007292:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80072a6:	78bb      	ldrb	r3, [r7, #2]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d102      	bne.n	80072b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_PCD_EP_Open+0xaa>
 80072bc:	2302      	movs	r3, #2
 80072be:	e00e      	b.n	80072de <HAL_PCD_EP_Open+0xc8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f006 f9f8 	bl	800d6c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80072dc:	7afb      	ldrb	r3, [r7, #11]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80072f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da0f      	bge.n	800731a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	f003 020f 	and.w	r2, r3, #15
 8007300:	4613      	mov	r3, r2
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	3338      	adds	r3, #56	; 0x38
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	3304      	adds	r3, #4
 8007310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	705a      	strb	r2, [r3, #1]
 8007318:	e00f      	b.n	800733a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	f003 020f 	and.w	r2, r3, #15
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_PCD_EP_Close+0x6e>
 8007350:	2302      	movs	r3, #2
 8007352:	e00e      	b.n	8007372 <HAL_PCD_EP_Close+0x8c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	4618      	mov	r0, r3
 8007364:	f006 fa36 	bl	800d7d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	460b      	mov	r3, r1
 8007388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	4613      	mov	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	3304      	adds	r3, #4
 80073a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2200      	movs	r2, #0
 80073b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d102      	bne.n	80073d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	6979      	ldr	r1, [r7, #20]
 80073ee:	f006 fd19 	bl	800de24 <USB_EP0StartXfer>
 80073f2:	e008      	b.n	8007406 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	6979      	ldr	r1, [r7, #20]
 8007402:	f006 fac3 	bl	800d98c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	f003 020f 	and.w	r2, r3, #15
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	460b      	mov	r3, r1
 800744e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	f003 020f 	and.w	r2, r3, #15
 8007456:	4613      	mov	r3, r2
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	3338      	adds	r3, #56	; 0x38
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	3304      	adds	r3, #4
 8007466:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2201      	movs	r2, #1
 800747e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	b2da      	uxtb	r2, r3
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d102      	bne.n	800749a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800749a:	7afb      	ldrb	r3, [r7, #11]
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	6979      	ldr	r1, [r7, #20]
 80074b2:	f006 fcb7 	bl	800de24 <USB_EP0StartXfer>
 80074b6:	e008      	b.n	80074ca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	f006 fa61 	bl	800d98c <USB_EPStartXfer>
  }

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d901      	bls.n	80074f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e050      	b.n	8007594 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da0f      	bge.n	800751a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	4613      	mov	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	1a9b      	subs	r3, r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	3338      	adds	r3, #56	; 0x38
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	3304      	adds	r3, #4
 8007510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	705a      	strb	r2, [r3, #1]
 8007518:	e00d      	b.n	8007536 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	4413      	add	r3, r2
 800752c:	3304      	adds	r3, #4
 800752e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	b2da      	uxtb	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_PCD_EP_SetStall+0x82>
 8007552:	2302      	movs	r3, #2
 8007554:	e01e      	b.n	8007594 <HAL_PCD_EP_SetStall+0xc0>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	4618      	mov	r0, r3
 8007566:	f006 fe13 	bl	800e190 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10a      	bne.n	800758a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	b2d9      	uxtb	r1, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007584:	461a      	mov	r2, r3
 8007586:	f006 fff3 	bl	800e570 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	f003 020f 	and.w	r2, r3, #15
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d901      	bls.n	80075ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e042      	b.n	8007640 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da0f      	bge.n	80075e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	f003 020f 	and.w	r2, r3, #15
 80075c8:	4613      	mov	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	3338      	adds	r3, #56	; 0x38
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4413      	add	r3, r2
 80075d6:	3304      	adds	r3, #4
 80075d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	705a      	strb	r2, [r3, #1]
 80075e0:	e00f      	b.n	8007602 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	3304      	adds	r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	b2da      	uxtb	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_PCD_EP_ClrStall+0x86>
 800761e:	2302      	movs	r3, #2
 8007620:	e00e      	b.n	8007640 <HAL_PCD_EP_ClrStall+0xa4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68f9      	ldr	r1, [r7, #12]
 8007630:	4618      	mov	r0, r3
 8007632:	f006 fe1b 	bl	800e26c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	; 0x28
 800764c:	af02      	add	r7, sp, #8
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3338      	adds	r3, #56	; 0x38
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	429a      	cmp	r2, r3
 800767a:	d901      	bls.n	8007680 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e06c      	b.n	800775a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	695a      	ldr	r2, [r3, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	429a      	cmp	r2, r3
 8007694:	d902      	bls.n	800769c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3303      	adds	r3, #3
 80076a0:	089b      	lsrs	r3, r3, #2
 80076a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076a4:	e02b      	b.n	80076fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d902      	bls.n	80076c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	3303      	adds	r3, #3
 80076c6:	089b      	lsrs	r3, r3, #2
 80076c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	68d9      	ldr	r1, [r3, #12]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4603      	mov	r3, r0
 80076e0:	6978      	ldr	r0, [r7, #20]
 80076e2:	f006 fcf7 	bl	800e0d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	441a      	add	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	441a      	add	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	b29b      	uxth	r3, r3
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	429a      	cmp	r2, r3
 8007712:	d809      	bhi.n	8007728 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800771c:	429a      	cmp	r2, r3
 800771e:	d203      	bcs.n	8007728 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1be      	bne.n	80076a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	429a      	cmp	r2, r3
 8007732:	d811      	bhi.n	8007758 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	2201      	movs	r2, #1
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	43db      	mvns	r3, r3
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007754:	4013      	ands	r3, r2
 8007756:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	333c      	adds	r3, #60	; 0x3c
 800777c:	3304      	adds	r3, #4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b01      	cmp	r3, #1
 8007798:	f040 80a0 	bne.w	80078dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d015      	beq.n	80077d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4a72      	ldr	r2, [pc, #456]	; (8007974 <PCD_EP_OutXfrComplete_int+0x210>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	f240 80dd 	bls.w	800796a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 80d7 	beq.w	800796a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c8:	461a      	mov	r2, r3
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	6093      	str	r3, [r2, #8]
 80077d0:	e0cb      	b.n	800796a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e8:	461a      	mov	r2, r3
 80077ea:	2320      	movs	r3, #32
 80077ec:	6093      	str	r3, [r2, #8]
 80077ee:	e0bc      	b.n	800796a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 80b7 	bne.w	800796a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a5d      	ldr	r2, [pc, #372]	; (8007974 <PCD_EP_OutXfrComplete_int+0x210>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d90f      	bls.n	8007824 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	461a      	mov	r2, r3
 800781c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007820:	6093      	str	r3, [r2, #8]
 8007822:	e0a2      	b.n	800796a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007836:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	0159      	lsls	r1, r3, #5
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	440b      	add	r3, r1
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800784a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4403      	add	r3, r0
 800785a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800785e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007860:	6879      	ldr	r1, [r7, #4]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	440b      	add	r3, r1
 800786e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4403      	add	r3, r0
 8007882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4419      	add	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4403      	add	r3, r0
 8007898:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800789c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d114      	bne.n	80078ce <PCD_EP_OutXfrComplete_int+0x16a>
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d108      	bne.n	80078ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078c6:	461a      	mov	r2, r3
 80078c8:	2101      	movs	r1, #1
 80078ca:	f006 fe51 	bl	800e570 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f00f ff01 	bl	80176dc <HAL_PCD_DataOutStageCallback>
 80078da:	e046      	b.n	800796a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4a26      	ldr	r2, [pc, #152]	; (8007978 <PCD_EP_OutXfrComplete_int+0x214>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d124      	bne.n	800792e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	461a      	mov	r2, r3
 80078fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007900:	6093      	str	r3, [r2, #8]
 8007902:	e032      	b.n	800796a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d008      	beq.n	8007920 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791a:	461a      	mov	r2, r3
 800791c:	2320      	movs	r3, #32
 800791e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f00f fed8 	bl	80176dc <HAL_PCD_DataOutStageCallback>
 800792c:	e01d      	b.n	800796a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d114      	bne.n	800795e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	1a9b      	subs	r3, r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	440b      	add	r3, r1
 8007942:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d108      	bne.n	800795e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007956:	461a      	mov	r2, r3
 8007958:	2100      	movs	r1, #0
 800795a:	f006 fe09 	bl	800e570 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f00f feb9 	bl	80176dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	4f54300a 	.word	0x4f54300a
 8007978:	4f54310a 	.word	0x4f54310a

0800797c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	333c      	adds	r3, #60	; 0x3c
 8007994:	3304      	adds	r3, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <PCD_EP_OutSetupPacket_int+0x88>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d90e      	bls.n	80079d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d009      	beq.n	80079d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	461a      	mov	r2, r3
 80079ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f00f fe71 	bl	80176b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a0a      	ldr	r2, [pc, #40]	; (8007a04 <PCD_EP_OutSetupPacket_int+0x88>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d90c      	bls.n	80079f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d108      	bne.n	80079f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079f0:	461a      	mov	r2, r3
 80079f2:	2101      	movs	r1, #1
 80079f4:	f006 fdbc 	bl	800e570 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	4f54300a 	.word	0x4f54300a

08007a08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
 8007a14:	4613      	mov	r3, r2
 8007a16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d107      	bne.n	8007a36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a26:	883b      	ldrh	r3, [r7, #0]
 8007a28:	0419      	lsls	r1, r3, #16
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	629a      	str	r2, [r3, #40]	; 0x28
 8007a34:	e028      	b.n	8007a88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e00d      	b.n	8007a66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	3340      	adds	r3, #64	; 0x40
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	3301      	adds	r3, #1
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	7bfa      	ldrb	r2, [r7, #15]
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d3ec      	bcc.n	8007a4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a70:	883b      	ldrh	r3, [r7, #0]
 8007a72:	0418      	lsls	r0, r3, #16
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6819      	ldr	r1, [r3, #0]
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	4302      	orrs	r2, r0
 8007a80:	3340      	adds	r3, #64	; 0x40
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	887a      	ldrh	r2, [r7, #2]
 8007aa8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <HAL_PCDEx_ActivateLPM+0x44>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	10000003 	.word	0x10000003

08007b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e291      	b.n	800803a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8087 	beq.w	8007c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b24:	4b96      	ldr	r3, [pc, #600]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 030c 	and.w	r3, r3, #12
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d00c      	beq.n	8007b4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b30:	4b93      	ldr	r3, [pc, #588]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 030c 	and.w	r3, r3, #12
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d112      	bne.n	8007b62 <HAL_RCC_OscConfig+0x62>
 8007b3c:	4b90      	ldr	r3, [pc, #576]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b48:	d10b      	bne.n	8007b62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b4a:	4b8d      	ldr	r3, [pc, #564]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d06c      	beq.n	8007c30 <HAL_RCC_OscConfig+0x130>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d168      	bne.n	8007c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e26b      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCC_OscConfig+0x7a>
 8007b6c:	4b84      	ldr	r3, [pc, #528]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a83      	ldr	r2, [pc, #524]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	e02e      	b.n	8007bd8 <HAL_RCC_OscConfig+0xd8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10c      	bne.n	8007b9c <HAL_RCC_OscConfig+0x9c>
 8007b82:	4b7f      	ldr	r3, [pc, #508]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a7e      	ldr	r2, [pc, #504]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	4b7c      	ldr	r3, [pc, #496]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a7b      	ldr	r2, [pc, #492]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	e01d      	b.n	8007bd8 <HAL_RCC_OscConfig+0xd8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_RCC_OscConfig+0xc0>
 8007ba6:	4b76      	ldr	r3, [pc, #472]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a75      	ldr	r2, [pc, #468]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	4b73      	ldr	r3, [pc, #460]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a72      	ldr	r2, [pc, #456]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	e00b      	b.n	8007bd8 <HAL_RCC_OscConfig+0xd8>
 8007bc0:	4b6f      	ldr	r3, [pc, #444]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a6e      	ldr	r2, [pc, #440]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	4b6c      	ldr	r3, [pc, #432]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a6b      	ldr	r2, [pc, #428]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d013      	beq.n	8007c08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be0:	f7fd ff3e 	bl	8005a60 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007be8:	f7fd ff3a 	bl	8005a60 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b64      	cmp	r3, #100	; 0x64
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e21f      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfa:	4b61      	ldr	r3, [pc, #388]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0xe8>
 8007c06:	e014      	b.n	8007c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c08:	f7fd ff2a 	bl	8005a60 <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c10:	f7fd ff26 	bl	8005a60 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b64      	cmp	r3, #100	; 0x64
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e20b      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c22:	4b57      	ldr	r3, [pc, #348]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f0      	bne.n	8007c10 <HAL_RCC_OscConfig+0x110>
 8007c2e:	e000      	b.n	8007c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d069      	beq.n	8007d12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c3e:	4b50      	ldr	r3, [pc, #320]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 030c 	and.w	r3, r3, #12
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c4a:	4b4d      	ldr	r3, [pc, #308]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 030c 	and.w	r3, r3, #12
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d11c      	bne.n	8007c90 <HAL_RCC_OscConfig+0x190>
 8007c56:	4b4a      	ldr	r3, [pc, #296]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d116      	bne.n	8007c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c62:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_RCC_OscConfig+0x17a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d001      	beq.n	8007c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e1df      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c7a:	4b41      	ldr	r3, [pc, #260]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	493d      	ldr	r1, [pc, #244]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c8e:	e040      	b.n	8007d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d023      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c98:	4b39      	ldr	r3, [pc, #228]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a38      	ldr	r2, [pc, #224]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca4:	f7fd fedc 	bl	8005a60 <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cac:	f7fd fed8 	bl	8005a60 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e1bd      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cbe:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cca:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4929      	ldr	r1, [pc, #164]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	600b      	str	r3, [r1, #0]
 8007cde:	e018      	b.n	8007d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a26      	ldr	r2, [pc, #152]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fd feb8 	bl	8005a60 <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf4:	f7fd feb4 	bl	8005a60 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e199      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d06:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f0      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d038      	beq.n	8007d90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d019      	beq.n	8007d5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d26:	4b16      	ldr	r3, [pc, #88]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2a:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d32:	f7fd fe95 	bl	8005a60 <HAL_GetTick>
 8007d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d3a:	f7fd fe91 	bl	8005a60 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e176      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <HAL_RCC_OscConfig+0x23a>
 8007d58:	e01a      	b.n	8007d90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5e:	4a08      	ldr	r2, [pc, #32]	; (8007d80 <HAL_RCC_OscConfig+0x280>)
 8007d60:	f023 0301 	bic.w	r3, r3, #1
 8007d64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d66:	f7fd fe7b 	bl	8005a60 <HAL_GetTick>
 8007d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d6c:	e00a      	b.n	8007d84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d6e:	f7fd fe77 	bl	8005a60 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d903      	bls.n	8007d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e15c      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
 8007d80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d84:	4b91      	ldr	r3, [pc, #580]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1ee      	bne.n	8007d6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80a4 	beq.w	8007ee6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d9e:	4b8b      	ldr	r3, [pc, #556]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10d      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007daa:	4b88      	ldr	r3, [pc, #544]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	4a87      	ldr	r2, [pc, #540]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db4:	6413      	str	r3, [r2, #64]	; 0x40
 8007db6:	4b85      	ldr	r3, [pc, #532]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dbe:	60bb      	str	r3, [r7, #8]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dc6:	4b82      	ldr	r3, [pc, #520]	; (8007fd0 <HAL_RCC_OscConfig+0x4d0>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d118      	bne.n	8007e04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007dd2:	4b7f      	ldr	r3, [pc, #508]	; (8007fd0 <HAL_RCC_OscConfig+0x4d0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a7e      	ldr	r2, [pc, #504]	; (8007fd0 <HAL_RCC_OscConfig+0x4d0>)
 8007dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dde:	f7fd fe3f 	bl	8005a60 <HAL_GetTick>
 8007de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007de4:	e008      	b.n	8007df8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007de6:	f7fd fe3b 	bl	8005a60 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b64      	cmp	r3, #100	; 0x64
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e120      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007df8:	4b75      	ldr	r3, [pc, #468]	; (8007fd0 <HAL_RCC_OscConfig+0x4d0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0f0      	beq.n	8007de6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d106      	bne.n	8007e1a <HAL_RCC_OscConfig+0x31a>
 8007e0c:	4b6f      	ldr	r3, [pc, #444]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e10:	4a6e      	ldr	r2, [pc, #440]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	6713      	str	r3, [r2, #112]	; 0x70
 8007e18:	e02d      	b.n	8007e76 <HAL_RCC_OscConfig+0x376>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <HAL_RCC_OscConfig+0x33c>
 8007e22:	4b6a      	ldr	r3, [pc, #424]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	4a69      	ldr	r2, [pc, #420]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e2e:	4b67      	ldr	r3, [pc, #412]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e32:	4a66      	ldr	r2, [pc, #408]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e34:	f023 0304 	bic.w	r3, r3, #4
 8007e38:	6713      	str	r3, [r2, #112]	; 0x70
 8007e3a:	e01c      	b.n	8007e76 <HAL_RCC_OscConfig+0x376>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d10c      	bne.n	8007e5e <HAL_RCC_OscConfig+0x35e>
 8007e44:	4b61      	ldr	r3, [pc, #388]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e48:	4a60      	ldr	r2, [pc, #384]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e4a:	f043 0304 	orr.w	r3, r3, #4
 8007e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e50:	4b5e      	ldr	r3, [pc, #376]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e54:	4a5d      	ldr	r2, [pc, #372]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e5c:	e00b      	b.n	8007e76 <HAL_RCC_OscConfig+0x376>
 8007e5e:	4b5b      	ldr	r3, [pc, #364]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e62:	4a5a      	ldr	r2, [pc, #360]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	6713      	str	r3, [r2, #112]	; 0x70
 8007e6a:	4b58      	ldr	r3, [pc, #352]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6e:	4a57      	ldr	r2, [pc, #348]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e70:	f023 0304 	bic.w	r3, r3, #4
 8007e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d015      	beq.n	8007eaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7e:	f7fd fdef 	bl	8005a60 <HAL_GetTick>
 8007e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e84:	e00a      	b.n	8007e9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e86:	f7fd fdeb 	bl	8005a60 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e0ce      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0ee      	beq.n	8007e86 <HAL_RCC_OscConfig+0x386>
 8007ea8:	e014      	b.n	8007ed4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eaa:	f7fd fdd9 	bl	8005a60 <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eb0:	e00a      	b.n	8007ec8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eb2:	f7fd fdd5 	bl	8005a60 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e0b8      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ec8:	4b40      	ldr	r3, [pc, #256]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1ee      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d105      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eda:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	4a3b      	ldr	r2, [pc, #236]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80a4 	beq.w	8008038 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ef0:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f003 030c 	and.w	r3, r3, #12
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	d06b      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d149      	bne.n	8007f98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f04:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a30      	ldr	r2, [pc, #192]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fd fda6 	bl	8005a60 <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f18:	f7fd fda2 	bl	8005a60 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e087      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2a:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69da      	ldr	r2, [r3, #28]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f64:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f70:	f7fd fd76 	bl	8005a60 <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f78:	f7fd fd72 	bl	8005a60 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e057      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f8a:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCC_OscConfig+0x478>
 8007f96:	e04f      	b.n	8008038 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a0b      	ldr	r2, [pc, #44]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa4:	f7fd fd5c 	bl	8005a60 <HAL_GetTick>
 8007fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fac:	f7fd fd58 	bl	8005a60 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e03d      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fbe:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <HAL_RCC_OscConfig+0x4cc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1f0      	bne.n	8007fac <HAL_RCC_OscConfig+0x4ac>
 8007fca:	e035      	b.n	8008038 <HAL_RCC_OscConfig+0x538>
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007fd4:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <HAL_RCC_OscConfig+0x544>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d028      	beq.n	8008034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d121      	bne.n	8008034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d11a      	bne.n	8008034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008004:	4013      	ands	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800800a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800800c:	4293      	cmp	r3, r2
 800800e:	d111      	bne.n	8008034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	3b01      	subs	r3, #1
 800801e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008020:	429a      	cmp	r2, r3
 8008022:	d107      	bne.n	8008034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008030:	429a      	cmp	r2, r3
 8008032:	d001      	beq.n	8008038 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e000      	b.n	800803a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40023800 	.word	0x40023800

08008048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0d0      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008060:	4b6a      	ldr	r3, [pc, #424]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d910      	bls.n	8008090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806e:	4b67      	ldr	r3, [pc, #412]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f023 020f 	bic.w	r2, r3, #15
 8008076:	4965      	ldr	r1, [pc, #404]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800807e:	4b63      	ldr	r3, [pc, #396]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d001      	beq.n	8008090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e0b8      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d020      	beq.n	80080de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080a8:	4b59      	ldr	r3, [pc, #356]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	4a58      	ldr	r2, [pc, #352]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080c0:	4b53      	ldr	r3, [pc, #332]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	4a52      	ldr	r2, [pc, #328]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080cc:	4b50      	ldr	r3, [pc, #320]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	494d      	ldr	r1, [pc, #308]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d040      	beq.n	800816c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d107      	bne.n	8008102 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080f2:	4b47      	ldr	r3, [pc, #284]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d115      	bne.n	800812a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e07f      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d107      	bne.n	800811a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800810a:	4b41      	ldr	r3, [pc, #260]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e073      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800811a:	4b3d      	ldr	r3, [pc, #244]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e06b      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800812a:	4b39      	ldr	r3, [pc, #228]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 0203 	bic.w	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4936      	ldr	r1, [pc, #216]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 8008138:	4313      	orrs	r3, r2
 800813a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813c:	f7fd fc90 	bl	8005a60 <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008142:	e00a      	b.n	800815a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008144:	f7fd fc8c 	bl	8005a60 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008152:	4293      	cmp	r3, r2
 8008154:	d901      	bls.n	800815a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e053      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800815a:	4b2d      	ldr	r3, [pc, #180]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 020c 	and.w	r2, r3, #12
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	429a      	cmp	r2, r3
 800816a:	d1eb      	bne.n	8008144 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800816c:	4b27      	ldr	r3, [pc, #156]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d210      	bcs.n	800819c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800817a:	4b24      	ldr	r3, [pc, #144]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f023 020f 	bic.w	r2, r3, #15
 8008182:	4922      	ldr	r1, [pc, #136]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	4313      	orrs	r3, r2
 8008188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800818a:	4b20      	ldr	r3, [pc, #128]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d001      	beq.n	800819c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e032      	b.n	8008202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d008      	beq.n	80081ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081a8:	4b19      	ldr	r3, [pc, #100]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	4916      	ldr	r1, [pc, #88]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0308 	and.w	r3, r3, #8
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80081c6:	4b12      	ldr	r3, [pc, #72]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	490e      	ldr	r1, [pc, #56]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081da:	f000 f821 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 80081de:	4601      	mov	r1, r0
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	4a0a      	ldr	r2, [pc, #40]	; (8008214 <HAL_RCC_ClockConfig+0x1cc>)
 80081ec:	5cd3      	ldrb	r3, [r2, r3]
 80081ee:	fa21 f303 	lsr.w	r3, r1, r3
 80081f2:	4a09      	ldr	r2, [pc, #36]	; (8008218 <HAL_RCC_ClockConfig+0x1d0>)
 80081f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <HAL_RCC_ClockConfig+0x1d4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fc fbb0 	bl	8004960 <HAL_InitTick>

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	40023c00 	.word	0x40023c00
 8008210:	40023800 	.word	0x40023800
 8008214:	0801acec 	.word	0x0801acec
 8008218:	20000000 	.word	0x20000000
 800821c:	20000004 	.word	0x20000004

08008220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	2300      	movs	r3, #0
 8008230:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008236:	4b63      	ldr	r3, [pc, #396]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 030c 	and.w	r3, r3, #12
 800823e:	2b04      	cmp	r3, #4
 8008240:	d007      	beq.n	8008252 <HAL_RCC_GetSysClockFreq+0x32>
 8008242:	2b08      	cmp	r3, #8
 8008244:	d008      	beq.n	8008258 <HAL_RCC_GetSysClockFreq+0x38>
 8008246:	2b00      	cmp	r3, #0
 8008248:	f040 80b4 	bne.w	80083b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800824c:	4b5e      	ldr	r3, [pc, #376]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800824e:	60bb      	str	r3, [r7, #8]
      break;
 8008250:	e0b3      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008252:	4b5e      	ldr	r3, [pc, #376]	; (80083cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008254:	60bb      	str	r3, [r7, #8]
      break;
 8008256:	e0b0      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008258:	4b5a      	ldr	r3, [pc, #360]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008260:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008262:	4b58      	ldr	r3, [pc, #352]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d04a      	beq.n	8008304 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800826e:	4b55      	ldr	r3, [pc, #340]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	099b      	lsrs	r3, r3, #6
 8008274:	f04f 0400 	mov.w	r4, #0
 8008278:	f240 11ff 	movw	r1, #511	; 0x1ff
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	ea03 0501 	and.w	r5, r3, r1
 8008284:	ea04 0602 	and.w	r6, r4, r2
 8008288:	4629      	mov	r1, r5
 800828a:	4632      	mov	r2, r6
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	f04f 0400 	mov.w	r4, #0
 8008294:	0154      	lsls	r4, r2, #5
 8008296:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800829a:	014b      	lsls	r3, r1, #5
 800829c:	4619      	mov	r1, r3
 800829e:	4622      	mov	r2, r4
 80082a0:	1b49      	subs	r1, r1, r5
 80082a2:	eb62 0206 	sbc.w	r2, r2, r6
 80082a6:	f04f 0300 	mov.w	r3, #0
 80082aa:	f04f 0400 	mov.w	r4, #0
 80082ae:	0194      	lsls	r4, r2, #6
 80082b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082b4:	018b      	lsls	r3, r1, #6
 80082b6:	1a5b      	subs	r3, r3, r1
 80082b8:	eb64 0402 	sbc.w	r4, r4, r2
 80082bc:	f04f 0100 	mov.w	r1, #0
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	00e2      	lsls	r2, r4, #3
 80082c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082ca:	00d9      	lsls	r1, r3, #3
 80082cc:	460b      	mov	r3, r1
 80082ce:	4614      	mov	r4, r2
 80082d0:	195b      	adds	r3, r3, r5
 80082d2:	eb44 0406 	adc.w	r4, r4, r6
 80082d6:	f04f 0100 	mov.w	r1, #0
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	0262      	lsls	r2, r4, #9
 80082e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80082e4:	0259      	lsls	r1, r3, #9
 80082e6:	460b      	mov	r3, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	4621      	mov	r1, r4
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f04f 0400 	mov.w	r4, #0
 80082f4:	461a      	mov	r2, r3
 80082f6:	4623      	mov	r3, r4
 80082f8:	f7f8 fc9e 	bl	8000c38 <__aeabi_uldivmod>
 80082fc:	4603      	mov	r3, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e049      	b.n	8008398 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008304:	4b2f      	ldr	r3, [pc, #188]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	099b      	lsrs	r3, r3, #6
 800830a:	f04f 0400 	mov.w	r4, #0
 800830e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	ea03 0501 	and.w	r5, r3, r1
 800831a:	ea04 0602 	and.w	r6, r4, r2
 800831e:	4629      	mov	r1, r5
 8008320:	4632      	mov	r2, r6
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	f04f 0400 	mov.w	r4, #0
 800832a:	0154      	lsls	r4, r2, #5
 800832c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008330:	014b      	lsls	r3, r1, #5
 8008332:	4619      	mov	r1, r3
 8008334:	4622      	mov	r2, r4
 8008336:	1b49      	subs	r1, r1, r5
 8008338:	eb62 0206 	sbc.w	r2, r2, r6
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	f04f 0400 	mov.w	r4, #0
 8008344:	0194      	lsls	r4, r2, #6
 8008346:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800834a:	018b      	lsls	r3, r1, #6
 800834c:	1a5b      	subs	r3, r3, r1
 800834e:	eb64 0402 	sbc.w	r4, r4, r2
 8008352:	f04f 0100 	mov.w	r1, #0
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	00e2      	lsls	r2, r4, #3
 800835c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008360:	00d9      	lsls	r1, r3, #3
 8008362:	460b      	mov	r3, r1
 8008364:	4614      	mov	r4, r2
 8008366:	195b      	adds	r3, r3, r5
 8008368:	eb44 0406 	adc.w	r4, r4, r6
 800836c:	f04f 0100 	mov.w	r1, #0
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	02a2      	lsls	r2, r4, #10
 8008376:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800837a:	0299      	lsls	r1, r3, #10
 800837c:	460b      	mov	r3, r1
 800837e:	4614      	mov	r4, r2
 8008380:	4618      	mov	r0, r3
 8008382:	4621      	mov	r1, r4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f04f 0400 	mov.w	r4, #0
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	f7f8 fc53 	bl	8000c38 <__aeabi_uldivmod>
 8008392:	4603      	mov	r3, r0
 8008394:	460c      	mov	r4, r1
 8008396:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	0c1b      	lsrs	r3, r3, #16
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	3301      	adds	r3, #1
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	60bb      	str	r3, [r7, #8]
      break;
 80083b2:	e002      	b.n	80083ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083b4:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80083b6:	60bb      	str	r3, [r7, #8]
      break;
 80083b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083ba:	68bb      	ldr	r3, [r7, #8]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c4:	40023800 	.word	0x40023800
 80083c8:	00f42400 	.word	0x00f42400
 80083cc:	007a1200 	.word	0x007a1200

080083d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d6:	681b      	ldr	r3, [r3, #0]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000000 	.word	0x20000000

080083e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083ec:	f7ff fff0 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 80083f0:	4601      	mov	r1, r0
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	0a9b      	lsrs	r3, r3, #10
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4a03      	ldr	r2, [pc, #12]	; (800840c <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fe:	5cd3      	ldrb	r3, [r2, r3]
 8008400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40023800 	.word	0x40023800
 800840c:	0801acfc 	.word	0x0801acfc

08008410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008414:	f7ff ffdc 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 8008418:	4601      	mov	r1, r0
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	0b5b      	lsrs	r3, r3, #13
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4a03      	ldr	r2, [pc, #12]	; (8008434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800842c:	4618      	mov	r0, r3
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40023800 	.word	0x40023800
 8008434:	0801acfc 	.word	0x0801acfc

08008438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220f      	movs	r2, #15
 8008446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0203 	and.w	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	08db      	lsrs	r3, r3, #3
 8008472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <HAL_RCC_GetClockConfig+0x60>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 020f 	and.w	r2, r3, #15
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40023800 	.word	0x40023800
 8008498:	40023c00 	.word	0x40023c00

0800849c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d012      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084c4:	4b69      	ldr	r3, [pc, #420]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4a68      	ldr	r2, [pc, #416]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084ce:	6093      	str	r3, [r2, #8]
 80084d0:	4b66      	ldr	r3, [pc, #408]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d8:	4964      	ldr	r1, [pc, #400]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d017      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084f6:	4b5d      	ldr	r3, [pc, #372]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008504:	4959      	ldr	r1, [pc, #356]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008514:	d101      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008516:	2301      	movs	r3, #1
 8008518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008522:	2301      	movs	r3, #1
 8008524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d017      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008532:	4b4e      	ldr	r3, [pc, #312]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	494a      	ldr	r1, [pc, #296]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008550:	d101      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008552:	2301      	movs	r3, #1
 8008554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800855e:	2301      	movs	r3, #1
 8008560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800856e:	2301      	movs	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 808b 	beq.w	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008580:	4b3a      	ldr	r3, [pc, #232]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	4a39      	ldr	r2, [pc, #228]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800858a:	6413      	str	r3, [r2, #64]	; 0x40
 800858c:	4b37      	ldr	r3, [pc, #220]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008598:	4b35      	ldr	r3, [pc, #212]	; (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a34      	ldr	r2, [pc, #208]	; (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800859e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a4:	f7fd fa5c 	bl	8005a60 <HAL_GetTick>
 80085a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ac:	f7fd fa58 	bl	8005a60 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b64      	cmp	r3, #100	; 0x64
 80085b8:	d901      	bls.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e31e      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80085be:	4b2c      	ldr	r3, [pc, #176]	; (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f0      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085ca:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d035      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d02e      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085e8:	4b20      	ldr	r3, [pc, #128]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085f2:	4b1e      	ldr	r3, [pc, #120]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	4a1d      	ldr	r2, [pc, #116]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085fe:	4b1b      	ldr	r3, [pc, #108]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008602:	4a1a      	ldr	r2, [pc, #104]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008608:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800860a:	4a18      	ldr	r2, [pc, #96]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008610:	4b16      	ldr	r3, [pc, #88]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d114      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7fd fa20 	bl	8005a60 <HAL_GetTick>
 8008620:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008622:	e00a      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f7fd fa1c 	bl	8005a60 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d901      	bls.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e2e0      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800863a:	4b0c      	ldr	r3, [pc, #48]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0ee      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008652:	d111      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008660:	4b04      	ldr	r3, [pc, #16]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008662:	400b      	ands	r3, r1
 8008664:	4901      	ldr	r1, [pc, #4]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008666:	4313      	orrs	r3, r2
 8008668:	608b      	str	r3, [r1, #8]
 800866a:	e00b      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800866c:	40023800 	.word	0x40023800
 8008670:	40007000 	.word	0x40007000
 8008674:	0ffffcff 	.word	0x0ffffcff
 8008678:	4bac      	ldr	r3, [pc, #688]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	4aab      	ldr	r2, [pc, #684]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800867e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008682:	6093      	str	r3, [r2, #8]
 8008684:	4ba9      	ldr	r3, [pc, #676]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008690:	49a6      	ldr	r1, [pc, #664]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008692:	4313      	orrs	r3, r2
 8008694:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0310 	and.w	r3, r3, #16
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d010      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086a2:	4ba2      	ldr	r3, [pc, #648]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a8:	4aa0      	ldr	r2, [pc, #640]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80086b2:	4b9e      	ldr	r3, [pc, #632]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	499b      	ldr	r1, [pc, #620]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086d0:	4b96      	ldr	r3, [pc, #600]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086de:	4993      	ldr	r1, [pc, #588]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086f2:	4b8e      	ldr	r3, [pc, #568]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008700:	498a      	ldr	r1, [pc, #552]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00a      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008714:	4b85      	ldr	r3, [pc, #532]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008722:	4982      	ldr	r1, [pc, #520]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008724:	4313      	orrs	r3, r2
 8008726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008736:	4b7d      	ldr	r3, [pc, #500]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008744:	4979      	ldr	r1, [pc, #484]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008746:	4313      	orrs	r3, r2
 8008748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008758:	4b74      	ldr	r3, [pc, #464]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875e:	f023 0203 	bic.w	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008766:	4971      	ldr	r1, [pc, #452]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008768:	4313      	orrs	r3, r2
 800876a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800877a:	4b6c      	ldr	r3, [pc, #432]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800877c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008780:	f023 020c 	bic.w	r2, r3, #12
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008788:	4968      	ldr	r1, [pc, #416]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800879c:	4b63      	ldr	r3, [pc, #396]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800879e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087aa:	4960      	ldr	r1, [pc, #384]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087be:	4b5b      	ldr	r3, [pc, #364]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	4957      	ldr	r1, [pc, #348]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087e0:	4b52      	ldr	r3, [pc, #328]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	494f      	ldr	r1, [pc, #316]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008802:	4b4a      	ldr	r3, [pc, #296]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008810:	4946      	ldr	r1, [pc, #280]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008824:	4b41      	ldr	r3, [pc, #260]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008832:	493e      	ldr	r1, [pc, #248]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008846:	4b39      	ldr	r3, [pc, #228]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008854:	4935      	ldr	r1, [pc, #212]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008868:	4b30      	ldr	r3, [pc, #192]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008876:	492d      	ldr	r1, [pc, #180]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008878:	4313      	orrs	r3, r2
 800887a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d011      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800888a:	4b28      	ldr	r3, [pc, #160]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008890:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008898:	4924      	ldr	r1, [pc, #144]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a8:	d101      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80088aa:	2301      	movs	r3, #1
 80088ac:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ba:	4b1c      	ldr	r3, [pc, #112]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c8:	4918      	ldr	r1, [pc, #96]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088dc:	4b13      	ldr	r3, [pc, #76]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ec:	490f      	ldr	r1, [pc, #60]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d005      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008902:	f040 80d8 	bne.w	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008906:	4b09      	ldr	r3, [pc, #36]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a08      	ldr	r2, [pc, #32]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800890c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008912:	f7fd f8a5 	bl	8005a60 <HAL_GetTick>
 8008916:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008918:	e00a      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800891a:	f7fd f8a1 	bl	8005a60 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b64      	cmp	r3, #100	; 0x64
 8008926:	d903      	bls.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e167      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
 800892c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008930:	4bad      	ldr	r3, [pc, #692]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1ee      	bne.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d021      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11d      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008950:	4ba5      	ldr	r3, [pc, #660]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008956:	0c1b      	lsrs	r3, r3, #16
 8008958:	f003 0303 	and.w	r3, r3, #3
 800895c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800895e:	4ba2      	ldr	r3, [pc, #648]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008964:	0e1b      	lsrs	r3, r3, #24
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	019a      	lsls	r2, r3, #6
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	431a      	orrs	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	071b      	lsls	r3, r3, #28
 8008984:	4998      	ldr	r1, [pc, #608]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a0:	d00a      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d02e      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089b6:	d129      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80089b8:	4b8b      	ldr	r3, [pc, #556]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089c6:	4b88      	ldr	r3, [pc, #544]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089cc:	0f1b      	lsrs	r3, r3, #28
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	019a      	lsls	r2, r3, #6
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	061b      	lsls	r3, r3, #24
 80089e6:	431a      	orrs	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	071b      	lsls	r3, r3, #28
 80089ec:	497e      	ldr	r1, [pc, #504]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80089f4:	4b7c      	ldr	r3, [pc, #496]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fa:	f023 021f 	bic.w	r2, r3, #31
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	3b01      	subs	r3, #1
 8008a04:	4978      	ldr	r1, [pc, #480]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01d      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a18:	4b73      	ldr	r3, [pc, #460]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a1e:	0e1b      	lsrs	r3, r3, #24
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a26:	4b70      	ldr	r3, [pc, #448]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a2c:	0f1b      	lsrs	r3, r3, #28
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	019a      	lsls	r2, r3, #6
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	041b      	lsls	r3, r3, #16
 8008a40:	431a      	orrs	r2, r3
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	061b      	lsls	r3, r3, #24
 8008a46:	431a      	orrs	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	071b      	lsls	r3, r3, #28
 8008a4c:	4966      	ldr	r1, [pc, #408]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d011      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	019a      	lsls	r2, r3, #6
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	041b      	lsls	r3, r3, #16
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	061b      	lsls	r3, r3, #24
 8008a74:	431a      	orrs	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	071b      	lsls	r3, r3, #28
 8008a7c:	495a      	ldr	r1, [pc, #360]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a84:	4b58      	ldr	r3, [pc, #352]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a57      	ldr	r2, [pc, #348]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a90:	f7fc ffe6 	bl	8005a60 <HAL_GetTick>
 8008a94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a96:	e008      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a98:	f7fc ffe2 	bl	8005a60 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b64      	cmp	r3, #100	; 0x64
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e0a8      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008aaa:	4b4f      	ldr	r3, [pc, #316]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0f0      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	f040 809e 	bne.w	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008abe:	4b4a      	ldr	r3, [pc, #296]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a49      	ldr	r2, [pc, #292]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aca:	f7fc ffc9 	bl	8005a60 <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ad0:	e008      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ad2:	f7fc ffc5 	bl	8005a60 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b64      	cmp	r3, #100	; 0x64
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e08b      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ae4:	4b40      	ldr	r3, [pc, #256]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af0:	d0ef      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d02e      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d12a      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b1a:	4b33      	ldr	r3, [pc, #204]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b20:	0c1b      	lsrs	r3, r3, #16
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b28:	4b2f      	ldr	r3, [pc, #188]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2e:	0f1b      	lsrs	r3, r3, #28
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	019a      	lsls	r2, r3, #6
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	061b      	lsls	r3, r3, #24
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	071b      	lsls	r3, r3, #28
 8008b4e:	4926      	ldr	r1, [pc, #152]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	3b01      	subs	r3, #1
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	491f      	ldr	r1, [pc, #124]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d022      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b84:	d11d      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b86:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8c:	0e1b      	lsrs	r3, r3, #24
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b94:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9a:	0f1b      	lsrs	r3, r3, #28
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	019a      	lsls	r2, r3, #6
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	041b      	lsls	r3, r3, #16
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	061b      	lsls	r3, r3, #24
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	071b      	lsls	r3, r3, #28
 8008bba:	490b      	ldr	r1, [pc, #44]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a08      	ldr	r2, [pc, #32]	; (8008be8 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bce:	f7fc ff47 	bl	8005a60 <HAL_GetTick>
 8008bd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bd4:	e00a      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bd6:	f7fc ff43 	bl	8005a60 <HAL_GetTick>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b64      	cmp	r3, #100	; 0x64
 8008be2:	d903      	bls.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e009      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008be8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bf8:	d1ed      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3720      	adds	r7, #32
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	40023800 	.word	0x40023800

08008c08 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e022      	b.n	8008c60 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7fb fc07 	bl	8004440 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2203      	movs	r2, #3
 8008c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f814 	bl	8008c68 <HAL_SD_InitCard>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e00a      	b.n	8008c60 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c68:	b5b0      	push	{r4, r5, r7, lr}
 8008c6a:	b08e      	sub	sp, #56	; 0x38
 8008c6c:	af04      	add	r7, sp, #16
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008c84:	2376      	movs	r3, #118	; 0x76
 8008c86:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681d      	ldr	r5, [r3, #0]
 8008c8c:	466c      	mov	r4, sp
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c9a:	f107 0308 	add.w	r3, r7, #8
 8008c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f003 fc6d 	bl	800c580 <SDMMC_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e03b      	b.n	8008d30 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cc6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f003 fca1 	bl	800c614 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 ffca 	bl	8009c7c <SD_PowerON>
 8008ce8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e013      	b.n	8008d30 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fee9 	bl	8009ae0 <SD_InitCard>
 8008d0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00b      	beq.n	8008d2e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3728      	adds	r7, #40	; 0x28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bdb0      	pop	{r4, r5, r7, pc}

08008d38 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	; 0x30
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d107      	bne.n	8008d60 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0cc      	b.n	8008efa <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	f040 80c5 	bne.w	8008ef8 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d907      	bls.n	8008d92 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e0b3      	b.n	8008efa <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2203      	movs	r2, #3
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	4a53      	ldr	r2, [pc, #332]	; (8008f04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	4a52      	ldr	r2, [pc, #328]	; (8008f08 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008dc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3380      	adds	r3, #128	; 0x80
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	025b      	lsls	r3, r3, #9
 8008ddc:	089b      	lsrs	r3, r3, #2
 8008dde:	f7fc fffd 	bl	8005ddc <HAL_DMA_Start_IT>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d017      	beq.n	8008e18 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008df6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a43      	ldr	r2, [pc, #268]	; (8008f0c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e070      	b.n	8008efa <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0208 	orr.w	r2, r2, #8
 8008e26:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d002      	beq.n	8008e36 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	025b      	lsls	r3, r3, #9
 8008e34:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f003 fc7c 	bl	800c73c <SDMMC_CmdBlockLength>
 8008e44:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00f      	beq.n	8008e6c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a2e      	ldr	r2, [pc, #184]	; (8008f0c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e046      	b.n	8008efa <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	025b      	lsls	r3, r3, #9
 8008e76:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e78:	2390      	movs	r3, #144	; 0x90
 8008e7a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f107 0210 	add.w	r2, r7, #16
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f003 fc26 	bl	800c6e4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d90a      	bls.n	8008eb4 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2282      	movs	r2, #130	; 0x82
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f003 fc8a 	bl	800c7c4 <SDMMC_CmdReadMultiBlock>
 8008eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008eb2:	e009      	b.n	8008ec8 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2281      	movs	r2, #129	; 0x81
 8008eb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f003 fc5d 	bl	800c780 <SDMMC_CmdReadSingleBlock>
 8008ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d012      	beq.n	8008ef4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	431a      	orrs	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e002      	b.n	8008efa <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e000      	b.n	8008efa <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008ef8:	2302      	movs	r3, #2
  }
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3730      	adds	r7, #48	; 0x30
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	080098ef 	.word	0x080098ef
 8008f08:	08009961 	.word	0x08009961
 8008f0c:	004005ff 	.word	0x004005ff

08008f10 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08c      	sub	sp, #48	; 0x30
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d107      	bne.n	8008f38 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e0cf      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	f040 80c8 	bne.w	80090d6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	441a      	add	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d907      	bls.n	8008f6a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0b6      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 021a 	orr.w	r2, r2, #26
 8008f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8e:	4a54      	ldr	r2, [pc, #336]	; (80090e0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f96:	4a53      	ldr	r2, [pc, #332]	; (80090e4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008f98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d002      	beq.n	8008fb0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	025b      	lsls	r3, r3, #9
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f003 fbbf 	bl	800c73c <SDMMC_CmdBlockLength>
 8008fbe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00f      	beq.n	8008fe6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a47      	ldr	r2, [pc, #284]	; (80090e8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008fcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e078      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d90a      	bls.n	8009002 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	22a0      	movs	r2, #160	; 0xa0
 8008ff0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f003 fc27 	bl	800c84c <SDMMC_CmdWriteMultiBlock>
 8008ffe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009000:	e009      	b.n	8009016 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2290      	movs	r2, #144	; 0x90
 8009006:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800900e:	4618      	mov	r0, r3
 8009010:	f003 fbfa 	bl	800c808 <SDMMC_CmdWriteSingleBlock>
 8009014:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	2b00      	cmp	r3, #0
 800901a:	d012      	beq.n	8009042 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a31      	ldr	r2, [pc, #196]	; (80090e8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	431a      	orrs	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e04a      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0208 	orr.w	r2, r2, #8
 8009050:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3380      	adds	r3, #128	; 0x80
 800905e:	461a      	mov	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	025b      	lsls	r3, r3, #9
 8009064:	089b      	lsrs	r3, r3, #2
 8009066:	f7fc feb9 	bl	8005ddc <HAL_DMA_Start_IT>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01a      	beq.n	80090a6 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 021a 	bic.w	r2, r2, #26
 800907e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a18      	ldr	r2, [pc, #96]	; (80090e8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e018      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090a6:	f04f 33ff 	mov.w	r3, #4294967295
 80090aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	025b      	lsls	r3, r3, #9
 80090b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090b2:	2390      	movs	r3, #144	; 0x90
 80090b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090b6:	2300      	movs	r3, #0
 80090b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80090be:	2301      	movs	r3, #1
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f107 0210 	add.w	r2, r7, #16
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f003 fb09 	bl	800c6e4 <SDMMC_ConfigData>

      return HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	e000      	b.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80090d6:	2302      	movs	r3, #2
  }
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3730      	adds	r7, #48	; 0x30
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	080098c5 	.word	0x080098c5
 80090e4:	08009961 	.word	0x08009961
 80090e8:	004005ff 	.word	0x004005ff

080090ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d008      	beq.n	800911a <HAL_SD_IRQHandler+0x2e>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 ffc8 	bl	800a0a8 <SD_Read_IT>
 8009118:	e153      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 808d 	beq.w	8009244 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009132:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4ba3      	ldr	r3, [pc, #652]	; (80093cc <HAL_SD_IRQHandler+0x2e0>)
 8009140:	400b      	ands	r3, r1
 8009142:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0201 	bic.w	r2, r2, #1
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f003 0308 	and.w	r3, r3, #8
 800915a:	2b00      	cmp	r3, #0
 800915c:	d039      	beq.n	80091d2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <HAL_SD_IRQHandler+0x86>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d011      	beq.n	8009196 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f003 fb8a 	bl	800c890 <SDMMC_CmdStopTransfer>
 800917c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f921 	bl	80093d8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f240 523a 	movw	r2, #1338	; 0x53a
 800919e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <HAL_SD_IRQHandler+0xd6>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f005 fb0c 	bl	800e7e0 <HAL_SD_RxCpltCallback>
 80091c8:	e0fb      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f005 fafe 	bl	800e7cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80091d0:	e0f7      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80f2 	beq.w	80093c2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d011      	beq.n	800920c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f003 fb4f 	bl	800c890 <SDMMC_CmdStopTransfer>
 80091f2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d008      	beq.n	800920c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f8e6 	bl	80093d8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	f040 80d5 	bne.w	80093c2 <HAL_SD_IRQHandler+0x2d6>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	f040 80cf 	bne.w	80093c2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0208 	bic.w	r2, r2, #8
 8009232:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f005 fac5 	bl	800e7cc <HAL_SD_TxCpltCallback>
}
 8009242:	e0be      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d008      	beq.n	8009264 <HAL_SD_IRQHandler+0x178>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f003 0308 	and.w	r3, r3, #8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 ff74 	bl	800a14a <SD_Write_IT>
 8009262:	e0ae      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80a7 	beq.w	80093c2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	f043 0202 	orr.w	r2, r3, #2
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009294:	f003 0308 	and.w	r3, r3, #8
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	f043 0208 	orr.w	r2, r3, #8
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	f043 0220 	orr.w	r2, r3, #32
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	f003 0310 	and.w	r3, r3, #16
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f043 0210 	orr.w	r2, r3, #16
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80092e4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80092f4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f003 fac8 	bl	800c890 <SDMMC_CmdStopTransfer>
 8009300:	4602      	mov	r2, r0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f857 	bl	80093d8 <HAL_SD_ErrorCallback>
}
 800932a:	e04a      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b00      	cmp	r3, #0
 8009334:	d045      	beq.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f003 0310 	and.w	r3, r3, #16
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <HAL_SD_IRQHandler+0x25e>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934e:	4a20      	ldr	r2, [pc, #128]	; (80093d0 <HAL_SD_IRQHandler+0x2e4>)
 8009350:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009356:	4618      	mov	r0, r3
 8009358:	f7fc fda0 	bl	8005e9c <HAL_DMA_Abort_IT>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d02f      	beq.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fb4c 	bl	8009a04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800936c:	e029      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <HAL_SD_IRQHandler+0x296>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d011      	beq.n	80093a6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <HAL_SD_IRQHandler+0x2e8>)
 8009388:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	4618      	mov	r0, r3
 8009390:	f7fc fd84 	bl	8005e9c <HAL_DMA_Abort_IT>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fb67 	bl	8009a72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80093a4:	e00d      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f005 f9fc 	bl	800e7b8 <HAL_SD_AbortCallback>
}
 80093c0:	e7ff      	b.n	80093c2 <HAL_SD_IRQHandler+0x2d6>
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	ffff3ec5 	.word	0xffff3ec5
 80093d0:	08009a05 	.word	0x08009a05
 80093d4:	08009a73 	.word	0x08009a73

080093d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093fa:	0f9b      	lsrs	r3, r3, #30
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009406:	0e9b      	lsrs	r3, r3, #26
 8009408:	b2db      	uxtb	r3, r3
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	b2da      	uxtb	r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009418:	0e1b      	lsrs	r3, r3, #24
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0303 	and.w	r3, r3, #3
 8009420:	b2da      	uxtb	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	b2da      	uxtb	r2, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	b2da      	uxtb	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009442:	b2da      	uxtb	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800944c:	0d1b      	lsrs	r3, r3, #20
 800944e:	b29a      	uxth	r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	b2da      	uxtb	r2, r3
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800946a:	0bdb      	lsrs	r3, r3, #15
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	b2da      	uxtb	r2, r3
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947c:	0b9b      	lsrs	r3, r3, #14
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	b2da      	uxtb	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800948e:	0b5b      	lsrs	r3, r3, #13
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	b2da      	uxtb	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a0:	0b1b      	lsrs	r3, r3, #12
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2200      	movs	r2, #0
 80094b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d163      	bne.n	8009584 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c0:	009a      	lsls	r2, r3, #2
 80094c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80094c6:	4013      	ands	r3, r2
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80094cc:	0f92      	lsrs	r2, r2, #30
 80094ce:	431a      	orrs	r2, r3
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d8:	0edb      	lsrs	r3, r3, #27
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ea:	0e1b      	lsrs	r3, r3, #24
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094fc:	0d5b      	lsrs	r3, r3, #21
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	b2da      	uxtb	r2, r3
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800950e:	0c9b      	lsrs	r3, r3, #18
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009520:	0bdb      	lsrs	r3, r3, #15
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0307 	and.w	r3, r3, #7
 8009528:	b2da      	uxtb	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	7e1b      	ldrb	r3, [r3, #24]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0307 	and.w	r3, r3, #7
 8009542:	3302      	adds	r3, #2
 8009544:	2201      	movs	r2, #1
 8009546:	fa02 f303 	lsl.w	r3, r2, r3
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800954e:	fb02 f203 	mul.w	r2, r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	7a1b      	ldrb	r3, [r3, #8]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	2201      	movs	r2, #1
 8009562:	409a      	lsls	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009570:	0a52      	lsrs	r2, r2, #9
 8009572:	fb02 f203 	mul.w	r2, r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009580:	661a      	str	r2, [r3, #96]	; 0x60
 8009582:	e031      	b.n	80095e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009588:	2b01      	cmp	r3, #1
 800958a:	d11d      	bne.n	80095c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	431a      	orrs	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	3301      	adds	r3, #1
 80095a8:	029a      	lsls	r2, r3, #10
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	661a      	str	r2, [r3, #96]	; 0x60
 80095c6:	e00f      	b.n	80095e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a58      	ldr	r2, [pc, #352]	; (8009730 <HAL_SD_GetCardCSD+0x344>)
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e09d      	b.n	8009724 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ec:	0b9b      	lsrs	r3, r3, #14
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fe:	09db      	lsrs	r3, r3, #7
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009616:	b2da      	uxtb	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009620:	0fdb      	lsrs	r3, r3, #31
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800962c:	0f5b      	lsrs	r3, r3, #29
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 0303 	and.w	r3, r3, #3
 8009634:	b2da      	uxtb	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963e:	0e9b      	lsrs	r3, r3, #26
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	b2da      	uxtb	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009650:	0d9b      	lsrs	r3, r3, #22
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	b2da      	uxtb	r2, r3
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009662:	0d5b      	lsrs	r3, r3, #21
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	b2da      	uxtb	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	0bdb      	lsrs	r3, r3, #15
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a6:	0b9b      	lsrs	r3, r3, #14
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ba:	0b5b      	lsrs	r3, r3, #13
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ce:	0b1b      	lsrs	r3, r3, #12
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e2:	0a9b      	lsrs	r3, r3, #10
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970a:	085b      	lsrs	r3, r3, #1
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009712:	b2da      	uxtb	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	004005ff 	.word	0x004005ff

08009734 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800978c:	b5b0      	push	{r4, r5, r7, lr}
 800978e:	b08e      	sub	sp, #56	; 0x38
 8009790:	af04      	add	r7, sp, #16
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2203      	movs	r2, #3
 800979a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d02e      	beq.n	8009804 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ac:	d106      	bne.n	80097bc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38
 80097ba:	e029      	b.n	8009810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c2:	d10a      	bne.n	80097da <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fb0f 	bl	8009de8 <SD_WideBus_Enable>
 80097ca:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38
 80097d8:	e01a      	b.n	8009810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fb4c 	bl	8009e7e <SD_WideBus_Disable>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	431a      	orrs	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	639a      	str	r2, [r3, #56]	; 0x38
 80097f4:	e00c      	b.n	8009810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
 8009802:	e005      	b.n	8009810 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a18      	ldr	r2, [pc, #96]	; (8009880 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e024      	b.n	8009876 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681d      	ldr	r5, [r3, #0]
 8009852:	466c      	mov	r4, sp
 8009854:	f107 0318 	add.w	r3, r7, #24
 8009858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800985c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009860:	f107 030c 	add.w	r3, r7, #12
 8009864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009866:	4628      	mov	r0, r5
 8009868:	f002 fe8a 	bl	800c580 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3728      	adds	r7, #40	; 0x28
 800987a:	46bd      	mov	sp, r7
 800987c:	bdb0      	pop	{r4, r5, r7, pc}
 800987e:	bf00      	nop
 8009880:	004005ff 	.word	0x004005ff

08009884 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa7e 	bl	8009d98 <SD_SendStatus>
 800989c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	431a      	orrs	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	0a5b      	lsrs	r3, r3, #9
 80098b4:	f003 030f 	and.w	r3, r3, #15
 80098b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80098ba:	693b      	ldr	r3, [r7, #16]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	2b82      	cmp	r3, #130	; 0x82
 8009902:	d111      	bne.n	8009928 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4618      	mov	r0, r3
 800990a:	f002 ffc1 	bl	800c890 <SDMMC_CmdStopTransfer>
 800990e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d008      	beq.n	8009928 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	431a      	orrs	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f7ff fd58 	bl	80093d8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0208 	bic.w	r2, r2, #8
 8009936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009940:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f004 ff45 	bl	800e7e0 <HAL_SD_RxCpltCallback>
#endif
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7fc fc40 	bl	80061f4 <HAL_DMA_GetError>
 8009974:	4603      	mov	r3, r0
 8009976:	2b02      	cmp	r3, #2
 8009978:	d03e      	beq.n	80099f8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009980:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009988:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d002      	beq.n	8009996 <SD_DMAError+0x36>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d12d      	bne.n	80099f2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a19      	ldr	r2, [pc, #100]	; (8009a00 <SD_DMAError+0xa0>)
 800999c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80099ac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80099ba:	6978      	ldr	r0, [r7, #20]
 80099bc:	f7ff ff62 	bl	8009884 <HAL_SD_GetCardState>
 80099c0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b06      	cmp	r3, #6
 80099c6:	d002      	beq.n	80099ce <SD_DMAError+0x6e>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	d10a      	bne.n	80099e4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f002 ff5c 	bl	800c890 <SDMMC_CmdStopTransfer>
 80099d8:	4602      	mov	r2, r0
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	431a      	orrs	r2, r3
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2200      	movs	r2, #0
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80099f2:	6978      	ldr	r0, [r7, #20]
 80099f4:	f7ff fcf0 	bl	80093d8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80099f8:	bf00      	nop
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	004005ff 	.word	0x004005ff

08009a04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f7ff ff31 	bl	8009884 <HAL_SD_GetCardState>
 8009a22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b06      	cmp	r3, #6
 8009a36:	d002      	beq.n	8009a3e <SD_DMATxAbort+0x3a>
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d10a      	bne.n	8009a54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f002 ff24 	bl	800c890 <SDMMC_CmdStopTransfer>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d103      	bne.n	8009a64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f004 feab 	bl	800e7b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a62:	e002      	b.n	8009a6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7ff fcb7 	bl	80093d8 <HAL_SD_ErrorCallback>
}
 8009a6a:	bf00      	nop
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fefa 	bl	8009884 <HAL_SD_GetCardState>
 8009a90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b06      	cmp	r3, #6
 8009aa4:	d002      	beq.n	8009aac <SD_DMARxAbort+0x3a>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b05      	cmp	r3, #5
 8009aaa:	d10a      	bne.n	8009ac2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f002 feed 	bl	800c890 <SDMMC_CmdStopTransfer>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abc:	431a      	orrs	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f004 fe74 	bl	800e7b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ad0:	e002      	b.n	8009ad8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff fc80 	bl	80093d8 <HAL_SD_ErrorCallback>
}
 8009ad8:	bf00      	nop
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ae0:	b5b0      	push	{r4, r5, r7, lr}
 8009ae2:	b094      	sub	sp, #80	; 0x50
 8009ae4:	af04      	add	r7, sp, #16
 8009ae6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f002 fd9e 	bl	800c632 <SDMMC_GetPowerState>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009afc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b00:	e0b7      	b.n	8009c72 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d02f      	beq.n	8009b6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 ffc9 	bl	800caa6 <SDMMC_CmdSendCID>
 8009b14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	e0a8      	b.n	8009c72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 fdc9 	bl	800c6be <SDMMC_GetResponse>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2104      	movs	r1, #4
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 fdc0 	bl	800c6be <SDMMC_GetResponse>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2108      	movs	r1, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f002 fdb7 	bl	800c6be <SDMMC_GetResponse>
 8009b50:	4602      	mov	r2, r0
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	210c      	movs	r1, #12
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 fdae 	bl	800c6be <SDMMC_GetResponse>
 8009b62:	4602      	mov	r2, r0
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d00d      	beq.n	8009b8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f107 020e 	add.w	r2, r7, #14
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 ffcf 	bl	800cb20 <SDMMC_CmdSetRelAdd>
 8009b82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <SD_InitCard+0xae>
    {
      return errorstate;
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	e071      	b.n	8009c72 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d036      	beq.n	8009c04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b96:	89fb      	ldrh	r3, [r7, #14]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f002 ff99 	bl	800cae2 <SDMMC_CmdSendCSD>
 8009bb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bba:	e05a      	b.n	8009c72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 fd7b 	bl	800c6be <SDMMC_GetResponse>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f002 fd72 	bl	800c6be <SDMMC_GetResponse>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2108      	movs	r1, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 fd69 	bl	800c6be <SDMMC_GetResponse>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	210c      	movs	r1, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 fd60 	bl	800c6be <SDMMC_GetResponse>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2104      	movs	r1, #4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f002 fd57 	bl	800c6be <SDMMC_GetResponse>
 8009c10:	4603      	mov	r3, r0
 8009c12:	0d1a      	lsrs	r2, r3, #20
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c18:	f107 0310 	add.w	r3, r7, #16
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff fbe4 	bl	80093ec <HAL_SD_GetCardCSD>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c2e:	e020      	b.n	8009c72 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	f04f 0400 	mov.w	r4, #0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4623      	mov	r3, r4
 8009c42:	4608      	mov	r0, r1
 8009c44:	f002 fe46 	bl	800c8d4 <SDMMC_CmdSelDesel>
 8009c48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <SD_InitCard+0x174>
  {
    return errorstate;
 8009c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c52:	e00e      	b.n	8009c72 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681d      	ldr	r5, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	466c      	mov	r4, sp
 8009c5c:	f103 0210 	add.w	r2, r3, #16
 8009c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c66:	3304      	adds	r3, #4
 8009c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f002 fc88 	bl	800c580 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3740      	adds	r7, #64	; 0x40
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f002 fe40 	bl	800c91a <SDMMC_CmdGoIdleState>
 8009c9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	e072      	b.n	8009d8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f002 fe53 	bl	800c956 <SDMMC_CmdOperCond>
 8009cb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00d      	beq.n	8009cd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 fe29 	bl	800c91a <SDMMC_CmdGoIdleState>
 8009cc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <SD_PowerON+0x5e>
    {
      return errorstate;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e05b      	b.n	8009d8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d137      	bne.n	8009d52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f002 fe53 	bl	800c994 <SDMMC_CmdAppCommand>
 8009cee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d02d      	beq.n	8009d52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cfa:	e047      	b.n	8009d8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fe46 	bl	800c994 <SDMMC_CmdAppCommand>
 8009d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e03b      	b.n	8009d8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	491e      	ldr	r1, [pc, #120]	; (8009d94 <SD_PowerON+0x118>)
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f002 fe5c 	bl	800c9d8 <SDMMC_CmdAppOperCommand>
 8009d20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d2c:	e02e      	b.n	8009d8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f002 fcc2 	bl	800c6be <SDMMC_GetResponse>
 8009d3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	0fdb      	lsrs	r3, r3, #31
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <SD_PowerON+0xcc>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <SD_PowerON+0xce>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	613b      	str	r3, [r7, #16]

    count++;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d802      	bhi.n	8009d62 <SD_PowerON+0xe6>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0cc      	beq.n	8009cfc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d902      	bls.n	8009d72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d70:	e00c      	b.n	8009d8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	645a      	str	r2, [r3, #68]	; 0x44
 8009d82:	e002      	b.n	8009d8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	c1100000 	.word	0xc1100000

08009d98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dac:	e018      	b.n	8009de0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	f002 fed1 	bl	800cb62 <SDMMC_CmdSendStatus>
 8009dc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	e009      	b.n	8009de0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 fc73 	bl	800c6be <SDMMC_GetResponse>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	2300      	movs	r3, #0
 8009df6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f002 fc5d 	bl	800c6be <SDMMC_GetResponse>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e0e:	d102      	bne.n	8009e16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e14:	e02f      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e16:	f107 030c 	add.w	r3, r7, #12
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f879 	bl	8009f14 <SD_FindSCR>
 8009e22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	e023      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01c      	beq.n	8009e72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e40:	041b      	lsls	r3, r3, #16
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f002 fda5 	bl	800c994 <SDMMC_CmdAppCommand>
 8009e4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	e00f      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fddf 	bl	800ca20 <SDMMC_CmdBusWidth>
 8009e62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	e003      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e001      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b086      	sub	sp, #24
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2100      	movs	r1, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 fc12 	bl	800c6be <SDMMC_GetResponse>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ea4:	d102      	bne.n	8009eac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eaa:	e02f      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009eac:	f107 030c 	add.w	r3, r7, #12
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f82e 	bl	8009f14 <SD_FindSCR>
 8009eb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	e023      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d01c      	beq.n	8009f08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f002 fd5a 	bl	800c994 <SDMMC_CmdAppCommand>
 8009ee0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	e00f      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f002 fd94 	bl	800ca20 <SDMMC_CmdBusWidth>
 8009ef8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	e003      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	e001      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b08f      	sub	sp, #60	; 0x3c
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f1e:	f7fb fd9f 	bl	8005a60 <HAL_GetTick>
 8009f22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2108      	movs	r1, #8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f002 fbfe 	bl	800c73c <SDMMC_CmdBlockLength>
 8009f40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	e0a9      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f54:	041b      	lsls	r3, r3, #16
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f002 fd1b 	bl	800c994 <SDMMC_CmdAppCommand>
 8009f5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	e09a      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f70:	2308      	movs	r3, #8
 8009f72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f74:	2330      	movs	r3, #48	; 0x30
 8009f76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f107 0210 	add.w	r2, r7, #16
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f002 fba8 	bl	800c6e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f002 fd63 	bl	800ca64 <SDMMC_CmdSendSCR>
 8009f9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d022      	beq.n	8009fec <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	e07a      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00e      	beq.n	8009fd6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6819      	ldr	r1, [r3, #0]
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	f107 0208 	add.w	r2, r7, #8
 8009fc4:	18d4      	adds	r4, r2, r3
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	f002 fb06 	bl	800c5d8 <SDMMC_ReadFIFO>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	6023      	str	r3, [r4, #0]
      index++;
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fd6:	f7fb fd43 	bl	8005a60 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe4:	d102      	bne.n	8009fec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fe6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fea:	e059      	b.n	800a0a0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff2:	f240 432a 	movw	r3, #1066	; 0x42a
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0d6      	beq.n	8009faa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2208      	movs	r2, #8
 800a010:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a012:	2308      	movs	r3, #8
 800a014:	e044      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2202      	movs	r2, #2
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a02c:	2302      	movs	r3, #2
 800a02e:	e037      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2220      	movs	r2, #32
 800a044:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a046:	2320      	movs	r3, #32
 800a048:	e02a      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a052:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	061a      	lsls	r2, r3, #24
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a060:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0a1b      	lsrs	r3, r3, #8
 800a066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a06a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	0e1b      	lsrs	r3, r3, #24
 800a070:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	601a      	str	r2, [r3, #0]
    scr++;
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	3304      	adds	r3, #4
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	061a      	lsls	r2, r3, #24
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a088:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	0a1b      	lsrs	r3, r3, #8
 800a08e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a092:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	0e1b      	lsrs	r3, r3, #24
 800a098:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	373c      	adds	r7, #60	; 0x3c
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd90      	pop	{r4, r7, pc}

0800a0a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d03f      	beq.n	800a142 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e033      	b.n	800a130 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f002 fa83 	bl	800c5d8 <SDMMC_ReadFIFO>
 800a0d2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	0a1b      	lsrs	r3, r3, #8
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	0c1b      	lsrs	r3, r3, #16
 800a102:	b2da      	uxtb	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	3b01      	subs	r3, #1
 800a112:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	0e1b      	lsrs	r3, r3, #24
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3301      	adds	r3, #1
 800a122:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	3b01      	subs	r3, #1
 800a128:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	3301      	adds	r3, #1
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2b07      	cmp	r3, #7
 800a134:	d9c8      	bls.n	800a0c8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a142:	bf00      	nop
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d043      	beq.n	800a1ec <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e037      	b.n	800a1da <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3301      	adds	r3, #1
 800a174:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	3b01      	subs	r3, #1
 800a17a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	021a      	lsls	r2, r3, #8
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4313      	orrs	r3, r2
 800a186:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	041a      	lsls	r2, r3, #16
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	061a      	lsls	r2, r3, #24
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f107 0208 	add.w	r2, r7, #8
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 fa0f 	bl	800c5f2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b07      	cmp	r3, #7
 800a1de:	d9c4      	bls.n	800a16a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e084      	b.n	800a310 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7fa f9f7 	bl	8004614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2202      	movs	r2, #2
 800a22a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a23c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a246:	d902      	bls.n	800a24e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a248:	2300      	movs	r3, #0
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	e002      	b.n	800a254 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a24e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a252:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a25c:	d007      	beq.n	800a26e <HAL_SPI_Init+0x7a>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a266:	d002      	beq.n	800a26e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a27e:	d903      	bls.n	800a288 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	631a      	str	r2, [r3, #48]	; 0x30
 800a286:	e002      	b.n	800a28e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	431a      	orrs	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	ea42 0103 	orr.w	r1, r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	f003 0204 	and.w	r2, r3, #4
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	ea42 0103 	orr.w	r1, r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	69da      	ldr	r2, [r3, #28]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d110      	bne.n	800a354 <HAL_SPI_Receive_DMA+0x3c>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a33a:	d10b      	bne.n	800a354 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2204      	movs	r2, #4
 800a340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a344:	88fb      	ldrh	r3, [r7, #6]
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f900 	bl	800a550 <HAL_SPI_TransmitReceive_DMA>
 800a350:	4603      	mov	r3, r0
 800a352:	e0f3      	b.n	800a53c <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <HAL_SPI_Receive_DMA+0x4a>
 800a35e:	2302      	movs	r3, #2
 800a360:	e0ec      	b.n	800a53c <HAL_SPI_Receive_DMA+0x224>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b01      	cmp	r3, #1
 800a374:	d002      	beq.n	800a37c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800a376:	2302      	movs	r3, #2
 800a378:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a37a:	e0da      	b.n	800a532 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <HAL_SPI_Receive_DMA+0x70>
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a38c:	e0d1      	b.n	800a532 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2204      	movs	r2, #4
 800a392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	88fa      	ldrh	r2, [r7, #6]
 800a3a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	88fa      	ldrh	r2, [r7, #6]
 800a3ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d2:	d107      	bne.n	800a3e4 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a3e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3f2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a3fc:	d908      	bls.n	800a410 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	e042      	b.n	800a496 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a41e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a42a:	d134      	bne.n	800a496 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a43a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a442:	b29b      	uxth	r3, r3
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d111      	bne.n	800a470 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a45a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a462:	b29b      	uxth	r3, r3
 800a464:	085b      	lsrs	r3, r3, #1
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a46e:	e012      	b.n	800a496 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a47e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a486:	b29b      	uxth	r3, r3
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3301      	adds	r3, #1
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a49a:	4a2a      	ldr	r2, [pc, #168]	; (800a544 <HAL_SPI_Receive_DMA+0x22c>)
 800a49c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a2:	4a29      	ldr	r2, [pc, #164]	; (800a548 <HAL_SPI_Receive_DMA+0x230>)
 800a4a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4aa:	4a28      	ldr	r2, [pc, #160]	; (800a54c <HAL_SPI_Receive_DMA+0x234>)
 800a4ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	f7fb fc84 	bl	8005ddc <HAL_DMA_Start_IT>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00c      	beq.n	800a4f4 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4de:	f043 0210 	orr.w	r2, r3, #16
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a4f2:	e01e      	b.n	800a532 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fe:	2b40      	cmp	r3, #64	; 0x40
 800a500:	d007      	beq.n	800a512 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a510:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0220 	orr.w	r2, r2, #32
 800a520:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f042 0201 	orr.w	r2, r2, #1
 800a530:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	0800abd1 	.word	0x0800abd1
 800a548:	0800aab9 	.word	0x0800aab9
 800a54c:	0800ac09 	.word	0x0800ac09

0800a550 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e16c      	b.n	800a84a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a57e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a586:	7dbb      	ldrb	r3, [r7, #22]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d00d      	beq.n	800a5a8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a592:	d106      	bne.n	800a5a2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800a59c:	7dbb      	ldrb	r3, [r7, #22]
 800a59e:	2b04      	cmp	r3, #4
 800a5a0:	d002      	beq.n	800a5a8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5a6:	e14b      	b.n	800a840 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a5b4:	887b      	ldrh	r3, [r7, #2]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5be:	e13f      	b.n	800a840 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d003      	beq.n	800a5d4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2205      	movs	r2, #5
 800a5d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	887a      	ldrh	r2, [r7, #2]
 800a5e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	887a      	ldrh	r2, [r7, #2]
 800a5ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	887a      	ldrh	r2, [r7, #2]
 800a5f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	887a      	ldrh	r2, [r7, #2]
 800a5fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a61c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a626:	d908      	bls.n	800a63a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a636:	605a      	str	r2, [r3, #4]
 800a638:	e06f      	b.n	800a71a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a648:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a654:	d126      	bne.n	800a6a4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10f      	bne.n	800a682 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a670:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a676:	b29b      	uxth	r3, r3
 800a678:	085b      	lsrs	r3, r3, #1
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a680:	e010      	b.n	800a6a4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a690:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a696:	b29b      	uxth	r3, r3
 800a698:	085b      	lsrs	r3, r3, #1
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	3301      	adds	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ae:	d134      	bne.n	800a71a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a6be:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d111      	bne.n	800a6f4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a6f2:	e012      	b.n	800a71a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a702:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	085b      	lsrs	r3, r3, #1
 800a70e:	b29b      	uxth	r3, r3
 800a710:	3301      	adds	r3, #1
 800a712:	b29a      	uxth	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b04      	cmp	r3, #4
 800a724:	d108      	bne.n	800a738 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a72a:	4a4a      	ldr	r2, [pc, #296]	; (800a854 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a72c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a732:	4a49      	ldr	r2, [pc, #292]	; (800a858 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800a734:	63da      	str	r2, [r3, #60]	; 0x3c
 800a736:	e007      	b.n	800a748 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a73c:	4a47      	ldr	r2, [pc, #284]	; (800a85c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800a73e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a744:	4a46      	ldr	r2, [pc, #280]	; (800a860 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800a746:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74c:	4a45      	ldr	r2, [pc, #276]	; (800a864 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800a74e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a754:	2200      	movs	r2, #0
 800a756:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	330c      	adds	r3, #12
 800a762:	4619      	mov	r1, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	461a      	mov	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a770:	b29b      	uxth	r3, r3
 800a772:	f7fb fb33 	bl	8005ddc <HAL_DMA_Start_IT>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00c      	beq.n	800a796 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a780:	f043 0210 	orr.w	r2, r3, #16
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a794:	e054      	b.n	800a840 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f042 0201 	orr.w	r2, r2, #1
 800a7a4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f7fb fafd 	bl	8005ddc <HAL_DMA_Start_IT>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00c      	beq.n	800a802 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ec:	f043 0210 	orr.w	r2, r3, #16
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a800:	e01e      	b.n	800a840 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80c:	2b40      	cmp	r3, #64	; 0x40
 800a80e:	d007      	beq.n	800a820 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a81e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0220 	orr.w	r2, r2, #32
 800a82e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f042 0202 	orr.w	r2, r2, #2
 800a83e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	0800abd1 	.word	0x0800abd1
 800a858:	0800aab9 	.word	0x0800aab9
 800a85c:	0800abed 	.word	0x0800abed
 800a860:	0800ab3f 	.word	0x0800ab3f
 800a864:	0800ac09 	.word	0x0800ac09

0800a868 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	099b      	lsrs	r3, r3, #6
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10f      	bne.n	800a8ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	099b      	lsrs	r3, r3, #6
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
    return;
 800a8aa:	e0d8      	b.n	800aa5e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	085b      	lsrs	r3, r3, #1
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <HAL_SPI_IRQHandler+0x66>
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	09db      	lsrs	r3, r3, #7
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	4798      	blx	r3
    return;
 800a8cc:	e0c7      	b.n	800aa5e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	095b      	lsrs	r3, r3, #5
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10c      	bne.n	800a8f4 <HAL_SPI_IRQHandler+0x8c>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	099b      	lsrs	r3, r3, #6
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <HAL_SPI_IRQHandler+0x8c>
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	0a1b      	lsrs	r3, r3, #8
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 80b5 	beq.w	800aa5e <HAL_SPI_IRQHandler+0x1f6>
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80ae 	beq.w	800aa5e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	099b      	lsrs	r3, r3, #6
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d023      	beq.n	800a956 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b03      	cmp	r3, #3
 800a918:	d011      	beq.n	800a93e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a91e:	f043 0204 	orr.w	r2, r3, #4
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	617b      	str	r3, [r7, #20]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	617b      	str	r3, [r7, #20]
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	e00b      	b.n	800a956 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	613b      	str	r3, [r7, #16]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	613b      	str	r3, [r7, #16]
 800a952:	693b      	ldr	r3, [r7, #16]
        return;
 800a954:	e083      	b.n	800aa5e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	095b      	lsrs	r3, r3, #5
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d014      	beq.n	800a98c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a966:	f043 0201 	orr.w	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	0a1b      	lsrs	r3, r3, #8
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00c      	beq.n	800a9b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a99c:	f043 0208 	orr.w	r2, r3, #8
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	60bb      	str	r3, [r7, #8]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	60bb      	str	r3, [r7, #8]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d050      	beq.n	800aa5c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a9c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <HAL_SPI_IRQHandler+0x17e>
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d034      	beq.n	800aa50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f022 0203 	bic.w	r2, r2, #3
 800a9f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d011      	beq.n	800aa22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa02:	4a18      	ldr	r2, [pc, #96]	; (800aa64 <HAL_SPI_IRQHandler+0x1fc>)
 800aa04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fb fa46 	bl	8005e9c <HAL_DMA_Abort_IT>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d016      	beq.n	800aa58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2e:	4a0d      	ldr	r2, [pc, #52]	; (800aa64 <HAL_SPI_IRQHandler+0x1fc>)
 800aa30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fb fa30 	bl	8005e9c <HAL_DMA_Abort_IT>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800aa4e:	e003      	b.n	800aa58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f827 	bl	800aaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aa56:	e000      	b.n	800aa5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800aa58:	bf00      	nop
    return;
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
  }
}
 800aa5e:	3720      	adds	r7, #32
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	0800ac49 	.word	0x0800ac49

0800aa68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aac6:	f7fa ffcb 	bl	8005a60 <HAL_GetTick>
 800aaca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aada:	d02a      	beq.n	800ab32 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f022 0220 	bic.w	r2, r2, #32
 800aaea:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f022 0203 	bic.w	r2, r2, #3
 800aafa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	2164      	movs	r1, #100	; 0x64
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 f98d 	bl	800ae20 <SPI_EndRxTransaction>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff ffba 	bl	800aaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab30:	e002      	b.n	800ab38 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f7fa fc50 	bl	80053d8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab4c:	f7fa ff88 	bl	8005a60 <HAL_GetTick>
 800ab50:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab60:	d030      	beq.n	800abc4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0220 	bic.w	r2, r2, #32
 800ab70:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	2164      	movs	r1, #100	; 0x64
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f9aa 	bl	800aed0 <SPI_EndRxTxTransaction>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab86:	f043 0220 	orr.w	r2, r3, #32
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f022 0203 	bic.w	r2, r2, #3
 800ab9c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f7ff ff71 	bl	800aaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800abc2:	e002      	b.n	800abca <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f7ff ff4f 	bl	800aa68 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f7ff ff4c 	bl	800aa7c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abe4:	bf00      	nop
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7ff ff48 	bl	800aa90 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac14:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f022 0203 	bic.w	r2, r2, #3
 800ac24:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac2a:	f043 0210 	orr.w	r2, r3, #16
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff ff32 	bl	800aaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7ff ff1d 	bl	800aaa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac6a:	bf00      	nop
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	60f8      	str	r0, [r7, #12]
 800ac7a:	60b9      	str	r1, [r7, #8]
 800ac7c:	603b      	str	r3, [r7, #0]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac82:	e04c      	b.n	800ad1e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d048      	beq.n	800ad1e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ac8c:	f7fa fee8 	bl	8005a60 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d902      	bls.n	800aca2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d13d      	bne.n	800ad1e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800acb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acba:	d111      	bne.n	800ace0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acc4:	d004      	beq.n	800acd0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acce:	d107      	bne.n	800ace0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ace8:	d10f      	bne.n	800ad0a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e00f      	b.n	800ad3e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689a      	ldr	r2, [r3, #8]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	4013      	ands	r3, r2
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	bf0c      	ite	eq
 800ad2e:	2301      	moveq	r3, #1
 800ad30:	2300      	movne	r3, #0
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	461a      	mov	r2, r3
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d1a3      	bne.n	800ac84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	60f8      	str	r0, [r7, #12]
 800ad4e:	60b9      	str	r1, [r7, #8]
 800ad50:	607a      	str	r2, [r7, #4]
 800ad52:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ad54:	e057      	b.n	800ae06 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ad5c:	d106      	bne.n	800ad6c <SPI_WaitFifoStateUntilTimeout+0x26>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d103      	bne.n	800ad6c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	330c      	adds	r3, #12
 800ad6a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d048      	beq.n	800ae06 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ad74:	f7fa fe74 	bl	8005a60 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d902      	bls.n	800ad8a <SPI_WaitFifoStateUntilTimeout+0x44>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d13d      	bne.n	800ae06 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ada2:	d111      	bne.n	800adc8 <SPI_WaitFifoStateUntilTimeout+0x82>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adac:	d004      	beq.n	800adb8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb6:	d107      	bne.n	800adc8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add0:	d10f      	bne.n	800adf2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e008      	b.n	800ae18 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4013      	ands	r3, r2
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d19f      	bne.n	800ad56 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae34:	d111      	bne.n	800ae5a <SPI_EndRxTransaction+0x3a>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae3e:	d004      	beq.n	800ae4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae48:	d107      	bne.n	800ae5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae58:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2200      	movs	r2, #0
 800ae62:	2180      	movs	r1, #128	; 0x80
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7ff ff04 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae74:	f043 0220 	orr.w	r2, r3, #32
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e023      	b.n	800aec8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae88:	d11d      	bne.n	800aec6 <SPI_EndRxTransaction+0xa6>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae92:	d004      	beq.n	800ae9e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae9c:	d113      	bne.n	800aec6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff ff4b 	bl	800ad46 <SPI_WaitFifoStateUntilTimeout>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeba:	f043 0220 	orr.w	r2, r3, #32
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800aec2:	2303      	movs	r3, #3
 800aec4:	e000      	b.n	800aec8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af02      	add	r7, sp, #8
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7ff ff2c 	bl	800ad46 <SPI_WaitFifoStateUntilTimeout>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef8:	f043 0220 	orr.w	r2, r3, #32
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e027      	b.n	800af54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2200      	movs	r2, #0
 800af0c:	2180      	movs	r1, #128	; 0x80
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f7ff feaf 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d007      	beq.n	800af2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af1e:	f043 0220 	orr.w	r2, r3, #32
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e014      	b.n	800af54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2200      	movs	r2, #0
 800af32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f7ff ff05 	bl	800ad46 <SPI_WaitFifoStateUntilTimeout>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d007      	beq.n	800af52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af46:	f043 0220 	orr.w	r2, r3, #32
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e000      	b.n	800af54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800af68:	e00c      	b.n	800af84 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	3301      	adds	r3, #1
 800af6e:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800af78:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	d101      	bne.n	800af84 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e007      	b.n	800af94 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1eb      	bne.n	800af6a <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e01d      	b.n	800afee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f815 	bl	800aff6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3304      	adds	r3, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	f000 f986 	bl	800b2f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800affe:	bf00      	nop
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
	...

0800b00c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	689a      	ldr	r2, [r3, #8]
 800b02a:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <HAL_TIM_Base_Start_IT+0x50>)
 800b02c:	4013      	ands	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b06      	cmp	r3, #6
 800b034:	d00b      	beq.n	800b04e <HAL_TIM_Base_Start_IT+0x42>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03c:	d007      	beq.n	800b04e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f042 0201 	orr.w	r2, r2, #1
 800b04c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	00010007 	.word	0x00010007

0800b060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b02      	cmp	r3, #2
 800b074:	d122      	bne.n	800b0bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f003 0302 	and.w	r3, r3, #2
 800b080:	2b02      	cmp	r3, #2
 800b082:	d11b      	bne.n	800b0bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f06f 0202 	mvn.w	r2, #2
 800b08c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f003 0303 	and.w	r3, r3, #3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f905 	bl	800b2b2 <HAL_TIM_IC_CaptureCallback>
 800b0a8:	e005      	b.n	800b0b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f8f7 	bl	800b29e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f908 	bl	800b2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	d122      	bne.n	800b110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d11b      	bne.n	800b110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f06f 0204 	mvn.w	r2, #4
 800b0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f8db 	bl	800b2b2 <HAL_TIM_IC_CaptureCallback>
 800b0fc:	e005      	b.n	800b10a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f8cd 	bl	800b29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f8de 	bl	800b2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b08      	cmp	r3, #8
 800b11c:	d122      	bne.n	800b164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0308 	and.w	r3, r3, #8
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d11b      	bne.n	800b164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0208 	mvn.w	r2, #8
 800b134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2204      	movs	r2, #4
 800b13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f003 0303 	and.w	r3, r3, #3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f8b1 	bl	800b2b2 <HAL_TIM_IC_CaptureCallback>
 800b150:	e005      	b.n	800b15e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f8a3 	bl	800b29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f8b4 	bl	800b2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0310 	and.w	r3, r3, #16
 800b16e:	2b10      	cmp	r3, #16
 800b170:	d122      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0310 	and.w	r3, r3, #16
 800b17c:	2b10      	cmp	r3, #16
 800b17e:	d11b      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0210 	mvn.w	r2, #16
 800b188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2208      	movs	r2, #8
 800b18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f887 	bl	800b2b2 <HAL_TIM_IC_CaptureCallback>
 800b1a4:	e005      	b.n	800b1b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f879 	bl	800b29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f88a 	bl	800b2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d10e      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d107      	bne.n	800b1e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0201 	mvn.w	r2, #1
 800b1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7f9 f8ec 	bl	80043bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ee:	2b80      	cmp	r3, #128	; 0x80
 800b1f0:	d10e      	bne.n	800b210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1fc:	2b80      	cmp	r3, #128	; 0x80
 800b1fe:	d107      	bne.n	800b210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f91a 	bl	800b444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21e:	d10e      	bne.n	800b23e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22a:	2b80      	cmp	r3, #128	; 0x80
 800b22c:	d107      	bne.n	800b23e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f90d 	bl	800b458 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b248:	2b40      	cmp	r3, #64	; 0x40
 800b24a:	d10e      	bne.n	800b26a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b256:	2b40      	cmp	r3, #64	; 0x40
 800b258:	d107      	bne.n	800b26a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f838 	bl	800b2da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b20      	cmp	r3, #32
 800b276:	d10e      	bne.n	800b296 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b20      	cmp	r3, #32
 800b284:	d107      	bne.n	800b296 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f06f 0220 	mvn.w	r2, #32
 800b28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f8cd 	bl	800b430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b296:	bf00      	nop
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b083      	sub	sp, #12
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2e2:	bf00      	nop
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a40      	ldr	r2, [pc, #256]	; (800b404 <TIM_Base_SetConfig+0x114>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d013      	beq.n	800b330 <TIM_Base_SetConfig+0x40>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b30e:	d00f      	beq.n	800b330 <TIM_Base_SetConfig+0x40>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a3d      	ldr	r2, [pc, #244]	; (800b408 <TIM_Base_SetConfig+0x118>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d00b      	beq.n	800b330 <TIM_Base_SetConfig+0x40>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a3c      	ldr	r2, [pc, #240]	; (800b40c <TIM_Base_SetConfig+0x11c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d007      	beq.n	800b330 <TIM_Base_SetConfig+0x40>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a3b      	ldr	r2, [pc, #236]	; (800b410 <TIM_Base_SetConfig+0x120>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d003      	beq.n	800b330 <TIM_Base_SetConfig+0x40>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a3a      	ldr	r2, [pc, #232]	; (800b414 <TIM_Base_SetConfig+0x124>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d108      	bne.n	800b342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2f      	ldr	r2, [pc, #188]	; (800b404 <TIM_Base_SetConfig+0x114>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d02b      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b350:	d027      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a2c      	ldr	r2, [pc, #176]	; (800b408 <TIM_Base_SetConfig+0x118>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d023      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a2b      	ldr	r2, [pc, #172]	; (800b40c <TIM_Base_SetConfig+0x11c>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d01f      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a2a      	ldr	r2, [pc, #168]	; (800b410 <TIM_Base_SetConfig+0x120>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d01b      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a29      	ldr	r2, [pc, #164]	; (800b414 <TIM_Base_SetConfig+0x124>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d017      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a28      	ldr	r2, [pc, #160]	; (800b418 <TIM_Base_SetConfig+0x128>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d013      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a27      	ldr	r2, [pc, #156]	; (800b41c <TIM_Base_SetConfig+0x12c>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d00f      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a26      	ldr	r2, [pc, #152]	; (800b420 <TIM_Base_SetConfig+0x130>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d00b      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a25      	ldr	r2, [pc, #148]	; (800b424 <TIM_Base_SetConfig+0x134>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d007      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a24      	ldr	r2, [pc, #144]	; (800b428 <TIM_Base_SetConfig+0x138>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d003      	beq.n	800b3a2 <TIM_Base_SetConfig+0xb2>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a23      	ldr	r2, [pc, #140]	; (800b42c <TIM_Base_SetConfig+0x13c>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d108      	bne.n	800b3b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a0a      	ldr	r2, [pc, #40]	; (800b404 <TIM_Base_SetConfig+0x114>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d003      	beq.n	800b3e8 <TIM_Base_SetConfig+0xf8>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a0c      	ldr	r2, [pc, #48]	; (800b414 <TIM_Base_SetConfig+0x124>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d103      	bne.n	800b3f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	691a      	ldr	r2, [r3, #16]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	615a      	str	r2, [r3, #20]
}
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40010000 	.word	0x40010000
 800b408:	40000400 	.word	0x40000400
 800b40c:	40000800 	.word	0x40000800
 800b410:	40000c00 	.word	0x40000c00
 800b414:	40010400 	.word	0x40010400
 800b418:	40014000 	.word	0x40014000
 800b41c:	40014400 	.word	0x40014400
 800b420:	40014800 	.word	0x40014800
 800b424:	40001800 	.word	0x40001800
 800b428:	40001c00 	.word	0x40001c00
 800b42c:	40002000 	.word	0x40002000

0800b430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e040      	b.n	800b500 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b482:	2b00      	cmp	r3, #0
 800b484:	d106      	bne.n	800b494 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7f9 f9e0 	bl	8004854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2224      	movs	r2, #36	; 0x24
 800b498:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 0201 	bic.w	r2, r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fb7c 	bl	800bba8 <UART_SetConfig>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d101      	bne.n	800b4ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e022      	b.n	800b500 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fe1a 	bl	800c0fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689a      	ldr	r2, [r3, #8]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f042 0201 	orr.w	r2, r2, #1
 800b4f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fea1 	bl	800c240 <UART_CheckIdleState>
 800b4fe:	4603      	mov	r3, r0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af02      	add	r7, sp, #8
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	603b      	str	r3, [r7, #0]
 800b514:	4613      	mov	r3, r2
 800b516:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51c:	2b20      	cmp	r3, #32
 800b51e:	d17f      	bne.n	800b620 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <HAL_UART_Transmit+0x24>
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e078      	b.n	800b622 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_UART_Transmit+0x36>
 800b53a:	2302      	movs	r3, #2
 800b53c:	e071      	b.n	800b622 <HAL_UART_Transmit+0x11a>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2221      	movs	r2, #33	; 0x21
 800b550:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b552:	f7fa fa85 	bl	8005a60 <HAL_GetTick>
 800b556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	88fa      	ldrh	r2, [r7, #6]
 800b55c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	88fa      	ldrh	r2, [r7, #6]
 800b564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b570:	d108      	bne.n	800b584 <HAL_UART_Transmit+0x7c>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d104      	bne.n	800b584 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	e003      	b.n	800b58c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b588:	2300      	movs	r3, #0
 800b58a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b594:	e02c      	b.n	800b5f0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2200      	movs	r2, #0
 800b59e:	2180      	movs	r1, #128	; 0x80
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 fe7c 	bl	800c29e <UART_WaitOnFlagUntilTimeout>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e038      	b.n	800b622 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	3302      	adds	r3, #2
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	e007      	b.n	800b5de <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	781a      	ldrb	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1cc      	bne.n	800b596 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2200      	movs	r2, #0
 800b604:	2140      	movs	r1, #64	; 0x40
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 fe49 	bl	800c29e <UART_WaitOnFlagUntilTimeout>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e005      	b.n	800b622 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2220      	movs	r2, #32
 800b61a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e000      	b.n	800b622 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b620:	2302      	movs	r3, #2
  }
}
 800b622:	4618      	mov	r0, r3
 800b624:	3720      	adds	r7, #32
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b08a      	sub	sp, #40	; 0x28
 800b62e:	af02      	add	r7, sp, #8
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	60b9      	str	r1, [r7, #8]
 800b634:	603b      	str	r3, [r7, #0]
 800b636:	4613      	mov	r3, r2
 800b638:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b63e:	2b20      	cmp	r3, #32
 800b640:	f040 80ba 	bne.w	800b7b8 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <HAL_UART_Receive+0x26>
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e0b2      	b.n	800b7ba <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d101      	bne.n	800b662 <HAL_UART_Receive+0x38>
 800b65e:	2302      	movs	r3, #2
 800b660:	e0ab      	b.n	800b7ba <HAL_UART_Receive+0x190>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2222      	movs	r2, #34	; 0x22
 800b674:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b676:	f7fa f9f3 	bl	8005a60 <HAL_GetTick>
 800b67a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	88fa      	ldrh	r2, [r7, #6]
 800b688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b694:	d10e      	bne.n	800b6b4 <HAL_UART_Receive+0x8a>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <HAL_UART_Receive+0x80>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b6a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6a8:	e02d      	b.n	800b706 <HAL_UART_Receive+0xdc>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	22ff      	movs	r2, #255	; 0xff
 800b6ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6b2:	e028      	b.n	800b706 <HAL_UART_Receive+0xdc>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10d      	bne.n	800b6d8 <HAL_UART_Receive+0xae>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <HAL_UART_Receive+0xa4>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	22ff      	movs	r2, #255	; 0xff
 800b6c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6cc:	e01b      	b.n	800b706 <HAL_UART_Receive+0xdc>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	227f      	movs	r2, #127	; 0x7f
 800b6d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6d6:	e016      	b.n	800b706 <HAL_UART_Receive+0xdc>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6e0:	d10d      	bne.n	800b6fe <HAL_UART_Receive+0xd4>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d104      	bne.n	800b6f4 <HAL_UART_Receive+0xca>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	227f      	movs	r2, #127	; 0x7f
 800b6ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6f2:	e008      	b.n	800b706 <HAL_UART_Receive+0xdc>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	223f      	movs	r2, #63	; 0x3f
 800b6f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6fc:	e003      	b.n	800b706 <HAL_UART_Receive+0xdc>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b70c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b716:	d108      	bne.n	800b72a <HAL_UART_Receive+0x100>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800b720:	2300      	movs	r3, #0
 800b722:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	61bb      	str	r3, [r7, #24]
 800b728:	e003      	b.n	800b732 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b73a:	e032      	b.n	800b7a2 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2200      	movs	r2, #0
 800b744:	2120      	movs	r1, #32
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f000 fda9 	bl	800c29e <UART_WaitOnFlagUntilTimeout>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e031      	b.n	800b7ba <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10c      	bne.n	800b776 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b762:	b29a      	uxth	r2, r3
 800b764:	8a7b      	ldrh	r3, [r7, #18]
 800b766:	4013      	ands	r3, r2
 800b768:	b29a      	uxth	r2, r3
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	3302      	adds	r3, #2
 800b772:	61bb      	str	r3, [r7, #24]
 800b774:	e00c      	b.n	800b790 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	8a7b      	ldrh	r3, [r7, #18]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4013      	ands	r3, r2
 800b784:	b2da      	uxtb	r2, r3
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	3301      	adds	r3, #1
 800b78e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b796:	b29b      	uxth	r3, r3
 800b798:	3b01      	subs	r3, #1
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1c6      	bne.n	800b73c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e000      	b.n	800b7ba <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800b7b8:	2302      	movs	r3, #2
  }
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	f040 808a 	bne.w	800b8f0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <HAL_UART_Receive_IT+0x24>
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e082      	b.n	800b8f2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d101      	bne.n	800b7fa <HAL_UART_Receive_IT+0x36>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e07b      	b.n	800b8f2 <HAL_UART_Receive_IT+0x12e>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	88fa      	ldrh	r2, [r7, #6]
 800b80c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	88fa      	ldrh	r2, [r7, #6]
 800b814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b826:	d10e      	bne.n	800b846 <HAL_UART_Receive_IT+0x82>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d105      	bne.n	800b83c <HAL_UART_Receive_IT+0x78>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b83a:	e02d      	b.n	800b898 <HAL_UART_Receive_IT+0xd4>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	22ff      	movs	r2, #255	; 0xff
 800b840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b844:	e028      	b.n	800b898 <HAL_UART_Receive_IT+0xd4>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10d      	bne.n	800b86a <HAL_UART_Receive_IT+0xa6>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d104      	bne.n	800b860 <HAL_UART_Receive_IT+0x9c>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	22ff      	movs	r2, #255	; 0xff
 800b85a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b85e:	e01b      	b.n	800b898 <HAL_UART_Receive_IT+0xd4>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	227f      	movs	r2, #127	; 0x7f
 800b864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b868:	e016      	b.n	800b898 <HAL_UART_Receive_IT+0xd4>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b872:	d10d      	bne.n	800b890 <HAL_UART_Receive_IT+0xcc>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d104      	bne.n	800b886 <HAL_UART_Receive_IT+0xc2>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	227f      	movs	r2, #127	; 0x7f
 800b880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b884:	e008      	b.n	800b898 <HAL_UART_Receive_IT+0xd4>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	223f      	movs	r2, #63	; 0x3f
 800b88a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b88e:	e003      	b.n	800b898 <HAL_UART_Receive_IT+0xd4>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2222      	movs	r2, #34	; 0x22
 800b8a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0201 	orr.w	r2, r2, #1
 800b8b2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8bc:	d107      	bne.n	800b8ce <HAL_UART_Receive_IT+0x10a>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d103      	bne.n	800b8ce <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4a0d      	ldr	r2, [pc, #52]	; (800b900 <HAL_UART_Receive_IT+0x13c>)
 800b8ca:	661a      	str	r2, [r3, #96]	; 0x60
 800b8cc:	e002      	b.n	800b8d4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	4a0c      	ldr	r2, [pc, #48]	; (800b904 <HAL_UART_Receive_IT+0x140>)
 800b8d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b8ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	e000      	b.n	800b8f2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800b8f0:	2302      	movs	r3, #2
  }
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	0800c4d9 	.word	0x0800c4d9
 800b904:	0800c433 	.word	0x0800c433

0800b908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b928:	69fa      	ldr	r2, [r7, #28]
 800b92a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b92e:	4013      	ands	r3, r2
 800b930:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d113      	bne.n	800b960 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	f003 0320 	and.w	r3, r3, #32
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00e      	beq.n	800b960 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	f003 0320 	and.w	r3, r3, #32
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d009      	beq.n	800b960 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 8100 	beq.w	800bb56 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
      }
      return;
 800b95e:	e0fa      	b.n	800bb56 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 80d5 	beq.w	800bb12 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d105      	bne.n	800b97e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 80ca 	beq.w	800bb12 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00e      	beq.n	800b9a6 <HAL_UART_IRQHandler+0x9e>
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d009      	beq.n	800b9a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2201      	movs	r2, #1
 800b998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b99e:	f043 0201 	orr.w	r2, r3, #1
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00e      	beq.n	800b9ce <HAL_UART_IRQHandler+0xc6>
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d009      	beq.n	800b9ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c6:	f043 0204 	orr.w	r2, r3, #4
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00e      	beq.n	800b9f6 <HAL_UART_IRQHandler+0xee>
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d009      	beq.n	800b9f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2204      	movs	r2, #4
 800b9e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ee:	f043 0202 	orr.w	r2, r3, #2
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f003 0308 	and.w	r3, r3, #8
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d013      	beq.n	800ba28 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f003 0320 	and.w	r3, r3, #32
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d104      	bne.n	800ba14 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2208      	movs	r2, #8
 800ba1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba20:	f043 0208 	orr.w	r2, r3, #8
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00f      	beq.n	800ba52 <HAL_UART_IRQHandler+0x14a>
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00a      	beq.n	800ba52 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba4a:	f043 0220 	orr.w	r2, r3, #32
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d07f      	beq.n	800bb5a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba5a:	69fb      	ldr	r3, [r7, #28]
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00c      	beq.n	800ba7e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d007      	beq.n	800ba7e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba82:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8e:	2b40      	cmp	r3, #64	; 0x40
 800ba90:	d004      	beq.n	800ba9c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d031      	beq.n	800bb00 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fc79 	bl	800c394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baac:	2b40      	cmp	r3, #64	; 0x40
 800baae:	d123      	bne.n	800baf8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689a      	ldr	r2, [r3, #8]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800babe:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d013      	beq.n	800baf0 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bacc:	4a26      	ldr	r2, [pc, #152]	; (800bb68 <HAL_UART_IRQHandler+0x260>)
 800bace:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fa f9e1 	bl	8005e9c <HAL_DMA_Abort_IT>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d016      	beq.n	800bb0e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800baea:	4610      	mov	r0, r2
 800baec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baee:	e00e      	b.n	800bb0e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f84f 	bl	800bb94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf6:	e00a      	b.n	800bb0e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f84b 	bl	800bb94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bafe:	e006      	b.n	800bb0e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f847 	bl	800bb94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800bb0c:	e025      	b.n	800bb5a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb0e:	bf00      	nop
    return;
 800bb10:	e023      	b.n	800bb5a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00d      	beq.n	800bb38 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d008      	beq.n	800bb38 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d017      	beq.n	800bb5e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
    }
    return;
 800bb36:	e012      	b.n	800bb5e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00e      	beq.n	800bb60 <HAL_UART_IRQHandler+0x258>
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d009      	beq.n	800bb60 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fc57 	bl	800c400 <UART_EndTransmit_IT>
    return;
 800bb52:	bf00      	nop
 800bb54:	e004      	b.n	800bb60 <HAL_UART_IRQHandler+0x258>
      return;
 800bb56:	bf00      	nop
 800bb58:	e002      	b.n	800bb60 <HAL_UART_IRQHandler+0x258>
    return;
 800bb5a:	bf00      	nop
 800bb5c:	e000      	b.n	800bb60 <HAL_UART_IRQHandler+0x258>
    return;
 800bb5e:	bf00      	nop
  }

}
 800bb60:	3720      	adds	r7, #32
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	0800c3d5 	.word	0x0800c3d5

0800bb6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	69db      	ldr	r3, [r3, #28]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	4bb1      	ldr	r3, [pc, #708]	; (800be9c <UART_SetConfig+0x2f4>)
 800bbd8:	4013      	ands	r3, r2
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6812      	ldr	r2, [r2, #0]
 800bbde:	6939      	ldr	r1, [r7, #16]
 800bbe0:	430b      	orrs	r3, r1
 800bbe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68da      	ldr	r2, [r3, #12]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	430a      	orrs	r2, r1
 800bbf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a1b      	ldr	r3, [r3, #32]
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a9f      	ldr	r2, [pc, #636]	; (800bea0 <UART_SetConfig+0x2f8>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d121      	bne.n	800bc6c <UART_SetConfig+0xc4>
 800bc28:	4b9e      	ldr	r3, [pc, #632]	; (800bea4 <UART_SetConfig+0x2fc>)
 800bc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc2e:	f003 0303 	and.w	r3, r3, #3
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d816      	bhi.n	800bc64 <UART_SetConfig+0xbc>
 800bc36:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <UART_SetConfig+0x94>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc59 	.word	0x0800bc59
 800bc44:	0800bc53 	.word	0x0800bc53
 800bc48:	0800bc5f 	.word	0x0800bc5f
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	77fb      	strb	r3, [r7, #31]
 800bc50:	e151      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bc52:	2302      	movs	r3, #2
 800bc54:	77fb      	strb	r3, [r7, #31]
 800bc56:	e14e      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bc58:	2304      	movs	r3, #4
 800bc5a:	77fb      	strb	r3, [r7, #31]
 800bc5c:	e14b      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bc5e:	2308      	movs	r3, #8
 800bc60:	77fb      	strb	r3, [r7, #31]
 800bc62:	e148      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bc64:	2310      	movs	r3, #16
 800bc66:	77fb      	strb	r3, [r7, #31]
 800bc68:	bf00      	nop
 800bc6a:	e144      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a8d      	ldr	r2, [pc, #564]	; (800bea8 <UART_SetConfig+0x300>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d134      	bne.n	800bce0 <UART_SetConfig+0x138>
 800bc76:	4b8b      	ldr	r3, [pc, #556]	; (800bea4 <UART_SetConfig+0x2fc>)
 800bc78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc7c:	f003 030c 	and.w	r3, r3, #12
 800bc80:	2b0c      	cmp	r3, #12
 800bc82:	d829      	bhi.n	800bcd8 <UART_SetConfig+0x130>
 800bc84:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <UART_SetConfig+0xe4>)
 800bc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8a:	bf00      	nop
 800bc8c:	0800bcc1 	.word	0x0800bcc1
 800bc90:	0800bcd9 	.word	0x0800bcd9
 800bc94:	0800bcd9 	.word	0x0800bcd9
 800bc98:	0800bcd9 	.word	0x0800bcd9
 800bc9c:	0800bccd 	.word	0x0800bccd
 800bca0:	0800bcd9 	.word	0x0800bcd9
 800bca4:	0800bcd9 	.word	0x0800bcd9
 800bca8:	0800bcd9 	.word	0x0800bcd9
 800bcac:	0800bcc7 	.word	0x0800bcc7
 800bcb0:	0800bcd9 	.word	0x0800bcd9
 800bcb4:	0800bcd9 	.word	0x0800bcd9
 800bcb8:	0800bcd9 	.word	0x0800bcd9
 800bcbc:	0800bcd3 	.word	0x0800bcd3
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	77fb      	strb	r3, [r7, #31]
 800bcc4:	e117      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	77fb      	strb	r3, [r7, #31]
 800bcca:	e114      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bccc:	2304      	movs	r3, #4
 800bcce:	77fb      	strb	r3, [r7, #31]
 800bcd0:	e111      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bcd2:	2308      	movs	r3, #8
 800bcd4:	77fb      	strb	r3, [r7, #31]
 800bcd6:	e10e      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bcd8:	2310      	movs	r3, #16
 800bcda:	77fb      	strb	r3, [r7, #31]
 800bcdc:	bf00      	nop
 800bcde:	e10a      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a71      	ldr	r2, [pc, #452]	; (800beac <UART_SetConfig+0x304>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d120      	bne.n	800bd2c <UART_SetConfig+0x184>
 800bcea:	4b6e      	ldr	r3, [pc, #440]	; (800bea4 <UART_SetConfig+0x2fc>)
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bcf4:	2b10      	cmp	r3, #16
 800bcf6:	d00f      	beq.n	800bd18 <UART_SetConfig+0x170>
 800bcf8:	2b10      	cmp	r3, #16
 800bcfa:	d802      	bhi.n	800bd02 <UART_SetConfig+0x15a>
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d005      	beq.n	800bd0c <UART_SetConfig+0x164>
 800bd00:	e010      	b.n	800bd24 <UART_SetConfig+0x17c>
 800bd02:	2b20      	cmp	r3, #32
 800bd04:	d005      	beq.n	800bd12 <UART_SetConfig+0x16a>
 800bd06:	2b30      	cmp	r3, #48	; 0x30
 800bd08:	d009      	beq.n	800bd1e <UART_SetConfig+0x176>
 800bd0a:	e00b      	b.n	800bd24 <UART_SetConfig+0x17c>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	77fb      	strb	r3, [r7, #31]
 800bd10:	e0f1      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd12:	2302      	movs	r3, #2
 800bd14:	77fb      	strb	r3, [r7, #31]
 800bd16:	e0ee      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	77fb      	strb	r3, [r7, #31]
 800bd1c:	e0eb      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd1e:	2308      	movs	r3, #8
 800bd20:	77fb      	strb	r3, [r7, #31]
 800bd22:	e0e8      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd24:	2310      	movs	r3, #16
 800bd26:	77fb      	strb	r3, [r7, #31]
 800bd28:	bf00      	nop
 800bd2a:	e0e4      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a5f      	ldr	r2, [pc, #380]	; (800beb0 <UART_SetConfig+0x308>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d120      	bne.n	800bd78 <UART_SetConfig+0x1d0>
 800bd36:	4b5b      	ldr	r3, [pc, #364]	; (800bea4 <UART_SetConfig+0x2fc>)
 800bd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bd40:	2b40      	cmp	r3, #64	; 0x40
 800bd42:	d00f      	beq.n	800bd64 <UART_SetConfig+0x1bc>
 800bd44:	2b40      	cmp	r3, #64	; 0x40
 800bd46:	d802      	bhi.n	800bd4e <UART_SetConfig+0x1a6>
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d005      	beq.n	800bd58 <UART_SetConfig+0x1b0>
 800bd4c:	e010      	b.n	800bd70 <UART_SetConfig+0x1c8>
 800bd4e:	2b80      	cmp	r3, #128	; 0x80
 800bd50:	d005      	beq.n	800bd5e <UART_SetConfig+0x1b6>
 800bd52:	2bc0      	cmp	r3, #192	; 0xc0
 800bd54:	d009      	beq.n	800bd6a <UART_SetConfig+0x1c2>
 800bd56:	e00b      	b.n	800bd70 <UART_SetConfig+0x1c8>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	77fb      	strb	r3, [r7, #31]
 800bd5c:	e0cb      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd5e:	2302      	movs	r3, #2
 800bd60:	77fb      	strb	r3, [r7, #31]
 800bd62:	e0c8      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd64:	2304      	movs	r3, #4
 800bd66:	77fb      	strb	r3, [r7, #31]
 800bd68:	e0c5      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd6a:	2308      	movs	r3, #8
 800bd6c:	77fb      	strb	r3, [r7, #31]
 800bd6e:	e0c2      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd70:	2310      	movs	r3, #16
 800bd72:	77fb      	strb	r3, [r7, #31]
 800bd74:	bf00      	nop
 800bd76:	e0be      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a4d      	ldr	r2, [pc, #308]	; (800beb4 <UART_SetConfig+0x30c>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d124      	bne.n	800bdcc <UART_SetConfig+0x224>
 800bd82:	4b48      	ldr	r3, [pc, #288]	; (800bea4 <UART_SetConfig+0x2fc>)
 800bd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd90:	d012      	beq.n	800bdb8 <UART_SetConfig+0x210>
 800bd92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd96:	d802      	bhi.n	800bd9e <UART_SetConfig+0x1f6>
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <UART_SetConfig+0x204>
 800bd9c:	e012      	b.n	800bdc4 <UART_SetConfig+0x21c>
 800bd9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bda2:	d006      	beq.n	800bdb2 <UART_SetConfig+0x20a>
 800bda4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bda8:	d009      	beq.n	800bdbe <UART_SetConfig+0x216>
 800bdaa:	e00b      	b.n	800bdc4 <UART_SetConfig+0x21c>
 800bdac:	2300      	movs	r3, #0
 800bdae:	77fb      	strb	r3, [r7, #31]
 800bdb0:	e0a1      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	77fb      	strb	r3, [r7, #31]
 800bdb6:	e09e      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bdb8:	2304      	movs	r3, #4
 800bdba:	77fb      	strb	r3, [r7, #31]
 800bdbc:	e09b      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	77fb      	strb	r3, [r7, #31]
 800bdc2:	e098      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	bf00      	nop
 800bdca:	e094      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a39      	ldr	r2, [pc, #228]	; (800beb8 <UART_SetConfig+0x310>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d124      	bne.n	800be20 <UART_SetConfig+0x278>
 800bdd6:	4b33      	ldr	r3, [pc, #204]	; (800bea4 <UART_SetConfig+0x2fc>)
 800bdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bde0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde4:	d012      	beq.n	800be0c <UART_SetConfig+0x264>
 800bde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdea:	d802      	bhi.n	800bdf2 <UART_SetConfig+0x24a>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d007      	beq.n	800be00 <UART_SetConfig+0x258>
 800bdf0:	e012      	b.n	800be18 <UART_SetConfig+0x270>
 800bdf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdf6:	d006      	beq.n	800be06 <UART_SetConfig+0x25e>
 800bdf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bdfc:	d009      	beq.n	800be12 <UART_SetConfig+0x26a>
 800bdfe:	e00b      	b.n	800be18 <UART_SetConfig+0x270>
 800be00:	2301      	movs	r3, #1
 800be02:	77fb      	strb	r3, [r7, #31]
 800be04:	e077      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be06:	2302      	movs	r3, #2
 800be08:	77fb      	strb	r3, [r7, #31]
 800be0a:	e074      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be0c:	2304      	movs	r3, #4
 800be0e:	77fb      	strb	r3, [r7, #31]
 800be10:	e071      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be12:	2308      	movs	r3, #8
 800be14:	77fb      	strb	r3, [r7, #31]
 800be16:	e06e      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be18:	2310      	movs	r3, #16
 800be1a:	77fb      	strb	r3, [r7, #31]
 800be1c:	bf00      	nop
 800be1e:	e06a      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a25      	ldr	r2, [pc, #148]	; (800bebc <UART_SetConfig+0x314>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d124      	bne.n	800be74 <UART_SetConfig+0x2cc>
 800be2a:	4b1e      	ldr	r3, [pc, #120]	; (800bea4 <UART_SetConfig+0x2fc>)
 800be2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800be34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be38:	d012      	beq.n	800be60 <UART_SetConfig+0x2b8>
 800be3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be3e:	d802      	bhi.n	800be46 <UART_SetConfig+0x29e>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d007      	beq.n	800be54 <UART_SetConfig+0x2ac>
 800be44:	e012      	b.n	800be6c <UART_SetConfig+0x2c4>
 800be46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be4a:	d006      	beq.n	800be5a <UART_SetConfig+0x2b2>
 800be4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be50:	d009      	beq.n	800be66 <UART_SetConfig+0x2be>
 800be52:	e00b      	b.n	800be6c <UART_SetConfig+0x2c4>
 800be54:	2300      	movs	r3, #0
 800be56:	77fb      	strb	r3, [r7, #31]
 800be58:	e04d      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be5a:	2302      	movs	r3, #2
 800be5c:	77fb      	strb	r3, [r7, #31]
 800be5e:	e04a      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be60:	2304      	movs	r3, #4
 800be62:	77fb      	strb	r3, [r7, #31]
 800be64:	e047      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be66:	2308      	movs	r3, #8
 800be68:	77fb      	strb	r3, [r7, #31]
 800be6a:	e044      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be6c:	2310      	movs	r3, #16
 800be6e:	77fb      	strb	r3, [r7, #31]
 800be70:	bf00      	nop
 800be72:	e040      	b.n	800bef6 <UART_SetConfig+0x34e>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a11      	ldr	r2, [pc, #68]	; (800bec0 <UART_SetConfig+0x318>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d139      	bne.n	800bef2 <UART_SetConfig+0x34a>
 800be7e:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <UART_SetConfig+0x2fc>)
 800be80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be8c:	d027      	beq.n	800bede <UART_SetConfig+0x336>
 800be8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be92:	d817      	bhi.n	800bec4 <UART_SetConfig+0x31c>
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01c      	beq.n	800bed2 <UART_SetConfig+0x32a>
 800be98:	e027      	b.n	800beea <UART_SetConfig+0x342>
 800be9a:	bf00      	nop
 800be9c:	efff69f3 	.word	0xefff69f3
 800bea0:	40011000 	.word	0x40011000
 800bea4:	40023800 	.word	0x40023800
 800bea8:	40004400 	.word	0x40004400
 800beac:	40004800 	.word	0x40004800
 800beb0:	40004c00 	.word	0x40004c00
 800beb4:	40005000 	.word	0x40005000
 800beb8:	40011400 	.word	0x40011400
 800bebc:	40007800 	.word	0x40007800
 800bec0:	40007c00 	.word	0x40007c00
 800bec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bec8:	d006      	beq.n	800bed8 <UART_SetConfig+0x330>
 800beca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bece:	d009      	beq.n	800bee4 <UART_SetConfig+0x33c>
 800bed0:	e00b      	b.n	800beea <UART_SetConfig+0x342>
 800bed2:	2300      	movs	r3, #0
 800bed4:	77fb      	strb	r3, [r7, #31]
 800bed6:	e00e      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bed8:	2302      	movs	r3, #2
 800beda:	77fb      	strb	r3, [r7, #31]
 800bedc:	e00b      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bede:	2304      	movs	r3, #4
 800bee0:	77fb      	strb	r3, [r7, #31]
 800bee2:	e008      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bee4:	2308      	movs	r3, #8
 800bee6:	77fb      	strb	r3, [r7, #31]
 800bee8:	e005      	b.n	800bef6 <UART_SetConfig+0x34e>
 800beea:	2310      	movs	r3, #16
 800beec:	77fb      	strb	r3, [r7, #31]
 800beee:	bf00      	nop
 800bef0:	e001      	b.n	800bef6 <UART_SetConfig+0x34e>
 800bef2:	2310      	movs	r3, #16
 800bef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800befe:	d17f      	bne.n	800c000 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bf00:	7ffb      	ldrb	r3, [r7, #31]
 800bf02:	2b08      	cmp	r3, #8
 800bf04:	d85c      	bhi.n	800bfc0 <UART_SetConfig+0x418>
 800bf06:	a201      	add	r2, pc, #4	; (adr r2, 800bf0c <UART_SetConfig+0x364>)
 800bf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0c:	0800bf31 	.word	0x0800bf31
 800bf10:	0800bf51 	.word	0x0800bf51
 800bf14:	0800bf71 	.word	0x0800bf71
 800bf18:	0800bfc1 	.word	0x0800bfc1
 800bf1c:	0800bf89 	.word	0x0800bf89
 800bf20:	0800bfc1 	.word	0x0800bfc1
 800bf24:	0800bfc1 	.word	0x0800bfc1
 800bf28:	0800bfc1 	.word	0x0800bfc1
 800bf2c:	0800bfa9 	.word	0x0800bfa9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf30:	f7fc fa5a 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800bf34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	005a      	lsls	r2, r3, #1
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	085b      	lsrs	r3, r3, #1
 800bf40:	441a      	add	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	61bb      	str	r3, [r7, #24]
        break;
 800bf4e:	e03a      	b.n	800bfc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf50:	f7fc fa5e 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800bf54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	005a      	lsls	r2, r3, #1
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	441a      	add	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	61bb      	str	r3, [r7, #24]
        break;
 800bf6e:	e02a      	b.n	800bfc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	085a      	lsrs	r2, r3, #1
 800bf76:	4b5f      	ldr	r3, [pc, #380]	; (800c0f4 <UART_SetConfig+0x54c>)
 800bf78:	4413      	add	r3, r2
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6852      	ldr	r2, [r2, #4]
 800bf7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	61bb      	str	r3, [r7, #24]
        break;
 800bf86:	e01e      	b.n	800bfc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf88:	f7fc f94a 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 800bf8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	005a      	lsls	r2, r3, #1
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	085b      	lsrs	r3, r3, #1
 800bf98:	441a      	add	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	61bb      	str	r3, [r7, #24]
        break;
 800bfa6:	e00e      	b.n	800bfc6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	085b      	lsrs	r3, r3, #1
 800bfae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	61bb      	str	r3, [r7, #24]
        break;
 800bfbe:	e002      	b.n	800bfc6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	75fb      	strb	r3, [r7, #23]
        break;
 800bfc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b0f      	cmp	r3, #15
 800bfca:	d916      	bls.n	800bffa <UART_SetConfig+0x452>
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfd2:	d212      	bcs.n	800bffa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	f023 030f 	bic.w	r3, r3, #15
 800bfdc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	085b      	lsrs	r3, r3, #1
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	897b      	ldrh	r3, [r7, #10]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	897a      	ldrh	r2, [r7, #10]
 800bff6:	60da      	str	r2, [r3, #12]
 800bff8:	e070      	b.n	800c0dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	75fb      	strb	r3, [r7, #23]
 800bffe:	e06d      	b.n	800c0dc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800c000:	7ffb      	ldrb	r3, [r7, #31]
 800c002:	2b08      	cmp	r3, #8
 800c004:	d859      	bhi.n	800c0ba <UART_SetConfig+0x512>
 800c006:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <UART_SetConfig+0x464>)
 800c008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00c:	0800c031 	.word	0x0800c031
 800c010:	0800c04f 	.word	0x0800c04f
 800c014:	0800c06d 	.word	0x0800c06d
 800c018:	0800c0bb 	.word	0x0800c0bb
 800c01c:	0800c085 	.word	0x0800c085
 800c020:	0800c0bb 	.word	0x0800c0bb
 800c024:	0800c0bb 	.word	0x0800c0bb
 800c028:	0800c0bb 	.word	0x0800c0bb
 800c02c:	0800c0a3 	.word	0x0800c0a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c030:	f7fc f9da 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800c034:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	085a      	lsrs	r2, r3, #1
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	441a      	add	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	fbb2 f3f3 	udiv	r3, r2, r3
 800c048:	b29b      	uxth	r3, r3
 800c04a:	61bb      	str	r3, [r7, #24]
        break;
 800c04c:	e038      	b.n	800c0c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c04e:	f7fc f9df 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800c052:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	085a      	lsrs	r2, r3, #1
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	441a      	add	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	fbb2 f3f3 	udiv	r3, r2, r3
 800c066:	b29b      	uxth	r3, r3
 800c068:	61bb      	str	r3, [r7, #24]
        break;
 800c06a:	e029      	b.n	800c0c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	085a      	lsrs	r2, r3, #1
 800c072:	4b21      	ldr	r3, [pc, #132]	; (800c0f8 <UART_SetConfig+0x550>)
 800c074:	4413      	add	r3, r2
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	6852      	ldr	r2, [r2, #4]
 800c07a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c07e:	b29b      	uxth	r3, r3
 800c080:	61bb      	str	r3, [r7, #24]
        break;
 800c082:	e01d      	b.n	800c0c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c084:	f7fc f8cc 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 800c088:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	085a      	lsrs	r2, r3, #1
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	441a      	add	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	fbb2 f3f3 	udiv	r3, r2, r3
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	61bb      	str	r3, [r7, #24]
        break;
 800c0a0:	e00e      	b.n	800c0c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	085b      	lsrs	r3, r3, #1
 800c0a8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	61bb      	str	r3, [r7, #24]
        break;
 800c0b8:	e002      	b.n	800c0c0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	75fb      	strb	r3, [r7, #23]
        break;
 800c0be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	2b0f      	cmp	r3, #15
 800c0c4:	d908      	bls.n	800c0d8 <UART_SetConfig+0x530>
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0cc:	d204      	bcs.n	800c0d8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	60da      	str	r2, [r3, #12]
 800c0d6:	e001      	b.n	800c0dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3720      	adds	r7, #32
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	01e84800 	.word	0x01e84800
 800c0f8:	00f42400 	.word	0x00f42400

0800c0fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00a      	beq.n	800c126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	430a      	orrs	r2, r1
 800c124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	f003 0302 	and.w	r3, r3, #2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00a      	beq.n	800c148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00a      	beq.n	800c16a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	430a      	orrs	r2, r1
 800c168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16e:	f003 0308 	and.w	r3, r3, #8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	430a      	orrs	r2, r1
 800c18a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	f003 0310 	and.w	r3, r3, #16
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00a      	beq.n	800c1ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b2:	f003 0320 	and.w	r3, r3, #32
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00a      	beq.n	800c1d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d01a      	beq.n	800c212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1fa:	d10a      	bne.n	800c212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	430a      	orrs	r2, r1
 800c210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	605a      	str	r2, [r3, #4]
  }
}
 800c234:	bf00      	nop
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af02      	add	r7, sp, #8
 800c246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c24e:	f7f9 fc07 	bl	8005a60 <HAL_GetTick>
 800c252:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0308 	and.w	r3, r3, #8
 800c25e:	2b08      	cmp	r3, #8
 800c260:	d10e      	bne.n	800c280 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c262:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f814 	bl	800c29e <UART_WaitOnFlagUntilTimeout>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e00a      	b.n	800c296 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2220      	movs	r2, #32
 800c284:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2220      	movs	r2, #32
 800c28a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	603b      	str	r3, [r7, #0]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2ae:	e05d      	b.n	800c36c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b6:	d059      	beq.n	800c36c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2b8:	f7f9 fbd2 	bl	8005a60 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d302      	bcc.n	800c2ce <UART_WaitOnFlagUntilTimeout+0x30>
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d11b      	bne.n	800c306 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 0201 	bic.w	r2, r2, #1
 800c2ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2220      	movs	r2, #32
 800c2f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e042      	b.n	800c38c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d02b      	beq.n	800c36c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	69db      	ldr	r3, [r3, #28]
 800c31a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c31e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c322:	d123      	bne.n	800c36c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c32c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c33c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f022 0201 	bic.w	r2, r2, #1
 800c34c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2220      	movs	r2, #32
 800c352:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2220      	movs	r2, #32
 800c358:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2220      	movs	r2, #32
 800c35e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c368:	2303      	movs	r3, #3
 800c36a:	e00f      	b.n	800c38c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69da      	ldr	r2, [r3, #28]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	4013      	ands	r3, r2
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	429a      	cmp	r2, r3
 800c37a:	bf0c      	ite	eq
 800c37c:	2301      	moveq	r3, #1
 800c37e:	2300      	movne	r3, #0
 800c380:	b2db      	uxtb	r3, r3
 800c382:	461a      	mov	r2, r3
 800c384:	79fb      	ldrb	r3, [r7, #7]
 800c386:	429a      	cmp	r2, r3
 800c388:	d092      	beq.n	800c2b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c3aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689a      	ldr	r2, [r3, #8]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0201 	bic.w	r2, r2, #1
 800c3ba:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7ff fbce 	bl	800bb94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3f8:	bf00      	nop
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c416:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2220      	movs	r2, #32
 800c41c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff fba1 	bl	800bb6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c42a:	bf00      	nop
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c440:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c446:	2b22      	cmp	r3, #34	; 0x22
 800c448:	d13a      	bne.n	800c4c0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c452:	89bb      	ldrh	r3, [r7, #12]
 800c454:	b2d9      	uxtb	r1, r3
 800c456:	89fb      	ldrh	r3, [r7, #14]
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45e:	400a      	ands	r2, r1
 800c460:	b2d2      	uxtb	r2, r2
 800c462:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c474:	b29b      	uxth	r3, r3
 800c476:	3b01      	subs	r3, #1
 800c478:	b29a      	uxth	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c486:	b29b      	uxth	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d121      	bne.n	800c4d0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c49a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	689a      	ldr	r2, [r3, #8]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f022 0201 	bic.w	r2, r2, #1
 800c4aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff fb61 	bl	800bb80 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4be:	e007      	b.n	800c4d0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	699a      	ldr	r2, [r3, #24]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f042 0208 	orr.w	r2, r2, #8
 800c4ce:	619a      	str	r2, [r3, #24]
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4ec:	2b22      	cmp	r3, #34	; 0x22
 800c4ee:	d13a      	bne.n	800c566 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c4fe:	89ba      	ldrh	r2, [r7, #12]
 800c500:	89fb      	ldrh	r3, [r7, #14]
 800c502:	4013      	ands	r3, r2
 800c504:	b29a      	uxth	r2, r3
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c50e:	1c9a      	adds	r2, r3, #2
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	3b01      	subs	r3, #1
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d121      	bne.n	800c576 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c540:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	689a      	ldr	r2, [r3, #8]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 0201 	bic.w	r2, r2, #1
 800c550:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2220      	movs	r2, #32
 800c556:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff fb0e 	bl	800bb80 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c564:	e007      	b.n	800c576 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	699a      	ldr	r2, [r3, #24]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f042 0208 	orr.w	r2, r2, #8
 800c574:	619a      	str	r2, [r3, #24]
}
 800c576:	bf00      	nop
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c580:	b084      	sub	sp, #16
 800c582:	b480      	push	{r7}
 800c584:	b085      	sub	sp, #20
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	f107 001c 	add.w	r0, r7, #28
 800c58e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c596:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c598:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c59a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c59e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c5a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c5a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c5aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	4b07      	ldr	r3, [pc, #28]	; (800c5d4 <SDMMC_Init+0x54>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	b004      	add	sp, #16
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	ffff8100 	.word	0xffff8100

0800c5d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c5f2:	b480      	push	{r7}
 800c5f4:	b083      	sub	sp, #12
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2203      	movs	r2, #3
 800c620:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c622:	2002      	movs	r0, #2
 800c624:	f7f9 fa28 	bl	8005a78 <HAL_Delay>
  
  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0303 	and.w	r3, r3, #3
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
	...

0800c650 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c66e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c674:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c67a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	4b06      	ldr	r3, [pc, #24]	; (800c6a0 <SDMMC_SendCommand+0x50>)
 800c688:	4013      	ands	r3, r2
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	fffff000 	.word	0xfffff000

0800c6a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	b2db      	uxtb	r3, r3
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3314      	adds	r3, #20
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
}  
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c70a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c710:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c716:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c722:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	431a      	orrs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c72e:	2300      	movs	r3, #0

}
 800c730:	4618      	mov	r0, r3
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c74a:	2310      	movs	r3, #16
 800c74c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c74e:	2340      	movs	r3, #64	; 0x40
 800c750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c75a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c75c:	f107 0308 	add.w	r3, r7, #8
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7ff ff74 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c768:	f241 3288 	movw	r2, #5000	; 0x1388
 800c76c:	2110      	movs	r1, #16
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fa42 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c776:	69fb      	ldr	r3, [r7, #28]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3720      	adds	r7, #32
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c78e:	2311      	movs	r3, #17
 800c790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c792:	2340      	movs	r3, #64	; 0x40
 800c794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c796:	2300      	movs	r3, #0
 800c798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c79e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7a0:	f107 0308 	add.w	r3, r7, #8
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff ff52 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b0:	2111      	movs	r1, #17
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fa20 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c7b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c7d2:	2312      	movs	r3, #18
 800c7d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7d6:	2340      	movs	r3, #64	; 0x40
 800c7d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7e4:	f107 0308 	add.w	r3, r7, #8
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ff30 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f4:	2112      	movs	r1, #18
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f9fe 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c7fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7fe:	69fb      	ldr	r3, [r7, #28]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c816:	2318      	movs	r3, #24
 800c818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c81a:	2340      	movs	r3, #64	; 0x40
 800c81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c81e:	2300      	movs	r3, #0
 800c820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c826:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff ff0e 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c834:	f241 3288 	movw	r2, #5000	; 0x1388
 800c838:	2118      	movs	r1, #24
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f9dc 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c842:	69fb      	ldr	r3, [r7, #28]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3720      	adds	r7, #32
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b088      	sub	sp, #32
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c85a:	2319      	movs	r3, #25
 800c85c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c85e:	2340      	movs	r3, #64	; 0x40
 800c860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c862:	2300      	movs	r3, #0
 800c864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c86a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c86c:	f107 0308 	add.w	r3, r7, #8
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff feec 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c878:	f241 3288 	movw	r2, #5000	; 0x1388
 800c87c:	2119      	movs	r1, #25
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f9ba 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c886:	69fb      	ldr	r3, [r7, #28]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3720      	adds	r7, #32
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c89c:	230c      	movs	r3, #12
 800c89e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8a0:	2340      	movs	r3, #64	; 0x40
 800c8a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8ae:	f107 0308 	add.w	r3, r7, #8
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff fecb 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c8ba:	4a05      	ldr	r2, [pc, #20]	; (800c8d0 <SDMMC_CmdStopTransfer+0x40>)
 800c8bc:	210c      	movs	r1, #12
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f99a 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c8c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3720      	adds	r7, #32
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	05f5e100 	.word	0x05f5e100

0800c8d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08a      	sub	sp, #40	; 0x28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c8e4:	2307      	movs	r3, #7
 800c8e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8e8:	2340      	movs	r3, #64	; 0x40
 800c8ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8f6:	f107 0310 	add.w	r3, r7, #16
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff fea7 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c902:	f241 3288 	movw	r2, #5000	; 0x1388
 800c906:	2107      	movs	r1, #7
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 f975 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c90e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c912:	4618      	mov	r0, r3
 800c914:	3728      	adds	r7, #40	; 0x28
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b088      	sub	sp, #32
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c92a:	2300      	movs	r3, #0
 800c92c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c92e:	2300      	movs	r3, #0
 800c930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c938:	f107 0308 	add.w	r3, r7, #8
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff fe86 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f92f 	bl	800cba8 <SDMMC_GetCmdError>
 800c94a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c94c:	69fb      	ldr	r3, [r7, #28]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b088      	sub	sp, #32
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c95e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c964:	2308      	movs	r3, #8
 800c966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c968:	2340      	movs	r3, #64	; 0x40
 800c96a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c96c:	2300      	movs	r3, #0
 800c96e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c976:	f107 0308 	add.w	r3, r7, #8
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7ff fe67 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fb18 	bl	800cfb8 <SDMMC_GetCmdResp7>
 800c988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c98a:	69fb      	ldr	r3, [r7, #28]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3720      	adds	r7, #32
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9a2:	2337      	movs	r3, #55	; 0x37
 800c9a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9a6:	2340      	movs	r3, #64	; 0x40
 800c9a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9b4:	f107 0308 	add.w	r3, r7, #8
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff fe48 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c9c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9c4:	2137      	movs	r1, #55	; 0x37
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f916 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800c9cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b088      	sub	sp, #32
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <SDMMC_CmdAppOperCommand+0x44>)
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c9ea:	2329      	movs	r3, #41	; 0x29
 800c9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ee:	2340      	movs	r3, #64	; 0x40
 800c9f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9fc:	f107 0308 	add.w	r3, r7, #8
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff fe24 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fa27 	bl	800ce5c <SDMMC_GetCmdResp3>
 800ca0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca10:	69fb      	ldr	r3, [r7, #28]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3720      	adds	r7, #32
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	80100000 	.word	0x80100000

0800ca20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca2e:	2306      	movs	r3, #6
 800ca30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca32:	2340      	movs	r3, #64	; 0x40
 800ca34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff fe02 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ca4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca50:	2106      	movs	r1, #6
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f8d0 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800ca58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca5a:	69fb      	ldr	r3, [r7, #28]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca70:	2333      	movs	r3, #51	; 0x33
 800ca72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca74:	2340      	movs	r3, #64	; 0x40
 800ca76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fde1 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ca8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca92:	2133      	movs	r1, #51	; 0x33
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f8af 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800ca9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca9c:	69fb      	ldr	r3, [r7, #28]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3720      	adds	r7, #32
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b088      	sub	sp, #32
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800caae:	2300      	movs	r3, #0
 800cab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cab2:	2302      	movs	r3, #2
 800cab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cab6:	23c0      	movs	r3, #192	; 0xc0
 800cab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caba:	2300      	movs	r3, #0
 800cabc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cabe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cac4:	f107 0308 	add.w	r3, r7, #8
 800cac8:	4619      	mov	r1, r3
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff fdc0 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f97d 	bl	800cdd0 <SDMMC_GetCmdResp2>
 800cad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cad8:	69fb      	ldr	r3, [r7, #28]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3720      	adds	r7, #32
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b088      	sub	sp, #32
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800caf0:	2309      	movs	r3, #9
 800caf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800caf4:	23c0      	movs	r3, #192	; 0xc0
 800caf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caf8:	2300      	movs	r3, #0
 800cafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb02:	f107 0308 	add.w	r3, r7, #8
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7ff fda1 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f95e 	bl	800cdd0 <SDMMC_GetCmdResp2>
 800cb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb16:	69fb      	ldr	r3, [r7, #28]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3720      	adds	r7, #32
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb32:	2340      	movs	r3, #64	; 0x40
 800cb34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb40:	f107 0308 	add.w	r3, r7, #8
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fd82 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	2103      	movs	r1, #3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f9bd 	bl	800ced0 <SDMMC_GetCmdResp6>
 800cb56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb58:	69fb      	ldr	r3, [r7, #28]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3720      	adds	r7, #32
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b088      	sub	sp, #32
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cb70:	230d      	movs	r3, #13
 800cb72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb74:	2340      	movs	r3, #64	; 0x40
 800cb76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb82:	f107 0308 	add.w	r3, r7, #8
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7ff fd61 	bl	800c650 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cb8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb92:	210d      	movs	r1, #13
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f82f 	bl	800cbf8 <SDMMC_GetCmdResp1>
 800cb9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb9c:	69fb      	ldr	r3, [r7, #28]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cba8:	b490      	push	{r4, r7}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbb0:	4b0f      	ldr	r3, [pc, #60]	; (800cbf0 <SDMMC_GetCmdError+0x48>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a0f      	ldr	r2, [pc, #60]	; (800cbf4 <SDMMC_GetCmdError+0x4c>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	0a5b      	lsrs	r3, r3, #9
 800cbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cbc4:	4623      	mov	r3, r4
 800cbc6:	1e5c      	subs	r4, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbd0:	e009      	b.n	800cbe6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0f2      	beq.n	800cbc4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	22c5      	movs	r2, #197	; 0xc5
 800cbe2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bc90      	pop	{r4, r7}
 800cbee:	4770      	bx	lr
 800cbf0:	20000000 	.word	0x20000000
 800cbf4:	10624dd3 	.word	0x10624dd3

0800cbf8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cbf8:	b590      	push	{r4, r7, lr}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	460b      	mov	r3, r1
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cc06:	4b6f      	ldr	r3, [pc, #444]	; (800cdc4 <SDMMC_GetCmdResp1+0x1cc>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a6f      	ldr	r2, [pc, #444]	; (800cdc8 <SDMMC_GetCmdResp1+0x1d0>)
 800cc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc10:	0a5b      	lsrs	r3, r3, #9
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc18:	4623      	mov	r3, r4
 800cc1a:	1e5c      	subs	r4, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc24:	e0c9      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0f0      	beq.n	800cc18 <SDMMC_GetCmdResp1+0x20>
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1eb      	bne.n	800cc18 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2204      	movs	r2, #4
 800cc50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc52:	2304      	movs	r3, #4
 800cc54:	e0b1      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e0a6      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	22c5      	movs	r2, #197	; 0xc5
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f7ff fd16 	bl	800c6a4 <SDMMC_GetCommandResponse>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	7afb      	ldrb	r3, [r7, #11]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d001      	beq.n	800cc86 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e099      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cc86:	2100      	movs	r1, #0
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f7ff fd18 	bl	800c6be <SDMMC_GetResponse>
 800cc8e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	4b4e      	ldr	r3, [pc, #312]	; (800cdcc <SDMMC_GetCmdResp1+0x1d4>)
 800cc94:	4013      	ands	r3, r2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e08d      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	da02      	bge.n	800ccaa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cca8:	e087      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccb4:	2340      	movs	r3, #64	; 0x40
 800ccb6:	e080      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccc2:	2380      	movs	r3, #128	; 0x80
 800ccc4:	e079      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ccd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccd4:	e071      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cce4:	e069      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ccf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf4:	e061      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd04:	e059      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd14:	e051      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd24:	e049      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd34:	e041      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd44:	e039      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd54:	e031      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd64:	e029      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cd74:	e021      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd84:	e019      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cd90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd94:	e011      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cda0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cda4:	e009      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f003 0308 	and.w	r3, r3, #8
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cdb4:	e001      	b.n	800cdba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd90      	pop	{r4, r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	20000000 	.word	0x20000000
 800cdc8:	10624dd3 	.word	0x10624dd3
 800cdcc:	fdffe008 	.word	0xfdffe008

0800cdd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cdd0:	b490      	push	{r4, r7}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdd8:	4b1e      	ldr	r3, [pc, #120]	; (800ce54 <SDMMC_GetCmdResp2+0x84>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a1e      	ldr	r2, [pc, #120]	; (800ce58 <SDMMC_GetCmdResp2+0x88>)
 800cdde:	fba2 2303 	umull	r2, r3, r2, r3
 800cde2:	0a5b      	lsrs	r3, r3, #9
 800cde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cdec:	4623      	mov	r3, r4
 800cdee:	1e5c      	subs	r4, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d102      	bne.n	800cdfa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdf8:	e026      	b.n	800ce48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d0f0      	beq.n	800cdec <SDMMC_GetCmdResp2+0x1c>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1eb      	bne.n	800cdec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce18:	f003 0304 	and.w	r3, r3, #4
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2204      	movs	r2, #4
 800ce24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce26:	2304      	movs	r3, #4
 800ce28:	e00e      	b.n	800ce48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d004      	beq.n	800ce40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e003      	b.n	800ce48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	22c5      	movs	r2, #197	; 0xc5
 800ce44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bc90      	pop	{r4, r7}
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	20000000 	.word	0x20000000
 800ce58:	10624dd3 	.word	0x10624dd3

0800ce5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ce5c:	b490      	push	{r4, r7}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce64:	4b18      	ldr	r3, [pc, #96]	; (800cec8 <SDMMC_GetCmdResp3+0x6c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a18      	ldr	r2, [pc, #96]	; (800cecc <SDMMC_GetCmdResp3+0x70>)
 800ce6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6e:	0a5b      	lsrs	r3, r3, #9
 800ce70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce78:	4623      	mov	r3, r4
 800ce7a:	1e5c      	subs	r4, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d102      	bne.n	800ce86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce84:	e01b      	b.n	800cebe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0f0      	beq.n	800ce78 <SDMMC_GetCmdResp3+0x1c>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1eb      	bne.n	800ce78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2204      	movs	r2, #4
 800ceb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceb2:	2304      	movs	r3, #4
 800ceb4:	e003      	b.n	800cebe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	22c5      	movs	r2, #197	; 0xc5
 800ceba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bc90      	pop	{r4, r7}
 800cec6:	4770      	bx	lr
 800cec8:	20000000 	.word	0x20000000
 800cecc:	10624dd3 	.word	0x10624dd3

0800ced0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ced0:	b590      	push	{r4, r7, lr}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	460b      	mov	r3, r1
 800ceda:	607a      	str	r2, [r7, #4]
 800cedc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cede:	4b34      	ldr	r3, [pc, #208]	; (800cfb0 <SDMMC_GetCmdResp6+0xe0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a34      	ldr	r2, [pc, #208]	; (800cfb4 <SDMMC_GetCmdResp6+0xe4>)
 800cee4:	fba2 2303 	umull	r2, r3, r2, r3
 800cee8:	0a5b      	lsrs	r3, r3, #9
 800ceea:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cef2:	4623      	mov	r3, r4
 800cef4:	1e5c      	subs	r4, r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d102      	bne.n	800cf00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cefa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cefe:	e052      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0f0      	beq.n	800cef2 <SDMMC_GetCmdResp6+0x22>
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1eb      	bne.n	800cef2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d004      	beq.n	800cf30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2204      	movs	r2, #4
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf2c:	2304      	movs	r3, #4
 800cf2e:	e03a      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d004      	beq.n	800cf46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e02f      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f7ff fbac 	bl	800c6a4 <SDMMC_GetCommandResponse>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	461a      	mov	r2, r3
 800cf50:	7afb      	ldrb	r3, [r7, #11]
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d001      	beq.n	800cf5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf56:	2301      	movs	r3, #1
 800cf58:	e025      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	22c5      	movs	r2, #197	; 0xc5
 800cf5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf60:	2100      	movs	r1, #0
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7ff fbab 	bl	800c6be <SDMMC_GetResponse>
 800cf68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d106      	bne.n	800cf82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	0c1b      	lsrs	r3, r3, #16
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e011      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf90:	e009      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfa0:	e001      	b.n	800cfa6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	371c      	adds	r7, #28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd90      	pop	{r4, r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	20000000 	.word	0x20000000
 800cfb4:	10624dd3 	.word	0x10624dd3

0800cfb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cfb8:	b490      	push	{r4, r7}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cfc0:	4b21      	ldr	r3, [pc, #132]	; (800d048 <SDMMC_GetCmdResp7+0x90>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a21      	ldr	r2, [pc, #132]	; (800d04c <SDMMC_GetCmdResp7+0x94>)
 800cfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfca:	0a5b      	lsrs	r3, r3, #9
 800cfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	1e5c      	subs	r4, r3, #1
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfe0:	e02c      	b.n	800d03c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0f0      	beq.n	800cfd4 <SDMMC_GetCmdResp7+0x1c>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1eb      	bne.n	800cfd4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2204      	movs	r2, #4
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d00e:	2304      	movs	r3, #4
 800d010:	e014      	b.n	800d03c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d004      	beq.n	800d028 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d024:	2301      	movs	r3, #1
 800d026:	e009      	b.n	800d03c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2240      	movs	r2, #64	; 0x40
 800d038:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d03a:	2300      	movs	r3, #0
  
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bc90      	pop	{r4, r7}
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	20000000 	.word	0x20000000
 800d04c:	10624dd3 	.word	0x10624dd3

0800d050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d050:	b084      	sub	sp, #16
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	f107 001c 	add.w	r0, r7, #28
 800d05e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	2b01      	cmp	r3, #1
 800d066:	d120      	bne.n	800d0aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68da      	ldr	r2, [r3, #12]
 800d078:	4b20      	ldr	r3, [pc, #128]	; (800d0fc <USB_CoreInit+0xac>)
 800d07a:	4013      	ands	r3, r2
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d105      	bne.n	800d09e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f001 fac4 	bl	800e62c <USB_CoreReset>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	73fb      	strb	r3, [r7, #15]
 800d0a8:	e010      	b.n	800d0cc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f001 fab8 	bl	800e62c <USB_CoreReset>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d10b      	bne.n	800d0ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	f043 0206 	orr.w	r2, r3, #6
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	f043 0220 	orr.w	r2, r3, #32
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d0f6:	b004      	add	sp, #16
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	ffbdffbf 	.word	0xffbdffbf

0800d100 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d100:	b480      	push	{r7}
 800d102:	b087      	sub	sp, #28
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	4613      	mov	r3, r2
 800d10c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d165      	bne.n	800d1e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	4a41      	ldr	r2, [pc, #260]	; (800d21c <USB_SetTurnaroundTime+0x11c>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d906      	bls.n	800d12a <USB_SetTurnaroundTime+0x2a>
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	4a40      	ldr	r2, [pc, #256]	; (800d220 <USB_SetTurnaroundTime+0x120>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d802      	bhi.n	800d12a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d124:	230f      	movs	r3, #15
 800d126:	617b      	str	r3, [r7, #20]
 800d128:	e062      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	4a3c      	ldr	r2, [pc, #240]	; (800d220 <USB_SetTurnaroundTime+0x120>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d906      	bls.n	800d140 <USB_SetTurnaroundTime+0x40>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	4a3b      	ldr	r2, [pc, #236]	; (800d224 <USB_SetTurnaroundTime+0x124>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d802      	bhi.n	800d140 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d13a:	230e      	movs	r3, #14
 800d13c:	617b      	str	r3, [r7, #20]
 800d13e:	e057      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	4a38      	ldr	r2, [pc, #224]	; (800d224 <USB_SetTurnaroundTime+0x124>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d906      	bls.n	800d156 <USB_SetTurnaroundTime+0x56>
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	4a37      	ldr	r2, [pc, #220]	; (800d228 <USB_SetTurnaroundTime+0x128>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d802      	bhi.n	800d156 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d150:	230d      	movs	r3, #13
 800d152:	617b      	str	r3, [r7, #20]
 800d154:	e04c      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	4a33      	ldr	r2, [pc, #204]	; (800d228 <USB_SetTurnaroundTime+0x128>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d906      	bls.n	800d16c <USB_SetTurnaroundTime+0x6c>
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	4a32      	ldr	r2, [pc, #200]	; (800d22c <USB_SetTurnaroundTime+0x12c>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d802      	bhi.n	800d16c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d166:	230c      	movs	r3, #12
 800d168:	617b      	str	r3, [r7, #20]
 800d16a:	e041      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	4a2f      	ldr	r2, [pc, #188]	; (800d22c <USB_SetTurnaroundTime+0x12c>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d906      	bls.n	800d182 <USB_SetTurnaroundTime+0x82>
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	4a2e      	ldr	r2, [pc, #184]	; (800d230 <USB_SetTurnaroundTime+0x130>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d802      	bhi.n	800d182 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d17c:	230b      	movs	r3, #11
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	e036      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	4a2a      	ldr	r2, [pc, #168]	; (800d230 <USB_SetTurnaroundTime+0x130>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d906      	bls.n	800d198 <USB_SetTurnaroundTime+0x98>
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	4a29      	ldr	r2, [pc, #164]	; (800d234 <USB_SetTurnaroundTime+0x134>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d802      	bhi.n	800d198 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d192:	230a      	movs	r3, #10
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	e02b      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	4a26      	ldr	r2, [pc, #152]	; (800d234 <USB_SetTurnaroundTime+0x134>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d906      	bls.n	800d1ae <USB_SetTurnaroundTime+0xae>
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	4a25      	ldr	r2, [pc, #148]	; (800d238 <USB_SetTurnaroundTime+0x138>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d802      	bhi.n	800d1ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d1a8:	2309      	movs	r3, #9
 800d1aa:	617b      	str	r3, [r7, #20]
 800d1ac:	e020      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	4a21      	ldr	r2, [pc, #132]	; (800d238 <USB_SetTurnaroundTime+0x138>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d906      	bls.n	800d1c4 <USB_SetTurnaroundTime+0xc4>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	4a20      	ldr	r2, [pc, #128]	; (800d23c <USB_SetTurnaroundTime+0x13c>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d802      	bhi.n	800d1c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d1be:	2308      	movs	r3, #8
 800d1c0:	617b      	str	r3, [r7, #20]
 800d1c2:	e015      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	4a1d      	ldr	r2, [pc, #116]	; (800d23c <USB_SetTurnaroundTime+0x13c>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d906      	bls.n	800d1da <USB_SetTurnaroundTime+0xda>
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	4a1c      	ldr	r2, [pc, #112]	; (800d240 <USB_SetTurnaroundTime+0x140>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d802      	bhi.n	800d1da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d1d4:	2307      	movs	r3, #7
 800d1d6:	617b      	str	r3, [r7, #20]
 800d1d8:	e00a      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d1da:	2306      	movs	r3, #6
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	e007      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d102      	bne.n	800d1ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d1e6:	2309      	movs	r3, #9
 800d1e8:	617b      	str	r3, [r7, #20]
 800d1ea:	e001      	b.n	800d1f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d1ec:	2309      	movs	r3, #9
 800d1ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	68da      	ldr	r2, [r3, #12]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	029b      	lsls	r3, r3, #10
 800d204:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d208:	431a      	orrs	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	371c      	adds	r7, #28
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	00d8acbf 	.word	0x00d8acbf
 800d220:	00e4e1bf 	.word	0x00e4e1bf
 800d224:	00f423ff 	.word	0x00f423ff
 800d228:	0106737f 	.word	0x0106737f
 800d22c:	011a499f 	.word	0x011a499f
 800d230:	01312cff 	.word	0x01312cff
 800d234:	014ca43f 	.word	0x014ca43f
 800d238:	016e35ff 	.word	0x016e35ff
 800d23c:	01a6ab1f 	.word	0x01a6ab1f
 800d240:	01e847ff 	.word	0x01e847ff

0800d244 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f043 0201 	orr.w	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d266:	b480      	push	{r7}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	f023 0201 	bic.w	r2, r3, #1
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d106      	bne.n	800d2b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	60da      	str	r2, [r3, #12]
 800d2b2:	e00b      	b.n	800d2cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d2b4:	78fb      	ldrb	r3, [r7, #3]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d106      	bne.n	800d2c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60da      	str	r2, [r3, #12]
 800d2c6:	e001      	b.n	800d2cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e003      	b.n	800d2d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d2cc:	2032      	movs	r0, #50	; 0x32
 800d2ce:	f7f8 fbd3 	bl	8005a78 <HAL_Delay>

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2dc:	b084      	sub	sp, #16
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b086      	sub	sp, #24
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d2ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	613b      	str	r3, [r7, #16]
 800d2fa:	e009      	b.n	800d310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	3340      	adds	r3, #64	; 0x40
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	2200      	movs	r2, #0
 800d308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	3301      	adds	r3, #1
 800d30e:	613b      	str	r3, [r7, #16]
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2b0e      	cmp	r3, #14
 800d314:	d9f2      	bls.n	800d2fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d11c      	bne.n	800d356 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d32a:	f043 0302 	orr.w	r3, r3, #2
 800d32e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	e005      	b.n	800d362 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d368:	461a      	mov	r2, r3
 800d36a:	2300      	movs	r3, #0
 800d36c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d374:	4619      	mov	r1, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d37c:	461a      	mov	r2, r3
 800d37e:	680b      	ldr	r3, [r1, #0]
 800d380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d384:	2b01      	cmp	r3, #1
 800d386:	d10c      	bne.n	800d3a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d104      	bne.n	800d398 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d38e:	2100      	movs	r1, #0
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f959 	bl	800d648 <USB_SetDevSpeed>
 800d396:	e018      	b.n	800d3ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d398:	2101      	movs	r1, #1
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f954 	bl	800d648 <USB_SetDevSpeed>
 800d3a0:	e013      	b.n	800d3ca <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	d10c      	bne.n	800d3c2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d104      	bne.n	800d3b8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f949 	bl	800d648 <USB_SetDevSpeed>
 800d3b6:	e008      	b.n	800d3ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d3b8:	2101      	movs	r1, #1
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f944 	bl	800d648 <USB_SetDevSpeed>
 800d3c0:	e003      	b.n	800d3ca <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d3c2:	2103      	movs	r1, #3
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f93f 	bl	800d648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d3ca:	2110      	movs	r1, #16
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f8f3 	bl	800d5b8 <USB_FlushTxFifo>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 f911 	bl	800d604 <USB_FlushRxFifo>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3fe:	461a      	mov	r2, r3
 800d400:	2300      	movs	r3, #0
 800d402:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d40a:	461a      	mov	r2, r3
 800d40c:	2300      	movs	r3, #0
 800d40e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d410:	2300      	movs	r3, #0
 800d412:	613b      	str	r3, [r7, #16]
 800d414:	e043      	b.n	800d49e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	015a      	lsls	r2, r3, #5
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	4413      	add	r3, r2
 800d41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d42c:	d118      	bne.n	800d460 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10a      	bne.n	800d44a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	015a      	lsls	r2, r3, #5
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	4413      	add	r3, r2
 800d43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d440:	461a      	mov	r2, r3
 800d442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	e013      	b.n	800d472 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	015a      	lsls	r2, r3, #5
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	4413      	add	r3, r2
 800d452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d456:	461a      	mov	r2, r3
 800d458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d45c:	6013      	str	r3, [r2, #0]
 800d45e:	e008      	b.n	800d472 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	461a      	mov	r2, r3
 800d46e:	2300      	movs	r3, #0
 800d470:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	015a      	lsls	r2, r3, #5
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4413      	add	r3, r2
 800d47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47e:	461a      	mov	r2, r3
 800d480:	2300      	movs	r3, #0
 800d482:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d490:	461a      	mov	r2, r3
 800d492:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	3301      	adds	r3, #1
 800d49c:	613b      	str	r3, [r7, #16]
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d3b7      	bcc.n	800d416 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	e043      	b.n	800d534 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	015a      	lsls	r2, r3, #5
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4c2:	d118      	bne.n	800d4f6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10a      	bne.n	800d4e0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	e013      	b.n	800d508 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	015a      	lsls	r2, r3, #5
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d4f2:	6013      	str	r3, [r2, #0]
 800d4f4:	e008      	b.n	800d508 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	015a      	lsls	r2, r3, #5
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d502:	461a      	mov	r2, r3
 800d504:	2300      	movs	r3, #0
 800d506:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d514:	461a      	mov	r2, r3
 800d516:	2300      	movs	r3, #0
 800d518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d526:	461a      	mov	r2, r3
 800d528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d52c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	3301      	adds	r3, #1
 800d532:	613b      	str	r3, [r7, #16]
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d3b7      	bcc.n	800d4ac <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d54a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d54e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d55c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	2b00      	cmp	r3, #0
 800d562:	d105      	bne.n	800d570 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	f043 0210 	orr.w	r2, r3, #16
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	699a      	ldr	r2, [r3, #24]
 800d574:	4b0e      	ldr	r3, [pc, #56]	; (800d5b0 <USB_DevInit+0x2d4>)
 800d576:	4313      	orrs	r3, r2
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d005      	beq.n	800d58e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	f043 0208 	orr.w	r2, r3, #8
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d58e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d590:	2b01      	cmp	r3, #1
 800d592:	d105      	bne.n	800d5a0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	699a      	ldr	r2, [r3, #24]
 800d598:	4b06      	ldr	r3, [pc, #24]	; (800d5b4 <USB_DevInit+0x2d8>)
 800d59a:	4313      	orrs	r3, r2
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5ac:	b004      	add	sp, #16
 800d5ae:	4770      	bx	lr
 800d5b0:	803c3800 	.word	0x803c3800
 800d5b4:	40000004 	.word	0x40000004

0800d5b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	019b      	lsls	r3, r3, #6
 800d5ca:	f043 0220 	orr.w	r2, r3, #32
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4a09      	ldr	r2, [pc, #36]	; (800d600 <USB_FlushTxFifo+0x48>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d901      	bls.n	800d5e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	e006      	b.n	800d5f2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	f003 0320 	and.w	r3, r3, #32
 800d5ec:	2b20      	cmp	r3, #32
 800d5ee:	d0f0      	beq.n	800d5d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	00030d40 	.word	0x00030d40

0800d604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2210      	movs	r2, #16
 800d614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3301      	adds	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4a09      	ldr	r2, [pc, #36]	; (800d644 <USB_FlushRxFifo+0x40>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d901      	bls.n	800d628 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d624:	2303      	movs	r3, #3
 800d626:	e006      	b.n	800d636 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	f003 0310 	and.w	r3, r3, #16
 800d630:	2b10      	cmp	r3, #16
 800d632:	d0f0      	beq.n	800d616 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	00030d40 	.word	0x00030d40

0800d648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	68f9      	ldr	r1, [r7, #12]
 800d664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d668:	4313      	orrs	r3, r2
 800d66a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b087      	sub	sp, #28
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	f003 0306 	and.w	r3, r3, #6
 800d692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d69a:	2300      	movs	r3, #0
 800d69c:	75fb      	strb	r3, [r7, #23]
 800d69e:	e00a      	b.n	800d6b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d002      	beq.n	800d6ac <USB_GetDevSpeed+0x32>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b06      	cmp	r3, #6
 800d6aa:	d102      	bne.n	800d6b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	75fb      	strb	r3, [r7, #23]
 800d6b0:	e001      	b.n	800d6b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d6b2:	230f      	movs	r3, #15
 800d6b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	371c      	adds	r7, #28
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	785b      	ldrb	r3, [r3, #1]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d139      	bne.n	800d754 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e6:	69da      	ldr	r2, [r3, #28]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	f003 030f 	and.w	r3, r3, #15
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	68f9      	ldr	r1, [r7, #12]
 800d6fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6fe:	4313      	orrs	r3, r2
 800d700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	015a      	lsls	r2, r3, #5
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	4413      	add	r3, r2
 800d70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d714:	2b00      	cmp	r3, #0
 800d716:	d153      	bne.n	800d7c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	015a      	lsls	r2, r3, #5
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4413      	add	r3, r2
 800d720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	78db      	ldrb	r3, [r3, #3]
 800d732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	059b      	lsls	r3, r3, #22
 800d73a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d73c:	431a      	orrs	r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	0159      	lsls	r1, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	440b      	add	r3, r1
 800d746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74a:	4619      	mov	r1, r3
 800d74c:	4b20      	ldr	r3, [pc, #128]	; (800d7d0 <USB_ActivateEndpoint+0x10c>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	600b      	str	r3, [r1, #0]
 800d752:	e035      	b.n	800d7c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d75a:	69da      	ldr	r2, [r3, #28]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	f003 030f 	and.w	r3, r3, #15
 800d764:	2101      	movs	r1, #1
 800d766:	fa01 f303 	lsl.w	r3, r1, r3
 800d76a:	041b      	lsls	r3, r3, #16
 800d76c:	68f9      	ldr	r1, [r7, #12]
 800d76e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d772:	4313      	orrs	r3, r2
 800d774:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	015a      	lsls	r2, r3, #5
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d119      	bne.n	800d7c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	015a      	lsls	r2, r3, #5
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4413      	add	r3, r2
 800d794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	78db      	ldrb	r3, [r3, #3]
 800d7a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7a8:	430b      	orrs	r3, r1
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	0159      	lsls	r1, r3, #5
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	440b      	add	r3, r1
 800d7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <USB_ActivateEndpoint+0x10c>)
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	10008000 	.word	0x10008000

0800d7d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	785b      	ldrb	r3, [r3, #1]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d161      	bne.n	800d8b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d806:	d11f      	bne.n	800d848 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	015a      	lsls	r2, r3, #5
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4413      	add	r3, r2
 800d810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	0151      	lsls	r1, r2, #5
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	440a      	add	r2, r1
 800d81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d826:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	015a      	lsls	r2, r3, #5
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	4413      	add	r3, r2
 800d830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	0151      	lsls	r1, r2, #5
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	440a      	add	r2, r1
 800d83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	f003 030f 	and.w	r3, r3, #15
 800d858:	2101      	movs	r1, #1
 800d85a:	fa01 f303 	lsl.w	r3, r1, r3
 800d85e:	b29b      	uxth	r3, r3
 800d860:	43db      	mvns	r3, r3
 800d862:	68f9      	ldr	r1, [r7, #12]
 800d864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d868:	4013      	ands	r3, r2
 800d86a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d872:	69da      	ldr	r2, [r3, #28]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	2101      	movs	r1, #1
 800d87e:	fa01 f303 	lsl.w	r3, r1, r3
 800d882:	b29b      	uxth	r3, r3
 800d884:	43db      	mvns	r3, r3
 800d886:	68f9      	ldr	r1, [r7, #12]
 800d888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d88c:	4013      	ands	r3, r2
 800d88e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	015a      	lsls	r2, r3, #5
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	0159      	lsls	r1, r3, #5
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	440b      	add	r3, r1
 800d8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4b35      	ldr	r3, [pc, #212]	; (800d984 <USB_DeactivateEndpoint+0x1b0>)
 800d8ae:	4013      	ands	r3, r2
 800d8b0:	600b      	str	r3, [r1, #0]
 800d8b2:	e060      	b.n	800d976 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8ca:	d11f      	bne.n	800d90c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	0151      	lsls	r1, r2, #5
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	440a      	add	r2, r1
 800d8e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d8ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	015a      	lsls	r2, r3, #5
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	0151      	lsls	r1, r2, #5
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	440a      	add	r2, r1
 800d902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d90a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	f003 030f 	and.w	r3, r3, #15
 800d91c:	2101      	movs	r1, #1
 800d91e:	fa01 f303 	lsl.w	r3, r1, r3
 800d922:	041b      	lsls	r3, r3, #16
 800d924:	43db      	mvns	r3, r3
 800d926:	68f9      	ldr	r1, [r7, #12]
 800d928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d92c:	4013      	ands	r3, r2
 800d92e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d936:	69da      	ldr	r2, [r3, #28]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	f003 030f 	and.w	r3, r3, #15
 800d940:	2101      	movs	r1, #1
 800d942:	fa01 f303 	lsl.w	r3, r1, r3
 800d946:	041b      	lsls	r3, r3, #16
 800d948:	43db      	mvns	r3, r3
 800d94a:	68f9      	ldr	r1, [r7, #12]
 800d94c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d950:	4013      	ands	r3, r2
 800d952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	0159      	lsls	r1, r3, #5
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	440b      	add	r3, r1
 800d96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96e:	4619      	mov	r1, r3
 800d970:	4b05      	ldr	r3, [pc, #20]	; (800d988 <USB_DeactivateEndpoint+0x1b4>)
 800d972:	4013      	ands	r3, r2
 800d974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	ec337800 	.word	0xec337800
 800d988:	eff37800 	.word	0xeff37800

0800d98c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08a      	sub	sp, #40	; 0x28
 800d990:	af02      	add	r7, sp, #8
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	4613      	mov	r3, r2
 800d998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	785b      	ldrb	r3, [r3, #1]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	f040 8163 	bne.w	800dc74 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d132      	bne.n	800da1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	015a      	lsls	r2, r3, #5
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	4413      	add	r3, r2
 800d9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c2:	691a      	ldr	r2, [r3, #16]
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	0159      	lsls	r1, r3, #5
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	440b      	add	r3, r1
 800d9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	4ba5      	ldr	r3, [pc, #660]	; (800dc68 <USB_EPStartXfer+0x2dc>)
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	69ba      	ldr	r2, [r7, #24]
 800d9e8:	0151      	lsls	r1, r2, #5
 800d9ea:	69fa      	ldr	r2, [r7, #28]
 800d9ec:	440a      	add	r2, r1
 800d9ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	015a      	lsls	r2, r3, #5
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	4413      	add	r3, r2
 800da00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da04:	691a      	ldr	r2, [r3, #16]
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	0159      	lsls	r1, r3, #5
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	440b      	add	r3, r1
 800da0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da12:	4619      	mov	r1, r3
 800da14:	4b95      	ldr	r3, [pc, #596]	; (800dc6c <USB_EPStartXfer+0x2e0>)
 800da16:	4013      	ands	r3, r2
 800da18:	610b      	str	r3, [r1, #16]
 800da1a:	e074      	b.n	800db06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da28:	691a      	ldr	r2, [r3, #16]
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	0159      	lsls	r1, r3, #5
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	440b      	add	r3, r1
 800da32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da36:	4619      	mov	r1, r3
 800da38:	4b8c      	ldr	r3, [pc, #560]	; (800dc6c <USB_EPStartXfer+0x2e0>)
 800da3a:	4013      	ands	r3, r2
 800da3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4a:	691a      	ldr	r2, [r3, #16]
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	0159      	lsls	r1, r3, #5
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	440b      	add	r3, r1
 800da54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da58:	4619      	mov	r1, r3
 800da5a:	4b83      	ldr	r3, [pc, #524]	; (800dc68 <USB_EPStartXfer+0x2dc>)
 800da5c:	4013      	ands	r3, r2
 800da5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	015a      	lsls	r2, r3, #5
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	4413      	add	r3, r2
 800da68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6c:	691a      	ldr	r2, [r3, #16]
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	6959      	ldr	r1, [r3, #20]
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	440b      	add	r3, r1
 800da78:	1e59      	subs	r1, r3, #1
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	fbb1 f3f3 	udiv	r3, r1, r3
 800da82:	04d9      	lsls	r1, r3, #19
 800da84:	4b7a      	ldr	r3, [pc, #488]	; (800dc70 <USB_EPStartXfer+0x2e4>)
 800da86:	400b      	ands	r3, r1
 800da88:	69b9      	ldr	r1, [r7, #24]
 800da8a:	0148      	lsls	r0, r1, #5
 800da8c:	69f9      	ldr	r1, [r7, #28]
 800da8e:	4401      	add	r1, r0
 800da90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800da94:	4313      	orrs	r3, r2
 800da96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daa4:	691a      	ldr	r2, [r3, #16]
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800daae:	69b9      	ldr	r1, [r7, #24]
 800dab0:	0148      	lsls	r0, r1, #5
 800dab2:	69f9      	ldr	r1, [r7, #28]
 800dab4:	4401      	add	r1, r0
 800dab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800daba:	4313      	orrs	r3, r2
 800dabc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	78db      	ldrb	r3, [r3, #3]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d11f      	bne.n	800db06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	015a      	lsls	r2, r3, #5
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	69ba      	ldr	r2, [r7, #24]
 800dad6:	0151      	lsls	r1, r2, #5
 800dad8:	69fa      	ldr	r2, [r7, #28]
 800dada:	440a      	add	r2, r1
 800dadc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dae0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dae4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	015a      	lsls	r2, r3, #5
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	4413      	add	r3, r2
 800daee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	69ba      	ldr	r2, [r7, #24]
 800daf6:	0151      	lsls	r1, r2, #5
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	440a      	add	r2, r1
 800dafc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800db06:	79fb      	ldrb	r3, [r7, #7]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d14b      	bne.n	800dba4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d009      	beq.n	800db28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	015a      	lsls	r2, r3, #5
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db20:	461a      	mov	r2, r3
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	78db      	ldrb	r3, [r3, #3]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d128      	bne.n	800db82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d110      	bne.n	800db62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	015a      	lsls	r2, r3, #5
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	4413      	add	r3, r2
 800db48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	69ba      	ldr	r2, [r7, #24]
 800db50:	0151      	lsls	r1, r2, #5
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	440a      	add	r2, r1
 800db56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db5e:	6013      	str	r3, [r2, #0]
 800db60:	e00f      	b.n	800db82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	015a      	lsls	r2, r3, #5
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	4413      	add	r3, r2
 800db6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	0151      	lsls	r1, r2, #5
 800db74:	69fa      	ldr	r2, [r7, #28]
 800db76:	440a      	add	r2, r1
 800db78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	015a      	lsls	r2, r3, #5
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	4413      	add	r3, r2
 800db8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	69ba      	ldr	r2, [r7, #24]
 800db92:	0151      	lsls	r1, r2, #5
 800db94:	69fa      	ldr	r2, [r7, #28]
 800db96:	440a      	add	r2, r1
 800db98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dba0:	6013      	str	r3, [r2, #0]
 800dba2:	e133      	b.n	800de0c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	015a      	lsls	r2, r3, #5
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	4413      	add	r3, r2
 800dbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	69ba      	ldr	r2, [r7, #24]
 800dbb4:	0151      	lsls	r1, r2, #5
 800dbb6:	69fa      	ldr	r2, [r7, #28]
 800dbb8:	440a      	add	r2, r1
 800dbba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	78db      	ldrb	r3, [r3, #3]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d015      	beq.n	800dbf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 811b 	beq.w	800de0c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	f003 030f 	and.w	r3, r3, #15
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	fa01 f303 	lsl.w	r3, r1, r3
 800dbec:	69f9      	ldr	r1, [r7, #28]
 800dbee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	634b      	str	r3, [r1, #52]	; 0x34
 800dbf6:	e109      	b.n	800de0c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d110      	bne.n	800dc2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	015a      	lsls	r2, r3, #5
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	4413      	add	r3, r2
 800dc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	69ba      	ldr	r2, [r7, #24]
 800dc18:	0151      	lsls	r1, r2, #5
 800dc1a:	69fa      	ldr	r2, [r7, #28]
 800dc1c:	440a      	add	r2, r1
 800dc1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc26:	6013      	str	r3, [r2, #0]
 800dc28:	e00f      	b.n	800dc4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	015a      	lsls	r2, r3, #5
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	4413      	add	r3, r2
 800dc32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	69ba      	ldr	r2, [r7, #24]
 800dc3a:	0151      	lsls	r1, r2, #5
 800dc3c:	69fa      	ldr	r2, [r7, #28]
 800dc3e:	440a      	add	r2, r1
 800dc40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	68d9      	ldr	r1, [r3, #12]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	781a      	ldrb	r2, [r3, #0]
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	695b      	ldr	r3, [r3, #20]
 800dc56:	b298      	uxth	r0, r3
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f000 fa38 	bl	800e0d4 <USB_WritePacket>
 800dc64:	e0d2      	b.n	800de0c <USB_EPStartXfer+0x480>
 800dc66:	bf00      	nop
 800dc68:	e007ffff 	.word	0xe007ffff
 800dc6c:	fff80000 	.word	0xfff80000
 800dc70:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	015a      	lsls	r2, r3, #5
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc80:	691a      	ldr	r2, [r3, #16]
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	0159      	lsls	r1, r3, #5
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	440b      	add	r3, r1
 800dc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4b61      	ldr	r3, [pc, #388]	; (800de18 <USB_EPStartXfer+0x48c>)
 800dc92:	4013      	ands	r3, r2
 800dc94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	015a      	lsls	r2, r3, #5
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca2:	691a      	ldr	r2, [r3, #16]
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	0159      	lsls	r1, r3, #5
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	440b      	add	r3, r1
 800dcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4b5a      	ldr	r3, [pc, #360]	; (800de1c <USB_EPStartXfer+0x490>)
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d123      	bne.n	800dd08 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	015a      	lsls	r2, r3, #5
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dccc:	691a      	ldr	r2, [r3, #16]
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcd6:	69b9      	ldr	r1, [r7, #24]
 800dcd8:	0148      	lsls	r0, r1, #5
 800dcda:	69f9      	ldr	r1, [r7, #28]
 800dcdc:	4401      	add	r1, r0
 800dcde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dce2:	4313      	orrs	r3, r2
 800dce4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	015a      	lsls	r2, r3, #5
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	4413      	add	r3, r2
 800dcee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	69ba      	ldr	r2, [r7, #24]
 800dcf6:	0151      	lsls	r1, r2, #5
 800dcf8:	69fa      	ldr	r2, [r7, #28]
 800dcfa:	440a      	add	r2, r1
 800dcfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd04:	6113      	str	r3, [r2, #16]
 800dd06:	e033      	b.n	800dd70 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	695a      	ldr	r2, [r3, #20]
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	4413      	add	r3, r2
 800dd12:	1e5a      	subs	r2, r3, #1
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd1c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd2a:	691a      	ldr	r2, [r3, #16]
 800dd2c:	8afb      	ldrh	r3, [r7, #22]
 800dd2e:	04d9      	lsls	r1, r3, #19
 800dd30:	4b3b      	ldr	r3, [pc, #236]	; (800de20 <USB_EPStartXfer+0x494>)
 800dd32:	400b      	ands	r3, r1
 800dd34:	69b9      	ldr	r1, [r7, #24]
 800dd36:	0148      	lsls	r0, r1, #5
 800dd38:	69f9      	ldr	r1, [r7, #28]
 800dd3a:	4401      	add	r1, r0
 800dd3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd40:	4313      	orrs	r3, r2
 800dd42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd50:	691a      	ldr	r2, [r3, #16]
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	8af9      	ldrh	r1, [r7, #22]
 800dd58:	fb01 f303 	mul.w	r3, r1, r3
 800dd5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd60:	69b9      	ldr	r1, [r7, #24]
 800dd62:	0148      	lsls	r0, r1, #5
 800dd64:	69f9      	ldr	r1, [r7, #28]
 800dd66:	4401      	add	r1, r0
 800dd68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d10d      	bne.n	800dd92 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d009      	beq.n	800dd92 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	68d9      	ldr	r1, [r3, #12]
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	015a      	lsls	r2, r3, #5
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	4413      	add	r3, r2
 800dd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd8e:	460a      	mov	r2, r1
 800dd90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	78db      	ldrb	r3, [r3, #3]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d128      	bne.n	800ddec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d110      	bne.n	800ddcc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	015a      	lsls	r2, r3, #5
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	0151      	lsls	r1, r2, #5
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	440a      	add	r2, r1
 800ddc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	e00f      	b.n	800ddec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	0151      	lsls	r1, r2, #5
 800ddde:	69fa      	ldr	r2, [r7, #28]
 800dde0:	440a      	add	r2, r1
 800dde2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dde6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	015a      	lsls	r2, r3, #5
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	69ba      	ldr	r2, [r7, #24]
 800ddfc:	0151      	lsls	r1, r2, #5
 800ddfe:	69fa      	ldr	r2, [r7, #28]
 800de00:	440a      	add	r2, r1
 800de02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3720      	adds	r7, #32
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	fff80000 	.word	0xfff80000
 800de1c:	e007ffff 	.word	0xe007ffff
 800de20:	1ff80000 	.word	0x1ff80000

0800de24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	4613      	mov	r3, r2
 800de30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	785b      	ldrb	r3, [r3, #1]
 800de40:	2b01      	cmp	r3, #1
 800de42:	f040 80cd 	bne.w	800dfe0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d132      	bne.n	800deb4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	4413      	add	r3, r2
 800de56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	0159      	lsls	r1, r3, #5
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	440b      	add	r3, r1
 800de64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de68:	4619      	mov	r1, r3
 800de6a:	4b98      	ldr	r3, [pc, #608]	; (800e0cc <USB_EP0StartXfer+0x2a8>)
 800de6c:	4013      	ands	r3, r2
 800de6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	015a      	lsls	r2, r3, #5
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	4413      	add	r3, r2
 800de78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	0151      	lsls	r1, r2, #5
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	440a      	add	r2, r1
 800de86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de9c:	691a      	ldr	r2, [r3, #16]
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	0159      	lsls	r1, r3, #5
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	440b      	add	r3, r1
 800dea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deaa:	4619      	mov	r1, r3
 800deac:	4b88      	ldr	r3, [pc, #544]	; (800e0d0 <USB_EP0StartXfer+0x2ac>)
 800deae:	4013      	ands	r3, r2
 800deb0:	610b      	str	r3, [r1, #16]
 800deb2:	e04e      	b.n	800df52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	015a      	lsls	r2, r3, #5
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	4413      	add	r3, r2
 800debc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dec0:	691a      	ldr	r2, [r3, #16]
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	0159      	lsls	r1, r3, #5
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	440b      	add	r3, r1
 800deca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dece:	4619      	mov	r1, r3
 800ded0:	4b7f      	ldr	r3, [pc, #508]	; (800e0d0 <USB_EP0StartXfer+0x2ac>)
 800ded2:	4013      	ands	r3, r2
 800ded4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	015a      	lsls	r2, r3, #5
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	4413      	add	r3, r2
 800dede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dee2:	691a      	ldr	r2, [r3, #16]
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	0159      	lsls	r1, r3, #5
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	440b      	add	r3, r1
 800deec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def0:	4619      	mov	r1, r3
 800def2:	4b76      	ldr	r3, [pc, #472]	; (800e0cc <USB_EP0StartXfer+0x2a8>)
 800def4:	4013      	ands	r3, r2
 800def6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	695a      	ldr	r2, [r3, #20]
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	429a      	cmp	r2, r3
 800df02:	d903      	bls.n	800df0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	689a      	ldr	r2, [r3, #8]
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	015a      	lsls	r2, r3, #5
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	4413      	add	r3, r2
 800df14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	693a      	ldr	r2, [r7, #16]
 800df1c:	0151      	lsls	r1, r2, #5
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	440a      	add	r2, r1
 800df22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	015a      	lsls	r2, r3, #5
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	4413      	add	r3, r2
 800df34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df38:	691a      	ldr	r2, [r3, #16]
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df42:	6939      	ldr	r1, [r7, #16]
 800df44:	0148      	lsls	r0, r1, #5
 800df46:	6979      	ldr	r1, [r7, #20]
 800df48:	4401      	add	r1, r0
 800df4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800df4e:	4313      	orrs	r3, r2
 800df50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d11e      	bne.n	800df96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d009      	beq.n	800df74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	015a      	lsls	r2, r3, #5
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	4413      	add	r3, r2
 800df68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df6c:	461a      	mov	r2, r3
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	693a      	ldr	r2, [r7, #16]
 800df84:	0151      	lsls	r1, r2, #5
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	440a      	add	r2, r1
 800df8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	e092      	b.n	800e0bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	0151      	lsls	r1, r2, #5
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	440a      	add	r2, r1
 800dfac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d07e      	beq.n	800e0bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	f003 030f 	and.w	r3, r3, #15
 800dfce:	2101      	movs	r1, #1
 800dfd0:	fa01 f303 	lsl.w	r3, r1, r3
 800dfd4:	6979      	ldr	r1, [r7, #20]
 800dfd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	634b      	str	r3, [r1, #52]	; 0x34
 800dfde:	e06d      	b.n	800e0bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	015a      	lsls	r2, r3, #5
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfec:	691a      	ldr	r2, [r3, #16]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	0159      	lsls	r1, r3, #5
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	440b      	add	r3, r1
 800dff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dffa:	4619      	mov	r1, r3
 800dffc:	4b34      	ldr	r3, [pc, #208]	; (800e0d0 <USB_EP0StartXfer+0x2ac>)
 800dffe:	4013      	ands	r3, r2
 800e000:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	015a      	lsls	r2, r3, #5
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	4413      	add	r3, r2
 800e00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e00e:	691a      	ldr	r2, [r3, #16]
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	0159      	lsls	r1, r3, #5
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	440b      	add	r3, r1
 800e018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e01c:	4619      	mov	r1, r3
 800e01e:	4b2b      	ldr	r3, [pc, #172]	; (800e0cc <USB_EP0StartXfer+0x2a8>)
 800e020:	4013      	ands	r3, r2
 800e022:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	695b      	ldr	r3, [r3, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	689a      	ldr	r2, [r3, #8]
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	0151      	lsls	r1, r2, #5
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	440a      	add	r2, r1
 800e04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e04e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e060:	691a      	ldr	r2, [r3, #16]
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e06a:	6939      	ldr	r1, [r7, #16]
 800e06c:	0148      	lsls	r0, r1, #5
 800e06e:	6979      	ldr	r1, [r7, #20]
 800e070:	4401      	add	r1, r0
 800e072:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e076:	4313      	orrs	r3, r2
 800e078:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d10d      	bne.n	800e09c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d009      	beq.n	800e09c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	68d9      	ldr	r1, [r3, #12]
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	015a      	lsls	r2, r3, #5
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	4413      	add	r3, r2
 800e094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e098:	460a      	mov	r2, r1
 800e09a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	015a      	lsls	r2, r3, #5
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	693a      	ldr	r2, [r7, #16]
 800e0ac:	0151      	lsls	r1, r2, #5
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	440a      	add	r2, r1
 800e0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	371c      	adds	r7, #28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	e007ffff 	.word	0xe007ffff
 800e0d0:	fff80000 	.word	0xfff80000

0800e0d4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b089      	sub	sp, #36	; 0x24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	4611      	mov	r1, r2
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	71fb      	strb	r3, [r7, #7]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e0f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d11a      	bne.n	800e130 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e0fa:	88bb      	ldrh	r3, [r7, #4]
 800e0fc:	3303      	adds	r3, #3
 800e0fe:	089b      	lsrs	r3, r3, #2
 800e100:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e102:	2300      	movs	r3, #0
 800e104:	61bb      	str	r3, [r7, #24]
 800e106:	e00f      	b.n	800e128 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e108:	79fb      	ldrb	r3, [r7, #7]
 800e10a:	031a      	lsls	r2, r3, #12
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e114:	461a      	mov	r2, r3
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	3304      	adds	r3, #4
 800e120:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	3301      	adds	r3, #1
 800e126:	61bb      	str	r3, [r7, #24]
 800e128:	69ba      	ldr	r2, [r7, #24]
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d3eb      	bcc.n	800e108 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3724      	adds	r7, #36	; 0x24
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr

0800e13e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e13e:	b480      	push	{r7}
 800e140:	b089      	sub	sp, #36	; 0x24
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	60b9      	str	r1, [r7, #8]
 800e148:	4613      	mov	r3, r2
 800e14a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e154:	88fb      	ldrh	r3, [r7, #6]
 800e156:	3303      	adds	r3, #3
 800e158:	089b      	lsrs	r3, r3, #2
 800e15a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e15c:	2300      	movs	r3, #0
 800e15e:	61bb      	str	r3, [r7, #24]
 800e160:	e00b      	b.n	800e17a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	601a      	str	r2, [r3, #0]
    pDest++;
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	3304      	adds	r3, #4
 800e172:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e174:	69bb      	ldr	r3, [r7, #24]
 800e176:	3301      	adds	r3, #1
 800e178:	61bb      	str	r3, [r7, #24]
 800e17a:	69ba      	ldr	r2, [r7, #24]
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d3ef      	bcc.n	800e162 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e182:	69fb      	ldr	r3, [r7, #28]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3724      	adds	r7, #36	; 0x24
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	785b      	ldrb	r3, [r3, #1]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d12c      	bne.n	800e206 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	db12      	blt.n	800e1e4 <USB_EPSetStall+0x54>
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00f      	beq.n	800e1e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	015a      	lsls	r2, r3, #5
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	0151      	lsls	r1, r2, #5
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	440a      	add	r2, r1
 800e1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e1e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	015a      	lsls	r2, r3, #5
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	0151      	lsls	r1, r2, #5
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	440a      	add	r2, r1
 800e1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	e02b      	b.n	800e25e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	015a      	lsls	r2, r3, #5
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4413      	add	r3, r2
 800e20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	db12      	blt.n	800e23e <USB_EPSetStall+0xae>
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00f      	beq.n	800e23e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	015a      	lsls	r2, r3, #5
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	4413      	add	r3, r2
 800e226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	0151      	lsls	r1, r2, #5
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	440a      	add	r2, r1
 800e234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e23c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	015a      	lsls	r2, r3, #5
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4413      	add	r3, r2
 800e246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	0151      	lsls	r1, r2, #5
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	440a      	add	r2, r1
 800e254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e25c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	785b      	ldrb	r3, [r3, #1]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d128      	bne.n	800e2da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	015a      	lsls	r2, r3, #5
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4413      	add	r3, r2
 800e290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	0151      	lsls	r1, r2, #5
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	440a      	add	r2, r1
 800e29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	78db      	ldrb	r3, [r3, #3]
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d003      	beq.n	800e2b8 <USB_EPClearStall+0x4c>
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	78db      	ldrb	r3, [r3, #3]
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d138      	bne.n	800e32a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	015a      	lsls	r2, r3, #5
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	0151      	lsls	r1, r2, #5
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	440a      	add	r2, r1
 800e2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e027      	b.n	800e32a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	0151      	lsls	r1, r2, #5
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	440a      	add	r2, r1
 800e2f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	78db      	ldrb	r3, [r3, #3]
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d003      	beq.n	800e30a <USB_EPClearStall+0x9e>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	78db      	ldrb	r3, [r3, #3]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d10f      	bne.n	800e32a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	015a      	lsls	r2, r3, #5
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	4413      	add	r3, r2
 800e312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68ba      	ldr	r2, [r7, #8]
 800e31a:	0151      	lsls	r1, r2, #5
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	440a      	add	r2, r1
 800e320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e328:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3714      	adds	r7, #20
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e356:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e35a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	78fb      	ldrb	r3, [r7, #3]
 800e366:	011b      	lsls	r3, r3, #4
 800e368:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e36c:	68f9      	ldr	r1, [r7, #12]
 800e36e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e372:	4313      	orrs	r3, r2
 800e374:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e39e:	f023 0302 	bic.w	r3, r3, #2
 800e3a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e3a4:	2003      	movs	r0, #3
 800e3a6:	f7f7 fb67 	bl	8005a78 <HAL_Delay>

  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3ce:	f043 0302 	orr.w	r3, r3, #2
 800e3d2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e3d4:	2003      	movs	r0, #3
 800e3d6:	f7f7 fb4f 	bl	8005a78 <HAL_Delay>

  return HAL_OK;
 800e3da:	2300      	movs	r3, #0
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b085      	sub	sp, #20
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e41c:	699b      	ldr	r3, [r3, #24]
 800e41e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	4013      	ands	r3, r2
 800e42c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	0c1b      	lsrs	r3, r3, #16
}
 800e432:	4618      	mov	r0, r3
 800e434:	3714      	adds	r7, #20
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e43e:	b480      	push	{r7}
 800e440:	b085      	sub	sp, #20
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e45a:	69db      	ldr	r3, [r3, #28]
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	4013      	ands	r3, r2
 800e460:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	b29b      	uxth	r3, r3
}
 800e466:	4618      	mov	r0, r3
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e472:	b480      	push	{r7}
 800e474:	b085      	sub	sp, #20
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	460b      	mov	r3, r1
 800e47c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e482:	78fb      	ldrb	r3, [r7, #3]
 800e484:	015a      	lsls	r2, r3, #5
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	4013      	ands	r3, r2
 800e49e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e4a0:	68bb      	ldr	r3, [r7, #8]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b087      	sub	sp, #28
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4c4:	691b      	ldr	r3, [r3, #16]
 800e4c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e4d2:	78fb      	ldrb	r3, [r7, #3]
 800e4d4:	f003 030f 	and.w	r3, r3, #15
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	fa22 f303 	lsr.w	r3, r2, r3
 800e4de:	01db      	lsls	r3, r3, #7
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	371c      	adds	r7, #28
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e50a:	b480      	push	{r7}
 800e50c:	b083      	sub	sp, #12
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	695b      	ldr	r3, [r3, #20]
 800e516:	f003 0301 	and.w	r3, r3, #1
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	370c      	adds	r7, #12
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr
	...

0800e528 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e542:	4619      	mov	r1, r3
 800e544:	4b09      	ldr	r3, [pc, #36]	; (800e56c <USB_ActivateSetup+0x44>)
 800e546:	4013      	ands	r3, r2
 800e548:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e55c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	fffff800 	.word	0xfffff800

0800e570 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e570:	b480      	push	{r7}
 800e572:	b087      	sub	sp, #28
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	460b      	mov	r3, r1
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	333c      	adds	r3, #60	; 0x3c
 800e586:	3304      	adds	r3, #4
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	4a26      	ldr	r2, [pc, #152]	; (800e628 <USB_EP0_OutStart+0xb8>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d90a      	bls.n	800e5aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5a4:	d101      	bne.n	800e5aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e037      	b.n	800e61a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5bc:	691b      	ldr	r3, [r3, #16]
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5d8:	f043 0318 	orr.w	r3, r3, #24
 800e5dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e5f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e5f2:	7afb      	ldrb	r3, [r7, #11]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d10f      	bne.n	800e618 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5fe:	461a      	mov	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e612:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	371c      	adds	r7, #28
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	4f54300a 	.word	0x4f54300a

0800e62c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e634:	2300      	movs	r3, #0
 800e636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3301      	adds	r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	4a13      	ldr	r2, [pc, #76]	; (800e690 <USB_CoreReset+0x64>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d901      	bls.n	800e64a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	e01b      	b.n	800e682 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	daf2      	bge.n	800e638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e652:	2300      	movs	r3, #0
 800e654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	f043 0201 	orr.w	r2, r3, #1
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	3301      	adds	r3, #1
 800e666:	60fb      	str	r3, [r7, #12]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4a09      	ldr	r2, [pc, #36]	; (800e690 <USB_CoreReset+0x64>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d901      	bls.n	800e674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e670:	2303      	movs	r3, #3
 800e672:	e006      	b.n	800e682 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	f003 0301 	and.w	r3, r3, #1
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d0f0      	beq.n	800e662 <USB_CoreReset+0x36>

  return HAL_OK;
 800e680:	2300      	movs	r3, #0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3714      	adds	r7, #20
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	00030d40 	.word	0x00030d40

0800e694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e694:	b580      	push	{r7, lr}
 800e696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e698:	4904      	ldr	r1, [pc, #16]	; (800e6ac <MX_FATFS_Init+0x18>)
 800e69a:	4805      	ldr	r0, [pc, #20]	; (800e6b0 <MX_FATFS_Init+0x1c>)
 800e69c:	f004 fd5e 	bl	801315c <FATFS_LinkDriver>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4b03      	ldr	r3, [pc, #12]	; (800e6b4 <MX_FATFS_Init+0x20>)
 800e6a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e6a8:	bf00      	nop
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20027220 	.word	0x20027220
 800e6b0:	0801ad10 	.word	0x0801ad10
 800e6b4:	2002721c 	.word	0x2002721c

0800e6b8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e6bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e6d2:	f000 f896 	bl	800e802 <BSP_SD_IsDetected>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d001      	beq.n	800e6e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e6dc:	2302      	movs	r3, #2
 800e6de:	e012      	b.n	800e706 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e6e0:	480b      	ldr	r0, [pc, #44]	; (800e710 <BSP_SD_Init+0x48>)
 800e6e2:	f7fa fa91 	bl	8008c08 <HAL_SD_Init>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d109      	bne.n	800e704 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e6f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e6f4:	4806      	ldr	r0, [pc, #24]	; (800e710 <BSP_SD_Init+0x48>)
 800e6f6:	f7fb f849 	bl	800978c <HAL_SD_ConfigWideBusOperation>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e700:	2301      	movs	r3, #1
 800e702:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e704:	79fb      	ldrb	r3, [r7, #7]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	20008ad4 	.word	0x20008ad4

0800e714 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	68f9      	ldr	r1, [r7, #12]
 800e72a:	4806      	ldr	r0, [pc, #24]	; (800e744 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e72c:	f7fa fb04 	bl	8008d38 <HAL_SD_ReadBlocks_DMA>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3718      	adds	r7, #24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20008ad4 	.word	0x20008ad4

0800e748 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	68f9      	ldr	r1, [r7, #12]
 800e75e:	4806      	ldr	r0, [pc, #24]	; (800e778 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e760:	f7fa fbd6 	bl	8008f10 <HAL_SD_WriteBlocks_DMA>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d001      	beq.n	800e76e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3718      	adds	r7, #24
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20008ad4 	.word	0x20008ad4

0800e77c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e780:	4805      	ldr	r0, [pc, #20]	; (800e798 <BSP_SD_GetCardState+0x1c>)
 800e782:	f7fb f87f 	bl	8009884 <HAL_SD_GetCardState>
 800e786:	4603      	mov	r3, r0
 800e788:	2b04      	cmp	r3, #4
 800e78a:	bf14      	ite	ne
 800e78c:	2301      	movne	r3, #1
 800e78e:	2300      	moveq	r3, #0
 800e790:	b2db      	uxtb	r3, r3
}
 800e792:	4618      	mov	r0, r3
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	20008ad4 	.word	0x20008ad4

0800e79c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	4803      	ldr	r0, [pc, #12]	; (800e7b4 <BSP_SD_GetCardInfo+0x18>)
 800e7a8:	f7fa ffc4 	bl	8009734 <HAL_SD_GetCardInfo>
}
 800e7ac:	bf00      	nop
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	20008ad4 	.word	0x20008ad4

0800e7b8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e7c0:	f000 f818 	bl	800e7f4 <BSP_SD_AbortCallback>
}
 800e7c4:	bf00      	nop
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e7d4:	f000 f998 	bl	800eb08 <BSP_SD_WriteCpltCallback>
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e7e8:	f000 f9a0 	bl	800eb2c <BSP_SD_ReadCpltCallback>
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	af00      	add	r7, sp, #0

}
 800e7f8:	bf00      	nop
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e802:	b480      	push	{r7}
 800e804:	b083      	sub	sp, #12
 800e806:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e808:	2301      	movs	r3, #1
 800e80a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	b2db      	uxtb	r3, r3
}
 800e810:	4618      	mov	r0, r3
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800e824:	f004 fd84 	bl	8013330 <osKernelGetTickCount>
 800e828:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800e82a:	e006      	b.n	800e83a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e82c:	f7ff ffa6 	bl	800e77c <BSP_SD_GetCardState>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d101      	bne.n	800e83a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e836:	2300      	movs	r3, #0
 800e838:	e009      	b.n	800e84e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800e83a:	f004 fd79 	bl	8013330 <osKernelGetTickCount>
 800e83e:	4602      	mov	r2, r0
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	d8f0      	bhi.n	800e82c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e84a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	4603      	mov	r3, r0
 800e860:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e862:	4b0b      	ldr	r3, [pc, #44]	; (800e890 <SD_CheckStatus+0x38>)
 800e864:	2201      	movs	r2, #1
 800e866:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e868:	f7ff ff88 	bl	800e77c <BSP_SD_GetCardState>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d107      	bne.n	800e882 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e872:	4b07      	ldr	r3, [pc, #28]	; (800e890 <SD_CheckStatus+0x38>)
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f023 0301 	bic.w	r3, r3, #1
 800e87c:	b2da      	uxtb	r2, r3
 800e87e:	4b04      	ldr	r3, [pc, #16]	; (800e890 <SD_CheckStatus+0x38>)
 800e880:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e882:	4b03      	ldr	r3, [pc, #12]	; (800e890 <SD_CheckStatus+0x38>)
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	b2db      	uxtb	r3, r3
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	20000009 	.word	0x20000009

0800e894 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
 800e89a:	4603      	mov	r3, r0
 800e89c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e89e:	4b1c      	ldr	r3, [pc, #112]	; (800e910 <SD_initialize+0x7c>)
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800e8a4:	f004 fcec 	bl	8013280 <osKernelGetState>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d129      	bne.n	800e902 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e8ae:	f7ff ff0b 	bl	800e6c8 <BSP_SD_Init>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d107      	bne.n	800e8c8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e8b8:	79fb      	ldrb	r3, [r7, #7]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7ff ffcc 	bl	800e858 <SD_CheckStatus>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	4b12      	ldr	r3, [pc, #72]	; (800e910 <SD_initialize+0x7c>)
 800e8c6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e8c8:	4b11      	ldr	r3, [pc, #68]	; (800e910 <SD_initialize+0x7c>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d017      	beq.n	800e902 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800e8d2:	4b10      	ldr	r3, [pc, #64]	; (800e914 <SD_initialize+0x80>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d107      	bne.n	800e8ea <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800e8da:	2200      	movs	r2, #0
 800e8dc:	2102      	movs	r1, #2
 800e8de:	200a      	movs	r0, #10
 800e8e0:	f005 f946 	bl	8013b70 <osMessageQueueNew>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	; (800e914 <SD_initialize+0x80>)
 800e8e8:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800e8ea:	4b0a      	ldr	r3, [pc, #40]	; (800e914 <SD_initialize+0x80>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d107      	bne.n	800e902 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800e8f2:	4b07      	ldr	r3, [pc, #28]	; (800e910 <SD_initialize+0x7c>)
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	f043 0301 	orr.w	r3, r3, #1
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	4b04      	ldr	r3, [pc, #16]	; (800e910 <SD_initialize+0x7c>)
 800e900:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e902:	4b03      	ldr	r3, [pc, #12]	; (800e910 <SD_initialize+0x7c>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	b2db      	uxtb	r3, r3
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	20000009 	.word	0x20000009
 800e914:	20000430 	.word	0x20000430

0800e918 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e922:	79fb      	ldrb	r3, [r7, #7]
 800e924:	4618      	mov	r0, r3
 800e926:	f7ff ff97 	bl	800e858 <SD_CheckStatus>
 800e92a:	4603      	mov	r3, r0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b088      	sub	sp, #32
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	607a      	str	r2, [r7, #4]
 800e93e:	603b      	str	r3, [r7, #0]
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e948:	f247 5030 	movw	r0, #30000	; 0x7530
 800e94c:	f7ff ff66 	bl	800e81c <SD_CheckStatusWithTimeout>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	da01      	bge.n	800e95a <SD_read+0x26>
  {
    return res;
 800e956:	7ffb      	ldrb	r3, [r7, #31]
 800e958:	e02f      	b.n	800e9ba <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	6879      	ldr	r1, [r7, #4]
 800e95e:	68b8      	ldr	r0, [r7, #8]
 800e960:	f7ff fed8 	bl	800e714 <BSP_SD_ReadBlocks_DMA>
 800e964:	4603      	mov	r3, r0
 800e966:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800e968:	7fbb      	ldrb	r3, [r7, #30]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d124      	bne.n	800e9b8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e96e:	4b15      	ldr	r3, [pc, #84]	; (800e9c4 <SD_read+0x90>)
 800e970:	6818      	ldr	r0, [r3, #0]
 800e972:	f107 0112 	add.w	r1, r7, #18
 800e976:	f247 5330 	movw	r3, #30000	; 0x7530
 800e97a:	2200      	movs	r2, #0
 800e97c:	f005 f9f2 	bl	8013d64 <osMessageQueueGet>
 800e980:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d117      	bne.n	800e9b8 <SD_read+0x84>
 800e988:	8a7b      	ldrh	r3, [r7, #18]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d114      	bne.n	800e9b8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800e98e:	f004 fccf 	bl	8013330 <osKernelGetTickCount>
 800e992:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e994:	e007      	b.n	800e9a6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e996:	f7ff fef1 	bl	800e77c <BSP_SD_GetCardState>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d102      	bne.n	800e9a6 <SD_read+0x72>
              {
                res = RES_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e9a4:	e008      	b.n	800e9b8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e9a6:	f004 fcc3 	bl	8013330 <osKernelGetTickCount>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d9ee      	bls.n	800e996 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e9b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3720      	adds	r7, #32
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20000430 	.word	0x20000430

0800e9c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60b9      	str	r1, [r7, #8]
 800e9d0:	607a      	str	r2, [r7, #4]
 800e9d2:	603b      	str	r3, [r7, #0]
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e9dc:	f247 5030 	movw	r0, #30000	; 0x7530
 800e9e0:	f7ff ff1c 	bl	800e81c <SD_CheckStatusWithTimeout>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	da01      	bge.n	800e9ee <SD_write+0x26>
  {
    return res;
 800e9ea:	7ffb      	ldrb	r3, [r7, #31]
 800e9ec:	e02d      	b.n	800ea4a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e9ee:	683a      	ldr	r2, [r7, #0]
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	68b8      	ldr	r0, [r7, #8]
 800e9f4:	f7ff fea8 	bl	800e748 <BSP_SD_WriteBlocks_DMA>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d124      	bne.n	800ea48 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e9fe:	4b15      	ldr	r3, [pc, #84]	; (800ea54 <SD_write+0x8c>)
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	f107 0112 	add.w	r1, r7, #18
 800ea06:	f247 5330 	movw	r3, #30000	; 0x7530
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f005 f9aa 	bl	8013d64 <osMessageQueueGet>
 800ea10:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d117      	bne.n	800ea48 <SD_write+0x80>
 800ea18:	8a7b      	ldrh	r3, [r7, #18]
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d114      	bne.n	800ea48 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ea1e:	f004 fc87 	bl	8013330 <osKernelGetTickCount>
 800ea22:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ea24:	e007      	b.n	800ea36 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ea26:	f7ff fea9 	bl	800e77c <BSP_SD_GetCardState>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d102      	bne.n	800ea36 <SD_write+0x6e>
          {
            res = RES_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	77fb      	strb	r3, [r7, #31]
            break;
 800ea34:	e008      	b.n	800ea48 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ea36:	f004 fc7b 	bl	8013330 <osKernelGetTickCount>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	f247 522f 	movw	r2, #29999	; 0x752f
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d9ee      	bls.n	800ea26 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800ea48:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3720      	adds	r7, #32
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20000430 	.word	0x20000430

0800ea58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08c      	sub	sp, #48	; 0x30
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	603a      	str	r2, [r7, #0]
 800ea62:	71fb      	strb	r3, [r7, #7]
 800ea64:	460b      	mov	r3, r1
 800ea66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ea6e:	4b25      	ldr	r3, [pc, #148]	; (800eb04 <SD_ioctl+0xac>)
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d001      	beq.n	800ea80 <SD_ioctl+0x28>
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	e03c      	b.n	800eafa <SD_ioctl+0xa2>

  switch (cmd)
 800ea80:	79bb      	ldrb	r3, [r7, #6]
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d834      	bhi.n	800eaf0 <SD_ioctl+0x98>
 800ea86:	a201      	add	r2, pc, #4	; (adr r2, 800ea8c <SD_ioctl+0x34>)
 800ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea8c:	0800ea9d 	.word	0x0800ea9d
 800ea90:	0800eaa5 	.word	0x0800eaa5
 800ea94:	0800eabd 	.word	0x0800eabd
 800ea98:	0800ead7 	.word	0x0800ead7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eaa2:	e028      	b.n	800eaf6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eaa4:	f107 030c 	add.w	r3, r7, #12
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff fe77 	bl	800e79c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800eaae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eaba:	e01c      	b.n	800eaf6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eabc:	f107 030c 	add.w	r3, r7, #12
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7ff fe6b 	bl	800e79c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eace:	2300      	movs	r3, #0
 800ead0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ead4:	e00f      	b.n	800eaf6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ead6:	f107 030c 	add.w	r3, r7, #12
 800eada:	4618      	mov	r0, r3
 800eadc:	f7ff fe5e 	bl	800e79c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800eae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae2:	0a5a      	lsrs	r2, r3, #9
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eaee:	e002      	b.n	800eaf6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eaf0:	2304      	movs	r3, #4
 800eaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800eaf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3730      	adds	r7, #48	; 0x30
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20000009 	.word	0x20000009

0800eb08 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800eb0e:	2302      	movs	r3, #2
 800eb10:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800eb12:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <BSP_SD_WriteCpltCallback+0x20>)
 800eb14:	6818      	ldr	r0, [r3, #0]
 800eb16:	1db9      	adds	r1, r7, #6
 800eb18:	2300      	movs	r3, #0
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f005 f8ae 	bl	8013c7c <osMessageQueuePut>
#endif
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	20000430 	.word	0x20000430

0800eb2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800eb32:	2301      	movs	r3, #1
 800eb34:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800eb36:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <BSP_SD_ReadCpltCallback+0x20>)
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	1db9      	adds	r1, r7, #6
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f005 f89c 	bl	8013c7c <osMessageQueuePut>
#endif
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20000430 	.word	0x20000430

0800eb50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800eb60:	f009 f8d0 	bl	8017d04 <malloc>
 800eb64:	4603      	mov	r3, r0
 800eb66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d105      	bne.n	800eb7a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800eb76:	2302      	movs	r3, #2
 800eb78:	e066      	b.n	800ec48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	7c1b      	ldrb	r3, [r3, #16]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d119      	bne.n	800ebbe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eb8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb8e:	2202      	movs	r2, #2
 800eb90:	2181      	movs	r1, #129	; 0x81
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f008 fee9 	bl	801796a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eb9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eba2:	2202      	movs	r2, #2
 800eba4:	2101      	movs	r1, #1
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f008 fedf 	bl	801796a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2210      	movs	r2, #16
 800ebb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ebbc:	e016      	b.n	800ebec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ebbe:	2340      	movs	r3, #64	; 0x40
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	2181      	movs	r1, #129	; 0x81
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f008 fed0 	bl	801796a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebd0:	2340      	movs	r3, #64	; 0x40
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	2101      	movs	r1, #1
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f008 fec7 	bl	801796a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2210      	movs	r2, #16
 800ebe8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ebec:	2308      	movs	r3, #8
 800ebee:	2203      	movs	r2, #3
 800ebf0:	2182      	movs	r1, #130	; 0x82
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f008 feb9 	bl	801796a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	7c1b      	ldrb	r3, [r3, #16]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d109      	bne.n	800ec36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f008 ff8a 	bl	8017b48 <USBD_LL_PrepareReceive>
 800ec34:	e007      	b.n	800ec46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec3c:	2340      	movs	r3, #64	; 0x40
 800ec3e:	2101      	movs	r1, #1
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f008 ff81 	bl	8017b48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ec60:	2181      	movs	r1, #129	; 0x81
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f008 fea7 	bl	80179b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ec6e:	2101      	movs	r1, #1
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f008 fea0 	bl	80179b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ec7e:	2182      	movs	r1, #130	; 0x82
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f008 fe98 	bl	80179b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00e      	beq.n	800ecbe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f009 f82f 	bl	8017d14 <free>
    pdev->pClassData = NULL;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b086      	sub	sp, #24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ecde:	2300      	movs	r3, #0
 800ece0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d03a      	beq.n	800ed68 <USBD_CDC_Setup+0xa0>
 800ecf2:	2b20      	cmp	r3, #32
 800ecf4:	f040 8097 	bne.w	800ee26 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	88db      	ldrh	r3, [r3, #6]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d029      	beq.n	800ed54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	b25b      	sxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	da11      	bge.n	800ed2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ed16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed18:	683a      	ldr	r2, [r7, #0]
 800ed1a:	88d2      	ldrh	r2, [r2, #6]
 800ed1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ed1e:	6939      	ldr	r1, [r7, #16]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	88db      	ldrh	r3, [r3, #6]
 800ed24:	461a      	mov	r2, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f001 fa97 	bl	801025a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ed2c:	e082      	b.n	800ee34 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	785a      	ldrb	r2, [r3, #1]
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	88db      	ldrh	r3, [r3, #6]
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ed44:	6939      	ldr	r1, [r7, #16]
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	88db      	ldrh	r3, [r3, #6]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f001 fab0 	bl	80102b2 <USBD_CtlPrepareRx>
    break;
 800ed52:	e06f      	b.n	800ee34 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	7850      	ldrb	r0, [r2, #1]
 800ed60:	2200      	movs	r2, #0
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	4798      	blx	r3
    break;
 800ed66:	e065      	b.n	800ee34 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	785b      	ldrb	r3, [r3, #1]
 800ed6c:	2b0b      	cmp	r3, #11
 800ed6e:	d84f      	bhi.n	800ee10 <USBD_CDC_Setup+0x148>
 800ed70:	a201      	add	r2, pc, #4	; (adr r2, 800ed78 <USBD_CDC_Setup+0xb0>)
 800ed72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed76:	bf00      	nop
 800ed78:	0800eda9 	.word	0x0800eda9
 800ed7c:	0800ee1f 	.word	0x0800ee1f
 800ed80:	0800ee11 	.word	0x0800ee11
 800ed84:	0800ee11 	.word	0x0800ee11
 800ed88:	0800ee11 	.word	0x0800ee11
 800ed8c:	0800ee11 	.word	0x0800ee11
 800ed90:	0800ee11 	.word	0x0800ee11
 800ed94:	0800ee11 	.word	0x0800ee11
 800ed98:	0800ee11 	.word	0x0800ee11
 800ed9c:	0800ee11 	.word	0x0800ee11
 800eda0:	0800edd1 	.word	0x0800edd1
 800eda4:	0800edf9 	.word	0x0800edf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d107      	bne.n	800edc2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800edb2:	f107 030c 	add.w	r3, r7, #12
 800edb6:	2202      	movs	r2, #2
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f001 fa4d 	bl	801025a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800edc0:	e030      	b.n	800ee24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800edc2:	6839      	ldr	r1, [r7, #0]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f001 f9d7 	bl	8010178 <USBD_CtlError>
        ret = USBD_FAIL;
 800edca:	2303      	movs	r3, #3
 800edcc:	75fb      	strb	r3, [r7, #23]
      break;
 800edce:	e029      	b.n	800ee24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edd6:	2b03      	cmp	r3, #3
 800edd8:	d107      	bne.n	800edea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800edda:	f107 030f 	add.w	r3, r7, #15
 800edde:	2201      	movs	r2, #1
 800ede0:	4619      	mov	r1, r3
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f001 fa39 	bl	801025a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ede8:	e01c      	b.n	800ee24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800edea:	6839      	ldr	r1, [r7, #0]
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f001 f9c3 	bl	8010178 <USBD_CtlError>
        ret = USBD_FAIL;
 800edf2:	2303      	movs	r3, #3
 800edf4:	75fb      	strb	r3, [r7, #23]
      break;
 800edf6:	e015      	b.n	800ee24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d00f      	beq.n	800ee22 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f001 f9b7 	bl	8010178 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ee0e:	e008      	b.n	800ee22 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 f9b0 	bl	8010178 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee18:	2303      	movs	r3, #3
 800ee1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ee1c:	e002      	b.n	800ee24 <USBD_CDC_Setup+0x15c>
      break;
 800ee1e:	bf00      	nop
 800ee20:	e008      	b.n	800ee34 <USBD_CDC_Setup+0x16c>
      break;
 800ee22:	bf00      	nop
    }
    break;
 800ee24:	e006      	b.n	800ee34 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f001 f9a5 	bl	8010178 <USBD_CtlError>
    ret = USBD_FAIL;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	75fb      	strb	r3, [r7, #23]
    break;
 800ee32:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop

0800ee40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e049      	b.n	800eef6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ee6a:	78fa      	ldrb	r2, [r7, #3]
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	440b      	add	r3, r1
 800ee78:	3318      	adds	r3, #24
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d029      	beq.n	800eed4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ee80:	78fa      	ldrb	r2, [r7, #3]
 800ee82:	6879      	ldr	r1, [r7, #4]
 800ee84:	4613      	mov	r3, r2
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4413      	add	r3, r2
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	440b      	add	r3, r1
 800ee8e:	3318      	adds	r3, #24
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	78f9      	ldrb	r1, [r7, #3]
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	460b      	mov	r3, r1
 800ee98:	00db      	lsls	r3, r3, #3
 800ee9a:	1a5b      	subs	r3, r3, r1
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4403      	add	r3, r0
 800eea0:	3344      	adds	r3, #68	; 0x44
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	fbb2 f1f3 	udiv	r1, r2, r3
 800eea8:	fb03 f301 	mul.w	r3, r3, r1
 800eeac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d110      	bne.n	800eed4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800eeb2:	78fa      	ldrb	r2, [r7, #3]
 800eeb4:	6879      	ldr	r1, [r7, #4]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4413      	add	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	440b      	add	r3, r1
 800eec0:	3318      	adds	r3, #24
 800eec2:	2200      	movs	r2, #0
 800eec4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eec6:	78f9      	ldrb	r1, [r7, #3]
 800eec8:	2300      	movs	r3, #0
 800eeca:	2200      	movs	r2, #0
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f008 fe1a 	bl	8017b06 <USBD_LL_Transmit>
 800eed2:	e00f      	b.n	800eef4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eee2:	691b      	ldr	r3, [r3, #16]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eef0:	78fa      	ldrb	r2, [r7, #3]
 800eef2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800eef4:	2300      	movs	r3, #0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b084      	sub	sp, #16
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	460b      	mov	r3, r1
 800ef08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d101      	bne.n	800ef20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	e015      	b.n	800ef4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef20:	78fb      	ldrb	r3, [r7, #3]
 800ef22:	4619      	mov	r1, r3
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f008 fe30 	bl	8017b8a <USBD_LL_GetRxDataSize>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ef46:	4611      	mov	r1, r2
 800ef48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d015      	beq.n	800ef9a <USBD_CDC_EP0_RxReady+0x46>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ef74:	2bff      	cmp	r3, #255	; 0xff
 800ef76:	d010      	beq.n	800ef9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ef86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ef8e:	b292      	uxth	r2, r2
 800ef90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	22ff      	movs	r2, #255	; 0xff
 800ef96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2243      	movs	r2, #67	; 0x43
 800efb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800efb2:	4b03      	ldr	r3, [pc, #12]	; (800efc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr
 800efc0:	20000094 	.word	0x20000094

0800efc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2243      	movs	r2, #67	; 0x43
 800efd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800efd2:	4b03      	ldr	r3, [pc, #12]	; (800efe0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	20000050 	.word	0x20000050

0800efe4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2243      	movs	r2, #67	; 0x43
 800eff0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eff2:	4b03      	ldr	r3, [pc, #12]	; (800f000 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr
 800f000:	200000d8 	.word	0x200000d8

0800f004 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	220a      	movs	r2, #10
 800f010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f012:	4b03      	ldr	r3, [pc, #12]	; (800f020 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f014:	4618      	mov	r0, r3
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	2000000c 	.word	0x2000000c

0800f024 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d101      	bne.n	800f038 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f034:	2303      	movs	r3, #3
 800f036:	e004      	b.n	800f042 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	370c      	adds	r7, #12
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr

0800f04e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f04e:	b480      	push	{r7}
 800f050:	b087      	sub	sp, #28
 800f052:	af00      	add	r7, sp, #0
 800f054:	60f8      	str	r0, [r7, #12]
 800f056:	60b9      	str	r1, [r7, #8]
 800f058:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f060:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	371c      	adds	r7, #28
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f090:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3714      	adds	r7, #20
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	e016      	b.n	800f0f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	7c1b      	ldrb	r3, [r3, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d109      	bne.n	800f0e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0d8:	2101      	movs	r1, #1
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f008 fd34 	bl	8017b48 <USBD_LL_PrepareReceive>
 800f0e0:	e007      	b.n	800f0f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0e8:	2340      	movs	r3, #64	; 0x40
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f008 fd2b 	bl	8017b48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	4613      	mov	r3, r2
 800f108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f110:	2303      	movs	r3, #3
 800f112:	e025      	b.n	800f160 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d003      	beq.n	800f138 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d003      	beq.n	800f146 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2201      	movs	r2, #1
 800f14a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	79fa      	ldrb	r2, [r7, #7]
 800f152:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f008 fba1 	bl	801789c <USBD_LL_Init>
 800f15a:	4603      	mov	r3, r0
 800f15c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3718      	adds	r7, #24
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f172:	2300      	movs	r3, #0
 800f174:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e010      	b.n	800f1a2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f190:	f107 020e 	add.w	r2, r7, #14
 800f194:	4610      	mov	r0, r2
 800f196:	4798      	blx	r3
 800f198:	4602      	mov	r2, r0
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f008 fbbe 	bl	8017934 <USBD_LL_Start>
 800f1b8:	4603      	mov	r3, r0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b083      	sub	sp, #12
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d009      	beq.n	800f206 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	78fa      	ldrb	r2, [r7, #3]
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	4798      	blx	r3
 800f202:	4603      	mov	r3, r0
 800f204:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f206:	7bfb      	ldrb	r3, [r7, #15]
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	460b      	mov	r3, r1
 800f21a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f222:	2b00      	cmp	r3, #0
 800f224:	d007      	beq.n	800f236 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	78fa      	ldrb	r2, [r7, #3]
 800f230:	4611      	mov	r1, r2
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	4798      	blx	r3
  }

  return USBD_OK;
 800f236:	2300      	movs	r3, #0
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 ff56 	bl	8010104 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2201      	movs	r2, #1
 800f25c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f266:	461a      	mov	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f274:	f003 031f 	and.w	r3, r3, #31
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d00e      	beq.n	800f29a <USBD_LL_SetupStage+0x5a>
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d302      	bcc.n	800f286 <USBD_LL_SetupStage+0x46>
 800f280:	2b02      	cmp	r3, #2
 800f282:	d014      	beq.n	800f2ae <USBD_LL_SetupStage+0x6e>
 800f284:	e01d      	b.n	800f2c2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fa18 	bl	800f6c4 <USBD_StdDevReq>
 800f294:	4603      	mov	r3, r0
 800f296:	73fb      	strb	r3, [r7, #15]
      break;
 800f298:	e020      	b.n	800f2dc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fa7c 	bl	800f7a0 <USBD_StdItfReq>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f2ac:	e016      	b.n	800f2dc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 fab8 	bl	800f82c <USBD_StdEPReq>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	73fb      	strb	r3, [r7, #15]
      break;
 800f2c0:	e00c      	b.n	800f2dc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f2c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f008 fb8f 	bl	80179f4 <USBD_LL_StallEP>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800f2da:	bf00      	nop
  }

  return ret;
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b086      	sub	sp, #24
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	60f8      	str	r0, [r7, #12]
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f2f4:	7afb      	ldrb	r3, [r7, #11]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d137      	bne.n	800f36a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f300:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f308:	2b03      	cmp	r3, #3
 800f30a:	d14a      	bne.n	800f3a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	689a      	ldr	r2, [r3, #8]
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	429a      	cmp	r2, r3
 800f316:	d913      	bls.n	800f340 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	689a      	ldr	r2, [r3, #8]
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	1ad2      	subs	r2, r2, r3
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	68da      	ldr	r2, [r3, #12]
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	4293      	cmp	r3, r2
 800f330:	bf28      	it	cs
 800f332:	4613      	movcs	r3, r2
 800f334:	461a      	mov	r2, r3
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 ffd7 	bl	80102ec <USBD_CtlContinueRx>
 800f33e:	e030      	b.n	800f3a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00a      	beq.n	800f362 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f352:	2b03      	cmp	r3, #3
 800f354:	d105      	bne.n	800f362 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f000 ffd3 	bl	801030e <USBD_CtlSendStatus>
 800f368:	e01b      	b.n	800f3a2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f370:	699b      	ldr	r3, [r3, #24]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d013      	beq.n	800f39e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f37c:	2b03      	cmp	r3, #3
 800f37e:	d10e      	bne.n	800f39e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f386:	699b      	ldr	r3, [r3, #24]
 800f388:	7afa      	ldrb	r2, [r7, #11]
 800f38a:	4611      	mov	r1, r2
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	4798      	blx	r3
 800f390:	4603      	mov	r3, r0
 800f392:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f394:	7dfb      	ldrb	r3, [r7, #23]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d003      	beq.n	800f3a2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
 800f39c:	e002      	b.n	800f3a4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f39e:	2303      	movs	r3, #3
 800f3a0:	e000      	b.n	800f3a4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f3a2:	2300      	movs	r3, #0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3718      	adds	r7, #24
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f3ba:	7afb      	ldrb	r3, [r7, #11]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d16a      	bne.n	800f496 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	3314      	adds	r3, #20
 800f3c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d155      	bne.n	800f47c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	689a      	ldr	r2, [r3, #8]
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d914      	bls.n	800f406 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	689a      	ldr	r2, [r3, #8]
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	1ad2      	subs	r2, r2, r3
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f000 ff4c 	bl	8010290 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f008 fba2 	bl	8017b48 <USBD_LL_PrepareReceive>
 800f404:	e03a      	b.n	800f47c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	68da      	ldr	r2, [r3, #12]
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d11c      	bne.n	800f44c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d316      	bcc.n	800f44c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f428:	429a      	cmp	r2, r3
 800f42a:	d20f      	bcs.n	800f44c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f42c:	2200      	movs	r2, #0
 800f42e:	2100      	movs	r1, #0
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f000 ff2d 	bl	8010290 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f43e:	2300      	movs	r3, #0
 800f440:	2200      	movs	r2, #0
 800f442:	2100      	movs	r1, #0
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f008 fb7f 	bl	8017b48 <USBD_LL_PrepareReceive>
 800f44a:	e017      	b.n	800f47c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00a      	beq.n	800f46e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d105      	bne.n	800f46e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f46e:	2180      	movs	r1, #128	; 0x80
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f008 fabf 	bl	80179f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f000 ff5c 	bl	8010334 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f482:	2b01      	cmp	r3, #1
 800f484:	d123      	bne.n	800f4ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f7ff fe9b 	bl	800f1c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2200      	movs	r2, #0
 800f490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f494:	e01b      	b.n	800f4ce <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d013      	beq.n	800f4ca <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f4a8:	2b03      	cmp	r3, #3
 800f4aa:	d10e      	bne.n	800f4ca <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b2:	695b      	ldr	r3, [r3, #20]
 800f4b4:	7afa      	ldrb	r2, [r7, #11]
 800f4b6:	4611      	mov	r1, r2
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	4798      	blx	r3
 800f4bc:	4603      	mov	r3, r0
 800f4be:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f4c0:	7dfb      	ldrb	r3, [r7, #23]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d003      	beq.n	800f4ce <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f4c6:	7dfb      	ldrb	r3, [r7, #23]
 800f4c8:	e002      	b.n	800f4d0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	e000      	b.n	800f4d0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3718      	adds	r7, #24
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f504:	2b00      	cmp	r3, #0
 800f506:	d009      	beq.n	800f51c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	6852      	ldr	r2, [r2, #4]
 800f514:	b2d2      	uxtb	r2, r2
 800f516:	4611      	mov	r1, r2
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f51c:	2340      	movs	r3, #64	; 0x40
 800f51e:	2200      	movs	r2, #0
 800f520:	2100      	movs	r1, #0
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f008 fa21 	bl	801796a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2240      	movs	r2, #64	; 0x40
 800f534:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f538:	2340      	movs	r3, #64	; 0x40
 800f53a:	2200      	movs	r2, #0
 800f53c:	2180      	movs	r1, #128	; 0x80
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f008 fa13 	bl	801796a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2240      	movs	r2, #64	; 0x40
 800f54e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f55a:	b480      	push	{r7}
 800f55c:	b083      	sub	sp, #12
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	460b      	mov	r3, r1
 800f564:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	78fa      	ldrb	r2, [r7, #3]
 800f56a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	370c      	adds	r7, #12
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr

0800f57a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f57a:	b480      	push	{r7}
 800f57c:	b083      	sub	sp, #12
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2204      	movs	r2, #4
 800f592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f596:	2300      	movs	r3, #0
}
 800f598:	4618      	mov	r0, r3
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5b2:	2b04      	cmp	r3, #4
 800f5b4:	d105      	bne.n	800f5c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5de:	2b03      	cmp	r3, #3
 800f5e0:	d10b      	bne.n	800f5fa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5e8:	69db      	ldr	r3, [r3, #28]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d005      	beq.n	800f5fa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5f4:	69db      	ldr	r3, [r3, #28]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	460b      	mov	r3, r1
 800f60e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	370c      	adds	r7, #12
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr

0800f61e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f61e:	b480      	push	{r7}
 800f620:	b083      	sub	sp, #12
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
 800f626:	460b      	mov	r3, r1
 800f628:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	370c      	adds	r7, #12
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f664:	2b00      	cmp	r3, #0
 800f666:	d009      	beq.n	800f67c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	6852      	ldr	r2, [r2, #4]
 800f674:	b2d2      	uxtb	r2, r2
 800f676:	4611      	mov	r1, r2
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	4798      	blx	r3
  }

  return USBD_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f686:	b480      	push	{r7}
 800f688:	b087      	sub	sp, #28
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	3301      	adds	r3, #1
 800f69c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f6a4:	8a3b      	ldrh	r3, [r7, #16]
 800f6a6:	021b      	lsls	r3, r3, #8
 800f6a8:	b21a      	sxth	r2, r3
 800f6aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	b21b      	sxth	r3, r3
 800f6b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f6b4:	89fb      	ldrh	r3, [r7, #14]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	371c      	adds	r7, #28
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
	...

0800f6c4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6da:	2b20      	cmp	r3, #32
 800f6dc:	d004      	beq.n	800f6e8 <USBD_StdDevReq+0x24>
 800f6de:	2b40      	cmp	r3, #64	; 0x40
 800f6e0:	d002      	beq.n	800f6e8 <USBD_StdDevReq+0x24>
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00a      	beq.n	800f6fc <USBD_StdDevReq+0x38>
 800f6e6:	e050      	b.n	800f78a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	6839      	ldr	r1, [r7, #0]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	4798      	blx	r3
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6fa:	e04b      	b.n	800f794 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	785b      	ldrb	r3, [r3, #1]
 800f700:	2b09      	cmp	r3, #9
 800f702:	d83c      	bhi.n	800f77e <USBD_StdDevReq+0xba>
 800f704:	a201      	add	r2, pc, #4	; (adr r2, 800f70c <USBD_StdDevReq+0x48>)
 800f706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70a:	bf00      	nop
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f775 	.word	0x0800f775
 800f714:	0800f77f 	.word	0x0800f77f
 800f718:	0800f76b 	.word	0x0800f76b
 800f71c:	0800f77f 	.word	0x0800f77f
 800f720:	0800f73f 	.word	0x0800f73f
 800f724:	0800f735 	.word	0x0800f735
 800f728:	0800f77f 	.word	0x0800f77f
 800f72c:	0800f757 	.word	0x0800f757
 800f730:	0800f749 	.word	0x0800f749
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 f9ce 	bl	800fad8 <USBD_GetDescriptor>
      break;
 800f73c:	e024      	b.n	800f788 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f73e:	6839      	ldr	r1, [r7, #0]
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 fb5d 	bl	800fe00 <USBD_SetAddress>
      break;
 800f746:	e01f      	b.n	800f788 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fb9a 	bl	800fe84 <USBD_SetConfig>
 800f750:	4603      	mov	r3, r0
 800f752:	73fb      	strb	r3, [r7, #15]
      break;
 800f754:	e018      	b.n	800f788 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f756:	6839      	ldr	r1, [r7, #0]
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 fc37 	bl	800ffcc <USBD_GetConfig>
      break;
 800f75e:	e013      	b.n	800f788 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fc66 	bl	8010034 <USBD_GetStatus>
      break;
 800f768:	e00e      	b.n	800f788 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fc94 	bl	801009a <USBD_SetFeature>
      break;
 800f772:	e009      	b.n	800f788 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 fca3 	bl	80100c2 <USBD_ClrFeature>
      break;
 800f77c:	e004      	b.n	800f788 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fcf9 	bl	8010178 <USBD_CtlError>
      break;
 800f786:	bf00      	nop
    }
    break;
 800f788:	e004      	b.n	800f794 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 fcf3 	bl	8010178 <USBD_CtlError>
    break;
 800f792:	bf00      	nop
  }

  return ret;
 800f794:	7bfb      	ldrb	r3, [r7, #15]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop

0800f7a0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7b6:	2b20      	cmp	r3, #32
 800f7b8:	d003      	beq.n	800f7c2 <USBD_StdItfReq+0x22>
 800f7ba:	2b40      	cmp	r3, #64	; 0x40
 800f7bc:	d001      	beq.n	800f7c2 <USBD_StdItfReq+0x22>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d12a      	bne.n	800f818 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d81d      	bhi.n	800f80a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	889b      	ldrh	r3, [r3, #4]
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d813      	bhi.n	800f800 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	6839      	ldr	r1, [r7, #0]
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	4798      	blx	r3
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	88db      	ldrh	r3, [r3, #6]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d110      	bne.n	800f814 <USBD_StdItfReq+0x74>
 800f7f2:	7bfb      	ldrb	r3, [r7, #15]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d10d      	bne.n	800f814 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fd88 	bl	801030e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f7fe:	e009      	b.n	800f814 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fcb8 	bl	8010178 <USBD_CtlError>
      break;
 800f808:	e004      	b.n	800f814 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fcb3 	bl	8010178 <USBD_CtlError>
      break;
 800f812:	e000      	b.n	800f816 <USBD_StdItfReq+0x76>
      break;
 800f814:	bf00      	nop
    }
    break;
 800f816:	e004      	b.n	800f822 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f818:	6839      	ldr	r1, [r7, #0]
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 fcac 	bl	8010178 <USBD_CtlError>
    break;
 800f820:	bf00      	nop
  }

  return ret;
 800f822:	7bfb      	ldrb	r3, [r7, #15]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	889b      	ldrh	r3, [r3, #4]
 800f83e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f848:	2b20      	cmp	r3, #32
 800f84a:	d004      	beq.n	800f856 <USBD_StdEPReq+0x2a>
 800f84c:	2b40      	cmp	r3, #64	; 0x40
 800f84e:	d002      	beq.n	800f856 <USBD_StdEPReq+0x2a>
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00a      	beq.n	800f86a <USBD_StdEPReq+0x3e>
 800f854:	e135      	b.n	800fac2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	4798      	blx	r3
 800f864:	4603      	mov	r3, r0
 800f866:	73fb      	strb	r3, [r7, #15]
    break;
 800f868:	e130      	b.n	800facc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	785b      	ldrb	r3, [r3, #1]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d03e      	beq.n	800f8f0 <USBD_StdEPReq+0xc4>
 800f872:	2b03      	cmp	r3, #3
 800f874:	d002      	beq.n	800f87c <USBD_StdEPReq+0x50>
 800f876:	2b00      	cmp	r3, #0
 800f878:	d077      	beq.n	800f96a <USBD_StdEPReq+0x13e>
 800f87a:	e11c      	b.n	800fab6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f882:	2b02      	cmp	r3, #2
 800f884:	d002      	beq.n	800f88c <USBD_StdEPReq+0x60>
 800f886:	2b03      	cmp	r3, #3
 800f888:	d015      	beq.n	800f8b6 <USBD_StdEPReq+0x8a>
 800f88a:	e02b      	b.n	800f8e4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f88c:	7bbb      	ldrb	r3, [r7, #14]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00c      	beq.n	800f8ac <USBD_StdEPReq+0x80>
 800f892:	7bbb      	ldrb	r3, [r7, #14]
 800f894:	2b80      	cmp	r3, #128	; 0x80
 800f896:	d009      	beq.n	800f8ac <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f898:	7bbb      	ldrb	r3, [r7, #14]
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f008 f8a9 	bl	80179f4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8a2:	2180      	movs	r1, #128	; 0x80
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f008 f8a5 	bl	80179f4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f8aa:	e020      	b.n	800f8ee <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f8ac:	6839      	ldr	r1, [r7, #0]
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 fc62 	bl	8010178 <USBD_CtlError>
        break;
 800f8b4:	e01b      	b.n	800f8ee <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	885b      	ldrh	r3, [r3, #2]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d10e      	bne.n	800f8dc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f8be:	7bbb      	ldrb	r3, [r7, #14]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00b      	beq.n	800f8dc <USBD_StdEPReq+0xb0>
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	2b80      	cmp	r3, #128	; 0x80
 800f8c8:	d008      	beq.n	800f8dc <USBD_StdEPReq+0xb0>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	88db      	ldrh	r3, [r3, #6]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d104      	bne.n	800f8dc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8d2:	7bbb      	ldrb	r3, [r7, #14]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f008 f88c 	bl	80179f4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 fd16 	bl	801030e <USBD_CtlSendStatus>

        break;
 800f8e2:	e004      	b.n	800f8ee <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f8e4:	6839      	ldr	r1, [r7, #0]
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fc46 	bl	8010178 <USBD_CtlError>
        break;
 800f8ec:	bf00      	nop
      }
      break;
 800f8ee:	e0e7      	b.n	800fac0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d002      	beq.n	800f900 <USBD_StdEPReq+0xd4>
 800f8fa:	2b03      	cmp	r3, #3
 800f8fc:	d015      	beq.n	800f92a <USBD_StdEPReq+0xfe>
 800f8fe:	e02d      	b.n	800f95c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f900:	7bbb      	ldrb	r3, [r7, #14]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00c      	beq.n	800f920 <USBD_StdEPReq+0xf4>
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	2b80      	cmp	r3, #128	; 0x80
 800f90a:	d009      	beq.n	800f920 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
 800f90e:	4619      	mov	r1, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f008 f86f 	bl	80179f4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f916:	2180      	movs	r1, #128	; 0x80
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f008 f86b 	bl	80179f4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f91e:	e023      	b.n	800f968 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f920:	6839      	ldr	r1, [r7, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 fc28 	bl	8010178 <USBD_CtlError>
        break;
 800f928:	e01e      	b.n	800f968 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	885b      	ldrh	r3, [r3, #2]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d119      	bne.n	800f966 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f932:	7bbb      	ldrb	r3, [r7, #14]
 800f934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d004      	beq.n	800f946 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f93c:	7bbb      	ldrb	r3, [r7, #14]
 800f93e:	4619      	mov	r1, r3
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f008 f876 	bl	8017a32 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 fce1 	bl	801030e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	4798      	blx	r3
        }
        break;
 800f95a:	e004      	b.n	800f966 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fc0a 	bl	8010178 <USBD_CtlError>
        break;
 800f964:	e000      	b.n	800f968 <USBD_StdEPReq+0x13c>
        break;
 800f966:	bf00      	nop
      }
      break;
 800f968:	e0aa      	b.n	800fac0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f970:	2b02      	cmp	r3, #2
 800f972:	d002      	beq.n	800f97a <USBD_StdEPReq+0x14e>
 800f974:	2b03      	cmp	r3, #3
 800f976:	d032      	beq.n	800f9de <USBD_StdEPReq+0x1b2>
 800f978:	e097      	b.n	800faaa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d007      	beq.n	800f990 <USBD_StdEPReq+0x164>
 800f980:	7bbb      	ldrb	r3, [r7, #14]
 800f982:	2b80      	cmp	r3, #128	; 0x80
 800f984:	d004      	beq.n	800f990 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 fbf5 	bl	8010178 <USBD_CtlError>
          break;
 800f98e:	e091      	b.n	800fab4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f994:	2b00      	cmp	r3, #0
 800f996:	da0b      	bge.n	800f9b0 <USBD_StdEPReq+0x184>
 800f998:	7bbb      	ldrb	r3, [r7, #14]
 800f99a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f99e:	4613      	mov	r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	4413      	add	r3, r2
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	3310      	adds	r3, #16
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	e00b      	b.n	800f9c8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f9b0:	7bbb      	ldrb	r3, [r7, #14]
 800f9b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	4413      	add	r3, r2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	2202      	movs	r2, #2
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fc3f 	bl	801025a <USBD_CtlSendData>
        break;
 800f9dc:	e06a      	b.n	800fab4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f9de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	da11      	bge.n	800fa0a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f9e6:	7bbb      	ldrb	r3, [r7, #14]
 800f9e8:	f003 020f 	and.w	r2, r3, #15
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4413      	add	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	440b      	add	r3, r1
 800f9f8:	3324      	adds	r3, #36	; 0x24
 800f9fa:	881b      	ldrh	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d117      	bne.n	800fa30 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fa00:	6839      	ldr	r1, [r7, #0]
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 fbb8 	bl	8010178 <USBD_CtlError>
            break;
 800fa08:	e054      	b.n	800fab4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa0a:	7bbb      	ldrb	r3, [r7, #14]
 800fa0c:	f003 020f 	and.w	r2, r3, #15
 800fa10:	6879      	ldr	r1, [r7, #4]
 800fa12:	4613      	mov	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	4413      	add	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	440b      	add	r3, r1
 800fa1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa20:	881b      	ldrh	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d104      	bne.n	800fa30 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fa26:	6839      	ldr	r1, [r7, #0]
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 fba5 	bl	8010178 <USBD_CtlError>
            break;
 800fa2e:	e041      	b.n	800fab4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	da0b      	bge.n	800fa50 <USBD_StdEPReq+0x224>
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
 800fa3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa3e:	4613      	mov	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	3310      	adds	r3, #16
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	e00b      	b.n	800fa68 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fa50:	7bbb      	ldrb	r3, [r7, #14]
 800fa52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa56:	4613      	mov	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	4413      	add	r3, r2
 800fa66:	3304      	adds	r3, #4
 800fa68:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa6a:	7bbb      	ldrb	r3, [r7, #14]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d002      	beq.n	800fa76 <USBD_StdEPReq+0x24a>
 800fa70:	7bbb      	ldrb	r3, [r7, #14]
 800fa72:	2b80      	cmp	r3, #128	; 0x80
 800fa74:	d103      	bne.n	800fa7e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	e00e      	b.n	800fa9c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa7e:	7bbb      	ldrb	r3, [r7, #14]
 800fa80:	4619      	mov	r1, r3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f007 fff4 	bl	8017a70 <USBD_LL_IsStallEP>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	2201      	movs	r2, #1
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	e002      	b.n	800fa9c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fbd9 	bl	801025a <USBD_CtlSendData>
          break;
 800faa8:	e004      	b.n	800fab4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fb63 	bl	8010178 <USBD_CtlError>
        break;
 800fab2:	bf00      	nop
      }
      break;
 800fab4:	e004      	b.n	800fac0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 fb5d 	bl	8010178 <USBD_CtlError>
      break;
 800fabe:	bf00      	nop
    }
    break;
 800fac0:	e004      	b.n	800facc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fb57 	bl	8010178 <USBD_CtlError>
    break;
 800faca:	bf00      	nop
  }

  return ret;
 800facc:	7bfb      	ldrb	r3, [r7, #15]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fae2:	2300      	movs	r3, #0
 800fae4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fae6:	2300      	movs	r3, #0
 800fae8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800faea:	2300      	movs	r3, #0
 800faec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	885b      	ldrh	r3, [r3, #2]
 800faf2:	0a1b      	lsrs	r3, r3, #8
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	3b01      	subs	r3, #1
 800faf8:	2b0e      	cmp	r3, #14
 800fafa:	f200 8152 	bhi.w	800fda2 <USBD_GetDescriptor+0x2ca>
 800fafe:	a201      	add	r2, pc, #4	; (adr r2, 800fb04 <USBD_GetDescriptor+0x2c>)
 800fb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb04:	0800fb75 	.word	0x0800fb75
 800fb08:	0800fb8d 	.word	0x0800fb8d
 800fb0c:	0800fbcd 	.word	0x0800fbcd
 800fb10:	0800fda3 	.word	0x0800fda3
 800fb14:	0800fda3 	.word	0x0800fda3
 800fb18:	0800fd43 	.word	0x0800fd43
 800fb1c:	0800fd6f 	.word	0x0800fd6f
 800fb20:	0800fda3 	.word	0x0800fda3
 800fb24:	0800fda3 	.word	0x0800fda3
 800fb28:	0800fda3 	.word	0x0800fda3
 800fb2c:	0800fda3 	.word	0x0800fda3
 800fb30:	0800fda3 	.word	0x0800fda3
 800fb34:	0800fda3 	.word	0x0800fda3
 800fb38:	0800fda3 	.word	0x0800fda3
 800fb3c:	0800fb41 	.word	0x0800fb41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb46:	69db      	ldr	r3, [r3, #28]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00b      	beq.n	800fb64 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb52:	69db      	ldr	r3, [r3, #28]
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	7c12      	ldrb	r2, [r2, #16]
 800fb58:	f107 0108 	add.w	r1, r7, #8
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	4798      	blx	r3
 800fb60:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fb62:	e126      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fb64:	6839      	ldr	r1, [r7, #0]
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 fb06 	bl	8010178 <USBD_CtlError>
      err++;
 800fb6c:	7afb      	ldrb	r3, [r7, #11]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	72fb      	strb	r3, [r7, #11]
    break;
 800fb72:	e11e      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	7c12      	ldrb	r2, [r2, #16]
 800fb80:	f107 0108 	add.w	r1, r7, #8
 800fb84:	4610      	mov	r0, r2
 800fb86:	4798      	blx	r3
 800fb88:	60f8      	str	r0, [r7, #12]
    break;
 800fb8a:	e112      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	7c1b      	ldrb	r3, [r3, #16]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10d      	bne.n	800fbb0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb9c:	f107 0208 	add.w	r2, r7, #8
 800fba0:	4610      	mov	r0, r2
 800fba2:	4798      	blx	r3
 800fba4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	2202      	movs	r2, #2
 800fbac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fbae:	e100      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb8:	f107 0208 	add.w	r2, r7, #8
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	4798      	blx	r3
 800fbc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	701a      	strb	r2, [r3, #0]
    break;
 800fbca:	e0f2      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	885b      	ldrh	r3, [r3, #2]
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	2b05      	cmp	r3, #5
 800fbd4:	f200 80ac 	bhi.w	800fd30 <USBD_GetDescriptor+0x258>
 800fbd8:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <USBD_GetDescriptor+0x108>)
 800fbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbde:	bf00      	nop
 800fbe0:	0800fbf9 	.word	0x0800fbf9
 800fbe4:	0800fc2d 	.word	0x0800fc2d
 800fbe8:	0800fc61 	.word	0x0800fc61
 800fbec:	0800fc95 	.word	0x0800fc95
 800fbf0:	0800fcc9 	.word	0x0800fcc9
 800fbf4:	0800fcfd 	.word	0x0800fcfd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00b      	beq.n	800fc1c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	7c12      	ldrb	r2, [r2, #16]
 800fc10:	f107 0108 	add.w	r1, r7, #8
 800fc14:	4610      	mov	r0, r2
 800fc16:	4798      	blx	r3
 800fc18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc1a:	e091      	b.n	800fd40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fc1c:	6839      	ldr	r1, [r7, #0]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 faaa 	bl	8010178 <USBD_CtlError>
        err++;
 800fc24:	7afb      	ldrb	r3, [r7, #11]
 800fc26:	3301      	adds	r3, #1
 800fc28:	72fb      	strb	r3, [r7, #11]
      break;
 800fc2a:	e089      	b.n	800fd40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00b      	beq.n	800fc50 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	7c12      	ldrb	r2, [r2, #16]
 800fc44:	f107 0108 	add.w	r1, r7, #8
 800fc48:	4610      	mov	r0, r2
 800fc4a:	4798      	blx	r3
 800fc4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc4e:	e077      	b.n	800fd40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fc50:	6839      	ldr	r1, [r7, #0]
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 fa90 	bl	8010178 <USBD_CtlError>
        err++;
 800fc58:	7afb      	ldrb	r3, [r7, #11]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	72fb      	strb	r3, [r7, #11]
      break;
 800fc5e:	e06f      	b.n	800fd40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00b      	beq.n	800fc84 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	7c12      	ldrb	r2, [r2, #16]
 800fc78:	f107 0108 	add.w	r1, r7, #8
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	4798      	blx	r3
 800fc80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc82:	e05d      	b.n	800fd40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fa76 	bl	8010178 <USBD_CtlError>
        err++;
 800fc8c:	7afb      	ldrb	r3, [r7, #11]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	72fb      	strb	r3, [r7, #11]
      break;
 800fc92:	e055      	b.n	800fd40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00b      	beq.n	800fcb8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	7c12      	ldrb	r2, [r2, #16]
 800fcac:	f107 0108 	add.w	r1, r7, #8
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	4798      	blx	r3
 800fcb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcb6:	e043      	b.n	800fd40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fcb8:	6839      	ldr	r1, [r7, #0]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fa5c 	bl	8010178 <USBD_CtlError>
        err++;
 800fcc0:	7afb      	ldrb	r3, [r7, #11]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	72fb      	strb	r3, [r7, #11]
      break;
 800fcc6:	e03b      	b.n	800fd40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcce:	695b      	ldr	r3, [r3, #20]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00b      	beq.n	800fcec <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	7c12      	ldrb	r2, [r2, #16]
 800fce0:	f107 0108 	add.w	r1, r7, #8
 800fce4:	4610      	mov	r0, r2
 800fce6:	4798      	blx	r3
 800fce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcea:	e029      	b.n	800fd40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fa42 	bl	8010178 <USBD_CtlError>
        err++;
 800fcf4:	7afb      	ldrb	r3, [r7, #11]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	72fb      	strb	r3, [r7, #11]
      break;
 800fcfa:	e021      	b.n	800fd40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd02:	699b      	ldr	r3, [r3, #24]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00b      	beq.n	800fd20 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	7c12      	ldrb	r2, [r2, #16]
 800fd14:	f107 0108 	add.w	r1, r7, #8
 800fd18:	4610      	mov	r0, r2
 800fd1a:	4798      	blx	r3
 800fd1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd1e:	e00f      	b.n	800fd40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fa28 	bl	8010178 <USBD_CtlError>
        err++;
 800fd28:	7afb      	ldrb	r3, [r7, #11]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	72fb      	strb	r3, [r7, #11]
      break;
 800fd2e:	e007      	b.n	800fd40 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 fa20 	bl	8010178 <USBD_CtlError>
      err++;
 800fd38:	7afb      	ldrb	r3, [r7, #11]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800fd3e:	bf00      	nop
    }
    break;
 800fd40:	e037      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	7c1b      	ldrb	r3, [r3, #16]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d109      	bne.n	800fd5e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd52:	f107 0208 	add.w	r2, r7, #8
 800fd56:	4610      	mov	r0, r2
 800fd58:	4798      	blx	r3
 800fd5a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fd5c:	e029      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fa09 	bl	8010178 <USBD_CtlError>
      err++;
 800fd66:	7afb      	ldrb	r3, [r7, #11]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	72fb      	strb	r3, [r7, #11]
    break;
 800fd6c:	e021      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	7c1b      	ldrb	r3, [r3, #16]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d10d      	bne.n	800fd92 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7e:	f107 0208 	add.w	r2, r7, #8
 800fd82:	4610      	mov	r0, r2
 800fd84:	4798      	blx	r3
 800fd86:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	2207      	movs	r2, #7
 800fd8e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fd90:	e00f      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fd92:	6839      	ldr	r1, [r7, #0]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f9ef 	bl	8010178 <USBD_CtlError>
      err++;
 800fd9a:	7afb      	ldrb	r3, [r7, #11]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	72fb      	strb	r3, [r7, #11]
    break;
 800fda0:	e007      	b.n	800fdb2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800fda2:	6839      	ldr	r1, [r7, #0]
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 f9e7 	bl	8010178 <USBD_CtlError>
    err++;
 800fdaa:	7afb      	ldrb	r3, [r7, #11]
 800fdac:	3301      	adds	r3, #1
 800fdae:	72fb      	strb	r3, [r7, #11]
    break;
 800fdb0:	bf00      	nop
  }

  if (err != 0U)
 800fdb2:	7afb      	ldrb	r3, [r7, #11]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d11e      	bne.n	800fdf6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	88db      	ldrh	r3, [r3, #6]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d016      	beq.n	800fdee <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800fdc0:	893b      	ldrh	r3, [r7, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00e      	beq.n	800fde4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	88da      	ldrh	r2, [r3, #6]
 800fdca:	893b      	ldrh	r3, [r7, #8]
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	bf28      	it	cs
 800fdd0:	4613      	movcs	r3, r2
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fdd6:	893b      	ldrh	r3, [r7, #8]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	68f9      	ldr	r1, [r7, #12]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fa3c 	bl	801025a <USBD_CtlSendData>
 800fde2:	e009      	b.n	800fdf8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fde4:	6839      	ldr	r1, [r7, #0]
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f9c6 	bl	8010178 <USBD_CtlError>
 800fdec:	e004      	b.n	800fdf8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 fa8d 	bl	801030e <USBD_CtlSendStatus>
 800fdf4:	e000      	b.n	800fdf8 <USBD_GetDescriptor+0x320>
    return;
 800fdf6:	bf00      	nop
    }
  }
}
 800fdf8:	3710      	adds	r7, #16
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop

0800fe00 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	889b      	ldrh	r3, [r3, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d130      	bne.n	800fe74 <USBD_SetAddress+0x74>
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	88db      	ldrh	r3, [r3, #6]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d12c      	bne.n	800fe74 <USBD_SetAddress+0x74>
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	885b      	ldrh	r3, [r3, #2]
 800fe1e:	2b7f      	cmp	r3, #127	; 0x7f
 800fe20:	d828      	bhi.n	800fe74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	885b      	ldrh	r3, [r3, #2]
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe34:	2b03      	cmp	r3, #3
 800fe36:	d104      	bne.n	800fe42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800fe38:	6839      	ldr	r1, [r7, #0]
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 f99c 	bl	8010178 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe40:	e01c      	b.n	800fe7c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7bfa      	ldrb	r2, [r7, #15]
 800fe46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f007 fe3a 	bl	8017ac8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fa5a 	bl	801030e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2202      	movs	r2, #2
 800fe64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe68:	e008      	b.n	800fe7c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe72:	e003      	b.n	800fe7c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe74:	6839      	ldr	r1, [r7, #0]
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 f97e 	bl	8010178 <USBD_CtlError>
  }
}
 800fe7c:	bf00      	nop
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	885b      	ldrh	r3, [r3, #2]
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	4b4b      	ldr	r3, [pc, #300]	; (800ffc8 <USBD_SetConfig+0x144>)
 800fe9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe9c:	4b4a      	ldr	r3, [pc, #296]	; (800ffc8 <USBD_SetConfig+0x144>)
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d905      	bls.n	800feb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fea4:	6839      	ldr	r1, [r7, #0]
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 f966 	bl	8010178 <USBD_CtlError>
    return USBD_FAIL;
 800feac:	2303      	movs	r3, #3
 800feae:	e087      	b.n	800ffc0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d002      	beq.n	800fec0 <USBD_SetConfig+0x3c>
 800feba:	2b03      	cmp	r3, #3
 800febc:	d025      	beq.n	800ff0a <USBD_SetConfig+0x86>
 800febe:	e071      	b.n	800ffa4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fec0:	4b41      	ldr	r3, [pc, #260]	; (800ffc8 <USBD_SetConfig+0x144>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d01c      	beq.n	800ff02 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800fec8:	4b3f      	ldr	r3, [pc, #252]	; (800ffc8 <USBD_SetConfig+0x144>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	461a      	mov	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fed2:	4b3d      	ldr	r3, [pc, #244]	; (800ffc8 <USBD_SetConfig+0x144>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff f97d 	bl	800f1d8 <USBD_SetClassConfig>
 800fede:	4603      	mov	r3, r0
 800fee0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fee2:	7bfb      	ldrb	r3, [r7, #15]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d004      	beq.n	800fef2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f944 	bl	8010178 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fef0:	e065      	b.n	800ffbe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 fa0b 	bl	801030e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2203      	movs	r2, #3
 800fefc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ff00:	e05d      	b.n	800ffbe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fa03 	bl	801030e <USBD_CtlSendStatus>
    break;
 800ff08:	e059      	b.n	800ffbe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ff0a:	4b2f      	ldr	r3, [pc, #188]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d112      	bne.n	800ff38 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2202      	movs	r2, #2
 800ff16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ff1a:	4b2b      	ldr	r3, [pc, #172]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff24:	4b28      	ldr	r3, [pc, #160]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7ff f970 	bl	800f210 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f9ec 	bl	801030e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ff36:	e042      	b.n	800ffbe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ff38:	4b23      	ldr	r3, [pc, #140]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d02a      	beq.n	800ff9c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff f95e 	bl	800f210 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ff54:	4b1c      	ldr	r3, [pc, #112]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff5e:	4b1a      	ldr	r3, [pc, #104]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff f937 	bl	800f1d8 <USBD_SetClassConfig>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00f      	beq.n	800ff94 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 f8fe 	bl	8010178 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	4619      	mov	r1, r3
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f7ff f943 	bl	800f210 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ff92:	e014      	b.n	800ffbe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f9ba 	bl	801030e <USBD_CtlSendStatus>
    break;
 800ff9a:	e010      	b.n	800ffbe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 f9b6 	bl	801030e <USBD_CtlSendStatus>
    break;
 800ffa2:	e00c      	b.n	800ffbe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ffa4:	6839      	ldr	r1, [r7, #0]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f8e6 	bl	8010178 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ffac:	4b06      	ldr	r3, [pc, #24]	; (800ffc8 <USBD_SetConfig+0x144>)
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff f92c 	bl	800f210 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ffb8:	2303      	movs	r3, #3
 800ffba:	73fb      	strb	r3, [r7, #15]
    break;
 800ffbc:	bf00      	nop
  }

  return ret;
 800ffbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3710      	adds	r7, #16
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	20000434 	.word	0x20000434

0800ffcc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	88db      	ldrh	r3, [r3, #6]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d004      	beq.n	800ffe8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ffde:	6839      	ldr	r1, [r7, #0]
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 f8c9 	bl	8010178 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ffe6:	e021      	b.n	801002c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	db17      	blt.n	8010022 <USBD_GetConfig+0x56>
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	dd02      	ble.n	800fffc <USBD_GetConfig+0x30>
 800fff6:	2b03      	cmp	r3, #3
 800fff8:	d00b      	beq.n	8010012 <USBD_GetConfig+0x46>
 800fffa:	e012      	b.n	8010022 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3308      	adds	r3, #8
 8010006:	2201      	movs	r2, #1
 8010008:	4619      	mov	r1, r3
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f925 	bl	801025a <USBD_CtlSendData>
      break;
 8010010:	e00c      	b.n	801002c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	3304      	adds	r3, #4
 8010016:	2201      	movs	r2, #1
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f91d 	bl	801025a <USBD_CtlSendData>
      break;
 8010020:	e004      	b.n	801002c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8010022:	6839      	ldr	r1, [r7, #0]
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 f8a7 	bl	8010178 <USBD_CtlError>
      break;
 801002a:	bf00      	nop
}
 801002c:	bf00      	nop
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010044:	3b01      	subs	r3, #1
 8010046:	2b02      	cmp	r3, #2
 8010048:	d81e      	bhi.n	8010088 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	88db      	ldrh	r3, [r3, #6]
 801004e:	2b02      	cmp	r3, #2
 8010050:	d004      	beq.n	801005c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010052:	6839      	ldr	r1, [r7, #0]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f000 f88f 	bl	8010178 <USBD_CtlError>
      break;
 801005a:	e01a      	b.n	8010092 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010068:	2b00      	cmp	r3, #0
 801006a:	d005      	beq.n	8010078 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	f043 0202 	orr.w	r2, r3, #2
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	330c      	adds	r3, #12
 801007c:	2202      	movs	r2, #2
 801007e:	4619      	mov	r1, r3
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f8ea 	bl	801025a <USBD_CtlSendData>
    break;
 8010086:	e004      	b.n	8010092 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 f874 	bl	8010178 <USBD_CtlError>
    break;
 8010090:	bf00      	nop
  }
}
 8010092:	bf00      	nop
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b082      	sub	sp, #8
 801009e:	af00      	add	r7, sp, #0
 80100a0:	6078      	str	r0, [r7, #4]
 80100a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	885b      	ldrh	r3, [r3, #2]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d106      	bne.n	80100ba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2201      	movs	r2, #1
 80100b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 f92a 	bl	801030e <USBD_CtlSendStatus>
  }
}
 80100ba:	bf00      	nop
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b082      	sub	sp, #8
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100d2:	3b01      	subs	r3, #1
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d80b      	bhi.n	80100f0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	885b      	ldrh	r3, [r3, #2]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d10c      	bne.n	80100fa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 f910 	bl	801030e <USBD_CtlSendStatus>
      }
      break;
 80100ee:	e004      	b.n	80100fa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80100f0:	6839      	ldr	r1, [r7, #0]
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f840 	bl	8010178 <USBD_CtlError>
      break;
 80100f8:	e000      	b.n	80100fc <USBD_ClrFeature+0x3a>
      break;
 80100fa:	bf00      	nop
  }
}
 80100fc:	bf00      	nop
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	781a      	ldrb	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	3301      	adds	r3, #1
 801011e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	781a      	ldrb	r2, [r3, #0]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	3301      	adds	r3, #1
 801012c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f7ff faa9 	bl	800f686 <SWAPBYTE>
 8010134:	4603      	mov	r3, r0
 8010136:	461a      	mov	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	3301      	adds	r3, #1
 8010140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3301      	adds	r3, #1
 8010146:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f7ff fa9c 	bl	800f686 <SWAPBYTE>
 801014e:	4603      	mov	r3, r0
 8010150:	461a      	mov	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	3301      	adds	r3, #1
 801015a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	3301      	adds	r3, #1
 8010160:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7ff fa8f 	bl	800f686 <SWAPBYTE>
 8010168:	4603      	mov	r3, r0
 801016a:	461a      	mov	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	80da      	strh	r2, [r3, #6]
}
 8010170:	bf00      	nop
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010182:	2180      	movs	r1, #128	; 0x80
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f007 fc35 	bl	80179f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801018a:	2100      	movs	r1, #0
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f007 fc31 	bl	80179f4 <USBD_LL_StallEP>
}
 8010192:	bf00      	nop
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b086      	sub	sp, #24
 801019e:	af00      	add	r7, sp, #0
 80101a0:	60f8      	str	r0, [r7, #12]
 80101a2:	60b9      	str	r1, [r7, #8]
 80101a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80101a6:	2300      	movs	r3, #0
 80101a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d036      	beq.n	801021e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80101b4:	6938      	ldr	r0, [r7, #16]
 80101b6:	f000 f836 	bl	8010226 <USBD_GetLen>
 80101ba:	4603      	mov	r3, r0
 80101bc:	3301      	adds	r3, #1
 80101be:	b29b      	uxth	r3, r3
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80101c8:	7dfb      	ldrb	r3, [r7, #23]
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	4413      	add	r3, r2
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	7812      	ldrb	r2, [r2, #0]
 80101d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80101d4:	7dfb      	ldrb	r3, [r7, #23]
 80101d6:	3301      	adds	r3, #1
 80101d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80101da:	7dfb      	ldrb	r3, [r7, #23]
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	4413      	add	r3, r2
 80101e0:	2203      	movs	r2, #3
 80101e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80101e4:	7dfb      	ldrb	r3, [r7, #23]
 80101e6:	3301      	adds	r3, #1
 80101e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80101ea:	e013      	b.n	8010214 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	4413      	add	r3, r2
 80101f2:	693a      	ldr	r2, [r7, #16]
 80101f4:	7812      	ldrb	r2, [r2, #0]
 80101f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	3301      	adds	r3, #1
 80101fc:	613b      	str	r3, [r7, #16]
    idx++;
 80101fe:	7dfb      	ldrb	r3, [r7, #23]
 8010200:	3301      	adds	r3, #1
 8010202:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	4413      	add	r3, r2
 801020a:	2200      	movs	r2, #0
 801020c:	701a      	strb	r2, [r3, #0]
    idx++;
 801020e:	7dfb      	ldrb	r3, [r7, #23]
 8010210:	3301      	adds	r3, #1
 8010212:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1e7      	bne.n	80101ec <USBD_GetString+0x52>
 801021c:	e000      	b.n	8010220 <USBD_GetString+0x86>
    return;
 801021e:	bf00      	nop
  }
}
 8010220:	3718      	adds	r7, #24
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010226:	b480      	push	{r7}
 8010228:	b085      	sub	sp, #20
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801022e:	2300      	movs	r3, #0
 8010230:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010236:	e005      	b.n	8010244 <USBD_GetLen+0x1e>
  {
    len++;
 8010238:	7bfb      	ldrb	r3, [r7, #15]
 801023a:	3301      	adds	r3, #1
 801023c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	3301      	adds	r3, #1
 8010242:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1f5      	bne.n	8010238 <USBD_GetLen+0x12>
  }

  return len;
 801024c:	7bfb      	ldrb	r3, [r7, #15]
}
 801024e:	4618      	mov	r0, r3
 8010250:	3714      	adds	r7, #20
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b084      	sub	sp, #16
 801025e:	af00      	add	r7, sp, #0
 8010260:	60f8      	str	r0, [r7, #12]
 8010262:	60b9      	str	r1, [r7, #8]
 8010264:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2202      	movs	r2, #2
 801026a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	2100      	movs	r1, #0
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f007 fc40 	bl	8017b06 <USBD_LL_Transmit>

  return USBD_OK;
 8010286:	2300      	movs	r3, #0
}
 8010288:	4618      	mov	r0, r3
 801028a:	3710      	adds	r7, #16
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	2100      	movs	r1, #0
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	f007 fc2f 	bl	8017b06 <USBD_LL_Transmit>

  return USBD_OK;
 80102a8:	2300      	movs	r3, #0
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}

080102b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80102b2:	b580      	push	{r7, lr}
 80102b4:	b084      	sub	sp, #16
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	60f8      	str	r0, [r7, #12]
 80102ba:	60b9      	str	r1, [r7, #8]
 80102bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2203      	movs	r2, #3
 80102c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	2100      	movs	r1, #0
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f007 fc33 	bl	8017b48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102e2:	2300      	movs	r3, #0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3710      	adds	r7, #16
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	2100      	movs	r1, #0
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f007 fc22 	bl	8017b48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b082      	sub	sp, #8
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2204      	movs	r2, #4
 801031a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801031e:	2300      	movs	r3, #0
 8010320:	2200      	movs	r2, #0
 8010322:	2100      	movs	r1, #0
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f007 fbee 	bl	8017b06 <USBD_LL_Transmit>

  return USBD_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2205      	movs	r2, #5
 8010340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010344:	2300      	movs	r3, #0
 8010346:	2200      	movs	r2, #0
 8010348:	2100      	movs	r1, #0
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f007 fbfc 	bl	8017b48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
	...

0801035c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010366:	79fb      	ldrb	r3, [r7, #7]
 8010368:	4a08      	ldr	r2, [pc, #32]	; (801038c <disk_status+0x30>)
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4413      	add	r3, r2
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	79fa      	ldrb	r2, [r7, #7]
 8010374:	4905      	ldr	r1, [pc, #20]	; (801038c <disk_status+0x30>)
 8010376:	440a      	add	r2, r1
 8010378:	7a12      	ldrb	r2, [r2, #8]
 801037a:	4610      	mov	r0, r2
 801037c:	4798      	blx	r3
 801037e:	4603      	mov	r3, r0
 8010380:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010382:	7bfb      	ldrb	r3, [r7, #15]
}
 8010384:	4618      	mov	r0, r3
 8010386:	3710      	adds	r7, #16
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	20000460 	.word	0x20000460

08010390 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	4603      	mov	r3, r0
 8010398:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	4a0d      	ldr	r2, [pc, #52]	; (80103d8 <disk_initialize+0x48>)
 80103a2:	5cd3      	ldrb	r3, [r2, r3]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d111      	bne.n	80103cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80103a8:	79fb      	ldrb	r3, [r7, #7]
 80103aa:	4a0b      	ldr	r2, [pc, #44]	; (80103d8 <disk_initialize+0x48>)
 80103ac:	2101      	movs	r1, #1
 80103ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80103b0:	79fb      	ldrb	r3, [r7, #7]
 80103b2:	4a09      	ldr	r2, [pc, #36]	; (80103d8 <disk_initialize+0x48>)
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	4413      	add	r3, r2
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	79fa      	ldrb	r2, [r7, #7]
 80103be:	4906      	ldr	r1, [pc, #24]	; (80103d8 <disk_initialize+0x48>)
 80103c0:	440a      	add	r2, r1
 80103c2:	7a12      	ldrb	r2, [r2, #8]
 80103c4:	4610      	mov	r0, r2
 80103c6:	4798      	blx	r3
 80103c8:	4603      	mov	r3, r0
 80103ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80103cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	20000460 	.word	0x20000460

080103dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80103dc:	b590      	push	{r4, r7, lr}
 80103de:	b087      	sub	sp, #28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60b9      	str	r1, [r7, #8]
 80103e4:	607a      	str	r2, [r7, #4]
 80103e6:	603b      	str	r3, [r7, #0]
 80103e8:	4603      	mov	r3, r0
 80103ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80103ec:	7bfb      	ldrb	r3, [r7, #15]
 80103ee:	4a0a      	ldr	r2, [pc, #40]	; (8010418 <disk_read+0x3c>)
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	4413      	add	r3, r2
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	689c      	ldr	r4, [r3, #8]
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	4a07      	ldr	r2, [pc, #28]	; (8010418 <disk_read+0x3c>)
 80103fc:	4413      	add	r3, r2
 80103fe:	7a18      	ldrb	r0, [r3, #8]
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	68b9      	ldr	r1, [r7, #8]
 8010406:	47a0      	blx	r4
 8010408:	4603      	mov	r3, r0
 801040a:	75fb      	strb	r3, [r7, #23]
  return res;
 801040c:	7dfb      	ldrb	r3, [r7, #23]
}
 801040e:	4618      	mov	r0, r3
 8010410:	371c      	adds	r7, #28
 8010412:	46bd      	mov	sp, r7
 8010414:	bd90      	pop	{r4, r7, pc}
 8010416:	bf00      	nop
 8010418:	20000460 	.word	0x20000460

0801041c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801041c:	b590      	push	{r4, r7, lr}
 801041e:	b087      	sub	sp, #28
 8010420:	af00      	add	r7, sp, #0
 8010422:	60b9      	str	r1, [r7, #8]
 8010424:	607a      	str	r2, [r7, #4]
 8010426:	603b      	str	r3, [r7, #0]
 8010428:	4603      	mov	r3, r0
 801042a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801042c:	7bfb      	ldrb	r3, [r7, #15]
 801042e:	4a0a      	ldr	r2, [pc, #40]	; (8010458 <disk_write+0x3c>)
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	4413      	add	r3, r2
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	68dc      	ldr	r4, [r3, #12]
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	4a07      	ldr	r2, [pc, #28]	; (8010458 <disk_write+0x3c>)
 801043c:	4413      	add	r3, r2
 801043e:	7a18      	ldrb	r0, [r3, #8]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	68b9      	ldr	r1, [r7, #8]
 8010446:	47a0      	blx	r4
 8010448:	4603      	mov	r3, r0
 801044a:	75fb      	strb	r3, [r7, #23]
  return res;
 801044c:	7dfb      	ldrb	r3, [r7, #23]
}
 801044e:	4618      	mov	r0, r3
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	bd90      	pop	{r4, r7, pc}
 8010456:	bf00      	nop
 8010458:	20000460 	.word	0x20000460

0801045c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	4603      	mov	r3, r0
 8010464:	603a      	str	r2, [r7, #0]
 8010466:	71fb      	strb	r3, [r7, #7]
 8010468:	460b      	mov	r3, r1
 801046a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801046c:	79fb      	ldrb	r3, [r7, #7]
 801046e:	4a09      	ldr	r2, [pc, #36]	; (8010494 <disk_ioctl+0x38>)
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4413      	add	r3, r2
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	691b      	ldr	r3, [r3, #16]
 8010478:	79fa      	ldrb	r2, [r7, #7]
 801047a:	4906      	ldr	r1, [pc, #24]	; (8010494 <disk_ioctl+0x38>)
 801047c:	440a      	add	r2, r1
 801047e:	7a10      	ldrb	r0, [r2, #8]
 8010480:	79b9      	ldrb	r1, [r7, #6]
 8010482:	683a      	ldr	r2, [r7, #0]
 8010484:	4798      	blx	r3
 8010486:	4603      	mov	r3, r0
 8010488:	73fb      	strb	r3, [r7, #15]
  return res;
 801048a:	7bfb      	ldrb	r3, [r7, #15]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	20000460 	.word	0x20000460

08010498 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	3301      	adds	r3, #1
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80104a8:	89fb      	ldrh	r3, [r7, #14]
 80104aa:	021b      	lsls	r3, r3, #8
 80104ac:	b21a      	sxth	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	b21b      	sxth	r3, r3
 80104b4:	4313      	orrs	r3, r2
 80104b6:	b21b      	sxth	r3, r3
 80104b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80104ba:	89fb      	ldrh	r3, [r7, #14]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3714      	adds	r7, #20
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	3303      	adds	r3, #3
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	021b      	lsls	r3, r3, #8
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	3202      	adds	r2, #2
 80104e0:	7812      	ldrb	r2, [r2, #0]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	021b      	lsls	r3, r3, #8
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	3201      	adds	r2, #1
 80104ee:	7812      	ldrb	r2, [r2, #0]
 80104f0:	4313      	orrs	r3, r2
 80104f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	021b      	lsls	r3, r3, #8
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	7812      	ldrb	r2, [r2, #0]
 80104fc:	4313      	orrs	r3, r2
 80104fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8010500:	68fb      	ldr	r3, [r7, #12]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3714      	adds	r7, #20
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	460b      	mov	r3, r1
 8010518:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	1c5a      	adds	r2, r3, #1
 801051e:	607a      	str	r2, [r7, #4]
 8010520:	887a      	ldrh	r2, [r7, #2]
 8010522:	b2d2      	uxtb	r2, r2
 8010524:	701a      	strb	r2, [r3, #0]
 8010526:	887b      	ldrh	r3, [r7, #2]
 8010528:	0a1b      	lsrs	r3, r3, #8
 801052a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	1c5a      	adds	r2, r3, #1
 8010530:	607a      	str	r2, [r7, #4]
 8010532:	887a      	ldrh	r2, [r7, #2]
 8010534:	b2d2      	uxtb	r2, r2
 8010536:	701a      	strb	r2, [r3, #0]
}
 8010538:	bf00      	nop
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr

08010544 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	1c5a      	adds	r2, r3, #1
 8010552:	607a      	str	r2, [r7, #4]
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	b2d2      	uxtb	r2, r2
 8010558:	701a      	strb	r2, [r3, #0]
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	0a1b      	lsrs	r3, r3, #8
 801055e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	1c5a      	adds	r2, r3, #1
 8010564:	607a      	str	r2, [r7, #4]
 8010566:	683a      	ldr	r2, [r7, #0]
 8010568:	b2d2      	uxtb	r2, r2
 801056a:	701a      	strb	r2, [r3, #0]
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	0a1b      	lsrs	r3, r3, #8
 8010570:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	607a      	str	r2, [r7, #4]
 8010578:	683a      	ldr	r2, [r7, #0]
 801057a:	b2d2      	uxtb	r2, r2
 801057c:	701a      	strb	r2, [r3, #0]
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	0a1b      	lsrs	r3, r3, #8
 8010582:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	607a      	str	r2, [r7, #4]
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	b2d2      	uxtb	r2, r2
 801058e:	701a      	strb	r2, [r3, #0]
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801059c:	b480      	push	{r7}
 801059e:	b087      	sub	sp, #28
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00d      	beq.n	80105d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	1c53      	adds	r3, r2, #1
 80105ba:	613b      	str	r3, [r7, #16]
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	1c59      	adds	r1, r3, #1
 80105c0:	6179      	str	r1, [r7, #20]
 80105c2:	7812      	ldrb	r2, [r2, #0]
 80105c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3b01      	subs	r3, #1
 80105ca:	607b      	str	r3, [r7, #4]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1f1      	bne.n	80105b6 <mem_cpy+0x1a>
	}
}
 80105d2:	bf00      	nop
 80105d4:	371c      	adds	r7, #28
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80105de:	b480      	push	{r7}
 80105e0:	b087      	sub	sp, #28
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	1c5a      	adds	r2, r3, #1
 80105f2:	617a      	str	r2, [r7, #20]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	b2d2      	uxtb	r2, r2
 80105f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	3b01      	subs	r3, #1
 80105fe:	607b      	str	r3, [r7, #4]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1f3      	bne.n	80105ee <mem_set+0x10>
}
 8010606:	bf00      	nop
 8010608:	371c      	adds	r7, #28
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr

08010612 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010612:	b480      	push	{r7}
 8010614:	b089      	sub	sp, #36	; 0x24
 8010616:	af00      	add	r7, sp, #0
 8010618:	60f8      	str	r0, [r7, #12]
 801061a:	60b9      	str	r1, [r7, #8]
 801061c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	61fb      	str	r3, [r7, #28]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	1c5a      	adds	r2, r3, #1
 801062e:	61fa      	str	r2, [r7, #28]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	4619      	mov	r1, r3
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	61ba      	str	r2, [r7, #24]
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	1acb      	subs	r3, r1, r3
 801063e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	3b01      	subs	r3, #1
 8010644:	607b      	str	r3, [r7, #4]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d002      	beq.n	8010652 <mem_cmp+0x40>
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d0eb      	beq.n	801062a <mem_cmp+0x18>

	return r;
 8010652:	697b      	ldr	r3, [r7, #20]
}
 8010654:	4618      	mov	r0, r3
 8010656:	3724      	adds	r7, #36	; 0x24
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801066a:	e002      	b.n	8010672 <chk_chr+0x12>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	3301      	adds	r3, #1
 8010670:	607b      	str	r3, [r7, #4]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d005      	beq.n	8010686 <chk_chr+0x26>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	461a      	mov	r2, r3
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	4293      	cmp	r3, r2
 8010684:	d1f2      	bne.n	801066c <chk_chr+0xc>
	return *str;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	781b      	ldrb	r3, [r3, #0]
}
 801068a:	4618      	mov	r0, r3
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr

08010696 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b082      	sub	sp, #8
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d009      	beq.n	80106b8 <lock_fs+0x22>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f002 fd8d 	bl	80131c8 <ff_req_grant>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d001      	beq.n	80106b8 <lock_fs+0x22>
 80106b4:	2301      	movs	r3, #1
 80106b6:	e000      	b.n	80106ba <lock_fs+0x24>
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b082      	sub	sp, #8
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	460b      	mov	r3, r1
 80106cc:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00d      	beq.n	80106f0 <unlock_fs+0x2e>
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	2b0c      	cmp	r3, #12
 80106d8:	d00a      	beq.n	80106f0 <unlock_fs+0x2e>
 80106da:	78fb      	ldrb	r3, [r7, #3]
 80106dc:	2b0b      	cmp	r3, #11
 80106de:	d007      	beq.n	80106f0 <unlock_fs+0x2e>
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	2b0f      	cmp	r3, #15
 80106e4:	d004      	beq.n	80106f0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f002 fd81 	bl	80131f2 <ff_rel_grant>
	}
}
 80106f0:	bf00      	nop
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010702:	2300      	movs	r3, #0
 8010704:	60bb      	str	r3, [r7, #8]
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	60fb      	str	r3, [r7, #12]
 801070a:	e029      	b.n	8010760 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801070c:	4a27      	ldr	r2, [pc, #156]	; (80107ac <chk_lock+0xb4>)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	011b      	lsls	r3, r3, #4
 8010712:	4413      	add	r3, r2
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d01d      	beq.n	8010756 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801071a:	4a24      	ldr	r2, [pc, #144]	; (80107ac <chk_lock+0xb4>)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	011b      	lsls	r3, r3, #4
 8010720:	4413      	add	r3, r2
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	429a      	cmp	r2, r3
 801072a:	d116      	bne.n	801075a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801072c:	4a1f      	ldr	r2, [pc, #124]	; (80107ac <chk_lock+0xb4>)
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	011b      	lsls	r3, r3, #4
 8010732:	4413      	add	r3, r2
 8010734:	3304      	adds	r3, #4
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801073c:	429a      	cmp	r2, r3
 801073e:	d10c      	bne.n	801075a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010740:	4a1a      	ldr	r2, [pc, #104]	; (80107ac <chk_lock+0xb4>)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	011b      	lsls	r3, r3, #4
 8010746:	4413      	add	r3, r2
 8010748:	3308      	adds	r3, #8
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010750:	429a      	cmp	r2, r3
 8010752:	d102      	bne.n	801075a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010754:	e007      	b.n	8010766 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010756:	2301      	movs	r3, #1
 8010758:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	3301      	adds	r3, #1
 801075e:	60fb      	str	r3, [r7, #12]
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2b01      	cmp	r3, #1
 8010764:	d9d2      	bls.n	801070c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b02      	cmp	r3, #2
 801076a:	d109      	bne.n	8010780 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d102      	bne.n	8010778 <chk_lock+0x80>
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	2b02      	cmp	r3, #2
 8010776:	d101      	bne.n	801077c <chk_lock+0x84>
 8010778:	2300      	movs	r3, #0
 801077a:	e010      	b.n	801079e <chk_lock+0xa6>
 801077c:	2312      	movs	r3, #18
 801077e:	e00e      	b.n	801079e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d108      	bne.n	8010798 <chk_lock+0xa0>
 8010786:	4a09      	ldr	r2, [pc, #36]	; (80107ac <chk_lock+0xb4>)
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	011b      	lsls	r3, r3, #4
 801078c:	4413      	add	r3, r2
 801078e:	330c      	adds	r3, #12
 8010790:	881b      	ldrh	r3, [r3, #0]
 8010792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010796:	d101      	bne.n	801079c <chk_lock+0xa4>
 8010798:	2310      	movs	r3, #16
 801079a:	e000      	b.n	801079e <chk_lock+0xa6>
 801079c:	2300      	movs	r3, #0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3714      	adds	r7, #20
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr
 80107aa:	bf00      	nop
 80107ac:	20000440 	.word	0x20000440

080107b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80107b6:	2300      	movs	r3, #0
 80107b8:	607b      	str	r3, [r7, #4]
 80107ba:	e002      	b.n	80107c2 <enq_lock+0x12>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3301      	adds	r3, #1
 80107c0:	607b      	str	r3, [r7, #4]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d806      	bhi.n	80107d6 <enq_lock+0x26>
 80107c8:	4a09      	ldr	r2, [pc, #36]	; (80107f0 <enq_lock+0x40>)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	011b      	lsls	r3, r3, #4
 80107ce:	4413      	add	r3, r2
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1f2      	bne.n	80107bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b02      	cmp	r3, #2
 80107da:	bf14      	ite	ne
 80107dc:	2301      	movne	r3, #1
 80107de:	2300      	moveq	r3, #0
 80107e0:	b2db      	uxtb	r3, r3
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	370c      	adds	r7, #12
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	20000440 	.word	0x20000440

080107f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80107fe:	2300      	movs	r3, #0
 8010800:	60fb      	str	r3, [r7, #12]
 8010802:	e01f      	b.n	8010844 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010804:	4a41      	ldr	r2, [pc, #260]	; (801090c <inc_lock+0x118>)
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	011b      	lsls	r3, r3, #4
 801080a:	4413      	add	r3, r2
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	429a      	cmp	r2, r3
 8010814:	d113      	bne.n	801083e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010816:	4a3d      	ldr	r2, [pc, #244]	; (801090c <inc_lock+0x118>)
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	011b      	lsls	r3, r3, #4
 801081c:	4413      	add	r3, r2
 801081e:	3304      	adds	r3, #4
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010826:	429a      	cmp	r2, r3
 8010828:	d109      	bne.n	801083e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801082a:	4a38      	ldr	r2, [pc, #224]	; (801090c <inc_lock+0x118>)
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	011b      	lsls	r3, r3, #4
 8010830:	4413      	add	r3, r2
 8010832:	3308      	adds	r3, #8
 8010834:	681a      	ldr	r2, [r3, #0]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801083a:	429a      	cmp	r2, r3
 801083c:	d006      	beq.n	801084c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3301      	adds	r3, #1
 8010842:	60fb      	str	r3, [r7, #12]
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2b01      	cmp	r3, #1
 8010848:	d9dc      	bls.n	8010804 <inc_lock+0x10>
 801084a:	e000      	b.n	801084e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801084c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2b02      	cmp	r3, #2
 8010852:	d132      	bne.n	80108ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010854:	2300      	movs	r3, #0
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	e002      	b.n	8010860 <inc_lock+0x6c>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3301      	adds	r3, #1
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2b01      	cmp	r3, #1
 8010864:	d806      	bhi.n	8010874 <inc_lock+0x80>
 8010866:	4a29      	ldr	r2, [pc, #164]	; (801090c <inc_lock+0x118>)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	011b      	lsls	r3, r3, #4
 801086c:	4413      	add	r3, r2
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1f2      	bne.n	801085a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2b02      	cmp	r3, #2
 8010878:	d101      	bne.n	801087e <inc_lock+0x8a>
 801087a:	2300      	movs	r3, #0
 801087c:	e040      	b.n	8010900 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	4922      	ldr	r1, [pc, #136]	; (801090c <inc_lock+0x118>)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	011b      	lsls	r3, r3, #4
 8010888:	440b      	add	r3, r1
 801088a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	689a      	ldr	r2, [r3, #8]
 8010890:	491e      	ldr	r1, [pc, #120]	; (801090c <inc_lock+0x118>)
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	011b      	lsls	r3, r3, #4
 8010896:	440b      	add	r3, r1
 8010898:	3304      	adds	r3, #4
 801089a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	695a      	ldr	r2, [r3, #20]
 80108a0:	491a      	ldr	r1, [pc, #104]	; (801090c <inc_lock+0x118>)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	011b      	lsls	r3, r3, #4
 80108a6:	440b      	add	r3, r1
 80108a8:	3308      	adds	r3, #8
 80108aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80108ac:	4a17      	ldr	r2, [pc, #92]	; (801090c <inc_lock+0x118>)
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	011b      	lsls	r3, r3, #4
 80108b2:	4413      	add	r3, r2
 80108b4:	330c      	adds	r3, #12
 80108b6:	2200      	movs	r2, #0
 80108b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d009      	beq.n	80108d4 <inc_lock+0xe0>
 80108c0:	4a12      	ldr	r2, [pc, #72]	; (801090c <inc_lock+0x118>)
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	011b      	lsls	r3, r3, #4
 80108c6:	4413      	add	r3, r2
 80108c8:	330c      	adds	r3, #12
 80108ca:	881b      	ldrh	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d001      	beq.n	80108d4 <inc_lock+0xe0>
 80108d0:	2300      	movs	r3, #0
 80108d2:	e015      	b.n	8010900 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d108      	bne.n	80108ec <inc_lock+0xf8>
 80108da:	4a0c      	ldr	r2, [pc, #48]	; (801090c <inc_lock+0x118>)
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	011b      	lsls	r3, r3, #4
 80108e0:	4413      	add	r3, r2
 80108e2:	330c      	adds	r3, #12
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	3301      	adds	r3, #1
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	e001      	b.n	80108f0 <inc_lock+0xfc>
 80108ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108f0:	4906      	ldr	r1, [pc, #24]	; (801090c <inc_lock+0x118>)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	011b      	lsls	r3, r3, #4
 80108f6:	440b      	add	r3, r1
 80108f8:	330c      	adds	r3, #12
 80108fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	3301      	adds	r3, #1
}
 8010900:	4618      	mov	r0, r3
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr
 801090c:	20000440 	.word	0x20000440

08010910 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010910:	b480      	push	{r7}
 8010912:	b085      	sub	sp, #20
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3b01      	subs	r3, #1
 801091c:	607b      	str	r3, [r7, #4]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2b01      	cmp	r3, #1
 8010922:	d825      	bhi.n	8010970 <dec_lock+0x60>
		n = Files[i].ctr;
 8010924:	4a17      	ldr	r2, [pc, #92]	; (8010984 <dec_lock+0x74>)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	011b      	lsls	r3, r3, #4
 801092a:	4413      	add	r3, r2
 801092c:	330c      	adds	r3, #12
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010932:	89fb      	ldrh	r3, [r7, #14]
 8010934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010938:	d101      	bne.n	801093e <dec_lock+0x2e>
 801093a:	2300      	movs	r3, #0
 801093c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801093e:	89fb      	ldrh	r3, [r7, #14]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d002      	beq.n	801094a <dec_lock+0x3a>
 8010944:	89fb      	ldrh	r3, [r7, #14]
 8010946:	3b01      	subs	r3, #1
 8010948:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801094a:	4a0e      	ldr	r2, [pc, #56]	; (8010984 <dec_lock+0x74>)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	011b      	lsls	r3, r3, #4
 8010950:	4413      	add	r3, r2
 8010952:	330c      	adds	r3, #12
 8010954:	89fa      	ldrh	r2, [r7, #14]
 8010956:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010958:	89fb      	ldrh	r3, [r7, #14]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d105      	bne.n	801096a <dec_lock+0x5a>
 801095e:	4a09      	ldr	r2, [pc, #36]	; (8010984 <dec_lock+0x74>)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	011b      	lsls	r3, r3, #4
 8010964:	4413      	add	r3, r2
 8010966:	2200      	movs	r2, #0
 8010968:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	737b      	strb	r3, [r7, #13]
 801096e:	e001      	b.n	8010974 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010970:	2302      	movs	r3, #2
 8010972:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010974:	7b7b      	ldrb	r3, [r7, #13]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3714      	adds	r7, #20
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	20000440 	.word	0x20000440

08010988 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010988:	b480      	push	{r7}
 801098a:	b085      	sub	sp, #20
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010990:	2300      	movs	r3, #0
 8010992:	60fb      	str	r3, [r7, #12]
 8010994:	e010      	b.n	80109b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010996:	4a0d      	ldr	r2, [pc, #52]	; (80109cc <clear_lock+0x44>)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	011b      	lsls	r3, r3, #4
 801099c:	4413      	add	r3, r2
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	687a      	ldr	r2, [r7, #4]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d105      	bne.n	80109b2 <clear_lock+0x2a>
 80109a6:	4a09      	ldr	r2, [pc, #36]	; (80109cc <clear_lock+0x44>)
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	011b      	lsls	r3, r3, #4
 80109ac:	4413      	add	r3, r2
 80109ae:	2200      	movs	r2, #0
 80109b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	3301      	adds	r3, #1
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d9eb      	bls.n	8010996 <clear_lock+0xe>
	}
}
 80109be:	bf00      	nop
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	20000440 	.word	0x20000440

080109d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80109d8:	2300      	movs	r3, #0
 80109da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	78db      	ldrb	r3, [r3, #3]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d034      	beq.n	8010a4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	7858      	ldrb	r0, [r3, #1]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80109f4:	2301      	movs	r3, #1
 80109f6:	697a      	ldr	r2, [r7, #20]
 80109f8:	f7ff fd10 	bl	801041c <disk_write>
 80109fc:	4603      	mov	r3, r0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d002      	beq.n	8010a08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010a02:	2301      	movs	r3, #1
 8010a04:	73fb      	strb	r3, [r7, #15]
 8010a06:	e022      	b.n	8010a4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a12:	697a      	ldr	r2, [r7, #20]
 8010a14:	1ad2      	subs	r2, r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	69db      	ldr	r3, [r3, #28]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d217      	bcs.n	8010a4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	789b      	ldrb	r3, [r3, #2]
 8010a22:	613b      	str	r3, [r7, #16]
 8010a24:	e010      	b.n	8010a48 <sync_window+0x78>
					wsect += fs->fsize;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	69db      	ldr	r3, [r3, #28]
 8010a2a:	697a      	ldr	r2, [r7, #20]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	7858      	ldrb	r0, [r3, #1]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	697a      	ldr	r2, [r7, #20]
 8010a3e:	f7ff fced 	bl	801041c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	3b01      	subs	r3, #1
 8010a46:	613b      	str	r3, [r7, #16]
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d8eb      	bhi.n	8010a26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3718      	adds	r7, #24
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010a62:	2300      	movs	r3, #0
 8010a64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d01b      	beq.n	8010aa8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff ffad 	bl	80109d0 <sync_window>
 8010a76:	4603      	mov	r3, r0
 8010a78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010a7a:	7bfb      	ldrb	r3, [r7, #15]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d113      	bne.n	8010aa8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7858      	ldrb	r0, [r3, #1]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	f7ff fca5 	bl	80103dc <disk_read>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d004      	beq.n	8010aa2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010a98:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
	...

08010ab4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7ff ff87 	bl	80109d0 <sync_window>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d158      	bne.n	8010b7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	2b03      	cmp	r3, #3
 8010ad2:	d148      	bne.n	8010b66 <sync_fs+0xb2>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	791b      	ldrb	r3, [r3, #4]
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d144      	bne.n	8010b66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	3334      	adds	r3, #52	; 0x34
 8010ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7ff fd79 	bl	80105de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	3334      	adds	r3, #52	; 0x34
 8010af0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010af4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff fd08 	bl	801050e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3334      	adds	r3, #52	; 0x34
 8010b02:	4921      	ldr	r1, [pc, #132]	; (8010b88 <sync_fs+0xd4>)
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff fd1d 	bl	8010544 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	3334      	adds	r3, #52	; 0x34
 8010b0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b12:	491e      	ldr	r1, [pc, #120]	; (8010b8c <sync_fs+0xd8>)
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff fd15 	bl	8010544 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	3334      	adds	r3, #52	; 0x34
 8010b1e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	695b      	ldr	r3, [r3, #20]
 8010b26:	4619      	mov	r1, r3
 8010b28:	4610      	mov	r0, r2
 8010b2a:	f7ff fd0b 	bl	8010544 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	3334      	adds	r3, #52	; 0x34
 8010b32:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	4610      	mov	r0, r2
 8010b3e:	f7ff fd01 	bl	8010544 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6a1b      	ldr	r3, [r3, #32]
 8010b46:	1c5a      	adds	r2, r3, #1
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	7858      	ldrb	r0, [r3, #1]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	f7ff fc5e 	bl	801041c <disk_write>
			fs->fsi_flag = 0;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	785b      	ldrb	r3, [r3, #1]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	2100      	movs	r1, #0
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7ff fc74 	bl	801045c <disk_ioctl>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <sync_fs+0xca>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3710      	adds	r7, #16
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	41615252 	.word	0x41615252
 8010b8c:	61417272 	.word	0x61417272

08010b90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b083      	sub	sp, #12
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	3b02      	subs	r3, #2
 8010b9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	3b02      	subs	r3, #2
 8010ba6:	683a      	ldr	r2, [r7, #0]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d301      	bcc.n	8010bb0 <clust2sect+0x20>
 8010bac:	2300      	movs	r3, #0
 8010bae:	e008      	b.n	8010bc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	895b      	ldrh	r3, [r3, #10]
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	fb03 f202 	mul.w	r2, r3, r2
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bc0:	4413      	add	r3, r2
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	370c      	adds	r7, #12
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr

08010bce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b086      	sub	sp, #24
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d904      	bls.n	8010bee <get_fat+0x20>
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d302      	bcc.n	8010bf4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010bee:	2301      	movs	r3, #1
 8010bf0:	617b      	str	r3, [r7, #20]
 8010bf2:	e08c      	b.n	8010d0e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	2b02      	cmp	r3, #2
 8010c00:	d045      	beq.n	8010c8e <get_fat+0xc0>
 8010c02:	2b03      	cmp	r3, #3
 8010c04:	d05d      	beq.n	8010cc2 <get_fat+0xf4>
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d177      	bne.n	8010cfa <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	085b      	lsrs	r3, r3, #1
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	4413      	add	r3, r2
 8010c16:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	0a5b      	lsrs	r3, r3, #9
 8010c20:	4413      	add	r3, r2
 8010c22:	4619      	mov	r1, r3
 8010c24:	6938      	ldr	r0, [r7, #16]
 8010c26:	f7ff ff17 	bl	8010a58 <move_window>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d167      	bne.n	8010d00 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	60fa      	str	r2, [r7, #12]
 8010c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c3a:	693a      	ldr	r2, [r7, #16]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c42:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	0a5b      	lsrs	r3, r3, #9
 8010c4c:	4413      	add	r3, r2
 8010c4e:	4619      	mov	r1, r3
 8010c50:	6938      	ldr	r0, [r7, #16]
 8010c52:	f7ff ff01 	bl	8010a58 <move_window>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d153      	bne.n	8010d04 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c62:	693a      	ldr	r2, [r7, #16]
 8010c64:	4413      	add	r3, r2
 8010c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c6a:	021b      	lsls	r3, r3, #8
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	f003 0301 	and.w	r3, r3, #1
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d002      	beq.n	8010c84 <get_fat+0xb6>
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	091b      	lsrs	r3, r3, #4
 8010c82:	e002      	b.n	8010c8a <get_fat+0xbc>
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c8a:	617b      	str	r3, [r7, #20]
			break;
 8010c8c:	e03f      	b.n	8010d0e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	0a1b      	lsrs	r3, r3, #8
 8010c96:	4413      	add	r3, r2
 8010c98:	4619      	mov	r1, r3
 8010c9a:	6938      	ldr	r0, [r7, #16]
 8010c9c:	f7ff fedc 	bl	8010a58 <move_window>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d130      	bne.n	8010d08 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	005b      	lsls	r3, r3, #1
 8010cb0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010cb4:	4413      	add	r3, r2
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7ff fbee 	bl	8010498 <ld_word>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	617b      	str	r3, [r7, #20]
			break;
 8010cc0:	e025      	b.n	8010d0e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	09db      	lsrs	r3, r3, #7
 8010cca:	4413      	add	r3, r2
 8010ccc:	4619      	mov	r1, r3
 8010cce:	6938      	ldr	r0, [r7, #16]
 8010cd0:	f7ff fec2 	bl	8010a58 <move_window>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d118      	bne.n	8010d0c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010ce8:	4413      	add	r3, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff fbec 	bl	80104c8 <ld_dword>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010cf6:	617b      	str	r3, [r7, #20]
			break;
 8010cf8:	e009      	b.n	8010d0e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e006      	b.n	8010d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d00:	bf00      	nop
 8010d02:	e004      	b.n	8010d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d04:	bf00      	nop
 8010d06:	e002      	b.n	8010d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d08:	bf00      	nop
 8010d0a:	e000      	b.n	8010d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d0c:	bf00      	nop
		}
	}

	return val;
 8010d0e:	697b      	ldr	r3, [r7, #20]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3718      	adds	r7, #24
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010d18:	b590      	push	{r4, r7, lr}
 8010d1a:	b089      	sub	sp, #36	; 0x24
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010d24:	2302      	movs	r3, #2
 8010d26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	f240 80d6 	bls.w	8010edc <put_fat+0x1c4>
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	f080 80d0 	bcs.w	8010edc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	2b02      	cmp	r3, #2
 8010d42:	d073      	beq.n	8010e2c <put_fat+0x114>
 8010d44:	2b03      	cmp	r3, #3
 8010d46:	f000 8091 	beq.w	8010e6c <put_fat+0x154>
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	f040 80c6 	bne.w	8010edc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	61bb      	str	r3, [r7, #24]
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	085b      	lsrs	r3, r3, #1
 8010d58:	69ba      	ldr	r2, [r7, #24]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	0a5b      	lsrs	r3, r3, #9
 8010d66:	4413      	add	r3, r2
 8010d68:	4619      	mov	r1, r3
 8010d6a:	68f8      	ldr	r0, [r7, #12]
 8010d6c:	f7ff fe74 	bl	8010a58 <move_window>
 8010d70:	4603      	mov	r3, r0
 8010d72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d74:	7ffb      	ldrb	r3, [r7, #31]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f040 80a9 	bne.w	8010ece <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	1c59      	adds	r1, r3, #1
 8010d86:	61b9      	str	r1, [r7, #24]
 8010d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d8c:	4413      	add	r3, r2
 8010d8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00d      	beq.n	8010db6 <put_fat+0x9e>
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	b25b      	sxtb	r3, r3
 8010da0:	f003 030f 	and.w	r3, r3, #15
 8010da4:	b25a      	sxtb	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	011b      	lsls	r3, r3, #4
 8010dac:	b25b      	sxtb	r3, r3
 8010dae:	4313      	orrs	r3, r2
 8010db0:	b25b      	sxtb	r3, r3
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	e001      	b.n	8010dba <put_fat+0xa2>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	697a      	ldr	r2, [r7, #20]
 8010dbc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	0a5b      	lsrs	r3, r3, #9
 8010dcc:	4413      	add	r3, r2
 8010dce:	4619      	mov	r1, r3
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f7ff fe41 	bl	8010a58 <move_window>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010dda:	7ffb      	ldrb	r3, [r7, #31]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d178      	bne.n	8010ed2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dec:	4413      	add	r3, r2
 8010dee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d003      	beq.n	8010e02 <put_fat+0xea>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	091b      	lsrs	r3, r3, #4
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	e00e      	b.n	8010e20 <put_fat+0x108>
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	b25b      	sxtb	r3, r3
 8010e08:	f023 030f 	bic.w	r3, r3, #15
 8010e0c:	b25a      	sxtb	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	0a1b      	lsrs	r3, r3, #8
 8010e12:	b25b      	sxtb	r3, r3
 8010e14:	f003 030f 	and.w	r3, r3, #15
 8010e18:	b25b      	sxtb	r3, r3
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	b25b      	sxtb	r3, r3
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	697a      	ldr	r2, [r7, #20]
 8010e22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2201      	movs	r2, #1
 8010e28:	70da      	strb	r2, [r3, #3]
			break;
 8010e2a:	e057      	b.n	8010edc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	0a1b      	lsrs	r3, r3, #8
 8010e34:	4413      	add	r3, r2
 8010e36:	4619      	mov	r1, r3
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f7ff fe0d 	bl	8010a58 <move_window>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e42:	7ffb      	ldrb	r3, [r7, #31]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d146      	bne.n	8010ed6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010e56:	4413      	add	r3, r2
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	b292      	uxth	r2, r2
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7ff fb55 	bl	801050e <st_word>
			fs->wflag = 1;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2201      	movs	r2, #1
 8010e68:	70da      	strb	r2, [r3, #3]
			break;
 8010e6a:	e037      	b.n	8010edc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	09db      	lsrs	r3, r3, #7
 8010e74:	4413      	add	r3, r2
 8010e76:	4619      	mov	r1, r3
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f7ff fded 	bl	8010a58 <move_window>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e82:	7ffb      	ldrb	r3, [r7, #31]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d128      	bne.n	8010eda <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010e9c:	4413      	add	r3, r2
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff fb12 	bl	80104c8 <ld_dword>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010eaa:	4323      	orrs	r3, r4
 8010eac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010ebc:	4413      	add	r3, r2
 8010ebe:	6879      	ldr	r1, [r7, #4]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff fb3f 	bl	8010544 <st_dword>
			fs->wflag = 1;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2201      	movs	r2, #1
 8010eca:	70da      	strb	r2, [r3, #3]
			break;
 8010ecc:	e006      	b.n	8010edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010ece:	bf00      	nop
 8010ed0:	e004      	b.n	8010edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010ed2:	bf00      	nop
 8010ed4:	e002      	b.n	8010edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010ed6:	bf00      	nop
 8010ed8:	e000      	b.n	8010edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010eda:	bf00      	nop
		}
	}
	return res;
 8010edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3724      	adds	r7, #36	; 0x24
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd90      	pop	{r4, r7, pc}

08010ee6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b088      	sub	sp, #32
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	60f8      	str	r0, [r7, #12]
 8010eee:	60b9      	str	r1, [r7, #8]
 8010ef0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d904      	bls.n	8010f0c <remove_chain+0x26>
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	68ba      	ldr	r2, [r7, #8]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d301      	bcc.n	8010f10 <remove_chain+0x2a>
 8010f0c:	2302      	movs	r3, #2
 8010f0e:	e04b      	b.n	8010fa8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d00c      	beq.n	8010f30 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010f16:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	69b8      	ldr	r0, [r7, #24]
 8010f1e:	f7ff fefb 	bl	8010d18 <put_fat>
 8010f22:	4603      	mov	r3, r0
 8010f24:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010f26:	7ffb      	ldrb	r3, [r7, #31]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <remove_chain+0x4a>
 8010f2c:	7ffb      	ldrb	r3, [r7, #31]
 8010f2e:	e03b      	b.n	8010fa8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010f30:	68b9      	ldr	r1, [r7, #8]
 8010f32:	68f8      	ldr	r0, [r7, #12]
 8010f34:	f7ff fe4b 	bl	8010bce <get_fat>
 8010f38:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d031      	beq.n	8010fa4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d101      	bne.n	8010f4a <remove_chain+0x64>
 8010f46:	2302      	movs	r3, #2
 8010f48:	e02e      	b.n	8010fa8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f50:	d101      	bne.n	8010f56 <remove_chain+0x70>
 8010f52:	2301      	movs	r3, #1
 8010f54:	e028      	b.n	8010fa8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010f56:	2200      	movs	r2, #0
 8010f58:	68b9      	ldr	r1, [r7, #8]
 8010f5a:	69b8      	ldr	r0, [r7, #24]
 8010f5c:	f7ff fedc 	bl	8010d18 <put_fat>
 8010f60:	4603      	mov	r3, r0
 8010f62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010f64:	7ffb      	ldrb	r3, [r7, #31]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d001      	beq.n	8010f6e <remove_chain+0x88>
 8010f6a:	7ffb      	ldrb	r3, [r7, #31]
 8010f6c:	e01c      	b.n	8010fa8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	695a      	ldr	r2, [r3, #20]
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	699b      	ldr	r3, [r3, #24]
 8010f76:	3b02      	subs	r3, #2
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d20b      	bcs.n	8010f94 <remove_chain+0xae>
			fs->free_clst++;
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	695b      	ldr	r3, [r3, #20]
 8010f80:	1c5a      	adds	r2, r3, #1
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	791b      	ldrb	r3, [r3, #4]
 8010f8a:	f043 0301 	orr.w	r3, r3, #1
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	699b      	ldr	r3, [r3, #24]
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d3c6      	bcc.n	8010f30 <remove_chain+0x4a>
 8010fa2:	e000      	b.n	8010fa6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010fa4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3720      	adds	r7, #32
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b088      	sub	sp, #32
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10d      	bne.n	8010fe2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d004      	beq.n	8010fdc <create_chain+0x2c>
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	699b      	ldr	r3, [r3, #24]
 8010fd6:	69ba      	ldr	r2, [r7, #24]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d31b      	bcc.n	8011014 <create_chain+0x64>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	61bb      	str	r3, [r7, #24]
 8010fe0:	e018      	b.n	8011014 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010fe2:	6839      	ldr	r1, [r7, #0]
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7ff fdf2 	bl	8010bce <get_fat>
 8010fea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d801      	bhi.n	8010ff6 <create_chain+0x46>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e070      	b.n	80110d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffc:	d101      	bne.n	8011002 <create_chain+0x52>
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	e06a      	b.n	80110d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	699b      	ldr	r3, [r3, #24]
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	429a      	cmp	r2, r3
 801100a:	d201      	bcs.n	8011010 <create_chain+0x60>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	e063      	b.n	80110d8 <create_chain+0x128>
		scl = clst;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	3301      	adds	r3, #1
 801101c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	69fa      	ldr	r2, [r7, #28]
 8011024:	429a      	cmp	r2, r3
 8011026:	d307      	bcc.n	8011038 <create_chain+0x88>
				ncl = 2;
 8011028:	2302      	movs	r3, #2
 801102a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801102c:	69fa      	ldr	r2, [r7, #28]
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	429a      	cmp	r2, r3
 8011032:	d901      	bls.n	8011038 <create_chain+0x88>
 8011034:	2300      	movs	r3, #0
 8011036:	e04f      	b.n	80110d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011038:	69f9      	ldr	r1, [r7, #28]
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff fdc7 	bl	8010bce <get_fat>
 8011040:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00e      	beq.n	8011066 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d003      	beq.n	8011056 <create_chain+0xa6>
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011054:	d101      	bne.n	801105a <create_chain+0xaa>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	e03e      	b.n	80110d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801105a:	69fa      	ldr	r2, [r7, #28]
 801105c:	69bb      	ldr	r3, [r7, #24]
 801105e:	429a      	cmp	r2, r3
 8011060:	d1da      	bne.n	8011018 <create_chain+0x68>
 8011062:	2300      	movs	r3, #0
 8011064:	e038      	b.n	80110d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011066:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011068:	f04f 32ff 	mov.w	r2, #4294967295
 801106c:	69f9      	ldr	r1, [r7, #28]
 801106e:	6938      	ldr	r0, [r7, #16]
 8011070:	f7ff fe52 	bl	8010d18 <put_fat>
 8011074:	4603      	mov	r3, r0
 8011076:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d109      	bne.n	8011092 <create_chain+0xe2>
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d006      	beq.n	8011092 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011084:	69fa      	ldr	r2, [r7, #28]
 8011086:	6839      	ldr	r1, [r7, #0]
 8011088:	6938      	ldr	r0, [r7, #16]
 801108a:	f7ff fe45 	bl	8010d18 <put_fat>
 801108e:	4603      	mov	r3, r0
 8011090:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011092:	7dfb      	ldrb	r3, [r7, #23]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d116      	bne.n	80110c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	69fa      	ldr	r2, [r7, #28]
 801109c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	695a      	ldr	r2, [r3, #20]
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	3b02      	subs	r3, #2
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d804      	bhi.n	80110b6 <create_chain+0x106>
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	695b      	ldr	r3, [r3, #20]
 80110b0:	1e5a      	subs	r2, r3, #1
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	791b      	ldrb	r3, [r3, #4]
 80110ba:	f043 0301 	orr.w	r3, r3, #1
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	711a      	strb	r2, [r3, #4]
 80110c4:	e007      	b.n	80110d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80110c6:	7dfb      	ldrb	r3, [r7, #23]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d102      	bne.n	80110d2 <create_chain+0x122>
 80110cc:	f04f 33ff 	mov.w	r3, #4294967295
 80110d0:	e000      	b.n	80110d4 <create_chain+0x124>
 80110d2:	2301      	movs	r3, #1
 80110d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80110d6:	69fb      	ldr	r3, [r7, #28]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3720      	adds	r7, #32
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b087      	sub	sp, #28
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f4:	3304      	adds	r3, #4
 80110f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	0a5b      	lsrs	r3, r3, #9
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	8952      	ldrh	r2, [r2, #10]
 8011100:	fbb3 f3f2 	udiv	r3, r3, r2
 8011104:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	1d1a      	adds	r2, r3, #4
 801110a:	613a      	str	r2, [r7, #16]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <clmt_clust+0x3a>
 8011116:	2300      	movs	r3, #0
 8011118:	e010      	b.n	801113c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	429a      	cmp	r2, r3
 8011120:	d307      	bcc.n	8011132 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011122:	697a      	ldr	r2, [r7, #20]
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	617b      	str	r3, [r7, #20]
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	3304      	adds	r3, #4
 801112e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011130:	e7e9      	b.n	8011106 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011132:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	4413      	add	r3, r2
}
 801113c:	4618      	mov	r0, r3
 801113e:	371c      	adds	r7, #28
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801115e:	d204      	bcs.n	801116a <dir_sdi+0x22>
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	f003 031f 	and.w	r3, r3, #31
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <dir_sdi+0x26>
		return FR_INT_ERR;
 801116a:	2302      	movs	r3, #2
 801116c:	e063      	b.n	8011236 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	683a      	ldr	r2, [r7, #0]
 8011172:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d106      	bne.n	801118e <dir_sdi+0x46>
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	2b02      	cmp	r3, #2
 8011186:	d902      	bls.n	801118e <dir_sdi+0x46>
		clst = fs->dirbase;
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d10c      	bne.n	80111ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	095b      	lsrs	r3, r3, #5
 8011198:	693a      	ldr	r2, [r7, #16]
 801119a:	8912      	ldrh	r2, [r2, #8]
 801119c:	4293      	cmp	r3, r2
 801119e:	d301      	bcc.n	80111a4 <dir_sdi+0x5c>
 80111a0:	2302      	movs	r3, #2
 80111a2:	e048      	b.n	8011236 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	61da      	str	r2, [r3, #28]
 80111ac:	e029      	b.n	8011202 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	895b      	ldrh	r3, [r3, #10]
 80111b2:	025b      	lsls	r3, r3, #9
 80111b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80111b6:	e019      	b.n	80111ec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6979      	ldr	r1, [r7, #20]
 80111bc:	4618      	mov	r0, r3
 80111be:	f7ff fd06 	bl	8010bce <get_fat>
 80111c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ca:	d101      	bne.n	80111d0 <dir_sdi+0x88>
 80111cc:	2301      	movs	r3, #1
 80111ce:	e032      	b.n	8011236 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d904      	bls.n	80111e0 <dir_sdi+0x98>
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	699b      	ldr	r3, [r3, #24]
 80111da:	697a      	ldr	r2, [r7, #20]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d301      	bcc.n	80111e4 <dir_sdi+0x9c>
 80111e0:	2302      	movs	r3, #2
 80111e2:	e028      	b.n	8011236 <dir_sdi+0xee>
			ofs -= csz;
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80111ec:	683a      	ldr	r2, [r7, #0]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d2e1      	bcs.n	80111b8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80111f4:	6979      	ldr	r1, [r7, #20]
 80111f6:	6938      	ldr	r0, [r7, #16]
 80111f8:	f7ff fcca 	bl	8010b90 <clust2sect>
 80111fc:	4602      	mov	r2, r0
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	697a      	ldr	r2, [r7, #20]
 8011206:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d101      	bne.n	8011214 <dir_sdi+0xcc>
 8011210:	2302      	movs	r3, #2
 8011212:	e010      	b.n	8011236 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	69da      	ldr	r2, [r3, #28]
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	0a5b      	lsrs	r3, r3, #9
 801121c:	441a      	add	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801122e:	441a      	add	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011234:	2300      	movs	r3, #0
}
 8011236:	4618      	mov	r0, r3
 8011238:	3718      	adds	r7, #24
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801123e:	b580      	push	{r7, lr}
 8011240:	b086      	sub	sp, #24
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
 8011246:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	695b      	ldr	r3, [r3, #20]
 8011252:	3320      	adds	r3, #32
 8011254:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	69db      	ldr	r3, [r3, #28]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d003      	beq.n	8011266 <dir_next+0x28>
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011264:	d301      	bcc.n	801126a <dir_next+0x2c>
 8011266:	2304      	movs	r3, #4
 8011268:	e0aa      	b.n	80113c0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011270:	2b00      	cmp	r3, #0
 8011272:	f040 8098 	bne.w	80113a6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	69db      	ldr	r3, [r3, #28]
 801127a:	1c5a      	adds	r2, r3, #1
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	699b      	ldr	r3, [r3, #24]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d10b      	bne.n	80112a0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	095b      	lsrs	r3, r3, #5
 801128c:	68fa      	ldr	r2, [r7, #12]
 801128e:	8912      	ldrh	r2, [r2, #8]
 8011290:	4293      	cmp	r3, r2
 8011292:	f0c0 8088 	bcc.w	80113a6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	61da      	str	r2, [r3, #28]
 801129c:	2304      	movs	r3, #4
 801129e:	e08f      	b.n	80113c0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	0a5b      	lsrs	r3, r3, #9
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	8952      	ldrh	r2, [r2, #10]
 80112a8:	3a01      	subs	r2, #1
 80112aa:	4013      	ands	r3, r2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d17a      	bne.n	80113a6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	699b      	ldr	r3, [r3, #24]
 80112b6:	4619      	mov	r1, r3
 80112b8:	4610      	mov	r0, r2
 80112ba:	f7ff fc88 	bl	8010bce <get_fat>
 80112be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d801      	bhi.n	80112ca <dir_next+0x8c>
 80112c6:	2302      	movs	r3, #2
 80112c8:	e07a      	b.n	80113c0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112d0:	d101      	bne.n	80112d6 <dir_next+0x98>
 80112d2:	2301      	movs	r3, #1
 80112d4:	e074      	b.n	80113c0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	697a      	ldr	r2, [r7, #20]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d358      	bcc.n	8011392 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d104      	bne.n	80112f0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2200      	movs	r2, #0
 80112ea:	61da      	str	r2, [r3, #28]
 80112ec:	2304      	movs	r3, #4
 80112ee:	e067      	b.n	80113c0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	699b      	ldr	r3, [r3, #24]
 80112f6:	4619      	mov	r1, r3
 80112f8:	4610      	mov	r0, r2
 80112fa:	f7ff fe59 	bl	8010fb0 <create_chain>
 80112fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <dir_next+0xcc>
 8011306:	2307      	movs	r3, #7
 8011308:	e05a      	b.n	80113c0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d101      	bne.n	8011314 <dir_next+0xd6>
 8011310:	2302      	movs	r3, #2
 8011312:	e055      	b.n	80113c0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801131a:	d101      	bne.n	8011320 <dir_next+0xe2>
 801131c:	2301      	movs	r3, #1
 801131e:	e04f      	b.n	80113c0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f7ff fb55 	bl	80109d0 <sync_window>
 8011326:	4603      	mov	r3, r0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d001      	beq.n	8011330 <dir_next+0xf2>
 801132c:	2301      	movs	r3, #1
 801132e:	e047      	b.n	80113c0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	3334      	adds	r3, #52	; 0x34
 8011334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011338:	2100      	movs	r1, #0
 801133a:	4618      	mov	r0, r3
 801133c:	f7ff f94f 	bl	80105de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011340:	2300      	movs	r3, #0
 8011342:	613b      	str	r3, [r7, #16]
 8011344:	6979      	ldr	r1, [r7, #20]
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f7ff fc22 	bl	8010b90 <clust2sect>
 801134c:	4602      	mov	r2, r0
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	631a      	str	r2, [r3, #48]	; 0x30
 8011352:	e012      	b.n	801137a <dir_next+0x13c>
						fs->wflag = 1;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2201      	movs	r2, #1
 8011358:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f7ff fb38 	bl	80109d0 <sync_window>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d001      	beq.n	801136a <dir_next+0x12c>
 8011366:	2301      	movs	r3, #1
 8011368:	e02a      	b.n	80113c0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	3301      	adds	r3, #1
 801136e:	613b      	str	r3, [r7, #16]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011374:	1c5a      	adds	r2, r3, #1
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	631a      	str	r2, [r3, #48]	; 0x30
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	895b      	ldrh	r3, [r3, #10]
 801137e:	461a      	mov	r2, r3
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	4293      	cmp	r3, r2
 8011384:	d3e6      	bcc.n	8011354 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	1ad2      	subs	r2, r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	697a      	ldr	r2, [r7, #20]
 8011396:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011398:	6979      	ldr	r1, [r7, #20]
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f7ff fbf8 	bl	8010b90 <clust2sect>
 80113a0:	4602      	mov	r2, r0
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	68ba      	ldr	r2, [r7, #8]
 80113aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113b8:	441a      	add	r2, r3
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80113be:	2300      	movs	r3, #0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3718      	adds	r7, #24
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80113d8:	2100      	movs	r1, #0
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7ff feb4 	bl	8011148 <dir_sdi>
 80113e0:	4603      	mov	r3, r0
 80113e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80113e4:	7dfb      	ldrb	r3, [r7, #23]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d12b      	bne.n	8011442 <dir_alloc+0x7a>
		n = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	69db      	ldr	r3, [r3, #28]
 80113f2:	4619      	mov	r1, r3
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f7ff fb2f 	bl	8010a58 <move_window>
 80113fa:	4603      	mov	r3, r0
 80113fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80113fe:	7dfb      	ldrb	r3, [r7, #23]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d11d      	bne.n	8011440 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6a1b      	ldr	r3, [r3, #32]
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	2be5      	cmp	r3, #229	; 0xe5
 801140c:	d004      	beq.n	8011418 <dir_alloc+0x50>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a1b      	ldr	r3, [r3, #32]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d107      	bne.n	8011428 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	3301      	adds	r3, #1
 801141c:	613b      	str	r3, [r7, #16]
 801141e:	693a      	ldr	r2, [r7, #16]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	429a      	cmp	r2, r3
 8011424:	d102      	bne.n	801142c <dir_alloc+0x64>
 8011426:	e00c      	b.n	8011442 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011428:	2300      	movs	r3, #0
 801142a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801142c:	2101      	movs	r1, #1
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f7ff ff05 	bl	801123e <dir_next>
 8011434:	4603      	mov	r3, r0
 8011436:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011438:	7dfb      	ldrb	r3, [r7, #23]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0d7      	beq.n	80113ee <dir_alloc+0x26>
 801143e:	e000      	b.n	8011442 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011440:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011442:	7dfb      	ldrb	r3, [r7, #23]
 8011444:	2b04      	cmp	r3, #4
 8011446:	d101      	bne.n	801144c <dir_alloc+0x84>
 8011448:	2307      	movs	r3, #7
 801144a:	75fb      	strb	r3, [r7, #23]
	return res;
 801144c:	7dfb      	ldrb	r3, [r7, #23]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3718      	adds	r7, #24
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011456:	b580      	push	{r7, lr}
 8011458:	b084      	sub	sp, #16
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
 801145e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	331a      	adds	r3, #26
 8011464:	4618      	mov	r0, r3
 8011466:	f7ff f817 	bl	8010498 <ld_word>
 801146a:	4603      	mov	r3, r0
 801146c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	2b03      	cmp	r3, #3
 8011474:	d109      	bne.n	801148a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	3314      	adds	r3, #20
 801147a:	4618      	mov	r0, r3
 801147c:	f7ff f80c 	bl	8010498 <ld_word>
 8011480:	4603      	mov	r3, r0
 8011482:	041b      	lsls	r3, r3, #16
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	4313      	orrs	r3, r2
 8011488:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801148a:	68fb      	ldr	r3, [r7, #12]
}
 801148c:	4618      	mov	r0, r3
 801148e:	3710      	adds	r7, #16
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	331a      	adds	r3, #26
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	b292      	uxth	r2, r2
 80114a8:	4611      	mov	r1, r2
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7ff f82f 	bl	801050e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	2b03      	cmp	r3, #3
 80114b6:	d109      	bne.n	80114cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	f103 0214 	add.w	r2, r3, #20
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	0c1b      	lsrs	r3, r3, #16
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4619      	mov	r1, r3
 80114c6:	4610      	mov	r0, r2
 80114c8:	f7ff f821 	bl	801050e <st_word>
	}
}
 80114cc:	bf00      	nop
 80114ce:	3710      	adds	r7, #16
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b086      	sub	sp, #24
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80114de:	2304      	movs	r3, #4
 80114e0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80114e8:	e03c      	b.n	8011564 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	69db      	ldr	r3, [r3, #28]
 80114ee:	4619      	mov	r1, r3
 80114f0:	6938      	ldr	r0, [r7, #16]
 80114f2:	f7ff fab1 	bl	8010a58 <move_window>
 80114f6:	4603      	mov	r3, r0
 80114f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80114fa:	7dfb      	ldrb	r3, [r7, #23]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d136      	bne.n	801156e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6a1b      	ldr	r3, [r3, #32]
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011508:	7bfb      	ldrb	r3, [r7, #15]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d102      	bne.n	8011514 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801150e:	2304      	movs	r3, #4
 8011510:	75fb      	strb	r3, [r7, #23]
 8011512:	e031      	b.n	8011578 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a1b      	ldr	r3, [r3, #32]
 8011518:	330b      	adds	r3, #11
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011520:	73bb      	strb	r3, [r7, #14]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	7bba      	ldrb	r2, [r7, #14]
 8011526:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	2be5      	cmp	r3, #229	; 0xe5
 801152c:	d011      	beq.n	8011552 <dir_read+0x7e>
 801152e:	7bfb      	ldrb	r3, [r7, #15]
 8011530:	2b2e      	cmp	r3, #46	; 0x2e
 8011532:	d00e      	beq.n	8011552 <dir_read+0x7e>
 8011534:	7bbb      	ldrb	r3, [r7, #14]
 8011536:	2b0f      	cmp	r3, #15
 8011538:	d00b      	beq.n	8011552 <dir_read+0x7e>
 801153a:	7bbb      	ldrb	r3, [r7, #14]
 801153c:	f023 0320 	bic.w	r3, r3, #32
 8011540:	2b08      	cmp	r3, #8
 8011542:	bf0c      	ite	eq
 8011544:	2301      	moveq	r3, #1
 8011546:	2300      	movne	r3, #0
 8011548:	b2db      	uxtb	r3, r3
 801154a:	461a      	mov	r2, r3
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	4293      	cmp	r3, r2
 8011550:	d00f      	beq.n	8011572 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011552:	2100      	movs	r1, #0
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7ff fe72 	bl	801123e <dir_next>
 801155a:	4603      	mov	r3, r0
 801155c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801155e:	7dfb      	ldrb	r3, [r7, #23]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d108      	bne.n	8011576 <dir_read+0xa2>
	while (dp->sect) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	69db      	ldr	r3, [r3, #28]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d1be      	bne.n	80114ea <dir_read+0x16>
 801156c:	e004      	b.n	8011578 <dir_read+0xa4>
		if (res != FR_OK) break;
 801156e:	bf00      	nop
 8011570:	e002      	b.n	8011578 <dir_read+0xa4>
				break;
 8011572:	bf00      	nop
 8011574:	e000      	b.n	8011578 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011576:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011578:	7dfb      	ldrb	r3, [r7, #23]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d002      	beq.n	8011584 <dir_read+0xb0>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	61da      	str	r2, [r3, #28]
	return res;
 8011584:	7dfb      	ldrb	r3, [r7, #23]
}
 8011586:	4618      	mov	r0, r3
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}

0801158e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b086      	sub	sp, #24
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801159c:	2100      	movs	r1, #0
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7ff fdd2 	bl	8011148 <dir_sdi>
 80115a4:	4603      	mov	r3, r0
 80115a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80115a8:	7dfb      	ldrb	r3, [r7, #23]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <dir_find+0x24>
 80115ae:	7dfb      	ldrb	r3, [r7, #23]
 80115b0:	e03e      	b.n	8011630 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	69db      	ldr	r3, [r3, #28]
 80115b6:	4619      	mov	r1, r3
 80115b8:	6938      	ldr	r0, [r7, #16]
 80115ba:	f7ff fa4d 	bl	8010a58 <move_window>
 80115be:	4603      	mov	r3, r0
 80115c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80115c2:	7dfb      	ldrb	r3, [r7, #23]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d12f      	bne.n	8011628 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a1b      	ldr	r3, [r3, #32]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d102      	bne.n	80115dc <dir_find+0x4e>
 80115d6:	2304      	movs	r3, #4
 80115d8:	75fb      	strb	r3, [r7, #23]
 80115da:	e028      	b.n	801162e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6a1b      	ldr	r3, [r3, #32]
 80115e0:	330b      	adds	r3, #11
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a1b      	ldr	r3, [r3, #32]
 80115f2:	330b      	adds	r3, #11
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	f003 0308 	and.w	r3, r3, #8
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d10a      	bne.n	8011614 <dir_find+0x86>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6a18      	ldr	r0, [r3, #32]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	3324      	adds	r3, #36	; 0x24
 8011606:	220b      	movs	r2, #11
 8011608:	4619      	mov	r1, r3
 801160a:	f7ff f802 	bl	8010612 <mem_cmp>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d00b      	beq.n	801162c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011614:	2100      	movs	r1, #0
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff fe11 	bl	801123e <dir_next>
 801161c:	4603      	mov	r3, r0
 801161e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011620:	7dfb      	ldrb	r3, [r7, #23]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d0c5      	beq.n	80115b2 <dir_find+0x24>
 8011626:	e002      	b.n	801162e <dir_find+0xa0>
		if (res != FR_OK) break;
 8011628:	bf00      	nop
 801162a:	e000      	b.n	801162e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801162c:	bf00      	nop

	return res;
 801162e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011630:	4618      	mov	r0, r3
 8011632:	3718      	adds	r7, #24
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}

08011638 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011646:	2101      	movs	r1, #1
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f7ff febd 	bl	80113c8 <dir_alloc>
 801164e:	4603      	mov	r3, r0
 8011650:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011652:	7bfb      	ldrb	r3, [r7, #15]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d11c      	bne.n	8011692 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	69db      	ldr	r3, [r3, #28]
 801165c:	4619      	mov	r1, r3
 801165e:	68b8      	ldr	r0, [r7, #8]
 8011660:	f7ff f9fa 	bl	8010a58 <move_window>
 8011664:	4603      	mov	r3, r0
 8011666:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011668:	7bfb      	ldrb	r3, [r7, #15]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d111      	bne.n	8011692 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a1b      	ldr	r3, [r3, #32]
 8011672:	2220      	movs	r2, #32
 8011674:	2100      	movs	r1, #0
 8011676:	4618      	mov	r0, r3
 8011678:	f7fe ffb1 	bl	80105de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6a18      	ldr	r0, [r3, #32]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3324      	adds	r3, #36	; 0x24
 8011684:	220b      	movs	r2, #11
 8011686:	4619      	mov	r1, r3
 8011688:	f7fe ff88 	bl	801059c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	2201      	movs	r2, #1
 8011690:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011692:	7bfb      	ldrb	r3, [r7, #15]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b086      	sub	sp, #24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	2200      	movs	r2, #0
 80116aa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	69db      	ldr	r3, [r3, #28]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d04e      	beq.n	8011752 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80116b4:	2300      	movs	r3, #0
 80116b6:	613b      	str	r3, [r7, #16]
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80116bc:	e021      	b.n	8011702 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a1a      	ldr	r2, [r3, #32]
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	1c59      	adds	r1, r3, #1
 80116c6:	6179      	str	r1, [r7, #20]
 80116c8:	4413      	add	r3, r2
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80116ce:	7bfb      	ldrb	r3, [r7, #15]
 80116d0:	2b20      	cmp	r3, #32
 80116d2:	d100      	bne.n	80116d6 <get_fileinfo+0x3a>
 80116d4:	e015      	b.n	8011702 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80116d6:	7bfb      	ldrb	r3, [r7, #15]
 80116d8:	2b05      	cmp	r3, #5
 80116da:	d101      	bne.n	80116e0 <get_fileinfo+0x44>
 80116dc:	23e5      	movs	r3, #229	; 0xe5
 80116de:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	2b09      	cmp	r3, #9
 80116e4:	d106      	bne.n	80116f4 <get_fileinfo+0x58>
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	613a      	str	r2, [r7, #16]
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	4413      	add	r3, r2
 80116f0:	222e      	movs	r2, #46	; 0x2e
 80116f2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	1c5a      	adds	r2, r3, #1
 80116f8:	613a      	str	r2, [r7, #16]
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	4413      	add	r3, r2
 80116fe:	7bfa      	ldrb	r2, [r7, #15]
 8011700:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	2b0a      	cmp	r3, #10
 8011706:	d9da      	bls.n	80116be <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8011708:	683a      	ldr	r2, [r7, #0]
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	4413      	add	r3, r2
 801170e:	3309      	adds	r3, #9
 8011710:	2200      	movs	r2, #0
 8011712:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6a1b      	ldr	r3, [r3, #32]
 8011718:	7ada      	ldrb	r2, [r3, #11]
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	331c      	adds	r3, #28
 8011724:	4618      	mov	r0, r3
 8011726:	f7fe fecf 	bl	80104c8 <ld_dword>
 801172a:	4602      	mov	r2, r0
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a1b      	ldr	r3, [r3, #32]
 8011734:	3316      	adds	r3, #22
 8011736:	4618      	mov	r0, r3
 8011738:	f7fe fec6 	bl	80104c8 <ld_dword>
 801173c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	b29a      	uxth	r2, r3
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	80da      	strh	r2, [r3, #6]
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	0c1b      	lsrs	r3, r3, #16
 801174a:	b29a      	uxth	r2, r3
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	809a      	strh	r2, [r3, #4]
 8011750:	e000      	b.n	8011754 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011752:	bf00      	nop
}
 8011754:	3718      	adds	r7, #24
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
	...

0801175c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 801175c:	b480      	push	{r7}
 801175e:	b085      	sub	sp, #20
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	1c59      	adds	r1, r3, #1
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	6011      	str	r1, [r2, #0]
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011772:	89fb      	ldrh	r3, [r7, #14]
 8011774:	2b60      	cmp	r3, #96	; 0x60
 8011776:	d905      	bls.n	8011784 <get_achar+0x28>
 8011778:	89fb      	ldrh	r3, [r7, #14]
 801177a:	2b7a      	cmp	r3, #122	; 0x7a
 801177c:	d802      	bhi.n	8011784 <get_achar+0x28>
 801177e:	89fb      	ldrh	r3, [r7, #14]
 8011780:	3b20      	subs	r3, #32
 8011782:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011784:	89fb      	ldrh	r3, [r7, #14]
 8011786:	2b7f      	cmp	r3, #127	; 0x7f
 8011788:	d904      	bls.n	8011794 <get_achar+0x38>
 801178a:	89fb      	ldrh	r3, [r7, #14]
 801178c:	3b80      	subs	r3, #128	; 0x80
 801178e:	4a05      	ldr	r2, [pc, #20]	; (80117a4 <get_achar+0x48>)
 8011790:	5cd3      	ldrb	r3, [r2, r3]
 8011792:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8011794:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8011796:	4618      	mov	r0, r3
 8011798:	3714      	adds	r7, #20
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr
 80117a2:	bf00      	nop
 80117a4:	0801ad24 	.word	0x0801ad24

080117a8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b08a      	sub	sp, #40	; 0x28
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	607a      	str	r2, [r7, #4]
 80117b4:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80117b6:	e009      	b.n	80117cc <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80117b8:	f107 0308 	add.w	r3, r7, #8
 80117bc:	4618      	mov	r0, r3
 80117be:	f7ff ffcd 	bl	801175c <get_achar>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d101      	bne.n	80117cc <pattern_matching+0x24>
 80117c8:	2300      	movs	r3, #0
 80117ca:	e064      	b.n	8011896 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	1e5a      	subs	r2, r3, #1
 80117d0:	607a      	str	r2, [r7, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d1f0      	bne.n	80117b8 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d104      	bne.n	80117e8 <pattern_matching+0x40>
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d001      	beq.n	80117e8 <pattern_matching+0x40>
 80117e4:	2301      	movs	r3, #1
 80117e6:	e056      	b.n	8011896 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	617b      	str	r3, [r7, #20]
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	2b3f      	cmp	r3, #63	; 0x3f
 80117f6:	d003      	beq.n	8011800 <pattern_matching+0x58>
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b2a      	cmp	r3, #42	; 0x2a
 80117fe:	d126      	bne.n	801184e <pattern_matching+0xa6>
				nm = nx = 0;
 8011800:	2300      	movs	r3, #0
 8011802:	61fb      	str	r3, [r7, #28]
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	1c5a      	adds	r2, r3, #1
 801180c:	617a      	str	r2, [r7, #20]
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	2b3f      	cmp	r3, #63	; 0x3f
 8011812:	d103      	bne.n	801181c <pattern_matching+0x74>
 8011814:	6a3b      	ldr	r3, [r7, #32]
 8011816:	3301      	adds	r3, #1
 8011818:	623b      	str	r3, [r7, #32]
 801181a:	e001      	b.n	8011820 <pattern_matching+0x78>
 801181c:	2301      	movs	r3, #1
 801181e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	2b3f      	cmp	r3, #63	; 0x3f
 8011826:	d0ef      	beq.n	8011808 <pattern_matching+0x60>
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b2a      	cmp	r3, #42	; 0x2a
 801182e:	d0eb      	beq.n	8011808 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8011830:	6978      	ldr	r0, [r7, #20]
 8011832:	6939      	ldr	r1, [r7, #16]
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	6a3a      	ldr	r2, [r7, #32]
 8011838:	f7ff ffb6 	bl	80117a8 <pattern_matching>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d001      	beq.n	8011846 <pattern_matching+0x9e>
 8011842:	2301      	movs	r3, #1
 8011844:	e027      	b.n	8011896 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801184c:	e017      	b.n	801187e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801184e:	f107 0314 	add.w	r3, r7, #20
 8011852:	4618      	mov	r0, r3
 8011854:	f7ff ff82 	bl	801175c <get_achar>
 8011858:	4603      	mov	r3, r0
 801185a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 801185c:	f107 0310 	add.w	r3, r7, #16
 8011860:	4618      	mov	r0, r3
 8011862:	f7ff ff7b 	bl	801175c <get_achar>
 8011866:	4603      	mov	r3, r0
 8011868:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801186a:	8b7a      	ldrh	r2, [r7, #26]
 801186c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801186e:	429a      	cmp	r2, r3
 8011870:	d104      	bne.n	801187c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8011872:	8b7b      	ldrh	r3, [r7, #26]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1bb      	bne.n	80117f0 <pattern_matching+0x48>
 8011878:	2301      	movs	r3, #1
 801187a:	e00c      	b.n	8011896 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801187c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801187e:	f107 0308 	add.w	r3, r7, #8
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff ff6a 	bl	801175c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d002      	beq.n	8011894 <pattern_matching+0xec>
 801188e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1a9      	bne.n	80117e8 <pattern_matching+0x40>

	return 0;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3728      	adds	r7, #40	; 0x28
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
	...

080118a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b088      	sub	sp, #32
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	60fb      	str	r3, [r7, #12]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3324      	adds	r3, #36	; 0x24
 80118b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80118b6:	220b      	movs	r2, #11
 80118b8:	2120      	movs	r1, #32
 80118ba:	68b8      	ldr	r0, [r7, #8]
 80118bc:	f7fe fe8f 	bl	80105de <mem_set>
	si = i = 0; ni = 8;
 80118c0:	2300      	movs	r3, #0
 80118c2:	613b      	str	r3, [r7, #16]
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	617b      	str	r3, [r7, #20]
 80118c8:	2308      	movs	r3, #8
 80118ca:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	617a      	str	r2, [r7, #20]
 80118d2:	68fa      	ldr	r2, [r7, #12]
 80118d4:	4413      	add	r3, r2
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80118da:	7ffb      	ldrb	r3, [r7, #31]
 80118dc:	2b20      	cmp	r3, #32
 80118de:	d94e      	bls.n	801197e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80118e0:	7ffb      	ldrb	r3, [r7, #31]
 80118e2:	2b2f      	cmp	r3, #47	; 0x2f
 80118e4:	d006      	beq.n	80118f4 <create_name+0x54>
 80118e6:	7ffb      	ldrb	r3, [r7, #31]
 80118e8:	2b5c      	cmp	r3, #92	; 0x5c
 80118ea:	d110      	bne.n	801190e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80118ec:	e002      	b.n	80118f4 <create_name+0x54>
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	3301      	adds	r3, #1
 80118f2:	617b      	str	r3, [r7, #20]
 80118f4:	68fa      	ldr	r2, [r7, #12]
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	4413      	add	r3, r2
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	2b2f      	cmp	r3, #47	; 0x2f
 80118fe:	d0f6      	beq.n	80118ee <create_name+0x4e>
 8011900:	68fa      	ldr	r2, [r7, #12]
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	4413      	add	r3, r2
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	2b5c      	cmp	r3, #92	; 0x5c
 801190a:	d0f0      	beq.n	80118ee <create_name+0x4e>
			break;
 801190c:	e038      	b.n	8011980 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801190e:	7ffb      	ldrb	r3, [r7, #31]
 8011910:	2b2e      	cmp	r3, #46	; 0x2e
 8011912:	d003      	beq.n	801191c <create_name+0x7c>
 8011914:	693a      	ldr	r2, [r7, #16]
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	429a      	cmp	r2, r3
 801191a:	d30c      	bcc.n	8011936 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	2b0b      	cmp	r3, #11
 8011920:	d002      	beq.n	8011928 <create_name+0x88>
 8011922:	7ffb      	ldrb	r3, [r7, #31]
 8011924:	2b2e      	cmp	r3, #46	; 0x2e
 8011926:	d001      	beq.n	801192c <create_name+0x8c>
 8011928:	2306      	movs	r3, #6
 801192a:	e044      	b.n	80119b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801192c:	2308      	movs	r3, #8
 801192e:	613b      	str	r3, [r7, #16]
 8011930:	230b      	movs	r3, #11
 8011932:	61bb      	str	r3, [r7, #24]
			continue;
 8011934:	e022      	b.n	801197c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801193a:	2b00      	cmp	r3, #0
 801193c:	da04      	bge.n	8011948 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801193e:	7ffb      	ldrb	r3, [r7, #31]
 8011940:	3b80      	subs	r3, #128	; 0x80
 8011942:	4a1f      	ldr	r2, [pc, #124]	; (80119c0 <create_name+0x120>)
 8011944:	5cd3      	ldrb	r3, [r2, r3]
 8011946:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011948:	7ffb      	ldrb	r3, [r7, #31]
 801194a:	4619      	mov	r1, r3
 801194c:	481d      	ldr	r0, [pc, #116]	; (80119c4 <create_name+0x124>)
 801194e:	f7fe fe87 	bl	8010660 <chk_chr>
 8011952:	4603      	mov	r3, r0
 8011954:	2b00      	cmp	r3, #0
 8011956:	d001      	beq.n	801195c <create_name+0xbc>
 8011958:	2306      	movs	r3, #6
 801195a:	e02c      	b.n	80119b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801195c:	7ffb      	ldrb	r3, [r7, #31]
 801195e:	2b60      	cmp	r3, #96	; 0x60
 8011960:	d905      	bls.n	801196e <create_name+0xce>
 8011962:	7ffb      	ldrb	r3, [r7, #31]
 8011964:	2b7a      	cmp	r3, #122	; 0x7a
 8011966:	d802      	bhi.n	801196e <create_name+0xce>
 8011968:	7ffb      	ldrb	r3, [r7, #31]
 801196a:	3b20      	subs	r3, #32
 801196c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	1c5a      	adds	r2, r3, #1
 8011972:	613a      	str	r2, [r7, #16]
 8011974:	68ba      	ldr	r2, [r7, #8]
 8011976:	4413      	add	r3, r2
 8011978:	7ffa      	ldrb	r2, [r7, #31]
 801197a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801197c:	e7a6      	b.n	80118cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801197e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	441a      	add	r2, r3
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <create_name+0xf4>
 8011990:	2306      	movs	r3, #6
 8011992:	e010      	b.n	80119b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2be5      	cmp	r3, #229	; 0xe5
 801199a:	d102      	bne.n	80119a2 <create_name+0x102>
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	2205      	movs	r2, #5
 80119a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80119a2:	7ffb      	ldrb	r3, [r7, #31]
 80119a4:	2b20      	cmp	r3, #32
 80119a6:	d801      	bhi.n	80119ac <create_name+0x10c>
 80119a8:	2204      	movs	r2, #4
 80119aa:	e000      	b.n	80119ae <create_name+0x10e>
 80119ac:	2200      	movs	r2, #0
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	330b      	adds	r3, #11
 80119b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80119b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3720      	adds	r7, #32
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	0801ad24 	.word	0x0801ad24
 80119c4:	0801ab28 	.word	0x0801ab28

080119c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b086      	sub	sp, #24
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80119dc:	e002      	b.n	80119e4 <follow_path+0x1c>
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	3301      	adds	r3, #1
 80119e2:	603b      	str	r3, [r7, #0]
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	2b2f      	cmp	r3, #47	; 0x2f
 80119ea:	d0f8      	beq.n	80119de <follow_path+0x16>
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b5c      	cmp	r3, #92	; 0x5c
 80119f2:	d0f4      	beq.n	80119de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	2200      	movs	r2, #0
 80119f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b1f      	cmp	r3, #31
 8011a00:	d80a      	bhi.n	8011a18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2280      	movs	r2, #128	; 0x80
 8011a06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f7ff fb9b 	bl	8011148 <dir_sdi>
 8011a12:	4603      	mov	r3, r0
 8011a14:	75fb      	strb	r3, [r7, #23]
 8011a16:	e043      	b.n	8011aa0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a18:	463b      	mov	r3, r7
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7ff ff3f 	bl	80118a0 <create_name>
 8011a22:	4603      	mov	r3, r0
 8011a24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011a26:	7dfb      	ldrb	r3, [r7, #23]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d134      	bne.n	8011a96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f7ff fdae 	bl	801158e <dir_find>
 8011a32:	4603      	mov	r3, r0
 8011a34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011a3e:	7dfb      	ldrb	r3, [r7, #23]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d00a      	beq.n	8011a5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011a44:	7dfb      	ldrb	r3, [r7, #23]
 8011a46:	2b04      	cmp	r3, #4
 8011a48:	d127      	bne.n	8011a9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011a4a:	7afb      	ldrb	r3, [r7, #11]
 8011a4c:	f003 0304 	and.w	r3, r3, #4
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d122      	bne.n	8011a9a <follow_path+0xd2>
 8011a54:	2305      	movs	r3, #5
 8011a56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011a58:	e01f      	b.n	8011a9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a5a:	7afb      	ldrb	r3, [r7, #11]
 8011a5c:	f003 0304 	and.w	r3, r3, #4
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d11c      	bne.n	8011a9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	799b      	ldrb	r3, [r3, #6]
 8011a68:	f003 0310 	and.w	r3, r3, #16
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d102      	bne.n	8011a76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011a70:	2305      	movs	r3, #5
 8011a72:	75fb      	strb	r3, [r7, #23]
 8011a74:	e014      	b.n	8011aa0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	695b      	ldr	r3, [r3, #20]
 8011a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a84:	4413      	add	r3, r2
 8011a86:	4619      	mov	r1, r3
 8011a88:	68f8      	ldr	r0, [r7, #12]
 8011a8a:	f7ff fce4 	bl	8011456 <ld_clust>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a94:	e7c0      	b.n	8011a18 <follow_path+0x50>
			if (res != FR_OK) break;
 8011a96:	bf00      	nop
 8011a98:	e002      	b.n	8011aa0 <follow_path+0xd8>
				break;
 8011a9a:	bf00      	nop
 8011a9c:	e000      	b.n	8011aa0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a9e:	bf00      	nop
			}
		}
	}

	return res;
 8011aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011aaa:	b480      	push	{r7}
 8011aac:	b087      	sub	sp, #28
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d031      	beq.n	8011b24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	617b      	str	r3, [r7, #20]
 8011ac6:	e002      	b.n	8011ace <get_ldnumber+0x24>
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	3301      	adds	r3, #1
 8011acc:	617b      	str	r3, [r7, #20]
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	2b20      	cmp	r3, #32
 8011ad4:	d903      	bls.n	8011ade <get_ldnumber+0x34>
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b3a      	cmp	r3, #58	; 0x3a
 8011adc:	d1f4      	bne.n	8011ac8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2b3a      	cmp	r3, #58	; 0x3a
 8011ae4:	d11c      	bne.n	8011b20 <get_ldnumber+0x76>
			tp = *path;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	1c5a      	adds	r2, r3, #1
 8011af0:	60fa      	str	r2, [r7, #12]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	3b30      	subs	r3, #48	; 0x30
 8011af6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	2b09      	cmp	r3, #9
 8011afc:	d80e      	bhi.n	8011b1c <get_ldnumber+0x72>
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d10a      	bne.n	8011b1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d107      	bne.n	8011b1c <get_ldnumber+0x72>
					vol = (int)i;
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	3301      	adds	r3, #1
 8011b14:	617b      	str	r3, [r7, #20]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	697a      	ldr	r2, [r7, #20]
 8011b1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	e002      	b.n	8011b26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011b20:	2300      	movs	r3, #0
 8011b22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011b24:	693b      	ldr	r3, [r7, #16]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	371c      	adds	r7, #28
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
	...

08011b34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	70da      	strb	r2, [r3, #3]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f04f 32ff 	mov.w	r2, #4294967295
 8011b4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7fe ff82 	bl	8010a58 <move_window>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <check_fs+0x2a>
 8011b5a:	2304      	movs	r3, #4
 8011b5c:	e038      	b.n	8011bd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	3334      	adds	r3, #52	; 0x34
 8011b62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe fc96 	bl	8010498 <ld_word>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d001      	beq.n	8011b7c <check_fs+0x48>
 8011b78:	2303      	movs	r3, #3
 8011b7a:	e029      	b.n	8011bd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b82:	2be9      	cmp	r3, #233	; 0xe9
 8011b84:	d009      	beq.n	8011b9a <check_fs+0x66>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011b8c:	2beb      	cmp	r3, #235	; 0xeb
 8011b8e:	d11e      	bne.n	8011bce <check_fs+0x9a>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011b96:	2b90      	cmp	r3, #144	; 0x90
 8011b98:	d119      	bne.n	8011bce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	3334      	adds	r3, #52	; 0x34
 8011b9e:	3336      	adds	r3, #54	; 0x36
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fe fc91 	bl	80104c8 <ld_dword>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011bac:	4a0a      	ldr	r2, [pc, #40]	; (8011bd8 <check_fs+0xa4>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d101      	bne.n	8011bb6 <check_fs+0x82>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	e00c      	b.n	8011bd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	3334      	adds	r3, #52	; 0x34
 8011bba:	3352      	adds	r3, #82	; 0x52
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fe fc83 	bl	80104c8 <ld_dword>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <check_fs+0xa8>)
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d101      	bne.n	8011bce <check_fs+0x9a>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	e000      	b.n	8011bd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011bce:	2302      	movs	r3, #2
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	00544146 	.word	0x00544146
 8011bdc:	33544146 	.word	0x33544146

08011be0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b096      	sub	sp, #88	; 0x58
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	60b9      	str	r1, [r7, #8]
 8011bea:	4613      	mov	r3, r2
 8011bec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f7ff ff58 	bl	8011aaa <get_ldnumber>
 8011bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	da01      	bge.n	8011c06 <find_volume+0x26>
 8011c02:	230b      	movs	r3, #11
 8011c04:	e236      	b.n	8012074 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011c06:	4aac      	ldr	r2, [pc, #688]	; (8011eb8 <find_volume+0x2d8>)
 8011c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d101      	bne.n	8011c1a <find_volume+0x3a>
 8011c16:	230c      	movs	r3, #12
 8011c18:	e22c      	b.n	8012074 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8011c1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c1c:	f7fe fd3b 	bl	8010696 <lock_fs>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d101      	bne.n	8011c2a <find_volume+0x4a>
 8011c26:	230f      	movs	r3, #15
 8011c28:	e224      	b.n	8012074 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011c30:	79fb      	ldrb	r3, [r7, #7]
 8011c32:	f023 0301 	bic.w	r3, r3, #1
 8011c36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d01a      	beq.n	8011c76 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	785b      	ldrb	r3, [r3, #1]
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7fe fb89 	bl	801035c <disk_status>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011c50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c54:	f003 0301 	and.w	r3, r3, #1
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d10c      	bne.n	8011c76 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011c5c:	79fb      	ldrb	r3, [r7, #7]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d007      	beq.n	8011c72 <find_volume+0x92>
 8011c62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c66:	f003 0304 	and.w	r3, r3, #4
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d001      	beq.n	8011c72 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8011c6e:	230a      	movs	r3, #10
 8011c70:	e200      	b.n	8012074 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8011c72:	2300      	movs	r3, #0
 8011c74:	e1fe      	b.n	8012074 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c78:	2200      	movs	r2, #0
 8011c7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7e:	b2da      	uxtb	r2, r3
 8011c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c86:	785b      	ldrb	r3, [r3, #1]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fe fb81 	bl	8010390 <disk_initialize>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011c94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c98:	f003 0301 	and.w	r3, r3, #1
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d001      	beq.n	8011ca4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011ca0:	2303      	movs	r3, #3
 8011ca2:	e1e7      	b.n	8012074 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011ca4:	79fb      	ldrb	r3, [r7, #7]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d007      	beq.n	8011cba <find_volume+0xda>
 8011caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cae:	f003 0304 	and.w	r3, r3, #4
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011cb6:	230a      	movs	r3, #10
 8011cb8:	e1dc      	b.n	8012074 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011cbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cc2:	f7ff ff37 	bl	8011b34 <check_fs>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d14b      	bne.n	8011d6c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8011cd8:	e01f      	b.n	8011d1a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ce2:	011b      	lsls	r3, r3, #4
 8011ce4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011ce8:	4413      	add	r3, r2
 8011cea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cee:	3304      	adds	r3, #4
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d006      	beq.n	8011d04 <find_volume+0x124>
 8011cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf8:	3308      	adds	r3, #8
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe fbe4 	bl	80104c8 <ld_dword>
 8011d00:	4602      	mov	r2, r0
 8011d02:	e000      	b.n	8011d06 <find_volume+0x126>
 8011d04:	2200      	movs	r2, #0
 8011d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d08:	009b      	lsls	r3, r3, #2
 8011d0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011d0e:	440b      	add	r3, r1
 8011d10:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d16:	3301      	adds	r3, #1
 8011d18:	643b      	str	r3, [r7, #64]	; 0x40
 8011d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d1c:	2b03      	cmp	r3, #3
 8011d1e:	d9dc      	bls.n	8011cda <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011d20:	2300      	movs	r3, #0
 8011d22:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d002      	beq.n	8011d30 <find_volume+0x150>
 8011d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d38:	4413      	add	r3, r2
 8011d3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011d3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d005      	beq.n	8011d52 <find_volume+0x172>
 8011d46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d4a:	f7ff fef3 	bl	8011b34 <check_fs>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	e000      	b.n	8011d54 <find_volume+0x174>
 8011d52:	2303      	movs	r3, #3
 8011d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d905      	bls.n	8011d6c <find_volume+0x18c>
 8011d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d62:	3301      	adds	r3, #1
 8011d64:	643b      	str	r3, [r7, #64]	; 0x40
 8011d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d68:	2b03      	cmp	r3, #3
 8011d6a:	d9e1      	bls.n	8011d30 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d70:	2b04      	cmp	r3, #4
 8011d72:	d101      	bne.n	8011d78 <find_volume+0x198>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e17d      	b.n	8012074 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d901      	bls.n	8011d84 <find_volume+0x1a4>
 8011d80:	230d      	movs	r3, #13
 8011d82:	e177      	b.n	8012074 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d86:	3334      	adds	r3, #52	; 0x34
 8011d88:	330b      	adds	r3, #11
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7fe fb84 	bl	8010498 <ld_word>
 8011d90:	4603      	mov	r3, r0
 8011d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d96:	d001      	beq.n	8011d9c <find_volume+0x1bc>
 8011d98:	230d      	movs	r3, #13
 8011d9a:	e16b      	b.n	8012074 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	3334      	adds	r3, #52	; 0x34
 8011da0:	3316      	adds	r3, #22
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe fb78 	bl	8010498 <ld_word>
 8011da8:	4603      	mov	r3, r0
 8011daa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d106      	bne.n	8011dc0 <find_volume+0x1e0>
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	3334      	adds	r3, #52	; 0x34
 8011db6:	3324      	adds	r3, #36	; 0x24
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7fe fb85 	bl	80104c8 <ld_dword>
 8011dbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011dc4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd2:	789b      	ldrb	r3, [r3, #2]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d005      	beq.n	8011de4 <find_volume+0x204>
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dda:	789b      	ldrb	r3, [r3, #2]
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d001      	beq.n	8011de4 <find_volume+0x204>
 8011de0:	230d      	movs	r3, #13
 8011de2:	e147      	b.n	8012074 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de6:	789b      	ldrb	r3, [r3, #2]
 8011de8:	461a      	mov	r2, r3
 8011dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dec:	fb02 f303 	mul.w	r3, r2, r3
 8011df0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e00:	895b      	ldrh	r3, [r3, #10]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d008      	beq.n	8011e18 <find_volume+0x238>
 8011e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e08:	895b      	ldrh	r3, [r3, #10]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0e:	895b      	ldrh	r3, [r3, #10]
 8011e10:	3b01      	subs	r3, #1
 8011e12:	4013      	ands	r3, r2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d001      	beq.n	8011e1c <find_volume+0x23c>
 8011e18:	230d      	movs	r3, #13
 8011e1a:	e12b      	b.n	8012074 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1e:	3334      	adds	r3, #52	; 0x34
 8011e20:	3311      	adds	r3, #17
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fe fb38 	bl	8010498 <ld_word>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e32:	891b      	ldrh	r3, [r3, #8]
 8011e34:	f003 030f 	and.w	r3, r3, #15
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d001      	beq.n	8011e42 <find_volume+0x262>
 8011e3e:	230d      	movs	r3, #13
 8011e40:	e118      	b.n	8012074 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e44:	3334      	adds	r3, #52	; 0x34
 8011e46:	3313      	adds	r3, #19
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fe fb25 	bl	8010498 <ld_word>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d106      	bne.n	8011e66 <find_volume+0x286>
 8011e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5a:	3334      	adds	r3, #52	; 0x34
 8011e5c:	3320      	adds	r3, #32
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fe fb32 	bl	80104c8 <ld_dword>
 8011e64:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	3334      	adds	r3, #52	; 0x34
 8011e6a:	330e      	adds	r3, #14
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7fe fb13 	bl	8010498 <ld_word>
 8011e72:	4603      	mov	r3, r0
 8011e74:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <find_volume+0x2a0>
 8011e7c:	230d      	movs	r3, #13
 8011e7e:	e0f9      	b.n	8012074 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011e80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e84:	4413      	add	r3, r2
 8011e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e88:	8912      	ldrh	r2, [r2, #8]
 8011e8a:	0912      	lsrs	r2, r2, #4
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	4413      	add	r3, r2
 8011e90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d201      	bcs.n	8011e9e <find_volume+0x2be>
 8011e9a:	230d      	movs	r3, #13
 8011e9c:	e0ea      	b.n	8012074 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea2:	1ad3      	subs	r3, r2, r3
 8011ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ea6:	8952      	ldrh	r2, [r2, #10]
 8011ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011eac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d103      	bne.n	8011ebc <find_volume+0x2dc>
 8011eb4:	230d      	movs	r3, #13
 8011eb6:	e0dd      	b.n	8012074 <find_volume+0x494>
 8011eb8:	20000438 	.word	0x20000438
		fmt = FS_FAT32;
 8011ebc:	2303      	movs	r3, #3
 8011ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d802      	bhi.n	8011ed2 <find_volume+0x2f2>
 8011ecc:	2302      	movs	r3, #2
 8011ece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d802      	bhi.n	8011ee2 <find_volume+0x302>
 8011edc:	2301      	movs	r3, #1
 8011ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	1c9a      	adds	r2, r3, #2
 8011ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011eee:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011ef0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ef4:	441a      	add	r2, r3
 8011ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011efa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efe:	441a      	add	r2, r3
 8011f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f02:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f08:	2b03      	cmp	r3, #3
 8011f0a:	d11e      	bne.n	8011f4a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0e:	3334      	adds	r3, #52	; 0x34
 8011f10:	332a      	adds	r3, #42	; 0x2a
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fe fac0 	bl	8010498 <ld_word>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d001      	beq.n	8011f22 <find_volume+0x342>
 8011f1e:	230d      	movs	r3, #13
 8011f20:	e0a8      	b.n	8012074 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	891b      	ldrh	r3, [r3, #8]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <find_volume+0x34e>
 8011f2a:	230d      	movs	r3, #13
 8011f2c:	e0a2      	b.n	8012074 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f30:	3334      	adds	r3, #52	; 0x34
 8011f32:	332c      	adds	r3, #44	; 0x2c
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fac7 	bl	80104c8 <ld_dword>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f42:	699b      	ldr	r3, [r3, #24]
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	647b      	str	r3, [r7, #68]	; 0x44
 8011f48:	e01f      	b.n	8011f8a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4c:	891b      	ldrh	r3, [r3, #8]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d101      	bne.n	8011f56 <find_volume+0x376>
 8011f52:	230d      	movs	r3, #13
 8011f54:	e08e      	b.n	8012074 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f5c:	441a      	add	r2, r3
 8011f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f60:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011f62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d103      	bne.n	8011f72 <find_volume+0x392>
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	699b      	ldr	r3, [r3, #24]
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	e00a      	b.n	8011f88 <find_volume+0x3a8>
 8011f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f74:	699a      	ldr	r2, [r3, #24]
 8011f76:	4613      	mov	r3, r2
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	085a      	lsrs	r2, r3, #1
 8011f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f80:	699b      	ldr	r3, [r3, #24]
 8011f82:	f003 0301 	and.w	r3, r3, #1
 8011f86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011f88:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8c:	69da      	ldr	r2, [r3, #28]
 8011f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011f94:	0a5b      	lsrs	r3, r3, #9
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d201      	bcs.n	8011f9e <find_volume+0x3be>
 8011f9a:	230d      	movs	r3, #13
 8011f9c:	e06a      	b.n	8012074 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa4:	615a      	str	r2, [r3, #20]
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	695a      	ldr	r2, [r3, #20]
 8011faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb0:	2280      	movs	r2, #128	; 0x80
 8011fb2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fb8:	2b03      	cmp	r3, #3
 8011fba:	d149      	bne.n	8012050 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbe:	3334      	adds	r3, #52	; 0x34
 8011fc0:	3330      	adds	r3, #48	; 0x30
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7fe fa68 	bl	8010498 <ld_word>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d140      	bne.n	8012050 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011fd6:	f7fe fd3f 	bl	8010a58 <move_window>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d137      	bne.n	8012050 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe8:	3334      	adds	r3, #52	; 0x34
 8011fea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fe fa52 	bl	8010498 <ld_word>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d127      	bne.n	8012050 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012002:	3334      	adds	r3, #52	; 0x34
 8012004:	4618      	mov	r0, r3
 8012006:	f7fe fa5f 	bl	80104c8 <ld_dword>
 801200a:	4602      	mov	r2, r0
 801200c:	4b1b      	ldr	r3, [pc, #108]	; (801207c <find_volume+0x49c>)
 801200e:	429a      	cmp	r2, r3
 8012010:	d11e      	bne.n	8012050 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012014:	3334      	adds	r3, #52	; 0x34
 8012016:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801201a:	4618      	mov	r0, r3
 801201c:	f7fe fa54 	bl	80104c8 <ld_dword>
 8012020:	4602      	mov	r2, r0
 8012022:	4b17      	ldr	r3, [pc, #92]	; (8012080 <find_volume+0x4a0>)
 8012024:	429a      	cmp	r2, r3
 8012026:	d113      	bne.n	8012050 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	3334      	adds	r3, #52	; 0x34
 801202c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012030:	4618      	mov	r0, r3
 8012032:	f7fe fa49 	bl	80104c8 <ld_dword>
 8012036:	4602      	mov	r2, r0
 8012038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203e:	3334      	adds	r3, #52	; 0x34
 8012040:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012044:	4618      	mov	r0, r3
 8012046:	f7fe fa3f 	bl	80104c8 <ld_dword>
 801204a:	4602      	mov	r2, r0
 801204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012052:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012056:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012058:	4b0a      	ldr	r3, [pc, #40]	; (8012084 <find_volume+0x4a4>)
 801205a:	881b      	ldrh	r3, [r3, #0]
 801205c:	3301      	adds	r3, #1
 801205e:	b29a      	uxth	r2, r3
 8012060:	4b08      	ldr	r3, [pc, #32]	; (8012084 <find_volume+0x4a4>)
 8012062:	801a      	strh	r2, [r3, #0]
 8012064:	4b07      	ldr	r3, [pc, #28]	; (8012084 <find_volume+0x4a4>)
 8012066:	881a      	ldrh	r2, [r3, #0]
 8012068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801206c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801206e:	f7fe fc8b 	bl	8010988 <clear_lock>
#endif
	return FR_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3758      	adds	r7, #88	; 0x58
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	41615252 	.word	0x41615252
 8012080:	61417272 	.word	0x61417272
 8012084:	2000043c 	.word	0x2000043c

08012088 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012092:	2309      	movs	r3, #9
 8012094:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d02e      	beq.n	80120fa <validate+0x72>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d02a      	beq.n	80120fa <validate+0x72>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d025      	beq.n	80120fa <validate+0x72>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	889a      	ldrh	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	88db      	ldrh	r3, [r3, #6]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d11e      	bne.n	80120fa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fe fae8 	bl	8010696 <lock_fs>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d014      	beq.n	80120f6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	785b      	ldrb	r3, [r3, #1]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe f942 	bl	801035c <disk_status>
 80120d8:	4603      	mov	r3, r0
 80120da:	f003 0301 	and.w	r3, r3, #1
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d102      	bne.n	80120e8 <validate+0x60>
				res = FR_OK;
 80120e2:	2300      	movs	r3, #0
 80120e4:	73fb      	strb	r3, [r7, #15]
 80120e6:	e008      	b.n	80120fa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2100      	movs	r1, #0
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fe fae7 	bl	80106c2 <unlock_fs>
 80120f4:	e001      	b.n	80120fa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80120f6:	230f      	movs	r3, #15
 80120f8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80120fa:	7bfb      	ldrb	r3, [r7, #15]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d102      	bne.n	8012106 <validate+0x7e>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	e000      	b.n	8012108 <validate+0x80>
 8012106:	2300      	movs	r3, #0
 8012108:	683a      	ldr	r2, [r7, #0]
 801210a:	6013      	str	r3, [r2, #0]
	return res;
 801210c:	7bfb      	ldrb	r3, [r7, #15]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
	...

08012118 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b088      	sub	sp, #32
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	4613      	mov	r3, r2
 8012124:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801212a:	f107 0310 	add.w	r3, r7, #16
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff fcbb 	bl	8011aaa <get_ldnumber>
 8012134:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	2b00      	cmp	r3, #0
 801213a:	da01      	bge.n	8012140 <f_mount+0x28>
 801213c:	230b      	movs	r3, #11
 801213e:	e048      	b.n	80121d2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012140:	4a26      	ldr	r2, [pc, #152]	; (80121dc <f_mount+0xc4>)
 8012142:	69fb      	ldr	r3, [r7, #28]
 8012144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012148:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d00f      	beq.n	8012170 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012150:	69b8      	ldr	r0, [r7, #24]
 8012152:	f7fe fc19 	bl	8010988 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8012156:	69bb      	ldr	r3, [r7, #24]
 8012158:	68db      	ldr	r3, [r3, #12]
 801215a:	4618      	mov	r0, r3
 801215c:	f001 f828 	bl	80131b0 <ff_del_syncobj>
 8012160:	4603      	mov	r3, r0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <f_mount+0x52>
 8012166:	2302      	movs	r3, #2
 8012168:	e033      	b.n	80121d2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	2200      	movs	r2, #0
 801216e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d00f      	beq.n	8012196 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	2200      	movs	r2, #0
 801217a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	b2da      	uxtb	r2, r3
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	330c      	adds	r3, #12
 8012184:	4619      	mov	r1, r3
 8012186:	4610      	mov	r0, r2
 8012188:	f000 fff7 	bl	801317a <ff_cre_syncobj>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d101      	bne.n	8012196 <f_mount+0x7e>
 8012192:	2302      	movs	r3, #2
 8012194:	e01d      	b.n	80121d2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	4910      	ldr	r1, [pc, #64]	; (80121dc <f_mount+0xc4>)
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d002      	beq.n	80121ac <f_mount+0x94>
 80121a6:	79fb      	ldrb	r3, [r7, #7]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d001      	beq.n	80121b0 <f_mount+0x98>
 80121ac:	2300      	movs	r3, #0
 80121ae:	e010      	b.n	80121d2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80121b0:	f107 010c 	add.w	r1, r7, #12
 80121b4:	f107 0308 	add.w	r3, r7, #8
 80121b8:	2200      	movs	r2, #0
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7ff fd10 	bl	8011be0 <find_volume>
 80121c0:	4603      	mov	r3, r0
 80121c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	7dfa      	ldrb	r2, [r7, #23]
 80121c8:	4611      	mov	r1, r2
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fe fa79 	bl	80106c2 <unlock_fs>
 80121d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3720      	adds	r7, #32
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	20000438 	.word	0x20000438

080121e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b09a      	sub	sp, #104	; 0x68
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	4613      	mov	r3, r2
 80121ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d101      	bne.n	80121f8 <f_open+0x18>
 80121f4:	2309      	movs	r3, #9
 80121f6:	e1b4      	b.n	8012562 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80121f8:	79fb      	ldrb	r3, [r7, #7]
 80121fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012200:	79fa      	ldrb	r2, [r7, #7]
 8012202:	f107 0114 	add.w	r1, r7, #20
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	4618      	mov	r0, r3
 801220c:	f7ff fce8 	bl	8011be0 <find_volume>
 8012210:	4603      	mov	r3, r0
 8012212:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012216:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801221a:	2b00      	cmp	r3, #0
 801221c:	f040 8191 	bne.w	8012542 <f_open+0x362>
		dj.obj.fs = fs;
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012224:	68ba      	ldr	r2, [r7, #8]
 8012226:	f107 0318 	add.w	r3, r7, #24
 801222a:	4611      	mov	r1, r2
 801222c:	4618      	mov	r0, r3
 801222e:	f7ff fbcb 	bl	80119c8 <follow_path>
 8012232:	4603      	mov	r3, r0
 8012234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012238:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801223c:	2b00      	cmp	r3, #0
 801223e:	d11a      	bne.n	8012276 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012244:	b25b      	sxtb	r3, r3
 8012246:	2b00      	cmp	r3, #0
 8012248:	da03      	bge.n	8012252 <f_open+0x72>
				res = FR_INVALID_NAME;
 801224a:	2306      	movs	r3, #6
 801224c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012250:	e011      	b.n	8012276 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012252:	79fb      	ldrb	r3, [r7, #7]
 8012254:	f023 0301 	bic.w	r3, r3, #1
 8012258:	2b00      	cmp	r3, #0
 801225a:	bf14      	ite	ne
 801225c:	2301      	movne	r3, #1
 801225e:	2300      	moveq	r3, #0
 8012260:	b2db      	uxtb	r3, r3
 8012262:	461a      	mov	r2, r3
 8012264:	f107 0318 	add.w	r3, r7, #24
 8012268:	4611      	mov	r1, r2
 801226a:	4618      	mov	r0, r3
 801226c:	f7fe fa44 	bl	80106f8 <chk_lock>
 8012270:	4603      	mov	r3, r0
 8012272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	f003 031c 	and.w	r3, r3, #28
 801227c:	2b00      	cmp	r3, #0
 801227e:	d07f      	beq.n	8012380 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012284:	2b00      	cmp	r3, #0
 8012286:	d017      	beq.n	80122b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012288:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801228c:	2b04      	cmp	r3, #4
 801228e:	d10e      	bne.n	80122ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012290:	f7fe fa8e 	bl	80107b0 <enq_lock>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d006      	beq.n	80122a8 <f_open+0xc8>
 801229a:	f107 0318 	add.w	r3, r7, #24
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff f9ca 	bl	8011638 <dir_register>
 80122a4:	4603      	mov	r3, r0
 80122a6:	e000      	b.n	80122aa <f_open+0xca>
 80122a8:	2312      	movs	r3, #18
 80122aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	f043 0308 	orr.w	r3, r3, #8
 80122b4:	71fb      	strb	r3, [r7, #7]
 80122b6:	e010      	b.n	80122da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80122b8:	7fbb      	ldrb	r3, [r7, #30]
 80122ba:	f003 0311 	and.w	r3, r3, #17
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d003      	beq.n	80122ca <f_open+0xea>
					res = FR_DENIED;
 80122c2:	2307      	movs	r3, #7
 80122c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80122c8:	e007      	b.n	80122da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80122ca:	79fb      	ldrb	r3, [r7, #7]
 80122cc:	f003 0304 	and.w	r3, r3, #4
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d002      	beq.n	80122da <f_open+0xfa>
 80122d4:	2308      	movs	r3, #8
 80122d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80122da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d168      	bne.n	80123b4 <f_open+0x1d4>
 80122e2:	79fb      	ldrb	r3, [r7, #7]
 80122e4:	f003 0308 	and.w	r3, r3, #8
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d063      	beq.n	80123b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80122ec:	f7fc f9e4 	bl	800e6b8 <get_fattime>
 80122f0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80122f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f4:	330e      	adds	r3, #14
 80122f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fe f923 	bl	8010544 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80122fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012300:	3316      	adds	r3, #22
 8012302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe f91d 	bl	8010544 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	330b      	adds	r3, #11
 801230e:	2220      	movs	r2, #32
 8012310:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012316:	4611      	mov	r1, r2
 8012318:	4618      	mov	r0, r3
 801231a:	f7ff f89c 	bl	8011456 <ld_clust>
 801231e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012324:	2200      	movs	r2, #0
 8012326:	4618      	mov	r0, r3
 8012328:	f7ff f8b4 	bl	8011494 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232e:	331c      	adds	r3, #28
 8012330:	2100      	movs	r1, #0
 8012332:	4618      	mov	r0, r3
 8012334:	f7fe f906 	bl	8010544 <st_dword>
					fs->wflag = 1;
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	2201      	movs	r2, #1
 801233c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801233e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012340:	2b00      	cmp	r3, #0
 8012342:	d037      	beq.n	80123b4 <f_open+0x1d4>
						dw = fs->winsect;
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012348:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801234a:	f107 0318 	add.w	r3, r7, #24
 801234e:	2200      	movs	r2, #0
 8012350:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012352:	4618      	mov	r0, r3
 8012354:	f7fe fdc7 	bl	8010ee6 <remove_chain>
 8012358:	4603      	mov	r3, r0
 801235a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801235e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012362:	2b00      	cmp	r3, #0
 8012364:	d126      	bne.n	80123b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801236a:	4618      	mov	r0, r3
 801236c:	f7fe fb74 	bl	8010a58 <move_window>
 8012370:	4603      	mov	r3, r0
 8012372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801237a:	3a01      	subs	r2, #1
 801237c:	611a      	str	r2, [r3, #16]
 801237e:	e019      	b.n	80123b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012380:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012384:	2b00      	cmp	r3, #0
 8012386:	d115      	bne.n	80123b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012388:	7fbb      	ldrb	r3, [r7, #30]
 801238a:	f003 0310 	and.w	r3, r3, #16
 801238e:	2b00      	cmp	r3, #0
 8012390:	d003      	beq.n	801239a <f_open+0x1ba>
					res = FR_NO_FILE;
 8012392:	2304      	movs	r3, #4
 8012394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012398:	e00c      	b.n	80123b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801239a:	79fb      	ldrb	r3, [r7, #7]
 801239c:	f003 0302 	and.w	r3, r3, #2
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d007      	beq.n	80123b4 <f_open+0x1d4>
 80123a4:	7fbb      	ldrb	r3, [r7, #30]
 80123a6:	f003 0301 	and.w	r3, r3, #1
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d002      	beq.n	80123b4 <f_open+0x1d4>
						res = FR_DENIED;
 80123ae:	2307      	movs	r3, #7
 80123b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80123b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d128      	bne.n	801240e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80123bc:	79fb      	ldrb	r3, [r7, #7]
 80123be:	f003 0308 	and.w	r3, r3, #8
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d003      	beq.n	80123ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80123c6:	79fb      	ldrb	r3, [r7, #7]
 80123c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80123d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80123dc:	79fb      	ldrb	r3, [r7, #7]
 80123de:	f023 0301 	bic.w	r3, r3, #1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	bf14      	ite	ne
 80123e6:	2301      	movne	r3, #1
 80123e8:	2300      	moveq	r3, #0
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	461a      	mov	r2, r3
 80123ee:	f107 0318 	add.w	r3, r7, #24
 80123f2:	4611      	mov	r1, r2
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fe f9fd 	bl	80107f4 <inc_lock>
 80123fa:	4602      	mov	r2, r0
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d102      	bne.n	801240e <f_open+0x22e>
 8012408:	2302      	movs	r3, #2
 801240a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801240e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012412:	2b00      	cmp	r3, #0
 8012414:	f040 8095 	bne.w	8012542 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801241c:	4611      	mov	r1, r2
 801241e:	4618      	mov	r0, r3
 8012420:	f7ff f819 	bl	8011456 <ld_clust>
 8012424:	4602      	mov	r2, r0
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242c:	331c      	adds	r3, #28
 801242e:	4618      	mov	r0, r3
 8012430:	f7fe f84a 	bl	80104c8 <ld_dword>
 8012434:	4602      	mov	r2, r0
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2200      	movs	r2, #0
 801243e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012440:	697a      	ldr	r2, [r7, #20]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	88da      	ldrh	r2, [r3, #6]
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	79fa      	ldrb	r2, [r7, #7]
 8012452:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2200      	movs	r2, #0
 8012458:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2200      	movs	r2, #0
 801245e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2200      	movs	r2, #0
 8012464:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	3330      	adds	r3, #48	; 0x30
 801246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801246e:	2100      	movs	r1, #0
 8012470:	4618      	mov	r0, r3
 8012472:	f7fe f8b4 	bl	80105de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012476:	79fb      	ldrb	r3, [r7, #7]
 8012478:	f003 0320 	and.w	r3, r3, #32
 801247c:	2b00      	cmp	r3, #0
 801247e:	d060      	beq.n	8012542 <f_open+0x362>
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d05c      	beq.n	8012542 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	68da      	ldr	r2, [r3, #12]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	895b      	ldrh	r3, [r3, #10]
 8012494:	025b      	lsls	r3, r3, #9
 8012496:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	68db      	ldr	r3, [r3, #12]
 80124a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80124a4:	e016      	b.n	80124d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fe fb8f 	bl	8010bce <get_fat>
 80124b0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80124b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d802      	bhi.n	80124be <f_open+0x2de>
 80124b8:	2302      	movs	r3, #2
 80124ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80124be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80124c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c4:	d102      	bne.n	80124cc <f_open+0x2ec>
 80124c6:	2301      	movs	r3, #1
 80124c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80124cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80124ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80124d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d103      	bne.n	80124e4 <f_open+0x304>
 80124dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80124de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d8e0      	bhi.n	80124a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80124e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80124ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d127      	bne.n	8012542 <f_open+0x362>
 80124f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d022      	beq.n	8012542 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012500:	4618      	mov	r0, r3
 8012502:	f7fe fb45 	bl	8010b90 <clust2sect>
 8012506:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801250a:	2b00      	cmp	r3, #0
 801250c:	d103      	bne.n	8012516 <f_open+0x336>
						res = FR_INT_ERR;
 801250e:	2302      	movs	r3, #2
 8012510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012514:	e015      	b.n	8012542 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012518:	0a5a      	lsrs	r2, r3, #9
 801251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801251c:	441a      	add	r2, r3
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	7858      	ldrb	r0, [r3, #1]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	6a1a      	ldr	r2, [r3, #32]
 8012530:	2301      	movs	r3, #1
 8012532:	f7fd ff53 	bl	80103dc <disk_read>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <f_open+0x362>
 801253c:	2301      	movs	r3, #1
 801253e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012546:	2b00      	cmp	r3, #0
 8012548:	d002      	beq.n	8012550 <f_open+0x370>
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2200      	movs	r2, #0
 801254e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8012556:	4611      	mov	r1, r2
 8012558:	4618      	mov	r0, r3
 801255a:	f7fe f8b2 	bl	80106c2 <unlock_fs>
 801255e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012562:	4618      	mov	r0, r3
 8012564:	3768      	adds	r7, #104	; 0x68
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801256a:	b580      	push	{r7, lr}
 801256c:	b08c      	sub	sp, #48	; 0x30
 801256e:	af00      	add	r7, sp, #0
 8012570:	60f8      	str	r0, [r7, #12]
 8012572:	60b9      	str	r1, [r7, #8]
 8012574:	607a      	str	r2, [r7, #4]
 8012576:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	2200      	movs	r2, #0
 8012580:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f107 0210 	add.w	r2, r7, #16
 8012588:	4611      	mov	r1, r2
 801258a:	4618      	mov	r0, r3
 801258c:	f7ff fd7c 	bl	8012088 <validate>
 8012590:	4603      	mov	r3, r0
 8012592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801259a:	2b00      	cmp	r3, #0
 801259c:	d107      	bne.n	80125ae <f_write+0x44>
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	7d5b      	ldrb	r3, [r3, #21]
 80125a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80125a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d009      	beq.n	80125c2 <f_write+0x58>
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80125b4:	4611      	mov	r1, r2
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fe f883 	bl	80106c2 <unlock_fs>
 80125bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125c0:	e173      	b.n	80128aa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	7d1b      	ldrb	r3, [r3, #20]
 80125c6:	f003 0302 	and.w	r3, r3, #2
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d106      	bne.n	80125dc <f_write+0x72>
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	2107      	movs	r1, #7
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fe f875 	bl	80106c2 <unlock_fs>
 80125d8:	2307      	movs	r3, #7
 80125da:	e166      	b.n	80128aa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	699a      	ldr	r2, [r3, #24]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	441a      	add	r2, r3
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	699b      	ldr	r3, [r3, #24]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	f080 814b 	bcs.w	8012884 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	699b      	ldr	r3, [r3, #24]
 80125f2:	43db      	mvns	r3, r3
 80125f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80125f6:	e145      	b.n	8012884 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	699b      	ldr	r3, [r3, #24]
 80125fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012600:	2b00      	cmp	r3, #0
 8012602:	f040 8101 	bne.w	8012808 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	699b      	ldr	r3, [r3, #24]
 801260a:	0a5b      	lsrs	r3, r3, #9
 801260c:	693a      	ldr	r2, [r7, #16]
 801260e:	8952      	ldrh	r2, [r2, #10]
 8012610:	3a01      	subs	r2, #1
 8012612:	4013      	ands	r3, r2
 8012614:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d14d      	bne.n	80126b8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	699b      	ldr	r3, [r3, #24]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d10c      	bne.n	801263e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262c:	2b00      	cmp	r3, #0
 801262e:	d11a      	bne.n	8012666 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2100      	movs	r1, #0
 8012634:	4618      	mov	r0, r3
 8012636:	f7fe fcbb 	bl	8010fb0 <create_chain>
 801263a:	62b8      	str	r0, [r7, #40]	; 0x28
 801263c:	e013      	b.n	8012666 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012642:	2b00      	cmp	r3, #0
 8012644:	d007      	beq.n	8012656 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	699b      	ldr	r3, [r3, #24]
 801264a:	4619      	mov	r1, r3
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7fe fd47 	bl	80110e0 <clmt_clust>
 8012652:	62b8      	str	r0, [r7, #40]	; 0x28
 8012654:	e007      	b.n	8012666 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012656:	68fa      	ldr	r2, [r7, #12]
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	69db      	ldr	r3, [r3, #28]
 801265c:	4619      	mov	r1, r3
 801265e:	4610      	mov	r0, r2
 8012660:	f7fe fca6 	bl	8010fb0 <create_chain>
 8012664:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	2b00      	cmp	r3, #0
 801266a:	f000 8110 	beq.w	801288e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012670:	2b01      	cmp	r3, #1
 8012672:	d109      	bne.n	8012688 <f_write+0x11e>
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2202      	movs	r2, #2
 8012678:	755a      	strb	r2, [r3, #21]
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	2102      	movs	r1, #2
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe f81f 	bl	80106c2 <unlock_fs>
 8012684:	2302      	movs	r3, #2
 8012686:	e110      	b.n	80128aa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801268e:	d109      	bne.n	80126a4 <f_write+0x13a>
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2201      	movs	r2, #1
 8012694:	755a      	strb	r2, [r3, #21]
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	2101      	movs	r1, #1
 801269a:	4618      	mov	r0, r3
 801269c:	f7fe f811 	bl	80106c2 <unlock_fs>
 80126a0:	2301      	movs	r3, #1
 80126a2:	e102      	b.n	80128aa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	689b      	ldr	r3, [r3, #8]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d102      	bne.n	80126b8 <f_write+0x14e>
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	7d1b      	ldrb	r3, [r3, #20]
 80126bc:	b25b      	sxtb	r3, r3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	da1d      	bge.n	80126fe <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	7858      	ldrb	r0, [r3, #1]
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	6a1a      	ldr	r2, [r3, #32]
 80126d0:	2301      	movs	r3, #1
 80126d2:	f7fd fea3 	bl	801041c <disk_write>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d009      	beq.n	80126f0 <f_write+0x186>
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2201      	movs	r2, #1
 80126e0:	755a      	strb	r2, [r3, #21]
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	2101      	movs	r1, #1
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fd ffeb 	bl	80106c2 <unlock_fs>
 80126ec:	2301      	movs	r3, #1
 80126ee:	e0dc      	b.n	80128aa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	7d1b      	ldrb	r3, [r3, #20]
 80126f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126f8:	b2da      	uxtb	r2, r3
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80126fe:	693a      	ldr	r2, [r7, #16]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	69db      	ldr	r3, [r3, #28]
 8012704:	4619      	mov	r1, r3
 8012706:	4610      	mov	r0, r2
 8012708:	f7fe fa42 	bl	8010b90 <clust2sect>
 801270c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d109      	bne.n	8012728 <f_write+0x1be>
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2202      	movs	r2, #2
 8012718:	755a      	strb	r2, [r3, #21]
 801271a:	693b      	ldr	r3, [r7, #16]
 801271c:	2102      	movs	r1, #2
 801271e:	4618      	mov	r0, r3
 8012720:	f7fd ffcf 	bl	80106c2 <unlock_fs>
 8012724:	2302      	movs	r3, #2
 8012726:	e0c0      	b.n	80128aa <f_write+0x340>
			sect += csect;
 8012728:	697a      	ldr	r2, [r7, #20]
 801272a:	69bb      	ldr	r3, [r7, #24]
 801272c:	4413      	add	r3, r2
 801272e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	0a5b      	lsrs	r3, r3, #9
 8012734:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d041      	beq.n	80127c0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801273c:	69ba      	ldr	r2, [r7, #24]
 801273e:	6a3b      	ldr	r3, [r7, #32]
 8012740:	4413      	add	r3, r2
 8012742:	693a      	ldr	r2, [r7, #16]
 8012744:	8952      	ldrh	r2, [r2, #10]
 8012746:	4293      	cmp	r3, r2
 8012748:	d905      	bls.n	8012756 <f_write+0x1ec>
					cc = fs->csize - csect;
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	895b      	ldrh	r3, [r3, #10]
 801274e:	461a      	mov	r2, r3
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	7858      	ldrb	r0, [r3, #1]
 801275a:	6a3b      	ldr	r3, [r7, #32]
 801275c:	697a      	ldr	r2, [r7, #20]
 801275e:	69f9      	ldr	r1, [r7, #28]
 8012760:	f7fd fe5c 	bl	801041c <disk_write>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d009      	beq.n	801277e <f_write+0x214>
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	2201      	movs	r2, #1
 801276e:	755a      	strb	r2, [r3, #21]
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	2101      	movs	r1, #1
 8012774:	4618      	mov	r0, r3
 8012776:	f7fd ffa4 	bl	80106c2 <unlock_fs>
 801277a:	2301      	movs	r3, #1
 801277c:	e095      	b.n	80128aa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	6a1a      	ldr	r2, [r3, #32]
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	6a3a      	ldr	r2, [r7, #32]
 8012788:	429a      	cmp	r2, r3
 801278a:	d915      	bls.n	80127b8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6a1a      	ldr	r2, [r3, #32]
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	025b      	lsls	r3, r3, #9
 801279c:	69fa      	ldr	r2, [r7, #28]
 801279e:	4413      	add	r3, r2
 80127a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80127a4:	4619      	mov	r1, r3
 80127a6:	f7fd fef9 	bl	801059c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	7d1b      	ldrb	r3, [r3, #20]
 80127ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80127b8:	6a3b      	ldr	r3, [r7, #32]
 80127ba:	025b      	lsls	r3, r3, #9
 80127bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80127be:	e044      	b.n	801284a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6a1b      	ldr	r3, [r3, #32]
 80127c4:	697a      	ldr	r2, [r7, #20]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d01b      	beq.n	8012802 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	699a      	ldr	r2, [r3, #24]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d215      	bcs.n	8012802 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	7858      	ldrb	r0, [r3, #1]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127e0:	2301      	movs	r3, #1
 80127e2:	697a      	ldr	r2, [r7, #20]
 80127e4:	f7fd fdfa 	bl	80103dc <disk_read>
 80127e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d009      	beq.n	8012802 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2201      	movs	r2, #1
 80127f2:	755a      	strb	r2, [r3, #21]
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	2101      	movs	r1, #1
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7fd ff62 	bl	80106c2 <unlock_fs>
 80127fe:	2301      	movs	r3, #1
 8012800:	e053      	b.n	80128aa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	697a      	ldr	r2, [r7, #20]
 8012806:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012810:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012814:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	429a      	cmp	r2, r3
 801281c:	d901      	bls.n	8012822 <f_write+0x2b8>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	699b      	ldr	r3, [r3, #24]
 801282c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012830:	4413      	add	r3, r2
 8012832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012834:	69f9      	ldr	r1, [r7, #28]
 8012836:	4618      	mov	r0, r3
 8012838:	f7fd feb0 	bl	801059c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	7d1b      	ldrb	r3, [r3, #20]
 8012840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012844:	b2da      	uxtb	r2, r3
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801284a:	69fa      	ldr	r2, [r7, #28]
 801284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284e:	4413      	add	r3, r2
 8012850:	61fb      	str	r3, [r7, #28]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	699a      	ldr	r2, [r3, #24]
 8012856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012858:	441a      	add	r2, r3
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	619a      	str	r2, [r3, #24]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	68da      	ldr	r2, [r3, #12]
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	429a      	cmp	r2, r3
 8012868:	bf38      	it	cc
 801286a:	461a      	movcc	r2, r3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	60da      	str	r2, [r3, #12]
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	441a      	add	r2, r3
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	f47f aeb6 	bne.w	80125f8 <f_write+0x8e>
 801288c:	e000      	b.n	8012890 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801288e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012898:	b2da      	uxtb	r2, r3
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	2100      	movs	r1, #0
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7fd ff0d 	bl	80106c2 <unlock_fs>
 80128a8:	2300      	movs	r3, #0
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3730      	adds	r7, #48	; 0x30
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}

080128b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80128b2:	b580      	push	{r7, lr}
 80128b4:	b086      	sub	sp, #24
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f107 0208 	add.w	r2, r7, #8
 80128c0:	4611      	mov	r1, r2
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7ff fbe0 	bl	8012088 <validate>
 80128c8:	4603      	mov	r3, r0
 80128ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80128cc:	7dfb      	ldrb	r3, [r7, #23]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d16d      	bne.n	80129ae <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	7d1b      	ldrb	r3, [r3, #20]
 80128d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d067      	beq.n	80129ae <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	7d1b      	ldrb	r3, [r3, #20]
 80128e2:	b25b      	sxtb	r3, r3
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	da1a      	bge.n	801291e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	7858      	ldrb	r0, [r3, #1]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a1a      	ldr	r2, [r3, #32]
 80128f6:	2301      	movs	r3, #1
 80128f8:	f7fd fd90 	bl	801041c <disk_write>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d006      	beq.n	8012910 <f_sync+0x5e>
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	2101      	movs	r1, #1
 8012906:	4618      	mov	r0, r3
 8012908:	f7fd fedb 	bl	80106c2 <unlock_fs>
 801290c:	2301      	movs	r3, #1
 801290e:	e055      	b.n	80129bc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	7d1b      	ldrb	r3, [r3, #20]
 8012914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012918:	b2da      	uxtb	r2, r3
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801291e:	f7fb fecb 	bl	800e6b8 <get_fattime>
 8012922:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012924:	68ba      	ldr	r2, [r7, #8]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292a:	4619      	mov	r1, r3
 801292c:	4610      	mov	r0, r2
 801292e:	f7fe f893 	bl	8010a58 <move_window>
 8012932:	4603      	mov	r3, r0
 8012934:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012936:	7dfb      	ldrb	r3, [r7, #23]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d138      	bne.n	80129ae <f_sync+0xfc>
					dir = fp->dir_ptr;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012940:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	330b      	adds	r3, #11
 8012946:	781a      	ldrb	r2, [r3, #0]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	330b      	adds	r3, #11
 801294c:	f042 0220 	orr.w	r2, r2, #32
 8012950:	b2d2      	uxtb	r2, r2
 8012952:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6818      	ldr	r0, [r3, #0]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	689b      	ldr	r3, [r3, #8]
 801295c:	461a      	mov	r2, r3
 801295e:	68f9      	ldr	r1, [r7, #12]
 8012960:	f7fe fd98 	bl	8011494 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	f103 021c 	add.w	r2, r3, #28
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	4619      	mov	r1, r3
 8012970:	4610      	mov	r0, r2
 8012972:	f7fd fde7 	bl	8010544 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	3316      	adds	r3, #22
 801297a:	6939      	ldr	r1, [r7, #16]
 801297c:	4618      	mov	r0, r3
 801297e:	f7fd fde1 	bl	8010544 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	3312      	adds	r3, #18
 8012986:	2100      	movs	r1, #0
 8012988:	4618      	mov	r0, r3
 801298a:	f7fd fdc0 	bl	801050e <st_word>
					fs->wflag = 1;
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	2201      	movs	r2, #1
 8012992:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	4618      	mov	r0, r3
 8012998:	f7fe f88c 	bl	8010ab4 <sync_fs>
 801299c:	4603      	mov	r3, r0
 801299e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	7d1b      	ldrb	r3, [r3, #20]
 80129a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129a8:	b2da      	uxtb	r2, r3
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	7dfa      	ldrb	r2, [r7, #23]
 80129b2:	4611      	mov	r1, r2
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fd fe84 	bl	80106c2 <unlock_fs>
 80129ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3718      	adds	r7, #24
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b090      	sub	sp, #64	; 0x40
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f107 0208 	add.w	r2, r7, #8
 80129d4:	4611      	mov	r1, r2
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7ff fb56 	bl	8012088 <validate>
 80129dc:	4603      	mov	r3, r0
 80129de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80129e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d103      	bne.n	80129f2 <f_lseek+0x2e>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	7d5b      	ldrb	r3, [r3, #21]
 80129ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80129f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d009      	beq.n	8012a0e <f_lseek+0x4a>
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012a00:	4611      	mov	r1, r2
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fd fe5d 	bl	80106c2 <unlock_fs>
 8012a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012a0c:	e229      	b.n	8012e62 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f000 80ea 	beq.w	8012bec <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a1e:	d164      	bne.n	8012aea <f_lseek+0x126>
			tbl = fp->cltbl;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a24:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a28:	1d1a      	adds	r2, r3, #4
 8012a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	617b      	str	r3, [r7, #20]
 8012a30:	2302      	movs	r3, #2
 8012a32:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d044      	beq.n	8012aca <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a42:	613b      	str	r3, [r7, #16]
 8012a44:	2300      	movs	r3, #0
 8012a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4a:	3302      	adds	r3, #2
 8012a4c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a50:	60fb      	str	r3, [r7, #12]
 8012a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a54:	3301      	adds	r3, #1
 8012a56:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fe f8b6 	bl	8010bce <get_fat>
 8012a62:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d809      	bhi.n	8012a7e <f_lseek+0xba>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2202      	movs	r2, #2
 8012a6e:	755a      	strb	r2, [r3, #21]
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	2102      	movs	r1, #2
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7fd fe24 	bl	80106c2 <unlock_fs>
 8012a7a:	2302      	movs	r3, #2
 8012a7c:	e1f1      	b.n	8012e62 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a84:	d109      	bne.n	8012a9a <f_lseek+0xd6>
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2201      	movs	r2, #1
 8012a8a:	755a      	strb	r2, [r3, #21]
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	2101      	movs	r1, #1
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7fd fe16 	bl	80106c2 <unlock_fs>
 8012a96:	2301      	movs	r3, #1
 8012a98:	e1e3      	b.n	8012e62 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d0d4      	beq.n	8012a4e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d809      	bhi.n	8012ac0 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8012aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aae:	1d1a      	adds	r2, r3, #4
 8012ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8012ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ab4:	601a      	str	r2, [r3, #0]
 8012ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab8:	1d1a      	adds	r2, r3, #4
 8012aba:	627a      	str	r2, [r7, #36]	; 0x24
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	699b      	ldr	r3, [r3, #24]
 8012ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d3ba      	bcc.n	8012a40 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ad0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d803      	bhi.n	8012ae2 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8012ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012adc:	2200      	movs	r2, #0
 8012ade:	601a      	str	r2, [r3, #0]
 8012ae0:	e1b6      	b.n	8012e50 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012ae2:	2311      	movs	r3, #17
 8012ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012ae8:	e1b2      	b.n	8012e50 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	683a      	ldr	r2, [r7, #0]
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d902      	bls.n	8012afa <f_lseek+0x136>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f000 81a4 	beq.w	8012e50 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7fe fae6 	bl	80110e0 <clmt_clust>
 8012b14:	4602      	mov	r2, r0
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	69db      	ldr	r3, [r3, #28]
 8012b20:	4619      	mov	r1, r3
 8012b22:	4610      	mov	r0, r2
 8012b24:	f7fe f834 	bl	8010b90 <clust2sect>
 8012b28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d109      	bne.n	8012b44 <f_lseek+0x180>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2202      	movs	r2, #2
 8012b34:	755a      	strb	r2, [r3, #21]
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	2102      	movs	r1, #2
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fd fdc1 	bl	80106c2 <unlock_fs>
 8012b40:	2302      	movs	r3, #2
 8012b42:	e18e      	b.n	8012e62 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	3b01      	subs	r3, #1
 8012b48:	0a5b      	lsrs	r3, r3, #9
 8012b4a:	68ba      	ldr	r2, [r7, #8]
 8012b4c:	8952      	ldrh	r2, [r2, #10]
 8012b4e:	3a01      	subs	r2, #1
 8012b50:	4013      	ands	r3, r2
 8012b52:	69ba      	ldr	r2, [r7, #24]
 8012b54:	4413      	add	r3, r2
 8012b56:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	f000 8175 	beq.w	8012e50 <f_lseek+0x48c>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	6a1b      	ldr	r3, [r3, #32]
 8012b6a:	69ba      	ldr	r2, [r7, #24]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	f000 816f 	beq.w	8012e50 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	7d1b      	ldrb	r3, [r3, #20]
 8012b76:	b25b      	sxtb	r3, r3
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	da1d      	bge.n	8012bb8 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	7858      	ldrb	r0, [r3, #1]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6a1a      	ldr	r2, [r3, #32]
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	f7fd fc46 	bl	801041c <disk_write>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d009      	beq.n	8012baa <f_lseek+0x1e6>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2201      	movs	r2, #1
 8012b9a:	755a      	strb	r2, [r3, #21]
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	2101      	movs	r1, #1
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7fd fd8e 	bl	80106c2 <unlock_fs>
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e15b      	b.n	8012e62 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	7d1b      	ldrb	r3, [r3, #20]
 8012bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bb2:	b2da      	uxtb	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	7858      	ldrb	r0, [r3, #1]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	69ba      	ldr	r2, [r7, #24]
 8012bc6:	f7fd fc09 	bl	80103dc <disk_read>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d009      	beq.n	8012be4 <f_lseek+0x220>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	755a      	strb	r2, [r3, #21]
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	2101      	movs	r1, #1
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fd fd71 	bl	80106c2 <unlock_fs>
 8012be0:	2301      	movs	r3, #1
 8012be2:	e13e      	b.n	8012e62 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	69ba      	ldr	r2, [r7, #24]
 8012be8:	621a      	str	r2, [r3, #32]
 8012bea:	e131      	b.n	8012e50 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	68db      	ldr	r3, [r3, #12]
 8012bf0:	683a      	ldr	r2, [r7, #0]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d908      	bls.n	8012c08 <f_lseek+0x244>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	7d1b      	ldrb	r3, [r3, #20]
 8012bfa:	f003 0302 	and.w	r3, r3, #2
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	699b      	ldr	r3, [r3, #24]
 8012c0c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	637b      	str	r3, [r7, #52]	; 0x34
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c16:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	f000 80c0 	beq.w	8012da0 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	895b      	ldrh	r3, [r3, #10]
 8012c24:	025b      	lsls	r3, r3, #9
 8012c26:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d01b      	beq.n	8012c66 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	1e5a      	subs	r2, r3, #1
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8012c38:	6a3b      	ldr	r3, [r7, #32]
 8012c3a:	1e59      	subs	r1, r3, #1
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d30f      	bcc.n	8012c66 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	1e5a      	subs	r2, r3, #1
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	425b      	negs	r3, r3
 8012c4e:	401a      	ands	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	699b      	ldr	r3, [r3, #24]
 8012c58:	683a      	ldr	r2, [r7, #0]
 8012c5a:	1ad3      	subs	r3, r2, r3
 8012c5c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	69db      	ldr	r3, [r3, #28]
 8012c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c64:	e02c      	b.n	8012cc0 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	689b      	ldr	r3, [r3, #8]
 8012c6a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d123      	bne.n	8012cba <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2100      	movs	r1, #0
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7fe f99a 	bl	8010fb0 <create_chain>
 8012c7c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d109      	bne.n	8012c98 <f_lseek+0x2d4>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2202      	movs	r2, #2
 8012c88:	755a      	strb	r2, [r3, #21]
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2102      	movs	r1, #2
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7fd fd17 	bl	80106c2 <unlock_fs>
 8012c94:	2302      	movs	r3, #2
 8012c96:	e0e4      	b.n	8012e62 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c9e:	d109      	bne.n	8012cb4 <f_lseek+0x2f0>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	755a      	strb	r2, [r3, #21]
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	2101      	movs	r1, #1
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fd fd09 	bl	80106c2 <unlock_fs>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e0d6      	b.n	8012e62 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cb8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cbe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d06c      	beq.n	8012da0 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012cc6:	e044      	b.n	8012d52 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012cc8:	683a      	ldr	r2, [r7, #0]
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	1ad3      	subs	r3, r2, r3
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	699a      	ldr	r2, [r3, #24]
 8012cd4:	69fb      	ldr	r3, [r7, #28]
 8012cd6:	441a      	add	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	7d1b      	ldrb	r3, [r3, #20]
 8012ce0:	f003 0302 	and.w	r3, r3, #2
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00b      	beq.n	8012d00 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fe f95f 	bl	8010fb0 <create_chain>
 8012cf2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d108      	bne.n	8012d0c <f_lseek+0x348>
							ofs = 0; break;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	603b      	str	r3, [r7, #0]
 8012cfe:	e02c      	b.n	8012d5a <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fd ff62 	bl	8010bce <get_fat>
 8012d0a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d12:	d109      	bne.n	8012d28 <f_lseek+0x364>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	755a      	strb	r2, [r3, #21]
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	2101      	movs	r1, #1
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fd fccf 	bl	80106c2 <unlock_fs>
 8012d24:	2301      	movs	r3, #1
 8012d26:	e09c      	b.n	8012e62 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d904      	bls.n	8012d38 <f_lseek+0x374>
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	699b      	ldr	r3, [r3, #24]
 8012d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d309      	bcc.n	8012d4c <f_lseek+0x388>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2202      	movs	r2, #2
 8012d3c:	755a      	strb	r2, [r3, #21]
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	2102      	movs	r1, #2
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7fd fcbd 	bl	80106c2 <unlock_fs>
 8012d48:	2302      	movs	r3, #2
 8012d4a:	e08a      	b.n	8012e62 <f_lseek+0x49e>
					fp->clust = clst;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d50:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d8b6      	bhi.n	8012cc8 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	699a      	ldr	r2, [r3, #24]
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	441a      	add	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d017      	beq.n	8012da0 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fd ff0b 	bl	8010b90 <clust2sect>
 8012d7a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d109      	bne.n	8012d96 <f_lseek+0x3d2>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2202      	movs	r2, #2
 8012d86:	755a      	strb	r2, [r3, #21]
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	2102      	movs	r1, #2
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7fd fc98 	bl	80106c2 <unlock_fs>
 8012d92:	2302      	movs	r3, #2
 8012d94:	e065      	b.n	8012e62 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	0a5b      	lsrs	r3, r3, #9
 8012d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d9c:	4413      	add	r3, r2
 8012d9e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	699a      	ldr	r2, [r3, #24]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d90a      	bls.n	8012dc2 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	699a      	ldr	r2, [r3, #24]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	7d1b      	ldrb	r3, [r3, #20]
 8012db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dbc:	b2da      	uxtb	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	699b      	ldr	r3, [r3, #24]
 8012dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d040      	beq.n	8012e50 <f_lseek+0x48c>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6a1b      	ldr	r3, [r3, #32]
 8012dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d03b      	beq.n	8012e50 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	7d1b      	ldrb	r3, [r3, #20]
 8012ddc:	b25b      	sxtb	r3, r3
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	da1d      	bge.n	8012e1e <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	7858      	ldrb	r0, [r3, #1]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6a1a      	ldr	r2, [r3, #32]
 8012df0:	2301      	movs	r3, #1
 8012df2:	f7fd fb13 	bl	801041c <disk_write>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d009      	beq.n	8012e10 <f_lseek+0x44c>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	755a      	strb	r2, [r3, #21]
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	2101      	movs	r1, #1
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fd fc5b 	bl	80106c2 <unlock_fs>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e028      	b.n	8012e62 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e18:	b2da      	uxtb	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	7858      	ldrb	r0, [r3, #1]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e28:	2301      	movs	r3, #1
 8012e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e2c:	f7fd fad6 	bl	80103dc <disk_read>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d009      	beq.n	8012e4a <f_lseek+0x486>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2201      	movs	r2, #1
 8012e3a:	755a      	strb	r2, [r3, #21]
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	2101      	movs	r1, #1
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7fd fc3e 	bl	80106c2 <unlock_fs>
 8012e46:	2301      	movs	r3, #1
 8012e48:	e00b      	b.n	8012e62 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e4e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012e56:	4611      	mov	r1, r2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fd fc32 	bl	80106c2 <unlock_fs>
 8012e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3740      	adds	r7, #64	; 0x40
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}

08012e6a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012e6a:	b580      	push	{r7, lr}
 8012e6c:	b086      	sub	sp, #24
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d101      	bne.n	8012e7e <f_opendir+0x14>
 8012e7a:	2309      	movs	r3, #9
 8012e7c:	e06a      	b.n	8012f54 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012e82:	f107 010c 	add.w	r1, r7, #12
 8012e86:	463b      	mov	r3, r7
 8012e88:	2200      	movs	r2, #0
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe fea8 	bl	8011be0 <find_volume>
 8012e90:	4603      	mov	r3, r0
 8012e92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012e94:	7dfb      	ldrb	r3, [r7, #23]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d14f      	bne.n	8012f3a <f_opendir+0xd0>
		obj->fs = fs;
 8012e9a:	68fa      	ldr	r2, [r7, #12]
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7fe fd8f 	bl	80119c8 <follow_path>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012eae:	7dfb      	ldrb	r3, [r7, #23]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d13d      	bne.n	8012f30 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012eba:	b25b      	sxtb	r3, r3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	db12      	blt.n	8012ee6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	799b      	ldrb	r3, [r3, #6]
 8012ec4:	f003 0310 	and.w	r3, r3, #16
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00a      	beq.n	8012ee2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6a1b      	ldr	r3, [r3, #32]
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	f7fe fabe 	bl	8011456 <ld_clust>
 8012eda:	4602      	mov	r2, r0
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	609a      	str	r2, [r3, #8]
 8012ee0:	e001      	b.n	8012ee6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012ee2:	2305      	movs	r3, #5
 8012ee4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012ee6:	7dfb      	ldrb	r3, [r7, #23]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d121      	bne.n	8012f30 <f_opendir+0xc6>
				obj->id = fs->id;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	88da      	ldrh	r2, [r3, #6]
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7fe f926 	bl	8011148 <dir_sdi>
 8012efc:	4603      	mov	r3, r0
 8012efe:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012f00:	7dfb      	ldrb	r3, [r7, #23]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d114      	bne.n	8012f30 <f_opendir+0xc6>
					if (obj->sclust) {
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	689b      	ldr	r3, [r3, #8]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00d      	beq.n	8012f2a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012f0e:	2100      	movs	r1, #0
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f7fd fc6f 	bl	80107f4 <inc_lock>
 8012f16:	4602      	mov	r2, r0
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	691b      	ldr	r3, [r3, #16]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d105      	bne.n	8012f30 <f_opendir+0xc6>
 8012f24:	2312      	movs	r3, #18
 8012f26:	75fb      	strb	r3, [r7, #23]
 8012f28:	e002      	b.n	8012f30 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012f30:	7dfb      	ldrb	r3, [r7, #23]
 8012f32:	2b04      	cmp	r3, #4
 8012f34:	d101      	bne.n	8012f3a <f_opendir+0xd0>
 8012f36:	2305      	movs	r3, #5
 8012f38:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012f3a:	7dfb      	ldrb	r3, [r7, #23]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <f_opendir+0xdc>
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	2200      	movs	r2, #0
 8012f44:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	7dfa      	ldrb	r2, [r7, #23]
 8012f4a:	4611      	mov	r1, r2
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fd fbb8 	bl	80106c2 <unlock_fs>
 8012f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	3718      	adds	r7, #24
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f107 0208 	add.w	r2, r7, #8
 8012f6a:	4611      	mov	r1, r2
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7ff f88b 	bl	8012088 <validate>
 8012f72:	4603      	mov	r3, r0
 8012f74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012f76:	7bfb      	ldrb	r3, [r7, #15]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d115      	bne.n	8012fa8 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	691b      	ldr	r3, [r3, #16]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d006      	beq.n	8012f92 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	691b      	ldr	r3, [r3, #16]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fd fcc1 	bl	8010910 <dec_lock>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012f92:	7bfb      	ldrb	r3, [r7, #15]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d102      	bne.n	8012f9e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fd fb8d 	bl	80106c2 <unlock_fs>
#endif
	}
	return res;
 8012fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}

08012fb2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b084      	sub	sp, #16
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	6078      	str	r0, [r7, #4]
 8012fba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f107 0208 	add.w	r2, r7, #8
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff f85f 	bl	8012088 <validate>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012fce:	7bfb      	ldrb	r3, [r7, #15]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d126      	bne.n	8013022 <f_readdir+0x70>
		if (!fno) {
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012fda:	2100      	movs	r1, #0
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7fe f8b3 	bl	8011148 <dir_sdi>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	73fb      	strb	r3, [r7, #15]
 8012fe6:	e01c      	b.n	8013022 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012fe8:	2100      	movs	r1, #0
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f7fe fa72 	bl	80114d4 <dir_read>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012ff4:	7bfb      	ldrb	r3, [r7, #15]
 8012ff6:	2b04      	cmp	r3, #4
 8012ff8:	d101      	bne.n	8012ffe <f_readdir+0x4c>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10e      	bne.n	8013022 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013004:	6839      	ldr	r1, [r7, #0]
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7fe fb48 	bl	801169c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801300c:	2100      	movs	r1, #0
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7fe f915 	bl	801123e <dir_next>
 8013014:	4603      	mov	r3, r0
 8013016:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013018:	7bfb      	ldrb	r3, [r7, #15]
 801301a:	2b04      	cmp	r3, #4
 801301c:	d101      	bne.n	8013022 <f_readdir+0x70>
 801301e:	2300      	movs	r3, #0
 8013020:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	7bfa      	ldrb	r2, [r7, #15]
 8013026:	4611      	mov	r1, r2
 8013028:	4618      	mov	r0, r3
 801302a:	f7fd fb4a 	bl	80106c2 <unlock_fs>
 801302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013030:	4618      	mov	r0, r3
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}

08013038 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b084      	sub	sp, #16
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7ff ffb4 	bl	8012fb2 <f_readdir>
 801304a:	4603      	mov	r3, r0
 801304c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801304e:	7bfb      	ldrb	r3, [r7, #15]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d114      	bne.n	801307e <f_findnext+0x46>
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d011      	beq.n	801307e <f_findnext+0x46>
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	7a5b      	ldrb	r3, [r3, #9]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00d      	beq.n	801307e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	f103 0109 	add.w	r1, r3, #9
 801306c:	2300      	movs	r3, #0
 801306e:	2200      	movs	r2, #0
 8013070:	f7fe fb9a 	bl	80117a8 <pattern_matching>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d100      	bne.n	801307c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801307a:	e7e2      	b.n	8013042 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801307c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013080:	4618      	mov	r0, r3
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b086      	sub	sp, #24
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	683a      	ldr	r2, [r7, #0]
 801309a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 801309c:	6879      	ldr	r1, [r7, #4]
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f7ff fee3 	bl	8012e6a <f_opendir>
 80130a4:	4603      	mov	r3, r0
 80130a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80130a8:	7dfb      	ldrb	r3, [r7, #23]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d105      	bne.n	80130ba <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 80130ae:	68b9      	ldr	r1, [r7, #8]
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f7ff ffc1 	bl	8013038 <f_findnext>
 80130b6:	4603      	mov	r3, r0
 80130b8:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80130ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3718      	adds	r7, #24
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80130c4:	b480      	push	{r7}
 80130c6:	b087      	sub	sp, #28
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	60f8      	str	r0, [r7, #12]
 80130cc:	60b9      	str	r1, [r7, #8]
 80130ce:	4613      	mov	r3, r2
 80130d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80130d2:	2301      	movs	r3, #1
 80130d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80130d6:	2300      	movs	r3, #0
 80130d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80130da:	4b1f      	ldr	r3, [pc, #124]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 80130dc:	7a5b      	ldrb	r3, [r3, #9]
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d131      	bne.n	8013148 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80130e4:	4b1c      	ldr	r3, [pc, #112]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 80130e6:	7a5b      	ldrb	r3, [r3, #9]
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	461a      	mov	r2, r3
 80130ec:	4b1a      	ldr	r3, [pc, #104]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 80130ee:	2100      	movs	r1, #0
 80130f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80130f2:	4b19      	ldr	r3, [pc, #100]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 80130f4:	7a5b      	ldrb	r3, [r3, #9]
 80130f6:	b2db      	uxtb	r3, r3
 80130f8:	4a17      	ldr	r2, [pc, #92]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	68fa      	ldr	r2, [r7, #12]
 8013100:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013102:	4b15      	ldr	r3, [pc, #84]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 8013104:	7a5b      	ldrb	r3, [r3, #9]
 8013106:	b2db      	uxtb	r3, r3
 8013108:	461a      	mov	r2, r3
 801310a:	4b13      	ldr	r3, [pc, #76]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 801310c:	4413      	add	r3, r2
 801310e:	79fa      	ldrb	r2, [r7, #7]
 8013110:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013112:	4b11      	ldr	r3, [pc, #68]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 8013114:	7a5b      	ldrb	r3, [r3, #9]
 8013116:	b2db      	uxtb	r3, r3
 8013118:	1c5a      	adds	r2, r3, #1
 801311a:	b2d1      	uxtb	r1, r2
 801311c:	4a0e      	ldr	r2, [pc, #56]	; (8013158 <FATFS_LinkDriverEx+0x94>)
 801311e:	7251      	strb	r1, [r2, #9]
 8013120:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013122:	7dbb      	ldrb	r3, [r7, #22]
 8013124:	3330      	adds	r3, #48	; 0x30
 8013126:	b2da      	uxtb	r2, r3
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	3301      	adds	r3, #1
 8013130:	223a      	movs	r2, #58	; 0x3a
 8013132:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	3302      	adds	r3, #2
 8013138:	222f      	movs	r2, #47	; 0x2f
 801313a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	3303      	adds	r3, #3
 8013140:	2200      	movs	r2, #0
 8013142:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013144:	2300      	movs	r3, #0
 8013146:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013148:	7dfb      	ldrb	r3, [r7, #23]
}
 801314a:	4618      	mov	r0, r3
 801314c:	371c      	adds	r7, #28
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop
 8013158:	20000460 	.word	0x20000460

0801315c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013166:	2200      	movs	r2, #0
 8013168:	6839      	ldr	r1, [r7, #0]
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f7ff ffaa 	bl	80130c4 <FATFS_LinkDriverEx>
 8013170:	4603      	mov	r3, r0
}
 8013172:	4618      	mov	r0, r3
 8013174:	3708      	adds	r7, #8
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}

0801317a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801317a:	b580      	push	{r7, lr}
 801317c:	b084      	sub	sp, #16
 801317e:	af00      	add	r7, sp, #0
 8013180:	4603      	mov	r3, r0
 8013182:	6039      	str	r1, [r7, #0]
 8013184:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8013186:	2200      	movs	r2, #0
 8013188:	2101      	movs	r1, #1
 801318a:	2001      	movs	r0, #1
 801318c:	f000 fb5e 	bl	801384c <osSemaphoreNew>
 8013190:	4602      	mov	r2, r0
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	bf14      	ite	ne
 801319e:	2301      	movne	r3, #1
 80131a0:	2300      	moveq	r3, #0
 80131a2:	b2db      	uxtb	r3, r3
 80131a4:	60fb      	str	r3, [r7, #12]

    return ret;
 80131a6:	68fb      	ldr	r3, [r7, #12]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3710      	adds	r7, #16
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 fca3 	bl	8013b04 <osSemaphoreDelete>
#endif
    return 1;
 80131be:	2301      	movs	r3, #1
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}

080131c8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80131d0:	2300      	movs	r3, #0
 80131d2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80131d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f000 fbd5 	bl	8013988 <osSemaphoreAcquire>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d101      	bne.n	80131e8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80131e4:	2301      	movs	r3, #1
 80131e6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80131e8:	68fb      	ldr	r3, [r7, #12]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3710      	adds	r7, #16
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}

080131f2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b082      	sub	sp, #8
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f000 fc2a 	bl	8013a54 <osSemaphoreRelease>
#endif
}
 8013200:	bf00      	nop
 8013202:	3708      	adds	r7, #8
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}

08013208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013208:	b480      	push	{r7}
 801320a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801320c:	bf00      	nop
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
	...

08013218 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013218:	b480      	push	{r7}
 801321a:	b085      	sub	sp, #20
 801321c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801321e:	f3ef 8305 	mrs	r3, IPSR
 8013222:	60bb      	str	r3, [r7, #8]
  return(result);
 8013224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013226:	2b00      	cmp	r3, #0
 8013228:	d10f      	bne.n	801324a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801322a:	f3ef 8310 	mrs	r3, PRIMASK
 801322e:	607b      	str	r3, [r7, #4]
  return(result);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d105      	bne.n	8013242 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013236:	f3ef 8311 	mrs	r3, BASEPRI
 801323a:	603b      	str	r3, [r7, #0]
  return(result);
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d007      	beq.n	8013252 <osKernelInitialize+0x3a>
 8013242:	4b0e      	ldr	r3, [pc, #56]	; (801327c <osKernelInitialize+0x64>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2b02      	cmp	r3, #2
 8013248:	d103      	bne.n	8013252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801324a:	f06f 0305 	mvn.w	r3, #5
 801324e:	60fb      	str	r3, [r7, #12]
 8013250:	e00c      	b.n	801326c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013252:	4b0a      	ldr	r3, [pc, #40]	; (801327c <osKernelInitialize+0x64>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801325a:	4b08      	ldr	r3, [pc, #32]	; (801327c <osKernelInitialize+0x64>)
 801325c:	2201      	movs	r2, #1
 801325e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013260:	2300      	movs	r3, #0
 8013262:	60fb      	str	r3, [r7, #12]
 8013264:	e002      	b.n	801326c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8013266:	f04f 33ff 	mov.w	r3, #4294967295
 801326a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801326c:	68fb      	ldr	r3, [r7, #12]
}
 801326e:	4618      	mov	r0, r3
 8013270:	3714      	adds	r7, #20
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	2000046c 	.word	0x2000046c

08013280 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8013286:	f002 fe7b 	bl	8015f80 <xTaskGetSchedulerState>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d004      	beq.n	801329a <osKernelGetState+0x1a>
 8013290:	2b02      	cmp	r3, #2
 8013292:	d105      	bne.n	80132a0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8013294:	2302      	movs	r3, #2
 8013296:	607b      	str	r3, [r7, #4]
      break;
 8013298:	e00c      	b.n	80132b4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801329a:	2303      	movs	r3, #3
 801329c:	607b      	str	r3, [r7, #4]
      break;
 801329e:	e009      	b.n	80132b4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80132a0:	4b07      	ldr	r3, [pc, #28]	; (80132c0 <osKernelGetState+0x40>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d102      	bne.n	80132ae <osKernelGetState+0x2e>
        state = osKernelReady;
 80132a8:	2301      	movs	r3, #1
 80132aa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80132ac:	e001      	b.n	80132b2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80132ae:	2300      	movs	r3, #0
 80132b0:	607b      	str	r3, [r7, #4]
      break;
 80132b2:	bf00      	nop
  }

  return (state);
 80132b4:	687b      	ldr	r3, [r7, #4]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	2000046c 	.word	0x2000046c

080132c4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b084      	sub	sp, #16
 80132c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132ca:	f3ef 8305 	mrs	r3, IPSR
 80132ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80132d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d10f      	bne.n	80132f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80132d6:	f3ef 8310 	mrs	r3, PRIMASK
 80132da:	607b      	str	r3, [r7, #4]
  return(result);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d105      	bne.n	80132ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80132e2:	f3ef 8311 	mrs	r3, BASEPRI
 80132e6:	603b      	str	r3, [r7, #0]
  return(result);
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d007      	beq.n	80132fe <osKernelStart+0x3a>
 80132ee:	4b0f      	ldr	r3, [pc, #60]	; (801332c <osKernelStart+0x68>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b02      	cmp	r3, #2
 80132f4:	d103      	bne.n	80132fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80132f6:	f06f 0305 	mvn.w	r3, #5
 80132fa:	60fb      	str	r3, [r7, #12]
 80132fc:	e010      	b.n	8013320 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80132fe:	4b0b      	ldr	r3, [pc, #44]	; (801332c <osKernelStart+0x68>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b01      	cmp	r3, #1
 8013304:	d109      	bne.n	801331a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013306:	f7ff ff7f 	bl	8013208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801330a:	4b08      	ldr	r3, [pc, #32]	; (801332c <osKernelStart+0x68>)
 801330c:	2202      	movs	r2, #2
 801330e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013310:	f002 f9c8 	bl	80156a4 <vTaskStartScheduler>
      stat = osOK;
 8013314:	2300      	movs	r3, #0
 8013316:	60fb      	str	r3, [r7, #12]
 8013318:	e002      	b.n	8013320 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801331a:	f04f 33ff 	mov.w	r3, #4294967295
 801331e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013320:	68fb      	ldr	r3, [r7, #12]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	2000046c 	.word	0x2000046c

08013330 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013336:	f3ef 8305 	mrs	r3, IPSR
 801333a:	60bb      	str	r3, [r7, #8]
  return(result);
 801333c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801333e:	2b00      	cmp	r3, #0
 8013340:	d10f      	bne.n	8013362 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013342:	f3ef 8310 	mrs	r3, PRIMASK
 8013346:	607b      	str	r3, [r7, #4]
  return(result);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d105      	bne.n	801335a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801334e:	f3ef 8311 	mrs	r3, BASEPRI
 8013352:	603b      	str	r3, [r7, #0]
  return(result);
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d007      	beq.n	801336a <osKernelGetTickCount+0x3a>
 801335a:	4b08      	ldr	r3, [pc, #32]	; (801337c <osKernelGetTickCount+0x4c>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b02      	cmp	r3, #2
 8013360:	d103      	bne.n	801336a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8013362:	f002 fac3 	bl	80158ec <xTaskGetTickCountFromISR>
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	e002      	b.n	8013370 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801336a:	f002 faaf 	bl	80158cc <xTaskGetTickCount>
 801336e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8013370:	68fb      	ldr	r3, [r7, #12]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	2000046c 	.word	0x2000046c

08013380 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8013380:	b480      	push	{r7}
 8013382:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8013384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8013388:	4618      	mov	r0, r3
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr
	...

08013394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013394:	b580      	push	{r7, lr}
 8013396:	b090      	sub	sp, #64	; 0x40
 8013398:	af04      	add	r7, sp, #16
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80133a0:	2300      	movs	r3, #0
 80133a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133a4:	f3ef 8305 	mrs	r3, IPSR
 80133a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80133aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f040 808f 	bne.w	80134d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133b2:	f3ef 8310 	mrs	r3, PRIMASK
 80133b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d105      	bne.n	80133ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133be:	f3ef 8311 	mrs	r3, BASEPRI
 80133c2:	617b      	str	r3, [r7, #20]
  return(result);
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d003      	beq.n	80133d2 <osThreadNew+0x3e>
 80133ca:	4b44      	ldr	r3, [pc, #272]	; (80134dc <osThreadNew+0x148>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b02      	cmp	r3, #2
 80133d0:	d07e      	beq.n	80134d0 <osThreadNew+0x13c>
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d07b      	beq.n	80134d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80133d8:	2380      	movs	r3, #128	; 0x80
 80133da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80133dc:	2318      	movs	r3, #24
 80133de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80133e0:	2300      	movs	r3, #0
 80133e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80133e4:	f04f 33ff 	mov.w	r3, #4294967295
 80133e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d045      	beq.n	801347c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d002      	beq.n	80133fe <osThreadNew+0x6a>
        name = attr->name;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	699b      	ldr	r3, [r3, #24]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d002      	beq.n	801340c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	699b      	ldr	r3, [r3, #24]
 801340a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340e:	2b00      	cmp	r3, #0
 8013410:	d008      	beq.n	8013424 <osThreadNew+0x90>
 8013412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013414:	2b38      	cmp	r3, #56	; 0x38
 8013416:	d805      	bhi.n	8013424 <osThreadNew+0x90>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	f003 0301 	and.w	r3, r3, #1
 8013420:	2b00      	cmp	r3, #0
 8013422:	d001      	beq.n	8013428 <osThreadNew+0x94>
        return (NULL);
 8013424:	2300      	movs	r3, #0
 8013426:	e054      	b.n	80134d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	695b      	ldr	r3, [r3, #20]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d003      	beq.n	8013438 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	695b      	ldr	r3, [r3, #20]
 8013434:	089b      	lsrs	r3, r3, #2
 8013436:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00e      	beq.n	801345e <osThreadNew+0xca>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	68db      	ldr	r3, [r3, #12]
 8013444:	2b5b      	cmp	r3, #91	; 0x5b
 8013446:	d90a      	bls.n	801345e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801344c:	2b00      	cmp	r3, #0
 801344e:	d006      	beq.n	801345e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	695b      	ldr	r3, [r3, #20]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d002      	beq.n	801345e <osThreadNew+0xca>
        mem = 1;
 8013458:	2301      	movs	r3, #1
 801345a:	623b      	str	r3, [r7, #32]
 801345c:	e010      	b.n	8013480 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	689b      	ldr	r3, [r3, #8]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d10c      	bne.n	8013480 <osThreadNew+0xec>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d108      	bne.n	8013480 <osThreadNew+0xec>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	691b      	ldr	r3, [r3, #16]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d104      	bne.n	8013480 <osThreadNew+0xec>
          mem = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	623b      	str	r3, [r7, #32]
 801347a:	e001      	b.n	8013480 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801347c:	2300      	movs	r3, #0
 801347e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013480:	6a3b      	ldr	r3, [r7, #32]
 8013482:	2b01      	cmp	r3, #1
 8013484:	d110      	bne.n	80134a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801348e:	9202      	str	r2, [sp, #8]
 8013490:	9301      	str	r3, [sp, #4]
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	9300      	str	r3, [sp, #0]
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801349a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801349c:	68f8      	ldr	r0, [r7, #12]
 801349e:	f001 fea5 	bl	80151ec <xTaskCreateStatic>
 80134a2:	4603      	mov	r3, r0
 80134a4:	613b      	str	r3, [r7, #16]
 80134a6:	e013      	b.n	80134d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80134a8:	6a3b      	ldr	r3, [r7, #32]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d110      	bne.n	80134d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80134ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	f107 0310 	add.w	r3, r7, #16
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f001 fef3 	bl	80152ac <xTaskCreate>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d001      	beq.n	80134d0 <osThreadNew+0x13c>
          hTask = NULL;
 80134cc:	2300      	movs	r3, #0
 80134ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80134d0:	693b      	ldr	r3, [r7, #16]
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3730      	adds	r7, #48	; 0x30
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	2000046c 	.word	0x2000046c

080134e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b086      	sub	sp, #24
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134e8:	f3ef 8305 	mrs	r3, IPSR
 80134ec:	613b      	str	r3, [r7, #16]
  return(result);
 80134ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d10f      	bne.n	8013514 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134f4:	f3ef 8310 	mrs	r3, PRIMASK
 80134f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d105      	bne.n	801350c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013500:	f3ef 8311 	mrs	r3, BASEPRI
 8013504:	60bb      	str	r3, [r7, #8]
  return(result);
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d007      	beq.n	801351c <osDelay+0x3c>
 801350c:	4b0a      	ldr	r3, [pc, #40]	; (8013538 <osDelay+0x58>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b02      	cmp	r3, #2
 8013512:	d103      	bne.n	801351c <osDelay+0x3c>
    stat = osErrorISR;
 8013514:	f06f 0305 	mvn.w	r3, #5
 8013518:	617b      	str	r3, [r7, #20]
 801351a:	e007      	b.n	801352c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801351c:	2300      	movs	r3, #0
 801351e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d002      	beq.n	801352c <osDelay+0x4c>
      vTaskDelay(ticks);
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f002 f886 	bl	8015638 <vTaskDelay>
    }
  }

  return (stat);
 801352c:	697b      	ldr	r3, [r7, #20]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	2000046c 	.word	0x2000046c

0801353c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 801353c:	b580      	push	{r7, lr}
 801353e:	b088      	sub	sp, #32
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013544:	f3ef 8305 	mrs	r3, IPSR
 8013548:	617b      	str	r3, [r7, #20]
  return(result);
 801354a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801354c:	2b00      	cmp	r3, #0
 801354e:	d10f      	bne.n	8013570 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013550:	f3ef 8310 	mrs	r3, PRIMASK
 8013554:	613b      	str	r3, [r7, #16]
  return(result);
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d105      	bne.n	8013568 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801355c:	f3ef 8311 	mrs	r3, BASEPRI
 8013560:	60fb      	str	r3, [r7, #12]
  return(result);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d007      	beq.n	8013578 <osDelayUntil+0x3c>
 8013568:	4b13      	ldr	r3, [pc, #76]	; (80135b8 <osDelayUntil+0x7c>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2b02      	cmp	r3, #2
 801356e:	d103      	bne.n	8013578 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8013570:	f06f 0305 	mvn.w	r3, #5
 8013574:	61fb      	str	r3, [r7, #28]
 8013576:	e019      	b.n	80135ac <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8013578:	2300      	movs	r3, #0
 801357a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 801357c:	f002 f9a6 	bl	80158cc <xTaskGetTickCount>
 8013580:	4603      	mov	r3, r0
 8013582:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d009      	beq.n	80135a6 <osDelayUntil+0x6a>
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	2b00      	cmp	r3, #0
 8013596:	db06      	blt.n	80135a6 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8013598:	f107 0308 	add.w	r3, r7, #8
 801359c:	69b9      	ldr	r1, [r7, #24]
 801359e:	4618      	mov	r0, r3
 80135a0:	f001 ffca 	bl	8015538 <vTaskDelayUntil>
 80135a4:	e002      	b.n	80135ac <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80135a6:	f06f 0303 	mvn.w	r3, #3
 80135aa:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80135ac:	69fb      	ldr	r3, [r7, #28]
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3720      	adds	r7, #32
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	2000046c 	.word	0x2000046c

080135bc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80135bc:	b580      	push	{r7, lr}
 80135be:	b08a      	sub	sp, #40	; 0x28
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80135c4:	2300      	movs	r3, #0
 80135c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135c8:	f3ef 8305 	mrs	r3, IPSR
 80135cc:	613b      	str	r3, [r7, #16]
  return(result);
 80135ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f040 8085 	bne.w	80136e0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135d6:	f3ef 8310 	mrs	r3, PRIMASK
 80135da:	60fb      	str	r3, [r7, #12]
  return(result);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d105      	bne.n	80135ee <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80135e2:	f3ef 8311 	mrs	r3, BASEPRI
 80135e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d003      	beq.n	80135f6 <osMutexNew+0x3a>
 80135ee:	4b3f      	ldr	r3, [pc, #252]	; (80136ec <osMutexNew+0x130>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b02      	cmp	r3, #2
 80135f4:	d074      	beq.n	80136e0 <osMutexNew+0x124>
    if (attr != NULL) {
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d003      	beq.n	8013604 <osMutexNew+0x48>
      type = attr->attr_bits;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	623b      	str	r3, [r7, #32]
 8013602:	e001      	b.n	8013608 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8013604:	2300      	movs	r3, #0
 8013606:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8013608:	6a3b      	ldr	r3, [r7, #32]
 801360a:	f003 0301 	and.w	r3, r3, #1
 801360e:	2b00      	cmp	r3, #0
 8013610:	d002      	beq.n	8013618 <osMutexNew+0x5c>
      rmtx = 1U;
 8013612:	2301      	movs	r3, #1
 8013614:	61fb      	str	r3, [r7, #28]
 8013616:	e001      	b.n	801361c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8013618:	2300      	movs	r3, #0
 801361a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	f003 0308 	and.w	r3, r3, #8
 8013622:	2b00      	cmp	r3, #0
 8013624:	d15c      	bne.n	80136e0 <osMutexNew+0x124>
      mem = -1;
 8013626:	f04f 33ff 	mov.w	r3, #4294967295
 801362a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d015      	beq.n	801365e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	689b      	ldr	r3, [r3, #8]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d006      	beq.n	8013648 <osMutexNew+0x8c>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	68db      	ldr	r3, [r3, #12]
 801363e:	2b4f      	cmp	r3, #79	; 0x4f
 8013640:	d902      	bls.n	8013648 <osMutexNew+0x8c>
          mem = 1;
 8013642:	2301      	movs	r3, #1
 8013644:	61bb      	str	r3, [r7, #24]
 8013646:	e00c      	b.n	8013662 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	689b      	ldr	r3, [r3, #8]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d108      	bne.n	8013662 <osMutexNew+0xa6>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d104      	bne.n	8013662 <osMutexNew+0xa6>
            mem = 0;
 8013658:	2300      	movs	r3, #0
 801365a:	61bb      	str	r3, [r7, #24]
 801365c:	e001      	b.n	8013662 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801365e:	2300      	movs	r3, #0
 8013660:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	2b01      	cmp	r3, #1
 8013666:	d112      	bne.n	801368e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d007      	beq.n	801367e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	4619      	mov	r1, r3
 8013674:	2004      	movs	r0, #4
 8013676:	f000 fe4c 	bl	8014312 <xQueueCreateMutexStatic>
 801367a:	6278      	str	r0, [r7, #36]	; 0x24
 801367c:	e016      	b.n	80136ac <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	4619      	mov	r1, r3
 8013684:	2001      	movs	r0, #1
 8013686:	f000 fe44 	bl	8014312 <xQueueCreateMutexStatic>
 801368a:	6278      	str	r0, [r7, #36]	; 0x24
 801368c:	e00e      	b.n	80136ac <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d10b      	bne.n	80136ac <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d004      	beq.n	80136a4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 801369a:	2004      	movs	r0, #4
 801369c:	f000 fe21 	bl	80142e2 <xQueueCreateMutex>
 80136a0:	6278      	str	r0, [r7, #36]	; 0x24
 80136a2:	e003      	b.n	80136ac <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80136a4:	2001      	movs	r0, #1
 80136a6:	f000 fe1c 	bl	80142e2 <xQueueCreateMutex>
 80136aa:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80136ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d00c      	beq.n	80136cc <osMutexNew+0x110>
        if (attr != NULL) {
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d003      	beq.n	80136c0 <osMutexNew+0x104>
          name = attr->name;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	617b      	str	r3, [r7, #20]
 80136be:	e001      	b.n	80136c4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80136c0:	2300      	movs	r3, #0
 80136c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80136c4:	6979      	ldr	r1, [r7, #20]
 80136c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136c8:	f001 fd0a 	bl	80150e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80136cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d006      	beq.n	80136e0 <osMutexNew+0x124>
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d003      	beq.n	80136e0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80136d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136da:	f043 0301 	orr.w	r3, r3, #1
 80136de:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80136e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3728      	adds	r7, #40	; 0x28
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	2000046c 	.word	0x2000046c

080136f0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b088      	sub	sp, #32
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f023 0301 	bic.w	r3, r3, #1
 8013700:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f003 0301 	and.w	r3, r3, #1
 8013708:	617b      	str	r3, [r7, #20]

  stat = osOK;
 801370a:	2300      	movs	r3, #0
 801370c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801370e:	f3ef 8305 	mrs	r3, IPSR
 8013712:	613b      	str	r3, [r7, #16]
  return(result);
 8013714:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013716:	2b00      	cmp	r3, #0
 8013718:	d10f      	bne.n	801373a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801371a:	f3ef 8310 	mrs	r3, PRIMASK
 801371e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d105      	bne.n	8013732 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013726:	f3ef 8311 	mrs	r3, BASEPRI
 801372a:	60bb      	str	r3, [r7, #8]
  return(result);
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d007      	beq.n	8013742 <osMutexAcquire+0x52>
 8013732:	4b1d      	ldr	r3, [pc, #116]	; (80137a8 <osMutexAcquire+0xb8>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b02      	cmp	r3, #2
 8013738:	d103      	bne.n	8013742 <osMutexAcquire+0x52>
    stat = osErrorISR;
 801373a:	f06f 0305 	mvn.w	r3, #5
 801373e:	61fb      	str	r3, [r7, #28]
 8013740:	e02c      	b.n	801379c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d103      	bne.n	8013750 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8013748:	f06f 0303 	mvn.w	r3, #3
 801374c:	61fb      	str	r3, [r7, #28]
 801374e:	e025      	b.n	801379c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d011      	beq.n	801377a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8013756:	6839      	ldr	r1, [r7, #0]
 8013758:	69b8      	ldr	r0, [r7, #24]
 801375a:	f000 fe2a 	bl	80143b2 <xQueueTakeMutexRecursive>
 801375e:	4603      	mov	r3, r0
 8013760:	2b01      	cmp	r3, #1
 8013762:	d01b      	beq.n	801379c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d003      	beq.n	8013772 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 801376a:	f06f 0301 	mvn.w	r3, #1
 801376e:	61fb      	str	r3, [r7, #28]
 8013770:	e014      	b.n	801379c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013772:	f06f 0302 	mvn.w	r3, #2
 8013776:	61fb      	str	r3, [r7, #28]
 8013778:	e010      	b.n	801379c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801377a:	6839      	ldr	r1, [r7, #0]
 801377c:	69b8      	ldr	r0, [r7, #24]
 801377e:	f001 f9cf 	bl	8014b20 <xQueueSemaphoreTake>
 8013782:	4603      	mov	r3, r0
 8013784:	2b01      	cmp	r3, #1
 8013786:	d009      	beq.n	801379c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d003      	beq.n	8013796 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801378e:	f06f 0301 	mvn.w	r3, #1
 8013792:	61fb      	str	r3, [r7, #28]
 8013794:	e002      	b.n	801379c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013796:	f06f 0302 	mvn.w	r3, #2
 801379a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801379c:	69fb      	ldr	r3, [r7, #28]
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3720      	adds	r7, #32
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	2000046c 	.word	0x2000046c

080137ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b088      	sub	sp, #32
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f023 0301 	bic.w	r3, r3, #1
 80137ba:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f003 0301 	and.w	r3, r3, #1
 80137c2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80137c4:	2300      	movs	r3, #0
 80137c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137c8:	f3ef 8305 	mrs	r3, IPSR
 80137cc:	613b      	str	r3, [r7, #16]
  return(result);
 80137ce:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d10f      	bne.n	80137f4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137d4:	f3ef 8310 	mrs	r3, PRIMASK
 80137d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d105      	bne.n	80137ec <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80137e0:	f3ef 8311 	mrs	r3, BASEPRI
 80137e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d007      	beq.n	80137fc <osMutexRelease+0x50>
 80137ec:	4b16      	ldr	r3, [pc, #88]	; (8013848 <osMutexRelease+0x9c>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b02      	cmp	r3, #2
 80137f2:	d103      	bne.n	80137fc <osMutexRelease+0x50>
    stat = osErrorISR;
 80137f4:	f06f 0305 	mvn.w	r3, #5
 80137f8:	61fb      	str	r3, [r7, #28]
 80137fa:	e01f      	b.n	801383c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80137fc:	69bb      	ldr	r3, [r7, #24]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d103      	bne.n	801380a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8013802:	f06f 0303 	mvn.w	r3, #3
 8013806:	61fb      	str	r3, [r7, #28]
 8013808:	e018      	b.n	801383c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d009      	beq.n	8013824 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8013810:	69b8      	ldr	r0, [r7, #24]
 8013812:	f000 fd99 	bl	8014348 <xQueueGiveMutexRecursive>
 8013816:	4603      	mov	r3, r0
 8013818:	2b01      	cmp	r3, #1
 801381a:	d00f      	beq.n	801383c <osMutexRelease+0x90>
        stat = osErrorResource;
 801381c:	f06f 0302 	mvn.w	r3, #2
 8013820:	61fb      	str	r3, [r7, #28]
 8013822:	e00b      	b.n	801383c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8013824:	2300      	movs	r3, #0
 8013826:	2200      	movs	r2, #0
 8013828:	2100      	movs	r1, #0
 801382a:	69b8      	ldr	r0, [r7, #24]
 801382c:	f000 fe66 	bl	80144fc <xQueueGenericSend>
 8013830:	4603      	mov	r3, r0
 8013832:	2b01      	cmp	r3, #1
 8013834:	d002      	beq.n	801383c <osMutexRelease+0x90>
        stat = osErrorResource;
 8013836:	f06f 0302 	mvn.w	r3, #2
 801383a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 801383c:	69fb      	ldr	r3, [r7, #28]
}
 801383e:	4618      	mov	r0, r3
 8013840:	3720      	adds	r7, #32
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	2000046c 	.word	0x2000046c

0801384c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801384c:	b580      	push	{r7, lr}
 801384e:	b08c      	sub	sp, #48	; 0x30
 8013850:	af02      	add	r7, sp, #8
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8013858:	2300      	movs	r3, #0
 801385a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801385c:	f3ef 8305 	mrs	r3, IPSR
 8013860:	61bb      	str	r3, [r7, #24]
  return(result);
 8013862:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8013864:	2b00      	cmp	r3, #0
 8013866:	f040 8087 	bne.w	8013978 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801386a:	f3ef 8310 	mrs	r3, PRIMASK
 801386e:	617b      	str	r3, [r7, #20]
  return(result);
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d105      	bne.n	8013882 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013876:	f3ef 8311 	mrs	r3, BASEPRI
 801387a:	613b      	str	r3, [r7, #16]
  return(result);
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d003      	beq.n	801388a <osSemaphoreNew+0x3e>
 8013882:	4b40      	ldr	r3, [pc, #256]	; (8013984 <osSemaphoreNew+0x138>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b02      	cmp	r3, #2
 8013888:	d076      	beq.n	8013978 <osSemaphoreNew+0x12c>
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d073      	beq.n	8013978 <osSemaphoreNew+0x12c>
 8013890:	68ba      	ldr	r2, [r7, #8]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	429a      	cmp	r2, r3
 8013896:	d86f      	bhi.n	8013978 <osSemaphoreNew+0x12c>
    mem = -1;
 8013898:	f04f 33ff 	mov.w	r3, #4294967295
 801389c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d015      	beq.n	80138d0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d006      	beq.n	80138ba <osSemaphoreNew+0x6e>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	2b4f      	cmp	r3, #79	; 0x4f
 80138b2:	d902      	bls.n	80138ba <osSemaphoreNew+0x6e>
        mem = 1;
 80138b4:	2301      	movs	r3, #1
 80138b6:	623b      	str	r3, [r7, #32]
 80138b8:	e00c      	b.n	80138d4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	689b      	ldr	r3, [r3, #8]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d108      	bne.n	80138d4 <osSemaphoreNew+0x88>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d104      	bne.n	80138d4 <osSemaphoreNew+0x88>
          mem = 0;
 80138ca:	2300      	movs	r3, #0
 80138cc:	623b      	str	r3, [r7, #32]
 80138ce:	e001      	b.n	80138d4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80138d0:	2300      	movs	r3, #0
 80138d2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80138d4:	6a3b      	ldr	r3, [r7, #32]
 80138d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138da:	d04d      	beq.n	8013978 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2b01      	cmp	r3, #1
 80138e0:	d129      	bne.n	8013936 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80138e2:	6a3b      	ldr	r3, [r7, #32]
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d10b      	bne.n	8013900 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	689a      	ldr	r2, [r3, #8]
 80138ec:	2303      	movs	r3, #3
 80138ee:	9300      	str	r3, [sp, #0]
 80138f0:	4613      	mov	r3, r2
 80138f2:	2200      	movs	r2, #0
 80138f4:	2100      	movs	r1, #0
 80138f6:	2001      	movs	r0, #1
 80138f8:	f000 fbf8 	bl	80140ec <xQueueGenericCreateStatic>
 80138fc:	6278      	str	r0, [r7, #36]	; 0x24
 80138fe:	e005      	b.n	801390c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8013900:	2203      	movs	r2, #3
 8013902:	2100      	movs	r1, #0
 8013904:	2001      	movs	r0, #1
 8013906:	f000 fc6e 	bl	80141e6 <xQueueGenericCreate>
 801390a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390e:	2b00      	cmp	r3, #0
 8013910:	d022      	beq.n	8013958 <osSemaphoreNew+0x10c>
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d01f      	beq.n	8013958 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013918:	2300      	movs	r3, #0
 801391a:	2200      	movs	r2, #0
 801391c:	2100      	movs	r1, #0
 801391e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013920:	f000 fdec 	bl	80144fc <xQueueGenericSend>
 8013924:	4603      	mov	r3, r0
 8013926:	2b01      	cmp	r3, #1
 8013928:	d016      	beq.n	8013958 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801392a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801392c:	f001 fa8b 	bl	8014e46 <vQueueDelete>
            hSemaphore = NULL;
 8013930:	2300      	movs	r3, #0
 8013932:	627b      	str	r3, [r7, #36]	; 0x24
 8013934:	e010      	b.n	8013958 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8013936:	6a3b      	ldr	r3, [r7, #32]
 8013938:	2b01      	cmp	r3, #1
 801393a:	d108      	bne.n	801394e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	461a      	mov	r2, r3
 8013942:	68b9      	ldr	r1, [r7, #8]
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f000 fd6b 	bl	8014420 <xQueueCreateCountingSemaphoreStatic>
 801394a:	6278      	str	r0, [r7, #36]	; 0x24
 801394c:	e004      	b.n	8013958 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801394e:	68b9      	ldr	r1, [r7, #8]
 8013950:	68f8      	ldr	r0, [r7, #12]
 8013952:	f000 fd9e 	bl	8014492 <xQueueCreateCountingSemaphore>
 8013956:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8013958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801395a:	2b00      	cmp	r3, #0
 801395c:	d00c      	beq.n	8013978 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d003      	beq.n	801396c <osSemaphoreNew+0x120>
          name = attr->name;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	61fb      	str	r3, [r7, #28]
 801396a:	e001      	b.n	8013970 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 801396c:	2300      	movs	r3, #0
 801396e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8013970:	69f9      	ldr	r1, [r7, #28]
 8013972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013974:	f001 fbb4 	bl	80150e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8013978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801397a:	4618      	mov	r0, r3
 801397c:	3728      	adds	r7, #40	; 0x28
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	2000046c 	.word	0x2000046c

08013988 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8013988:	b580      	push	{r7, lr}
 801398a:	b088      	sub	sp, #32
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8013996:	2300      	movs	r3, #0
 8013998:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d103      	bne.n	80139a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80139a0:	f06f 0303 	mvn.w	r3, #3
 80139a4:	61fb      	str	r3, [r7, #28]
 80139a6:	e04b      	b.n	8013a40 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139a8:	f3ef 8305 	mrs	r3, IPSR
 80139ac:	617b      	str	r3, [r7, #20]
  return(result);
 80139ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10f      	bne.n	80139d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139b4:	f3ef 8310 	mrs	r3, PRIMASK
 80139b8:	613b      	str	r3, [r7, #16]
  return(result);
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d105      	bne.n	80139cc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80139c0:	f3ef 8311 	mrs	r3, BASEPRI
 80139c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d026      	beq.n	8013a1a <osSemaphoreAcquire+0x92>
 80139cc:	4b1f      	ldr	r3, [pc, #124]	; (8013a4c <osSemaphoreAcquire+0xc4>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d122      	bne.n	8013a1a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d003      	beq.n	80139e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80139da:	f06f 0303 	mvn.w	r3, #3
 80139de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80139e0:	e02d      	b.n	8013a3e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80139e2:	2300      	movs	r3, #0
 80139e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80139e6:	f107 0308 	add.w	r3, r7, #8
 80139ea:	461a      	mov	r2, r3
 80139ec:	2100      	movs	r1, #0
 80139ee:	69b8      	ldr	r0, [r7, #24]
 80139f0:	f001 f9a6 	bl	8014d40 <xQueueReceiveFromISR>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d003      	beq.n	8013a02 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80139fa:	f06f 0302 	mvn.w	r3, #2
 80139fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8013a00:	e01d      	b.n	8013a3e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d01a      	beq.n	8013a3e <osSemaphoreAcquire+0xb6>
 8013a08:	4b11      	ldr	r3, [pc, #68]	; (8013a50 <osSemaphoreAcquire+0xc8>)
 8013a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a0e:	601a      	str	r2, [r3, #0]
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8013a18:	e011      	b.n	8013a3e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8013a1a:	6839      	ldr	r1, [r7, #0]
 8013a1c:	69b8      	ldr	r0, [r7, #24]
 8013a1e:	f001 f87f 	bl	8014b20 <xQueueSemaphoreTake>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d00b      	beq.n	8013a40 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d003      	beq.n	8013a36 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8013a2e:	f06f 0301 	mvn.w	r3, #1
 8013a32:	61fb      	str	r3, [r7, #28]
 8013a34:	e004      	b.n	8013a40 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8013a36:	f06f 0302 	mvn.w	r3, #2
 8013a3a:	61fb      	str	r3, [r7, #28]
 8013a3c:	e000      	b.n	8013a40 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8013a3e:	bf00      	nop
      }
    }
  }

  return (stat);
 8013a40:	69fb      	ldr	r3, [r7, #28]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3720      	adds	r7, #32
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	2000046c 	.word	0x2000046c
 8013a50:	e000ed04 	.word	0xe000ed04

08013a54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b088      	sub	sp, #32
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8013a60:	2300      	movs	r3, #0
 8013a62:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8013a64:	69bb      	ldr	r3, [r7, #24]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d103      	bne.n	8013a72 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8013a6a:	f06f 0303 	mvn.w	r3, #3
 8013a6e:	61fb      	str	r3, [r7, #28]
 8013a70:	e03e      	b.n	8013af0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a72:	f3ef 8305 	mrs	r3, IPSR
 8013a76:	617b      	str	r3, [r7, #20]
  return(result);
 8013a78:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d10f      	bne.n	8013a9e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013a82:	613b      	str	r3, [r7, #16]
  return(result);
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d105      	bne.n	8013a96 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8013a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d01e      	beq.n	8013ad4 <osSemaphoreRelease+0x80>
 8013a96:	4b19      	ldr	r3, [pc, #100]	; (8013afc <osSemaphoreRelease+0xa8>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	2b02      	cmp	r3, #2
 8013a9c:	d11a      	bne.n	8013ad4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013aa2:	f107 0308 	add.w	r3, r7, #8
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	69b8      	ldr	r0, [r7, #24]
 8013aaa:	f000 fec5 	bl	8014838 <xQueueGiveFromISR>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d003      	beq.n	8013abc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8013ab4:	f06f 0302 	mvn.w	r3, #2
 8013ab8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013aba:	e018      	b.n	8013aee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d015      	beq.n	8013aee <osSemaphoreRelease+0x9a>
 8013ac2:	4b0f      	ldr	r3, [pc, #60]	; (8013b00 <osSemaphoreRelease+0xac>)
 8013ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ac8:	601a      	str	r2, [r3, #0]
 8013aca:	f3bf 8f4f 	dsb	sy
 8013ace:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013ad2:	e00c      	b.n	8013aee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	2100      	movs	r1, #0
 8013ada:	69b8      	ldr	r0, [r7, #24]
 8013adc:	f000 fd0e 	bl	80144fc <xQueueGenericSend>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d004      	beq.n	8013af0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8013ae6:	f06f 0302 	mvn.w	r3, #2
 8013aea:	61fb      	str	r3, [r7, #28]
 8013aec:	e000      	b.n	8013af0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013aee:	bf00      	nop
    }
  }

  return (stat);
 8013af0:	69fb      	ldr	r3, [r7, #28]
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	3720      	adds	r7, #32
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}
 8013afa:	bf00      	nop
 8013afc:	2000046c 	.word	0x2000046c
 8013b00:	e000ed04 	.word	0xe000ed04

08013b04 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b088      	sub	sp, #32
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b10:	f3ef 8305 	mrs	r3, IPSR
 8013b14:	617b      	str	r3, [r7, #20]
  return(result);
 8013b16:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d10f      	bne.n	8013b3c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b20:	613b      	str	r3, [r7, #16]
  return(result);
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d105      	bne.n	8013b34 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b28:	f3ef 8311 	mrs	r3, BASEPRI
 8013b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d007      	beq.n	8013b44 <osSemaphoreDelete+0x40>
 8013b34:	4b0d      	ldr	r3, [pc, #52]	; (8013b6c <osSemaphoreDelete+0x68>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d103      	bne.n	8013b44 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8013b3c:	f06f 0305 	mvn.w	r3, #5
 8013b40:	61fb      	str	r3, [r7, #28]
 8013b42:	e00e      	b.n	8013b62 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d103      	bne.n	8013b52 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8013b4a:	f06f 0303 	mvn.w	r3, #3
 8013b4e:	61fb      	str	r3, [r7, #28]
 8013b50:	e007      	b.n	8013b62 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8013b52:	69b8      	ldr	r0, [r7, #24]
 8013b54:	f001 faec 	bl	8015130 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8013b5c:	69b8      	ldr	r0, [r7, #24]
 8013b5e:	f001 f972 	bl	8014e46 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8013b62:	69fb      	ldr	r3, [r7, #28]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3720      	adds	r7, #32
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	2000046c 	.word	0x2000046c

08013b70 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b08c      	sub	sp, #48	; 0x30
 8013b74:	af02      	add	r7, sp, #8
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b80:	f3ef 8305 	mrs	r3, IPSR
 8013b84:	61bb      	str	r3, [r7, #24]
  return(result);
 8013b86:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d170      	bne.n	8013c6e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b90:	617b      	str	r3, [r7, #20]
  return(result);
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d105      	bne.n	8013ba4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b98:	f3ef 8311 	mrs	r3, BASEPRI
 8013b9c:	613b      	str	r3, [r7, #16]
  return(result);
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d003      	beq.n	8013bac <osMessageQueueNew+0x3c>
 8013ba4:	4b34      	ldr	r3, [pc, #208]	; (8013c78 <osMessageQueueNew+0x108>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d060      	beq.n	8013c6e <osMessageQueueNew+0xfe>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d05d      	beq.n	8013c6e <osMessageQueueNew+0xfe>
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d05a      	beq.n	8013c6e <osMessageQueueNew+0xfe>
    mem = -1;
 8013bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bbc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d029      	beq.n	8013c18 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	689b      	ldr	r3, [r3, #8]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d012      	beq.n	8013bf2 <osMessageQueueNew+0x82>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	2b4f      	cmp	r3, #79	; 0x4f
 8013bd2:	d90e      	bls.n	8013bf2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d00a      	beq.n	8013bf2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	695a      	ldr	r2, [r3, #20]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	68b9      	ldr	r1, [r7, #8]
 8013be4:	fb01 f303 	mul.w	r3, r1, r3
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d302      	bcc.n	8013bf2 <osMessageQueueNew+0x82>
        mem = 1;
 8013bec:	2301      	movs	r3, #1
 8013bee:	623b      	str	r3, [r7, #32]
 8013bf0:	e014      	b.n	8013c1c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	689b      	ldr	r3, [r3, #8]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d110      	bne.n	8013c1c <osMessageQueueNew+0xac>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	68db      	ldr	r3, [r3, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d10c      	bne.n	8013c1c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d108      	bne.n	8013c1c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	695b      	ldr	r3, [r3, #20]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d104      	bne.n	8013c1c <osMessageQueueNew+0xac>
          mem = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	623b      	str	r3, [r7, #32]
 8013c16:	e001      	b.n	8013c1c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013c1c:	6a3b      	ldr	r3, [r7, #32]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d10c      	bne.n	8013c3c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	691a      	ldr	r2, [r3, #16]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6899      	ldr	r1, [r3, #8]
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	460b      	mov	r3, r1
 8013c30:	68b9      	ldr	r1, [r7, #8]
 8013c32:	68f8      	ldr	r0, [r7, #12]
 8013c34:	f000 fa5a 	bl	80140ec <xQueueGenericCreateStatic>
 8013c38:	6278      	str	r0, [r7, #36]	; 0x24
 8013c3a:	e008      	b.n	8013c4e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013c3c:	6a3b      	ldr	r3, [r7, #32]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d105      	bne.n	8013c4e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013c42:	2200      	movs	r2, #0
 8013c44:	68b9      	ldr	r1, [r7, #8]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f000 facd 	bl	80141e6 <xQueueGenericCreate>
 8013c4c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00c      	beq.n	8013c6e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d003      	beq.n	8013c62 <osMessageQueueNew+0xf2>
        name = attr->name;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	61fb      	str	r3, [r7, #28]
 8013c60:	e001      	b.n	8013c66 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013c62:	2300      	movs	r3, #0
 8013c64:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013c66:	69f9      	ldr	r1, [r7, #28]
 8013c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c6a:	f001 fa39 	bl	80150e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3728      	adds	r7, #40	; 0x28
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	2000046c 	.word	0x2000046c

08013c7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b08a      	sub	sp, #40	; 0x28
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	603b      	str	r3, [r7, #0]
 8013c88:	4613      	mov	r3, r2
 8013c8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013c90:	2300      	movs	r3, #0
 8013c92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c94:	f3ef 8305 	mrs	r3, IPSR
 8013c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8013c9a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d10f      	bne.n	8013cc0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8013ca4:	61bb      	str	r3, [r7, #24]
  return(result);
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d105      	bne.n	8013cb8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013cac:	f3ef 8311 	mrs	r3, BASEPRI
 8013cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d02c      	beq.n	8013d12 <osMessageQueuePut+0x96>
 8013cb8:	4b28      	ldr	r3, [pc, #160]	; (8013d5c <osMessageQueuePut+0xe0>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b02      	cmp	r3, #2
 8013cbe:	d128      	bne.n	8013d12 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013cc0:	6a3b      	ldr	r3, [r7, #32]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d005      	beq.n	8013cd2 <osMessageQueuePut+0x56>
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d002      	beq.n	8013cd2 <osMessageQueuePut+0x56>
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d003      	beq.n	8013cda <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013cd2:	f06f 0303 	mvn.w	r3, #3
 8013cd6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013cd8:	e039      	b.n	8013d4e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013cde:	f107 0210 	add.w	r2, r7, #16
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	68b9      	ldr	r1, [r7, #8]
 8013ce6:	6a38      	ldr	r0, [r7, #32]
 8013ce8:	f000 fd0a 	bl	8014700 <xQueueGenericSendFromISR>
 8013cec:	4603      	mov	r3, r0
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d003      	beq.n	8013cfa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013cf2:	f06f 0302 	mvn.w	r3, #2
 8013cf6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013cf8:	e029      	b.n	8013d4e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d026      	beq.n	8013d4e <osMessageQueuePut+0xd2>
 8013d00:	4b17      	ldr	r3, [pc, #92]	; (8013d60 <osMessageQueuePut+0xe4>)
 8013d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d06:	601a      	str	r2, [r3, #0]
 8013d08:	f3bf 8f4f 	dsb	sy
 8013d0c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013d10:	e01d      	b.n	8013d4e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013d12:	6a3b      	ldr	r3, [r7, #32]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d002      	beq.n	8013d1e <osMessageQueuePut+0xa2>
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d103      	bne.n	8013d26 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013d1e:	f06f 0303 	mvn.w	r3, #3
 8013d22:	627b      	str	r3, [r7, #36]	; 0x24
 8013d24:	e014      	b.n	8013d50 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013d26:	2300      	movs	r3, #0
 8013d28:	683a      	ldr	r2, [r7, #0]
 8013d2a:	68b9      	ldr	r1, [r7, #8]
 8013d2c:	6a38      	ldr	r0, [r7, #32]
 8013d2e:	f000 fbe5 	bl	80144fc <xQueueGenericSend>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d00b      	beq.n	8013d50 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d003      	beq.n	8013d46 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013d3e:	f06f 0301 	mvn.w	r3, #1
 8013d42:	627b      	str	r3, [r7, #36]	; 0x24
 8013d44:	e004      	b.n	8013d50 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013d46:	f06f 0302 	mvn.w	r3, #2
 8013d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8013d4c:	e000      	b.n	8013d50 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013d4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3728      	adds	r7, #40	; 0x28
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	2000046c 	.word	0x2000046c
 8013d60:	e000ed04 	.word	0xe000ed04

08013d64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b08a      	sub	sp, #40	; 0x28
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
 8013d70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013d76:	2300      	movs	r3, #0
 8013d78:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d7a:	f3ef 8305 	mrs	r3, IPSR
 8013d7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8013d80:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d10f      	bne.n	8013da6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d86:	f3ef 8310 	mrs	r3, PRIMASK
 8013d8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d105      	bne.n	8013d9e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013d92:	f3ef 8311 	mrs	r3, BASEPRI
 8013d96:	617b      	str	r3, [r7, #20]
  return(result);
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d02c      	beq.n	8013df8 <osMessageQueueGet+0x94>
 8013d9e:	4b28      	ldr	r3, [pc, #160]	; (8013e40 <osMessageQueueGet+0xdc>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b02      	cmp	r3, #2
 8013da4:	d128      	bne.n	8013df8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013da6:	6a3b      	ldr	r3, [r7, #32]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d005      	beq.n	8013db8 <osMessageQueueGet+0x54>
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d002      	beq.n	8013db8 <osMessageQueueGet+0x54>
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d003      	beq.n	8013dc0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013db8:	f06f 0303 	mvn.w	r3, #3
 8013dbc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013dbe:	e038      	b.n	8013e32 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013dc4:	f107 0310 	add.w	r3, r7, #16
 8013dc8:	461a      	mov	r2, r3
 8013dca:	68b9      	ldr	r1, [r7, #8]
 8013dcc:	6a38      	ldr	r0, [r7, #32]
 8013dce:	f000 ffb7 	bl	8014d40 <xQueueReceiveFromISR>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d003      	beq.n	8013de0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013dd8:	f06f 0302 	mvn.w	r3, #2
 8013ddc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013dde:	e028      	b.n	8013e32 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d025      	beq.n	8013e32 <osMessageQueueGet+0xce>
 8013de6:	4b17      	ldr	r3, [pc, #92]	; (8013e44 <osMessageQueueGet+0xe0>)
 8013de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dec:	601a      	str	r2, [r3, #0]
 8013dee:	f3bf 8f4f 	dsb	sy
 8013df2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013df6:	e01c      	b.n	8013e32 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013df8:	6a3b      	ldr	r3, [r7, #32]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d002      	beq.n	8013e04 <osMessageQueueGet+0xa0>
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d103      	bne.n	8013e0c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013e04:	f06f 0303 	mvn.w	r3, #3
 8013e08:	627b      	str	r3, [r7, #36]	; 0x24
 8013e0a:	e013      	b.n	8013e34 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013e0c:	683a      	ldr	r2, [r7, #0]
 8013e0e:	68b9      	ldr	r1, [r7, #8]
 8013e10:	6a38      	ldr	r0, [r7, #32]
 8013e12:	f000 fda3 	bl	801495c <xQueueReceive>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d00b      	beq.n	8013e34 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d003      	beq.n	8013e2a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8013e22:	f06f 0301 	mvn.w	r3, #1
 8013e26:	627b      	str	r3, [r7, #36]	; 0x24
 8013e28:	e004      	b.n	8013e34 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013e2a:	f06f 0302 	mvn.w	r3, #2
 8013e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8013e30:	e000      	b.n	8013e34 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e32:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3728      	adds	r7, #40	; 0x28
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	bf00      	nop
 8013e40:	2000046c 	.word	0x2000046c
 8013e44:	e000ed04 	.word	0xe000ed04

08013e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013e48:	b480      	push	{r7}
 8013e4a:	b085      	sub	sp, #20
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	60f8      	str	r0, [r7, #12]
 8013e50:	60b9      	str	r1, [r7, #8]
 8013e52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	4a07      	ldr	r2, [pc, #28]	; (8013e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8013e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	4a06      	ldr	r2, [pc, #24]	; (8013e78 <vApplicationGetIdleTaskMemory+0x30>)
 8013e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2280      	movs	r2, #128	; 0x80
 8013e64:	601a      	str	r2, [r3, #0]
}
 8013e66:	bf00      	nop
 8013e68:	3714      	adds	r7, #20
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e70:	4770      	bx	lr
 8013e72:	bf00      	nop
 8013e74:	20000470 	.word	0x20000470
 8013e78:	200004cc 	.word	0x200004cc

08013e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013e7c:	b480      	push	{r7}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	4a07      	ldr	r2, [pc, #28]	; (8013ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8013e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	4a06      	ldr	r2, [pc, #24]	; (8013eac <vApplicationGetTimerTaskMemory+0x30>)
 8013e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013e9a:	601a      	str	r2, [r3, #0]
}
 8013e9c:	bf00      	nop
 8013e9e:	3714      	adds	r7, #20
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr
 8013ea8:	200006cc 	.word	0x200006cc
 8013eac:	20000728 	.word	0x20000728

08013eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b083      	sub	sp, #12
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f103 0208 	add.w	r2, r3, #8
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f103 0208 	add.w	r2, r3, #8
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f103 0208 	add.w	r2, r3, #8
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013ee4:	bf00      	nop
 8013ee6:	370c      	adds	r7, #12
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr

08013ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b083      	sub	sp, #12
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013efe:	bf00      	nop
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr

08013f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f0a:	b480      	push	{r7}
 8013f0c:	b085      	sub	sp, #20
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	6078      	str	r0, [r7, #4]
 8013f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	685b      	ldr	r3, [r3, #4]
 8013f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	68fa      	ldr	r2, [r7, #12]
 8013f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	689a      	ldr	r2, [r3, #8]
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	689b      	ldr	r3, [r3, #8]
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	683a      	ldr	r2, [r7, #0]
 8013f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	1c5a      	adds	r2, r3, #1
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	601a      	str	r2, [r3, #0]
}
 8013f46:	bf00      	nop
 8013f48:	3714      	adds	r7, #20
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr

08013f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f52:	b480      	push	{r7}
 8013f54:	b085      	sub	sp, #20
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f68:	d103      	bne.n	8013f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	691b      	ldr	r3, [r3, #16]
 8013f6e:	60fb      	str	r3, [r7, #12]
 8013f70:	e00c      	b.n	8013f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	3308      	adds	r3, #8
 8013f76:	60fb      	str	r3, [r7, #12]
 8013f78:	e002      	b.n	8013f80 <vListInsert+0x2e>
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	60fb      	str	r3, [r7, #12]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d2f6      	bcs.n	8013f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	685a      	ldr	r2, [r3, #4]
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	683a      	ldr	r2, [r7, #0]
 8013f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	1c5a      	adds	r2, r3, #1
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	601a      	str	r2, [r3, #0]
}
 8013fb8:	bf00      	nop
 8013fba:	3714      	adds	r7, #20
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	691b      	ldr	r3, [r3, #16]
 8013fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	6892      	ldr	r2, [r2, #8]
 8013fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	689b      	ldr	r3, [r3, #8]
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	6852      	ldr	r2, [r2, #4]
 8013fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d103      	bne.n	8013ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	689a      	ldr	r2, [r3, #8]
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	1e5a      	subs	r2, r3, #1
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
}
 801400c:	4618      	mov	r0, r3
 801400e:	3714      	adds	r7, #20
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr

08014018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d10b      	bne.n	8014044 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014030:	b672      	cpsid	i
 8014032:	f383 8811 	msr	BASEPRI, r3
 8014036:	f3bf 8f6f 	isb	sy
 801403a:	f3bf 8f4f 	dsb	sy
 801403e:	b662      	cpsie	i
 8014040:	60bb      	str	r3, [r7, #8]
 8014042:	e7fe      	b.n	8014042 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8014044:	f002 fdd8 	bl	8016bf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014050:	68f9      	ldr	r1, [r7, #12]
 8014052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014054:	fb01 f303 	mul.w	r3, r1, r3
 8014058:	441a      	add	r2, r3
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2200      	movs	r2, #0
 8014062:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014074:	3b01      	subs	r3, #1
 8014076:	68f9      	ldr	r1, [r7, #12]
 8014078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801407a:	fb01 f303 	mul.w	r3, r1, r3
 801407e:	441a      	add	r2, r3
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	22ff      	movs	r2, #255	; 0xff
 8014088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	22ff      	movs	r2, #255	; 0xff
 8014090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d114      	bne.n	80140c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	691b      	ldr	r3, [r3, #16]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d01a      	beq.n	80140d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	3310      	adds	r3, #16
 80140a6:	4618      	mov	r0, r3
 80140a8:	f001 fd9c 	bl	8015be4 <xTaskRemoveFromEventList>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d012      	beq.n	80140d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80140b2:	4b0d      	ldr	r3, [pc, #52]	; (80140e8 <xQueueGenericReset+0xd0>)
 80140b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	f3bf 8f4f 	dsb	sy
 80140be:	f3bf 8f6f 	isb	sy
 80140c2:	e009      	b.n	80140d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	3310      	adds	r3, #16
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7ff fef1 	bl	8013eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	3324      	adds	r3, #36	; 0x24
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7ff feec 	bl	8013eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80140d8:	f002 fdc0 	bl	8016c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80140dc:	2301      	movs	r3, #1
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3710      	adds	r7, #16
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	e000ed04 	.word	0xe000ed04

080140ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b08e      	sub	sp, #56	; 0x38
 80140f0:	af02      	add	r7, sp, #8
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
 80140f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10b      	bne.n	8014118 <xQueueGenericCreateStatic+0x2c>
 8014100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014104:	b672      	cpsid	i
 8014106:	f383 8811 	msr	BASEPRI, r3
 801410a:	f3bf 8f6f 	isb	sy
 801410e:	f3bf 8f4f 	dsb	sy
 8014112:	b662      	cpsie	i
 8014114:	62bb      	str	r3, [r7, #40]	; 0x28
 8014116:	e7fe      	b.n	8014116 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d10b      	bne.n	8014136 <xQueueGenericCreateStatic+0x4a>
 801411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014122:	b672      	cpsid	i
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	b662      	cpsie	i
 8014132:	627b      	str	r3, [r7, #36]	; 0x24
 8014134:	e7fe      	b.n	8014134 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d002      	beq.n	8014142 <xQueueGenericCreateStatic+0x56>
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d001      	beq.n	8014146 <xQueueGenericCreateStatic+0x5a>
 8014142:	2301      	movs	r3, #1
 8014144:	e000      	b.n	8014148 <xQueueGenericCreateStatic+0x5c>
 8014146:	2300      	movs	r3, #0
 8014148:	2b00      	cmp	r3, #0
 801414a:	d10b      	bne.n	8014164 <xQueueGenericCreateStatic+0x78>
 801414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014150:	b672      	cpsid	i
 8014152:	f383 8811 	msr	BASEPRI, r3
 8014156:	f3bf 8f6f 	isb	sy
 801415a:	f3bf 8f4f 	dsb	sy
 801415e:	b662      	cpsie	i
 8014160:	623b      	str	r3, [r7, #32]
 8014162:	e7fe      	b.n	8014162 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d102      	bne.n	8014170 <xQueueGenericCreateStatic+0x84>
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d101      	bne.n	8014174 <xQueueGenericCreateStatic+0x88>
 8014170:	2301      	movs	r3, #1
 8014172:	e000      	b.n	8014176 <xQueueGenericCreateStatic+0x8a>
 8014174:	2300      	movs	r3, #0
 8014176:	2b00      	cmp	r3, #0
 8014178:	d10b      	bne.n	8014192 <xQueueGenericCreateStatic+0xa6>
 801417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417e:	b672      	cpsid	i
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	b662      	cpsie	i
 801418e:	61fb      	str	r3, [r7, #28]
 8014190:	e7fe      	b.n	8014190 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014192:	2350      	movs	r3, #80	; 0x50
 8014194:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	2b50      	cmp	r3, #80	; 0x50
 801419a:	d00b      	beq.n	80141b4 <xQueueGenericCreateStatic+0xc8>
 801419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a0:	b672      	cpsid	i
 80141a2:	f383 8811 	msr	BASEPRI, r3
 80141a6:	f3bf 8f6f 	isb	sy
 80141aa:	f3bf 8f4f 	dsb	sy
 80141ae:	b662      	cpsie	i
 80141b0:	61bb      	str	r3, [r7, #24]
 80141b2:	e7fe      	b.n	80141b2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80141b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80141ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00d      	beq.n	80141dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80141c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c2:	2201      	movs	r2, #1
 80141c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80141c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	4613      	mov	r3, r2
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	68b9      	ldr	r1, [r7, #8]
 80141d6:	68f8      	ldr	r0, [r7, #12]
 80141d8:	f000 f846 	bl	8014268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80141dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80141de:	4618      	mov	r0, r3
 80141e0:	3730      	adds	r7, #48	; 0x30
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80141e6:	b580      	push	{r7, lr}
 80141e8:	b08a      	sub	sp, #40	; 0x28
 80141ea:	af02      	add	r7, sp, #8
 80141ec:	60f8      	str	r0, [r7, #12]
 80141ee:	60b9      	str	r1, [r7, #8]
 80141f0:	4613      	mov	r3, r2
 80141f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10b      	bne.n	8014212 <xQueueGenericCreate+0x2c>
 80141fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fe:	b672      	cpsid	i
 8014200:	f383 8811 	msr	BASEPRI, r3
 8014204:	f3bf 8f6f 	isb	sy
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	b662      	cpsie	i
 801420e:	613b      	str	r3, [r7, #16]
 8014210:	e7fe      	b.n	8014210 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d102      	bne.n	801421e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014218:	2300      	movs	r3, #0
 801421a:	61fb      	str	r3, [r7, #28]
 801421c:	e004      	b.n	8014228 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	68ba      	ldr	r2, [r7, #8]
 8014222:	fb02 f303 	mul.w	r3, r2, r3
 8014226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	3350      	adds	r3, #80	; 0x50
 801422c:	4618      	mov	r0, r3
 801422e:	f002 fe05 	bl	8016e3c <pvPortMalloc>
 8014232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d011      	beq.n	801425e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	3350      	adds	r3, #80	; 0x50
 8014242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	2200      	movs	r2, #0
 8014248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801424c:	79fa      	ldrb	r2, [r7, #7]
 801424e:	69bb      	ldr	r3, [r7, #24]
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	4613      	mov	r3, r2
 8014254:	697a      	ldr	r2, [r7, #20]
 8014256:	68b9      	ldr	r1, [r7, #8]
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	f000 f805 	bl	8014268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801425e:	69bb      	ldr	r3, [r7, #24]
	}
 8014260:	4618      	mov	r0, r3
 8014262:	3720      	adds	r7, #32
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}

08014268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b084      	sub	sp, #16
 801426c:	af00      	add	r7, sp, #0
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
 8014274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d103      	bne.n	8014284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	69ba      	ldr	r2, [r7, #24]
 8014280:	601a      	str	r2, [r3, #0]
 8014282:	e002      	b.n	801428a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	68fa      	ldr	r2, [r7, #12]
 801428e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014290:	69bb      	ldr	r3, [r7, #24]
 8014292:	68ba      	ldr	r2, [r7, #8]
 8014294:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014296:	2101      	movs	r1, #1
 8014298:	69b8      	ldr	r0, [r7, #24]
 801429a:	f7ff febd 	bl	8014018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	78fa      	ldrb	r2, [r7, #3]
 80142a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80142a6:	bf00      	nop
 80142a8:	3710      	adds	r7, #16
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}

080142ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80142ae:	b580      	push	{r7, lr}
 80142b0:	b082      	sub	sp, #8
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d00e      	beq.n	80142da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2200      	movs	r2, #0
 80142c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2200      	movs	r2, #0
 80142c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2200      	movs	r2, #0
 80142cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80142ce:	2300      	movs	r3, #0
 80142d0:	2200      	movs	r2, #0
 80142d2:	2100      	movs	r1, #0
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 f911 	bl	80144fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80142da:	bf00      	nop
 80142dc:	3708      	adds	r7, #8
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80142e2:	b580      	push	{r7, lr}
 80142e4:	b086      	sub	sp, #24
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	4603      	mov	r3, r0
 80142ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80142ec:	2301      	movs	r3, #1
 80142ee:	617b      	str	r3, [r7, #20]
 80142f0:	2300      	movs	r3, #0
 80142f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80142f4:	79fb      	ldrb	r3, [r7, #7]
 80142f6:	461a      	mov	r2, r3
 80142f8:	6939      	ldr	r1, [r7, #16]
 80142fa:	6978      	ldr	r0, [r7, #20]
 80142fc:	f7ff ff73 	bl	80141e6 <xQueueGenericCreate>
 8014300:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014302:	68f8      	ldr	r0, [r7, #12]
 8014304:	f7ff ffd3 	bl	80142ae <prvInitialiseMutex>

		return xNewQueue;
 8014308:	68fb      	ldr	r3, [r7, #12]
	}
 801430a:	4618      	mov	r0, r3
 801430c:	3718      	adds	r7, #24
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}

08014312 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8014312:	b580      	push	{r7, lr}
 8014314:	b088      	sub	sp, #32
 8014316:	af02      	add	r7, sp, #8
 8014318:	4603      	mov	r3, r0
 801431a:	6039      	str	r1, [r7, #0]
 801431c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801431e:	2301      	movs	r3, #1
 8014320:	617b      	str	r3, [r7, #20]
 8014322:	2300      	movs	r3, #0
 8014324:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014326:	79fb      	ldrb	r3, [r7, #7]
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	2200      	movs	r2, #0
 801432e:	6939      	ldr	r1, [r7, #16]
 8014330:	6978      	ldr	r0, [r7, #20]
 8014332:	f7ff fedb 	bl	80140ec <xQueueGenericCreateStatic>
 8014336:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	f7ff ffb8 	bl	80142ae <prvInitialiseMutex>

		return xNewQueue;
 801433e:	68fb      	ldr	r3, [r7, #12]
	}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}

08014348 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014348:	b590      	push	{r4, r7, lr}
 801434a:	b087      	sub	sp, #28
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d10b      	bne.n	8014372 <xQueueGiveMutexRecursive+0x2a>
 801435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435e:	b672      	cpsid	i
 8014360:	f383 8811 	msr	BASEPRI, r3
 8014364:	f3bf 8f6f 	isb	sy
 8014368:	f3bf 8f4f 	dsb	sy
 801436c:	b662      	cpsie	i
 801436e:	60fb      	str	r3, [r7, #12]
 8014370:	e7fe      	b.n	8014370 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	689c      	ldr	r4, [r3, #8]
 8014376:	f001 fdf3 	bl	8015f60 <xTaskGetCurrentTaskHandle>
 801437a:	4603      	mov	r3, r0
 801437c:	429c      	cmp	r4, r3
 801437e:	d111      	bne.n	80143a4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	1e5a      	subs	r2, r3, #1
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d105      	bne.n	801439e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8014392:	2300      	movs	r3, #0
 8014394:	2200      	movs	r2, #0
 8014396:	2100      	movs	r1, #0
 8014398:	6938      	ldr	r0, [r7, #16]
 801439a:	f000 f8af 	bl	80144fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801439e:	2301      	movs	r3, #1
 80143a0:	617b      	str	r3, [r7, #20]
 80143a2:	e001      	b.n	80143a8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80143a4:	2300      	movs	r3, #0
 80143a6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80143a8:	697b      	ldr	r3, [r7, #20]
	}
 80143aa:	4618      	mov	r0, r3
 80143ac:	371c      	adds	r7, #28
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd90      	pop	{r4, r7, pc}

080143b2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80143b2:	b590      	push	{r4, r7, lr}
 80143b4:	b087      	sub	sp, #28
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	6078      	str	r0, [r7, #4]
 80143ba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d10b      	bne.n	80143de <xQueueTakeMutexRecursive+0x2c>
 80143c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ca:	b672      	cpsid	i
 80143cc:	f383 8811 	msr	BASEPRI, r3
 80143d0:	f3bf 8f6f 	isb	sy
 80143d4:	f3bf 8f4f 	dsb	sy
 80143d8:	b662      	cpsie	i
 80143da:	60fb      	str	r3, [r7, #12]
 80143dc:	e7fe      	b.n	80143dc <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	689c      	ldr	r4, [r3, #8]
 80143e2:	f001 fdbd 	bl	8015f60 <xTaskGetCurrentTaskHandle>
 80143e6:	4603      	mov	r3, r0
 80143e8:	429c      	cmp	r4, r3
 80143ea:	d107      	bne.n	80143fc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80143f6:	2301      	movs	r3, #1
 80143f8:	617b      	str	r3, [r7, #20]
 80143fa:	e00c      	b.n	8014416 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80143fc:	6839      	ldr	r1, [r7, #0]
 80143fe:	6938      	ldr	r0, [r7, #16]
 8014400:	f000 fb8e 	bl	8014b20 <xQueueSemaphoreTake>
 8014404:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d004      	beq.n	8014416 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	1c5a      	adds	r2, r3, #1
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014416:	697b      	ldr	r3, [r7, #20]
	}
 8014418:	4618      	mov	r0, r3
 801441a:	371c      	adds	r7, #28
 801441c:	46bd      	mov	sp, r7
 801441e:	bd90      	pop	{r4, r7, pc}

08014420 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08a      	sub	sp, #40	; 0x28
 8014424:	af02      	add	r7, sp, #8
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d10b      	bne.n	801444a <xQueueCreateCountingSemaphoreStatic+0x2a>
 8014432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014436:	b672      	cpsid	i
 8014438:	f383 8811 	msr	BASEPRI, r3
 801443c:	f3bf 8f6f 	isb	sy
 8014440:	f3bf 8f4f 	dsb	sy
 8014444:	b662      	cpsie	i
 8014446:	61bb      	str	r3, [r7, #24]
 8014448:	e7fe      	b.n	8014448 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801444a:	68ba      	ldr	r2, [r7, #8]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	429a      	cmp	r2, r3
 8014450:	d90b      	bls.n	801446a <xQueueCreateCountingSemaphoreStatic+0x4a>
 8014452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014456:	b672      	cpsid	i
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	b662      	cpsie	i
 8014466:	617b      	str	r3, [r7, #20]
 8014468:	e7fe      	b.n	8014468 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801446a:	2302      	movs	r3, #2
 801446c:	9300      	str	r3, [sp, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2200      	movs	r2, #0
 8014472:	2100      	movs	r1, #0
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f7ff fe39 	bl	80140ec <xQueueGenericCreateStatic>
 801447a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d002      	beq.n	8014488 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014482:	69fb      	ldr	r3, [r7, #28]
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014488:	69fb      	ldr	r3, [r7, #28]
	}
 801448a:	4618      	mov	r0, r3
 801448c:	3720      	adds	r7, #32
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}

08014492 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014492:	b580      	push	{r7, lr}
 8014494:	b086      	sub	sp, #24
 8014496:	af00      	add	r7, sp, #0
 8014498:	6078      	str	r0, [r7, #4]
 801449a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10b      	bne.n	80144ba <xQueueCreateCountingSemaphore+0x28>
 80144a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a6:	b672      	cpsid	i
 80144a8:	f383 8811 	msr	BASEPRI, r3
 80144ac:	f3bf 8f6f 	isb	sy
 80144b0:	f3bf 8f4f 	dsb	sy
 80144b4:	b662      	cpsie	i
 80144b6:	613b      	str	r3, [r7, #16]
 80144b8:	e7fe      	b.n	80144b8 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80144ba:	683a      	ldr	r2, [r7, #0]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d90b      	bls.n	80144da <xQueueCreateCountingSemaphore+0x48>
 80144c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c6:	b672      	cpsid	i
 80144c8:	f383 8811 	msr	BASEPRI, r3
 80144cc:	f3bf 8f6f 	isb	sy
 80144d0:	f3bf 8f4f 	dsb	sy
 80144d4:	b662      	cpsie	i
 80144d6:	60fb      	str	r3, [r7, #12]
 80144d8:	e7fe      	b.n	80144d8 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80144da:	2202      	movs	r2, #2
 80144dc:	2100      	movs	r1, #0
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f7ff fe81 	bl	80141e6 <xQueueGenericCreate>
 80144e4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d002      	beq.n	80144f2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	683a      	ldr	r2, [r7, #0]
 80144f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80144f2:	697b      	ldr	r3, [r7, #20]
	}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3718      	adds	r7, #24
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b08e      	sub	sp, #56	; 0x38
 8014500:	af00      	add	r7, sp, #0
 8014502:	60f8      	str	r0, [r7, #12]
 8014504:	60b9      	str	r1, [r7, #8]
 8014506:	607a      	str	r2, [r7, #4]
 8014508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801450a:	2300      	movs	r3, #0
 801450c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014514:	2b00      	cmp	r3, #0
 8014516:	d10b      	bne.n	8014530 <xQueueGenericSend+0x34>
 8014518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451c:	b672      	cpsid	i
 801451e:	f383 8811 	msr	BASEPRI, r3
 8014522:	f3bf 8f6f 	isb	sy
 8014526:	f3bf 8f4f 	dsb	sy
 801452a:	b662      	cpsie	i
 801452c:	62bb      	str	r3, [r7, #40]	; 0x28
 801452e:	e7fe      	b.n	801452e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d103      	bne.n	801453e <xQueueGenericSend+0x42>
 8014536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801453a:	2b00      	cmp	r3, #0
 801453c:	d101      	bne.n	8014542 <xQueueGenericSend+0x46>
 801453e:	2301      	movs	r3, #1
 8014540:	e000      	b.n	8014544 <xQueueGenericSend+0x48>
 8014542:	2300      	movs	r3, #0
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10b      	bne.n	8014560 <xQueueGenericSend+0x64>
 8014548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801454c:	b672      	cpsid	i
 801454e:	f383 8811 	msr	BASEPRI, r3
 8014552:	f3bf 8f6f 	isb	sy
 8014556:	f3bf 8f4f 	dsb	sy
 801455a:	b662      	cpsie	i
 801455c:	627b      	str	r3, [r7, #36]	; 0x24
 801455e:	e7fe      	b.n	801455e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	2b02      	cmp	r3, #2
 8014564:	d103      	bne.n	801456e <xQueueGenericSend+0x72>
 8014566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801456a:	2b01      	cmp	r3, #1
 801456c:	d101      	bne.n	8014572 <xQueueGenericSend+0x76>
 801456e:	2301      	movs	r3, #1
 8014570:	e000      	b.n	8014574 <xQueueGenericSend+0x78>
 8014572:	2300      	movs	r3, #0
 8014574:	2b00      	cmp	r3, #0
 8014576:	d10b      	bne.n	8014590 <xQueueGenericSend+0x94>
 8014578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457c:	b672      	cpsid	i
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	b662      	cpsie	i
 801458c:	623b      	str	r3, [r7, #32]
 801458e:	e7fe      	b.n	801458e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014590:	f001 fcf6 	bl	8015f80 <xTaskGetSchedulerState>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d102      	bne.n	80145a0 <xQueueGenericSend+0xa4>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d101      	bne.n	80145a4 <xQueueGenericSend+0xa8>
 80145a0:	2301      	movs	r3, #1
 80145a2:	e000      	b.n	80145a6 <xQueueGenericSend+0xaa>
 80145a4:	2300      	movs	r3, #0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d10b      	bne.n	80145c2 <xQueueGenericSend+0xc6>
 80145aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ae:	b672      	cpsid	i
 80145b0:	f383 8811 	msr	BASEPRI, r3
 80145b4:	f3bf 8f6f 	isb	sy
 80145b8:	f3bf 8f4f 	dsb	sy
 80145bc:	b662      	cpsie	i
 80145be:	61fb      	str	r3, [r7, #28]
 80145c0:	e7fe      	b.n	80145c0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145c2:	f002 fb19 	bl	8016bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80145c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d302      	bcc.n	80145d8 <xQueueGenericSend+0xdc>
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	2b02      	cmp	r3, #2
 80145d6:	d129      	bne.n	801462c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145d8:	683a      	ldr	r2, [r7, #0]
 80145da:	68b9      	ldr	r1, [r7, #8]
 80145dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145de:	f000 fc6e 	bl	8014ebe <prvCopyDataToQueue>
 80145e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d010      	beq.n	801460e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ee:	3324      	adds	r3, #36	; 0x24
 80145f0:	4618      	mov	r0, r3
 80145f2:	f001 faf7 	bl	8015be4 <xTaskRemoveFromEventList>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d013      	beq.n	8014624 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80145fc:	4b3f      	ldr	r3, [pc, #252]	; (80146fc <xQueueGenericSend+0x200>)
 80145fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	f3bf 8f4f 	dsb	sy
 8014608:	f3bf 8f6f 	isb	sy
 801460c:	e00a      	b.n	8014624 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014610:	2b00      	cmp	r3, #0
 8014612:	d007      	beq.n	8014624 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014614:	4b39      	ldr	r3, [pc, #228]	; (80146fc <xQueueGenericSend+0x200>)
 8014616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801461a:	601a      	str	r2, [r3, #0]
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014624:	f002 fb1a 	bl	8016c5c <vPortExitCritical>
				return pdPASS;
 8014628:	2301      	movs	r3, #1
 801462a:	e063      	b.n	80146f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d103      	bne.n	801463a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014632:	f002 fb13 	bl	8016c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014636:	2300      	movs	r3, #0
 8014638:	e05c      	b.n	80146f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801463c:	2b00      	cmp	r3, #0
 801463e:	d106      	bne.n	801464e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014640:	f107 0314 	add.w	r3, r7, #20
 8014644:	4618      	mov	r0, r3
 8014646:	f001 fb31 	bl	8015cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801464a:	2301      	movs	r3, #1
 801464c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801464e:	f002 fb05 	bl	8016c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014652:	f001 f88f 	bl	8015774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014656:	f002 facf 	bl	8016bf8 <vPortEnterCritical>
 801465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014660:	b25b      	sxtb	r3, r3
 8014662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014666:	d103      	bne.n	8014670 <xQueueGenericSend+0x174>
 8014668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466a:	2200      	movs	r2, #0
 801466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014676:	b25b      	sxtb	r3, r3
 8014678:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467c:	d103      	bne.n	8014686 <xQueueGenericSend+0x18a>
 801467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014680:	2200      	movs	r2, #0
 8014682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014686:	f002 fae9 	bl	8016c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801468a:	1d3a      	adds	r2, r7, #4
 801468c:	f107 0314 	add.w	r3, r7, #20
 8014690:	4611      	mov	r1, r2
 8014692:	4618      	mov	r0, r3
 8014694:	f001 fb20 	bl	8015cd8 <xTaskCheckForTimeOut>
 8014698:	4603      	mov	r3, r0
 801469a:	2b00      	cmp	r3, #0
 801469c:	d124      	bne.n	80146e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801469e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146a0:	f000 fd05 	bl	80150ae <prvIsQueueFull>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d018      	beq.n	80146dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80146aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ac:	3310      	adds	r3, #16
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	4611      	mov	r1, r2
 80146b2:	4618      	mov	r0, r3
 80146b4:	f001 fa44 	bl	8015b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80146b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ba:	f000 fc90 	bl	8014fde <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80146be:	f001 f867 	bl	8015790 <xTaskResumeAll>
 80146c2:	4603      	mov	r3, r0
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	f47f af7c 	bne.w	80145c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80146ca:	4b0c      	ldr	r3, [pc, #48]	; (80146fc <xQueueGenericSend+0x200>)
 80146cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146d0:	601a      	str	r2, [r3, #0]
 80146d2:	f3bf 8f4f 	dsb	sy
 80146d6:	f3bf 8f6f 	isb	sy
 80146da:	e772      	b.n	80145c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80146dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146de:	f000 fc7e 	bl	8014fde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146e2:	f001 f855 	bl	8015790 <xTaskResumeAll>
 80146e6:	e76c      	b.n	80145c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80146e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ea:	f000 fc78 	bl	8014fde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80146ee:	f001 f84f 	bl	8015790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80146f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3738      	adds	r7, #56	; 0x38
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	e000ed04 	.word	0xe000ed04

08014700 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b08e      	sub	sp, #56	; 0x38
 8014704:	af00      	add	r7, sp, #0
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	60b9      	str	r1, [r7, #8]
 801470a:	607a      	str	r2, [r7, #4]
 801470c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014714:	2b00      	cmp	r3, #0
 8014716:	d10b      	bne.n	8014730 <xQueueGenericSendFromISR+0x30>
 8014718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801471c:	b672      	cpsid	i
 801471e:	f383 8811 	msr	BASEPRI, r3
 8014722:	f3bf 8f6f 	isb	sy
 8014726:	f3bf 8f4f 	dsb	sy
 801472a:	b662      	cpsie	i
 801472c:	627b      	str	r3, [r7, #36]	; 0x24
 801472e:	e7fe      	b.n	801472e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d103      	bne.n	801473e <xQueueGenericSendFromISR+0x3e>
 8014736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801473a:	2b00      	cmp	r3, #0
 801473c:	d101      	bne.n	8014742 <xQueueGenericSendFromISR+0x42>
 801473e:	2301      	movs	r3, #1
 8014740:	e000      	b.n	8014744 <xQueueGenericSendFromISR+0x44>
 8014742:	2300      	movs	r3, #0
 8014744:	2b00      	cmp	r3, #0
 8014746:	d10b      	bne.n	8014760 <xQueueGenericSendFromISR+0x60>
 8014748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801474c:	b672      	cpsid	i
 801474e:	f383 8811 	msr	BASEPRI, r3
 8014752:	f3bf 8f6f 	isb	sy
 8014756:	f3bf 8f4f 	dsb	sy
 801475a:	b662      	cpsie	i
 801475c:	623b      	str	r3, [r7, #32]
 801475e:	e7fe      	b.n	801475e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	2b02      	cmp	r3, #2
 8014764:	d103      	bne.n	801476e <xQueueGenericSendFromISR+0x6e>
 8014766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801476a:	2b01      	cmp	r3, #1
 801476c:	d101      	bne.n	8014772 <xQueueGenericSendFromISR+0x72>
 801476e:	2301      	movs	r3, #1
 8014770:	e000      	b.n	8014774 <xQueueGenericSendFromISR+0x74>
 8014772:	2300      	movs	r3, #0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d10b      	bne.n	8014790 <xQueueGenericSendFromISR+0x90>
 8014778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477c:	b672      	cpsid	i
 801477e:	f383 8811 	msr	BASEPRI, r3
 8014782:	f3bf 8f6f 	isb	sy
 8014786:	f3bf 8f4f 	dsb	sy
 801478a:	b662      	cpsie	i
 801478c:	61fb      	str	r3, [r7, #28]
 801478e:	e7fe      	b.n	801478e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014790:	f002 fb12 	bl	8016db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014794:	f3ef 8211 	mrs	r2, BASEPRI
 8014798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801479c:	b672      	cpsid	i
 801479e:	f383 8811 	msr	BASEPRI, r3
 80147a2:	f3bf 8f6f 	isb	sy
 80147a6:	f3bf 8f4f 	dsb	sy
 80147aa:	b662      	cpsie	i
 80147ac:	61ba      	str	r2, [r7, #24]
 80147ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80147b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80147b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80147b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80147b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147bc:	429a      	cmp	r2, r3
 80147be:	d302      	bcc.n	80147c6 <xQueueGenericSendFromISR+0xc6>
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	2b02      	cmp	r3, #2
 80147c4:	d12c      	bne.n	8014820 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80147c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80147d0:	683a      	ldr	r2, [r7, #0]
 80147d2:	68b9      	ldr	r1, [r7, #8]
 80147d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147d6:	f000 fb72 	bl	8014ebe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80147da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80147de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147e2:	d112      	bne.n	801480a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80147e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d016      	beq.n	801481a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80147ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ee:	3324      	adds	r3, #36	; 0x24
 80147f0:	4618      	mov	r0, r3
 80147f2:	f001 f9f7 	bl	8015be4 <xTaskRemoveFromEventList>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00e      	beq.n	801481a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d00b      	beq.n	801481a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2201      	movs	r2, #1
 8014806:	601a      	str	r2, [r3, #0]
 8014808:	e007      	b.n	801481a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801480a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801480e:	3301      	adds	r3, #1
 8014810:	b2db      	uxtb	r3, r3
 8014812:	b25a      	sxtb	r2, r3
 8014814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801481a:	2301      	movs	r3, #1
 801481c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801481e:	e001      	b.n	8014824 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014820:	2300      	movs	r3, #0
 8014822:	637b      	str	r3, [r7, #52]	; 0x34
 8014824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014826:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014830:	4618      	mov	r0, r3
 8014832:	3738      	adds	r7, #56	; 0x38
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b08e      	sub	sp, #56	; 0x38
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014848:	2b00      	cmp	r3, #0
 801484a:	d10b      	bne.n	8014864 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014850:	b672      	cpsid	i
 8014852:	f383 8811 	msr	BASEPRI, r3
 8014856:	f3bf 8f6f 	isb	sy
 801485a:	f3bf 8f4f 	dsb	sy
 801485e:	b662      	cpsie	i
 8014860:	623b      	str	r3, [r7, #32]
 8014862:	e7fe      	b.n	8014862 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014868:	2b00      	cmp	r3, #0
 801486a:	d00b      	beq.n	8014884 <xQueueGiveFromISR+0x4c>
 801486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014870:	b672      	cpsid	i
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	b662      	cpsie	i
 8014880:	61fb      	str	r3, [r7, #28]
 8014882:	e7fe      	b.n	8014882 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d103      	bne.n	8014894 <xQueueGiveFromISR+0x5c>
 801488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488e:	689b      	ldr	r3, [r3, #8]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d101      	bne.n	8014898 <xQueueGiveFromISR+0x60>
 8014894:	2301      	movs	r3, #1
 8014896:	e000      	b.n	801489a <xQueueGiveFromISR+0x62>
 8014898:	2300      	movs	r3, #0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d10b      	bne.n	80148b6 <xQueueGiveFromISR+0x7e>
 801489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a2:	b672      	cpsid	i
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	b662      	cpsie	i
 80148b2:	61bb      	str	r3, [r7, #24]
 80148b4:	e7fe      	b.n	80148b4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80148b6:	f002 fa7f 	bl	8016db8 <vPortValidateInterruptPriority>
	__asm volatile
 80148ba:	f3ef 8211 	mrs	r2, BASEPRI
 80148be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148c2:	b672      	cpsid	i
 80148c4:	f383 8811 	msr	BASEPRI, r3
 80148c8:	f3bf 8f6f 	isb	sy
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	b662      	cpsie	i
 80148d2:	617a      	str	r2, [r7, #20]
 80148d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80148d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80148d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80148e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d22b      	bcs.n	8014942 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80148ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80148f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f6:	1c5a      	adds	r2, r3, #1
 80148f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80148fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014904:	d112      	bne.n	801492c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801490a:	2b00      	cmp	r3, #0
 801490c:	d016      	beq.n	801493c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014910:	3324      	adds	r3, #36	; 0x24
 8014912:	4618      	mov	r0, r3
 8014914:	f001 f966 	bl	8015be4 <xTaskRemoveFromEventList>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d00e      	beq.n	801493c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d00b      	beq.n	801493c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	2201      	movs	r2, #1
 8014928:	601a      	str	r2, [r3, #0]
 801492a:	e007      	b.n	801493c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801492c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014930:	3301      	adds	r3, #1
 8014932:	b2db      	uxtb	r3, r3
 8014934:	b25a      	sxtb	r2, r3
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801493c:	2301      	movs	r3, #1
 801493e:	637b      	str	r3, [r7, #52]	; 0x34
 8014940:	e001      	b.n	8014946 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014942:	2300      	movs	r3, #0
 8014944:	637b      	str	r3, [r7, #52]	; 0x34
 8014946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014948:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014952:	4618      	mov	r0, r3
 8014954:	3738      	adds	r7, #56	; 0x38
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}
	...

0801495c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b08c      	sub	sp, #48	; 0x30
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014968:	2300      	movs	r3, #0
 801496a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10b      	bne.n	801498e <xQueueReceive+0x32>
	__asm volatile
 8014976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801497a:	b672      	cpsid	i
 801497c:	f383 8811 	msr	BASEPRI, r3
 8014980:	f3bf 8f6f 	isb	sy
 8014984:	f3bf 8f4f 	dsb	sy
 8014988:	b662      	cpsie	i
 801498a:	623b      	str	r3, [r7, #32]
 801498c:	e7fe      	b.n	801498c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d103      	bne.n	801499c <xQueueReceive+0x40>
 8014994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014998:	2b00      	cmp	r3, #0
 801499a:	d101      	bne.n	80149a0 <xQueueReceive+0x44>
 801499c:	2301      	movs	r3, #1
 801499e:	e000      	b.n	80149a2 <xQueueReceive+0x46>
 80149a0:	2300      	movs	r3, #0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d10b      	bne.n	80149be <xQueueReceive+0x62>
 80149a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149aa:	b672      	cpsid	i
 80149ac:	f383 8811 	msr	BASEPRI, r3
 80149b0:	f3bf 8f6f 	isb	sy
 80149b4:	f3bf 8f4f 	dsb	sy
 80149b8:	b662      	cpsie	i
 80149ba:	61fb      	str	r3, [r7, #28]
 80149bc:	e7fe      	b.n	80149bc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80149be:	f001 fadf 	bl	8015f80 <xTaskGetSchedulerState>
 80149c2:	4603      	mov	r3, r0
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d102      	bne.n	80149ce <xQueueReceive+0x72>
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d101      	bne.n	80149d2 <xQueueReceive+0x76>
 80149ce:	2301      	movs	r3, #1
 80149d0:	e000      	b.n	80149d4 <xQueueReceive+0x78>
 80149d2:	2300      	movs	r3, #0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10b      	bne.n	80149f0 <xQueueReceive+0x94>
 80149d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149dc:	b672      	cpsid	i
 80149de:	f383 8811 	msr	BASEPRI, r3
 80149e2:	f3bf 8f6f 	isb	sy
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	b662      	cpsie	i
 80149ec:	61bb      	str	r3, [r7, #24]
 80149ee:	e7fe      	b.n	80149ee <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80149f0:	f002 f902 	bl	8016bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80149f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80149fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d01f      	beq.n	8014a40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014a00:	68b9      	ldr	r1, [r7, #8]
 8014a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a04:	f000 fac5 	bl	8014f92 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	1e5a      	subs	r2, r3, #1
 8014a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a12:	691b      	ldr	r3, [r3, #16]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00f      	beq.n	8014a38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1a:	3310      	adds	r3, #16
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f001 f8e1 	bl	8015be4 <xTaskRemoveFromEventList>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d007      	beq.n	8014a38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014a28:	4b3c      	ldr	r3, [pc, #240]	; (8014b1c <xQueueReceive+0x1c0>)
 8014a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a2e:	601a      	str	r2, [r3, #0]
 8014a30:	f3bf 8f4f 	dsb	sy
 8014a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014a38:	f002 f910 	bl	8016c5c <vPortExitCritical>
				return pdPASS;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e069      	b.n	8014b14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d103      	bne.n	8014a4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014a46:	f002 f909 	bl	8016c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	e062      	b.n	8014b14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d106      	bne.n	8014a62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014a54:	f107 0310 	add.w	r3, r7, #16
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f001 f927 	bl	8015cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014a5e:	2301      	movs	r3, #1
 8014a60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014a62:	f002 f8fb 	bl	8016c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014a66:	f000 fe85 	bl	8015774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014a6a:	f002 f8c5 	bl	8016bf8 <vPortEnterCritical>
 8014a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a74:	b25b      	sxtb	r3, r3
 8014a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a7a:	d103      	bne.n	8014a84 <xQueueReceive+0x128>
 8014a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a8a:	b25b      	sxtb	r3, r3
 8014a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a90:	d103      	bne.n	8014a9a <xQueueReceive+0x13e>
 8014a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a94:	2200      	movs	r2, #0
 8014a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a9a:	f002 f8df 	bl	8016c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014a9e:	1d3a      	adds	r2, r7, #4
 8014aa0:	f107 0310 	add.w	r3, r7, #16
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f001 f916 	bl	8015cd8 <xTaskCheckForTimeOut>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d123      	bne.n	8014afa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ab4:	f000 fae5 	bl	8015082 <prvIsQueueEmpty>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d017      	beq.n	8014aee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac0:	3324      	adds	r3, #36	; 0x24
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	4611      	mov	r1, r2
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f001 f83a 	bl	8015b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ace:	f000 fa86 	bl	8014fde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014ad2:	f000 fe5d 	bl	8015790 <xTaskResumeAll>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d189      	bne.n	80149f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014adc:	4b0f      	ldr	r3, [pc, #60]	; (8014b1c <xQueueReceive+0x1c0>)
 8014ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ae2:	601a      	str	r2, [r3, #0]
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	f3bf 8f6f 	isb	sy
 8014aec:	e780      	b.n	80149f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014af0:	f000 fa75 	bl	8014fde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014af4:	f000 fe4c 	bl	8015790 <xTaskResumeAll>
 8014af8:	e77a      	b.n	80149f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014afc:	f000 fa6f 	bl	8014fde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014b00:	f000 fe46 	bl	8015790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b06:	f000 fabc 	bl	8015082 <prvIsQueueEmpty>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	f43f af6f 	beq.w	80149f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014b12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3730      	adds	r7, #48	; 0x30
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	e000ed04 	.word	0xe000ed04

08014b20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b08e      	sub	sp, #56	; 0x38
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014b32:	2300      	movs	r3, #0
 8014b34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d10b      	bne.n	8014b54 <xQueueSemaphoreTake+0x34>
 8014b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b40:	b672      	cpsid	i
 8014b42:	f383 8811 	msr	BASEPRI, r3
 8014b46:	f3bf 8f6f 	isb	sy
 8014b4a:	f3bf 8f4f 	dsb	sy
 8014b4e:	b662      	cpsie	i
 8014b50:	623b      	str	r3, [r7, #32]
 8014b52:	e7fe      	b.n	8014b52 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d00b      	beq.n	8014b74 <xQueueSemaphoreTake+0x54>
 8014b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b60:	b672      	cpsid	i
 8014b62:	f383 8811 	msr	BASEPRI, r3
 8014b66:	f3bf 8f6f 	isb	sy
 8014b6a:	f3bf 8f4f 	dsb	sy
 8014b6e:	b662      	cpsie	i
 8014b70:	61fb      	str	r3, [r7, #28]
 8014b72:	e7fe      	b.n	8014b72 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014b74:	f001 fa04 	bl	8015f80 <xTaskGetSchedulerState>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d102      	bne.n	8014b84 <xQueueSemaphoreTake+0x64>
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d101      	bne.n	8014b88 <xQueueSemaphoreTake+0x68>
 8014b84:	2301      	movs	r3, #1
 8014b86:	e000      	b.n	8014b8a <xQueueSemaphoreTake+0x6a>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d10b      	bne.n	8014ba6 <xQueueSemaphoreTake+0x86>
 8014b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b92:	b672      	cpsid	i
 8014b94:	f383 8811 	msr	BASEPRI, r3
 8014b98:	f3bf 8f6f 	isb	sy
 8014b9c:	f3bf 8f4f 	dsb	sy
 8014ba0:	b662      	cpsie	i
 8014ba2:	61bb      	str	r3, [r7, #24]
 8014ba4:	e7fe      	b.n	8014ba4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014ba6:	f002 f827 	bl	8016bf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d024      	beq.n	8014c00 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb8:	1e5a      	subs	r2, r3, #1
 8014bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d104      	bne.n	8014bd0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014bc6:	f001 fb55 	bl	8016274 <pvTaskIncrementMutexHeldCount>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bd2:	691b      	ldr	r3, [r3, #16]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d00f      	beq.n	8014bf8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bda:	3310      	adds	r3, #16
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f001 f801 	bl	8015be4 <xTaskRemoveFromEventList>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d007      	beq.n	8014bf8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014be8:	4b54      	ldr	r3, [pc, #336]	; (8014d3c <xQueueSemaphoreTake+0x21c>)
 8014bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bee:	601a      	str	r2, [r3, #0]
 8014bf0:	f3bf 8f4f 	dsb	sy
 8014bf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014bf8:	f002 f830 	bl	8016c5c <vPortExitCritical>
				return pdPASS;
 8014bfc:	2301      	movs	r3, #1
 8014bfe:	e098      	b.n	8014d32 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d112      	bne.n	8014c2c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d00b      	beq.n	8014c24 <xQueueSemaphoreTake+0x104>
 8014c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c10:	b672      	cpsid	i
 8014c12:	f383 8811 	msr	BASEPRI, r3
 8014c16:	f3bf 8f6f 	isb	sy
 8014c1a:	f3bf 8f4f 	dsb	sy
 8014c1e:	b662      	cpsie	i
 8014c20:	617b      	str	r3, [r7, #20]
 8014c22:	e7fe      	b.n	8014c22 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014c24:	f002 f81a 	bl	8016c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e082      	b.n	8014d32 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d106      	bne.n	8014c40 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c32:	f107 030c 	add.w	r3, r7, #12
 8014c36:	4618      	mov	r0, r3
 8014c38:	f001 f838 	bl	8015cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014c40:	f002 f80c 	bl	8016c5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014c44:	f000 fd96 	bl	8015774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014c48:	f001 ffd6 	bl	8016bf8 <vPortEnterCritical>
 8014c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c52:	b25b      	sxtb	r3, r3
 8014c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c58:	d103      	bne.n	8014c62 <xQueueSemaphoreTake+0x142>
 8014c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c68:	b25b      	sxtb	r3, r3
 8014c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c6e:	d103      	bne.n	8014c78 <xQueueSemaphoreTake+0x158>
 8014c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c72:	2200      	movs	r2, #0
 8014c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014c78:	f001 fff0 	bl	8016c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014c7c:	463a      	mov	r2, r7
 8014c7e:	f107 030c 	add.w	r3, r7, #12
 8014c82:	4611      	mov	r1, r2
 8014c84:	4618      	mov	r0, r3
 8014c86:	f001 f827 	bl	8015cd8 <xTaskCheckForTimeOut>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d132      	bne.n	8014cf6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c92:	f000 f9f6 	bl	8015082 <prvIsQueueEmpty>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d026      	beq.n	8014cea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d109      	bne.n	8014cb8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014ca4:	f001 ffa8 	bl	8016bf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	4618      	mov	r0, r3
 8014cae:	f001 f985 	bl	8015fbc <xTaskPriorityInherit>
 8014cb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014cb4:	f001 ffd2 	bl	8016c5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cba:	3324      	adds	r3, #36	; 0x24
 8014cbc:	683a      	ldr	r2, [r7, #0]
 8014cbe:	4611      	mov	r1, r2
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f000 ff3d 	bl	8015b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cc8:	f000 f989 	bl	8014fde <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014ccc:	f000 fd60 	bl	8015790 <xTaskResumeAll>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f47f af67 	bne.w	8014ba6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014cd8:	4b18      	ldr	r3, [pc, #96]	; (8014d3c <xQueueSemaphoreTake+0x21c>)
 8014cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cde:	601a      	str	r2, [r3, #0]
 8014ce0:	f3bf 8f4f 	dsb	sy
 8014ce4:	f3bf 8f6f 	isb	sy
 8014ce8:	e75d      	b.n	8014ba6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cec:	f000 f977 	bl	8014fde <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014cf0:	f000 fd4e 	bl	8015790 <xTaskResumeAll>
 8014cf4:	e757      	b.n	8014ba6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cf8:	f000 f971 	bl	8014fde <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014cfc:	f000 fd48 	bl	8015790 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d02:	f000 f9be 	bl	8015082 <prvIsQueueEmpty>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	f43f af4c 	beq.w	8014ba6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00d      	beq.n	8014d30 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014d14:	f001 ff70 	bl	8016bf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014d18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d1a:	f000 f8b8 	bl	8014e8e <prvGetDisinheritPriorityAfterTimeout>
 8014d1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d26:	4618      	mov	r0, r3
 8014d28:	f001 fa20 	bl	801616c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014d2c:	f001 ff96 	bl	8016c5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014d30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3738      	adds	r7, #56	; 0x38
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	e000ed04 	.word	0xe000ed04

08014d40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b08e      	sub	sp, #56	; 0x38
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d10b      	bne.n	8014d6e <xQueueReceiveFromISR+0x2e>
 8014d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d5a:	b672      	cpsid	i
 8014d5c:	f383 8811 	msr	BASEPRI, r3
 8014d60:	f3bf 8f6f 	isb	sy
 8014d64:	f3bf 8f4f 	dsb	sy
 8014d68:	b662      	cpsie	i
 8014d6a:	623b      	str	r3, [r7, #32]
 8014d6c:	e7fe      	b.n	8014d6c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d103      	bne.n	8014d7c <xQueueReceiveFromISR+0x3c>
 8014d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d101      	bne.n	8014d80 <xQueueReceiveFromISR+0x40>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	e000      	b.n	8014d82 <xQueueReceiveFromISR+0x42>
 8014d80:	2300      	movs	r3, #0
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10b      	bne.n	8014d9e <xQueueReceiveFromISR+0x5e>
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	b672      	cpsid	i
 8014d8c:	f383 8811 	msr	BASEPRI, r3
 8014d90:	f3bf 8f6f 	isb	sy
 8014d94:	f3bf 8f4f 	dsb	sy
 8014d98:	b662      	cpsie	i
 8014d9a:	61fb      	str	r3, [r7, #28]
 8014d9c:	e7fe      	b.n	8014d9c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d9e:	f002 f80b 	bl	8016db8 <vPortValidateInterruptPriority>
	__asm volatile
 8014da2:	f3ef 8211 	mrs	r2, BASEPRI
 8014da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014daa:	b672      	cpsid	i
 8014dac:	f383 8811 	msr	BASEPRI, r3
 8014db0:	f3bf 8f6f 	isb	sy
 8014db4:	f3bf 8f4f 	dsb	sy
 8014db8:	b662      	cpsie	i
 8014dba:	61ba      	str	r2, [r7, #24]
 8014dbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014dbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d02f      	beq.n	8014e2e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014dd8:	68b9      	ldr	r1, [r7, #8]
 8014dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ddc:	f000 f8d9 	bl	8014f92 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de2:	1e5a      	subs	r2, r3, #1
 8014de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014de8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df0:	d112      	bne.n	8014e18 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df4:	691b      	ldr	r3, [r3, #16]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d016      	beq.n	8014e28 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dfc:	3310      	adds	r3, #16
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f000 fef0 	bl	8015be4 <xTaskRemoveFromEventList>
 8014e04:	4603      	mov	r3, r0
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d00e      	beq.n	8014e28 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d00b      	beq.n	8014e28 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2201      	movs	r2, #1
 8014e14:	601a      	str	r2, [r3, #0]
 8014e16:	e007      	b.n	8014e28 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	b25a      	sxtb	r2, r3
 8014e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8014e2c:	e001      	b.n	8014e32 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	637b      	str	r3, [r7, #52]	; 0x34
 8014e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3738      	adds	r7, #56	; 0x38
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b084      	sub	sp, #16
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d10b      	bne.n	8014e70 <vQueueDelete+0x2a>
	__asm volatile
 8014e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e5c:	b672      	cpsid	i
 8014e5e:	f383 8811 	msr	BASEPRI, r3
 8014e62:	f3bf 8f6f 	isb	sy
 8014e66:	f3bf 8f4f 	dsb	sy
 8014e6a:	b662      	cpsie	i
 8014e6c:	60bb      	str	r3, [r7, #8]
 8014e6e:	e7fe      	b.n	8014e6e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014e70:	68f8      	ldr	r0, [r7, #12]
 8014e72:	f000 f95d 	bl	8015130 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d102      	bne.n	8014e86 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f002 f8a3 	bl	8016fcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014e86:	bf00      	nop
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}

08014e8e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014e8e:	b480      	push	{r7}
 8014e90:	b085      	sub	sp, #20
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d006      	beq.n	8014eac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014ea8:	60fb      	str	r3, [r7, #12]
 8014eaa:	e001      	b.n	8014eb0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014eac:	2300      	movs	r3, #0
 8014eae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
	}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3714      	adds	r7, #20
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr

08014ebe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b086      	sub	sp, #24
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	60f8      	str	r0, [r7, #12]
 8014ec6:	60b9      	str	r1, [r7, #8]
 8014ec8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ed2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10d      	bne.n	8014ef8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d14d      	bne.n	8014f80 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f001 f8cf 	bl	801608c <xTaskPriorityDisinherit>
 8014eee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	609a      	str	r2, [r3, #8]
 8014ef6:	e043      	b.n	8014f80 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d119      	bne.n	8014f32 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	6858      	ldr	r0, [r3, #4]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f06:	461a      	mov	r2, r3
 8014f08:	68b9      	ldr	r1, [r7, #8]
 8014f0a:	f002 ff0b 	bl	8017d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	685a      	ldr	r2, [r3, #4]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f16:	441a      	add	r2, r3
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	685a      	ldr	r2, [r3, #4]
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	689b      	ldr	r3, [r3, #8]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	d32b      	bcc.n	8014f80 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	605a      	str	r2, [r3, #4]
 8014f30:	e026      	b.n	8014f80 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	68d8      	ldr	r0, [r3, #12]
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	68b9      	ldr	r1, [r7, #8]
 8014f3e:	f002 fef1 	bl	8017d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	68da      	ldr	r2, [r3, #12]
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f4a:	425b      	negs	r3, r3
 8014f4c:	441a      	add	r2, r3
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	68da      	ldr	r2, [r3, #12]
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d207      	bcs.n	8014f6e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	689a      	ldr	r2, [r3, #8]
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f66:	425b      	negs	r3, r3
 8014f68:	441a      	add	r2, r3
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d105      	bne.n	8014f80 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d002      	beq.n	8014f80 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	3b01      	subs	r3, #1
 8014f7e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	1c5a      	adds	r2, r3, #1
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014f88:	697b      	ldr	r3, [r7, #20]
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3718      	adds	r7, #24
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014f92:	b580      	push	{r7, lr}
 8014f94:	b082      	sub	sp, #8
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	6078      	str	r0, [r7, #4]
 8014f9a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d018      	beq.n	8014fd6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	68da      	ldr	r2, [r3, #12]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fac:	441a      	add	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	68da      	ldr	r2, [r3, #12]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d303      	bcc.n	8014fc6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	68d9      	ldr	r1, [r3, #12]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fce:	461a      	mov	r2, r3
 8014fd0:	6838      	ldr	r0, [r7, #0]
 8014fd2:	f002 fea7 	bl	8017d24 <memcpy>
	}
}
 8014fd6:	bf00      	nop
 8014fd8:	3708      	adds	r7, #8
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b084      	sub	sp, #16
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014fe6:	f001 fe07 	bl	8016bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ff0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014ff2:	e011      	b.n	8015018 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d012      	beq.n	8015022 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	3324      	adds	r3, #36	; 0x24
 8015000:	4618      	mov	r0, r3
 8015002:	f000 fdef 	bl	8015be4 <xTaskRemoveFromEventList>
 8015006:	4603      	mov	r3, r0
 8015008:	2b00      	cmp	r3, #0
 801500a:	d001      	beq.n	8015010 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801500c:	f000 fec8 	bl	8015da0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015010:	7bfb      	ldrb	r3, [r7, #15]
 8015012:	3b01      	subs	r3, #1
 8015014:	b2db      	uxtb	r3, r3
 8015016:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801501c:	2b00      	cmp	r3, #0
 801501e:	dce9      	bgt.n	8014ff4 <prvUnlockQueue+0x16>
 8015020:	e000      	b.n	8015024 <prvUnlockQueue+0x46>
					break;
 8015022:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	22ff      	movs	r2, #255	; 0xff
 8015028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801502c:	f001 fe16 	bl	8016c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015030:	f001 fde2 	bl	8016bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801503a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801503c:	e011      	b.n	8015062 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	691b      	ldr	r3, [r3, #16]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d012      	beq.n	801506c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	3310      	adds	r3, #16
 801504a:	4618      	mov	r0, r3
 801504c:	f000 fdca 	bl	8015be4 <xTaskRemoveFromEventList>
 8015050:	4603      	mov	r3, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	d001      	beq.n	801505a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015056:	f000 fea3 	bl	8015da0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801505a:	7bbb      	ldrb	r3, [r7, #14]
 801505c:	3b01      	subs	r3, #1
 801505e:	b2db      	uxtb	r3, r3
 8015060:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015066:	2b00      	cmp	r3, #0
 8015068:	dce9      	bgt.n	801503e <prvUnlockQueue+0x60>
 801506a:	e000      	b.n	801506e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801506c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	22ff      	movs	r2, #255	; 0xff
 8015072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015076:	f001 fdf1 	bl	8016c5c <vPortExitCritical>
}
 801507a:	bf00      	nop
 801507c:	3710      	adds	r7, #16
 801507e:	46bd      	mov	sp, r7
 8015080:	bd80      	pop	{r7, pc}

08015082 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015082:	b580      	push	{r7, lr}
 8015084:	b084      	sub	sp, #16
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801508a:	f001 fdb5 	bl	8016bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015092:	2b00      	cmp	r3, #0
 8015094:	d102      	bne.n	801509c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015096:	2301      	movs	r3, #1
 8015098:	60fb      	str	r3, [r7, #12]
 801509a:	e001      	b.n	80150a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801509c:	2300      	movs	r3, #0
 801509e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80150a0:	f001 fddc 	bl	8016c5c <vPortExitCritical>

	return xReturn;
 80150a4:	68fb      	ldr	r3, [r7, #12]
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3710      	adds	r7, #16
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80150ae:	b580      	push	{r7, lr}
 80150b0:	b084      	sub	sp, #16
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80150b6:	f001 fd9f 	bl	8016bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d102      	bne.n	80150cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80150c6:	2301      	movs	r3, #1
 80150c8:	60fb      	str	r3, [r7, #12]
 80150ca:	e001      	b.n	80150d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80150cc:	2300      	movs	r3, #0
 80150ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80150d0:	f001 fdc4 	bl	8016c5c <vPortExitCritical>

	return xReturn;
 80150d4:	68fb      	ldr	r3, [r7, #12]
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
	...

080150e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80150e0:	b480      	push	{r7}
 80150e2:	b085      	sub	sp, #20
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80150ea:	2300      	movs	r3, #0
 80150ec:	60fb      	str	r3, [r7, #12]
 80150ee:	e014      	b.n	801511a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80150f0:	4a0e      	ldr	r2, [pc, #56]	; (801512c <vQueueAddToRegistry+0x4c>)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d10b      	bne.n	8015114 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80150fc:	490b      	ldr	r1, [pc, #44]	; (801512c <vQueueAddToRegistry+0x4c>)
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	683a      	ldr	r2, [r7, #0]
 8015102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015106:	4a09      	ldr	r2, [pc, #36]	; (801512c <vQueueAddToRegistry+0x4c>)
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	00db      	lsls	r3, r3, #3
 801510c:	4413      	add	r3, r2
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015112:	e005      	b.n	8015120 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	3301      	adds	r3, #1
 8015118:	60fb      	str	r3, [r7, #12]
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2b07      	cmp	r3, #7
 801511e:	d9e7      	bls.n	80150f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015120:	bf00      	nop
 8015122:	3714      	adds	r7, #20
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr
 801512c:	20027688 	.word	0x20027688

08015130 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015130:	b480      	push	{r7}
 8015132:	b085      	sub	sp, #20
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015138:	2300      	movs	r3, #0
 801513a:	60fb      	str	r3, [r7, #12]
 801513c:	e016      	b.n	801516c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801513e:	4a10      	ldr	r2, [pc, #64]	; (8015180 <vQueueUnregisterQueue+0x50>)
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	4413      	add	r3, r2
 8015146:	685b      	ldr	r3, [r3, #4]
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	429a      	cmp	r2, r3
 801514c:	d10b      	bne.n	8015166 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801514e:	4a0c      	ldr	r2, [pc, #48]	; (8015180 <vQueueUnregisterQueue+0x50>)
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	2100      	movs	r1, #0
 8015154:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015158:	4a09      	ldr	r2, [pc, #36]	; (8015180 <vQueueUnregisterQueue+0x50>)
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	00db      	lsls	r3, r3, #3
 801515e:	4413      	add	r3, r2
 8015160:	2200      	movs	r2, #0
 8015162:	605a      	str	r2, [r3, #4]
				break;
 8015164:	e005      	b.n	8015172 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	3301      	adds	r3, #1
 801516a:	60fb      	str	r3, [r7, #12]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2b07      	cmp	r3, #7
 8015170:	d9e5      	bls.n	801513e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015172:	bf00      	nop
 8015174:	3714      	adds	r7, #20
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop
 8015180:	20027688 	.word	0x20027688

08015184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015184:	b580      	push	{r7, lr}
 8015186:	b086      	sub	sp, #24
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015194:	f001 fd30 	bl	8016bf8 <vPortEnterCritical>
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801519e:	b25b      	sxtb	r3, r3
 80151a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151a4:	d103      	bne.n	80151ae <vQueueWaitForMessageRestricted+0x2a>
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	2200      	movs	r2, #0
 80151aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80151b4:	b25b      	sxtb	r3, r3
 80151b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ba:	d103      	bne.n	80151c4 <vQueueWaitForMessageRestricted+0x40>
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	2200      	movs	r2, #0
 80151c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80151c4:	f001 fd4a 	bl	8016c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d106      	bne.n	80151de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	3324      	adds	r3, #36	; 0x24
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	68b9      	ldr	r1, [r7, #8]
 80151d8:	4618      	mov	r0, r3
 80151da:	f000 fcd7 	bl	8015b8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80151de:	6978      	ldr	r0, [r7, #20]
 80151e0:	f7ff fefd 	bl	8014fde <prvUnlockQueue>
	}
 80151e4:	bf00      	nop
 80151e6:	3718      	adds	r7, #24
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b08e      	sub	sp, #56	; 0x38
 80151f0:	af04      	add	r7, sp, #16
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80151fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d10b      	bne.n	8015218 <xTaskCreateStatic+0x2c>
 8015200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015204:	b672      	cpsid	i
 8015206:	f383 8811 	msr	BASEPRI, r3
 801520a:	f3bf 8f6f 	isb	sy
 801520e:	f3bf 8f4f 	dsb	sy
 8015212:	b662      	cpsie	i
 8015214:	623b      	str	r3, [r7, #32]
 8015216:	e7fe      	b.n	8015216 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8015218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801521a:	2b00      	cmp	r3, #0
 801521c:	d10b      	bne.n	8015236 <xTaskCreateStatic+0x4a>
 801521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015222:	b672      	cpsid	i
 8015224:	f383 8811 	msr	BASEPRI, r3
 8015228:	f3bf 8f6f 	isb	sy
 801522c:	f3bf 8f4f 	dsb	sy
 8015230:	b662      	cpsie	i
 8015232:	61fb      	str	r3, [r7, #28]
 8015234:	e7fe      	b.n	8015234 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015236:	235c      	movs	r3, #92	; 0x5c
 8015238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	2b5c      	cmp	r3, #92	; 0x5c
 801523e:	d00b      	beq.n	8015258 <xTaskCreateStatic+0x6c>
 8015240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015244:	b672      	cpsid	i
 8015246:	f383 8811 	msr	BASEPRI, r3
 801524a:	f3bf 8f6f 	isb	sy
 801524e:	f3bf 8f4f 	dsb	sy
 8015252:	b662      	cpsie	i
 8015254:	61bb      	str	r3, [r7, #24]
 8015256:	e7fe      	b.n	8015256 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015258:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801525c:	2b00      	cmp	r3, #0
 801525e:	d01e      	beq.n	801529e <xTaskCreateStatic+0xb2>
 8015260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015262:	2b00      	cmp	r3, #0
 8015264:	d01b      	beq.n	801529e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015268:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801526e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015272:	2202      	movs	r2, #2
 8015274:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015278:	2300      	movs	r3, #0
 801527a:	9303      	str	r3, [sp, #12]
 801527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527e:	9302      	str	r3, [sp, #8]
 8015280:	f107 0314 	add.w	r3, r7, #20
 8015284:	9301      	str	r3, [sp, #4]
 8015286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015288:	9300      	str	r3, [sp, #0]
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	68b9      	ldr	r1, [r7, #8]
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f000 f850 	bl	8015336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015298:	f000 f8de 	bl	8015458 <prvAddNewTaskToReadyList>
 801529c:	e001      	b.n	80152a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801529e:	2300      	movs	r3, #0
 80152a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80152a2:	697b      	ldr	r3, [r7, #20]
	}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3728      	adds	r7, #40	; 0x28
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b08c      	sub	sp, #48	; 0x30
 80152b0:	af04      	add	r7, sp, #16
 80152b2:	60f8      	str	r0, [r7, #12]
 80152b4:	60b9      	str	r1, [r7, #8]
 80152b6:	603b      	str	r3, [r7, #0]
 80152b8:	4613      	mov	r3, r2
 80152ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80152bc:	88fb      	ldrh	r3, [r7, #6]
 80152be:	009b      	lsls	r3, r3, #2
 80152c0:	4618      	mov	r0, r3
 80152c2:	f001 fdbb 	bl	8016e3c <pvPortMalloc>
 80152c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d00e      	beq.n	80152ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80152ce:	205c      	movs	r0, #92	; 0x5c
 80152d0:	f001 fdb4 	bl	8016e3c <pvPortMalloc>
 80152d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d003      	beq.n	80152e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80152dc:	69fb      	ldr	r3, [r7, #28]
 80152de:	697a      	ldr	r2, [r7, #20]
 80152e0:	631a      	str	r2, [r3, #48]	; 0x30
 80152e2:	e005      	b.n	80152f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80152e4:	6978      	ldr	r0, [r7, #20]
 80152e6:	f001 fe71 	bl	8016fcc <vPortFree>
 80152ea:	e001      	b.n	80152f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80152ec:	2300      	movs	r3, #0
 80152ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d017      	beq.n	8015326 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80152f6:	69fb      	ldr	r3, [r7, #28]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80152fe:	88fa      	ldrh	r2, [r7, #6]
 8015300:	2300      	movs	r3, #0
 8015302:	9303      	str	r3, [sp, #12]
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	9302      	str	r3, [sp, #8]
 8015308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530a:	9301      	str	r3, [sp, #4]
 801530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f000 f80e 	bl	8015336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801531a:	69f8      	ldr	r0, [r7, #28]
 801531c:	f000 f89c 	bl	8015458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015320:	2301      	movs	r3, #1
 8015322:	61bb      	str	r3, [r7, #24]
 8015324:	e002      	b.n	801532c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015326:	f04f 33ff 	mov.w	r3, #4294967295
 801532a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801532c:	69bb      	ldr	r3, [r7, #24]
	}
 801532e:	4618      	mov	r0, r3
 8015330:	3720      	adds	r7, #32
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}

08015336 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015336:	b580      	push	{r7, lr}
 8015338:	b088      	sub	sp, #32
 801533a:	af00      	add	r7, sp, #0
 801533c:	60f8      	str	r0, [r7, #12]
 801533e:	60b9      	str	r1, [r7, #8]
 8015340:	607a      	str	r2, [r7, #4]
 8015342:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015346:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	009b      	lsls	r3, r3, #2
 801534c:	461a      	mov	r2, r3
 801534e:	21a5      	movs	r1, #165	; 0xa5
 8015350:	f002 fcf3 	bl	8017d3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015358:	6879      	ldr	r1, [r7, #4]
 801535a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801535e:	440b      	add	r3, r1
 8015360:	009b      	lsls	r3, r3, #2
 8015362:	4413      	add	r3, r2
 8015364:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	f023 0307 	bic.w	r3, r3, #7
 801536c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	f003 0307 	and.w	r3, r3, #7
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00b      	beq.n	8015390 <prvInitialiseNewTask+0x5a>
 8015378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537c:	b672      	cpsid	i
 801537e:	f383 8811 	msr	BASEPRI, r3
 8015382:	f3bf 8f6f 	isb	sy
 8015386:	f3bf 8f4f 	dsb	sy
 801538a:	b662      	cpsie	i
 801538c:	617b      	str	r3, [r7, #20]
 801538e:	e7fe      	b.n	801538e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d01f      	beq.n	80153d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015396:	2300      	movs	r3, #0
 8015398:	61fb      	str	r3, [r7, #28]
 801539a:	e012      	b.n	80153c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	4413      	add	r3, r2
 80153a2:	7819      	ldrb	r1, [r3, #0]
 80153a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	4413      	add	r3, r2
 80153aa:	3334      	adds	r3, #52	; 0x34
 80153ac:	460a      	mov	r2, r1
 80153ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80153b0:	68ba      	ldr	r2, [r7, #8]
 80153b2:	69fb      	ldr	r3, [r7, #28]
 80153b4:	4413      	add	r3, r2
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d006      	beq.n	80153ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	3301      	adds	r3, #1
 80153c0:	61fb      	str	r3, [r7, #28]
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	2b0f      	cmp	r3, #15
 80153c6:	d9e9      	bls.n	801539c <prvInitialiseNewTask+0x66>
 80153c8:	e000      	b.n	80153cc <prvInitialiseNewTask+0x96>
			{
				break;
 80153ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	2200      	movs	r2, #0
 80153d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80153d4:	e003      	b.n	80153de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	2200      	movs	r2, #0
 80153da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80153de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e0:	2b37      	cmp	r3, #55	; 0x37
 80153e2:	d901      	bls.n	80153e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80153e4:	2337      	movs	r3, #55	; 0x37
 80153e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80153e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80153ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80153f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f6:	2200      	movs	r2, #0
 80153f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80153fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fc:	3304      	adds	r3, #4
 80153fe:	4618      	mov	r0, r3
 8015400:	f7fe fd76 	bl	8013ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015406:	3318      	adds	r3, #24
 8015408:	4618      	mov	r0, r3
 801540a:	f7fe fd71 	bl	8013ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015426:	2200      	movs	r2, #0
 8015428:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542c:	2200      	movs	r2, #0
 801542e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015432:	683a      	ldr	r2, [r7, #0]
 8015434:	68f9      	ldr	r1, [r7, #12]
 8015436:	69b8      	ldr	r0, [r7, #24]
 8015438:	f001 fad8 	bl	80169ec <pxPortInitialiseStack>
 801543c:	4602      	mov	r2, r0
 801543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015444:	2b00      	cmp	r3, #0
 8015446:	d002      	beq.n	801544e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801544c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801544e:	bf00      	nop
 8015450:	3720      	adds	r7, #32
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
	...

08015458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b082      	sub	sp, #8
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015460:	f001 fbca 	bl	8016bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015464:	4b2d      	ldr	r3, [pc, #180]	; (801551c <prvAddNewTaskToReadyList+0xc4>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3301      	adds	r3, #1
 801546a:	4a2c      	ldr	r2, [pc, #176]	; (801551c <prvAddNewTaskToReadyList+0xc4>)
 801546c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801546e:	4b2c      	ldr	r3, [pc, #176]	; (8015520 <prvAddNewTaskToReadyList+0xc8>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d109      	bne.n	801548a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015476:	4a2a      	ldr	r2, [pc, #168]	; (8015520 <prvAddNewTaskToReadyList+0xc8>)
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801547c:	4b27      	ldr	r3, [pc, #156]	; (801551c <prvAddNewTaskToReadyList+0xc4>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	2b01      	cmp	r3, #1
 8015482:	d110      	bne.n	80154a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015484:	f000 fcb0 	bl	8015de8 <prvInitialiseTaskLists>
 8015488:	e00d      	b.n	80154a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801548a:	4b26      	ldr	r3, [pc, #152]	; (8015524 <prvAddNewTaskToReadyList+0xcc>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d109      	bne.n	80154a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015492:	4b23      	ldr	r3, [pc, #140]	; (8015520 <prvAddNewTaskToReadyList+0xc8>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801549c:	429a      	cmp	r2, r3
 801549e:	d802      	bhi.n	80154a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80154a0:	4a1f      	ldr	r2, [pc, #124]	; (8015520 <prvAddNewTaskToReadyList+0xc8>)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80154a6:	4b20      	ldr	r3, [pc, #128]	; (8015528 <prvAddNewTaskToReadyList+0xd0>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	3301      	adds	r3, #1
 80154ac:	4a1e      	ldr	r2, [pc, #120]	; (8015528 <prvAddNewTaskToReadyList+0xd0>)
 80154ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80154b0:	4b1d      	ldr	r3, [pc, #116]	; (8015528 <prvAddNewTaskToReadyList+0xd0>)
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154bc:	4b1b      	ldr	r3, [pc, #108]	; (801552c <prvAddNewTaskToReadyList+0xd4>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d903      	bls.n	80154cc <prvAddNewTaskToReadyList+0x74>
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c8:	4a18      	ldr	r2, [pc, #96]	; (801552c <prvAddNewTaskToReadyList+0xd4>)
 80154ca:	6013      	str	r3, [r2, #0]
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154d0:	4613      	mov	r3, r2
 80154d2:	009b      	lsls	r3, r3, #2
 80154d4:	4413      	add	r3, r2
 80154d6:	009b      	lsls	r3, r3, #2
 80154d8:	4a15      	ldr	r2, [pc, #84]	; (8015530 <prvAddNewTaskToReadyList+0xd8>)
 80154da:	441a      	add	r2, r3
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	3304      	adds	r3, #4
 80154e0:	4619      	mov	r1, r3
 80154e2:	4610      	mov	r0, r2
 80154e4:	f7fe fd11 	bl	8013f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80154e8:	f001 fbb8 	bl	8016c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80154ec:	4b0d      	ldr	r3, [pc, #52]	; (8015524 <prvAddNewTaskToReadyList+0xcc>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d00e      	beq.n	8015512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80154f4:	4b0a      	ldr	r3, [pc, #40]	; (8015520 <prvAddNewTaskToReadyList+0xc8>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154fe:	429a      	cmp	r2, r3
 8015500:	d207      	bcs.n	8015512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015502:	4b0c      	ldr	r3, [pc, #48]	; (8015534 <prvAddNewTaskToReadyList+0xdc>)
 8015504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015508:	601a      	str	r2, [r3, #0]
 801550a:	f3bf 8f4f 	dsb	sy
 801550e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015512:	bf00      	nop
 8015514:	3708      	adds	r7, #8
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	20000ffc 	.word	0x20000ffc
 8015520:	20000b28 	.word	0x20000b28
 8015524:	20001008 	.word	0x20001008
 8015528:	20001018 	.word	0x20001018
 801552c:	20001004 	.word	0x20001004
 8015530:	20000b2c 	.word	0x20000b2c
 8015534:	e000ed04 	.word	0xe000ed04

08015538 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8015538:	b580      	push	{r7, lr}
 801553a:	b08a      	sub	sp, #40	; 0x28
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
 8015540:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8015542:	2300      	movs	r3, #0
 8015544:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10b      	bne.n	8015564 <vTaskDelayUntil+0x2c>
 801554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015550:	b672      	cpsid	i
 8015552:	f383 8811 	msr	BASEPRI, r3
 8015556:	f3bf 8f6f 	isb	sy
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	b662      	cpsie	i
 8015560:	617b      	str	r3, [r7, #20]
 8015562:	e7fe      	b.n	8015562 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d10b      	bne.n	8015582 <vTaskDelayUntil+0x4a>
 801556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801556e:	b672      	cpsid	i
 8015570:	f383 8811 	msr	BASEPRI, r3
 8015574:	f3bf 8f6f 	isb	sy
 8015578:	f3bf 8f4f 	dsb	sy
 801557c:	b662      	cpsie	i
 801557e:	613b      	str	r3, [r7, #16]
 8015580:	e7fe      	b.n	8015580 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8015582:	4b2a      	ldr	r3, [pc, #168]	; (801562c <vTaskDelayUntil+0xf4>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d00b      	beq.n	80155a2 <vTaskDelayUntil+0x6a>
 801558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801558e:	b672      	cpsid	i
 8015590:	f383 8811 	msr	BASEPRI, r3
 8015594:	f3bf 8f6f 	isb	sy
 8015598:	f3bf 8f4f 	dsb	sy
 801559c:	b662      	cpsie	i
 801559e:	60fb      	str	r3, [r7, #12]
 80155a0:	e7fe      	b.n	80155a0 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80155a2:	f000 f8e7 	bl	8015774 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80155a6:	4b22      	ldr	r3, [pc, #136]	; (8015630 <vTaskDelayUntil+0xf8>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	683a      	ldr	r2, [r7, #0]
 80155b2:	4413      	add	r3, r2
 80155b4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	6a3a      	ldr	r2, [r7, #32]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d20b      	bcs.n	80155d8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	69fa      	ldr	r2, [r7, #28]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d211      	bcs.n	80155ee <vTaskDelayUntil+0xb6>
 80155ca:	69fa      	ldr	r2, [r7, #28]
 80155cc:	6a3b      	ldr	r3, [r7, #32]
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d90d      	bls.n	80155ee <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80155d2:	2301      	movs	r3, #1
 80155d4:	627b      	str	r3, [r7, #36]	; 0x24
 80155d6:	e00a      	b.n	80155ee <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	69fa      	ldr	r2, [r7, #28]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d303      	bcc.n	80155ea <vTaskDelayUntil+0xb2>
 80155e2:	69fa      	ldr	r2, [r7, #28]
 80155e4:	6a3b      	ldr	r3, [r7, #32]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d901      	bls.n	80155ee <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80155ea:	2301      	movs	r3, #1
 80155ec:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	69fa      	ldr	r2, [r7, #28]
 80155f2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d006      	beq.n	8015608 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80155fa:	69fa      	ldr	r2, [r7, #28]
 80155fc:	6a3b      	ldr	r3, [r7, #32]
 80155fe:	1ad3      	subs	r3, r2, r3
 8015600:	2100      	movs	r1, #0
 8015602:	4618      	mov	r0, r3
 8015604:	f000 fe4a 	bl	801629c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8015608:	f000 f8c2 	bl	8015790 <xTaskResumeAll>
 801560c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d107      	bne.n	8015624 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8015614:	4b07      	ldr	r3, [pc, #28]	; (8015634 <vTaskDelayUntil+0xfc>)
 8015616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801561a:	601a      	str	r2, [r3, #0]
 801561c:	f3bf 8f4f 	dsb	sy
 8015620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015624:	bf00      	nop
 8015626:	3728      	adds	r7, #40	; 0x28
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	20001024 	.word	0x20001024
 8015630:	20001000 	.word	0x20001000
 8015634:	e000ed04 	.word	0xe000ed04

08015638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015640:	2300      	movs	r3, #0
 8015642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d018      	beq.n	801567c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801564a:	4b14      	ldr	r3, [pc, #80]	; (801569c <vTaskDelay+0x64>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d00b      	beq.n	801566a <vTaskDelay+0x32>
 8015652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015656:	b672      	cpsid	i
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	b662      	cpsie	i
 8015666:	60bb      	str	r3, [r7, #8]
 8015668:	e7fe      	b.n	8015668 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801566a:	f000 f883 	bl	8015774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801566e:	2100      	movs	r1, #0
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f000 fe13 	bl	801629c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015676:	f000 f88b 	bl	8015790 <xTaskResumeAll>
 801567a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d107      	bne.n	8015692 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015682:	4b07      	ldr	r3, [pc, #28]	; (80156a0 <vTaskDelay+0x68>)
 8015684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015688:	601a      	str	r2, [r3, #0]
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015692:	bf00      	nop
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
 801569a:	bf00      	nop
 801569c:	20001024 	.word	0x20001024
 80156a0:	e000ed04 	.word	0xe000ed04

080156a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b08a      	sub	sp, #40	; 0x28
 80156a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80156aa:	2300      	movs	r3, #0
 80156ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80156ae:	2300      	movs	r3, #0
 80156b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80156b2:	463a      	mov	r2, r7
 80156b4:	1d39      	adds	r1, r7, #4
 80156b6:	f107 0308 	add.w	r3, r7, #8
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7fe fbc4 	bl	8013e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80156c0:	6839      	ldr	r1, [r7, #0]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	9202      	str	r2, [sp, #8]
 80156c8:	9301      	str	r3, [sp, #4]
 80156ca:	2300      	movs	r3, #0
 80156cc:	9300      	str	r3, [sp, #0]
 80156ce:	2300      	movs	r3, #0
 80156d0:	460a      	mov	r2, r1
 80156d2:	4922      	ldr	r1, [pc, #136]	; (801575c <vTaskStartScheduler+0xb8>)
 80156d4:	4822      	ldr	r0, [pc, #136]	; (8015760 <vTaskStartScheduler+0xbc>)
 80156d6:	f7ff fd89 	bl	80151ec <xTaskCreateStatic>
 80156da:	4602      	mov	r2, r0
 80156dc:	4b21      	ldr	r3, [pc, #132]	; (8015764 <vTaskStartScheduler+0xc0>)
 80156de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80156e0:	4b20      	ldr	r3, [pc, #128]	; (8015764 <vTaskStartScheduler+0xc0>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80156e8:	2301      	movs	r3, #1
 80156ea:	617b      	str	r3, [r7, #20]
 80156ec:	e001      	b.n	80156f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80156ee:	2300      	movs	r3, #0
 80156f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d102      	bne.n	80156fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80156f8:	f000 fe24 	bl	8016344 <xTimerCreateTimerTask>
 80156fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	2b01      	cmp	r3, #1
 8015702:	d117      	bne.n	8015734 <vTaskStartScheduler+0x90>
 8015704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015708:	b672      	cpsid	i
 801570a:	f383 8811 	msr	BASEPRI, r3
 801570e:	f3bf 8f6f 	isb	sy
 8015712:	f3bf 8f4f 	dsb	sy
 8015716:	b662      	cpsie	i
 8015718:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801571a:	4b13      	ldr	r3, [pc, #76]	; (8015768 <vTaskStartScheduler+0xc4>)
 801571c:	f04f 32ff 	mov.w	r2, #4294967295
 8015720:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015722:	4b12      	ldr	r3, [pc, #72]	; (801576c <vTaskStartScheduler+0xc8>)
 8015724:	2201      	movs	r2, #1
 8015726:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015728:	4b11      	ldr	r3, [pc, #68]	; (8015770 <vTaskStartScheduler+0xcc>)
 801572a:	2200      	movs	r2, #0
 801572c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801572e:	f001 f9e7 	bl	8016b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015732:	e00f      	b.n	8015754 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801573a:	d10b      	bne.n	8015754 <vTaskStartScheduler+0xb0>
 801573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015740:	b672      	cpsid	i
 8015742:	f383 8811 	msr	BASEPRI, r3
 8015746:	f3bf 8f6f 	isb	sy
 801574a:	f3bf 8f4f 	dsb	sy
 801574e:	b662      	cpsie	i
 8015750:	60fb      	str	r3, [r7, #12]
 8015752:	e7fe      	b.n	8015752 <vTaskStartScheduler+0xae>
}
 8015754:	bf00      	nop
 8015756:	3718      	adds	r7, #24
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	0801ab6c 	.word	0x0801ab6c
 8015760:	08015db9 	.word	0x08015db9
 8015764:	20001020 	.word	0x20001020
 8015768:	2000101c 	.word	0x2000101c
 801576c:	20001008 	.word	0x20001008
 8015770:	20001000 	.word	0x20001000

08015774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015774:	b480      	push	{r7}
 8015776:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015778:	4b04      	ldr	r3, [pc, #16]	; (801578c <vTaskSuspendAll+0x18>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	3301      	adds	r3, #1
 801577e:	4a03      	ldr	r2, [pc, #12]	; (801578c <vTaskSuspendAll+0x18>)
 8015780:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015782:	bf00      	nop
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr
 801578c:	20001024 	.word	0x20001024

08015790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015796:	2300      	movs	r3, #0
 8015798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801579a:	2300      	movs	r3, #0
 801579c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801579e:	4b42      	ldr	r3, [pc, #264]	; (80158a8 <xTaskResumeAll+0x118>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d10b      	bne.n	80157be <xTaskResumeAll+0x2e>
 80157a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157aa:	b672      	cpsid	i
 80157ac:	f383 8811 	msr	BASEPRI, r3
 80157b0:	f3bf 8f6f 	isb	sy
 80157b4:	f3bf 8f4f 	dsb	sy
 80157b8:	b662      	cpsie	i
 80157ba:	603b      	str	r3, [r7, #0]
 80157bc:	e7fe      	b.n	80157bc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80157be:	f001 fa1b 	bl	8016bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80157c2:	4b39      	ldr	r3, [pc, #228]	; (80158a8 <xTaskResumeAll+0x118>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	3b01      	subs	r3, #1
 80157c8:	4a37      	ldr	r2, [pc, #220]	; (80158a8 <xTaskResumeAll+0x118>)
 80157ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157cc:	4b36      	ldr	r3, [pc, #216]	; (80158a8 <xTaskResumeAll+0x118>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d162      	bne.n	801589a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80157d4:	4b35      	ldr	r3, [pc, #212]	; (80158ac <xTaskResumeAll+0x11c>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d05e      	beq.n	801589a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80157dc:	e02f      	b.n	801583e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157de:	4b34      	ldr	r3, [pc, #208]	; (80158b0 <xTaskResumeAll+0x120>)
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	3318      	adds	r3, #24
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7fe fbea 	bl	8013fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	3304      	adds	r3, #4
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7fe fbe5 	bl	8013fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157fe:	4b2d      	ldr	r3, [pc, #180]	; (80158b4 <xTaskResumeAll+0x124>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	429a      	cmp	r2, r3
 8015804:	d903      	bls.n	801580e <xTaskResumeAll+0x7e>
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801580a:	4a2a      	ldr	r2, [pc, #168]	; (80158b4 <xTaskResumeAll+0x124>)
 801580c:	6013      	str	r3, [r2, #0]
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015812:	4613      	mov	r3, r2
 8015814:	009b      	lsls	r3, r3, #2
 8015816:	4413      	add	r3, r2
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	4a27      	ldr	r2, [pc, #156]	; (80158b8 <xTaskResumeAll+0x128>)
 801581c:	441a      	add	r2, r3
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	3304      	adds	r3, #4
 8015822:	4619      	mov	r1, r3
 8015824:	4610      	mov	r0, r2
 8015826:	f7fe fb70 	bl	8013f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801582e:	4b23      	ldr	r3, [pc, #140]	; (80158bc <xTaskResumeAll+0x12c>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015834:	429a      	cmp	r2, r3
 8015836:	d302      	bcc.n	801583e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015838:	4b21      	ldr	r3, [pc, #132]	; (80158c0 <xTaskResumeAll+0x130>)
 801583a:	2201      	movs	r2, #1
 801583c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801583e:	4b1c      	ldr	r3, [pc, #112]	; (80158b0 <xTaskResumeAll+0x120>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1cb      	bne.n	80157de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d001      	beq.n	8015850 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801584c:	f000 fb68 	bl	8015f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015850:	4b1c      	ldr	r3, [pc, #112]	; (80158c4 <xTaskResumeAll+0x134>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d010      	beq.n	801587e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801585c:	f000 f858 	bl	8015910 <xTaskIncrementTick>
 8015860:	4603      	mov	r3, r0
 8015862:	2b00      	cmp	r3, #0
 8015864:	d002      	beq.n	801586c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015866:	4b16      	ldr	r3, [pc, #88]	; (80158c0 <xTaskResumeAll+0x130>)
 8015868:	2201      	movs	r2, #1
 801586a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	3b01      	subs	r3, #1
 8015870:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d1f1      	bne.n	801585c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015878:	4b12      	ldr	r3, [pc, #72]	; (80158c4 <xTaskResumeAll+0x134>)
 801587a:	2200      	movs	r2, #0
 801587c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801587e:	4b10      	ldr	r3, [pc, #64]	; (80158c0 <xTaskResumeAll+0x130>)
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d009      	beq.n	801589a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015886:	2301      	movs	r3, #1
 8015888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801588a:	4b0f      	ldr	r3, [pc, #60]	; (80158c8 <xTaskResumeAll+0x138>)
 801588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015890:	601a      	str	r2, [r3, #0]
 8015892:	f3bf 8f4f 	dsb	sy
 8015896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801589a:	f001 f9df 	bl	8016c5c <vPortExitCritical>

	return xAlreadyYielded;
 801589e:	68bb      	ldr	r3, [r7, #8]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3710      	adds	r7, #16
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	20001024 	.word	0x20001024
 80158ac:	20000ffc 	.word	0x20000ffc
 80158b0:	20000fbc 	.word	0x20000fbc
 80158b4:	20001004 	.word	0x20001004
 80158b8:	20000b2c 	.word	0x20000b2c
 80158bc:	20000b28 	.word	0x20000b28
 80158c0:	20001010 	.word	0x20001010
 80158c4:	2000100c 	.word	0x2000100c
 80158c8:	e000ed04 	.word	0xe000ed04

080158cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80158d2:	4b05      	ldr	r3, [pc, #20]	; (80158e8 <xTaskGetTickCount+0x1c>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80158d8:	687b      	ldr	r3, [r7, #4]
}
 80158da:	4618      	mov	r0, r3
 80158dc:	370c      	adds	r7, #12
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr
 80158e6:	bf00      	nop
 80158e8:	20001000 	.word	0x20001000

080158ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80158f2:	f001 fa61 	bl	8016db8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80158f6:	2300      	movs	r3, #0
 80158f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80158fa:	4b04      	ldr	r3, [pc, #16]	; (801590c <xTaskGetTickCountFromISR+0x20>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015900:	683b      	ldr	r3, [r7, #0]
}
 8015902:	4618      	mov	r0, r3
 8015904:	3708      	adds	r7, #8
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop
 801590c:	20001000 	.word	0x20001000

08015910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015916:	2300      	movs	r3, #0
 8015918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801591a:	4b4f      	ldr	r3, [pc, #316]	; (8015a58 <xTaskIncrementTick+0x148>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	f040 808a 	bne.w	8015a38 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015924:	4b4d      	ldr	r3, [pc, #308]	; (8015a5c <xTaskIncrementTick+0x14c>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	3301      	adds	r3, #1
 801592a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801592c:	4a4b      	ldr	r2, [pc, #300]	; (8015a5c <xTaskIncrementTick+0x14c>)
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d121      	bne.n	801597c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015938:	4b49      	ldr	r3, [pc, #292]	; (8015a60 <xTaskIncrementTick+0x150>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d00b      	beq.n	801595a <xTaskIncrementTick+0x4a>
 8015942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015946:	b672      	cpsid	i
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	b662      	cpsie	i
 8015956:	603b      	str	r3, [r7, #0]
 8015958:	e7fe      	b.n	8015958 <xTaskIncrementTick+0x48>
 801595a:	4b41      	ldr	r3, [pc, #260]	; (8015a60 <xTaskIncrementTick+0x150>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	60fb      	str	r3, [r7, #12]
 8015960:	4b40      	ldr	r3, [pc, #256]	; (8015a64 <xTaskIncrementTick+0x154>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	4a3e      	ldr	r2, [pc, #248]	; (8015a60 <xTaskIncrementTick+0x150>)
 8015966:	6013      	str	r3, [r2, #0]
 8015968:	4a3e      	ldr	r2, [pc, #248]	; (8015a64 <xTaskIncrementTick+0x154>)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6013      	str	r3, [r2, #0]
 801596e:	4b3e      	ldr	r3, [pc, #248]	; (8015a68 <xTaskIncrementTick+0x158>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	3301      	adds	r3, #1
 8015974:	4a3c      	ldr	r2, [pc, #240]	; (8015a68 <xTaskIncrementTick+0x158>)
 8015976:	6013      	str	r3, [r2, #0]
 8015978:	f000 fad2 	bl	8015f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801597c:	4b3b      	ldr	r3, [pc, #236]	; (8015a6c <xTaskIncrementTick+0x15c>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	693a      	ldr	r2, [r7, #16]
 8015982:	429a      	cmp	r2, r3
 8015984:	d349      	bcc.n	8015a1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015986:	4b36      	ldr	r3, [pc, #216]	; (8015a60 <xTaskIncrementTick+0x150>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d104      	bne.n	801599a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015990:	4b36      	ldr	r3, [pc, #216]	; (8015a6c <xTaskIncrementTick+0x15c>)
 8015992:	f04f 32ff 	mov.w	r2, #4294967295
 8015996:	601a      	str	r2, [r3, #0]
					break;
 8015998:	e03f      	b.n	8015a1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801599a:	4b31      	ldr	r3, [pc, #196]	; (8015a60 <xTaskIncrementTick+0x150>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	68db      	ldr	r3, [r3, #12]
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80159aa:	693a      	ldr	r2, [r7, #16]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d203      	bcs.n	80159ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80159b2:	4a2e      	ldr	r2, [pc, #184]	; (8015a6c <xTaskIncrementTick+0x15c>)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80159b8:	e02f      	b.n	8015a1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	3304      	adds	r3, #4
 80159be:	4618      	mov	r0, r3
 80159c0:	f7fe fb00 	bl	8013fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d004      	beq.n	80159d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	3318      	adds	r3, #24
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7fe faf7 	bl	8013fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159da:	4b25      	ldr	r3, [pc, #148]	; (8015a70 <xTaskIncrementTick+0x160>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	429a      	cmp	r2, r3
 80159e0:	d903      	bls.n	80159ea <xTaskIncrementTick+0xda>
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159e6:	4a22      	ldr	r2, [pc, #136]	; (8015a70 <xTaskIncrementTick+0x160>)
 80159e8:	6013      	str	r3, [r2, #0]
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159ee:	4613      	mov	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4413      	add	r3, r2
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	4a1f      	ldr	r2, [pc, #124]	; (8015a74 <xTaskIncrementTick+0x164>)
 80159f8:	441a      	add	r2, r3
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	3304      	adds	r3, #4
 80159fe:	4619      	mov	r1, r3
 8015a00:	4610      	mov	r0, r2
 8015a02:	f7fe fa82 	bl	8013f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a0a:	4b1b      	ldr	r3, [pc, #108]	; (8015a78 <xTaskIncrementTick+0x168>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d3b8      	bcc.n	8015986 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015a14:	2301      	movs	r3, #1
 8015a16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a18:	e7b5      	b.n	8015986 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015a1a:	4b17      	ldr	r3, [pc, #92]	; (8015a78 <xTaskIncrementTick+0x168>)
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a20:	4914      	ldr	r1, [pc, #80]	; (8015a74 <xTaskIncrementTick+0x164>)
 8015a22:	4613      	mov	r3, r2
 8015a24:	009b      	lsls	r3, r3, #2
 8015a26:	4413      	add	r3, r2
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	440b      	add	r3, r1
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	2b01      	cmp	r3, #1
 8015a30:	d907      	bls.n	8015a42 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8015a32:	2301      	movs	r3, #1
 8015a34:	617b      	str	r3, [r7, #20]
 8015a36:	e004      	b.n	8015a42 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015a38:	4b10      	ldr	r3, [pc, #64]	; (8015a7c <xTaskIncrementTick+0x16c>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	3301      	adds	r3, #1
 8015a3e:	4a0f      	ldr	r2, [pc, #60]	; (8015a7c <xTaskIncrementTick+0x16c>)
 8015a40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015a42:	4b0f      	ldr	r3, [pc, #60]	; (8015a80 <xTaskIncrementTick+0x170>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d001      	beq.n	8015a4e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015a4e:	697b      	ldr	r3, [r7, #20]
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3718      	adds	r7, #24
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	20001024 	.word	0x20001024
 8015a5c:	20001000 	.word	0x20001000
 8015a60:	20000fb4 	.word	0x20000fb4
 8015a64:	20000fb8 	.word	0x20000fb8
 8015a68:	20001014 	.word	0x20001014
 8015a6c:	2000101c 	.word	0x2000101c
 8015a70:	20001004 	.word	0x20001004
 8015a74:	20000b2c 	.word	0x20000b2c
 8015a78:	20000b28 	.word	0x20000b28
 8015a7c:	2000100c 	.word	0x2000100c
 8015a80:	20001010 	.word	0x20001010

08015a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015a84:	b480      	push	{r7}
 8015a86:	b085      	sub	sp, #20
 8015a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015a8a:	4b28      	ldr	r3, [pc, #160]	; (8015b2c <vTaskSwitchContext+0xa8>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d003      	beq.n	8015a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015a92:	4b27      	ldr	r3, [pc, #156]	; (8015b30 <vTaskSwitchContext+0xac>)
 8015a94:	2201      	movs	r2, #1
 8015a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015a98:	e042      	b.n	8015b20 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8015a9a:	4b25      	ldr	r3, [pc, #148]	; (8015b30 <vTaskSwitchContext+0xac>)
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015aa0:	4b24      	ldr	r3, [pc, #144]	; (8015b34 <vTaskSwitchContext+0xb0>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	60fb      	str	r3, [r7, #12]
 8015aa6:	e011      	b.n	8015acc <vTaskSwitchContext+0x48>
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d10b      	bne.n	8015ac6 <vTaskSwitchContext+0x42>
 8015aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab2:	b672      	cpsid	i
 8015ab4:	f383 8811 	msr	BASEPRI, r3
 8015ab8:	f3bf 8f6f 	isb	sy
 8015abc:	f3bf 8f4f 	dsb	sy
 8015ac0:	b662      	cpsie	i
 8015ac2:	607b      	str	r3, [r7, #4]
 8015ac4:	e7fe      	b.n	8015ac4 <vTaskSwitchContext+0x40>
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	3b01      	subs	r3, #1
 8015aca:	60fb      	str	r3, [r7, #12]
 8015acc:	491a      	ldr	r1, [pc, #104]	; (8015b38 <vTaskSwitchContext+0xb4>)
 8015ace:	68fa      	ldr	r2, [r7, #12]
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	4413      	add	r3, r2
 8015ad6:	009b      	lsls	r3, r3, #2
 8015ad8:	440b      	add	r3, r1
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d0e3      	beq.n	8015aa8 <vTaskSwitchContext+0x24>
 8015ae0:	68fa      	ldr	r2, [r7, #12]
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	4413      	add	r3, r2
 8015ae8:	009b      	lsls	r3, r3, #2
 8015aea:	4a13      	ldr	r2, [pc, #76]	; (8015b38 <vTaskSwitchContext+0xb4>)
 8015aec:	4413      	add	r3, r2
 8015aee:	60bb      	str	r3, [r7, #8]
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	685a      	ldr	r2, [r3, #4]
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	605a      	str	r2, [r3, #4]
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	685a      	ldr	r2, [r3, #4]
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	3308      	adds	r3, #8
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d104      	bne.n	8015b10 <vTaskSwitchContext+0x8c>
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	685a      	ldr	r2, [r3, #4]
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	605a      	str	r2, [r3, #4]
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	4a09      	ldr	r2, [pc, #36]	; (8015b3c <vTaskSwitchContext+0xb8>)
 8015b18:	6013      	str	r3, [r2, #0]
 8015b1a:	4a06      	ldr	r2, [pc, #24]	; (8015b34 <vTaskSwitchContext+0xb0>)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	6013      	str	r3, [r2, #0]
}
 8015b20:	bf00      	nop
 8015b22:	3714      	adds	r7, #20
 8015b24:	46bd      	mov	sp, r7
 8015b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2a:	4770      	bx	lr
 8015b2c:	20001024 	.word	0x20001024
 8015b30:	20001010 	.word	0x20001010
 8015b34:	20001004 	.word	0x20001004
 8015b38:	20000b2c 	.word	0x20000b2c
 8015b3c:	20000b28 	.word	0x20000b28

08015b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d10b      	bne.n	8015b68 <vTaskPlaceOnEventList+0x28>
 8015b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b54:	b672      	cpsid	i
 8015b56:	f383 8811 	msr	BASEPRI, r3
 8015b5a:	f3bf 8f6f 	isb	sy
 8015b5e:	f3bf 8f4f 	dsb	sy
 8015b62:	b662      	cpsie	i
 8015b64:	60fb      	str	r3, [r7, #12]
 8015b66:	e7fe      	b.n	8015b66 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015b68:	4b07      	ldr	r3, [pc, #28]	; (8015b88 <vTaskPlaceOnEventList+0x48>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	3318      	adds	r3, #24
 8015b6e:	4619      	mov	r1, r3
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f7fe f9ee 	bl	8013f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015b76:	2101      	movs	r1, #1
 8015b78:	6838      	ldr	r0, [r7, #0]
 8015b7a:	f000 fb8f 	bl	801629c <prvAddCurrentTaskToDelayedList>
}
 8015b7e:	bf00      	nop
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	20000b28 	.word	0x20000b28

08015b8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b086      	sub	sp, #24
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	60b9      	str	r1, [r7, #8]
 8015b96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d10b      	bne.n	8015bb6 <vTaskPlaceOnEventListRestricted+0x2a>
 8015b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba2:	b672      	cpsid	i
 8015ba4:	f383 8811 	msr	BASEPRI, r3
 8015ba8:	f3bf 8f6f 	isb	sy
 8015bac:	f3bf 8f4f 	dsb	sy
 8015bb0:	b662      	cpsie	i
 8015bb2:	617b      	str	r3, [r7, #20]
 8015bb4:	e7fe      	b.n	8015bb4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015bb6:	4b0a      	ldr	r3, [pc, #40]	; (8015be0 <vTaskPlaceOnEventListRestricted+0x54>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	3318      	adds	r3, #24
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	f7fe f9a3 	bl	8013f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d002      	beq.n	8015bd0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015bca:	f04f 33ff 	mov.w	r3, #4294967295
 8015bce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015bd0:	6879      	ldr	r1, [r7, #4]
 8015bd2:	68b8      	ldr	r0, [r7, #8]
 8015bd4:	f000 fb62 	bl	801629c <prvAddCurrentTaskToDelayedList>
	}
 8015bd8:	bf00      	nop
 8015bda:	3718      	adds	r7, #24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	20000b28 	.word	0x20000b28

08015be4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b086      	sub	sp, #24
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	68db      	ldr	r3, [r3, #12]
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d10b      	bne.n	8015c12 <xTaskRemoveFromEventList+0x2e>
 8015bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bfe:	b672      	cpsid	i
 8015c00:	f383 8811 	msr	BASEPRI, r3
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	b662      	cpsie	i
 8015c0e:	60fb      	str	r3, [r7, #12]
 8015c10:	e7fe      	b.n	8015c10 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	3318      	adds	r3, #24
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe f9d4 	bl	8013fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c1c:	4b1d      	ldr	r3, [pc, #116]	; (8015c94 <xTaskRemoveFromEventList+0xb0>)
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d11d      	bne.n	8015c60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c24:	693b      	ldr	r3, [r7, #16]
 8015c26:	3304      	adds	r3, #4
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7fe f9cb 	bl	8013fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c32:	4b19      	ldr	r3, [pc, #100]	; (8015c98 <xTaskRemoveFromEventList+0xb4>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d903      	bls.n	8015c42 <xTaskRemoveFromEventList+0x5e>
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3e:	4a16      	ldr	r2, [pc, #88]	; (8015c98 <xTaskRemoveFromEventList+0xb4>)
 8015c40:	6013      	str	r3, [r2, #0]
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c46:	4613      	mov	r3, r2
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	4413      	add	r3, r2
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	4a13      	ldr	r2, [pc, #76]	; (8015c9c <xTaskRemoveFromEventList+0xb8>)
 8015c50:	441a      	add	r2, r3
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	3304      	adds	r3, #4
 8015c56:	4619      	mov	r1, r3
 8015c58:	4610      	mov	r0, r2
 8015c5a:	f7fe f956 	bl	8013f0a <vListInsertEnd>
 8015c5e:	e005      	b.n	8015c6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	3318      	adds	r3, #24
 8015c64:	4619      	mov	r1, r3
 8015c66:	480e      	ldr	r0, [pc, #56]	; (8015ca0 <xTaskRemoveFromEventList+0xbc>)
 8015c68:	f7fe f94f 	bl	8013f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c70:	4b0c      	ldr	r3, [pc, #48]	; (8015ca4 <xTaskRemoveFromEventList+0xc0>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d905      	bls.n	8015c86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015c7e:	4b0a      	ldr	r3, [pc, #40]	; (8015ca8 <xTaskRemoveFromEventList+0xc4>)
 8015c80:	2201      	movs	r2, #1
 8015c82:	601a      	str	r2, [r3, #0]
 8015c84:	e001      	b.n	8015c8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015c86:	2300      	movs	r3, #0
 8015c88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015c8a:	697b      	ldr	r3, [r7, #20]
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3718      	adds	r7, #24
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	20001024 	.word	0x20001024
 8015c98:	20001004 	.word	0x20001004
 8015c9c:	20000b2c 	.word	0x20000b2c
 8015ca0:	20000fbc 	.word	0x20000fbc
 8015ca4:	20000b28 	.word	0x20000b28
 8015ca8:	20001010 	.word	0x20001010

08015cac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015cb4:	4b06      	ldr	r3, [pc, #24]	; (8015cd0 <vTaskInternalSetTimeOutState+0x24>)
 8015cb6:	681a      	ldr	r2, [r3, #0]
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015cbc:	4b05      	ldr	r3, [pc, #20]	; (8015cd4 <vTaskInternalSetTimeOutState+0x28>)
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	605a      	str	r2, [r3, #4]
}
 8015cc4:	bf00      	nop
 8015cc6:	370c      	adds	r7, #12
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	20001014 	.word	0x20001014
 8015cd4:	20001000 	.word	0x20001000

08015cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b088      	sub	sp, #32
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d10b      	bne.n	8015d00 <xTaskCheckForTimeOut+0x28>
 8015ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cec:	b672      	cpsid	i
 8015cee:	f383 8811 	msr	BASEPRI, r3
 8015cf2:	f3bf 8f6f 	isb	sy
 8015cf6:	f3bf 8f4f 	dsb	sy
 8015cfa:	b662      	cpsie	i
 8015cfc:	613b      	str	r3, [r7, #16]
 8015cfe:	e7fe      	b.n	8015cfe <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d10b      	bne.n	8015d1e <xTaskCheckForTimeOut+0x46>
 8015d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d0a:	b672      	cpsid	i
 8015d0c:	f383 8811 	msr	BASEPRI, r3
 8015d10:	f3bf 8f6f 	isb	sy
 8015d14:	f3bf 8f4f 	dsb	sy
 8015d18:	b662      	cpsie	i
 8015d1a:	60fb      	str	r3, [r7, #12]
 8015d1c:	e7fe      	b.n	8015d1c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015d1e:	f000 ff6b 	bl	8016bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d22:	4b1d      	ldr	r3, [pc, #116]	; (8015d98 <xTaskCheckForTimeOut+0xc0>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	69ba      	ldr	r2, [r7, #24]
 8015d2e:	1ad3      	subs	r3, r2, r3
 8015d30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d3a:	d102      	bne.n	8015d42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	61fb      	str	r3, [r7, #28]
 8015d40:	e023      	b.n	8015d8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681a      	ldr	r2, [r3, #0]
 8015d46:	4b15      	ldr	r3, [pc, #84]	; (8015d9c <xTaskCheckForTimeOut+0xc4>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d007      	beq.n	8015d5e <xTaskCheckForTimeOut+0x86>
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	69ba      	ldr	r2, [r7, #24]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d302      	bcc.n	8015d5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015d58:	2301      	movs	r3, #1
 8015d5a:	61fb      	str	r3, [r7, #28]
 8015d5c:	e015      	b.n	8015d8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	697a      	ldr	r2, [r7, #20]
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d20b      	bcs.n	8015d80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	681a      	ldr	r2, [r3, #0]
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	1ad2      	subs	r2, r2, r3
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f7ff ff99 	bl	8015cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	61fb      	str	r3, [r7, #28]
 8015d7e:	e004      	b.n	8015d8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	2200      	movs	r2, #0
 8015d84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015d86:	2301      	movs	r3, #1
 8015d88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015d8a:	f000 ff67 	bl	8016c5c <vPortExitCritical>

	return xReturn;
 8015d8e:	69fb      	ldr	r3, [r7, #28]
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3720      	adds	r7, #32
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	20001000 	.word	0x20001000
 8015d9c:	20001014 	.word	0x20001014

08015da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015da0:	b480      	push	{r7}
 8015da2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015da4:	4b03      	ldr	r3, [pc, #12]	; (8015db4 <vTaskMissedYield+0x14>)
 8015da6:	2201      	movs	r2, #1
 8015da8:	601a      	str	r2, [r3, #0]
}
 8015daa:	bf00      	nop
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr
 8015db4:	20001010 	.word	0x20001010

08015db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015dc0:	f000 f852 	bl	8015e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015dc4:	4b06      	ldr	r3, [pc, #24]	; (8015de0 <prvIdleTask+0x28>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d9f9      	bls.n	8015dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015dcc:	4b05      	ldr	r3, [pc, #20]	; (8015de4 <prvIdleTask+0x2c>)
 8015dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dd2:	601a      	str	r2, [r3, #0]
 8015dd4:	f3bf 8f4f 	dsb	sy
 8015dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015ddc:	e7f0      	b.n	8015dc0 <prvIdleTask+0x8>
 8015dde:	bf00      	nop
 8015de0:	20000b2c 	.word	0x20000b2c
 8015de4:	e000ed04 	.word	0xe000ed04

08015de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015dee:	2300      	movs	r3, #0
 8015df0:	607b      	str	r3, [r7, #4]
 8015df2:	e00c      	b.n	8015e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	4613      	mov	r3, r2
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	4413      	add	r3, r2
 8015dfc:	009b      	lsls	r3, r3, #2
 8015dfe:	4a12      	ldr	r2, [pc, #72]	; (8015e48 <prvInitialiseTaskLists+0x60>)
 8015e00:	4413      	add	r3, r2
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7fe f854 	bl	8013eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	607b      	str	r3, [r7, #4]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2b37      	cmp	r3, #55	; 0x37
 8015e12:	d9ef      	bls.n	8015df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e14:	480d      	ldr	r0, [pc, #52]	; (8015e4c <prvInitialiseTaskLists+0x64>)
 8015e16:	f7fe f84b 	bl	8013eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e1a:	480d      	ldr	r0, [pc, #52]	; (8015e50 <prvInitialiseTaskLists+0x68>)
 8015e1c:	f7fe f848 	bl	8013eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e20:	480c      	ldr	r0, [pc, #48]	; (8015e54 <prvInitialiseTaskLists+0x6c>)
 8015e22:	f7fe f845 	bl	8013eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e26:	480c      	ldr	r0, [pc, #48]	; (8015e58 <prvInitialiseTaskLists+0x70>)
 8015e28:	f7fe f842 	bl	8013eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e2c:	480b      	ldr	r0, [pc, #44]	; (8015e5c <prvInitialiseTaskLists+0x74>)
 8015e2e:	f7fe f83f 	bl	8013eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e32:	4b0b      	ldr	r3, [pc, #44]	; (8015e60 <prvInitialiseTaskLists+0x78>)
 8015e34:	4a05      	ldr	r2, [pc, #20]	; (8015e4c <prvInitialiseTaskLists+0x64>)
 8015e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e38:	4b0a      	ldr	r3, [pc, #40]	; (8015e64 <prvInitialiseTaskLists+0x7c>)
 8015e3a:	4a05      	ldr	r2, [pc, #20]	; (8015e50 <prvInitialiseTaskLists+0x68>)
 8015e3c:	601a      	str	r2, [r3, #0]
}
 8015e3e:	bf00      	nop
 8015e40:	3708      	adds	r7, #8
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}
 8015e46:	bf00      	nop
 8015e48:	20000b2c 	.word	0x20000b2c
 8015e4c:	20000f8c 	.word	0x20000f8c
 8015e50:	20000fa0 	.word	0x20000fa0
 8015e54:	20000fbc 	.word	0x20000fbc
 8015e58:	20000fd0 	.word	0x20000fd0
 8015e5c:	20000fe8 	.word	0x20000fe8
 8015e60:	20000fb4 	.word	0x20000fb4
 8015e64:	20000fb8 	.word	0x20000fb8

08015e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015e6e:	e019      	b.n	8015ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015e70:	f000 fec2 	bl	8016bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e74:	4b0f      	ldr	r3, [pc, #60]	; (8015eb4 <prvCheckTasksWaitingTermination+0x4c>)
 8015e76:	68db      	ldr	r3, [r3, #12]
 8015e78:	68db      	ldr	r3, [r3, #12]
 8015e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	3304      	adds	r3, #4
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7fe f89f 	bl	8013fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015e86:	4b0c      	ldr	r3, [pc, #48]	; (8015eb8 <prvCheckTasksWaitingTermination+0x50>)
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	3b01      	subs	r3, #1
 8015e8c:	4a0a      	ldr	r2, [pc, #40]	; (8015eb8 <prvCheckTasksWaitingTermination+0x50>)
 8015e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015e90:	4b0a      	ldr	r3, [pc, #40]	; (8015ebc <prvCheckTasksWaitingTermination+0x54>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	3b01      	subs	r3, #1
 8015e96:	4a09      	ldr	r2, [pc, #36]	; (8015ebc <prvCheckTasksWaitingTermination+0x54>)
 8015e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015e9a:	f000 fedf 	bl	8016c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f000 f80e 	bl	8015ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ea4:	4b05      	ldr	r3, [pc, #20]	; (8015ebc <prvCheckTasksWaitingTermination+0x54>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d1e1      	bne.n	8015e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015eac:	bf00      	nop
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	20000fd0 	.word	0x20000fd0
 8015eb8:	20000ffc 	.word	0x20000ffc
 8015ebc:	20000fe4 	.word	0x20000fe4

08015ec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d108      	bne.n	8015ee4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f001 f878 	bl	8016fcc <vPortFree>
				vPortFree( pxTCB );
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f001 f875 	bl	8016fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015ee2:	e019      	b.n	8015f18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d103      	bne.n	8015ef6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f001 f86c 	bl	8016fcc <vPortFree>
	}
 8015ef4:	e010      	b.n	8015f18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015efc:	2b02      	cmp	r3, #2
 8015efe:	d00b      	beq.n	8015f18 <prvDeleteTCB+0x58>
 8015f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f04:	b672      	cpsid	i
 8015f06:	f383 8811 	msr	BASEPRI, r3
 8015f0a:	f3bf 8f6f 	isb	sy
 8015f0e:	f3bf 8f4f 	dsb	sy
 8015f12:	b662      	cpsie	i
 8015f14:	60fb      	str	r3, [r7, #12]
 8015f16:	e7fe      	b.n	8015f16 <prvDeleteTCB+0x56>
	}
 8015f18:	bf00      	nop
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}

08015f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015f20:	b480      	push	{r7}
 8015f22:	b083      	sub	sp, #12
 8015f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f26:	4b0c      	ldr	r3, [pc, #48]	; (8015f58 <prvResetNextTaskUnblockTime+0x38>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d104      	bne.n	8015f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f30:	4b0a      	ldr	r3, [pc, #40]	; (8015f5c <prvResetNextTaskUnblockTime+0x3c>)
 8015f32:	f04f 32ff 	mov.w	r2, #4294967295
 8015f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015f38:	e008      	b.n	8015f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f3a:	4b07      	ldr	r3, [pc, #28]	; (8015f58 <prvResetNextTaskUnblockTime+0x38>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	68db      	ldr	r3, [r3, #12]
 8015f40:	68db      	ldr	r3, [r3, #12]
 8015f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	4a04      	ldr	r2, [pc, #16]	; (8015f5c <prvResetNextTaskUnblockTime+0x3c>)
 8015f4a:	6013      	str	r3, [r2, #0]
}
 8015f4c:	bf00      	nop
 8015f4e:	370c      	adds	r7, #12
 8015f50:	46bd      	mov	sp, r7
 8015f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f56:	4770      	bx	lr
 8015f58:	20000fb4 	.word	0x20000fb4
 8015f5c:	2000101c 	.word	0x2000101c

08015f60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015f60:	b480      	push	{r7}
 8015f62:	b083      	sub	sp, #12
 8015f64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015f66:	4b05      	ldr	r3, [pc, #20]	; (8015f7c <xTaskGetCurrentTaskHandle+0x1c>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015f6c:	687b      	ldr	r3, [r7, #4]
	}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	370c      	adds	r7, #12
 8015f72:	46bd      	mov	sp, r7
 8015f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f78:	4770      	bx	lr
 8015f7a:	bf00      	nop
 8015f7c:	20000b28 	.word	0x20000b28

08015f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015f80:	b480      	push	{r7}
 8015f82:	b083      	sub	sp, #12
 8015f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015f86:	4b0b      	ldr	r3, [pc, #44]	; (8015fb4 <xTaskGetSchedulerState+0x34>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d102      	bne.n	8015f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015f8e:	2301      	movs	r3, #1
 8015f90:	607b      	str	r3, [r7, #4]
 8015f92:	e008      	b.n	8015fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f94:	4b08      	ldr	r3, [pc, #32]	; (8015fb8 <xTaskGetSchedulerState+0x38>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d102      	bne.n	8015fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015f9c:	2302      	movs	r3, #2
 8015f9e:	607b      	str	r3, [r7, #4]
 8015fa0:	e001      	b.n	8015fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015fa6:	687b      	ldr	r3, [r7, #4]
	}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	370c      	adds	r7, #12
 8015fac:	46bd      	mov	sp, r7
 8015fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb2:	4770      	bx	lr
 8015fb4:	20001008 	.word	0x20001008
 8015fb8:	20001024 	.word	0x20001024

08015fbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b084      	sub	sp, #16
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d051      	beq.n	8016076 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fd6:	4b2a      	ldr	r3, [pc, #168]	; (8016080 <xTaskPriorityInherit+0xc4>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d241      	bcs.n	8016064 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	699b      	ldr	r3, [r3, #24]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	db06      	blt.n	8015ff6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015fe8:	4b25      	ldr	r3, [pc, #148]	; (8016080 <xTaskPriorityInherit+0xc4>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015ff6:	68bb      	ldr	r3, [r7, #8]
 8015ff8:	6959      	ldr	r1, [r3, #20]
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ffe:	4613      	mov	r3, r2
 8016000:	009b      	lsls	r3, r3, #2
 8016002:	4413      	add	r3, r2
 8016004:	009b      	lsls	r3, r3, #2
 8016006:	4a1f      	ldr	r2, [pc, #124]	; (8016084 <xTaskPriorityInherit+0xc8>)
 8016008:	4413      	add	r3, r2
 801600a:	4299      	cmp	r1, r3
 801600c:	d122      	bne.n	8016054 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	3304      	adds	r3, #4
 8016012:	4618      	mov	r0, r3
 8016014:	f7fd ffd6 	bl	8013fc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016018:	4b19      	ldr	r3, [pc, #100]	; (8016080 <xTaskPriorityInherit+0xc4>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016026:	4b18      	ldr	r3, [pc, #96]	; (8016088 <xTaskPriorityInherit+0xcc>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	429a      	cmp	r2, r3
 801602c:	d903      	bls.n	8016036 <xTaskPriorityInherit+0x7a>
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016032:	4a15      	ldr	r2, [pc, #84]	; (8016088 <xTaskPriorityInherit+0xcc>)
 8016034:	6013      	str	r3, [r2, #0]
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801603a:	4613      	mov	r3, r2
 801603c:	009b      	lsls	r3, r3, #2
 801603e:	4413      	add	r3, r2
 8016040:	009b      	lsls	r3, r3, #2
 8016042:	4a10      	ldr	r2, [pc, #64]	; (8016084 <xTaskPriorityInherit+0xc8>)
 8016044:	441a      	add	r2, r3
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	3304      	adds	r3, #4
 801604a:	4619      	mov	r1, r3
 801604c:	4610      	mov	r0, r2
 801604e:	f7fd ff5c 	bl	8013f0a <vListInsertEnd>
 8016052:	e004      	b.n	801605e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016054:	4b0a      	ldr	r3, [pc, #40]	; (8016080 <xTaskPriorityInherit+0xc4>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801605e:	2301      	movs	r3, #1
 8016060:	60fb      	str	r3, [r7, #12]
 8016062:	e008      	b.n	8016076 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016068:	4b05      	ldr	r3, [pc, #20]	; (8016080 <xTaskPriorityInherit+0xc4>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801606e:	429a      	cmp	r2, r3
 8016070:	d201      	bcs.n	8016076 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016072:	2301      	movs	r3, #1
 8016074:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016076:	68fb      	ldr	r3, [r7, #12]
	}
 8016078:	4618      	mov	r0, r3
 801607a:	3710      	adds	r7, #16
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	20000b28 	.word	0x20000b28
 8016084:	20000b2c 	.word	0x20000b2c
 8016088:	20001004 	.word	0x20001004

0801608c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801608c:	b580      	push	{r7, lr}
 801608e:	b086      	sub	sp, #24
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016098:	2300      	movs	r3, #0
 801609a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d058      	beq.n	8016154 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80160a2:	4b2f      	ldr	r3, [pc, #188]	; (8016160 <xTaskPriorityDisinherit+0xd4>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	693a      	ldr	r2, [r7, #16]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d00b      	beq.n	80160c4 <xTaskPriorityDisinherit+0x38>
 80160ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b0:	b672      	cpsid	i
 80160b2:	f383 8811 	msr	BASEPRI, r3
 80160b6:	f3bf 8f6f 	isb	sy
 80160ba:	f3bf 8f4f 	dsb	sy
 80160be:	b662      	cpsie	i
 80160c0:	60fb      	str	r3, [r7, #12]
 80160c2:	e7fe      	b.n	80160c2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d10b      	bne.n	80160e4 <xTaskPriorityDisinherit+0x58>
 80160cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160d0:	b672      	cpsid	i
 80160d2:	f383 8811 	msr	BASEPRI, r3
 80160d6:	f3bf 8f6f 	isb	sy
 80160da:	f3bf 8f4f 	dsb	sy
 80160de:	b662      	cpsie	i
 80160e0:	60bb      	str	r3, [r7, #8]
 80160e2:	e7fe      	b.n	80160e2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80160e4:	693b      	ldr	r3, [r7, #16]
 80160e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160e8:	1e5a      	subs	r2, r3, #1
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d02c      	beq.n	8016154 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d128      	bne.n	8016154 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016102:	693b      	ldr	r3, [r7, #16]
 8016104:	3304      	adds	r3, #4
 8016106:	4618      	mov	r0, r3
 8016108:	f7fd ff5c 	bl	8013fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016124:	4b0f      	ldr	r3, [pc, #60]	; (8016164 <xTaskPriorityDisinherit+0xd8>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	429a      	cmp	r2, r3
 801612a:	d903      	bls.n	8016134 <xTaskPriorityDisinherit+0xa8>
 801612c:	693b      	ldr	r3, [r7, #16]
 801612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016130:	4a0c      	ldr	r2, [pc, #48]	; (8016164 <xTaskPriorityDisinherit+0xd8>)
 8016132:	6013      	str	r3, [r2, #0]
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016138:	4613      	mov	r3, r2
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	4413      	add	r3, r2
 801613e:	009b      	lsls	r3, r3, #2
 8016140:	4a09      	ldr	r2, [pc, #36]	; (8016168 <xTaskPriorityDisinherit+0xdc>)
 8016142:	441a      	add	r2, r3
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	3304      	adds	r3, #4
 8016148:	4619      	mov	r1, r3
 801614a:	4610      	mov	r0, r2
 801614c:	f7fd fedd 	bl	8013f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016150:	2301      	movs	r3, #1
 8016152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016154:	697b      	ldr	r3, [r7, #20]
	}
 8016156:	4618      	mov	r0, r3
 8016158:	3718      	adds	r7, #24
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	20000b28 	.word	0x20000b28
 8016164:	20001004 	.word	0x20001004
 8016168:	20000b2c 	.word	0x20000b2c

0801616c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801616c:	b580      	push	{r7, lr}
 801616e:	b088      	sub	sp, #32
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801617a:	2301      	movs	r3, #1
 801617c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d06c      	beq.n	801625e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016184:	69bb      	ldr	r3, [r7, #24]
 8016186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016188:	2b00      	cmp	r3, #0
 801618a:	d10b      	bne.n	80161a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
 801618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016190:	b672      	cpsid	i
 8016192:	f383 8811 	msr	BASEPRI, r3
 8016196:	f3bf 8f6f 	isb	sy
 801619a:	f3bf 8f4f 	dsb	sy
 801619e:	b662      	cpsie	i
 80161a0:	60fb      	str	r3, [r7, #12]
 80161a2:	e7fe      	b.n	80161a2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80161a4:	69bb      	ldr	r3, [r7, #24]
 80161a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161a8:	683a      	ldr	r2, [r7, #0]
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d902      	bls.n	80161b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	61fb      	str	r3, [r7, #28]
 80161b2:	e002      	b.n	80161ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80161ba:	69bb      	ldr	r3, [r7, #24]
 80161bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161be:	69fa      	ldr	r2, [r7, #28]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d04c      	beq.n	801625e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80161c4:	69bb      	ldr	r3, [r7, #24]
 80161c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161c8:	697a      	ldr	r2, [r7, #20]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d147      	bne.n	801625e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80161ce:	4b26      	ldr	r3, [pc, #152]	; (8016268 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	69ba      	ldr	r2, [r7, #24]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d10b      	bne.n	80161f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
 80161d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161dc:	b672      	cpsid	i
 80161de:	f383 8811 	msr	BASEPRI, r3
 80161e2:	f3bf 8f6f 	isb	sy
 80161e6:	f3bf 8f4f 	dsb	sy
 80161ea:	b662      	cpsie	i
 80161ec:	60bb      	str	r3, [r7, #8]
 80161ee:	e7fe      	b.n	80161ee <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	69fa      	ldr	r2, [r7, #28]
 80161fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80161fc:	69bb      	ldr	r3, [r7, #24]
 80161fe:	699b      	ldr	r3, [r3, #24]
 8016200:	2b00      	cmp	r3, #0
 8016202:	db04      	blt.n	801620e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016204:	69fb      	ldr	r3, [r7, #28]
 8016206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801620a:	69bb      	ldr	r3, [r7, #24]
 801620c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	6959      	ldr	r1, [r3, #20]
 8016212:	693a      	ldr	r2, [r7, #16]
 8016214:	4613      	mov	r3, r2
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	4413      	add	r3, r2
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	4a13      	ldr	r2, [pc, #76]	; (801626c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801621e:	4413      	add	r3, r2
 8016220:	4299      	cmp	r1, r3
 8016222:	d11c      	bne.n	801625e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016224:	69bb      	ldr	r3, [r7, #24]
 8016226:	3304      	adds	r3, #4
 8016228:	4618      	mov	r0, r3
 801622a:	f7fd fecb 	bl	8013fc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801622e:	69bb      	ldr	r3, [r7, #24]
 8016230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016232:	4b0f      	ldr	r3, [pc, #60]	; (8016270 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	429a      	cmp	r2, r3
 8016238:	d903      	bls.n	8016242 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801623a:	69bb      	ldr	r3, [r7, #24]
 801623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801623e:	4a0c      	ldr	r2, [pc, #48]	; (8016270 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016240:	6013      	str	r3, [r2, #0]
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016246:	4613      	mov	r3, r2
 8016248:	009b      	lsls	r3, r3, #2
 801624a:	4413      	add	r3, r2
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	4a07      	ldr	r2, [pc, #28]	; (801626c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016250:	441a      	add	r2, r3
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	3304      	adds	r3, #4
 8016256:	4619      	mov	r1, r3
 8016258:	4610      	mov	r0, r2
 801625a:	f7fd fe56 	bl	8013f0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801625e:	bf00      	nop
 8016260:	3720      	adds	r7, #32
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}
 8016266:	bf00      	nop
 8016268:	20000b28 	.word	0x20000b28
 801626c:	20000b2c 	.word	0x20000b2c
 8016270:	20001004 	.word	0x20001004

08016274 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016274:	b480      	push	{r7}
 8016276:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016278:	4b07      	ldr	r3, [pc, #28]	; (8016298 <pvTaskIncrementMutexHeldCount+0x24>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d004      	beq.n	801628a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016280:	4b05      	ldr	r3, [pc, #20]	; (8016298 <pvTaskIncrementMutexHeldCount+0x24>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016286:	3201      	adds	r2, #1
 8016288:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801628a:	4b03      	ldr	r3, [pc, #12]	; (8016298 <pvTaskIncrementMutexHeldCount+0x24>)
 801628c:	681b      	ldr	r3, [r3, #0]
	}
 801628e:	4618      	mov	r0, r3
 8016290:	46bd      	mov	sp, r7
 8016292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016296:	4770      	bx	lr
 8016298:	20000b28 	.word	0x20000b28

0801629c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80162a6:	4b21      	ldr	r3, [pc, #132]	; (801632c <prvAddCurrentTaskToDelayedList+0x90>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162ac:	4b20      	ldr	r3, [pc, #128]	; (8016330 <prvAddCurrentTaskToDelayedList+0x94>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	3304      	adds	r3, #4
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7fd fe86 	bl	8013fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162be:	d10a      	bne.n	80162d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d007      	beq.n	80162d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80162c6:	4b1a      	ldr	r3, [pc, #104]	; (8016330 <prvAddCurrentTaskToDelayedList+0x94>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	3304      	adds	r3, #4
 80162cc:	4619      	mov	r1, r3
 80162ce:	4819      	ldr	r0, [pc, #100]	; (8016334 <prvAddCurrentTaskToDelayedList+0x98>)
 80162d0:	f7fd fe1b 	bl	8013f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80162d4:	e026      	b.n	8016324 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80162d6:	68fa      	ldr	r2, [r7, #12]
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	4413      	add	r3, r2
 80162dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80162de:	4b14      	ldr	r3, [pc, #80]	; (8016330 <prvAddCurrentTaskToDelayedList+0x94>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	68ba      	ldr	r2, [r7, #8]
 80162e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80162e6:	68ba      	ldr	r2, [r7, #8]
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d209      	bcs.n	8016302 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80162ee:	4b12      	ldr	r3, [pc, #72]	; (8016338 <prvAddCurrentTaskToDelayedList+0x9c>)
 80162f0:	681a      	ldr	r2, [r3, #0]
 80162f2:	4b0f      	ldr	r3, [pc, #60]	; (8016330 <prvAddCurrentTaskToDelayedList+0x94>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	3304      	adds	r3, #4
 80162f8:	4619      	mov	r1, r3
 80162fa:	4610      	mov	r0, r2
 80162fc:	f7fd fe29 	bl	8013f52 <vListInsert>
}
 8016300:	e010      	b.n	8016324 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016302:	4b0e      	ldr	r3, [pc, #56]	; (801633c <prvAddCurrentTaskToDelayedList+0xa0>)
 8016304:	681a      	ldr	r2, [r3, #0]
 8016306:	4b0a      	ldr	r3, [pc, #40]	; (8016330 <prvAddCurrentTaskToDelayedList+0x94>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	3304      	adds	r3, #4
 801630c:	4619      	mov	r1, r3
 801630e:	4610      	mov	r0, r2
 8016310:	f7fd fe1f 	bl	8013f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016314:	4b0a      	ldr	r3, [pc, #40]	; (8016340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	68ba      	ldr	r2, [r7, #8]
 801631a:	429a      	cmp	r2, r3
 801631c:	d202      	bcs.n	8016324 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801631e:	4a08      	ldr	r2, [pc, #32]	; (8016340 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	6013      	str	r3, [r2, #0]
}
 8016324:	bf00      	nop
 8016326:	3710      	adds	r7, #16
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}
 801632c:	20001000 	.word	0x20001000
 8016330:	20000b28 	.word	0x20000b28
 8016334:	20000fe8 	.word	0x20000fe8
 8016338:	20000fb8 	.word	0x20000fb8
 801633c:	20000fb4 	.word	0x20000fb4
 8016340:	2000101c 	.word	0x2000101c

08016344 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b08a      	sub	sp, #40	; 0x28
 8016348:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801634a:	2300      	movs	r3, #0
 801634c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801634e:	f000 fb0d 	bl	801696c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016352:	4b1d      	ldr	r3, [pc, #116]	; (80163c8 <xTimerCreateTimerTask+0x84>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d021      	beq.n	801639e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801635a:	2300      	movs	r3, #0
 801635c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801635e:	2300      	movs	r3, #0
 8016360:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016362:	1d3a      	adds	r2, r7, #4
 8016364:	f107 0108 	add.w	r1, r7, #8
 8016368:	f107 030c 	add.w	r3, r7, #12
 801636c:	4618      	mov	r0, r3
 801636e:	f7fd fd85 	bl	8013e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016372:	6879      	ldr	r1, [r7, #4]
 8016374:	68bb      	ldr	r3, [r7, #8]
 8016376:	68fa      	ldr	r2, [r7, #12]
 8016378:	9202      	str	r2, [sp, #8]
 801637a:	9301      	str	r3, [sp, #4]
 801637c:	2302      	movs	r3, #2
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	2300      	movs	r3, #0
 8016382:	460a      	mov	r2, r1
 8016384:	4911      	ldr	r1, [pc, #68]	; (80163cc <xTimerCreateTimerTask+0x88>)
 8016386:	4812      	ldr	r0, [pc, #72]	; (80163d0 <xTimerCreateTimerTask+0x8c>)
 8016388:	f7fe ff30 	bl	80151ec <xTaskCreateStatic>
 801638c:	4602      	mov	r2, r0
 801638e:	4b11      	ldr	r3, [pc, #68]	; (80163d4 <xTimerCreateTimerTask+0x90>)
 8016390:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016392:	4b10      	ldr	r3, [pc, #64]	; (80163d4 <xTimerCreateTimerTask+0x90>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d001      	beq.n	801639e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801639a:	2301      	movs	r3, #1
 801639c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d10b      	bne.n	80163bc <xTimerCreateTimerTask+0x78>
 80163a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a8:	b672      	cpsid	i
 80163aa:	f383 8811 	msr	BASEPRI, r3
 80163ae:	f3bf 8f6f 	isb	sy
 80163b2:	f3bf 8f4f 	dsb	sy
 80163b6:	b662      	cpsie	i
 80163b8:	613b      	str	r3, [r7, #16]
 80163ba:	e7fe      	b.n	80163ba <xTimerCreateTimerTask+0x76>
	return xReturn;
 80163bc:	697b      	ldr	r3, [r7, #20]
}
 80163be:	4618      	mov	r0, r3
 80163c0:	3718      	adds	r7, #24
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	20001058 	.word	0x20001058
 80163cc:	0801ab74 	.word	0x0801ab74
 80163d0:	08016511 	.word	0x08016511
 80163d4:	2000105c 	.word	0x2000105c

080163d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b08a      	sub	sp, #40	; 0x28
 80163dc:	af00      	add	r7, sp, #0
 80163de:	60f8      	str	r0, [r7, #12]
 80163e0:	60b9      	str	r1, [r7, #8]
 80163e2:	607a      	str	r2, [r7, #4]
 80163e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80163e6:	2300      	movs	r3, #0
 80163e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d10b      	bne.n	8016408 <xTimerGenericCommand+0x30>
 80163f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f4:	b672      	cpsid	i
 80163f6:	f383 8811 	msr	BASEPRI, r3
 80163fa:	f3bf 8f6f 	isb	sy
 80163fe:	f3bf 8f4f 	dsb	sy
 8016402:	b662      	cpsie	i
 8016404:	623b      	str	r3, [r7, #32]
 8016406:	e7fe      	b.n	8016406 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016408:	4b19      	ldr	r3, [pc, #100]	; (8016470 <xTimerGenericCommand+0x98>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d02a      	beq.n	8016466 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	2b05      	cmp	r3, #5
 8016420:	dc18      	bgt.n	8016454 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016422:	f7ff fdad 	bl	8015f80 <xTaskGetSchedulerState>
 8016426:	4603      	mov	r3, r0
 8016428:	2b02      	cmp	r3, #2
 801642a:	d109      	bne.n	8016440 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801642c:	4b10      	ldr	r3, [pc, #64]	; (8016470 <xTimerGenericCommand+0x98>)
 801642e:	6818      	ldr	r0, [r3, #0]
 8016430:	f107 0110 	add.w	r1, r7, #16
 8016434:	2300      	movs	r3, #0
 8016436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016438:	f7fe f860 	bl	80144fc <xQueueGenericSend>
 801643c:	6278      	str	r0, [r7, #36]	; 0x24
 801643e:	e012      	b.n	8016466 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016440:	4b0b      	ldr	r3, [pc, #44]	; (8016470 <xTimerGenericCommand+0x98>)
 8016442:	6818      	ldr	r0, [r3, #0]
 8016444:	f107 0110 	add.w	r1, r7, #16
 8016448:	2300      	movs	r3, #0
 801644a:	2200      	movs	r2, #0
 801644c:	f7fe f856 	bl	80144fc <xQueueGenericSend>
 8016450:	6278      	str	r0, [r7, #36]	; 0x24
 8016452:	e008      	b.n	8016466 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016454:	4b06      	ldr	r3, [pc, #24]	; (8016470 <xTimerGenericCommand+0x98>)
 8016456:	6818      	ldr	r0, [r3, #0]
 8016458:	f107 0110 	add.w	r1, r7, #16
 801645c:	2300      	movs	r3, #0
 801645e:	683a      	ldr	r2, [r7, #0]
 8016460:	f7fe f94e 	bl	8014700 <xQueueGenericSendFromISR>
 8016464:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016468:	4618      	mov	r0, r3
 801646a:	3728      	adds	r7, #40	; 0x28
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}
 8016470:	20001058 	.word	0x20001058

08016474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b088      	sub	sp, #32
 8016478:	af02      	add	r7, sp, #8
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801647e:	4b23      	ldr	r3, [pc, #140]	; (801650c <prvProcessExpiredTimer+0x98>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	68db      	ldr	r3, [r3, #12]
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	3304      	adds	r3, #4
 801648c:	4618      	mov	r0, r3
 801648e:	f7fd fd99 	bl	8013fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016492:	697b      	ldr	r3, [r7, #20]
 8016494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016498:	f003 0304 	and.w	r3, r3, #4
 801649c:	2b00      	cmp	r3, #0
 801649e:	d023      	beq.n	80164e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	699a      	ldr	r2, [r3, #24]
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	18d1      	adds	r1, r2, r3
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	683a      	ldr	r2, [r7, #0]
 80164ac:	6978      	ldr	r0, [r7, #20]
 80164ae:	f000 f8d3 	bl	8016658 <prvInsertTimerInActiveList>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d020      	beq.n	80164fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80164b8:	2300      	movs	r3, #0
 80164ba:	9300      	str	r3, [sp, #0]
 80164bc:	2300      	movs	r3, #0
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	2100      	movs	r1, #0
 80164c2:	6978      	ldr	r0, [r7, #20]
 80164c4:	f7ff ff88 	bl	80163d8 <xTimerGenericCommand>
 80164c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d114      	bne.n	80164fa <prvProcessExpiredTimer+0x86>
 80164d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d4:	b672      	cpsid	i
 80164d6:	f383 8811 	msr	BASEPRI, r3
 80164da:	f3bf 8f6f 	isb	sy
 80164de:	f3bf 8f4f 	dsb	sy
 80164e2:	b662      	cpsie	i
 80164e4:	60fb      	str	r3, [r7, #12]
 80164e6:	e7fe      	b.n	80164e6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164ee:	f023 0301 	bic.w	r3, r3, #1
 80164f2:	b2da      	uxtb	r2, r3
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	6a1b      	ldr	r3, [r3, #32]
 80164fe:	6978      	ldr	r0, [r7, #20]
 8016500:	4798      	blx	r3
}
 8016502:	bf00      	nop
 8016504:	3718      	adds	r7, #24
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	20001050 	.word	0x20001050

08016510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b084      	sub	sp, #16
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016518:	f107 0308 	add.w	r3, r7, #8
 801651c:	4618      	mov	r0, r3
 801651e:	f000 f857 	bl	80165d0 <prvGetNextExpireTime>
 8016522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	4619      	mov	r1, r3
 8016528:	68f8      	ldr	r0, [r7, #12]
 801652a:	f000 f803 	bl	8016534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801652e:	f000 f8d5 	bl	80166dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016532:	e7f1      	b.n	8016518 <prvTimerTask+0x8>

08016534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801653e:	f7ff f919 	bl	8015774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016542:	f107 0308 	add.w	r3, r7, #8
 8016546:	4618      	mov	r0, r3
 8016548:	f000 f866 	bl	8016618 <prvSampleTimeNow>
 801654c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d130      	bne.n	80165b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d10a      	bne.n	8016570 <prvProcessTimerOrBlockTask+0x3c>
 801655a:	687a      	ldr	r2, [r7, #4]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	429a      	cmp	r2, r3
 8016560:	d806      	bhi.n	8016570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016562:	f7ff f915 	bl	8015790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016566:	68f9      	ldr	r1, [r7, #12]
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f7ff ff83 	bl	8016474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801656e:	e024      	b.n	80165ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d008      	beq.n	8016588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016576:	4b13      	ldr	r3, [pc, #76]	; (80165c4 <prvProcessTimerOrBlockTask+0x90>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d101      	bne.n	8016584 <prvProcessTimerOrBlockTask+0x50>
 8016580:	2301      	movs	r3, #1
 8016582:	e000      	b.n	8016586 <prvProcessTimerOrBlockTask+0x52>
 8016584:	2300      	movs	r3, #0
 8016586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016588:	4b0f      	ldr	r3, [pc, #60]	; (80165c8 <prvProcessTimerOrBlockTask+0x94>)
 801658a:	6818      	ldr	r0, [r3, #0]
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	1ad3      	subs	r3, r2, r3
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	4619      	mov	r1, r3
 8016596:	f7fe fdf5 	bl	8015184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801659a:	f7ff f8f9 	bl	8015790 <xTaskResumeAll>
 801659e:	4603      	mov	r3, r0
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d10a      	bne.n	80165ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80165a4:	4b09      	ldr	r3, [pc, #36]	; (80165cc <prvProcessTimerOrBlockTask+0x98>)
 80165a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165aa:	601a      	str	r2, [r3, #0]
 80165ac:	f3bf 8f4f 	dsb	sy
 80165b0:	f3bf 8f6f 	isb	sy
}
 80165b4:	e001      	b.n	80165ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80165b6:	f7ff f8eb 	bl	8015790 <xTaskResumeAll>
}
 80165ba:	bf00      	nop
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	20001054 	.word	0x20001054
 80165c8:	20001058 	.word	0x20001058
 80165cc:	e000ed04 	.word	0xe000ed04

080165d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80165d8:	4b0e      	ldr	r3, [pc, #56]	; (8016614 <prvGetNextExpireTime+0x44>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d101      	bne.n	80165e6 <prvGetNextExpireTime+0x16>
 80165e2:	2201      	movs	r2, #1
 80165e4:	e000      	b.n	80165e8 <prvGetNextExpireTime+0x18>
 80165e6:	2200      	movs	r2, #0
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d105      	bne.n	8016600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80165f4:	4b07      	ldr	r3, [pc, #28]	; (8016614 <prvGetNextExpireTime+0x44>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	68db      	ldr	r3, [r3, #12]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	60fb      	str	r3, [r7, #12]
 80165fe:	e001      	b.n	8016604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016600:	2300      	movs	r3, #0
 8016602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016604:	68fb      	ldr	r3, [r7, #12]
}
 8016606:	4618      	mov	r0, r3
 8016608:	3714      	adds	r7, #20
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop
 8016614:	20001050 	.word	0x20001050

08016618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016620:	f7ff f954 	bl	80158cc <xTaskGetTickCount>
 8016624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016626:	4b0b      	ldr	r3, [pc, #44]	; (8016654 <prvSampleTimeNow+0x3c>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	68fa      	ldr	r2, [r7, #12]
 801662c:	429a      	cmp	r2, r3
 801662e:	d205      	bcs.n	801663c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016630:	f000 f936 	bl	80168a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2201      	movs	r2, #1
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	e002      	b.n	8016642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2200      	movs	r2, #0
 8016640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016642:	4a04      	ldr	r2, [pc, #16]	; (8016654 <prvSampleTimeNow+0x3c>)
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016648:	68fb      	ldr	r3, [r7, #12]
}
 801664a:	4618      	mov	r0, r3
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	20001060 	.word	0x20001060

08016658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b086      	sub	sp, #24
 801665c:	af00      	add	r7, sp, #0
 801665e:	60f8      	str	r0, [r7, #12]
 8016660:	60b9      	str	r1, [r7, #8]
 8016662:	607a      	str	r2, [r7, #4]
 8016664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016666:	2300      	movs	r3, #0
 8016668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	68ba      	ldr	r2, [r7, #8]
 801666e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	68fa      	ldr	r2, [r7, #12]
 8016674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016676:	68ba      	ldr	r2, [r7, #8]
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	429a      	cmp	r2, r3
 801667c:	d812      	bhi.n	80166a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801667e:	687a      	ldr	r2, [r7, #4]
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	1ad2      	subs	r2, r2, r3
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	699b      	ldr	r3, [r3, #24]
 8016688:	429a      	cmp	r2, r3
 801668a:	d302      	bcc.n	8016692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801668c:	2301      	movs	r3, #1
 801668e:	617b      	str	r3, [r7, #20]
 8016690:	e01b      	b.n	80166ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016692:	4b10      	ldr	r3, [pc, #64]	; (80166d4 <prvInsertTimerInActiveList+0x7c>)
 8016694:	681a      	ldr	r2, [r3, #0]
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	3304      	adds	r3, #4
 801669a:	4619      	mov	r1, r3
 801669c:	4610      	mov	r0, r2
 801669e:	f7fd fc58 	bl	8013f52 <vListInsert>
 80166a2:	e012      	b.n	80166ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80166a4:	687a      	ldr	r2, [r7, #4]
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d206      	bcs.n	80166ba <prvInsertTimerInActiveList+0x62>
 80166ac:	68ba      	ldr	r2, [r7, #8]
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d302      	bcc.n	80166ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80166b4:	2301      	movs	r3, #1
 80166b6:	617b      	str	r3, [r7, #20]
 80166b8:	e007      	b.n	80166ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80166ba:	4b07      	ldr	r3, [pc, #28]	; (80166d8 <prvInsertTimerInActiveList+0x80>)
 80166bc:	681a      	ldr	r2, [r3, #0]
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	3304      	adds	r3, #4
 80166c2:	4619      	mov	r1, r3
 80166c4:	4610      	mov	r0, r2
 80166c6:	f7fd fc44 	bl	8013f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80166ca:	697b      	ldr	r3, [r7, #20]
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3718      	adds	r7, #24
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}
 80166d4:	20001054 	.word	0x20001054
 80166d8:	20001050 	.word	0x20001050

080166dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b08e      	sub	sp, #56	; 0x38
 80166e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80166e2:	e0cc      	b.n	801687e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	da19      	bge.n	801671e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80166ea:	1d3b      	adds	r3, r7, #4
 80166ec:	3304      	adds	r3, #4
 80166ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80166f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d10b      	bne.n	801670e <prvProcessReceivedCommands+0x32>
 80166f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fa:	b672      	cpsid	i
 80166fc:	f383 8811 	msr	BASEPRI, r3
 8016700:	f3bf 8f6f 	isb	sy
 8016704:	f3bf 8f4f 	dsb	sy
 8016708:	b662      	cpsie	i
 801670a:	61fb      	str	r3, [r7, #28]
 801670c:	e7fe      	b.n	801670c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016714:	6850      	ldr	r0, [r2, #4]
 8016716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016718:	6892      	ldr	r2, [r2, #8]
 801671a:	4611      	mov	r1, r2
 801671c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	f2c0 80ab 	blt.w	801687c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672c:	695b      	ldr	r3, [r3, #20]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d004      	beq.n	801673c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016734:	3304      	adds	r3, #4
 8016736:	4618      	mov	r0, r3
 8016738:	f7fd fc44 	bl	8013fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801673c:	463b      	mov	r3, r7
 801673e:	4618      	mov	r0, r3
 8016740:	f7ff ff6a 	bl	8016618 <prvSampleTimeNow>
 8016744:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b09      	cmp	r3, #9
 801674a:	f200 8098 	bhi.w	801687e <prvProcessReceivedCommands+0x1a2>
 801674e:	a201      	add	r2, pc, #4	; (adr r2, 8016754 <prvProcessReceivedCommands+0x78>)
 8016750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016754:	0801677d 	.word	0x0801677d
 8016758:	0801677d 	.word	0x0801677d
 801675c:	0801677d 	.word	0x0801677d
 8016760:	080167f3 	.word	0x080167f3
 8016764:	08016807 	.word	0x08016807
 8016768:	08016853 	.word	0x08016853
 801676c:	0801677d 	.word	0x0801677d
 8016770:	0801677d 	.word	0x0801677d
 8016774:	080167f3 	.word	0x080167f3
 8016778:	08016807 	.word	0x08016807
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801677e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016782:	f043 0301 	orr.w	r3, r3, #1
 8016786:	b2da      	uxtb	r2, r3
 8016788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801678a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801678e:	68ba      	ldr	r2, [r7, #8]
 8016790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016792:	699b      	ldr	r3, [r3, #24]
 8016794:	18d1      	adds	r1, r2, r3
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801679a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801679c:	f7ff ff5c 	bl	8016658 <prvInsertTimerInActiveList>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d06b      	beq.n	801687e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80167a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a8:	6a1b      	ldr	r3, [r3, #32]
 80167aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80167ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80167b4:	f003 0304 	and.w	r3, r3, #4
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d060      	beq.n	801687e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c0:	699b      	ldr	r3, [r3, #24]
 80167c2:	441a      	add	r2, r3
 80167c4:	2300      	movs	r3, #0
 80167c6:	9300      	str	r3, [sp, #0]
 80167c8:	2300      	movs	r3, #0
 80167ca:	2100      	movs	r1, #0
 80167cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167ce:	f7ff fe03 	bl	80163d8 <xTimerGenericCommand>
 80167d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80167d4:	6a3b      	ldr	r3, [r7, #32]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d151      	bne.n	801687e <prvProcessReceivedCommands+0x1a2>
 80167da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167de:	b672      	cpsid	i
 80167e0:	f383 8811 	msr	BASEPRI, r3
 80167e4:	f3bf 8f6f 	isb	sy
 80167e8:	f3bf 8f4f 	dsb	sy
 80167ec:	b662      	cpsie	i
 80167ee:	61bb      	str	r3, [r7, #24]
 80167f0:	e7fe      	b.n	80167f0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80167f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80167f8:	f023 0301 	bic.w	r3, r3, #1
 80167fc:	b2da      	uxtb	r2, r3
 80167fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016804:	e03b      	b.n	801687e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801680c:	f043 0301 	orr.w	r3, r3, #1
 8016810:	b2da      	uxtb	r2, r3
 8016812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016814:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016820:	699b      	ldr	r3, [r3, #24]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d10b      	bne.n	801683e <prvProcessReceivedCommands+0x162>
 8016826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682a:	b672      	cpsid	i
 801682c:	f383 8811 	msr	BASEPRI, r3
 8016830:	f3bf 8f6f 	isb	sy
 8016834:	f3bf 8f4f 	dsb	sy
 8016838:	b662      	cpsie	i
 801683a:	617b      	str	r3, [r7, #20]
 801683c:	e7fe      	b.n	801683c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016840:	699a      	ldr	r2, [r3, #24]
 8016842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016844:	18d1      	adds	r1, r2, r3
 8016846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801684a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801684c:	f7ff ff04 	bl	8016658 <prvInsertTimerInActiveList>
					break;
 8016850:	e015      	b.n	801687e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016858:	f003 0302 	and.w	r3, r3, #2
 801685c:	2b00      	cmp	r3, #0
 801685e:	d103      	bne.n	8016868 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016862:	f000 fbb3 	bl	8016fcc <vPortFree>
 8016866:	e00a      	b.n	801687e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801686a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801686e:	f023 0301 	bic.w	r3, r3, #1
 8016872:	b2da      	uxtb	r2, r3
 8016874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801687a:	e000      	b.n	801687e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801687c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801687e:	4b07      	ldr	r3, [pc, #28]	; (801689c <prvProcessReceivedCommands+0x1c0>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	1d39      	adds	r1, r7, #4
 8016884:	2200      	movs	r2, #0
 8016886:	4618      	mov	r0, r3
 8016888:	f7fe f868 	bl	801495c <xQueueReceive>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	f47f af28 	bne.w	80166e4 <prvProcessReceivedCommands+0x8>
	}
}
 8016894:	bf00      	nop
 8016896:	3730      	adds	r7, #48	; 0x30
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}
 801689c:	20001058 	.word	0x20001058

080168a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b088      	sub	sp, #32
 80168a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80168a6:	e049      	b.n	801693c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80168a8:	4b2e      	ldr	r3, [pc, #184]	; (8016964 <prvSwitchTimerLists+0xc4>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	68db      	ldr	r3, [r3, #12]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168b2:	4b2c      	ldr	r3, [pc, #176]	; (8016964 <prvSwitchTimerLists+0xc4>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	3304      	adds	r3, #4
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7fd fb7f 	bl	8013fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	6a1b      	ldr	r3, [r3, #32]
 80168ca:	68f8      	ldr	r0, [r7, #12]
 80168cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80168d4:	f003 0304 	and.w	r3, r3, #4
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d02f      	beq.n	801693c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	699b      	ldr	r3, [r3, #24]
 80168e0:	693a      	ldr	r2, [r7, #16]
 80168e2:	4413      	add	r3, r2
 80168e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80168e6:	68ba      	ldr	r2, [r7, #8]
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d90e      	bls.n	801690c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	68ba      	ldr	r2, [r7, #8]
 80168f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	68fa      	ldr	r2, [r7, #12]
 80168f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80168fa:	4b1a      	ldr	r3, [pc, #104]	; (8016964 <prvSwitchTimerLists+0xc4>)
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	3304      	adds	r3, #4
 8016902:	4619      	mov	r1, r3
 8016904:	4610      	mov	r0, r2
 8016906:	f7fd fb24 	bl	8013f52 <vListInsert>
 801690a:	e017      	b.n	801693c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801690c:	2300      	movs	r3, #0
 801690e:	9300      	str	r3, [sp, #0]
 8016910:	2300      	movs	r3, #0
 8016912:	693a      	ldr	r2, [r7, #16]
 8016914:	2100      	movs	r1, #0
 8016916:	68f8      	ldr	r0, [r7, #12]
 8016918:	f7ff fd5e 	bl	80163d8 <xTimerGenericCommand>
 801691c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d10b      	bne.n	801693c <prvSwitchTimerLists+0x9c>
 8016924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016928:	b672      	cpsid	i
 801692a:	f383 8811 	msr	BASEPRI, r3
 801692e:	f3bf 8f6f 	isb	sy
 8016932:	f3bf 8f4f 	dsb	sy
 8016936:	b662      	cpsie	i
 8016938:	603b      	str	r3, [r7, #0]
 801693a:	e7fe      	b.n	801693a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801693c:	4b09      	ldr	r3, [pc, #36]	; (8016964 <prvSwitchTimerLists+0xc4>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d1b0      	bne.n	80168a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016946:	4b07      	ldr	r3, [pc, #28]	; (8016964 <prvSwitchTimerLists+0xc4>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801694c:	4b06      	ldr	r3, [pc, #24]	; (8016968 <prvSwitchTimerLists+0xc8>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	4a04      	ldr	r2, [pc, #16]	; (8016964 <prvSwitchTimerLists+0xc4>)
 8016952:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016954:	4a04      	ldr	r2, [pc, #16]	; (8016968 <prvSwitchTimerLists+0xc8>)
 8016956:	697b      	ldr	r3, [r7, #20]
 8016958:	6013      	str	r3, [r2, #0]
}
 801695a:	bf00      	nop
 801695c:	3718      	adds	r7, #24
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	20001050 	.word	0x20001050
 8016968:	20001054 	.word	0x20001054

0801696c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016972:	f000 f941 	bl	8016bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016976:	4b15      	ldr	r3, [pc, #84]	; (80169cc <prvCheckForValidListAndQueue+0x60>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d120      	bne.n	80169c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801697e:	4814      	ldr	r0, [pc, #80]	; (80169d0 <prvCheckForValidListAndQueue+0x64>)
 8016980:	f7fd fa96 	bl	8013eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016984:	4813      	ldr	r0, [pc, #76]	; (80169d4 <prvCheckForValidListAndQueue+0x68>)
 8016986:	f7fd fa93 	bl	8013eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801698a:	4b13      	ldr	r3, [pc, #76]	; (80169d8 <prvCheckForValidListAndQueue+0x6c>)
 801698c:	4a10      	ldr	r2, [pc, #64]	; (80169d0 <prvCheckForValidListAndQueue+0x64>)
 801698e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016990:	4b12      	ldr	r3, [pc, #72]	; (80169dc <prvCheckForValidListAndQueue+0x70>)
 8016992:	4a10      	ldr	r2, [pc, #64]	; (80169d4 <prvCheckForValidListAndQueue+0x68>)
 8016994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016996:	2300      	movs	r3, #0
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	4b11      	ldr	r3, [pc, #68]	; (80169e0 <prvCheckForValidListAndQueue+0x74>)
 801699c:	4a11      	ldr	r2, [pc, #68]	; (80169e4 <prvCheckForValidListAndQueue+0x78>)
 801699e:	2110      	movs	r1, #16
 80169a0:	200a      	movs	r0, #10
 80169a2:	f7fd fba3 	bl	80140ec <xQueueGenericCreateStatic>
 80169a6:	4602      	mov	r2, r0
 80169a8:	4b08      	ldr	r3, [pc, #32]	; (80169cc <prvCheckForValidListAndQueue+0x60>)
 80169aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80169ac:	4b07      	ldr	r3, [pc, #28]	; (80169cc <prvCheckForValidListAndQueue+0x60>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d005      	beq.n	80169c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80169b4:	4b05      	ldr	r3, [pc, #20]	; (80169cc <prvCheckForValidListAndQueue+0x60>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	490b      	ldr	r1, [pc, #44]	; (80169e8 <prvCheckForValidListAndQueue+0x7c>)
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7fe fb90 	bl	80150e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80169c0:	f000 f94c 	bl	8016c5c <vPortExitCritical>
}
 80169c4:	bf00      	nop
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
 80169ca:	bf00      	nop
 80169cc:	20001058 	.word	0x20001058
 80169d0:	20001028 	.word	0x20001028
 80169d4:	2000103c 	.word	0x2000103c
 80169d8:	20001050 	.word	0x20001050
 80169dc:	20001054 	.word	0x20001054
 80169e0:	20001104 	.word	0x20001104
 80169e4:	20001064 	.word	0x20001064
 80169e8:	0801ab7c 	.word	0x0801ab7c

080169ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80169ec:	b480      	push	{r7}
 80169ee:	b085      	sub	sp, #20
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	60f8      	str	r0, [r7, #12]
 80169f4:	60b9      	str	r1, [r7, #8]
 80169f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	3b04      	subs	r3, #4
 80169fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	3b04      	subs	r3, #4
 8016a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	f023 0201 	bic.w	r2, r3, #1
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	3b04      	subs	r3, #4
 8016a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016a1c:	4a0c      	ldr	r2, [pc, #48]	; (8016a50 <pxPortInitialiseStack+0x64>)
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	3b14      	subs	r3, #20
 8016a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016a28:	687a      	ldr	r2, [r7, #4]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	3b04      	subs	r3, #4
 8016a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f06f 0202 	mvn.w	r2, #2
 8016a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	3b20      	subs	r3, #32
 8016a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016a42:	68fb      	ldr	r3, [r7, #12]
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3714      	adds	r7, #20
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4e:	4770      	bx	lr
 8016a50:	08016a55 	.word	0x08016a55

08016a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016a54:	b480      	push	{r7}
 8016a56:	b085      	sub	sp, #20
 8016a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016a5e:	4b13      	ldr	r3, [pc, #76]	; (8016aac <prvTaskExitError+0x58>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a66:	d00b      	beq.n	8016a80 <prvTaskExitError+0x2c>
 8016a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a6c:	b672      	cpsid	i
 8016a6e:	f383 8811 	msr	BASEPRI, r3
 8016a72:	f3bf 8f6f 	isb	sy
 8016a76:	f3bf 8f4f 	dsb	sy
 8016a7a:	b662      	cpsie	i
 8016a7c:	60fb      	str	r3, [r7, #12]
 8016a7e:	e7fe      	b.n	8016a7e <prvTaskExitError+0x2a>
 8016a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a84:	b672      	cpsid	i
 8016a86:	f383 8811 	msr	BASEPRI, r3
 8016a8a:	f3bf 8f6f 	isb	sy
 8016a8e:	f3bf 8f4f 	dsb	sy
 8016a92:	b662      	cpsie	i
 8016a94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016a96:	bf00      	nop
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d0fc      	beq.n	8016a98 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016a9e:	bf00      	nop
 8016aa0:	3714      	adds	r7, #20
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa8:	4770      	bx	lr
 8016aaa:	bf00      	nop
 8016aac:	2000011c 	.word	0x2000011c

08016ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016ab0:	4b07      	ldr	r3, [pc, #28]	; (8016ad0 <pxCurrentTCBConst2>)
 8016ab2:	6819      	ldr	r1, [r3, #0]
 8016ab4:	6808      	ldr	r0, [r1, #0]
 8016ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aba:	f380 8809 	msr	PSP, r0
 8016abe:	f3bf 8f6f 	isb	sy
 8016ac2:	f04f 0000 	mov.w	r0, #0
 8016ac6:	f380 8811 	msr	BASEPRI, r0
 8016aca:	4770      	bx	lr
 8016acc:	f3af 8000 	nop.w

08016ad0 <pxCurrentTCBConst2>:
 8016ad0:	20000b28 	.word	0x20000b28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016ad4:	bf00      	nop
 8016ad6:	bf00      	nop

08016ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016ad8:	4808      	ldr	r0, [pc, #32]	; (8016afc <prvPortStartFirstTask+0x24>)
 8016ada:	6800      	ldr	r0, [r0, #0]
 8016adc:	6800      	ldr	r0, [r0, #0]
 8016ade:	f380 8808 	msr	MSP, r0
 8016ae2:	f04f 0000 	mov.w	r0, #0
 8016ae6:	f380 8814 	msr	CONTROL, r0
 8016aea:	b662      	cpsie	i
 8016aec:	b661      	cpsie	f
 8016aee:	f3bf 8f4f 	dsb	sy
 8016af2:	f3bf 8f6f 	isb	sy
 8016af6:	df00      	svc	0
 8016af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016afa:	bf00      	nop
 8016afc:	e000ed08 	.word	0xe000ed08

08016b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b084      	sub	sp, #16
 8016b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016b06:	4b36      	ldr	r3, [pc, #216]	; (8016be0 <xPortStartScheduler+0xe0>)
 8016b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	b2db      	uxtb	r3, r3
 8016b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	22ff      	movs	r2, #255	; 0xff
 8016b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	b2db      	uxtb	r3, r3
 8016b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016b20:	78fb      	ldrb	r3, [r7, #3]
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016b28:	b2da      	uxtb	r2, r3
 8016b2a:	4b2e      	ldr	r3, [pc, #184]	; (8016be4 <xPortStartScheduler+0xe4>)
 8016b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016b2e:	4b2e      	ldr	r3, [pc, #184]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b30:	2207      	movs	r2, #7
 8016b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b34:	e009      	b.n	8016b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016b36:	4b2c      	ldr	r3, [pc, #176]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	4a2a      	ldr	r2, [pc, #168]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016b40:	78fb      	ldrb	r3, [r7, #3]
 8016b42:	b2db      	uxtb	r3, r3
 8016b44:	005b      	lsls	r3, r3, #1
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b4a:	78fb      	ldrb	r3, [r7, #3]
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b52:	2b80      	cmp	r3, #128	; 0x80
 8016b54:	d0ef      	beq.n	8016b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016b56:	4b24      	ldr	r3, [pc, #144]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	f1c3 0307 	rsb	r3, r3, #7
 8016b5e:	2b04      	cmp	r3, #4
 8016b60:	d00b      	beq.n	8016b7a <xPortStartScheduler+0x7a>
 8016b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b66:	b672      	cpsid	i
 8016b68:	f383 8811 	msr	BASEPRI, r3
 8016b6c:	f3bf 8f6f 	isb	sy
 8016b70:	f3bf 8f4f 	dsb	sy
 8016b74:	b662      	cpsie	i
 8016b76:	60bb      	str	r3, [r7, #8]
 8016b78:	e7fe      	b.n	8016b78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016b7a:	4b1b      	ldr	r3, [pc, #108]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	021b      	lsls	r3, r3, #8
 8016b80:	4a19      	ldr	r2, [pc, #100]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016b84:	4b18      	ldr	r3, [pc, #96]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016b8c:	4a16      	ldr	r2, [pc, #88]	; (8016be8 <xPortStartScheduler+0xe8>)
 8016b8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	b2da      	uxtb	r2, r3
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016b98:	4b14      	ldr	r3, [pc, #80]	; (8016bec <xPortStartScheduler+0xec>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	4a13      	ldr	r2, [pc, #76]	; (8016bec <xPortStartScheduler+0xec>)
 8016b9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016ba2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016ba4:	4b11      	ldr	r3, [pc, #68]	; (8016bec <xPortStartScheduler+0xec>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4a10      	ldr	r2, [pc, #64]	; (8016bec <xPortStartScheduler+0xec>)
 8016baa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016bae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016bb0:	f000 f8d4 	bl	8016d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016bb4:	4b0e      	ldr	r3, [pc, #56]	; (8016bf0 <xPortStartScheduler+0xf0>)
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016bba:	f000 f8f3 	bl	8016da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016bbe:	4b0d      	ldr	r3, [pc, #52]	; (8016bf4 <xPortStartScheduler+0xf4>)
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	4a0c      	ldr	r2, [pc, #48]	; (8016bf4 <xPortStartScheduler+0xf4>)
 8016bc4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016bc8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016bca:	f7ff ff85 	bl	8016ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016bce:	f7fe ff59 	bl	8015a84 <vTaskSwitchContext>
	prvTaskExitError();
 8016bd2:	f7ff ff3f 	bl	8016a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016bd6:	2300      	movs	r3, #0
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3710      	adds	r7, #16
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}
 8016be0:	e000e400 	.word	0xe000e400
 8016be4:	20001154 	.word	0x20001154
 8016be8:	20001158 	.word	0x20001158
 8016bec:	e000ed20 	.word	0xe000ed20
 8016bf0:	2000011c 	.word	0x2000011c
 8016bf4:	e000ef34 	.word	0xe000ef34

08016bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b083      	sub	sp, #12
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c02:	b672      	cpsid	i
 8016c04:	f383 8811 	msr	BASEPRI, r3
 8016c08:	f3bf 8f6f 	isb	sy
 8016c0c:	f3bf 8f4f 	dsb	sy
 8016c10:	b662      	cpsie	i
 8016c12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016c14:	4b0f      	ldr	r3, [pc, #60]	; (8016c54 <vPortEnterCritical+0x5c>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	3301      	adds	r3, #1
 8016c1a:	4a0e      	ldr	r2, [pc, #56]	; (8016c54 <vPortEnterCritical+0x5c>)
 8016c1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016c1e:	4b0d      	ldr	r3, [pc, #52]	; (8016c54 <vPortEnterCritical+0x5c>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b01      	cmp	r3, #1
 8016c24:	d110      	bne.n	8016c48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016c26:	4b0c      	ldr	r3, [pc, #48]	; (8016c58 <vPortEnterCritical+0x60>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d00b      	beq.n	8016c48 <vPortEnterCritical+0x50>
 8016c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c34:	b672      	cpsid	i
 8016c36:	f383 8811 	msr	BASEPRI, r3
 8016c3a:	f3bf 8f6f 	isb	sy
 8016c3e:	f3bf 8f4f 	dsb	sy
 8016c42:	b662      	cpsie	i
 8016c44:	603b      	str	r3, [r7, #0]
 8016c46:	e7fe      	b.n	8016c46 <vPortEnterCritical+0x4e>
	}
}
 8016c48:	bf00      	nop
 8016c4a:	370c      	adds	r7, #12
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c52:	4770      	bx	lr
 8016c54:	2000011c 	.word	0x2000011c
 8016c58:	e000ed04 	.word	0xe000ed04

08016c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016c5c:	b480      	push	{r7}
 8016c5e:	b083      	sub	sp, #12
 8016c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016c62:	4b12      	ldr	r3, [pc, #72]	; (8016cac <vPortExitCritical+0x50>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d10b      	bne.n	8016c82 <vPortExitCritical+0x26>
 8016c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c6e:	b672      	cpsid	i
 8016c70:	f383 8811 	msr	BASEPRI, r3
 8016c74:	f3bf 8f6f 	isb	sy
 8016c78:	f3bf 8f4f 	dsb	sy
 8016c7c:	b662      	cpsie	i
 8016c7e:	607b      	str	r3, [r7, #4]
 8016c80:	e7fe      	b.n	8016c80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016c82:	4b0a      	ldr	r3, [pc, #40]	; (8016cac <vPortExitCritical+0x50>)
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	3b01      	subs	r3, #1
 8016c88:	4a08      	ldr	r2, [pc, #32]	; (8016cac <vPortExitCritical+0x50>)
 8016c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016c8c:	4b07      	ldr	r3, [pc, #28]	; (8016cac <vPortExitCritical+0x50>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d104      	bne.n	8016c9e <vPortExitCritical+0x42>
 8016c94:	2300      	movs	r3, #0
 8016c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016c9e:	bf00      	nop
 8016ca0:	370c      	adds	r7, #12
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
 8016caa:	bf00      	nop
 8016cac:	2000011c 	.word	0x2000011c

08016cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016cb0:	f3ef 8009 	mrs	r0, PSP
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	4b15      	ldr	r3, [pc, #84]	; (8016d10 <pxCurrentTCBConst>)
 8016cba:	681a      	ldr	r2, [r3, #0]
 8016cbc:	f01e 0f10 	tst.w	lr, #16
 8016cc0:	bf08      	it	eq
 8016cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cca:	6010      	str	r0, [r2, #0]
 8016ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016cd4:	b672      	cpsid	i
 8016cd6:	f380 8811 	msr	BASEPRI, r0
 8016cda:	f3bf 8f4f 	dsb	sy
 8016cde:	f3bf 8f6f 	isb	sy
 8016ce2:	b662      	cpsie	i
 8016ce4:	f7fe fece 	bl	8015a84 <vTaskSwitchContext>
 8016ce8:	f04f 0000 	mov.w	r0, #0
 8016cec:	f380 8811 	msr	BASEPRI, r0
 8016cf0:	bc09      	pop	{r0, r3}
 8016cf2:	6819      	ldr	r1, [r3, #0]
 8016cf4:	6808      	ldr	r0, [r1, #0]
 8016cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfa:	f01e 0f10 	tst.w	lr, #16
 8016cfe:	bf08      	it	eq
 8016d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016d04:	f380 8809 	msr	PSP, r0
 8016d08:	f3bf 8f6f 	isb	sy
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop

08016d10 <pxCurrentTCBConst>:
 8016d10:	20000b28 	.word	0x20000b28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016d14:	bf00      	nop
 8016d16:	bf00      	nop

08016d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8016d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d22:	b672      	cpsid	i
 8016d24:	f383 8811 	msr	BASEPRI, r3
 8016d28:	f3bf 8f6f 	isb	sy
 8016d2c:	f3bf 8f4f 	dsb	sy
 8016d30:	b662      	cpsie	i
 8016d32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016d34:	f7fe fdec 	bl	8015910 <xTaskIncrementTick>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d003      	beq.n	8016d46 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d3e:	4b06      	ldr	r3, [pc, #24]	; (8016d58 <SysTick_Handler+0x40>)
 8016d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d44:	601a      	str	r2, [r3, #0]
 8016d46:	2300      	movs	r3, #0
 8016d48:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016d50:	bf00      	nop
 8016d52:	3708      	adds	r7, #8
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	e000ed04 	.word	0xe000ed04

08016d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016d5c:	b480      	push	{r7}
 8016d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016d60:	4b0b      	ldr	r3, [pc, #44]	; (8016d90 <vPortSetupTimerInterrupt+0x34>)
 8016d62:	2200      	movs	r2, #0
 8016d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016d66:	4b0b      	ldr	r3, [pc, #44]	; (8016d94 <vPortSetupTimerInterrupt+0x38>)
 8016d68:	2200      	movs	r2, #0
 8016d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016d6c:	4b0a      	ldr	r3, [pc, #40]	; (8016d98 <vPortSetupTimerInterrupt+0x3c>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	4a0a      	ldr	r2, [pc, #40]	; (8016d9c <vPortSetupTimerInterrupt+0x40>)
 8016d72:	fba2 2303 	umull	r2, r3, r2, r3
 8016d76:	099b      	lsrs	r3, r3, #6
 8016d78:	4a09      	ldr	r2, [pc, #36]	; (8016da0 <vPortSetupTimerInterrupt+0x44>)
 8016d7a:	3b01      	subs	r3, #1
 8016d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016d7e:	4b04      	ldr	r3, [pc, #16]	; (8016d90 <vPortSetupTimerInterrupt+0x34>)
 8016d80:	2207      	movs	r2, #7
 8016d82:	601a      	str	r2, [r3, #0]
}
 8016d84:	bf00      	nop
 8016d86:	46bd      	mov	sp, r7
 8016d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8c:	4770      	bx	lr
 8016d8e:	bf00      	nop
 8016d90:	e000e010 	.word	0xe000e010
 8016d94:	e000e018 	.word	0xe000e018
 8016d98:	20000000 	.word	0x20000000
 8016d9c:	10624dd3 	.word	0x10624dd3
 8016da0:	e000e014 	.word	0xe000e014

08016da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016db4 <vPortEnableVFP+0x10>
 8016da8:	6801      	ldr	r1, [r0, #0]
 8016daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016dae:	6001      	str	r1, [r0, #0]
 8016db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016db2:	bf00      	nop
 8016db4:	e000ed88 	.word	0xe000ed88

08016db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016db8:	b480      	push	{r7}
 8016dba:	b085      	sub	sp, #20
 8016dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016dbe:	f3ef 8305 	mrs	r3, IPSR
 8016dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	2b0f      	cmp	r3, #15
 8016dc8:	d915      	bls.n	8016df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016dca:	4a18      	ldr	r2, [pc, #96]	; (8016e2c <vPortValidateInterruptPriority+0x74>)
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	4413      	add	r3, r2
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016dd4:	4b16      	ldr	r3, [pc, #88]	; (8016e30 <vPortValidateInterruptPriority+0x78>)
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	7afa      	ldrb	r2, [r7, #11]
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d20b      	bcs.n	8016df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de2:	b672      	cpsid	i
 8016de4:	f383 8811 	msr	BASEPRI, r3
 8016de8:	f3bf 8f6f 	isb	sy
 8016dec:	f3bf 8f4f 	dsb	sy
 8016df0:	b662      	cpsie	i
 8016df2:	607b      	str	r3, [r7, #4]
 8016df4:	e7fe      	b.n	8016df4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016df6:	4b0f      	ldr	r3, [pc, #60]	; (8016e34 <vPortValidateInterruptPriority+0x7c>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016dfe:	4b0e      	ldr	r3, [pc, #56]	; (8016e38 <vPortValidateInterruptPriority+0x80>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d90b      	bls.n	8016e1e <vPortValidateInterruptPriority+0x66>
 8016e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e0a:	b672      	cpsid	i
 8016e0c:	f383 8811 	msr	BASEPRI, r3
 8016e10:	f3bf 8f6f 	isb	sy
 8016e14:	f3bf 8f4f 	dsb	sy
 8016e18:	b662      	cpsie	i
 8016e1a:	603b      	str	r3, [r7, #0]
 8016e1c:	e7fe      	b.n	8016e1c <vPortValidateInterruptPriority+0x64>
	}
 8016e1e:	bf00      	nop
 8016e20:	3714      	adds	r7, #20
 8016e22:	46bd      	mov	sp, r7
 8016e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop
 8016e2c:	e000e3f0 	.word	0xe000e3f0
 8016e30:	20001154 	.word	0x20001154
 8016e34:	e000ed0c 	.word	0xe000ed0c
 8016e38:	20001158 	.word	0x20001158

08016e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b08a      	sub	sp, #40	; 0x28
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016e44:	2300      	movs	r3, #0
 8016e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016e48:	f7fe fc94 	bl	8015774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016e4c:	4b5a      	ldr	r3, [pc, #360]	; (8016fb8 <pvPortMalloc+0x17c>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d101      	bne.n	8016e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016e54:	f000 f916 	bl	8017084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016e58:	4b58      	ldr	r3, [pc, #352]	; (8016fbc <pvPortMalloc+0x180>)
 8016e5a:	681a      	ldr	r2, [r3, #0]
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	4013      	ands	r3, r2
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	f040 8090 	bne.w	8016f86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d01e      	beq.n	8016eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016e6c:	2208      	movs	r2, #8
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	4413      	add	r3, r2
 8016e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f003 0307 	and.w	r3, r3, #7
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d015      	beq.n	8016eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f023 0307 	bic.w	r3, r3, #7
 8016e84:	3308      	adds	r3, #8
 8016e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f003 0307 	and.w	r3, r3, #7
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d00b      	beq.n	8016eaa <pvPortMalloc+0x6e>
 8016e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e96:	b672      	cpsid	i
 8016e98:	f383 8811 	msr	BASEPRI, r3
 8016e9c:	f3bf 8f6f 	isb	sy
 8016ea0:	f3bf 8f4f 	dsb	sy
 8016ea4:	b662      	cpsie	i
 8016ea6:	617b      	str	r3, [r7, #20]
 8016ea8:	e7fe      	b.n	8016ea8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d06a      	beq.n	8016f86 <pvPortMalloc+0x14a>
 8016eb0:	4b43      	ldr	r3, [pc, #268]	; (8016fc0 <pvPortMalloc+0x184>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d865      	bhi.n	8016f86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016eba:	4b42      	ldr	r3, [pc, #264]	; (8016fc4 <pvPortMalloc+0x188>)
 8016ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016ebe:	4b41      	ldr	r3, [pc, #260]	; (8016fc4 <pvPortMalloc+0x188>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016ec4:	e004      	b.n	8016ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	d903      	bls.n	8016ee2 <pvPortMalloc+0xa6>
 8016eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d1f1      	bne.n	8016ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016ee2:	4b35      	ldr	r3, [pc, #212]	; (8016fb8 <pvPortMalloc+0x17c>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ee8:	429a      	cmp	r2, r3
 8016eea:	d04c      	beq.n	8016f86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016eec:	6a3b      	ldr	r3, [r7, #32]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	2208      	movs	r2, #8
 8016ef2:	4413      	add	r3, r2
 8016ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef8:	681a      	ldr	r2, [r3, #0]
 8016efa:	6a3b      	ldr	r3, [r7, #32]
 8016efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f00:	685a      	ldr	r2, [r3, #4]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	1ad2      	subs	r2, r2, r3
 8016f06:	2308      	movs	r3, #8
 8016f08:	005b      	lsls	r3, r3, #1
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d920      	bls.n	8016f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	4413      	add	r3, r2
 8016f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f16:	69bb      	ldr	r3, [r7, #24]
 8016f18:	f003 0307 	and.w	r3, r3, #7
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d00b      	beq.n	8016f38 <pvPortMalloc+0xfc>
 8016f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f24:	b672      	cpsid	i
 8016f26:	f383 8811 	msr	BASEPRI, r3
 8016f2a:	f3bf 8f6f 	isb	sy
 8016f2e:	f3bf 8f4f 	dsb	sy
 8016f32:	b662      	cpsie	i
 8016f34:	613b      	str	r3, [r7, #16]
 8016f36:	e7fe      	b.n	8016f36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3a:	685a      	ldr	r2, [r3, #4]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	1ad2      	subs	r2, r2, r3
 8016f40:	69bb      	ldr	r3, [r7, #24]
 8016f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f46:	687a      	ldr	r2, [r7, #4]
 8016f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016f4a:	69b8      	ldr	r0, [r7, #24]
 8016f4c:	f000 f8fc 	bl	8017148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016f50:	4b1b      	ldr	r3, [pc, #108]	; (8016fc0 <pvPortMalloc+0x184>)
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	1ad3      	subs	r3, r2, r3
 8016f5a:	4a19      	ldr	r2, [pc, #100]	; (8016fc0 <pvPortMalloc+0x184>)
 8016f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016f5e:	4b18      	ldr	r3, [pc, #96]	; (8016fc0 <pvPortMalloc+0x184>)
 8016f60:	681a      	ldr	r2, [r3, #0]
 8016f62:	4b19      	ldr	r3, [pc, #100]	; (8016fc8 <pvPortMalloc+0x18c>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d203      	bcs.n	8016f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016f6a:	4b15      	ldr	r3, [pc, #84]	; (8016fc0 <pvPortMalloc+0x184>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	4a16      	ldr	r2, [pc, #88]	; (8016fc8 <pvPortMalloc+0x18c>)
 8016f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f74:	685a      	ldr	r2, [r3, #4]
 8016f76:	4b11      	ldr	r3, [pc, #68]	; (8016fbc <pvPortMalloc+0x180>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	431a      	orrs	r2, r3
 8016f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f82:	2200      	movs	r2, #0
 8016f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016f86:	f7fe fc03 	bl	8015790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	f003 0307 	and.w	r3, r3, #7
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d00b      	beq.n	8016fac <pvPortMalloc+0x170>
 8016f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f98:	b672      	cpsid	i
 8016f9a:	f383 8811 	msr	BASEPRI, r3
 8016f9e:	f3bf 8f6f 	isb	sy
 8016fa2:	f3bf 8f4f 	dsb	sy
 8016fa6:	b662      	cpsie	i
 8016fa8:	60fb      	str	r3, [r7, #12]
 8016faa:	e7fe      	b.n	8016faa <pvPortMalloc+0x16e>
	return pvReturn;
 8016fac:	69fb      	ldr	r3, [r7, #28]
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3728      	adds	r7, #40	; 0x28
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}
 8016fb6:	bf00      	nop
 8016fb8:	20008964 	.word	0x20008964
 8016fbc:	20008970 	.word	0x20008970
 8016fc0:	20008968 	.word	0x20008968
 8016fc4:	2000895c 	.word	0x2000895c
 8016fc8:	2000896c 	.word	0x2000896c

08016fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b086      	sub	sp, #24
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d04a      	beq.n	8017074 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016fde:	2308      	movs	r3, #8
 8016fe0:	425b      	negs	r3, r3
 8016fe2:	697a      	ldr	r2, [r7, #20]
 8016fe4:	4413      	add	r3, r2
 8016fe6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	685a      	ldr	r2, [r3, #4]
 8016ff0:	4b22      	ldr	r3, [pc, #136]	; (801707c <vPortFree+0xb0>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	4013      	ands	r3, r2
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d10b      	bne.n	8017012 <vPortFree+0x46>
 8016ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffe:	b672      	cpsid	i
 8017000:	f383 8811 	msr	BASEPRI, r3
 8017004:	f3bf 8f6f 	isb	sy
 8017008:	f3bf 8f4f 	dsb	sy
 801700c:	b662      	cpsie	i
 801700e:	60fb      	str	r3, [r7, #12]
 8017010:	e7fe      	b.n	8017010 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d00b      	beq.n	8017032 <vPortFree+0x66>
 801701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801701e:	b672      	cpsid	i
 8017020:	f383 8811 	msr	BASEPRI, r3
 8017024:	f3bf 8f6f 	isb	sy
 8017028:	f3bf 8f4f 	dsb	sy
 801702c:	b662      	cpsie	i
 801702e:	60bb      	str	r3, [r7, #8]
 8017030:	e7fe      	b.n	8017030 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017032:	693b      	ldr	r3, [r7, #16]
 8017034:	685a      	ldr	r2, [r3, #4]
 8017036:	4b11      	ldr	r3, [pc, #68]	; (801707c <vPortFree+0xb0>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	4013      	ands	r3, r2
 801703c:	2b00      	cmp	r3, #0
 801703e:	d019      	beq.n	8017074 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017040:	693b      	ldr	r3, [r7, #16]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d115      	bne.n	8017074 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	685a      	ldr	r2, [r3, #4]
 801704c:	4b0b      	ldr	r3, [pc, #44]	; (801707c <vPortFree+0xb0>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	43db      	mvns	r3, r3
 8017052:	401a      	ands	r2, r3
 8017054:	693b      	ldr	r3, [r7, #16]
 8017056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017058:	f7fe fb8c 	bl	8015774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801705c:	693b      	ldr	r3, [r7, #16]
 801705e:	685a      	ldr	r2, [r3, #4]
 8017060:	4b07      	ldr	r3, [pc, #28]	; (8017080 <vPortFree+0xb4>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	4413      	add	r3, r2
 8017066:	4a06      	ldr	r2, [pc, #24]	; (8017080 <vPortFree+0xb4>)
 8017068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801706a:	6938      	ldr	r0, [r7, #16]
 801706c:	f000 f86c 	bl	8017148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017070:	f7fe fb8e 	bl	8015790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017074:	bf00      	nop
 8017076:	3718      	adds	r7, #24
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}
 801707c:	20008970 	.word	0x20008970
 8017080:	20008968 	.word	0x20008968

08017084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017084:	b480      	push	{r7}
 8017086:	b085      	sub	sp, #20
 8017088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801708a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801708e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017090:	4b27      	ldr	r3, [pc, #156]	; (8017130 <prvHeapInit+0xac>)
 8017092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	f003 0307 	and.w	r3, r3, #7
 801709a:	2b00      	cmp	r3, #0
 801709c:	d00c      	beq.n	80170b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	3307      	adds	r3, #7
 80170a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	f023 0307 	bic.w	r3, r3, #7
 80170aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80170ac:	68ba      	ldr	r2, [r7, #8]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	1ad3      	subs	r3, r2, r3
 80170b2:	4a1f      	ldr	r2, [pc, #124]	; (8017130 <prvHeapInit+0xac>)
 80170b4:	4413      	add	r3, r2
 80170b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80170bc:	4a1d      	ldr	r2, [pc, #116]	; (8017134 <prvHeapInit+0xb0>)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80170c2:	4b1c      	ldr	r3, [pc, #112]	; (8017134 <prvHeapInit+0xb0>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	68ba      	ldr	r2, [r7, #8]
 80170cc:	4413      	add	r3, r2
 80170ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80170d0:	2208      	movs	r2, #8
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	1a9b      	subs	r3, r3, r2
 80170d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	f023 0307 	bic.w	r3, r3, #7
 80170de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	4a15      	ldr	r2, [pc, #84]	; (8017138 <prvHeapInit+0xb4>)
 80170e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80170e6:	4b14      	ldr	r3, [pc, #80]	; (8017138 <prvHeapInit+0xb4>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	2200      	movs	r2, #0
 80170ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80170ee:	4b12      	ldr	r3, [pc, #72]	; (8017138 <prvHeapInit+0xb4>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	2200      	movs	r2, #0
 80170f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	68fa      	ldr	r2, [r7, #12]
 80170fe:	1ad2      	subs	r2, r2, r3
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017104:	4b0c      	ldr	r3, [pc, #48]	; (8017138 <prvHeapInit+0xb4>)
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	685b      	ldr	r3, [r3, #4]
 8017110:	4a0a      	ldr	r2, [pc, #40]	; (801713c <prvHeapInit+0xb8>)
 8017112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	4a09      	ldr	r2, [pc, #36]	; (8017140 <prvHeapInit+0xbc>)
 801711a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801711c:	4b09      	ldr	r3, [pc, #36]	; (8017144 <prvHeapInit+0xc0>)
 801711e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017122:	601a      	str	r2, [r3, #0]
}
 8017124:	bf00      	nop
 8017126:	3714      	adds	r7, #20
 8017128:	46bd      	mov	sp, r7
 801712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712e:	4770      	bx	lr
 8017130:	2000115c 	.word	0x2000115c
 8017134:	2000895c 	.word	0x2000895c
 8017138:	20008964 	.word	0x20008964
 801713c:	2000896c 	.word	0x2000896c
 8017140:	20008968 	.word	0x20008968
 8017144:	20008970 	.word	0x20008970

08017148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017148:	b480      	push	{r7}
 801714a:	b085      	sub	sp, #20
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017150:	4b28      	ldr	r3, [pc, #160]	; (80171f4 <prvInsertBlockIntoFreeList+0xac>)
 8017152:	60fb      	str	r3, [r7, #12]
 8017154:	e002      	b.n	801715c <prvInsertBlockIntoFreeList+0x14>
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	60fb      	str	r3, [r7, #12]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	687a      	ldr	r2, [r7, #4]
 8017162:	429a      	cmp	r2, r3
 8017164:	d8f7      	bhi.n	8017156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	685b      	ldr	r3, [r3, #4]
 801716e:	68ba      	ldr	r2, [r7, #8]
 8017170:	4413      	add	r3, r2
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	429a      	cmp	r2, r3
 8017176:	d108      	bne.n	801718a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	685a      	ldr	r2, [r3, #4]
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	441a      	add	r2, r3
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	68ba      	ldr	r2, [r7, #8]
 8017194:	441a      	add	r2, r3
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	429a      	cmp	r2, r3
 801719c:	d118      	bne.n	80171d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681a      	ldr	r2, [r3, #0]
 80171a2:	4b15      	ldr	r3, [pc, #84]	; (80171f8 <prvInsertBlockIntoFreeList+0xb0>)
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d00d      	beq.n	80171c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	685a      	ldr	r2, [r3, #4]
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	441a      	add	r2, r3
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	681a      	ldr	r2, [r3, #0]
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	601a      	str	r2, [r3, #0]
 80171c4:	e008      	b.n	80171d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80171c6:	4b0c      	ldr	r3, [pc, #48]	; (80171f8 <prvInsertBlockIntoFreeList+0xb0>)
 80171c8:	681a      	ldr	r2, [r3, #0]
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	601a      	str	r2, [r3, #0]
 80171ce:	e003      	b.n	80171d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	681a      	ldr	r2, [r3, #0]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80171d8:	68fa      	ldr	r2, [r7, #12]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d002      	beq.n	80171e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171e6:	bf00      	nop
 80171e8:	3714      	adds	r7, #20
 80171ea:	46bd      	mov	sp, r7
 80171ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f0:	4770      	bx	lr
 80171f2:	bf00      	nop
 80171f4:	2000895c 	.word	0x2000895c
 80171f8:	20008964 	.word	0x20008964

080171fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017200:	2200      	movs	r2, #0
 8017202:	4912      	ldr	r1, [pc, #72]	; (801724c <MX_USB_DEVICE_Init+0x50>)
 8017204:	4812      	ldr	r0, [pc, #72]	; (8017250 <MX_USB_DEVICE_Init+0x54>)
 8017206:	f7f7 ff79 	bl	800f0fc <USBD_Init>
 801720a:	4603      	mov	r3, r0
 801720c:	2b00      	cmp	r3, #0
 801720e:	d001      	beq.n	8017214 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017210:	f7ed f8e6 	bl	80043e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017214:	490f      	ldr	r1, [pc, #60]	; (8017254 <MX_USB_DEVICE_Init+0x58>)
 8017216:	480e      	ldr	r0, [pc, #56]	; (8017250 <MX_USB_DEVICE_Init+0x54>)
 8017218:	f7f7 ffa6 	bl	800f168 <USBD_RegisterClass>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d001      	beq.n	8017226 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017222:	f7ed f8dd 	bl	80043e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017226:	490c      	ldr	r1, [pc, #48]	; (8017258 <MX_USB_DEVICE_Init+0x5c>)
 8017228:	4809      	ldr	r0, [pc, #36]	; (8017250 <MX_USB_DEVICE_Init+0x54>)
 801722a:	f7f7 fefb 	bl	800f024 <USBD_CDC_RegisterInterface>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d001      	beq.n	8017238 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017234:	f7ed f8d4 	bl	80043e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017238:	4805      	ldr	r0, [pc, #20]	; (8017250 <MX_USB_DEVICE_Init+0x54>)
 801723a:	f7f7 ffb6 	bl	800f1aa <USBD_Start>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d001      	beq.n	8017248 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017244:	f7ed f8cc 	bl	80043e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017248:	bf00      	nop
 801724a:	bd80      	pop	{r7, pc}
 801724c:	20000134 	.word	0x20000134
 8017250:	200276c8 	.word	0x200276c8
 8017254:	20000018 	.word	0x20000018
 8017258:	20000120 	.word	0x20000120

0801725c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017260:	2200      	movs	r2, #0
 8017262:	4905      	ldr	r1, [pc, #20]	; (8017278 <CDC_Init_FS+0x1c>)
 8017264:	4805      	ldr	r0, [pc, #20]	; (801727c <CDC_Init_FS+0x20>)
 8017266:	f7f7 fef2 	bl	800f04e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801726a:	4905      	ldr	r1, [pc, #20]	; (8017280 <CDC_Init_FS+0x24>)
 801726c:	4803      	ldr	r0, [pc, #12]	; (801727c <CDC_Init_FS+0x20>)
 801726e:	f7f7 ff07 	bl	800f080 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017274:	4618      	mov	r0, r3
 8017276:	bd80      	pop	{r7, pc}
 8017278:	20028198 	.word	0x20028198
 801727c:	200276c8 	.word	0x200276c8
 8017280:	20027998 	.word	0x20027998

08017284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017284:	b480      	push	{r7}
 8017286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801728a:	4618      	mov	r0, r3
 801728c:	46bd      	mov	sp, r7
 801728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017292:	4770      	bx	lr

08017294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017294:	b480      	push	{r7}
 8017296:	b083      	sub	sp, #12
 8017298:	af00      	add	r7, sp, #0
 801729a:	4603      	mov	r3, r0
 801729c:	6039      	str	r1, [r7, #0]
 801729e:	71fb      	strb	r3, [r7, #7]
 80172a0:	4613      	mov	r3, r2
 80172a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80172a4:	79fb      	ldrb	r3, [r7, #7]
 80172a6:	2b23      	cmp	r3, #35	; 0x23
 80172a8:	d84a      	bhi.n	8017340 <CDC_Control_FS+0xac>
 80172aa:	a201      	add	r2, pc, #4	; (adr r2, 80172b0 <CDC_Control_FS+0x1c>)
 80172ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172b0:	08017341 	.word	0x08017341
 80172b4:	08017341 	.word	0x08017341
 80172b8:	08017341 	.word	0x08017341
 80172bc:	08017341 	.word	0x08017341
 80172c0:	08017341 	.word	0x08017341
 80172c4:	08017341 	.word	0x08017341
 80172c8:	08017341 	.word	0x08017341
 80172cc:	08017341 	.word	0x08017341
 80172d0:	08017341 	.word	0x08017341
 80172d4:	08017341 	.word	0x08017341
 80172d8:	08017341 	.word	0x08017341
 80172dc:	08017341 	.word	0x08017341
 80172e0:	08017341 	.word	0x08017341
 80172e4:	08017341 	.word	0x08017341
 80172e8:	08017341 	.word	0x08017341
 80172ec:	08017341 	.word	0x08017341
 80172f0:	08017341 	.word	0x08017341
 80172f4:	08017341 	.word	0x08017341
 80172f8:	08017341 	.word	0x08017341
 80172fc:	08017341 	.word	0x08017341
 8017300:	08017341 	.word	0x08017341
 8017304:	08017341 	.word	0x08017341
 8017308:	08017341 	.word	0x08017341
 801730c:	08017341 	.word	0x08017341
 8017310:	08017341 	.word	0x08017341
 8017314:	08017341 	.word	0x08017341
 8017318:	08017341 	.word	0x08017341
 801731c:	08017341 	.word	0x08017341
 8017320:	08017341 	.word	0x08017341
 8017324:	08017341 	.word	0x08017341
 8017328:	08017341 	.word	0x08017341
 801732c:	08017341 	.word	0x08017341
 8017330:	08017341 	.word	0x08017341
 8017334:	08017341 	.word	0x08017341
 8017338:	08017341 	.word	0x08017341
 801733c:	08017341 	.word	0x08017341
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017340:	bf00      	nop
  }

  return (USBD_OK);
 8017342:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017344:	4618      	mov	r0, r3
 8017346:	370c      	adds	r7, #12
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr

08017350 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(osMutexAcquire(usb_data_mutex, 10)){
 801735a:	4b10      	ldr	r3, [pc, #64]	; (801739c <CDC_Receive_FS+0x4c>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	210a      	movs	r1, #10
 8017360:	4618      	mov	r0, r3
 8017362:	f7fc f9c5 	bl	80136f0 <osMutexAcquire>
 8017366:	4603      	mov	r3, r0
 8017368:	2b00      	cmp	r3, #0
 801736a:	d00b      	beq.n	8017384 <CDC_Receive_FS+0x34>
		memcpy(Buf, usb_data_buffer, *Len);
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	461a      	mov	r2, r3
 8017372:	490b      	ldr	r1, [pc, #44]	; (80173a0 <CDC_Receive_FS+0x50>)
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f000 fcd5 	bl	8017d24 <memcpy>
		osMutexRelease(usb_data_mutex);
 801737a:	4b08      	ldr	r3, [pc, #32]	; (801739c <CDC_Receive_FS+0x4c>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	4618      	mov	r0, r3
 8017380:	f7fc fa14 	bl	80137ac <osMutexRelease>
	}



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017384:	6879      	ldr	r1, [r7, #4]
 8017386:	4807      	ldr	r0, [pc, #28]	; (80173a4 <CDC_Receive_FS+0x54>)
 8017388:	f7f7 fe7a 	bl	800f080 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801738c:	4805      	ldr	r0, [pc, #20]	; (80173a4 <CDC_Receive_FS+0x54>)
 801738e:	f7f7 fe8b 	bl	800f0a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017392:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017394:	4618      	mov	r0, r3
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}
 801739c:	20008acc 	.word	0x20008acc
 80173a0:	200002c8 	.word	0x200002c8
 80173a4:	200276c8 	.word	0x200276c8

080173a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b087      	sub	sp, #28
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	4613      	mov	r3, r2
 80173b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80173b6:	2300      	movs	r3, #0
 80173b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80173ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80173be:	4618      	mov	r0, r3
 80173c0:	371c      	adds	r7, #28
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr
	...

080173cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b083      	sub	sp, #12
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	4603      	mov	r3, r0
 80173d4:	6039      	str	r1, [r7, #0]
 80173d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	2212      	movs	r2, #18
 80173dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80173de:	4b03      	ldr	r3, [pc, #12]	; (80173ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	370c      	adds	r7, #12
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr
 80173ec:	20000154 	.word	0x20000154

080173f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173f0:	b480      	push	{r7}
 80173f2:	b083      	sub	sp, #12
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	4603      	mov	r3, r0
 80173f8:	6039      	str	r1, [r7, #0]
 80173fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	2204      	movs	r2, #4
 8017400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017402:	4b03      	ldr	r3, [pc, #12]	; (8017410 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017404:	4618      	mov	r0, r3
 8017406:	370c      	adds	r7, #12
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr
 8017410:	20000174 	.word	0x20000174

08017414 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b082      	sub	sp, #8
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	6039      	str	r1, [r7, #0]
 801741e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017420:	79fb      	ldrb	r3, [r7, #7]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d105      	bne.n	8017432 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017426:	683a      	ldr	r2, [r7, #0]
 8017428:	4907      	ldr	r1, [pc, #28]	; (8017448 <USBD_FS_ProductStrDescriptor+0x34>)
 801742a:	4808      	ldr	r0, [pc, #32]	; (801744c <USBD_FS_ProductStrDescriptor+0x38>)
 801742c:	f7f8 feb5 	bl	801019a <USBD_GetString>
 8017430:	e004      	b.n	801743c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017432:	683a      	ldr	r2, [r7, #0]
 8017434:	4904      	ldr	r1, [pc, #16]	; (8017448 <USBD_FS_ProductStrDescriptor+0x34>)
 8017436:	4805      	ldr	r0, [pc, #20]	; (801744c <USBD_FS_ProductStrDescriptor+0x38>)
 8017438:	f7f8 feaf 	bl	801019a <USBD_GetString>
  }
  return USBD_StrDesc;
 801743c:	4b02      	ldr	r3, [pc, #8]	; (8017448 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801743e:	4618      	mov	r0, r3
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	20028998 	.word	0x20028998
 801744c:	0801ab84 	.word	0x0801ab84

08017450 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
 8017456:	4603      	mov	r3, r0
 8017458:	6039      	str	r1, [r7, #0]
 801745a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801745c:	683a      	ldr	r2, [r7, #0]
 801745e:	4904      	ldr	r1, [pc, #16]	; (8017470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017460:	4804      	ldr	r0, [pc, #16]	; (8017474 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017462:	f7f8 fe9a 	bl	801019a <USBD_GetString>
  return USBD_StrDesc;
 8017466:	4b02      	ldr	r3, [pc, #8]	; (8017470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017468:	4618      	mov	r0, r3
 801746a:	3708      	adds	r7, #8
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}
 8017470:	20028998 	.word	0x20028998
 8017474:	0801ab9c 	.word	0x0801ab9c

08017478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	4603      	mov	r3, r0
 8017480:	6039      	str	r1, [r7, #0]
 8017482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	221a      	movs	r2, #26
 8017488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801748a:	f000 f855 	bl	8017538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801748e:	4b02      	ldr	r3, [pc, #8]	; (8017498 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017490:	4618      	mov	r0, r3
 8017492:	3708      	adds	r7, #8
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	20000178 	.word	0x20000178

0801749c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	4603      	mov	r3, r0
 80174a4:	6039      	str	r1, [r7, #0]
 80174a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80174a8:	79fb      	ldrb	r3, [r7, #7]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d105      	bne.n	80174ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80174ae:	683a      	ldr	r2, [r7, #0]
 80174b0:	4907      	ldr	r1, [pc, #28]	; (80174d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80174b2:	4808      	ldr	r0, [pc, #32]	; (80174d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80174b4:	f7f8 fe71 	bl	801019a <USBD_GetString>
 80174b8:	e004      	b.n	80174c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80174ba:	683a      	ldr	r2, [r7, #0]
 80174bc:	4904      	ldr	r1, [pc, #16]	; (80174d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80174be:	4805      	ldr	r0, [pc, #20]	; (80174d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80174c0:	f7f8 fe6b 	bl	801019a <USBD_GetString>
  }
  return USBD_StrDesc;
 80174c4:	4b02      	ldr	r3, [pc, #8]	; (80174d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3708      	adds	r7, #8
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	20028998 	.word	0x20028998
 80174d4:	0801abb0 	.word	0x0801abb0

080174d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	4603      	mov	r3, r0
 80174e0:	6039      	str	r1, [r7, #0]
 80174e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80174e4:	79fb      	ldrb	r3, [r7, #7]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d105      	bne.n	80174f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80174ea:	683a      	ldr	r2, [r7, #0]
 80174ec:	4907      	ldr	r1, [pc, #28]	; (801750c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80174ee:	4808      	ldr	r0, [pc, #32]	; (8017510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80174f0:	f7f8 fe53 	bl	801019a <USBD_GetString>
 80174f4:	e004      	b.n	8017500 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80174f6:	683a      	ldr	r2, [r7, #0]
 80174f8:	4904      	ldr	r1, [pc, #16]	; (801750c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80174fa:	4805      	ldr	r0, [pc, #20]	; (8017510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80174fc:	f7f8 fe4d 	bl	801019a <USBD_GetString>
  }
  return USBD_StrDesc;
 8017500:	4b02      	ldr	r3, [pc, #8]	; (801750c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017502:	4618      	mov	r0, r3
 8017504:	3708      	adds	r7, #8
 8017506:	46bd      	mov	sp, r7
 8017508:	bd80      	pop	{r7, pc}
 801750a:	bf00      	nop
 801750c:	20028998 	.word	0x20028998
 8017510:	0801abbc 	.word	0x0801abbc

08017514 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	4603      	mov	r3, r0
 801751c:	6039      	str	r1, [r7, #0]
 801751e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	220c      	movs	r2, #12
 8017524:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017526:	4b03      	ldr	r3, [pc, #12]	; (8017534 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017528:	4618      	mov	r0, r3
 801752a:	370c      	adds	r7, #12
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr
 8017534:	20000168 	.word	0x20000168

08017538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b084      	sub	sp, #16
 801753c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801753e:	4b0f      	ldr	r3, [pc, #60]	; (801757c <Get_SerialNum+0x44>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017544:	4b0e      	ldr	r3, [pc, #56]	; (8017580 <Get_SerialNum+0x48>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801754a:	4b0e      	ldr	r3, [pc, #56]	; (8017584 <Get_SerialNum+0x4c>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017550:	68fa      	ldr	r2, [r7, #12]
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	4413      	add	r3, r2
 8017556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d009      	beq.n	8017572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801755e:	2208      	movs	r2, #8
 8017560:	4909      	ldr	r1, [pc, #36]	; (8017588 <Get_SerialNum+0x50>)
 8017562:	68f8      	ldr	r0, [r7, #12]
 8017564:	f000 f814 	bl	8017590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017568:	2204      	movs	r2, #4
 801756a:	4908      	ldr	r1, [pc, #32]	; (801758c <Get_SerialNum+0x54>)
 801756c:	68b8      	ldr	r0, [r7, #8]
 801756e:	f000 f80f 	bl	8017590 <IntToUnicode>
  }
}
 8017572:	bf00      	nop
 8017574:	3710      	adds	r7, #16
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}
 801757a:	bf00      	nop
 801757c:	1ff0f420 	.word	0x1ff0f420
 8017580:	1ff0f424 	.word	0x1ff0f424
 8017584:	1ff0f428 	.word	0x1ff0f428
 8017588:	2000017a 	.word	0x2000017a
 801758c:	2000018a 	.word	0x2000018a

08017590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017590:	b480      	push	{r7}
 8017592:	b087      	sub	sp, #28
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	60b9      	str	r1, [r7, #8]
 801759a:	4613      	mov	r3, r2
 801759c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801759e:	2300      	movs	r3, #0
 80175a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80175a2:	2300      	movs	r3, #0
 80175a4:	75fb      	strb	r3, [r7, #23]
 80175a6:	e027      	b.n	80175f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	0f1b      	lsrs	r3, r3, #28
 80175ac:	2b09      	cmp	r3, #9
 80175ae:	d80b      	bhi.n	80175c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	0f1b      	lsrs	r3, r3, #28
 80175b4:	b2da      	uxtb	r2, r3
 80175b6:	7dfb      	ldrb	r3, [r7, #23]
 80175b8:	005b      	lsls	r3, r3, #1
 80175ba:	4619      	mov	r1, r3
 80175bc:	68bb      	ldr	r3, [r7, #8]
 80175be:	440b      	add	r3, r1
 80175c0:	3230      	adds	r2, #48	; 0x30
 80175c2:	b2d2      	uxtb	r2, r2
 80175c4:	701a      	strb	r2, [r3, #0]
 80175c6:	e00a      	b.n	80175de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	0f1b      	lsrs	r3, r3, #28
 80175cc:	b2da      	uxtb	r2, r3
 80175ce:	7dfb      	ldrb	r3, [r7, #23]
 80175d0:	005b      	lsls	r3, r3, #1
 80175d2:	4619      	mov	r1, r3
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	440b      	add	r3, r1
 80175d8:	3237      	adds	r2, #55	; 0x37
 80175da:	b2d2      	uxtb	r2, r2
 80175dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	011b      	lsls	r3, r3, #4
 80175e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80175e4:	7dfb      	ldrb	r3, [r7, #23]
 80175e6:	005b      	lsls	r3, r3, #1
 80175e8:	3301      	adds	r3, #1
 80175ea:	68ba      	ldr	r2, [r7, #8]
 80175ec:	4413      	add	r3, r2
 80175ee:	2200      	movs	r2, #0
 80175f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80175f2:	7dfb      	ldrb	r3, [r7, #23]
 80175f4:	3301      	adds	r3, #1
 80175f6:	75fb      	strb	r3, [r7, #23]
 80175f8:	7dfa      	ldrb	r2, [r7, #23]
 80175fa:	79fb      	ldrb	r3, [r7, #7]
 80175fc:	429a      	cmp	r2, r3
 80175fe:	d3d3      	bcc.n	80175a8 <IntToUnicode+0x18>
  }
}
 8017600:	bf00      	nop
 8017602:	371c      	adds	r7, #28
 8017604:	46bd      	mov	sp, r7
 8017606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760a:	4770      	bx	lr

0801760c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b08a      	sub	sp, #40	; 0x28
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017614:	f107 0314 	add.w	r3, r7, #20
 8017618:	2200      	movs	r2, #0
 801761a:	601a      	str	r2, [r3, #0]
 801761c:	605a      	str	r2, [r3, #4]
 801761e:	609a      	str	r2, [r3, #8]
 8017620:	60da      	str	r2, [r3, #12]
 8017622:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801762c:	d13c      	bne.n	80176a8 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801762e:	4b20      	ldr	r3, [pc, #128]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 8017630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017632:	4a1f      	ldr	r2, [pc, #124]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 8017634:	f043 0301 	orr.w	r3, r3, #1
 8017638:	6313      	str	r3, [r2, #48]	; 0x30
 801763a:	4b1d      	ldr	r3, [pc, #116]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 801763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801763e:	f003 0301 	and.w	r3, r3, #1
 8017642:	613b      	str	r3, [r7, #16]
 8017644:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017646:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801764a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801764c:	2302      	movs	r3, #2
 801764e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017650:	2300      	movs	r3, #0
 8017652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017654:	2303      	movs	r3, #3
 8017656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017658:	230a      	movs	r3, #10
 801765a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801765c:	f107 0314 	add.w	r3, r7, #20
 8017660:	4619      	mov	r1, r3
 8017662:	4814      	ldr	r0, [pc, #80]	; (80176b4 <HAL_PCD_MspInit+0xa8>)
 8017664:	f7ee feb0 	bl	80063c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017668:	4b11      	ldr	r3, [pc, #68]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 801766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801766c:	4a10      	ldr	r2, [pc, #64]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 801766e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017672:	6353      	str	r3, [r2, #52]	; 0x34
 8017674:	4b0e      	ldr	r3, [pc, #56]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 8017676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801767c:	60fb      	str	r3, [r7, #12]
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	4b0b      	ldr	r3, [pc, #44]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 8017682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017684:	4a0a      	ldr	r2, [pc, #40]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 8017686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801768a:	6453      	str	r3, [r2, #68]	; 0x44
 801768c:	4b08      	ldr	r3, [pc, #32]	; (80176b0 <HAL_PCD_MspInit+0xa4>)
 801768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017694:	60bb      	str	r3, [r7, #8]
 8017696:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017698:	2200      	movs	r2, #0
 801769a:	2105      	movs	r1, #5
 801769c:	2043      	movs	r0, #67	; 0x43
 801769e:	f7ee fac5 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80176a2:	2043      	movs	r0, #67	; 0x43
 80176a4:	f7ee fade 	bl	8005c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80176a8:	bf00      	nop
 80176aa:	3728      	adds	r7, #40	; 0x28
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	40023800 	.word	0x40023800
 80176b4:	40020000 	.word	0x40020000

080176b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80176cc:	4619      	mov	r1, r3
 80176ce:	4610      	mov	r0, r2
 80176d0:	f7f7 fdb6 	bl	800f240 <USBD_LL_SetupStage>
}
 80176d4:	bf00      	nop
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}

080176dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	460b      	mov	r3, r1
 80176e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80176ee:	78fa      	ldrb	r2, [r7, #3]
 80176f0:	6879      	ldr	r1, [r7, #4]
 80176f2:	4613      	mov	r3, r2
 80176f4:	00db      	lsls	r3, r3, #3
 80176f6:	1a9b      	subs	r3, r3, r2
 80176f8:	009b      	lsls	r3, r3, #2
 80176fa:	440b      	add	r3, r1
 80176fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017700:	681a      	ldr	r2, [r3, #0]
 8017702:	78fb      	ldrb	r3, [r7, #3]
 8017704:	4619      	mov	r1, r3
 8017706:	f7f7 fdee 	bl	800f2e6 <USBD_LL_DataOutStage>
}
 801770a:	bf00      	nop
 801770c:	3708      	adds	r7, #8
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}

08017712 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017712:	b580      	push	{r7, lr}
 8017714:	b082      	sub	sp, #8
 8017716:	af00      	add	r7, sp, #0
 8017718:	6078      	str	r0, [r7, #4]
 801771a:	460b      	mov	r3, r1
 801771c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8017724:	78fa      	ldrb	r2, [r7, #3]
 8017726:	6879      	ldr	r1, [r7, #4]
 8017728:	4613      	mov	r3, r2
 801772a:	00db      	lsls	r3, r3, #3
 801772c:	1a9b      	subs	r3, r3, r2
 801772e:	009b      	lsls	r3, r3, #2
 8017730:	440b      	add	r3, r1
 8017732:	3348      	adds	r3, #72	; 0x48
 8017734:	681a      	ldr	r2, [r3, #0]
 8017736:	78fb      	ldrb	r3, [r7, #3]
 8017738:	4619      	mov	r1, r3
 801773a:	f7f7 fe37 	bl	800f3ac <USBD_LL_DataInStage>
}
 801773e:	bf00      	nop
 8017740:	3708      	adds	r7, #8
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}

08017746 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017746:	b580      	push	{r7, lr}
 8017748:	b082      	sub	sp, #8
 801774a:	af00      	add	r7, sp, #0
 801774c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017754:	4618      	mov	r0, r3
 8017756:	f7f7 ff3b 	bl	800f5d0 <USBD_LL_SOF>
}
 801775a:	bf00      	nop
 801775c:	3708      	adds	r7, #8
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8017762:	b580      	push	{r7, lr}
 8017764:	b084      	sub	sp, #16
 8017766:	af00      	add	r7, sp, #0
 8017768:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801776a:	2301      	movs	r3, #1
 801776c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	68db      	ldr	r3, [r3, #12]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d102      	bne.n	801777c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017776:	2300      	movs	r3, #0
 8017778:	73fb      	strb	r3, [r7, #15]
 801777a:	e008      	b.n	801778e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	68db      	ldr	r3, [r3, #12]
 8017780:	2b02      	cmp	r3, #2
 8017782:	d102      	bne.n	801778a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017784:	2301      	movs	r3, #1
 8017786:	73fb      	strb	r3, [r7, #15]
 8017788:	e001      	b.n	801778e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801778a:	f7ec fe29 	bl	80043e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017794:	7bfa      	ldrb	r2, [r7, #15]
 8017796:	4611      	mov	r1, r2
 8017798:	4618      	mov	r0, r3
 801779a:	f7f7 fede 	bl	800f55a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7f7 fe97 	bl	800f4d8 <USBD_LL_Reset>
}
 80177aa:	bf00      	nop
 80177ac:	3710      	adds	r7, #16
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}
	...

080177b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7f7 fed9 	bl	800f57a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	687a      	ldr	r2, [r7, #4]
 80177d4:	6812      	ldr	r2, [r2, #0]
 80177d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80177da:	f043 0301 	orr.w	r3, r3, #1
 80177de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6a1b      	ldr	r3, [r3, #32]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d005      	beq.n	80177f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80177e8:	4b04      	ldr	r3, [pc, #16]	; (80177fc <HAL_PCD_SuspendCallback+0x48>)
 80177ea:	691b      	ldr	r3, [r3, #16]
 80177ec:	4a03      	ldr	r2, [pc, #12]	; (80177fc <HAL_PCD_SuspendCallback+0x48>)
 80177ee:	f043 0306 	orr.w	r3, r3, #6
 80177f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80177f4:	bf00      	nop
 80177f6:	3708      	adds	r7, #8
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	e000ed00 	.word	0xe000ed00

08017800 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801780e:	4618      	mov	r0, r3
 8017810:	f7f7 fec8 	bl	800f5a4 <USBD_LL_Resume>
}
 8017814:	bf00      	nop
 8017816:	3708      	adds	r7, #8
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}

0801781c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	460b      	mov	r3, r1
 8017826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801782e:	78fa      	ldrb	r2, [r7, #3]
 8017830:	4611      	mov	r1, r2
 8017832:	4618      	mov	r0, r3
 8017834:	f7f7 fef3 	bl	800f61e <USBD_LL_IsoOUTIncomplete>
}
 8017838:	bf00      	nop
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	460b      	mov	r3, r1
 801784a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017852:	78fa      	ldrb	r2, [r7, #3]
 8017854:	4611      	mov	r1, r2
 8017856:	4618      	mov	r0, r3
 8017858:	f7f7 fed4 	bl	800f604 <USBD_LL_IsoINIncomplete>
}
 801785c:	bf00      	nop
 801785e:	3708      	adds	r7, #8
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}

08017864 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b082      	sub	sp, #8
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017872:	4618      	mov	r0, r3
 8017874:	f7f7 fee0 	bl	800f638 <USBD_LL_DevConnected>
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801788e:	4618      	mov	r0, r3
 8017890:	f7f7 fedd 	bl	800f64e <USBD_LL_DevDisconnected>
}
 8017894:	bf00      	nop
 8017896:	3708      	adds	r7, #8
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}

0801789c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b082      	sub	sp, #8
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d13c      	bne.n	8017926 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80178ac:	4a20      	ldr	r2, [pc, #128]	; (8017930 <USBD_LL_Init+0x94>)
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	4a1e      	ldr	r2, [pc, #120]	; (8017930 <USBD_LL_Init+0x94>)
 80178b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80178bc:	4b1c      	ldr	r3, [pc, #112]	; (8017930 <USBD_LL_Init+0x94>)
 80178be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80178c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80178c4:	4b1a      	ldr	r3, [pc, #104]	; (8017930 <USBD_LL_Init+0x94>)
 80178c6:	2206      	movs	r2, #6
 80178c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80178ca:	4b19      	ldr	r3, [pc, #100]	; (8017930 <USBD_LL_Init+0x94>)
 80178cc:	2202      	movs	r2, #2
 80178ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80178d0:	4b17      	ldr	r3, [pc, #92]	; (8017930 <USBD_LL_Init+0x94>)
 80178d2:	2200      	movs	r2, #0
 80178d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80178d6:	4b16      	ldr	r3, [pc, #88]	; (8017930 <USBD_LL_Init+0x94>)
 80178d8:	2202      	movs	r2, #2
 80178da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80178dc:	4b14      	ldr	r3, [pc, #80]	; (8017930 <USBD_LL_Init+0x94>)
 80178de:	2200      	movs	r2, #0
 80178e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80178e2:	4b13      	ldr	r3, [pc, #76]	; (8017930 <USBD_LL_Init+0x94>)
 80178e4:	2200      	movs	r2, #0
 80178e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80178e8:	4b11      	ldr	r3, [pc, #68]	; (8017930 <USBD_LL_Init+0x94>)
 80178ea:	2200      	movs	r2, #0
 80178ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80178ee:	4b10      	ldr	r3, [pc, #64]	; (8017930 <USBD_LL_Init+0x94>)
 80178f0:	2200      	movs	r2, #0
 80178f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80178f4:	4b0e      	ldr	r3, [pc, #56]	; (8017930 <USBD_LL_Init+0x94>)
 80178f6:	2200      	movs	r2, #0
 80178f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80178fa:	480d      	ldr	r0, [pc, #52]	; (8017930 <USBD_LL_Init+0x94>)
 80178fc:	f7ee ff41 	bl	8006782 <HAL_PCD_Init>
 8017900:	4603      	mov	r3, r0
 8017902:	2b00      	cmp	r3, #0
 8017904:	d001      	beq.n	801790a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017906:	f7ec fd6b 	bl	80043e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801790a:	2180      	movs	r1, #128	; 0x80
 801790c:	4808      	ldr	r0, [pc, #32]	; (8017930 <USBD_LL_Init+0x94>)
 801790e:	f7f0 f8c2 	bl	8007a96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017912:	2240      	movs	r2, #64	; 0x40
 8017914:	2100      	movs	r1, #0
 8017916:	4806      	ldr	r0, [pc, #24]	; (8017930 <USBD_LL_Init+0x94>)
 8017918:	f7f0 f876 	bl	8007a08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801791c:	2280      	movs	r2, #128	; 0x80
 801791e:	2101      	movs	r1, #1
 8017920:	4803      	ldr	r0, [pc, #12]	; (8017930 <USBD_LL_Init+0x94>)
 8017922:	f7f0 f871 	bl	8007a08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017926:	2300      	movs	r3, #0
}
 8017928:	4618      	mov	r0, r3
 801792a:	3708      	adds	r7, #8
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}
 8017930:	20028b98 	.word	0x20028b98

08017934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b084      	sub	sp, #16
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801793c:	2300      	movs	r3, #0
 801793e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017940:	2300      	movs	r3, #0
 8017942:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801794a:	4618      	mov	r0, r3
 801794c:	f7ef f83d 	bl	80069ca <HAL_PCD_Start>
 8017950:	4603      	mov	r3, r0
 8017952:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8017954:	7bfb      	ldrb	r3, [r7, #15]
 8017956:	4618      	mov	r0, r3
 8017958:	f000 f97e 	bl	8017c58 <USBD_Get_USB_Status>
 801795c:	4603      	mov	r3, r0
 801795e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017960:	7bbb      	ldrb	r3, [r7, #14]
}
 8017962:	4618      	mov	r0, r3
 8017964:	3710      	adds	r7, #16
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}

0801796a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b084      	sub	sp, #16
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
 8017972:	4608      	mov	r0, r1
 8017974:	4611      	mov	r1, r2
 8017976:	461a      	mov	r2, r3
 8017978:	4603      	mov	r3, r0
 801797a:	70fb      	strb	r3, [r7, #3]
 801797c:	460b      	mov	r3, r1
 801797e:	70bb      	strb	r3, [r7, #2]
 8017980:	4613      	mov	r3, r2
 8017982:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017984:	2300      	movs	r3, #0
 8017986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017988:	2300      	movs	r3, #0
 801798a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017992:	78bb      	ldrb	r3, [r7, #2]
 8017994:	883a      	ldrh	r2, [r7, #0]
 8017996:	78f9      	ldrb	r1, [r7, #3]
 8017998:	f7ef fc3d 	bl	8007216 <HAL_PCD_EP_Open>
 801799c:	4603      	mov	r3, r0
 801799e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179a0:	7bfb      	ldrb	r3, [r7, #15]
 80179a2:	4618      	mov	r0, r3
 80179a4:	f000 f958 	bl	8017c58 <USBD_Get_USB_Status>
 80179a8:	4603      	mov	r3, r0
 80179aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80179ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}

080179b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80179b6:	b580      	push	{r7, lr}
 80179b8:	b084      	sub	sp, #16
 80179ba:	af00      	add	r7, sp, #0
 80179bc:	6078      	str	r0, [r7, #4]
 80179be:	460b      	mov	r3, r1
 80179c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179c2:	2300      	movs	r3, #0
 80179c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179c6:	2300      	movs	r3, #0
 80179c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80179d0:	78fa      	ldrb	r2, [r7, #3]
 80179d2:	4611      	mov	r1, r2
 80179d4:	4618      	mov	r0, r3
 80179d6:	f7ef fc86 	bl	80072e6 <HAL_PCD_EP_Close>
 80179da:	4603      	mov	r3, r0
 80179dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80179de:	7bfb      	ldrb	r3, [r7, #15]
 80179e0:	4618      	mov	r0, r3
 80179e2:	f000 f939 	bl	8017c58 <USBD_Get_USB_Status>
 80179e6:	4603      	mov	r3, r0
 80179e8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80179ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3710      	adds	r7, #16
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b084      	sub	sp, #16
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
 80179fc:	460b      	mov	r3, r1
 80179fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a00:	2300      	movs	r3, #0
 8017a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a04:	2300      	movs	r3, #0
 8017a06:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a0e:	78fa      	ldrb	r2, [r7, #3]
 8017a10:	4611      	mov	r1, r2
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7ef fd5e 	bl	80074d4 <HAL_PCD_EP_SetStall>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a1c:	7bfb      	ldrb	r3, [r7, #15]
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f000 f91a 	bl	8017c58 <USBD_Get_USB_Status>
 8017a24:	4603      	mov	r3, r0
 8017a26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3710      	adds	r7, #16
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}

08017a32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a32:	b580      	push	{r7, lr}
 8017a34:	b084      	sub	sp, #16
 8017a36:	af00      	add	r7, sp, #0
 8017a38:	6078      	str	r0, [r7, #4]
 8017a3a:	460b      	mov	r3, r1
 8017a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a42:	2300      	movs	r3, #0
 8017a44:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a4c:	78fa      	ldrb	r2, [r7, #3]
 8017a4e:	4611      	mov	r1, r2
 8017a50:	4618      	mov	r0, r3
 8017a52:	f7ef fda3 	bl	800759c <HAL_PCD_EP_ClrStall>
 8017a56:	4603      	mov	r3, r0
 8017a58:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8017a5a:	7bfb      	ldrb	r3, [r7, #15]
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f000 f8fb 	bl	8017c58 <USBD_Get_USB_Status>
 8017a62:	4603      	mov	r3, r0
 8017a64:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8017a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3710      	adds	r7, #16
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}

08017a70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a70:	b480      	push	{r7}
 8017a72:	b085      	sub	sp, #20
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
 8017a78:	460b      	mov	r3, r1
 8017a7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a82:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8017a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	da0b      	bge.n	8017aa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8017a8c:	78fb      	ldrb	r3, [r7, #3]
 8017a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017a92:	68f9      	ldr	r1, [r7, #12]
 8017a94:	4613      	mov	r3, r2
 8017a96:	00db      	lsls	r3, r3, #3
 8017a98:	1a9b      	subs	r3, r3, r2
 8017a9a:	009b      	lsls	r3, r3, #2
 8017a9c:	440b      	add	r3, r1
 8017a9e:	333e      	adds	r3, #62	; 0x3e
 8017aa0:	781b      	ldrb	r3, [r3, #0]
 8017aa2:	e00b      	b.n	8017abc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8017aa4:	78fb      	ldrb	r3, [r7, #3]
 8017aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017aaa:	68f9      	ldr	r1, [r7, #12]
 8017aac:	4613      	mov	r3, r2
 8017aae:	00db      	lsls	r3, r3, #3
 8017ab0:	1a9b      	subs	r3, r3, r2
 8017ab2:	009b      	lsls	r3, r3, #2
 8017ab4:	440b      	add	r3, r1
 8017ab6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017aba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017abc:	4618      	mov	r0, r3
 8017abe:	3714      	adds	r7, #20
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac6:	4770      	bx	lr

08017ac8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
 8017ad0:	460b      	mov	r3, r1
 8017ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ae2:	78fa      	ldrb	r2, [r7, #3]
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7ef fb70 	bl	80071cc <HAL_PCD_SetAddress>
 8017aec:	4603      	mov	r3, r0
 8017aee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017af0:	7bfb      	ldrb	r3, [r7, #15]
 8017af2:	4618      	mov	r0, r3
 8017af4:	f000 f8b0 	bl	8017c58 <USBD_Get_USB_Status>
 8017af8:	4603      	mov	r3, r0
 8017afa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3710      	adds	r7, #16
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}

08017b06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b06:	b580      	push	{r7, lr}
 8017b08:	b086      	sub	sp, #24
 8017b0a:	af00      	add	r7, sp, #0
 8017b0c:	60f8      	str	r0, [r7, #12]
 8017b0e:	607a      	str	r2, [r7, #4]
 8017b10:	603b      	str	r3, [r7, #0]
 8017b12:	460b      	mov	r3, r1
 8017b14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b16:	2300      	movs	r3, #0
 8017b18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017b24:	7af9      	ldrb	r1, [r7, #11]
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	687a      	ldr	r2, [r7, #4]
 8017b2a:	f7ef fc89 	bl	8007440 <HAL_PCD_EP_Transmit>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017b32:	7dfb      	ldrb	r3, [r7, #23]
 8017b34:	4618      	mov	r0, r3
 8017b36:	f000 f88f 	bl	8017c58 <USBD_Get_USB_Status>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8017b3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3718      	adds	r7, #24
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b086      	sub	sp, #24
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	607a      	str	r2, [r7, #4]
 8017b52:	603b      	str	r3, [r7, #0]
 8017b54:	460b      	mov	r3, r1
 8017b56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017b66:	7af9      	ldrb	r1, [r7, #11]
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	687a      	ldr	r2, [r7, #4]
 8017b6c:	f7ef fc05 	bl	800737a <HAL_PCD_EP_Receive>
 8017b70:	4603      	mov	r3, r0
 8017b72:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017b74:	7dfb      	ldrb	r3, [r7, #23]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f000 f86e 	bl	8017c58 <USBD_Get_USB_Status>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8017b80:	7dbb      	ldrb	r3, [r7, #22]
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3718      	adds	r7, #24
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}

08017b8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	b082      	sub	sp, #8
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	6078      	str	r0, [r7, #4]
 8017b92:	460b      	mov	r3, r1
 8017b94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b9c:	78fa      	ldrb	r2, [r7, #3]
 8017b9e:	4611      	mov	r1, r2
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7ef fc35 	bl	8007410 <HAL_PCD_EP_GetRxCount>
 8017ba6:	4603      	mov	r3, r0
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	3708      	adds	r7, #8
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}

08017bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b082      	sub	sp, #8
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
 8017bb8:	460b      	mov	r3, r1
 8017bba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017bbc:	78fb      	ldrb	r3, [r7, #3]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d002      	beq.n	8017bc8 <HAL_PCDEx_LPM_Callback+0x18>
 8017bc2:	2b01      	cmp	r3, #1
 8017bc4:	d01f      	beq.n	8017c06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8017bc6:	e03b      	b.n	8017c40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6a1b      	ldr	r3, [r3, #32]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d007      	beq.n	8017be0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017bd0:	f000 f83c 	bl	8017c4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017bd4:	4b1c      	ldr	r3, [pc, #112]	; (8017c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017bd6:	691b      	ldr	r3, [r3, #16]
 8017bd8:	4a1b      	ldr	r2, [pc, #108]	; (8017c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017bda:	f023 0306 	bic.w	r3, r3, #6
 8017bde:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	687a      	ldr	r2, [r7, #4]
 8017bec:	6812      	ldr	r2, [r2, #0]
 8017bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017bf2:	f023 0301 	bic.w	r3, r3, #1
 8017bf6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7f7 fcd0 	bl	800f5a4 <USBD_LL_Resume>
    break;
 8017c04:	e01c      	b.n	8017c40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	6812      	ldr	r2, [r2, #0]
 8017c14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c18:	f043 0301 	orr.w	r3, r3, #1
 8017c1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7f7 fca8 	bl	800f57a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6a1b      	ldr	r3, [r3, #32]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d005      	beq.n	8017c3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c32:	4b05      	ldr	r3, [pc, #20]	; (8017c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017c34:	691b      	ldr	r3, [r3, #16]
 8017c36:	4a04      	ldr	r2, [pc, #16]	; (8017c48 <HAL_PCDEx_LPM_Callback+0x98>)
 8017c38:	f043 0306 	orr.w	r3, r3, #6
 8017c3c:	6113      	str	r3, [r2, #16]
    break;   
 8017c3e:	bf00      	nop
}
 8017c40:	bf00      	nop
 8017c42:	3708      	adds	r7, #8
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	e000ed00 	.word	0xe000ed00

08017c4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017c50:	f7ec f93c 	bl	8003ecc <SystemClock_Config>
}
 8017c54:	bf00      	nop
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017c58:	b480      	push	{r7}
 8017c5a:	b085      	sub	sp, #20
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	4603      	mov	r3, r0
 8017c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c62:	2300      	movs	r3, #0
 8017c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017c66:	79fb      	ldrb	r3, [r7, #7]
 8017c68:	2b03      	cmp	r3, #3
 8017c6a:	d817      	bhi.n	8017c9c <USBD_Get_USB_Status+0x44>
 8017c6c:	a201      	add	r2, pc, #4	; (adr r2, 8017c74 <USBD_Get_USB_Status+0x1c>)
 8017c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c72:	bf00      	nop
 8017c74:	08017c85 	.word	0x08017c85
 8017c78:	08017c8b 	.word	0x08017c8b
 8017c7c:	08017c91 	.word	0x08017c91
 8017c80:	08017c97 	.word	0x08017c97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017c84:	2300      	movs	r3, #0
 8017c86:	73fb      	strb	r3, [r7, #15]
    break;
 8017c88:	e00b      	b.n	8017ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017c8a:	2303      	movs	r3, #3
 8017c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8017c8e:	e008      	b.n	8017ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017c90:	2301      	movs	r3, #1
 8017c92:	73fb      	strb	r3, [r7, #15]
    break;
 8017c94:	e005      	b.n	8017ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017c96:	2303      	movs	r3, #3
 8017c98:	73fb      	strb	r3, [r7, #15]
    break;
 8017c9a:	e002      	b.n	8017ca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017c9c:	2303      	movs	r3, #3
 8017c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8017ca0:	bf00      	nop
  }
  return usb_status;
 8017ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	3714      	adds	r7, #20
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cae:	4770      	bx	lr

08017cb0 <__errno>:
 8017cb0:	4b01      	ldr	r3, [pc, #4]	; (8017cb8 <__errno+0x8>)
 8017cb2:	6818      	ldr	r0, [r3, #0]
 8017cb4:	4770      	bx	lr
 8017cb6:	bf00      	nop
 8017cb8:	20000194 	.word	0x20000194

08017cbc <__libc_init_array>:
 8017cbc:	b570      	push	{r4, r5, r6, lr}
 8017cbe:	4e0d      	ldr	r6, [pc, #52]	; (8017cf4 <__libc_init_array+0x38>)
 8017cc0:	4c0d      	ldr	r4, [pc, #52]	; (8017cf8 <__libc_init_array+0x3c>)
 8017cc2:	1ba4      	subs	r4, r4, r6
 8017cc4:	10a4      	asrs	r4, r4, #2
 8017cc6:	2500      	movs	r5, #0
 8017cc8:	42a5      	cmp	r5, r4
 8017cca:	d109      	bne.n	8017ce0 <__libc_init_array+0x24>
 8017ccc:	4e0b      	ldr	r6, [pc, #44]	; (8017cfc <__libc_init_array+0x40>)
 8017cce:	4c0c      	ldr	r4, [pc, #48]	; (8017d00 <__libc_init_array+0x44>)
 8017cd0:	f002 faa2 	bl	801a218 <_init>
 8017cd4:	1ba4      	subs	r4, r4, r6
 8017cd6:	10a4      	asrs	r4, r4, #2
 8017cd8:	2500      	movs	r5, #0
 8017cda:	42a5      	cmp	r5, r4
 8017cdc:	d105      	bne.n	8017cea <__libc_init_array+0x2e>
 8017cde:	bd70      	pop	{r4, r5, r6, pc}
 8017ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017ce4:	4798      	blx	r3
 8017ce6:	3501      	adds	r5, #1
 8017ce8:	e7ee      	b.n	8017cc8 <__libc_init_array+0xc>
 8017cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017cee:	4798      	blx	r3
 8017cf0:	3501      	adds	r5, #1
 8017cf2:	e7f2      	b.n	8017cda <__libc_init_array+0x1e>
 8017cf4:	0801aeb8 	.word	0x0801aeb8
 8017cf8:	0801aeb8 	.word	0x0801aeb8
 8017cfc:	0801aeb8 	.word	0x0801aeb8
 8017d00:	0801aebc 	.word	0x0801aebc

08017d04 <malloc>:
 8017d04:	4b02      	ldr	r3, [pc, #8]	; (8017d10 <malloc+0xc>)
 8017d06:	4601      	mov	r1, r0
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	f000 b86d 	b.w	8017de8 <_malloc_r>
 8017d0e:	bf00      	nop
 8017d10:	20000194 	.word	0x20000194

08017d14 <free>:
 8017d14:	4b02      	ldr	r3, [pc, #8]	; (8017d20 <free+0xc>)
 8017d16:	4601      	mov	r1, r0
 8017d18:	6818      	ldr	r0, [r3, #0]
 8017d1a:	f000 b817 	b.w	8017d4c <_free_r>
 8017d1e:	bf00      	nop
 8017d20:	20000194 	.word	0x20000194

08017d24 <memcpy>:
 8017d24:	b510      	push	{r4, lr}
 8017d26:	1e43      	subs	r3, r0, #1
 8017d28:	440a      	add	r2, r1
 8017d2a:	4291      	cmp	r1, r2
 8017d2c:	d100      	bne.n	8017d30 <memcpy+0xc>
 8017d2e:	bd10      	pop	{r4, pc}
 8017d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d38:	e7f7      	b.n	8017d2a <memcpy+0x6>

08017d3a <memset>:
 8017d3a:	4402      	add	r2, r0
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d100      	bne.n	8017d44 <memset+0xa>
 8017d42:	4770      	bx	lr
 8017d44:	f803 1b01 	strb.w	r1, [r3], #1
 8017d48:	e7f9      	b.n	8017d3e <memset+0x4>
	...

08017d4c <_free_r>:
 8017d4c:	b538      	push	{r3, r4, r5, lr}
 8017d4e:	4605      	mov	r5, r0
 8017d50:	2900      	cmp	r1, #0
 8017d52:	d045      	beq.n	8017de0 <_free_r+0x94>
 8017d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d58:	1f0c      	subs	r4, r1, #4
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	bfb8      	it	lt
 8017d5e:	18e4      	addlt	r4, r4, r3
 8017d60:	f000 f8e0 	bl	8017f24 <__malloc_lock>
 8017d64:	4a1f      	ldr	r2, [pc, #124]	; (8017de4 <_free_r+0x98>)
 8017d66:	6813      	ldr	r3, [r2, #0]
 8017d68:	4610      	mov	r0, r2
 8017d6a:	b933      	cbnz	r3, 8017d7a <_free_r+0x2e>
 8017d6c:	6063      	str	r3, [r4, #4]
 8017d6e:	6014      	str	r4, [r2, #0]
 8017d70:	4628      	mov	r0, r5
 8017d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d76:	f000 b8d6 	b.w	8017f26 <__malloc_unlock>
 8017d7a:	42a3      	cmp	r3, r4
 8017d7c:	d90c      	bls.n	8017d98 <_free_r+0x4c>
 8017d7e:	6821      	ldr	r1, [r4, #0]
 8017d80:	1862      	adds	r2, r4, r1
 8017d82:	4293      	cmp	r3, r2
 8017d84:	bf04      	itt	eq
 8017d86:	681a      	ldreq	r2, [r3, #0]
 8017d88:	685b      	ldreq	r3, [r3, #4]
 8017d8a:	6063      	str	r3, [r4, #4]
 8017d8c:	bf04      	itt	eq
 8017d8e:	1852      	addeq	r2, r2, r1
 8017d90:	6022      	streq	r2, [r4, #0]
 8017d92:	6004      	str	r4, [r0, #0]
 8017d94:	e7ec      	b.n	8017d70 <_free_r+0x24>
 8017d96:	4613      	mov	r3, r2
 8017d98:	685a      	ldr	r2, [r3, #4]
 8017d9a:	b10a      	cbz	r2, 8017da0 <_free_r+0x54>
 8017d9c:	42a2      	cmp	r2, r4
 8017d9e:	d9fa      	bls.n	8017d96 <_free_r+0x4a>
 8017da0:	6819      	ldr	r1, [r3, #0]
 8017da2:	1858      	adds	r0, r3, r1
 8017da4:	42a0      	cmp	r0, r4
 8017da6:	d10b      	bne.n	8017dc0 <_free_r+0x74>
 8017da8:	6820      	ldr	r0, [r4, #0]
 8017daa:	4401      	add	r1, r0
 8017dac:	1858      	adds	r0, r3, r1
 8017dae:	4282      	cmp	r2, r0
 8017db0:	6019      	str	r1, [r3, #0]
 8017db2:	d1dd      	bne.n	8017d70 <_free_r+0x24>
 8017db4:	6810      	ldr	r0, [r2, #0]
 8017db6:	6852      	ldr	r2, [r2, #4]
 8017db8:	605a      	str	r2, [r3, #4]
 8017dba:	4401      	add	r1, r0
 8017dbc:	6019      	str	r1, [r3, #0]
 8017dbe:	e7d7      	b.n	8017d70 <_free_r+0x24>
 8017dc0:	d902      	bls.n	8017dc8 <_free_r+0x7c>
 8017dc2:	230c      	movs	r3, #12
 8017dc4:	602b      	str	r3, [r5, #0]
 8017dc6:	e7d3      	b.n	8017d70 <_free_r+0x24>
 8017dc8:	6820      	ldr	r0, [r4, #0]
 8017dca:	1821      	adds	r1, r4, r0
 8017dcc:	428a      	cmp	r2, r1
 8017dce:	bf04      	itt	eq
 8017dd0:	6811      	ldreq	r1, [r2, #0]
 8017dd2:	6852      	ldreq	r2, [r2, #4]
 8017dd4:	6062      	str	r2, [r4, #4]
 8017dd6:	bf04      	itt	eq
 8017dd8:	1809      	addeq	r1, r1, r0
 8017dda:	6021      	streq	r1, [r4, #0]
 8017ddc:	605c      	str	r4, [r3, #4]
 8017dde:	e7c7      	b.n	8017d70 <_free_r+0x24>
 8017de0:	bd38      	pop	{r3, r4, r5, pc}
 8017de2:	bf00      	nop
 8017de4:	20008974 	.word	0x20008974

08017de8 <_malloc_r>:
 8017de8:	b570      	push	{r4, r5, r6, lr}
 8017dea:	1ccd      	adds	r5, r1, #3
 8017dec:	f025 0503 	bic.w	r5, r5, #3
 8017df0:	3508      	adds	r5, #8
 8017df2:	2d0c      	cmp	r5, #12
 8017df4:	bf38      	it	cc
 8017df6:	250c      	movcc	r5, #12
 8017df8:	2d00      	cmp	r5, #0
 8017dfa:	4606      	mov	r6, r0
 8017dfc:	db01      	blt.n	8017e02 <_malloc_r+0x1a>
 8017dfe:	42a9      	cmp	r1, r5
 8017e00:	d903      	bls.n	8017e0a <_malloc_r+0x22>
 8017e02:	230c      	movs	r3, #12
 8017e04:	6033      	str	r3, [r6, #0]
 8017e06:	2000      	movs	r0, #0
 8017e08:	bd70      	pop	{r4, r5, r6, pc}
 8017e0a:	f000 f88b 	bl	8017f24 <__malloc_lock>
 8017e0e:	4a21      	ldr	r2, [pc, #132]	; (8017e94 <_malloc_r+0xac>)
 8017e10:	6814      	ldr	r4, [r2, #0]
 8017e12:	4621      	mov	r1, r4
 8017e14:	b991      	cbnz	r1, 8017e3c <_malloc_r+0x54>
 8017e16:	4c20      	ldr	r4, [pc, #128]	; (8017e98 <_malloc_r+0xb0>)
 8017e18:	6823      	ldr	r3, [r4, #0]
 8017e1a:	b91b      	cbnz	r3, 8017e24 <_malloc_r+0x3c>
 8017e1c:	4630      	mov	r0, r6
 8017e1e:	f000 f83d 	bl	8017e9c <_sbrk_r>
 8017e22:	6020      	str	r0, [r4, #0]
 8017e24:	4629      	mov	r1, r5
 8017e26:	4630      	mov	r0, r6
 8017e28:	f000 f838 	bl	8017e9c <_sbrk_r>
 8017e2c:	1c43      	adds	r3, r0, #1
 8017e2e:	d124      	bne.n	8017e7a <_malloc_r+0x92>
 8017e30:	230c      	movs	r3, #12
 8017e32:	6033      	str	r3, [r6, #0]
 8017e34:	4630      	mov	r0, r6
 8017e36:	f000 f876 	bl	8017f26 <__malloc_unlock>
 8017e3a:	e7e4      	b.n	8017e06 <_malloc_r+0x1e>
 8017e3c:	680b      	ldr	r3, [r1, #0]
 8017e3e:	1b5b      	subs	r3, r3, r5
 8017e40:	d418      	bmi.n	8017e74 <_malloc_r+0x8c>
 8017e42:	2b0b      	cmp	r3, #11
 8017e44:	d90f      	bls.n	8017e66 <_malloc_r+0x7e>
 8017e46:	600b      	str	r3, [r1, #0]
 8017e48:	50cd      	str	r5, [r1, r3]
 8017e4a:	18cc      	adds	r4, r1, r3
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f000 f86a 	bl	8017f26 <__malloc_unlock>
 8017e52:	f104 000b 	add.w	r0, r4, #11
 8017e56:	1d23      	adds	r3, r4, #4
 8017e58:	f020 0007 	bic.w	r0, r0, #7
 8017e5c:	1ac3      	subs	r3, r0, r3
 8017e5e:	d0d3      	beq.n	8017e08 <_malloc_r+0x20>
 8017e60:	425a      	negs	r2, r3
 8017e62:	50e2      	str	r2, [r4, r3]
 8017e64:	e7d0      	b.n	8017e08 <_malloc_r+0x20>
 8017e66:	428c      	cmp	r4, r1
 8017e68:	684b      	ldr	r3, [r1, #4]
 8017e6a:	bf16      	itet	ne
 8017e6c:	6063      	strne	r3, [r4, #4]
 8017e6e:	6013      	streq	r3, [r2, #0]
 8017e70:	460c      	movne	r4, r1
 8017e72:	e7eb      	b.n	8017e4c <_malloc_r+0x64>
 8017e74:	460c      	mov	r4, r1
 8017e76:	6849      	ldr	r1, [r1, #4]
 8017e78:	e7cc      	b.n	8017e14 <_malloc_r+0x2c>
 8017e7a:	1cc4      	adds	r4, r0, #3
 8017e7c:	f024 0403 	bic.w	r4, r4, #3
 8017e80:	42a0      	cmp	r0, r4
 8017e82:	d005      	beq.n	8017e90 <_malloc_r+0xa8>
 8017e84:	1a21      	subs	r1, r4, r0
 8017e86:	4630      	mov	r0, r6
 8017e88:	f000 f808 	bl	8017e9c <_sbrk_r>
 8017e8c:	3001      	adds	r0, #1
 8017e8e:	d0cf      	beq.n	8017e30 <_malloc_r+0x48>
 8017e90:	6025      	str	r5, [r4, #0]
 8017e92:	e7db      	b.n	8017e4c <_malloc_r+0x64>
 8017e94:	20008974 	.word	0x20008974
 8017e98:	20008978 	.word	0x20008978

08017e9c <_sbrk_r>:
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	4c06      	ldr	r4, [pc, #24]	; (8017eb8 <_sbrk_r+0x1c>)
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	4605      	mov	r5, r0
 8017ea4:	4608      	mov	r0, r1
 8017ea6:	6023      	str	r3, [r4, #0]
 8017ea8:	f7ec fe3a 	bl	8004b20 <_sbrk>
 8017eac:	1c43      	adds	r3, r0, #1
 8017eae:	d102      	bne.n	8017eb6 <_sbrk_r+0x1a>
 8017eb0:	6823      	ldr	r3, [r4, #0]
 8017eb2:	b103      	cbz	r3, 8017eb6 <_sbrk_r+0x1a>
 8017eb4:	602b      	str	r3, [r5, #0]
 8017eb6:	bd38      	pop	{r3, r4, r5, pc}
 8017eb8:	20028f9c 	.word	0x20028f9c

08017ebc <sniprintf>:
 8017ebc:	b40c      	push	{r2, r3}
 8017ebe:	b530      	push	{r4, r5, lr}
 8017ec0:	4b17      	ldr	r3, [pc, #92]	; (8017f20 <sniprintf+0x64>)
 8017ec2:	1e0c      	subs	r4, r1, #0
 8017ec4:	b09d      	sub	sp, #116	; 0x74
 8017ec6:	681d      	ldr	r5, [r3, #0]
 8017ec8:	da08      	bge.n	8017edc <sniprintf+0x20>
 8017eca:	238b      	movs	r3, #139	; 0x8b
 8017ecc:	602b      	str	r3, [r5, #0]
 8017ece:	f04f 30ff 	mov.w	r0, #4294967295
 8017ed2:	b01d      	add	sp, #116	; 0x74
 8017ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ed8:	b002      	add	sp, #8
 8017eda:	4770      	bx	lr
 8017edc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017ee0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017ee4:	bf14      	ite	ne
 8017ee6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017eea:	4623      	moveq	r3, r4
 8017eec:	9304      	str	r3, [sp, #16]
 8017eee:	9307      	str	r3, [sp, #28]
 8017ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ef4:	9002      	str	r0, [sp, #8]
 8017ef6:	9006      	str	r0, [sp, #24]
 8017ef8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017efc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017efe:	ab21      	add	r3, sp, #132	; 0x84
 8017f00:	a902      	add	r1, sp, #8
 8017f02:	4628      	mov	r0, r5
 8017f04:	9301      	str	r3, [sp, #4]
 8017f06:	f000 f869 	bl	8017fdc <_svfiprintf_r>
 8017f0a:	1c43      	adds	r3, r0, #1
 8017f0c:	bfbc      	itt	lt
 8017f0e:	238b      	movlt	r3, #139	; 0x8b
 8017f10:	602b      	strlt	r3, [r5, #0]
 8017f12:	2c00      	cmp	r4, #0
 8017f14:	d0dd      	beq.n	8017ed2 <sniprintf+0x16>
 8017f16:	9b02      	ldr	r3, [sp, #8]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	701a      	strb	r2, [r3, #0]
 8017f1c:	e7d9      	b.n	8017ed2 <sniprintf+0x16>
 8017f1e:	bf00      	nop
 8017f20:	20000194 	.word	0x20000194

08017f24 <__malloc_lock>:
 8017f24:	4770      	bx	lr

08017f26 <__malloc_unlock>:
 8017f26:	4770      	bx	lr

08017f28 <__ssputs_r>:
 8017f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f2c:	688e      	ldr	r6, [r1, #8]
 8017f2e:	429e      	cmp	r6, r3
 8017f30:	4682      	mov	sl, r0
 8017f32:	460c      	mov	r4, r1
 8017f34:	4690      	mov	r8, r2
 8017f36:	4699      	mov	r9, r3
 8017f38:	d837      	bhi.n	8017faa <__ssputs_r+0x82>
 8017f3a:	898a      	ldrh	r2, [r1, #12]
 8017f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f40:	d031      	beq.n	8017fa6 <__ssputs_r+0x7e>
 8017f42:	6825      	ldr	r5, [r4, #0]
 8017f44:	6909      	ldr	r1, [r1, #16]
 8017f46:	1a6f      	subs	r7, r5, r1
 8017f48:	6965      	ldr	r5, [r4, #20]
 8017f4a:	2302      	movs	r3, #2
 8017f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f50:	fb95 f5f3 	sdiv	r5, r5, r3
 8017f54:	f109 0301 	add.w	r3, r9, #1
 8017f58:	443b      	add	r3, r7
 8017f5a:	429d      	cmp	r5, r3
 8017f5c:	bf38      	it	cc
 8017f5e:	461d      	movcc	r5, r3
 8017f60:	0553      	lsls	r3, r2, #21
 8017f62:	d530      	bpl.n	8017fc6 <__ssputs_r+0x9e>
 8017f64:	4629      	mov	r1, r5
 8017f66:	f7ff ff3f 	bl	8017de8 <_malloc_r>
 8017f6a:	4606      	mov	r6, r0
 8017f6c:	b950      	cbnz	r0, 8017f84 <__ssputs_r+0x5c>
 8017f6e:	230c      	movs	r3, #12
 8017f70:	f8ca 3000 	str.w	r3, [sl]
 8017f74:	89a3      	ldrh	r3, [r4, #12]
 8017f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f7a:	81a3      	strh	r3, [r4, #12]
 8017f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f84:	463a      	mov	r2, r7
 8017f86:	6921      	ldr	r1, [r4, #16]
 8017f88:	f7ff fecc 	bl	8017d24 <memcpy>
 8017f8c:	89a3      	ldrh	r3, [r4, #12]
 8017f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f96:	81a3      	strh	r3, [r4, #12]
 8017f98:	6126      	str	r6, [r4, #16]
 8017f9a:	6165      	str	r5, [r4, #20]
 8017f9c:	443e      	add	r6, r7
 8017f9e:	1bed      	subs	r5, r5, r7
 8017fa0:	6026      	str	r6, [r4, #0]
 8017fa2:	60a5      	str	r5, [r4, #8]
 8017fa4:	464e      	mov	r6, r9
 8017fa6:	454e      	cmp	r6, r9
 8017fa8:	d900      	bls.n	8017fac <__ssputs_r+0x84>
 8017faa:	464e      	mov	r6, r9
 8017fac:	4632      	mov	r2, r6
 8017fae:	4641      	mov	r1, r8
 8017fb0:	6820      	ldr	r0, [r4, #0]
 8017fb2:	f000 fa93 	bl	80184dc <memmove>
 8017fb6:	68a3      	ldr	r3, [r4, #8]
 8017fb8:	1b9b      	subs	r3, r3, r6
 8017fba:	60a3      	str	r3, [r4, #8]
 8017fbc:	6823      	ldr	r3, [r4, #0]
 8017fbe:	441e      	add	r6, r3
 8017fc0:	6026      	str	r6, [r4, #0]
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	e7dc      	b.n	8017f80 <__ssputs_r+0x58>
 8017fc6:	462a      	mov	r2, r5
 8017fc8:	f000 faa1 	bl	801850e <_realloc_r>
 8017fcc:	4606      	mov	r6, r0
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	d1e2      	bne.n	8017f98 <__ssputs_r+0x70>
 8017fd2:	6921      	ldr	r1, [r4, #16]
 8017fd4:	4650      	mov	r0, sl
 8017fd6:	f7ff feb9 	bl	8017d4c <_free_r>
 8017fda:	e7c8      	b.n	8017f6e <__ssputs_r+0x46>

08017fdc <_svfiprintf_r>:
 8017fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe0:	461d      	mov	r5, r3
 8017fe2:	898b      	ldrh	r3, [r1, #12]
 8017fe4:	061f      	lsls	r7, r3, #24
 8017fe6:	b09d      	sub	sp, #116	; 0x74
 8017fe8:	4680      	mov	r8, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	4616      	mov	r6, r2
 8017fee:	d50f      	bpl.n	8018010 <_svfiprintf_r+0x34>
 8017ff0:	690b      	ldr	r3, [r1, #16]
 8017ff2:	b96b      	cbnz	r3, 8018010 <_svfiprintf_r+0x34>
 8017ff4:	2140      	movs	r1, #64	; 0x40
 8017ff6:	f7ff fef7 	bl	8017de8 <_malloc_r>
 8017ffa:	6020      	str	r0, [r4, #0]
 8017ffc:	6120      	str	r0, [r4, #16]
 8017ffe:	b928      	cbnz	r0, 801800c <_svfiprintf_r+0x30>
 8018000:	230c      	movs	r3, #12
 8018002:	f8c8 3000 	str.w	r3, [r8]
 8018006:	f04f 30ff 	mov.w	r0, #4294967295
 801800a:	e0c8      	b.n	801819e <_svfiprintf_r+0x1c2>
 801800c:	2340      	movs	r3, #64	; 0x40
 801800e:	6163      	str	r3, [r4, #20]
 8018010:	2300      	movs	r3, #0
 8018012:	9309      	str	r3, [sp, #36]	; 0x24
 8018014:	2320      	movs	r3, #32
 8018016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801801a:	2330      	movs	r3, #48	; 0x30
 801801c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018020:	9503      	str	r5, [sp, #12]
 8018022:	f04f 0b01 	mov.w	fp, #1
 8018026:	4637      	mov	r7, r6
 8018028:	463d      	mov	r5, r7
 801802a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801802e:	b10b      	cbz	r3, 8018034 <_svfiprintf_r+0x58>
 8018030:	2b25      	cmp	r3, #37	; 0x25
 8018032:	d13e      	bne.n	80180b2 <_svfiprintf_r+0xd6>
 8018034:	ebb7 0a06 	subs.w	sl, r7, r6
 8018038:	d00b      	beq.n	8018052 <_svfiprintf_r+0x76>
 801803a:	4653      	mov	r3, sl
 801803c:	4632      	mov	r2, r6
 801803e:	4621      	mov	r1, r4
 8018040:	4640      	mov	r0, r8
 8018042:	f7ff ff71 	bl	8017f28 <__ssputs_r>
 8018046:	3001      	adds	r0, #1
 8018048:	f000 80a4 	beq.w	8018194 <_svfiprintf_r+0x1b8>
 801804c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801804e:	4453      	add	r3, sl
 8018050:	9309      	str	r3, [sp, #36]	; 0x24
 8018052:	783b      	ldrb	r3, [r7, #0]
 8018054:	2b00      	cmp	r3, #0
 8018056:	f000 809d 	beq.w	8018194 <_svfiprintf_r+0x1b8>
 801805a:	2300      	movs	r3, #0
 801805c:	f04f 32ff 	mov.w	r2, #4294967295
 8018060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018064:	9304      	str	r3, [sp, #16]
 8018066:	9307      	str	r3, [sp, #28]
 8018068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801806c:	931a      	str	r3, [sp, #104]	; 0x68
 801806e:	462f      	mov	r7, r5
 8018070:	2205      	movs	r2, #5
 8018072:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018076:	4850      	ldr	r0, [pc, #320]	; (80181b8 <_svfiprintf_r+0x1dc>)
 8018078:	f7e8 f8d2 	bl	8000220 <memchr>
 801807c:	9b04      	ldr	r3, [sp, #16]
 801807e:	b9d0      	cbnz	r0, 80180b6 <_svfiprintf_r+0xda>
 8018080:	06d9      	lsls	r1, r3, #27
 8018082:	bf44      	itt	mi
 8018084:	2220      	movmi	r2, #32
 8018086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801808a:	071a      	lsls	r2, r3, #28
 801808c:	bf44      	itt	mi
 801808e:	222b      	movmi	r2, #43	; 0x2b
 8018090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018094:	782a      	ldrb	r2, [r5, #0]
 8018096:	2a2a      	cmp	r2, #42	; 0x2a
 8018098:	d015      	beq.n	80180c6 <_svfiprintf_r+0xea>
 801809a:	9a07      	ldr	r2, [sp, #28]
 801809c:	462f      	mov	r7, r5
 801809e:	2000      	movs	r0, #0
 80180a0:	250a      	movs	r5, #10
 80180a2:	4639      	mov	r1, r7
 80180a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180a8:	3b30      	subs	r3, #48	; 0x30
 80180aa:	2b09      	cmp	r3, #9
 80180ac:	d94d      	bls.n	801814a <_svfiprintf_r+0x16e>
 80180ae:	b1b8      	cbz	r0, 80180e0 <_svfiprintf_r+0x104>
 80180b0:	e00f      	b.n	80180d2 <_svfiprintf_r+0xf6>
 80180b2:	462f      	mov	r7, r5
 80180b4:	e7b8      	b.n	8018028 <_svfiprintf_r+0x4c>
 80180b6:	4a40      	ldr	r2, [pc, #256]	; (80181b8 <_svfiprintf_r+0x1dc>)
 80180b8:	1a80      	subs	r0, r0, r2
 80180ba:	fa0b f000 	lsl.w	r0, fp, r0
 80180be:	4318      	orrs	r0, r3
 80180c0:	9004      	str	r0, [sp, #16]
 80180c2:	463d      	mov	r5, r7
 80180c4:	e7d3      	b.n	801806e <_svfiprintf_r+0x92>
 80180c6:	9a03      	ldr	r2, [sp, #12]
 80180c8:	1d11      	adds	r1, r2, #4
 80180ca:	6812      	ldr	r2, [r2, #0]
 80180cc:	9103      	str	r1, [sp, #12]
 80180ce:	2a00      	cmp	r2, #0
 80180d0:	db01      	blt.n	80180d6 <_svfiprintf_r+0xfa>
 80180d2:	9207      	str	r2, [sp, #28]
 80180d4:	e004      	b.n	80180e0 <_svfiprintf_r+0x104>
 80180d6:	4252      	negs	r2, r2
 80180d8:	f043 0302 	orr.w	r3, r3, #2
 80180dc:	9207      	str	r2, [sp, #28]
 80180de:	9304      	str	r3, [sp, #16]
 80180e0:	783b      	ldrb	r3, [r7, #0]
 80180e2:	2b2e      	cmp	r3, #46	; 0x2e
 80180e4:	d10c      	bne.n	8018100 <_svfiprintf_r+0x124>
 80180e6:	787b      	ldrb	r3, [r7, #1]
 80180e8:	2b2a      	cmp	r3, #42	; 0x2a
 80180ea:	d133      	bne.n	8018154 <_svfiprintf_r+0x178>
 80180ec:	9b03      	ldr	r3, [sp, #12]
 80180ee:	1d1a      	adds	r2, r3, #4
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	9203      	str	r2, [sp, #12]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	bfb8      	it	lt
 80180f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80180fc:	3702      	adds	r7, #2
 80180fe:	9305      	str	r3, [sp, #20]
 8018100:	4d2e      	ldr	r5, [pc, #184]	; (80181bc <_svfiprintf_r+0x1e0>)
 8018102:	7839      	ldrb	r1, [r7, #0]
 8018104:	2203      	movs	r2, #3
 8018106:	4628      	mov	r0, r5
 8018108:	f7e8 f88a 	bl	8000220 <memchr>
 801810c:	b138      	cbz	r0, 801811e <_svfiprintf_r+0x142>
 801810e:	2340      	movs	r3, #64	; 0x40
 8018110:	1b40      	subs	r0, r0, r5
 8018112:	fa03 f000 	lsl.w	r0, r3, r0
 8018116:	9b04      	ldr	r3, [sp, #16]
 8018118:	4303      	orrs	r3, r0
 801811a:	3701      	adds	r7, #1
 801811c:	9304      	str	r3, [sp, #16]
 801811e:	7839      	ldrb	r1, [r7, #0]
 8018120:	4827      	ldr	r0, [pc, #156]	; (80181c0 <_svfiprintf_r+0x1e4>)
 8018122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018126:	2206      	movs	r2, #6
 8018128:	1c7e      	adds	r6, r7, #1
 801812a:	f7e8 f879 	bl	8000220 <memchr>
 801812e:	2800      	cmp	r0, #0
 8018130:	d038      	beq.n	80181a4 <_svfiprintf_r+0x1c8>
 8018132:	4b24      	ldr	r3, [pc, #144]	; (80181c4 <_svfiprintf_r+0x1e8>)
 8018134:	bb13      	cbnz	r3, 801817c <_svfiprintf_r+0x1a0>
 8018136:	9b03      	ldr	r3, [sp, #12]
 8018138:	3307      	adds	r3, #7
 801813a:	f023 0307 	bic.w	r3, r3, #7
 801813e:	3308      	adds	r3, #8
 8018140:	9303      	str	r3, [sp, #12]
 8018142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018144:	444b      	add	r3, r9
 8018146:	9309      	str	r3, [sp, #36]	; 0x24
 8018148:	e76d      	b.n	8018026 <_svfiprintf_r+0x4a>
 801814a:	fb05 3202 	mla	r2, r5, r2, r3
 801814e:	2001      	movs	r0, #1
 8018150:	460f      	mov	r7, r1
 8018152:	e7a6      	b.n	80180a2 <_svfiprintf_r+0xc6>
 8018154:	2300      	movs	r3, #0
 8018156:	3701      	adds	r7, #1
 8018158:	9305      	str	r3, [sp, #20]
 801815a:	4619      	mov	r1, r3
 801815c:	250a      	movs	r5, #10
 801815e:	4638      	mov	r0, r7
 8018160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018164:	3a30      	subs	r2, #48	; 0x30
 8018166:	2a09      	cmp	r2, #9
 8018168:	d903      	bls.n	8018172 <_svfiprintf_r+0x196>
 801816a:	2b00      	cmp	r3, #0
 801816c:	d0c8      	beq.n	8018100 <_svfiprintf_r+0x124>
 801816e:	9105      	str	r1, [sp, #20]
 8018170:	e7c6      	b.n	8018100 <_svfiprintf_r+0x124>
 8018172:	fb05 2101 	mla	r1, r5, r1, r2
 8018176:	2301      	movs	r3, #1
 8018178:	4607      	mov	r7, r0
 801817a:	e7f0      	b.n	801815e <_svfiprintf_r+0x182>
 801817c:	ab03      	add	r3, sp, #12
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	4622      	mov	r2, r4
 8018182:	4b11      	ldr	r3, [pc, #68]	; (80181c8 <_svfiprintf_r+0x1ec>)
 8018184:	a904      	add	r1, sp, #16
 8018186:	4640      	mov	r0, r8
 8018188:	f3af 8000 	nop.w
 801818c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018190:	4681      	mov	r9, r0
 8018192:	d1d6      	bne.n	8018142 <_svfiprintf_r+0x166>
 8018194:	89a3      	ldrh	r3, [r4, #12]
 8018196:	065b      	lsls	r3, r3, #25
 8018198:	f53f af35 	bmi.w	8018006 <_svfiprintf_r+0x2a>
 801819c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801819e:	b01d      	add	sp, #116	; 0x74
 80181a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a4:	ab03      	add	r3, sp, #12
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	4622      	mov	r2, r4
 80181aa:	4b07      	ldr	r3, [pc, #28]	; (80181c8 <_svfiprintf_r+0x1ec>)
 80181ac:	a904      	add	r1, sp, #16
 80181ae:	4640      	mov	r0, r8
 80181b0:	f000 f882 	bl	80182b8 <_printf_i>
 80181b4:	e7ea      	b.n	801818c <_svfiprintf_r+0x1b0>
 80181b6:	bf00      	nop
 80181b8:	0801ada4 	.word	0x0801ada4
 80181bc:	0801adaa 	.word	0x0801adaa
 80181c0:	0801adae 	.word	0x0801adae
 80181c4:	00000000 	.word	0x00000000
 80181c8:	08017f29 	.word	0x08017f29

080181cc <_printf_common>:
 80181cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181d0:	4691      	mov	r9, r2
 80181d2:	461f      	mov	r7, r3
 80181d4:	688a      	ldr	r2, [r1, #8]
 80181d6:	690b      	ldr	r3, [r1, #16]
 80181d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80181dc:	4293      	cmp	r3, r2
 80181de:	bfb8      	it	lt
 80181e0:	4613      	movlt	r3, r2
 80181e2:	f8c9 3000 	str.w	r3, [r9]
 80181e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80181ea:	4606      	mov	r6, r0
 80181ec:	460c      	mov	r4, r1
 80181ee:	b112      	cbz	r2, 80181f6 <_printf_common+0x2a>
 80181f0:	3301      	adds	r3, #1
 80181f2:	f8c9 3000 	str.w	r3, [r9]
 80181f6:	6823      	ldr	r3, [r4, #0]
 80181f8:	0699      	lsls	r1, r3, #26
 80181fa:	bf42      	ittt	mi
 80181fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018200:	3302      	addmi	r3, #2
 8018202:	f8c9 3000 	strmi.w	r3, [r9]
 8018206:	6825      	ldr	r5, [r4, #0]
 8018208:	f015 0506 	ands.w	r5, r5, #6
 801820c:	d107      	bne.n	801821e <_printf_common+0x52>
 801820e:	f104 0a19 	add.w	sl, r4, #25
 8018212:	68e3      	ldr	r3, [r4, #12]
 8018214:	f8d9 2000 	ldr.w	r2, [r9]
 8018218:	1a9b      	subs	r3, r3, r2
 801821a:	42ab      	cmp	r3, r5
 801821c:	dc28      	bgt.n	8018270 <_printf_common+0xa4>
 801821e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018222:	6822      	ldr	r2, [r4, #0]
 8018224:	3300      	adds	r3, #0
 8018226:	bf18      	it	ne
 8018228:	2301      	movne	r3, #1
 801822a:	0692      	lsls	r2, r2, #26
 801822c:	d42d      	bmi.n	801828a <_printf_common+0xbe>
 801822e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018232:	4639      	mov	r1, r7
 8018234:	4630      	mov	r0, r6
 8018236:	47c0      	blx	r8
 8018238:	3001      	adds	r0, #1
 801823a:	d020      	beq.n	801827e <_printf_common+0xb2>
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	68e5      	ldr	r5, [r4, #12]
 8018240:	f8d9 2000 	ldr.w	r2, [r9]
 8018244:	f003 0306 	and.w	r3, r3, #6
 8018248:	2b04      	cmp	r3, #4
 801824a:	bf08      	it	eq
 801824c:	1aad      	subeq	r5, r5, r2
 801824e:	68a3      	ldr	r3, [r4, #8]
 8018250:	6922      	ldr	r2, [r4, #16]
 8018252:	bf0c      	ite	eq
 8018254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018258:	2500      	movne	r5, #0
 801825a:	4293      	cmp	r3, r2
 801825c:	bfc4      	itt	gt
 801825e:	1a9b      	subgt	r3, r3, r2
 8018260:	18ed      	addgt	r5, r5, r3
 8018262:	f04f 0900 	mov.w	r9, #0
 8018266:	341a      	adds	r4, #26
 8018268:	454d      	cmp	r5, r9
 801826a:	d11a      	bne.n	80182a2 <_printf_common+0xd6>
 801826c:	2000      	movs	r0, #0
 801826e:	e008      	b.n	8018282 <_printf_common+0xb6>
 8018270:	2301      	movs	r3, #1
 8018272:	4652      	mov	r2, sl
 8018274:	4639      	mov	r1, r7
 8018276:	4630      	mov	r0, r6
 8018278:	47c0      	blx	r8
 801827a:	3001      	adds	r0, #1
 801827c:	d103      	bne.n	8018286 <_printf_common+0xba>
 801827e:	f04f 30ff 	mov.w	r0, #4294967295
 8018282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018286:	3501      	adds	r5, #1
 8018288:	e7c3      	b.n	8018212 <_printf_common+0x46>
 801828a:	18e1      	adds	r1, r4, r3
 801828c:	1c5a      	adds	r2, r3, #1
 801828e:	2030      	movs	r0, #48	; 0x30
 8018290:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018294:	4422      	add	r2, r4
 8018296:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801829a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801829e:	3302      	adds	r3, #2
 80182a0:	e7c5      	b.n	801822e <_printf_common+0x62>
 80182a2:	2301      	movs	r3, #1
 80182a4:	4622      	mov	r2, r4
 80182a6:	4639      	mov	r1, r7
 80182a8:	4630      	mov	r0, r6
 80182aa:	47c0      	blx	r8
 80182ac:	3001      	adds	r0, #1
 80182ae:	d0e6      	beq.n	801827e <_printf_common+0xb2>
 80182b0:	f109 0901 	add.w	r9, r9, #1
 80182b4:	e7d8      	b.n	8018268 <_printf_common+0x9c>
	...

080182b8 <_printf_i>:
 80182b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80182c0:	460c      	mov	r4, r1
 80182c2:	7e09      	ldrb	r1, [r1, #24]
 80182c4:	b085      	sub	sp, #20
 80182c6:	296e      	cmp	r1, #110	; 0x6e
 80182c8:	4617      	mov	r7, r2
 80182ca:	4606      	mov	r6, r0
 80182cc:	4698      	mov	r8, r3
 80182ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182d0:	f000 80b3 	beq.w	801843a <_printf_i+0x182>
 80182d4:	d822      	bhi.n	801831c <_printf_i+0x64>
 80182d6:	2963      	cmp	r1, #99	; 0x63
 80182d8:	d036      	beq.n	8018348 <_printf_i+0x90>
 80182da:	d80a      	bhi.n	80182f2 <_printf_i+0x3a>
 80182dc:	2900      	cmp	r1, #0
 80182de:	f000 80b9 	beq.w	8018454 <_printf_i+0x19c>
 80182e2:	2958      	cmp	r1, #88	; 0x58
 80182e4:	f000 8083 	beq.w	80183ee <_printf_i+0x136>
 80182e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80182ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80182f0:	e032      	b.n	8018358 <_printf_i+0xa0>
 80182f2:	2964      	cmp	r1, #100	; 0x64
 80182f4:	d001      	beq.n	80182fa <_printf_i+0x42>
 80182f6:	2969      	cmp	r1, #105	; 0x69
 80182f8:	d1f6      	bne.n	80182e8 <_printf_i+0x30>
 80182fa:	6820      	ldr	r0, [r4, #0]
 80182fc:	6813      	ldr	r3, [r2, #0]
 80182fe:	0605      	lsls	r5, r0, #24
 8018300:	f103 0104 	add.w	r1, r3, #4
 8018304:	d52a      	bpl.n	801835c <_printf_i+0xa4>
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	6011      	str	r1, [r2, #0]
 801830a:	2b00      	cmp	r3, #0
 801830c:	da03      	bge.n	8018316 <_printf_i+0x5e>
 801830e:	222d      	movs	r2, #45	; 0x2d
 8018310:	425b      	negs	r3, r3
 8018312:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018316:	486f      	ldr	r0, [pc, #444]	; (80184d4 <_printf_i+0x21c>)
 8018318:	220a      	movs	r2, #10
 801831a:	e039      	b.n	8018390 <_printf_i+0xd8>
 801831c:	2973      	cmp	r1, #115	; 0x73
 801831e:	f000 809d 	beq.w	801845c <_printf_i+0x1a4>
 8018322:	d808      	bhi.n	8018336 <_printf_i+0x7e>
 8018324:	296f      	cmp	r1, #111	; 0x6f
 8018326:	d020      	beq.n	801836a <_printf_i+0xb2>
 8018328:	2970      	cmp	r1, #112	; 0x70
 801832a:	d1dd      	bne.n	80182e8 <_printf_i+0x30>
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	f043 0320 	orr.w	r3, r3, #32
 8018332:	6023      	str	r3, [r4, #0]
 8018334:	e003      	b.n	801833e <_printf_i+0x86>
 8018336:	2975      	cmp	r1, #117	; 0x75
 8018338:	d017      	beq.n	801836a <_printf_i+0xb2>
 801833a:	2978      	cmp	r1, #120	; 0x78
 801833c:	d1d4      	bne.n	80182e8 <_printf_i+0x30>
 801833e:	2378      	movs	r3, #120	; 0x78
 8018340:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018344:	4864      	ldr	r0, [pc, #400]	; (80184d8 <_printf_i+0x220>)
 8018346:	e055      	b.n	80183f4 <_printf_i+0x13c>
 8018348:	6813      	ldr	r3, [r2, #0]
 801834a:	1d19      	adds	r1, r3, #4
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	6011      	str	r1, [r2, #0]
 8018350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018358:	2301      	movs	r3, #1
 801835a:	e08c      	b.n	8018476 <_printf_i+0x1be>
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	6011      	str	r1, [r2, #0]
 8018360:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018364:	bf18      	it	ne
 8018366:	b21b      	sxthne	r3, r3
 8018368:	e7cf      	b.n	801830a <_printf_i+0x52>
 801836a:	6813      	ldr	r3, [r2, #0]
 801836c:	6825      	ldr	r5, [r4, #0]
 801836e:	1d18      	adds	r0, r3, #4
 8018370:	6010      	str	r0, [r2, #0]
 8018372:	0628      	lsls	r0, r5, #24
 8018374:	d501      	bpl.n	801837a <_printf_i+0xc2>
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	e002      	b.n	8018380 <_printf_i+0xc8>
 801837a:	0668      	lsls	r0, r5, #25
 801837c:	d5fb      	bpl.n	8018376 <_printf_i+0xbe>
 801837e:	881b      	ldrh	r3, [r3, #0]
 8018380:	4854      	ldr	r0, [pc, #336]	; (80184d4 <_printf_i+0x21c>)
 8018382:	296f      	cmp	r1, #111	; 0x6f
 8018384:	bf14      	ite	ne
 8018386:	220a      	movne	r2, #10
 8018388:	2208      	moveq	r2, #8
 801838a:	2100      	movs	r1, #0
 801838c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018390:	6865      	ldr	r5, [r4, #4]
 8018392:	60a5      	str	r5, [r4, #8]
 8018394:	2d00      	cmp	r5, #0
 8018396:	f2c0 8095 	blt.w	80184c4 <_printf_i+0x20c>
 801839a:	6821      	ldr	r1, [r4, #0]
 801839c:	f021 0104 	bic.w	r1, r1, #4
 80183a0:	6021      	str	r1, [r4, #0]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d13d      	bne.n	8018422 <_printf_i+0x16a>
 80183a6:	2d00      	cmp	r5, #0
 80183a8:	f040 808e 	bne.w	80184c8 <_printf_i+0x210>
 80183ac:	4665      	mov	r5, ip
 80183ae:	2a08      	cmp	r2, #8
 80183b0:	d10b      	bne.n	80183ca <_printf_i+0x112>
 80183b2:	6823      	ldr	r3, [r4, #0]
 80183b4:	07db      	lsls	r3, r3, #31
 80183b6:	d508      	bpl.n	80183ca <_printf_i+0x112>
 80183b8:	6923      	ldr	r3, [r4, #16]
 80183ba:	6862      	ldr	r2, [r4, #4]
 80183bc:	429a      	cmp	r2, r3
 80183be:	bfde      	ittt	le
 80183c0:	2330      	movle	r3, #48	; 0x30
 80183c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80183c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80183ca:	ebac 0305 	sub.w	r3, ip, r5
 80183ce:	6123      	str	r3, [r4, #16]
 80183d0:	f8cd 8000 	str.w	r8, [sp]
 80183d4:	463b      	mov	r3, r7
 80183d6:	aa03      	add	r2, sp, #12
 80183d8:	4621      	mov	r1, r4
 80183da:	4630      	mov	r0, r6
 80183dc:	f7ff fef6 	bl	80181cc <_printf_common>
 80183e0:	3001      	adds	r0, #1
 80183e2:	d14d      	bne.n	8018480 <_printf_i+0x1c8>
 80183e4:	f04f 30ff 	mov.w	r0, #4294967295
 80183e8:	b005      	add	sp, #20
 80183ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183ee:	4839      	ldr	r0, [pc, #228]	; (80184d4 <_printf_i+0x21c>)
 80183f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80183f4:	6813      	ldr	r3, [r2, #0]
 80183f6:	6821      	ldr	r1, [r4, #0]
 80183f8:	1d1d      	adds	r5, r3, #4
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	6015      	str	r5, [r2, #0]
 80183fe:	060a      	lsls	r2, r1, #24
 8018400:	d50b      	bpl.n	801841a <_printf_i+0x162>
 8018402:	07ca      	lsls	r2, r1, #31
 8018404:	bf44      	itt	mi
 8018406:	f041 0120 	orrmi.w	r1, r1, #32
 801840a:	6021      	strmi	r1, [r4, #0]
 801840c:	b91b      	cbnz	r3, 8018416 <_printf_i+0x15e>
 801840e:	6822      	ldr	r2, [r4, #0]
 8018410:	f022 0220 	bic.w	r2, r2, #32
 8018414:	6022      	str	r2, [r4, #0]
 8018416:	2210      	movs	r2, #16
 8018418:	e7b7      	b.n	801838a <_printf_i+0xd2>
 801841a:	064d      	lsls	r5, r1, #25
 801841c:	bf48      	it	mi
 801841e:	b29b      	uxthmi	r3, r3
 8018420:	e7ef      	b.n	8018402 <_printf_i+0x14a>
 8018422:	4665      	mov	r5, ip
 8018424:	fbb3 f1f2 	udiv	r1, r3, r2
 8018428:	fb02 3311 	mls	r3, r2, r1, r3
 801842c:	5cc3      	ldrb	r3, [r0, r3]
 801842e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018432:	460b      	mov	r3, r1
 8018434:	2900      	cmp	r1, #0
 8018436:	d1f5      	bne.n	8018424 <_printf_i+0x16c>
 8018438:	e7b9      	b.n	80183ae <_printf_i+0xf6>
 801843a:	6813      	ldr	r3, [r2, #0]
 801843c:	6825      	ldr	r5, [r4, #0]
 801843e:	6961      	ldr	r1, [r4, #20]
 8018440:	1d18      	adds	r0, r3, #4
 8018442:	6010      	str	r0, [r2, #0]
 8018444:	0628      	lsls	r0, r5, #24
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	d501      	bpl.n	801844e <_printf_i+0x196>
 801844a:	6019      	str	r1, [r3, #0]
 801844c:	e002      	b.n	8018454 <_printf_i+0x19c>
 801844e:	066a      	lsls	r2, r5, #25
 8018450:	d5fb      	bpl.n	801844a <_printf_i+0x192>
 8018452:	8019      	strh	r1, [r3, #0]
 8018454:	2300      	movs	r3, #0
 8018456:	6123      	str	r3, [r4, #16]
 8018458:	4665      	mov	r5, ip
 801845a:	e7b9      	b.n	80183d0 <_printf_i+0x118>
 801845c:	6813      	ldr	r3, [r2, #0]
 801845e:	1d19      	adds	r1, r3, #4
 8018460:	6011      	str	r1, [r2, #0]
 8018462:	681d      	ldr	r5, [r3, #0]
 8018464:	6862      	ldr	r2, [r4, #4]
 8018466:	2100      	movs	r1, #0
 8018468:	4628      	mov	r0, r5
 801846a:	f7e7 fed9 	bl	8000220 <memchr>
 801846e:	b108      	cbz	r0, 8018474 <_printf_i+0x1bc>
 8018470:	1b40      	subs	r0, r0, r5
 8018472:	6060      	str	r0, [r4, #4]
 8018474:	6863      	ldr	r3, [r4, #4]
 8018476:	6123      	str	r3, [r4, #16]
 8018478:	2300      	movs	r3, #0
 801847a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801847e:	e7a7      	b.n	80183d0 <_printf_i+0x118>
 8018480:	6923      	ldr	r3, [r4, #16]
 8018482:	462a      	mov	r2, r5
 8018484:	4639      	mov	r1, r7
 8018486:	4630      	mov	r0, r6
 8018488:	47c0      	blx	r8
 801848a:	3001      	adds	r0, #1
 801848c:	d0aa      	beq.n	80183e4 <_printf_i+0x12c>
 801848e:	6823      	ldr	r3, [r4, #0]
 8018490:	079b      	lsls	r3, r3, #30
 8018492:	d413      	bmi.n	80184bc <_printf_i+0x204>
 8018494:	68e0      	ldr	r0, [r4, #12]
 8018496:	9b03      	ldr	r3, [sp, #12]
 8018498:	4298      	cmp	r0, r3
 801849a:	bfb8      	it	lt
 801849c:	4618      	movlt	r0, r3
 801849e:	e7a3      	b.n	80183e8 <_printf_i+0x130>
 80184a0:	2301      	movs	r3, #1
 80184a2:	464a      	mov	r2, r9
 80184a4:	4639      	mov	r1, r7
 80184a6:	4630      	mov	r0, r6
 80184a8:	47c0      	blx	r8
 80184aa:	3001      	adds	r0, #1
 80184ac:	d09a      	beq.n	80183e4 <_printf_i+0x12c>
 80184ae:	3501      	adds	r5, #1
 80184b0:	68e3      	ldr	r3, [r4, #12]
 80184b2:	9a03      	ldr	r2, [sp, #12]
 80184b4:	1a9b      	subs	r3, r3, r2
 80184b6:	42ab      	cmp	r3, r5
 80184b8:	dcf2      	bgt.n	80184a0 <_printf_i+0x1e8>
 80184ba:	e7eb      	b.n	8018494 <_printf_i+0x1dc>
 80184bc:	2500      	movs	r5, #0
 80184be:	f104 0919 	add.w	r9, r4, #25
 80184c2:	e7f5      	b.n	80184b0 <_printf_i+0x1f8>
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d1ac      	bne.n	8018422 <_printf_i+0x16a>
 80184c8:	7803      	ldrb	r3, [r0, #0]
 80184ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184d2:	e76c      	b.n	80183ae <_printf_i+0xf6>
 80184d4:	0801adb5 	.word	0x0801adb5
 80184d8:	0801adc6 	.word	0x0801adc6

080184dc <memmove>:
 80184dc:	4288      	cmp	r0, r1
 80184de:	b510      	push	{r4, lr}
 80184e0:	eb01 0302 	add.w	r3, r1, r2
 80184e4:	d807      	bhi.n	80184f6 <memmove+0x1a>
 80184e6:	1e42      	subs	r2, r0, #1
 80184e8:	4299      	cmp	r1, r3
 80184ea:	d00a      	beq.n	8018502 <memmove+0x26>
 80184ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80184f4:	e7f8      	b.n	80184e8 <memmove+0xc>
 80184f6:	4283      	cmp	r3, r0
 80184f8:	d9f5      	bls.n	80184e6 <memmove+0xa>
 80184fa:	1881      	adds	r1, r0, r2
 80184fc:	1ad2      	subs	r2, r2, r3
 80184fe:	42d3      	cmn	r3, r2
 8018500:	d100      	bne.n	8018504 <memmove+0x28>
 8018502:	bd10      	pop	{r4, pc}
 8018504:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018508:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801850c:	e7f7      	b.n	80184fe <memmove+0x22>

0801850e <_realloc_r>:
 801850e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018510:	4607      	mov	r7, r0
 8018512:	4614      	mov	r4, r2
 8018514:	460e      	mov	r6, r1
 8018516:	b921      	cbnz	r1, 8018522 <_realloc_r+0x14>
 8018518:	4611      	mov	r1, r2
 801851a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801851e:	f7ff bc63 	b.w	8017de8 <_malloc_r>
 8018522:	b922      	cbnz	r2, 801852e <_realloc_r+0x20>
 8018524:	f7ff fc12 	bl	8017d4c <_free_r>
 8018528:	4625      	mov	r5, r4
 801852a:	4628      	mov	r0, r5
 801852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801852e:	f000 f814 	bl	801855a <_malloc_usable_size_r>
 8018532:	42a0      	cmp	r0, r4
 8018534:	d20f      	bcs.n	8018556 <_realloc_r+0x48>
 8018536:	4621      	mov	r1, r4
 8018538:	4638      	mov	r0, r7
 801853a:	f7ff fc55 	bl	8017de8 <_malloc_r>
 801853e:	4605      	mov	r5, r0
 8018540:	2800      	cmp	r0, #0
 8018542:	d0f2      	beq.n	801852a <_realloc_r+0x1c>
 8018544:	4631      	mov	r1, r6
 8018546:	4622      	mov	r2, r4
 8018548:	f7ff fbec 	bl	8017d24 <memcpy>
 801854c:	4631      	mov	r1, r6
 801854e:	4638      	mov	r0, r7
 8018550:	f7ff fbfc 	bl	8017d4c <_free_r>
 8018554:	e7e9      	b.n	801852a <_realloc_r+0x1c>
 8018556:	4635      	mov	r5, r6
 8018558:	e7e7      	b.n	801852a <_realloc_r+0x1c>

0801855a <_malloc_usable_size_r>:
 801855a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801855e:	1f18      	subs	r0, r3, #4
 8018560:	2b00      	cmp	r3, #0
 8018562:	bfbc      	itt	lt
 8018564:	580b      	ldrlt	r3, [r1, r0]
 8018566:	18c0      	addlt	r0, r0, r3
 8018568:	4770      	bx	lr

0801856a <fmaxf>:
 801856a:	b508      	push	{r3, lr}
 801856c:	ed2d 8b02 	vpush	{d8}
 8018570:	eeb0 8a40 	vmov.f32	s16, s0
 8018574:	eef0 8a60 	vmov.f32	s17, s1
 8018578:	f000 f82e 	bl	80185d8 <__fpclassifyf>
 801857c:	b148      	cbz	r0, 8018592 <fmaxf+0x28>
 801857e:	eeb0 0a68 	vmov.f32	s0, s17
 8018582:	f000 f829 	bl	80185d8 <__fpclassifyf>
 8018586:	b130      	cbz	r0, 8018596 <fmaxf+0x2c>
 8018588:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801858c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018590:	dc01      	bgt.n	8018596 <fmaxf+0x2c>
 8018592:	eeb0 8a68 	vmov.f32	s16, s17
 8018596:	eeb0 0a48 	vmov.f32	s0, s16
 801859a:	ecbd 8b02 	vpop	{d8}
 801859e:	bd08      	pop	{r3, pc}

080185a0 <fminf>:
 80185a0:	b508      	push	{r3, lr}
 80185a2:	ed2d 8b02 	vpush	{d8}
 80185a6:	eeb0 8a40 	vmov.f32	s16, s0
 80185aa:	eef0 8a60 	vmov.f32	s17, s1
 80185ae:	f000 f813 	bl	80185d8 <__fpclassifyf>
 80185b2:	b148      	cbz	r0, 80185c8 <fminf+0x28>
 80185b4:	eeb0 0a68 	vmov.f32	s0, s17
 80185b8:	f000 f80e 	bl	80185d8 <__fpclassifyf>
 80185bc:	b130      	cbz	r0, 80185cc <fminf+0x2c>
 80185be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80185c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c6:	d401      	bmi.n	80185cc <fminf+0x2c>
 80185c8:	eeb0 8a68 	vmov.f32	s16, s17
 80185cc:	eeb0 0a48 	vmov.f32	s0, s16
 80185d0:	ecbd 8b02 	vpop	{d8}
 80185d4:	bd08      	pop	{r3, pc}
	...

080185d8 <__fpclassifyf>:
 80185d8:	ee10 3a10 	vmov	r3, s0
 80185dc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80185e0:	d00d      	beq.n	80185fe <__fpclassifyf+0x26>
 80185e2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80185e6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80185ea:	d30a      	bcc.n	8018602 <__fpclassifyf+0x2a>
 80185ec:	4b07      	ldr	r3, [pc, #28]	; (801860c <__fpclassifyf+0x34>)
 80185ee:	1e42      	subs	r2, r0, #1
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d908      	bls.n	8018606 <__fpclassifyf+0x2e>
 80185f4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80185f8:	4258      	negs	r0, r3
 80185fa:	4158      	adcs	r0, r3
 80185fc:	4770      	bx	lr
 80185fe:	2002      	movs	r0, #2
 8018600:	4770      	bx	lr
 8018602:	2004      	movs	r0, #4
 8018604:	4770      	bx	lr
 8018606:	2003      	movs	r0, #3
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop
 801860c:	007ffffe 	.word	0x007ffffe

08018610 <pow>:
 8018610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018614:	ed2d 8b04 	vpush	{d8-d9}
 8018618:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80188ec <pow+0x2dc>
 801861c:	b08d      	sub	sp, #52	; 0x34
 801861e:	ec57 6b10 	vmov	r6, r7, d0
 8018622:	ec55 4b11 	vmov	r4, r5, d1
 8018626:	f000 fb73 	bl	8018d10 <__ieee754_pow>
 801862a:	f999 3000 	ldrsb.w	r3, [r9]
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	3301      	adds	r3, #1
 8018632:	eeb0 8a40 	vmov.f32	s16, s0
 8018636:	eef0 8a60 	vmov.f32	s17, s1
 801863a:	46c8      	mov	r8, r9
 801863c:	d05f      	beq.n	80186fe <pow+0xee>
 801863e:	4622      	mov	r2, r4
 8018640:	462b      	mov	r3, r5
 8018642:	4620      	mov	r0, r4
 8018644:	4629      	mov	r1, r5
 8018646:	f7e8 fa91 	bl	8000b6c <__aeabi_dcmpun>
 801864a:	4683      	mov	fp, r0
 801864c:	2800      	cmp	r0, #0
 801864e:	d156      	bne.n	80186fe <pow+0xee>
 8018650:	4632      	mov	r2, r6
 8018652:	463b      	mov	r3, r7
 8018654:	4630      	mov	r0, r6
 8018656:	4639      	mov	r1, r7
 8018658:	f7e8 fa88 	bl	8000b6c <__aeabi_dcmpun>
 801865c:	9001      	str	r0, [sp, #4]
 801865e:	b1e8      	cbz	r0, 801869c <pow+0x8c>
 8018660:	2200      	movs	r2, #0
 8018662:	2300      	movs	r3, #0
 8018664:	4620      	mov	r0, r4
 8018666:	4629      	mov	r1, r5
 8018668:	f7e8 fa4e 	bl	8000b08 <__aeabi_dcmpeq>
 801866c:	2800      	cmp	r0, #0
 801866e:	d046      	beq.n	80186fe <pow+0xee>
 8018670:	2301      	movs	r3, #1
 8018672:	9302      	str	r3, [sp, #8]
 8018674:	4b96      	ldr	r3, [pc, #600]	; (80188d0 <pow+0x2c0>)
 8018676:	9303      	str	r3, [sp, #12]
 8018678:	4b96      	ldr	r3, [pc, #600]	; (80188d4 <pow+0x2c4>)
 801867a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801867e:	2200      	movs	r2, #0
 8018680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018684:	9b00      	ldr	r3, [sp, #0]
 8018686:	2b02      	cmp	r3, #2
 8018688:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801868c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018690:	d033      	beq.n	80186fa <pow+0xea>
 8018692:	a802      	add	r0, sp, #8
 8018694:	f001 fbce 	bl	8019e34 <matherr>
 8018698:	bb48      	cbnz	r0, 80186ee <pow+0xde>
 801869a:	e05d      	b.n	8018758 <pow+0x148>
 801869c:	f04f 0a00 	mov.w	sl, #0
 80186a0:	f04f 0b00 	mov.w	fp, #0
 80186a4:	4652      	mov	r2, sl
 80186a6:	465b      	mov	r3, fp
 80186a8:	4630      	mov	r0, r6
 80186aa:	4639      	mov	r1, r7
 80186ac:	f7e8 fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 80186b0:	ec4b ab19 	vmov	d9, sl, fp
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d054      	beq.n	8018762 <pow+0x152>
 80186b8:	4652      	mov	r2, sl
 80186ba:	465b      	mov	r3, fp
 80186bc:	4620      	mov	r0, r4
 80186be:	4629      	mov	r1, r5
 80186c0:	f7e8 fa22 	bl	8000b08 <__aeabi_dcmpeq>
 80186c4:	4680      	mov	r8, r0
 80186c6:	b318      	cbz	r0, 8018710 <pow+0x100>
 80186c8:	2301      	movs	r3, #1
 80186ca:	9302      	str	r3, [sp, #8]
 80186cc:	4b80      	ldr	r3, [pc, #512]	; (80188d0 <pow+0x2c0>)
 80186ce:	9303      	str	r3, [sp, #12]
 80186d0:	9b01      	ldr	r3, [sp, #4]
 80186d2:	930a      	str	r3, [sp, #40]	; 0x28
 80186d4:	9b00      	ldr	r3, [sp, #0]
 80186d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80186da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80186de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d0d5      	beq.n	8018692 <pow+0x82>
 80186e6:	4b7b      	ldr	r3, [pc, #492]	; (80188d4 <pow+0x2c4>)
 80186e8:	2200      	movs	r2, #0
 80186ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186f0:	b11b      	cbz	r3, 80186fa <pow+0xea>
 80186f2:	f7ff fadd 	bl	8017cb0 <__errno>
 80186f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186f8:	6003      	str	r3, [r0, #0]
 80186fa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80186fe:	eeb0 0a48 	vmov.f32	s0, s16
 8018702:	eef0 0a68 	vmov.f32	s1, s17
 8018706:	b00d      	add	sp, #52	; 0x34
 8018708:	ecbd 8b04 	vpop	{d8-d9}
 801870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018710:	ec45 4b10 	vmov	d0, r4, r5
 8018714:	f001 fb86 	bl	8019e24 <finite>
 8018718:	2800      	cmp	r0, #0
 801871a:	d0f0      	beq.n	80186fe <pow+0xee>
 801871c:	4652      	mov	r2, sl
 801871e:	465b      	mov	r3, fp
 8018720:	4620      	mov	r0, r4
 8018722:	4629      	mov	r1, r5
 8018724:	f7e8 f9fa 	bl	8000b1c <__aeabi_dcmplt>
 8018728:	2800      	cmp	r0, #0
 801872a:	d0e8      	beq.n	80186fe <pow+0xee>
 801872c:	2301      	movs	r3, #1
 801872e:	9302      	str	r3, [sp, #8]
 8018730:	4b67      	ldr	r3, [pc, #412]	; (80188d0 <pow+0x2c0>)
 8018732:	9303      	str	r3, [sp, #12]
 8018734:	f999 3000 	ldrsb.w	r3, [r9]
 8018738:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801873c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018740:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018744:	b913      	cbnz	r3, 801874c <pow+0x13c>
 8018746:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801874a:	e7a2      	b.n	8018692 <pow+0x82>
 801874c:	4962      	ldr	r1, [pc, #392]	; (80188d8 <pow+0x2c8>)
 801874e:	2000      	movs	r0, #0
 8018750:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018754:	2b02      	cmp	r3, #2
 8018756:	d19c      	bne.n	8018692 <pow+0x82>
 8018758:	f7ff faaa 	bl	8017cb0 <__errno>
 801875c:	2321      	movs	r3, #33	; 0x21
 801875e:	6003      	str	r3, [r0, #0]
 8018760:	e7c5      	b.n	80186ee <pow+0xde>
 8018762:	eeb0 0a48 	vmov.f32	s0, s16
 8018766:	eef0 0a68 	vmov.f32	s1, s17
 801876a:	f001 fb5b 	bl	8019e24 <finite>
 801876e:	9000      	str	r0, [sp, #0]
 8018770:	2800      	cmp	r0, #0
 8018772:	f040 8081 	bne.w	8018878 <pow+0x268>
 8018776:	ec47 6b10 	vmov	d0, r6, r7
 801877a:	f001 fb53 	bl	8019e24 <finite>
 801877e:	2800      	cmp	r0, #0
 8018780:	d07a      	beq.n	8018878 <pow+0x268>
 8018782:	ec45 4b10 	vmov	d0, r4, r5
 8018786:	f001 fb4d 	bl	8019e24 <finite>
 801878a:	2800      	cmp	r0, #0
 801878c:	d074      	beq.n	8018878 <pow+0x268>
 801878e:	ec53 2b18 	vmov	r2, r3, d8
 8018792:	ee18 0a10 	vmov	r0, s16
 8018796:	4619      	mov	r1, r3
 8018798:	f7e8 f9e8 	bl	8000b6c <__aeabi_dcmpun>
 801879c:	f999 9000 	ldrsb.w	r9, [r9]
 80187a0:	4b4b      	ldr	r3, [pc, #300]	; (80188d0 <pow+0x2c0>)
 80187a2:	b1b0      	cbz	r0, 80187d2 <pow+0x1c2>
 80187a4:	2201      	movs	r2, #1
 80187a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80187aa:	9b00      	ldr	r3, [sp, #0]
 80187ac:	930a      	str	r3, [sp, #40]	; 0x28
 80187ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80187b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80187b6:	f1b9 0f00 	cmp.w	r9, #0
 80187ba:	d0c4      	beq.n	8018746 <pow+0x136>
 80187bc:	4652      	mov	r2, sl
 80187be:	465b      	mov	r3, fp
 80187c0:	4650      	mov	r0, sl
 80187c2:	4659      	mov	r1, fp
 80187c4:	f7e8 f862 	bl	800088c <__aeabi_ddiv>
 80187c8:	f1b9 0f02 	cmp.w	r9, #2
 80187cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80187d0:	e7c1      	b.n	8018756 <pow+0x146>
 80187d2:	2203      	movs	r2, #3
 80187d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80187d8:	900a      	str	r0, [sp, #40]	; 0x28
 80187da:	4629      	mov	r1, r5
 80187dc:	4620      	mov	r0, r4
 80187de:	2200      	movs	r2, #0
 80187e0:	4b3e      	ldr	r3, [pc, #248]	; (80188dc <pow+0x2cc>)
 80187e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80187e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80187ea:	f7e7 ff25 	bl	8000638 <__aeabi_dmul>
 80187ee:	4604      	mov	r4, r0
 80187f0:	460d      	mov	r5, r1
 80187f2:	f1b9 0f00 	cmp.w	r9, #0
 80187f6:	d124      	bne.n	8018842 <pow+0x232>
 80187f8:	4b39      	ldr	r3, [pc, #228]	; (80188e0 <pow+0x2d0>)
 80187fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80187fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018802:	4630      	mov	r0, r6
 8018804:	4652      	mov	r2, sl
 8018806:	465b      	mov	r3, fp
 8018808:	4639      	mov	r1, r7
 801880a:	f7e8 f987 	bl	8000b1c <__aeabi_dcmplt>
 801880e:	2800      	cmp	r0, #0
 8018810:	d056      	beq.n	80188c0 <pow+0x2b0>
 8018812:	ec45 4b10 	vmov	d0, r4, r5
 8018816:	f001 fb17 	bl	8019e48 <rint>
 801881a:	4622      	mov	r2, r4
 801881c:	462b      	mov	r3, r5
 801881e:	ec51 0b10 	vmov	r0, r1, d0
 8018822:	f7e8 f971 	bl	8000b08 <__aeabi_dcmpeq>
 8018826:	b920      	cbnz	r0, 8018832 <pow+0x222>
 8018828:	4b2e      	ldr	r3, [pc, #184]	; (80188e4 <pow+0x2d4>)
 801882a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801882e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018832:	f998 3000 	ldrsb.w	r3, [r8]
 8018836:	2b02      	cmp	r3, #2
 8018838:	d142      	bne.n	80188c0 <pow+0x2b0>
 801883a:	f7ff fa39 	bl	8017cb0 <__errno>
 801883e:	2322      	movs	r3, #34	; 0x22
 8018840:	e78d      	b.n	801875e <pow+0x14e>
 8018842:	4b29      	ldr	r3, [pc, #164]	; (80188e8 <pow+0x2d8>)
 8018844:	2200      	movs	r2, #0
 8018846:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801884a:	4630      	mov	r0, r6
 801884c:	4652      	mov	r2, sl
 801884e:	465b      	mov	r3, fp
 8018850:	4639      	mov	r1, r7
 8018852:	f7e8 f963 	bl	8000b1c <__aeabi_dcmplt>
 8018856:	2800      	cmp	r0, #0
 8018858:	d0eb      	beq.n	8018832 <pow+0x222>
 801885a:	ec45 4b10 	vmov	d0, r4, r5
 801885e:	f001 faf3 	bl	8019e48 <rint>
 8018862:	4622      	mov	r2, r4
 8018864:	462b      	mov	r3, r5
 8018866:	ec51 0b10 	vmov	r0, r1, d0
 801886a:	f7e8 f94d 	bl	8000b08 <__aeabi_dcmpeq>
 801886e:	2800      	cmp	r0, #0
 8018870:	d1df      	bne.n	8018832 <pow+0x222>
 8018872:	2200      	movs	r2, #0
 8018874:	4b18      	ldr	r3, [pc, #96]	; (80188d8 <pow+0x2c8>)
 8018876:	e7da      	b.n	801882e <pow+0x21e>
 8018878:	2200      	movs	r2, #0
 801887a:	2300      	movs	r3, #0
 801887c:	ec51 0b18 	vmov	r0, r1, d8
 8018880:	f7e8 f942 	bl	8000b08 <__aeabi_dcmpeq>
 8018884:	2800      	cmp	r0, #0
 8018886:	f43f af3a 	beq.w	80186fe <pow+0xee>
 801888a:	ec47 6b10 	vmov	d0, r6, r7
 801888e:	f001 fac9 	bl	8019e24 <finite>
 8018892:	2800      	cmp	r0, #0
 8018894:	f43f af33 	beq.w	80186fe <pow+0xee>
 8018898:	ec45 4b10 	vmov	d0, r4, r5
 801889c:	f001 fac2 	bl	8019e24 <finite>
 80188a0:	2800      	cmp	r0, #0
 80188a2:	f43f af2c 	beq.w	80186fe <pow+0xee>
 80188a6:	2304      	movs	r3, #4
 80188a8:	9302      	str	r3, [sp, #8]
 80188aa:	4b09      	ldr	r3, [pc, #36]	; (80188d0 <pow+0x2c0>)
 80188ac:	9303      	str	r3, [sp, #12]
 80188ae:	2300      	movs	r3, #0
 80188b0:	930a      	str	r3, [sp, #40]	; 0x28
 80188b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80188b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80188ba:	ed8d 9b08 	vstr	d9, [sp, #32]
 80188be:	e7b8      	b.n	8018832 <pow+0x222>
 80188c0:	a802      	add	r0, sp, #8
 80188c2:	f001 fab7 	bl	8019e34 <matherr>
 80188c6:	2800      	cmp	r0, #0
 80188c8:	f47f af11 	bne.w	80186ee <pow+0xde>
 80188cc:	e7b5      	b.n	801883a <pow+0x22a>
 80188ce:	bf00      	nop
 80188d0:	0801ae38 	.word	0x0801ae38
 80188d4:	3ff00000 	.word	0x3ff00000
 80188d8:	fff00000 	.word	0xfff00000
 80188dc:	3fe00000 	.word	0x3fe00000
 80188e0:	47efffff 	.word	0x47efffff
 80188e4:	c7efffff 	.word	0xc7efffff
 80188e8:	7ff00000 	.word	0x7ff00000
 80188ec:	200001f8 	.word	0x200001f8

080188f0 <sqrt>:
 80188f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188f4:	ed2d 8b02 	vpush	{d8}
 80188f8:	b08b      	sub	sp, #44	; 0x2c
 80188fa:	ec55 4b10 	vmov	r4, r5, d0
 80188fe:	f000 ff15 	bl	801972c <__ieee754_sqrt>
 8018902:	4b26      	ldr	r3, [pc, #152]	; (801899c <sqrt+0xac>)
 8018904:	eeb0 8a40 	vmov.f32	s16, s0
 8018908:	eef0 8a60 	vmov.f32	s17, s1
 801890c:	f993 6000 	ldrsb.w	r6, [r3]
 8018910:	1c73      	adds	r3, r6, #1
 8018912:	d02a      	beq.n	801896a <sqrt+0x7a>
 8018914:	4622      	mov	r2, r4
 8018916:	462b      	mov	r3, r5
 8018918:	4620      	mov	r0, r4
 801891a:	4629      	mov	r1, r5
 801891c:	f7e8 f926 	bl	8000b6c <__aeabi_dcmpun>
 8018920:	4607      	mov	r7, r0
 8018922:	bb10      	cbnz	r0, 801896a <sqrt+0x7a>
 8018924:	f04f 0800 	mov.w	r8, #0
 8018928:	f04f 0900 	mov.w	r9, #0
 801892c:	4642      	mov	r2, r8
 801892e:	464b      	mov	r3, r9
 8018930:	4620      	mov	r0, r4
 8018932:	4629      	mov	r1, r5
 8018934:	f7e8 f8f2 	bl	8000b1c <__aeabi_dcmplt>
 8018938:	b1b8      	cbz	r0, 801896a <sqrt+0x7a>
 801893a:	2301      	movs	r3, #1
 801893c:	9300      	str	r3, [sp, #0]
 801893e:	4b18      	ldr	r3, [pc, #96]	; (80189a0 <sqrt+0xb0>)
 8018940:	9301      	str	r3, [sp, #4]
 8018942:	9708      	str	r7, [sp, #32]
 8018944:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018948:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801894c:	b9b6      	cbnz	r6, 801897c <sqrt+0x8c>
 801894e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8018952:	4668      	mov	r0, sp
 8018954:	f001 fa6e 	bl	8019e34 <matherr>
 8018958:	b1d0      	cbz	r0, 8018990 <sqrt+0xa0>
 801895a:	9b08      	ldr	r3, [sp, #32]
 801895c:	b11b      	cbz	r3, 8018966 <sqrt+0x76>
 801895e:	f7ff f9a7 	bl	8017cb0 <__errno>
 8018962:	9b08      	ldr	r3, [sp, #32]
 8018964:	6003      	str	r3, [r0, #0]
 8018966:	ed9d 8b06 	vldr	d8, [sp, #24]
 801896a:	eeb0 0a48 	vmov.f32	s0, s16
 801896e:	eef0 0a68 	vmov.f32	s1, s17
 8018972:	b00b      	add	sp, #44	; 0x2c
 8018974:	ecbd 8b02 	vpop	{d8}
 8018978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801897c:	4642      	mov	r2, r8
 801897e:	464b      	mov	r3, r9
 8018980:	4640      	mov	r0, r8
 8018982:	4649      	mov	r1, r9
 8018984:	f7e7 ff82 	bl	800088c <__aeabi_ddiv>
 8018988:	2e02      	cmp	r6, #2
 801898a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801898e:	d1e0      	bne.n	8018952 <sqrt+0x62>
 8018990:	f7ff f98e 	bl	8017cb0 <__errno>
 8018994:	2321      	movs	r3, #33	; 0x21
 8018996:	6003      	str	r3, [r0, #0]
 8018998:	e7df      	b.n	801895a <sqrt+0x6a>
 801899a:	bf00      	nop
 801899c:	200001f8 	.word	0x200001f8
 80189a0:	0801ae3c 	.word	0x0801ae3c

080189a4 <powf>:
 80189a4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80189a8:	ed2d 8b04 	vpush	{d8-d9}
 80189ac:	4ca7      	ldr	r4, [pc, #668]	; (8018c4c <powf+0x2a8>)
 80189ae:	b08a      	sub	sp, #40	; 0x28
 80189b0:	eef0 8a40 	vmov.f32	s17, s0
 80189b4:	eeb0 8a60 	vmov.f32	s16, s1
 80189b8:	f000 ff68 	bl	801988c <__ieee754_powf>
 80189bc:	f994 5000 	ldrsb.w	r5, [r4]
 80189c0:	1c6b      	adds	r3, r5, #1
 80189c2:	eeb0 9a40 	vmov.f32	s18, s0
 80189c6:	4626      	mov	r6, r4
 80189c8:	d05f      	beq.n	8018a8a <powf+0xe6>
 80189ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80189ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d2:	d65a      	bvs.n	8018a8a <powf+0xe6>
 80189d4:	eef4 8a68 	vcmp.f32	s17, s17
 80189d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189dc:	d721      	bvc.n	8018a22 <powf+0x7e>
 80189de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80189e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189e6:	d150      	bne.n	8018a8a <powf+0xe6>
 80189e8:	2301      	movs	r3, #1
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	4b98      	ldr	r3, [pc, #608]	; (8018c50 <powf+0x2ac>)
 80189ee:	9301      	str	r3, [sp, #4]
 80189f0:	ee18 0a90 	vmov	r0, s17
 80189f4:	2300      	movs	r3, #0
 80189f6:	9308      	str	r3, [sp, #32]
 80189f8:	f7e7 fdc6 	bl	8000588 <__aeabi_f2d>
 80189fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a00:	ee18 0a10 	vmov	r0, s16
 8018a04:	f7e7 fdc0 	bl	8000588 <__aeabi_f2d>
 8018a08:	4b92      	ldr	r3, [pc, #584]	; (8018c54 <powf+0x2b0>)
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	2d02      	cmp	r5, #2
 8018a0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a16:	d032      	beq.n	8018a7e <powf+0xda>
 8018a18:	4668      	mov	r0, sp
 8018a1a:	f001 fa0b 	bl	8019e34 <matherr>
 8018a1e:	bb40      	cbnz	r0, 8018a72 <powf+0xce>
 8018a20:	e065      	b.n	8018aee <powf+0x14a>
 8018a22:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018c58 <powf+0x2b4>
 8018a26:	eef4 8a69 	vcmp.f32	s17, s19
 8018a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2e:	d163      	bne.n	8018af8 <powf+0x154>
 8018a30:	eeb4 8a69 	vcmp.f32	s16, s19
 8018a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a38:	d12e      	bne.n	8018a98 <powf+0xf4>
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	9300      	str	r3, [sp, #0]
 8018a3e:	4b84      	ldr	r3, [pc, #528]	; (8018c50 <powf+0x2ac>)
 8018a40:	9301      	str	r3, [sp, #4]
 8018a42:	ee18 0a90 	vmov	r0, s17
 8018a46:	2300      	movs	r3, #0
 8018a48:	9308      	str	r3, [sp, #32]
 8018a4a:	f7e7 fd9d 	bl	8000588 <__aeabi_f2d>
 8018a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a52:	ee18 0a10 	vmov	r0, s16
 8018a56:	f7e7 fd97 	bl	8000588 <__aeabi_f2d>
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a66:	2d00      	cmp	r5, #0
 8018a68:	d0d6      	beq.n	8018a18 <powf+0x74>
 8018a6a:	4b7a      	ldr	r3, [pc, #488]	; (8018c54 <powf+0x2b0>)
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a72:	9b08      	ldr	r3, [sp, #32]
 8018a74:	b11b      	cbz	r3, 8018a7e <powf+0xda>
 8018a76:	f7ff f91b 	bl	8017cb0 <__errno>
 8018a7a:	9b08      	ldr	r3, [sp, #32]
 8018a7c:	6003      	str	r3, [r0, #0]
 8018a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018a82:	f7e8 f889 	bl	8000b98 <__aeabi_d2f>
 8018a86:	ee09 0a10 	vmov	s18, r0
 8018a8a:	eeb0 0a49 	vmov.f32	s0, s18
 8018a8e:	b00a      	add	sp, #40	; 0x28
 8018a90:	ecbd 8b04 	vpop	{d8-d9}
 8018a94:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8018a98:	eeb0 0a48 	vmov.f32	s0, s16
 8018a9c:	f001 fad5 	bl	801a04a <finitef>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d0f2      	beq.n	8018a8a <powf+0xe6>
 8018aa4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aac:	d5ed      	bpl.n	8018a8a <powf+0xe6>
 8018aae:	2301      	movs	r3, #1
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	4b67      	ldr	r3, [pc, #412]	; (8018c50 <powf+0x2ac>)
 8018ab4:	9301      	str	r3, [sp, #4]
 8018ab6:	ee18 0a90 	vmov	r0, s17
 8018aba:	2300      	movs	r3, #0
 8018abc:	9308      	str	r3, [sp, #32]
 8018abe:	f7e7 fd63 	bl	8000588 <__aeabi_f2d>
 8018ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ac6:	ee18 0a10 	vmov	r0, s16
 8018aca:	f7e7 fd5d 	bl	8000588 <__aeabi_f2d>
 8018ace:	f994 3000 	ldrsb.w	r3, [r4]
 8018ad2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ad6:	b923      	cbnz	r3, 8018ae2 <powf+0x13e>
 8018ad8:	2200      	movs	r2, #0
 8018ada:	2300      	movs	r3, #0
 8018adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018ae0:	e79a      	b.n	8018a18 <powf+0x74>
 8018ae2:	495e      	ldr	r1, [pc, #376]	; (8018c5c <powf+0x2b8>)
 8018ae4:	2000      	movs	r0, #0
 8018ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018aea:	2b02      	cmp	r3, #2
 8018aec:	d194      	bne.n	8018a18 <powf+0x74>
 8018aee:	f7ff f8df 	bl	8017cb0 <__errno>
 8018af2:	2321      	movs	r3, #33	; 0x21
 8018af4:	6003      	str	r3, [r0, #0]
 8018af6:	e7bc      	b.n	8018a72 <powf+0xce>
 8018af8:	f001 faa7 	bl	801a04a <finitef>
 8018afc:	4605      	mov	r5, r0
 8018afe:	2800      	cmp	r0, #0
 8018b00:	d173      	bne.n	8018bea <powf+0x246>
 8018b02:	eeb0 0a68 	vmov.f32	s0, s17
 8018b06:	f001 faa0 	bl	801a04a <finitef>
 8018b0a:	2800      	cmp	r0, #0
 8018b0c:	d06d      	beq.n	8018bea <powf+0x246>
 8018b0e:	eeb0 0a48 	vmov.f32	s0, s16
 8018b12:	f001 fa9a 	bl	801a04a <finitef>
 8018b16:	2800      	cmp	r0, #0
 8018b18:	d067      	beq.n	8018bea <powf+0x246>
 8018b1a:	ee18 0a90 	vmov	r0, s17
 8018b1e:	f7e7 fd33 	bl	8000588 <__aeabi_f2d>
 8018b22:	4680      	mov	r8, r0
 8018b24:	ee18 0a10 	vmov	r0, s16
 8018b28:	4689      	mov	r9, r1
 8018b2a:	f7e7 fd2d 	bl	8000588 <__aeabi_f2d>
 8018b2e:	eeb4 9a49 	vcmp.f32	s18, s18
 8018b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b36:	f994 4000 	ldrsb.w	r4, [r4]
 8018b3a:	4b45      	ldr	r3, [pc, #276]	; (8018c50 <powf+0x2ac>)
 8018b3c:	d713      	bvc.n	8018b66 <powf+0x1c2>
 8018b3e:	2201      	movs	r2, #1
 8018b40:	e9cd 2300 	strd	r2, r3, [sp]
 8018b44:	9508      	str	r5, [sp, #32]
 8018b46:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018b4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b4e:	2c00      	cmp	r4, #0
 8018b50:	d0c2      	beq.n	8018ad8 <powf+0x134>
 8018b52:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8018b56:	ee17 0a90 	vmov	r0, s15
 8018b5a:	f7e7 fd15 	bl	8000588 <__aeabi_f2d>
 8018b5e:	2c02      	cmp	r4, #2
 8018b60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b64:	e7c2      	b.n	8018aec <powf+0x148>
 8018b66:	2203      	movs	r2, #3
 8018b68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8018b70:	9508      	str	r5, [sp, #32]
 8018b72:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b7a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018b7e:	b9fc      	cbnz	r4, 8018bc0 <powf+0x21c>
 8018b80:	4b37      	ldr	r3, [pc, #220]	; (8018c60 <powf+0x2bc>)
 8018b82:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018b86:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018b92:	d553      	bpl.n	8018c3c <powf+0x298>
 8018b94:	eeb0 0a48 	vmov.f32	s0, s16
 8018b98:	f001 fa68 	bl	801a06c <rintf>
 8018b9c:	eeb4 0a48 	vcmp.f32	s0, s16
 8018ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba4:	d004      	beq.n	8018bb0 <powf+0x20c>
 8018ba6:	4b2f      	ldr	r3, [pc, #188]	; (8018c64 <powf+0x2c0>)
 8018ba8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018bac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018bb0:	f996 3000 	ldrsb.w	r3, [r6]
 8018bb4:	2b02      	cmp	r3, #2
 8018bb6:	d141      	bne.n	8018c3c <powf+0x298>
 8018bb8:	f7ff f87a 	bl	8017cb0 <__errno>
 8018bbc:	2322      	movs	r3, #34	; 0x22
 8018bbe:	e799      	b.n	8018af4 <powf+0x150>
 8018bc0:	4b29      	ldr	r3, [pc, #164]	; (8018c68 <powf+0x2c4>)
 8018bc2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018bd0:	d5ee      	bpl.n	8018bb0 <powf+0x20c>
 8018bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8018bd6:	f001 fa49 	bl	801a06c <rintf>
 8018bda:	eeb4 0a48 	vcmp.f32	s0, s16
 8018bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018be2:	d0e5      	beq.n	8018bb0 <powf+0x20c>
 8018be4:	2200      	movs	r2, #0
 8018be6:	4b1d      	ldr	r3, [pc, #116]	; (8018c5c <powf+0x2b8>)
 8018be8:	e7e0      	b.n	8018bac <powf+0x208>
 8018bea:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bf2:	f47f af4a 	bne.w	8018a8a <powf+0xe6>
 8018bf6:	eeb0 0a68 	vmov.f32	s0, s17
 8018bfa:	f001 fa26 	bl	801a04a <finitef>
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	f43f af43 	beq.w	8018a8a <powf+0xe6>
 8018c04:	eeb0 0a48 	vmov.f32	s0, s16
 8018c08:	f001 fa1f 	bl	801a04a <finitef>
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	f43f af3c 	beq.w	8018a8a <powf+0xe6>
 8018c12:	2304      	movs	r3, #4
 8018c14:	9300      	str	r3, [sp, #0]
 8018c16:	4b0e      	ldr	r3, [pc, #56]	; (8018c50 <powf+0x2ac>)
 8018c18:	9301      	str	r3, [sp, #4]
 8018c1a:	ee18 0a90 	vmov	r0, s17
 8018c1e:	2300      	movs	r3, #0
 8018c20:	9308      	str	r3, [sp, #32]
 8018c22:	f7e7 fcb1 	bl	8000588 <__aeabi_f2d>
 8018c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c2a:	ee18 0a10 	vmov	r0, s16
 8018c2e:	f7e7 fcab 	bl	8000588 <__aeabi_f2d>
 8018c32:	2200      	movs	r2, #0
 8018c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c38:	2300      	movs	r3, #0
 8018c3a:	e7b7      	b.n	8018bac <powf+0x208>
 8018c3c:	4668      	mov	r0, sp
 8018c3e:	f001 f8f9 	bl	8019e34 <matherr>
 8018c42:	2800      	cmp	r0, #0
 8018c44:	f47f af15 	bne.w	8018a72 <powf+0xce>
 8018c48:	e7b6      	b.n	8018bb8 <powf+0x214>
 8018c4a:	bf00      	nop
 8018c4c:	200001f8 	.word	0x200001f8
 8018c50:	0801ae41 	.word	0x0801ae41
 8018c54:	3ff00000 	.word	0x3ff00000
 8018c58:	00000000 	.word	0x00000000
 8018c5c:	fff00000 	.word	0xfff00000
 8018c60:	47efffff 	.word	0x47efffff
 8018c64:	c7efffff 	.word	0xc7efffff
 8018c68:	7ff00000 	.word	0x7ff00000

08018c6c <sqrtf>:
 8018c6c:	b510      	push	{r4, lr}
 8018c6e:	ed2d 8b02 	vpush	{d8}
 8018c72:	b08a      	sub	sp, #40	; 0x28
 8018c74:	eeb0 8a40 	vmov.f32	s16, s0
 8018c78:	f001 f8c8 	bl	8019e0c <__ieee754_sqrtf>
 8018c7c:	4b21      	ldr	r3, [pc, #132]	; (8018d04 <sqrtf+0x98>)
 8018c7e:	f993 4000 	ldrsb.w	r4, [r3]
 8018c82:	1c63      	adds	r3, r4, #1
 8018c84:	d02c      	beq.n	8018ce0 <sqrtf+0x74>
 8018c86:	eeb4 8a48 	vcmp.f32	s16, s16
 8018c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8e:	d627      	bvs.n	8018ce0 <sqrtf+0x74>
 8018c90:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c98:	d522      	bpl.n	8018ce0 <sqrtf+0x74>
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	9300      	str	r3, [sp, #0]
 8018c9e:	4b1a      	ldr	r3, [pc, #104]	; (8018d08 <sqrtf+0x9c>)
 8018ca0:	9301      	str	r3, [sp, #4]
 8018ca2:	ee18 0a10 	vmov	r0, s16
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	9308      	str	r3, [sp, #32]
 8018caa:	f7e7 fc6d 	bl	8000588 <__aeabi_f2d>
 8018cae:	2200      	movs	r2, #0
 8018cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018cb8:	2300      	movs	r3, #0
 8018cba:	b9ac      	cbnz	r4, 8018ce8 <sqrtf+0x7c>
 8018cbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018cc0:	4668      	mov	r0, sp
 8018cc2:	f001 f8b7 	bl	8019e34 <matherr>
 8018cc6:	b1b8      	cbz	r0, 8018cf8 <sqrtf+0x8c>
 8018cc8:	9b08      	ldr	r3, [sp, #32]
 8018cca:	b11b      	cbz	r3, 8018cd4 <sqrtf+0x68>
 8018ccc:	f7fe fff0 	bl	8017cb0 <__errno>
 8018cd0:	9b08      	ldr	r3, [sp, #32]
 8018cd2:	6003      	str	r3, [r0, #0]
 8018cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018cd8:	f7e7 ff5e 	bl	8000b98 <__aeabi_d2f>
 8018cdc:	ee00 0a10 	vmov	s0, r0
 8018ce0:	b00a      	add	sp, #40	; 0x28
 8018ce2:	ecbd 8b02 	vpop	{d8}
 8018ce6:	bd10      	pop	{r4, pc}
 8018ce8:	4610      	mov	r0, r2
 8018cea:	4619      	mov	r1, r3
 8018cec:	f7e7 fdce 	bl	800088c <__aeabi_ddiv>
 8018cf0:	2c02      	cmp	r4, #2
 8018cf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018cf6:	d1e3      	bne.n	8018cc0 <sqrtf+0x54>
 8018cf8:	f7fe ffda 	bl	8017cb0 <__errno>
 8018cfc:	2321      	movs	r3, #33	; 0x21
 8018cfe:	6003      	str	r3, [r0, #0]
 8018d00:	e7e2      	b.n	8018cc8 <sqrtf+0x5c>
 8018d02:	bf00      	nop
 8018d04:	200001f8 	.word	0x200001f8
 8018d08:	0801ae46 	.word	0x0801ae46
 8018d0c:	00000000 	.word	0x00000000

08018d10 <__ieee754_pow>:
 8018d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d14:	b091      	sub	sp, #68	; 0x44
 8018d16:	ed8d 1b00 	vstr	d1, [sp]
 8018d1a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018d1e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018d22:	ea58 0302 	orrs.w	r3, r8, r2
 8018d26:	ec57 6b10 	vmov	r6, r7, d0
 8018d2a:	f000 84be 	beq.w	80196aa <__ieee754_pow+0x99a>
 8018d2e:	4b7a      	ldr	r3, [pc, #488]	; (8018f18 <__ieee754_pow+0x208>)
 8018d30:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018d34:	429c      	cmp	r4, r3
 8018d36:	463d      	mov	r5, r7
 8018d38:	ee10 aa10 	vmov	sl, s0
 8018d3c:	dc09      	bgt.n	8018d52 <__ieee754_pow+0x42>
 8018d3e:	d103      	bne.n	8018d48 <__ieee754_pow+0x38>
 8018d40:	b93e      	cbnz	r6, 8018d52 <__ieee754_pow+0x42>
 8018d42:	45a0      	cmp	r8, r4
 8018d44:	dc0d      	bgt.n	8018d62 <__ieee754_pow+0x52>
 8018d46:	e001      	b.n	8018d4c <__ieee754_pow+0x3c>
 8018d48:	4598      	cmp	r8, r3
 8018d4a:	dc02      	bgt.n	8018d52 <__ieee754_pow+0x42>
 8018d4c:	4598      	cmp	r8, r3
 8018d4e:	d10e      	bne.n	8018d6e <__ieee754_pow+0x5e>
 8018d50:	b16a      	cbz	r2, 8018d6e <__ieee754_pow+0x5e>
 8018d52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018d56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018d5a:	ea54 030a 	orrs.w	r3, r4, sl
 8018d5e:	f000 84a4 	beq.w	80196aa <__ieee754_pow+0x99a>
 8018d62:	486e      	ldr	r0, [pc, #440]	; (8018f1c <__ieee754_pow+0x20c>)
 8018d64:	b011      	add	sp, #68	; 0x44
 8018d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d6a:	f001 b865 	b.w	8019e38 <nan>
 8018d6e:	2d00      	cmp	r5, #0
 8018d70:	da53      	bge.n	8018e1a <__ieee754_pow+0x10a>
 8018d72:	4b6b      	ldr	r3, [pc, #428]	; (8018f20 <__ieee754_pow+0x210>)
 8018d74:	4598      	cmp	r8, r3
 8018d76:	dc4d      	bgt.n	8018e14 <__ieee754_pow+0x104>
 8018d78:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018d7c:	4598      	cmp	r8, r3
 8018d7e:	dd4c      	ble.n	8018e1a <__ieee754_pow+0x10a>
 8018d80:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018d84:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018d88:	2b14      	cmp	r3, #20
 8018d8a:	dd26      	ble.n	8018dda <__ieee754_pow+0xca>
 8018d8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018d90:	fa22 f103 	lsr.w	r1, r2, r3
 8018d94:	fa01 f303 	lsl.w	r3, r1, r3
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d13e      	bne.n	8018e1a <__ieee754_pow+0x10a>
 8018d9c:	f001 0101 	and.w	r1, r1, #1
 8018da0:	f1c1 0b02 	rsb	fp, r1, #2
 8018da4:	2a00      	cmp	r2, #0
 8018da6:	d15b      	bne.n	8018e60 <__ieee754_pow+0x150>
 8018da8:	4b5b      	ldr	r3, [pc, #364]	; (8018f18 <__ieee754_pow+0x208>)
 8018daa:	4598      	cmp	r8, r3
 8018dac:	d124      	bne.n	8018df8 <__ieee754_pow+0xe8>
 8018dae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018db2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018db6:	ea53 030a 	orrs.w	r3, r3, sl
 8018dba:	f000 8476 	beq.w	80196aa <__ieee754_pow+0x99a>
 8018dbe:	4b59      	ldr	r3, [pc, #356]	; (8018f24 <__ieee754_pow+0x214>)
 8018dc0:	429c      	cmp	r4, r3
 8018dc2:	dd2d      	ble.n	8018e20 <__ieee754_pow+0x110>
 8018dc4:	f1b9 0f00 	cmp.w	r9, #0
 8018dc8:	f280 8473 	bge.w	80196b2 <__ieee754_pow+0x9a2>
 8018dcc:	2000      	movs	r0, #0
 8018dce:	2100      	movs	r1, #0
 8018dd0:	ec41 0b10 	vmov	d0, r0, r1
 8018dd4:	b011      	add	sp, #68	; 0x44
 8018dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dda:	2a00      	cmp	r2, #0
 8018ddc:	d13e      	bne.n	8018e5c <__ieee754_pow+0x14c>
 8018dde:	f1c3 0314 	rsb	r3, r3, #20
 8018de2:	fa48 f103 	asr.w	r1, r8, r3
 8018de6:	fa01 f303 	lsl.w	r3, r1, r3
 8018dea:	4543      	cmp	r3, r8
 8018dec:	f040 8469 	bne.w	80196c2 <__ieee754_pow+0x9b2>
 8018df0:	f001 0101 	and.w	r1, r1, #1
 8018df4:	f1c1 0b02 	rsb	fp, r1, #2
 8018df8:	4b4b      	ldr	r3, [pc, #300]	; (8018f28 <__ieee754_pow+0x218>)
 8018dfa:	4598      	cmp	r8, r3
 8018dfc:	d118      	bne.n	8018e30 <__ieee754_pow+0x120>
 8018dfe:	f1b9 0f00 	cmp.w	r9, #0
 8018e02:	f280 845a 	bge.w	80196ba <__ieee754_pow+0x9aa>
 8018e06:	4948      	ldr	r1, [pc, #288]	; (8018f28 <__ieee754_pow+0x218>)
 8018e08:	4632      	mov	r2, r6
 8018e0a:	463b      	mov	r3, r7
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	f7e7 fd3d 	bl	800088c <__aeabi_ddiv>
 8018e12:	e7dd      	b.n	8018dd0 <__ieee754_pow+0xc0>
 8018e14:	f04f 0b02 	mov.w	fp, #2
 8018e18:	e7c4      	b.n	8018da4 <__ieee754_pow+0x94>
 8018e1a:	f04f 0b00 	mov.w	fp, #0
 8018e1e:	e7c1      	b.n	8018da4 <__ieee754_pow+0x94>
 8018e20:	f1b9 0f00 	cmp.w	r9, #0
 8018e24:	dad2      	bge.n	8018dcc <__ieee754_pow+0xbc>
 8018e26:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018e2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018e2e:	e7cf      	b.n	8018dd0 <__ieee754_pow+0xc0>
 8018e30:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018e34:	d106      	bne.n	8018e44 <__ieee754_pow+0x134>
 8018e36:	4632      	mov	r2, r6
 8018e38:	463b      	mov	r3, r7
 8018e3a:	4610      	mov	r0, r2
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	f7e7 fbfb 	bl	8000638 <__aeabi_dmul>
 8018e42:	e7c5      	b.n	8018dd0 <__ieee754_pow+0xc0>
 8018e44:	4b39      	ldr	r3, [pc, #228]	; (8018f2c <__ieee754_pow+0x21c>)
 8018e46:	4599      	cmp	r9, r3
 8018e48:	d10a      	bne.n	8018e60 <__ieee754_pow+0x150>
 8018e4a:	2d00      	cmp	r5, #0
 8018e4c:	db08      	blt.n	8018e60 <__ieee754_pow+0x150>
 8018e4e:	ec47 6b10 	vmov	d0, r6, r7
 8018e52:	b011      	add	sp, #68	; 0x44
 8018e54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e58:	f000 bc68 	b.w	801972c <__ieee754_sqrt>
 8018e5c:	f04f 0b00 	mov.w	fp, #0
 8018e60:	ec47 6b10 	vmov	d0, r6, r7
 8018e64:	f000 ffd5 	bl	8019e12 <fabs>
 8018e68:	ec51 0b10 	vmov	r0, r1, d0
 8018e6c:	f1ba 0f00 	cmp.w	sl, #0
 8018e70:	d127      	bne.n	8018ec2 <__ieee754_pow+0x1b2>
 8018e72:	b124      	cbz	r4, 8018e7e <__ieee754_pow+0x16e>
 8018e74:	4b2c      	ldr	r3, [pc, #176]	; (8018f28 <__ieee754_pow+0x218>)
 8018e76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	d121      	bne.n	8018ec2 <__ieee754_pow+0x1b2>
 8018e7e:	f1b9 0f00 	cmp.w	r9, #0
 8018e82:	da05      	bge.n	8018e90 <__ieee754_pow+0x180>
 8018e84:	4602      	mov	r2, r0
 8018e86:	460b      	mov	r3, r1
 8018e88:	2000      	movs	r0, #0
 8018e8a:	4927      	ldr	r1, [pc, #156]	; (8018f28 <__ieee754_pow+0x218>)
 8018e8c:	f7e7 fcfe 	bl	800088c <__aeabi_ddiv>
 8018e90:	2d00      	cmp	r5, #0
 8018e92:	da9d      	bge.n	8018dd0 <__ieee754_pow+0xc0>
 8018e94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018e98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018e9c:	ea54 030b 	orrs.w	r3, r4, fp
 8018ea0:	d108      	bne.n	8018eb4 <__ieee754_pow+0x1a4>
 8018ea2:	4602      	mov	r2, r0
 8018ea4:	460b      	mov	r3, r1
 8018ea6:	4610      	mov	r0, r2
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	f7e7 fa0d 	bl	80002c8 <__aeabi_dsub>
 8018eae:	4602      	mov	r2, r0
 8018eb0:	460b      	mov	r3, r1
 8018eb2:	e7ac      	b.n	8018e0e <__ieee754_pow+0xfe>
 8018eb4:	f1bb 0f01 	cmp.w	fp, #1
 8018eb8:	d18a      	bne.n	8018dd0 <__ieee754_pow+0xc0>
 8018eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	e786      	b.n	8018dd0 <__ieee754_pow+0xc0>
 8018ec2:	0fed      	lsrs	r5, r5, #31
 8018ec4:	1e6b      	subs	r3, r5, #1
 8018ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8018ec8:	ea5b 0303 	orrs.w	r3, fp, r3
 8018ecc:	d102      	bne.n	8018ed4 <__ieee754_pow+0x1c4>
 8018ece:	4632      	mov	r2, r6
 8018ed0:	463b      	mov	r3, r7
 8018ed2:	e7e8      	b.n	8018ea6 <__ieee754_pow+0x196>
 8018ed4:	4b16      	ldr	r3, [pc, #88]	; (8018f30 <__ieee754_pow+0x220>)
 8018ed6:	4598      	cmp	r8, r3
 8018ed8:	f340 80fe 	ble.w	80190d8 <__ieee754_pow+0x3c8>
 8018edc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018ee0:	4598      	cmp	r8, r3
 8018ee2:	dd0a      	ble.n	8018efa <__ieee754_pow+0x1ea>
 8018ee4:	4b0f      	ldr	r3, [pc, #60]	; (8018f24 <__ieee754_pow+0x214>)
 8018ee6:	429c      	cmp	r4, r3
 8018ee8:	dc0d      	bgt.n	8018f06 <__ieee754_pow+0x1f6>
 8018eea:	f1b9 0f00 	cmp.w	r9, #0
 8018eee:	f6bf af6d 	bge.w	8018dcc <__ieee754_pow+0xbc>
 8018ef2:	a307      	add	r3, pc, #28	; (adr r3, 8018f10 <__ieee754_pow+0x200>)
 8018ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef8:	e79f      	b.n	8018e3a <__ieee754_pow+0x12a>
 8018efa:	4b0e      	ldr	r3, [pc, #56]	; (8018f34 <__ieee754_pow+0x224>)
 8018efc:	429c      	cmp	r4, r3
 8018efe:	ddf4      	ble.n	8018eea <__ieee754_pow+0x1da>
 8018f00:	4b09      	ldr	r3, [pc, #36]	; (8018f28 <__ieee754_pow+0x218>)
 8018f02:	429c      	cmp	r4, r3
 8018f04:	dd18      	ble.n	8018f38 <__ieee754_pow+0x228>
 8018f06:	f1b9 0f00 	cmp.w	r9, #0
 8018f0a:	dcf2      	bgt.n	8018ef2 <__ieee754_pow+0x1e2>
 8018f0c:	e75e      	b.n	8018dcc <__ieee754_pow+0xbc>
 8018f0e:	bf00      	nop
 8018f10:	8800759c 	.word	0x8800759c
 8018f14:	7e37e43c 	.word	0x7e37e43c
 8018f18:	7ff00000 	.word	0x7ff00000
 8018f1c:	0801ada9 	.word	0x0801ada9
 8018f20:	433fffff 	.word	0x433fffff
 8018f24:	3fefffff 	.word	0x3fefffff
 8018f28:	3ff00000 	.word	0x3ff00000
 8018f2c:	3fe00000 	.word	0x3fe00000
 8018f30:	41e00000 	.word	0x41e00000
 8018f34:	3feffffe 	.word	0x3feffffe
 8018f38:	2200      	movs	r2, #0
 8018f3a:	4b63      	ldr	r3, [pc, #396]	; (80190c8 <__ieee754_pow+0x3b8>)
 8018f3c:	f7e7 f9c4 	bl	80002c8 <__aeabi_dsub>
 8018f40:	a355      	add	r3, pc, #340	; (adr r3, 8019098 <__ieee754_pow+0x388>)
 8018f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f46:	4604      	mov	r4, r0
 8018f48:	460d      	mov	r5, r1
 8018f4a:	f7e7 fb75 	bl	8000638 <__aeabi_dmul>
 8018f4e:	a354      	add	r3, pc, #336	; (adr r3, 80190a0 <__ieee754_pow+0x390>)
 8018f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f54:	4606      	mov	r6, r0
 8018f56:	460f      	mov	r7, r1
 8018f58:	4620      	mov	r0, r4
 8018f5a:	4629      	mov	r1, r5
 8018f5c:	f7e7 fb6c 	bl	8000638 <__aeabi_dmul>
 8018f60:	2200      	movs	r2, #0
 8018f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018f66:	4b59      	ldr	r3, [pc, #356]	; (80190cc <__ieee754_pow+0x3bc>)
 8018f68:	4620      	mov	r0, r4
 8018f6a:	4629      	mov	r1, r5
 8018f6c:	f7e7 fb64 	bl	8000638 <__aeabi_dmul>
 8018f70:	4602      	mov	r2, r0
 8018f72:	460b      	mov	r3, r1
 8018f74:	a14c      	add	r1, pc, #304	; (adr r1, 80190a8 <__ieee754_pow+0x398>)
 8018f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f7a:	f7e7 f9a5 	bl	80002c8 <__aeabi_dsub>
 8018f7e:	4622      	mov	r2, r4
 8018f80:	462b      	mov	r3, r5
 8018f82:	f7e7 fb59 	bl	8000638 <__aeabi_dmul>
 8018f86:	4602      	mov	r2, r0
 8018f88:	460b      	mov	r3, r1
 8018f8a:	2000      	movs	r0, #0
 8018f8c:	4950      	ldr	r1, [pc, #320]	; (80190d0 <__ieee754_pow+0x3c0>)
 8018f8e:	f7e7 f99b 	bl	80002c8 <__aeabi_dsub>
 8018f92:	4622      	mov	r2, r4
 8018f94:	462b      	mov	r3, r5
 8018f96:	4680      	mov	r8, r0
 8018f98:	4689      	mov	r9, r1
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	4629      	mov	r1, r5
 8018f9e:	f7e7 fb4b 	bl	8000638 <__aeabi_dmul>
 8018fa2:	4602      	mov	r2, r0
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	4640      	mov	r0, r8
 8018fa8:	4649      	mov	r1, r9
 8018faa:	f7e7 fb45 	bl	8000638 <__aeabi_dmul>
 8018fae:	a340      	add	r3, pc, #256	; (adr r3, 80190b0 <__ieee754_pow+0x3a0>)
 8018fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fb4:	f7e7 fb40 	bl	8000638 <__aeabi_dmul>
 8018fb8:	4602      	mov	r2, r0
 8018fba:	460b      	mov	r3, r1
 8018fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018fc0:	f7e7 f982 	bl	80002c8 <__aeabi_dsub>
 8018fc4:	4602      	mov	r2, r0
 8018fc6:	460b      	mov	r3, r1
 8018fc8:	4604      	mov	r4, r0
 8018fca:	460d      	mov	r5, r1
 8018fcc:	4630      	mov	r0, r6
 8018fce:	4639      	mov	r1, r7
 8018fd0:	f7e7 f97c 	bl	80002cc <__adddf3>
 8018fd4:	2000      	movs	r0, #0
 8018fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018fda:	4632      	mov	r2, r6
 8018fdc:	463b      	mov	r3, r7
 8018fde:	f7e7 f973 	bl	80002c8 <__aeabi_dsub>
 8018fe2:	4602      	mov	r2, r0
 8018fe4:	460b      	mov	r3, r1
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	4629      	mov	r1, r5
 8018fea:	f7e7 f96d 	bl	80002c8 <__aeabi_dsub>
 8018fee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ff0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018ff4:	4313      	orrs	r3, r2
 8018ff6:	4606      	mov	r6, r0
 8018ff8:	460f      	mov	r7, r1
 8018ffa:	f040 81eb 	bne.w	80193d4 <__ieee754_pow+0x6c4>
 8018ffe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80190b8 <__ieee754_pow+0x3a8>
 8019002:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019006:	2400      	movs	r4, #0
 8019008:	4622      	mov	r2, r4
 801900a:	462b      	mov	r3, r5
 801900c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019010:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019014:	f7e7 f958 	bl	80002c8 <__aeabi_dsub>
 8019018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801901c:	f7e7 fb0c 	bl	8000638 <__aeabi_dmul>
 8019020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019024:	4680      	mov	r8, r0
 8019026:	4689      	mov	r9, r1
 8019028:	4630      	mov	r0, r6
 801902a:	4639      	mov	r1, r7
 801902c:	f7e7 fb04 	bl	8000638 <__aeabi_dmul>
 8019030:	4602      	mov	r2, r0
 8019032:	460b      	mov	r3, r1
 8019034:	4640      	mov	r0, r8
 8019036:	4649      	mov	r1, r9
 8019038:	f7e7 f948 	bl	80002cc <__adddf3>
 801903c:	4622      	mov	r2, r4
 801903e:	462b      	mov	r3, r5
 8019040:	4680      	mov	r8, r0
 8019042:	4689      	mov	r9, r1
 8019044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019048:	f7e7 faf6 	bl	8000638 <__aeabi_dmul>
 801904c:	460b      	mov	r3, r1
 801904e:	4604      	mov	r4, r0
 8019050:	460d      	mov	r5, r1
 8019052:	4602      	mov	r2, r0
 8019054:	4649      	mov	r1, r9
 8019056:	4640      	mov	r0, r8
 8019058:	e9cd 4500 	strd	r4, r5, [sp]
 801905c:	f7e7 f936 	bl	80002cc <__adddf3>
 8019060:	4b1c      	ldr	r3, [pc, #112]	; (80190d4 <__ieee754_pow+0x3c4>)
 8019062:	4299      	cmp	r1, r3
 8019064:	4606      	mov	r6, r0
 8019066:	460f      	mov	r7, r1
 8019068:	468b      	mov	fp, r1
 801906a:	f340 82f7 	ble.w	801965c <__ieee754_pow+0x94c>
 801906e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019072:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019076:	4303      	orrs	r3, r0
 8019078:	f000 81ea 	beq.w	8019450 <__ieee754_pow+0x740>
 801907c:	a310      	add	r3, pc, #64	; (adr r3, 80190c0 <__ieee754_pow+0x3b0>)
 801907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019086:	f7e7 fad7 	bl	8000638 <__aeabi_dmul>
 801908a:	a30d      	add	r3, pc, #52	; (adr r3, 80190c0 <__ieee754_pow+0x3b0>)
 801908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019090:	e6d5      	b.n	8018e3e <__ieee754_pow+0x12e>
 8019092:	bf00      	nop
 8019094:	f3af 8000 	nop.w
 8019098:	60000000 	.word	0x60000000
 801909c:	3ff71547 	.word	0x3ff71547
 80190a0:	f85ddf44 	.word	0xf85ddf44
 80190a4:	3e54ae0b 	.word	0x3e54ae0b
 80190a8:	55555555 	.word	0x55555555
 80190ac:	3fd55555 	.word	0x3fd55555
 80190b0:	652b82fe 	.word	0x652b82fe
 80190b4:	3ff71547 	.word	0x3ff71547
 80190b8:	00000000 	.word	0x00000000
 80190bc:	bff00000 	.word	0xbff00000
 80190c0:	8800759c 	.word	0x8800759c
 80190c4:	7e37e43c 	.word	0x7e37e43c
 80190c8:	3ff00000 	.word	0x3ff00000
 80190cc:	3fd00000 	.word	0x3fd00000
 80190d0:	3fe00000 	.word	0x3fe00000
 80190d4:	408fffff 	.word	0x408fffff
 80190d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80190dc:	f04f 0200 	mov.w	r2, #0
 80190e0:	da05      	bge.n	80190ee <__ieee754_pow+0x3de>
 80190e2:	4bd3      	ldr	r3, [pc, #844]	; (8019430 <__ieee754_pow+0x720>)
 80190e4:	f7e7 faa8 	bl	8000638 <__aeabi_dmul>
 80190e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80190ec:	460c      	mov	r4, r1
 80190ee:	1523      	asrs	r3, r4, #20
 80190f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80190f4:	4413      	add	r3, r2
 80190f6:	9309      	str	r3, [sp, #36]	; 0x24
 80190f8:	4bce      	ldr	r3, [pc, #824]	; (8019434 <__ieee754_pow+0x724>)
 80190fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80190fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019102:	429c      	cmp	r4, r3
 8019104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019108:	dd08      	ble.n	801911c <__ieee754_pow+0x40c>
 801910a:	4bcb      	ldr	r3, [pc, #812]	; (8019438 <__ieee754_pow+0x728>)
 801910c:	429c      	cmp	r4, r3
 801910e:	f340 815e 	ble.w	80193ce <__ieee754_pow+0x6be>
 8019112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019114:	3301      	adds	r3, #1
 8019116:	9309      	str	r3, [sp, #36]	; 0x24
 8019118:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801911c:	f04f 0a00 	mov.w	sl, #0
 8019120:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019124:	930c      	str	r3, [sp, #48]	; 0x30
 8019126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019128:	4bc4      	ldr	r3, [pc, #784]	; (801943c <__ieee754_pow+0x72c>)
 801912a:	4413      	add	r3, r2
 801912c:	ed93 7b00 	vldr	d7, [r3]
 8019130:	4629      	mov	r1, r5
 8019132:	ec53 2b17 	vmov	r2, r3, d7
 8019136:	ed8d 7b06 	vstr	d7, [sp, #24]
 801913a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801913e:	f7e7 f8c3 	bl	80002c8 <__aeabi_dsub>
 8019142:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019146:	4606      	mov	r6, r0
 8019148:	460f      	mov	r7, r1
 801914a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801914e:	f7e7 f8bd 	bl	80002cc <__adddf3>
 8019152:	4602      	mov	r2, r0
 8019154:	460b      	mov	r3, r1
 8019156:	2000      	movs	r0, #0
 8019158:	49b9      	ldr	r1, [pc, #740]	; (8019440 <__ieee754_pow+0x730>)
 801915a:	f7e7 fb97 	bl	800088c <__aeabi_ddiv>
 801915e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019162:	4602      	mov	r2, r0
 8019164:	460b      	mov	r3, r1
 8019166:	4630      	mov	r0, r6
 8019168:	4639      	mov	r1, r7
 801916a:	f7e7 fa65 	bl	8000638 <__aeabi_dmul>
 801916e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019172:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8019176:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801917a:	2300      	movs	r3, #0
 801917c:	9302      	str	r3, [sp, #8]
 801917e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019182:	106d      	asrs	r5, r5, #1
 8019184:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019188:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801918c:	2200      	movs	r2, #0
 801918e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8019192:	4640      	mov	r0, r8
 8019194:	4649      	mov	r1, r9
 8019196:	4614      	mov	r4, r2
 8019198:	461d      	mov	r5, r3
 801919a:	f7e7 fa4d 	bl	8000638 <__aeabi_dmul>
 801919e:	4602      	mov	r2, r0
 80191a0:	460b      	mov	r3, r1
 80191a2:	4630      	mov	r0, r6
 80191a4:	4639      	mov	r1, r7
 80191a6:	f7e7 f88f 	bl	80002c8 <__aeabi_dsub>
 80191aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80191ae:	4606      	mov	r6, r0
 80191b0:	460f      	mov	r7, r1
 80191b2:	4620      	mov	r0, r4
 80191b4:	4629      	mov	r1, r5
 80191b6:	f7e7 f887 	bl	80002c8 <__aeabi_dsub>
 80191ba:	4602      	mov	r2, r0
 80191bc:	460b      	mov	r3, r1
 80191be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80191c2:	f7e7 f881 	bl	80002c8 <__aeabi_dsub>
 80191c6:	4642      	mov	r2, r8
 80191c8:	464b      	mov	r3, r9
 80191ca:	f7e7 fa35 	bl	8000638 <__aeabi_dmul>
 80191ce:	4602      	mov	r2, r0
 80191d0:	460b      	mov	r3, r1
 80191d2:	4630      	mov	r0, r6
 80191d4:	4639      	mov	r1, r7
 80191d6:	f7e7 f877 	bl	80002c8 <__aeabi_dsub>
 80191da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80191de:	f7e7 fa2b 	bl	8000638 <__aeabi_dmul>
 80191e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80191e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80191ea:	4610      	mov	r0, r2
 80191ec:	4619      	mov	r1, r3
 80191ee:	f7e7 fa23 	bl	8000638 <__aeabi_dmul>
 80191f2:	a37b      	add	r3, pc, #492	; (adr r3, 80193e0 <__ieee754_pow+0x6d0>)
 80191f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f8:	4604      	mov	r4, r0
 80191fa:	460d      	mov	r5, r1
 80191fc:	f7e7 fa1c 	bl	8000638 <__aeabi_dmul>
 8019200:	a379      	add	r3, pc, #484	; (adr r3, 80193e8 <__ieee754_pow+0x6d8>)
 8019202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019206:	f7e7 f861 	bl	80002cc <__adddf3>
 801920a:	4622      	mov	r2, r4
 801920c:	462b      	mov	r3, r5
 801920e:	f7e7 fa13 	bl	8000638 <__aeabi_dmul>
 8019212:	a377      	add	r3, pc, #476	; (adr r3, 80193f0 <__ieee754_pow+0x6e0>)
 8019214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019218:	f7e7 f858 	bl	80002cc <__adddf3>
 801921c:	4622      	mov	r2, r4
 801921e:	462b      	mov	r3, r5
 8019220:	f7e7 fa0a 	bl	8000638 <__aeabi_dmul>
 8019224:	a374      	add	r3, pc, #464	; (adr r3, 80193f8 <__ieee754_pow+0x6e8>)
 8019226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801922a:	f7e7 f84f 	bl	80002cc <__adddf3>
 801922e:	4622      	mov	r2, r4
 8019230:	462b      	mov	r3, r5
 8019232:	f7e7 fa01 	bl	8000638 <__aeabi_dmul>
 8019236:	a372      	add	r3, pc, #456	; (adr r3, 8019400 <__ieee754_pow+0x6f0>)
 8019238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801923c:	f7e7 f846 	bl	80002cc <__adddf3>
 8019240:	4622      	mov	r2, r4
 8019242:	462b      	mov	r3, r5
 8019244:	f7e7 f9f8 	bl	8000638 <__aeabi_dmul>
 8019248:	a36f      	add	r3, pc, #444	; (adr r3, 8019408 <__ieee754_pow+0x6f8>)
 801924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801924e:	f7e7 f83d 	bl	80002cc <__adddf3>
 8019252:	4622      	mov	r2, r4
 8019254:	4606      	mov	r6, r0
 8019256:	460f      	mov	r7, r1
 8019258:	462b      	mov	r3, r5
 801925a:	4620      	mov	r0, r4
 801925c:	4629      	mov	r1, r5
 801925e:	f7e7 f9eb 	bl	8000638 <__aeabi_dmul>
 8019262:	4602      	mov	r2, r0
 8019264:	460b      	mov	r3, r1
 8019266:	4630      	mov	r0, r6
 8019268:	4639      	mov	r1, r7
 801926a:	f7e7 f9e5 	bl	8000638 <__aeabi_dmul>
 801926e:	4642      	mov	r2, r8
 8019270:	4604      	mov	r4, r0
 8019272:	460d      	mov	r5, r1
 8019274:	464b      	mov	r3, r9
 8019276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801927a:	f7e7 f827 	bl	80002cc <__adddf3>
 801927e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019282:	f7e7 f9d9 	bl	8000638 <__aeabi_dmul>
 8019286:	4622      	mov	r2, r4
 8019288:	462b      	mov	r3, r5
 801928a:	f7e7 f81f 	bl	80002cc <__adddf3>
 801928e:	4642      	mov	r2, r8
 8019290:	4606      	mov	r6, r0
 8019292:	460f      	mov	r7, r1
 8019294:	464b      	mov	r3, r9
 8019296:	4640      	mov	r0, r8
 8019298:	4649      	mov	r1, r9
 801929a:	f7e7 f9cd 	bl	8000638 <__aeabi_dmul>
 801929e:	2200      	movs	r2, #0
 80192a0:	4b68      	ldr	r3, [pc, #416]	; (8019444 <__ieee754_pow+0x734>)
 80192a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80192a6:	f7e7 f811 	bl	80002cc <__adddf3>
 80192aa:	4632      	mov	r2, r6
 80192ac:	463b      	mov	r3, r7
 80192ae:	f7e7 f80d 	bl	80002cc <__adddf3>
 80192b2:	9802      	ldr	r0, [sp, #8]
 80192b4:	460d      	mov	r5, r1
 80192b6:	4604      	mov	r4, r0
 80192b8:	4602      	mov	r2, r0
 80192ba:	460b      	mov	r3, r1
 80192bc:	4640      	mov	r0, r8
 80192be:	4649      	mov	r1, r9
 80192c0:	f7e7 f9ba 	bl	8000638 <__aeabi_dmul>
 80192c4:	2200      	movs	r2, #0
 80192c6:	4680      	mov	r8, r0
 80192c8:	4689      	mov	r9, r1
 80192ca:	4b5e      	ldr	r3, [pc, #376]	; (8019444 <__ieee754_pow+0x734>)
 80192cc:	4620      	mov	r0, r4
 80192ce:	4629      	mov	r1, r5
 80192d0:	f7e6 fffa 	bl	80002c8 <__aeabi_dsub>
 80192d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80192d8:	f7e6 fff6 	bl	80002c8 <__aeabi_dsub>
 80192dc:	4602      	mov	r2, r0
 80192de:	460b      	mov	r3, r1
 80192e0:	4630      	mov	r0, r6
 80192e2:	4639      	mov	r1, r7
 80192e4:	f7e6 fff0 	bl	80002c8 <__aeabi_dsub>
 80192e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80192ec:	f7e7 f9a4 	bl	8000638 <__aeabi_dmul>
 80192f0:	4622      	mov	r2, r4
 80192f2:	4606      	mov	r6, r0
 80192f4:	460f      	mov	r7, r1
 80192f6:	462b      	mov	r3, r5
 80192f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80192fc:	f7e7 f99c 	bl	8000638 <__aeabi_dmul>
 8019300:	4602      	mov	r2, r0
 8019302:	460b      	mov	r3, r1
 8019304:	4630      	mov	r0, r6
 8019306:	4639      	mov	r1, r7
 8019308:	f7e6 ffe0 	bl	80002cc <__adddf3>
 801930c:	4606      	mov	r6, r0
 801930e:	460f      	mov	r7, r1
 8019310:	4602      	mov	r2, r0
 8019312:	460b      	mov	r3, r1
 8019314:	4640      	mov	r0, r8
 8019316:	4649      	mov	r1, r9
 8019318:	f7e6 ffd8 	bl	80002cc <__adddf3>
 801931c:	9802      	ldr	r0, [sp, #8]
 801931e:	a33c      	add	r3, pc, #240	; (adr r3, 8019410 <__ieee754_pow+0x700>)
 8019320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019324:	4604      	mov	r4, r0
 8019326:	460d      	mov	r5, r1
 8019328:	f7e7 f986 	bl	8000638 <__aeabi_dmul>
 801932c:	4642      	mov	r2, r8
 801932e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019332:	464b      	mov	r3, r9
 8019334:	4620      	mov	r0, r4
 8019336:	4629      	mov	r1, r5
 8019338:	f7e6 ffc6 	bl	80002c8 <__aeabi_dsub>
 801933c:	4602      	mov	r2, r0
 801933e:	460b      	mov	r3, r1
 8019340:	4630      	mov	r0, r6
 8019342:	4639      	mov	r1, r7
 8019344:	f7e6 ffc0 	bl	80002c8 <__aeabi_dsub>
 8019348:	a333      	add	r3, pc, #204	; (adr r3, 8019418 <__ieee754_pow+0x708>)
 801934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934e:	f7e7 f973 	bl	8000638 <__aeabi_dmul>
 8019352:	a333      	add	r3, pc, #204	; (adr r3, 8019420 <__ieee754_pow+0x710>)
 8019354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019358:	4606      	mov	r6, r0
 801935a:	460f      	mov	r7, r1
 801935c:	4620      	mov	r0, r4
 801935e:	4629      	mov	r1, r5
 8019360:	f7e7 f96a 	bl	8000638 <__aeabi_dmul>
 8019364:	4602      	mov	r2, r0
 8019366:	460b      	mov	r3, r1
 8019368:	4630      	mov	r0, r6
 801936a:	4639      	mov	r1, r7
 801936c:	f7e6 ffae 	bl	80002cc <__adddf3>
 8019370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019372:	4b35      	ldr	r3, [pc, #212]	; (8019448 <__ieee754_pow+0x738>)
 8019374:	4413      	add	r3, r2
 8019376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801937a:	f7e6 ffa7 	bl	80002cc <__adddf3>
 801937e:	4604      	mov	r4, r0
 8019380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019382:	460d      	mov	r5, r1
 8019384:	f7e7 f8ee 	bl	8000564 <__aeabi_i2d>
 8019388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801938a:	4b30      	ldr	r3, [pc, #192]	; (801944c <__ieee754_pow+0x73c>)
 801938c:	4413      	add	r3, r2
 801938e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019392:	4606      	mov	r6, r0
 8019394:	460f      	mov	r7, r1
 8019396:	4622      	mov	r2, r4
 8019398:	462b      	mov	r3, r5
 801939a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801939e:	f7e6 ff95 	bl	80002cc <__adddf3>
 80193a2:	4642      	mov	r2, r8
 80193a4:	464b      	mov	r3, r9
 80193a6:	f7e6 ff91 	bl	80002cc <__adddf3>
 80193aa:	4632      	mov	r2, r6
 80193ac:	463b      	mov	r3, r7
 80193ae:	f7e6 ff8d 	bl	80002cc <__adddf3>
 80193b2:	9802      	ldr	r0, [sp, #8]
 80193b4:	4632      	mov	r2, r6
 80193b6:	463b      	mov	r3, r7
 80193b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80193bc:	f7e6 ff84 	bl	80002c8 <__aeabi_dsub>
 80193c0:	4642      	mov	r2, r8
 80193c2:	464b      	mov	r3, r9
 80193c4:	f7e6 ff80 	bl	80002c8 <__aeabi_dsub>
 80193c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193cc:	e607      	b.n	8018fde <__ieee754_pow+0x2ce>
 80193ce:	f04f 0a01 	mov.w	sl, #1
 80193d2:	e6a5      	b.n	8019120 <__ieee754_pow+0x410>
 80193d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019428 <__ieee754_pow+0x718>
 80193d8:	e613      	b.n	8019002 <__ieee754_pow+0x2f2>
 80193da:	bf00      	nop
 80193dc:	f3af 8000 	nop.w
 80193e0:	4a454eef 	.word	0x4a454eef
 80193e4:	3fca7e28 	.word	0x3fca7e28
 80193e8:	93c9db65 	.word	0x93c9db65
 80193ec:	3fcd864a 	.word	0x3fcd864a
 80193f0:	a91d4101 	.word	0xa91d4101
 80193f4:	3fd17460 	.word	0x3fd17460
 80193f8:	518f264d 	.word	0x518f264d
 80193fc:	3fd55555 	.word	0x3fd55555
 8019400:	db6fabff 	.word	0xdb6fabff
 8019404:	3fdb6db6 	.word	0x3fdb6db6
 8019408:	33333303 	.word	0x33333303
 801940c:	3fe33333 	.word	0x3fe33333
 8019410:	e0000000 	.word	0xe0000000
 8019414:	3feec709 	.word	0x3feec709
 8019418:	dc3a03fd 	.word	0xdc3a03fd
 801941c:	3feec709 	.word	0x3feec709
 8019420:	145b01f5 	.word	0x145b01f5
 8019424:	be3e2fe0 	.word	0xbe3e2fe0
 8019428:	00000000 	.word	0x00000000
 801942c:	3ff00000 	.word	0x3ff00000
 8019430:	43400000 	.word	0x43400000
 8019434:	0003988e 	.word	0x0003988e
 8019438:	000bb679 	.word	0x000bb679
 801943c:	0801ae50 	.word	0x0801ae50
 8019440:	3ff00000 	.word	0x3ff00000
 8019444:	40080000 	.word	0x40080000
 8019448:	0801ae70 	.word	0x0801ae70
 801944c:	0801ae60 	.word	0x0801ae60
 8019450:	a3b4      	add	r3, pc, #720	; (adr r3, 8019724 <__ieee754_pow+0xa14>)
 8019452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019456:	4640      	mov	r0, r8
 8019458:	4649      	mov	r1, r9
 801945a:	f7e6 ff37 	bl	80002cc <__adddf3>
 801945e:	4622      	mov	r2, r4
 8019460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019464:	462b      	mov	r3, r5
 8019466:	4630      	mov	r0, r6
 8019468:	4639      	mov	r1, r7
 801946a:	f7e6 ff2d 	bl	80002c8 <__aeabi_dsub>
 801946e:	4602      	mov	r2, r0
 8019470:	460b      	mov	r3, r1
 8019472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019476:	f7e7 fb6f 	bl	8000b58 <__aeabi_dcmpgt>
 801947a:	2800      	cmp	r0, #0
 801947c:	f47f adfe 	bne.w	801907c <__ieee754_pow+0x36c>
 8019480:	4aa3      	ldr	r2, [pc, #652]	; (8019710 <__ieee754_pow+0xa00>)
 8019482:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019486:	4293      	cmp	r3, r2
 8019488:	f340 810a 	ble.w	80196a0 <__ieee754_pow+0x990>
 801948c:	151b      	asrs	r3, r3, #20
 801948e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019492:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019496:	fa4a f303 	asr.w	r3, sl, r3
 801949a:	445b      	add	r3, fp
 801949c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80194a0:	4e9c      	ldr	r6, [pc, #624]	; (8019714 <__ieee754_pow+0xa04>)
 80194a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80194a6:	4116      	asrs	r6, r2
 80194a8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80194ac:	2000      	movs	r0, #0
 80194ae:	ea23 0106 	bic.w	r1, r3, r6
 80194b2:	f1c2 0214 	rsb	r2, r2, #20
 80194b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80194ba:	fa4a fa02 	asr.w	sl, sl, r2
 80194be:	f1bb 0f00 	cmp.w	fp, #0
 80194c2:	4602      	mov	r2, r0
 80194c4:	460b      	mov	r3, r1
 80194c6:	4620      	mov	r0, r4
 80194c8:	4629      	mov	r1, r5
 80194ca:	bfb8      	it	lt
 80194cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80194d0:	f7e6 fefa 	bl	80002c8 <__aeabi_dsub>
 80194d4:	e9cd 0100 	strd	r0, r1, [sp]
 80194d8:	4642      	mov	r2, r8
 80194da:	464b      	mov	r3, r9
 80194dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194e0:	f7e6 fef4 	bl	80002cc <__adddf3>
 80194e4:	2000      	movs	r0, #0
 80194e6:	a378      	add	r3, pc, #480	; (adr r3, 80196c8 <__ieee754_pow+0x9b8>)
 80194e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ec:	4604      	mov	r4, r0
 80194ee:	460d      	mov	r5, r1
 80194f0:	f7e7 f8a2 	bl	8000638 <__aeabi_dmul>
 80194f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80194f8:	4606      	mov	r6, r0
 80194fa:	460f      	mov	r7, r1
 80194fc:	4620      	mov	r0, r4
 80194fe:	4629      	mov	r1, r5
 8019500:	f7e6 fee2 	bl	80002c8 <__aeabi_dsub>
 8019504:	4602      	mov	r2, r0
 8019506:	460b      	mov	r3, r1
 8019508:	4640      	mov	r0, r8
 801950a:	4649      	mov	r1, r9
 801950c:	f7e6 fedc 	bl	80002c8 <__aeabi_dsub>
 8019510:	a36f      	add	r3, pc, #444	; (adr r3, 80196d0 <__ieee754_pow+0x9c0>)
 8019512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019516:	f7e7 f88f 	bl	8000638 <__aeabi_dmul>
 801951a:	a36f      	add	r3, pc, #444	; (adr r3, 80196d8 <__ieee754_pow+0x9c8>)
 801951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019520:	4680      	mov	r8, r0
 8019522:	4689      	mov	r9, r1
 8019524:	4620      	mov	r0, r4
 8019526:	4629      	mov	r1, r5
 8019528:	f7e7 f886 	bl	8000638 <__aeabi_dmul>
 801952c:	4602      	mov	r2, r0
 801952e:	460b      	mov	r3, r1
 8019530:	4640      	mov	r0, r8
 8019532:	4649      	mov	r1, r9
 8019534:	f7e6 feca 	bl	80002cc <__adddf3>
 8019538:	4604      	mov	r4, r0
 801953a:	460d      	mov	r5, r1
 801953c:	4602      	mov	r2, r0
 801953e:	460b      	mov	r3, r1
 8019540:	4630      	mov	r0, r6
 8019542:	4639      	mov	r1, r7
 8019544:	f7e6 fec2 	bl	80002cc <__adddf3>
 8019548:	4632      	mov	r2, r6
 801954a:	463b      	mov	r3, r7
 801954c:	4680      	mov	r8, r0
 801954e:	4689      	mov	r9, r1
 8019550:	f7e6 feba 	bl	80002c8 <__aeabi_dsub>
 8019554:	4602      	mov	r2, r0
 8019556:	460b      	mov	r3, r1
 8019558:	4620      	mov	r0, r4
 801955a:	4629      	mov	r1, r5
 801955c:	f7e6 feb4 	bl	80002c8 <__aeabi_dsub>
 8019560:	4642      	mov	r2, r8
 8019562:	4606      	mov	r6, r0
 8019564:	460f      	mov	r7, r1
 8019566:	464b      	mov	r3, r9
 8019568:	4640      	mov	r0, r8
 801956a:	4649      	mov	r1, r9
 801956c:	f7e7 f864 	bl	8000638 <__aeabi_dmul>
 8019570:	a35b      	add	r3, pc, #364	; (adr r3, 80196e0 <__ieee754_pow+0x9d0>)
 8019572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019576:	4604      	mov	r4, r0
 8019578:	460d      	mov	r5, r1
 801957a:	f7e7 f85d 	bl	8000638 <__aeabi_dmul>
 801957e:	a35a      	add	r3, pc, #360	; (adr r3, 80196e8 <__ieee754_pow+0x9d8>)
 8019580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019584:	f7e6 fea0 	bl	80002c8 <__aeabi_dsub>
 8019588:	4622      	mov	r2, r4
 801958a:	462b      	mov	r3, r5
 801958c:	f7e7 f854 	bl	8000638 <__aeabi_dmul>
 8019590:	a357      	add	r3, pc, #348	; (adr r3, 80196f0 <__ieee754_pow+0x9e0>)
 8019592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019596:	f7e6 fe99 	bl	80002cc <__adddf3>
 801959a:	4622      	mov	r2, r4
 801959c:	462b      	mov	r3, r5
 801959e:	f7e7 f84b 	bl	8000638 <__aeabi_dmul>
 80195a2:	a355      	add	r3, pc, #340	; (adr r3, 80196f8 <__ieee754_pow+0x9e8>)
 80195a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195a8:	f7e6 fe8e 	bl	80002c8 <__aeabi_dsub>
 80195ac:	4622      	mov	r2, r4
 80195ae:	462b      	mov	r3, r5
 80195b0:	f7e7 f842 	bl	8000638 <__aeabi_dmul>
 80195b4:	a352      	add	r3, pc, #328	; (adr r3, 8019700 <__ieee754_pow+0x9f0>)
 80195b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ba:	f7e6 fe87 	bl	80002cc <__adddf3>
 80195be:	4622      	mov	r2, r4
 80195c0:	462b      	mov	r3, r5
 80195c2:	f7e7 f839 	bl	8000638 <__aeabi_dmul>
 80195c6:	4602      	mov	r2, r0
 80195c8:	460b      	mov	r3, r1
 80195ca:	4640      	mov	r0, r8
 80195cc:	4649      	mov	r1, r9
 80195ce:	f7e6 fe7b 	bl	80002c8 <__aeabi_dsub>
 80195d2:	4604      	mov	r4, r0
 80195d4:	460d      	mov	r5, r1
 80195d6:	4602      	mov	r2, r0
 80195d8:	460b      	mov	r3, r1
 80195da:	4640      	mov	r0, r8
 80195dc:	4649      	mov	r1, r9
 80195de:	f7e7 f82b 	bl	8000638 <__aeabi_dmul>
 80195e2:	2200      	movs	r2, #0
 80195e4:	e9cd 0100 	strd	r0, r1, [sp]
 80195e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80195ec:	4620      	mov	r0, r4
 80195ee:	4629      	mov	r1, r5
 80195f0:	f7e6 fe6a 	bl	80002c8 <__aeabi_dsub>
 80195f4:	4602      	mov	r2, r0
 80195f6:	460b      	mov	r3, r1
 80195f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80195fc:	f7e7 f946 	bl	800088c <__aeabi_ddiv>
 8019600:	4632      	mov	r2, r6
 8019602:	4604      	mov	r4, r0
 8019604:	460d      	mov	r5, r1
 8019606:	463b      	mov	r3, r7
 8019608:	4640      	mov	r0, r8
 801960a:	4649      	mov	r1, r9
 801960c:	f7e7 f814 	bl	8000638 <__aeabi_dmul>
 8019610:	4632      	mov	r2, r6
 8019612:	463b      	mov	r3, r7
 8019614:	f7e6 fe5a 	bl	80002cc <__adddf3>
 8019618:	4602      	mov	r2, r0
 801961a:	460b      	mov	r3, r1
 801961c:	4620      	mov	r0, r4
 801961e:	4629      	mov	r1, r5
 8019620:	f7e6 fe52 	bl	80002c8 <__aeabi_dsub>
 8019624:	4642      	mov	r2, r8
 8019626:	464b      	mov	r3, r9
 8019628:	f7e6 fe4e 	bl	80002c8 <__aeabi_dsub>
 801962c:	4602      	mov	r2, r0
 801962e:	460b      	mov	r3, r1
 8019630:	2000      	movs	r0, #0
 8019632:	4939      	ldr	r1, [pc, #228]	; (8019718 <__ieee754_pow+0xa08>)
 8019634:	f7e6 fe48 	bl	80002c8 <__aeabi_dsub>
 8019638:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801963c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019640:	4602      	mov	r2, r0
 8019642:	460b      	mov	r3, r1
 8019644:	da2f      	bge.n	80196a6 <__ieee754_pow+0x996>
 8019646:	4650      	mov	r0, sl
 8019648:	ec43 2b10 	vmov	d0, r2, r3
 801964c:	f000 fc80 	bl	8019f50 <scalbn>
 8019650:	ec51 0b10 	vmov	r0, r1, d0
 8019654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019658:	f7ff bbf1 	b.w	8018e3e <__ieee754_pow+0x12e>
 801965c:	4b2f      	ldr	r3, [pc, #188]	; (801971c <__ieee754_pow+0xa0c>)
 801965e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019662:	429e      	cmp	r6, r3
 8019664:	f77f af0c 	ble.w	8019480 <__ieee754_pow+0x770>
 8019668:	4b2d      	ldr	r3, [pc, #180]	; (8019720 <__ieee754_pow+0xa10>)
 801966a:	440b      	add	r3, r1
 801966c:	4303      	orrs	r3, r0
 801966e:	d00b      	beq.n	8019688 <__ieee754_pow+0x978>
 8019670:	a325      	add	r3, pc, #148	; (adr r3, 8019708 <__ieee754_pow+0x9f8>)
 8019672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801967a:	f7e6 ffdd 	bl	8000638 <__aeabi_dmul>
 801967e:	a322      	add	r3, pc, #136	; (adr r3, 8019708 <__ieee754_pow+0x9f8>)
 8019680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019684:	f7ff bbdb 	b.w	8018e3e <__ieee754_pow+0x12e>
 8019688:	4622      	mov	r2, r4
 801968a:	462b      	mov	r3, r5
 801968c:	f7e6 fe1c 	bl	80002c8 <__aeabi_dsub>
 8019690:	4642      	mov	r2, r8
 8019692:	464b      	mov	r3, r9
 8019694:	f7e7 fa56 	bl	8000b44 <__aeabi_dcmpge>
 8019698:	2800      	cmp	r0, #0
 801969a:	f43f aef1 	beq.w	8019480 <__ieee754_pow+0x770>
 801969e:	e7e7      	b.n	8019670 <__ieee754_pow+0x960>
 80196a0:	f04f 0a00 	mov.w	sl, #0
 80196a4:	e718      	b.n	80194d8 <__ieee754_pow+0x7c8>
 80196a6:	4621      	mov	r1, r4
 80196a8:	e7d4      	b.n	8019654 <__ieee754_pow+0x944>
 80196aa:	2000      	movs	r0, #0
 80196ac:	491a      	ldr	r1, [pc, #104]	; (8019718 <__ieee754_pow+0xa08>)
 80196ae:	f7ff bb8f 	b.w	8018dd0 <__ieee754_pow+0xc0>
 80196b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80196b6:	f7ff bb8b 	b.w	8018dd0 <__ieee754_pow+0xc0>
 80196ba:	4630      	mov	r0, r6
 80196bc:	4639      	mov	r1, r7
 80196be:	f7ff bb87 	b.w	8018dd0 <__ieee754_pow+0xc0>
 80196c2:	4693      	mov	fp, r2
 80196c4:	f7ff bb98 	b.w	8018df8 <__ieee754_pow+0xe8>
 80196c8:	00000000 	.word	0x00000000
 80196cc:	3fe62e43 	.word	0x3fe62e43
 80196d0:	fefa39ef 	.word	0xfefa39ef
 80196d4:	3fe62e42 	.word	0x3fe62e42
 80196d8:	0ca86c39 	.word	0x0ca86c39
 80196dc:	be205c61 	.word	0xbe205c61
 80196e0:	72bea4d0 	.word	0x72bea4d0
 80196e4:	3e663769 	.word	0x3e663769
 80196e8:	c5d26bf1 	.word	0xc5d26bf1
 80196ec:	3ebbbd41 	.word	0x3ebbbd41
 80196f0:	af25de2c 	.word	0xaf25de2c
 80196f4:	3f11566a 	.word	0x3f11566a
 80196f8:	16bebd93 	.word	0x16bebd93
 80196fc:	3f66c16c 	.word	0x3f66c16c
 8019700:	5555553e 	.word	0x5555553e
 8019704:	3fc55555 	.word	0x3fc55555
 8019708:	c2f8f359 	.word	0xc2f8f359
 801970c:	01a56e1f 	.word	0x01a56e1f
 8019710:	3fe00000 	.word	0x3fe00000
 8019714:	000fffff 	.word	0x000fffff
 8019718:	3ff00000 	.word	0x3ff00000
 801971c:	4090cbff 	.word	0x4090cbff
 8019720:	3f6f3400 	.word	0x3f6f3400
 8019724:	652b82fe 	.word	0x652b82fe
 8019728:	3c971547 	.word	0x3c971547

0801972c <__ieee754_sqrt>:
 801972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019730:	4955      	ldr	r1, [pc, #340]	; (8019888 <__ieee754_sqrt+0x15c>)
 8019732:	ec55 4b10 	vmov	r4, r5, d0
 8019736:	43a9      	bics	r1, r5
 8019738:	462b      	mov	r3, r5
 801973a:	462a      	mov	r2, r5
 801973c:	d112      	bne.n	8019764 <__ieee754_sqrt+0x38>
 801973e:	ee10 2a10 	vmov	r2, s0
 8019742:	ee10 0a10 	vmov	r0, s0
 8019746:	4629      	mov	r1, r5
 8019748:	f7e6 ff76 	bl	8000638 <__aeabi_dmul>
 801974c:	4602      	mov	r2, r0
 801974e:	460b      	mov	r3, r1
 8019750:	4620      	mov	r0, r4
 8019752:	4629      	mov	r1, r5
 8019754:	f7e6 fdba 	bl	80002cc <__adddf3>
 8019758:	4604      	mov	r4, r0
 801975a:	460d      	mov	r5, r1
 801975c:	ec45 4b10 	vmov	d0, r4, r5
 8019760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019764:	2d00      	cmp	r5, #0
 8019766:	ee10 0a10 	vmov	r0, s0
 801976a:	4621      	mov	r1, r4
 801976c:	dc0f      	bgt.n	801978e <__ieee754_sqrt+0x62>
 801976e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019772:	4330      	orrs	r0, r6
 8019774:	d0f2      	beq.n	801975c <__ieee754_sqrt+0x30>
 8019776:	b155      	cbz	r5, 801978e <__ieee754_sqrt+0x62>
 8019778:	ee10 2a10 	vmov	r2, s0
 801977c:	4620      	mov	r0, r4
 801977e:	4629      	mov	r1, r5
 8019780:	f7e6 fda2 	bl	80002c8 <__aeabi_dsub>
 8019784:	4602      	mov	r2, r0
 8019786:	460b      	mov	r3, r1
 8019788:	f7e7 f880 	bl	800088c <__aeabi_ddiv>
 801978c:	e7e4      	b.n	8019758 <__ieee754_sqrt+0x2c>
 801978e:	151b      	asrs	r3, r3, #20
 8019790:	d073      	beq.n	801987a <__ieee754_sqrt+0x14e>
 8019792:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019796:	07dd      	lsls	r5, r3, #31
 8019798:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801979c:	bf48      	it	mi
 801979e:	0fc8      	lsrmi	r0, r1, #31
 80197a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80197a4:	bf44      	itt	mi
 80197a6:	0049      	lslmi	r1, r1, #1
 80197a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80197ac:	2500      	movs	r5, #0
 80197ae:	1058      	asrs	r0, r3, #1
 80197b0:	0fcb      	lsrs	r3, r1, #31
 80197b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80197b6:	0049      	lsls	r1, r1, #1
 80197b8:	2316      	movs	r3, #22
 80197ba:	462c      	mov	r4, r5
 80197bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80197c0:	19a7      	adds	r7, r4, r6
 80197c2:	4297      	cmp	r7, r2
 80197c4:	bfde      	ittt	le
 80197c6:	19bc      	addle	r4, r7, r6
 80197c8:	1bd2      	suble	r2, r2, r7
 80197ca:	19ad      	addle	r5, r5, r6
 80197cc:	0fcf      	lsrs	r7, r1, #31
 80197ce:	3b01      	subs	r3, #1
 80197d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80197d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80197d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80197dc:	d1f0      	bne.n	80197c0 <__ieee754_sqrt+0x94>
 80197de:	f04f 0c20 	mov.w	ip, #32
 80197e2:	469e      	mov	lr, r3
 80197e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80197e8:	42a2      	cmp	r2, r4
 80197ea:	eb06 070e 	add.w	r7, r6, lr
 80197ee:	dc02      	bgt.n	80197f6 <__ieee754_sqrt+0xca>
 80197f0:	d112      	bne.n	8019818 <__ieee754_sqrt+0xec>
 80197f2:	428f      	cmp	r7, r1
 80197f4:	d810      	bhi.n	8019818 <__ieee754_sqrt+0xec>
 80197f6:	2f00      	cmp	r7, #0
 80197f8:	eb07 0e06 	add.w	lr, r7, r6
 80197fc:	da42      	bge.n	8019884 <__ieee754_sqrt+0x158>
 80197fe:	f1be 0f00 	cmp.w	lr, #0
 8019802:	db3f      	blt.n	8019884 <__ieee754_sqrt+0x158>
 8019804:	f104 0801 	add.w	r8, r4, #1
 8019808:	1b12      	subs	r2, r2, r4
 801980a:	428f      	cmp	r7, r1
 801980c:	bf88      	it	hi
 801980e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019812:	1bc9      	subs	r1, r1, r7
 8019814:	4433      	add	r3, r6
 8019816:	4644      	mov	r4, r8
 8019818:	0052      	lsls	r2, r2, #1
 801981a:	f1bc 0c01 	subs.w	ip, ip, #1
 801981e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019822:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019826:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801982a:	d1dd      	bne.n	80197e8 <__ieee754_sqrt+0xbc>
 801982c:	430a      	orrs	r2, r1
 801982e:	d006      	beq.n	801983e <__ieee754_sqrt+0x112>
 8019830:	1c5c      	adds	r4, r3, #1
 8019832:	bf13      	iteet	ne
 8019834:	3301      	addne	r3, #1
 8019836:	3501      	addeq	r5, #1
 8019838:	4663      	moveq	r3, ip
 801983a:	f023 0301 	bicne.w	r3, r3, #1
 801983e:	106a      	asrs	r2, r5, #1
 8019840:	085b      	lsrs	r3, r3, #1
 8019842:	07e9      	lsls	r1, r5, #31
 8019844:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019848:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801984c:	bf48      	it	mi
 801984e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019852:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019856:	461c      	mov	r4, r3
 8019858:	e780      	b.n	801975c <__ieee754_sqrt+0x30>
 801985a:	0aca      	lsrs	r2, r1, #11
 801985c:	3815      	subs	r0, #21
 801985e:	0549      	lsls	r1, r1, #21
 8019860:	2a00      	cmp	r2, #0
 8019862:	d0fa      	beq.n	801985a <__ieee754_sqrt+0x12e>
 8019864:	02d6      	lsls	r6, r2, #11
 8019866:	d50a      	bpl.n	801987e <__ieee754_sqrt+0x152>
 8019868:	f1c3 0420 	rsb	r4, r3, #32
 801986c:	fa21 f404 	lsr.w	r4, r1, r4
 8019870:	1e5d      	subs	r5, r3, #1
 8019872:	4099      	lsls	r1, r3
 8019874:	4322      	orrs	r2, r4
 8019876:	1b43      	subs	r3, r0, r5
 8019878:	e78b      	b.n	8019792 <__ieee754_sqrt+0x66>
 801987a:	4618      	mov	r0, r3
 801987c:	e7f0      	b.n	8019860 <__ieee754_sqrt+0x134>
 801987e:	0052      	lsls	r2, r2, #1
 8019880:	3301      	adds	r3, #1
 8019882:	e7ef      	b.n	8019864 <__ieee754_sqrt+0x138>
 8019884:	46a0      	mov	r8, r4
 8019886:	e7bf      	b.n	8019808 <__ieee754_sqrt+0xdc>
 8019888:	7ff00000 	.word	0x7ff00000

0801988c <__ieee754_powf>:
 801988c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019890:	ee10 5a90 	vmov	r5, s1
 8019894:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8019898:	ed2d 8b02 	vpush	{d8}
 801989c:	eeb0 8a40 	vmov.f32	s16, s0
 80198a0:	eef0 8a60 	vmov.f32	s17, s1
 80198a4:	f000 8293 	beq.w	8019dce <__ieee754_powf+0x542>
 80198a8:	ee10 8a10 	vmov	r8, s0
 80198ac:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80198b0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80198b4:	dc06      	bgt.n	80198c4 <__ieee754_powf+0x38>
 80198b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80198ba:	dd0a      	ble.n	80198d2 <__ieee754_powf+0x46>
 80198bc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80198c0:	f000 8285 	beq.w	8019dce <__ieee754_powf+0x542>
 80198c4:	ecbd 8b02 	vpop	{d8}
 80198c8:	48d9      	ldr	r0, [pc, #868]	; (8019c30 <__ieee754_powf+0x3a4>)
 80198ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198ce:	f000 bbc7 	b.w	801a060 <nanf>
 80198d2:	f1b8 0f00 	cmp.w	r8, #0
 80198d6:	da1d      	bge.n	8019914 <__ieee754_powf+0x88>
 80198d8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80198dc:	da2c      	bge.n	8019938 <__ieee754_powf+0xac>
 80198de:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80198e2:	db30      	blt.n	8019946 <__ieee754_powf+0xba>
 80198e4:	15fb      	asrs	r3, r7, #23
 80198e6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80198ea:	fa47 f603 	asr.w	r6, r7, r3
 80198ee:	fa06 f303 	lsl.w	r3, r6, r3
 80198f2:	42bb      	cmp	r3, r7
 80198f4:	d127      	bne.n	8019946 <__ieee754_powf+0xba>
 80198f6:	f006 0601 	and.w	r6, r6, #1
 80198fa:	f1c6 0602 	rsb	r6, r6, #2
 80198fe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8019902:	d122      	bne.n	801994a <__ieee754_powf+0xbe>
 8019904:	2d00      	cmp	r5, #0
 8019906:	f280 8268 	bge.w	8019dda <__ieee754_powf+0x54e>
 801990a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801990e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019912:	e00d      	b.n	8019930 <__ieee754_powf+0xa4>
 8019914:	2600      	movs	r6, #0
 8019916:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801991a:	d1f0      	bne.n	80198fe <__ieee754_powf+0x72>
 801991c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019920:	f000 8255 	beq.w	8019dce <__ieee754_powf+0x542>
 8019924:	dd0a      	ble.n	801993c <__ieee754_powf+0xb0>
 8019926:	2d00      	cmp	r5, #0
 8019928:	f280 8254 	bge.w	8019dd4 <__ieee754_powf+0x548>
 801992c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8019c34 <__ieee754_powf+0x3a8>
 8019930:	ecbd 8b02 	vpop	{d8}
 8019934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019938:	2602      	movs	r6, #2
 801993a:	e7ec      	b.n	8019916 <__ieee754_powf+0x8a>
 801993c:	2d00      	cmp	r5, #0
 801993e:	daf5      	bge.n	801992c <__ieee754_powf+0xa0>
 8019940:	eeb1 0a68 	vneg.f32	s0, s17
 8019944:	e7f4      	b.n	8019930 <__ieee754_powf+0xa4>
 8019946:	2600      	movs	r6, #0
 8019948:	e7d9      	b.n	80198fe <__ieee754_powf+0x72>
 801994a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801994e:	d102      	bne.n	8019956 <__ieee754_powf+0xca>
 8019950:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019954:	e7ec      	b.n	8019930 <__ieee754_powf+0xa4>
 8019956:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801995a:	eeb0 0a48 	vmov.f32	s0, s16
 801995e:	d108      	bne.n	8019972 <__ieee754_powf+0xe6>
 8019960:	f1b8 0f00 	cmp.w	r8, #0
 8019964:	db05      	blt.n	8019972 <__ieee754_powf+0xe6>
 8019966:	ecbd 8b02 	vpop	{d8}
 801996a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801996e:	f000 ba4d 	b.w	8019e0c <__ieee754_sqrtf>
 8019972:	f000 fb63 	bl	801a03c <fabsf>
 8019976:	b124      	cbz	r4, 8019982 <__ieee754_powf+0xf6>
 8019978:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801997c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019980:	d117      	bne.n	80199b2 <__ieee754_powf+0x126>
 8019982:	2d00      	cmp	r5, #0
 8019984:	bfbc      	itt	lt
 8019986:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801998a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801998e:	f1b8 0f00 	cmp.w	r8, #0
 8019992:	dacd      	bge.n	8019930 <__ieee754_powf+0xa4>
 8019994:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8019998:	ea54 0306 	orrs.w	r3, r4, r6
 801999c:	d104      	bne.n	80199a8 <__ieee754_powf+0x11c>
 801999e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80199a2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80199a6:	e7c3      	b.n	8019930 <__ieee754_powf+0xa4>
 80199a8:	2e01      	cmp	r6, #1
 80199aa:	d1c1      	bne.n	8019930 <__ieee754_powf+0xa4>
 80199ac:	eeb1 0a40 	vneg.f32	s0, s0
 80199b0:	e7be      	b.n	8019930 <__ieee754_powf+0xa4>
 80199b2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80199b6:	3801      	subs	r0, #1
 80199b8:	ea56 0300 	orrs.w	r3, r6, r0
 80199bc:	d104      	bne.n	80199c8 <__ieee754_powf+0x13c>
 80199be:	ee38 8a48 	vsub.f32	s16, s16, s16
 80199c2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80199c6:	e7b3      	b.n	8019930 <__ieee754_powf+0xa4>
 80199c8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80199cc:	dd6d      	ble.n	8019aaa <__ieee754_powf+0x21e>
 80199ce:	4b9a      	ldr	r3, [pc, #616]	; (8019c38 <__ieee754_powf+0x3ac>)
 80199d0:	429c      	cmp	r4, r3
 80199d2:	dc06      	bgt.n	80199e2 <__ieee754_powf+0x156>
 80199d4:	2d00      	cmp	r5, #0
 80199d6:	daa9      	bge.n	801992c <__ieee754_powf+0xa0>
 80199d8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8019c3c <__ieee754_powf+0x3b0>
 80199dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80199e0:	e7a6      	b.n	8019930 <__ieee754_powf+0xa4>
 80199e2:	4b97      	ldr	r3, [pc, #604]	; (8019c40 <__ieee754_powf+0x3b4>)
 80199e4:	429c      	cmp	r4, r3
 80199e6:	dd02      	ble.n	80199ee <__ieee754_powf+0x162>
 80199e8:	2d00      	cmp	r5, #0
 80199ea:	dcf5      	bgt.n	80199d8 <__ieee754_powf+0x14c>
 80199ec:	e79e      	b.n	801992c <__ieee754_powf+0xa0>
 80199ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80199f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80199f6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8019c44 <__ieee754_powf+0x3b8>
 80199fa:	eef1 6a40 	vneg.f32	s13, s0
 80199fe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8019a02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019a06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a0a:	eee7 7a40 	vfms.f32	s15, s14, s0
 8019a0e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8019a12:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019c48 <__ieee754_powf+0x3bc>
 8019a16:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8019a1a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8019c4c <__ieee754_powf+0x3c0>
 8019a1e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8019a22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019a26:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019c50 <__ieee754_powf+0x3c4>
 8019a2a:	eeb0 6a67 	vmov.f32	s12, s15
 8019a2e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8019a32:	ee16 3a10 	vmov	r3, s12
 8019a36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019a3a:	f023 030f 	bic.w	r3, r3, #15
 8019a3e:	ee00 3a90 	vmov	s1, r3
 8019a42:	eee6 0a87 	vfma.f32	s1, s13, s14
 8019a46:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019a4a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8019a4e:	f025 050f 	bic.w	r5, r5, #15
 8019a52:	ee07 5a10 	vmov	s14, r5
 8019a56:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019a5a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8019a5e:	ee07 3a90 	vmov	s15, r3
 8019a62:	eee7 0a27 	vfma.f32	s1, s14, s15
 8019a66:	3e01      	subs	r6, #1
 8019a68:	ea56 0200 	orrs.w	r2, r6, r0
 8019a6c:	ee07 5a10 	vmov	s14, r5
 8019a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019a74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8019a78:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019a7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019a80:	ee17 4a10 	vmov	r4, s14
 8019a84:	bf08      	it	eq
 8019a86:	eeb0 8a40 	vmoveq.f32	s16, s0
 8019a8a:	2c00      	cmp	r4, #0
 8019a8c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019a90:	f340 8184 	ble.w	8019d9c <__ieee754_powf+0x510>
 8019a94:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8019a98:	f340 80fc 	ble.w	8019c94 <__ieee754_powf+0x408>
 8019a9c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019c3c <__ieee754_powf+0x3b0>
 8019aa0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019aa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019aa8:	e742      	b.n	8019930 <__ieee754_powf+0xa4>
 8019aaa:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8019aae:	bfbf      	itttt	lt
 8019ab0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8019c54 <__ieee754_powf+0x3c8>
 8019ab4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019ab8:	f06f 0217 	mvnlt.w	r2, #23
 8019abc:	ee17 4a90 	vmovlt	r4, s15
 8019ac0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8019ac4:	bfa8      	it	ge
 8019ac6:	2200      	movge	r2, #0
 8019ac8:	3b7f      	subs	r3, #127	; 0x7f
 8019aca:	4413      	add	r3, r2
 8019acc:	4a62      	ldr	r2, [pc, #392]	; (8019c58 <__ieee754_powf+0x3cc>)
 8019ace:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8019ad2:	4294      	cmp	r4, r2
 8019ad4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019ad8:	dd06      	ble.n	8019ae8 <__ieee754_powf+0x25c>
 8019ada:	4a60      	ldr	r2, [pc, #384]	; (8019c5c <__ieee754_powf+0x3d0>)
 8019adc:	4294      	cmp	r4, r2
 8019ade:	f340 80a5 	ble.w	8019c2c <__ieee754_powf+0x3a0>
 8019ae2:	3301      	adds	r3, #1
 8019ae4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019ae8:	2400      	movs	r4, #0
 8019aea:	4a5d      	ldr	r2, [pc, #372]	; (8019c60 <__ieee754_powf+0x3d4>)
 8019aec:	00a7      	lsls	r7, r4, #2
 8019aee:	443a      	add	r2, r7
 8019af0:	ee07 1a90 	vmov	s15, r1
 8019af4:	ed92 7a00 	vldr	s14, [r2]
 8019af8:	4a5a      	ldr	r2, [pc, #360]	; (8019c64 <__ieee754_powf+0x3d8>)
 8019afa:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019afe:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019b02:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019b06:	1049      	asrs	r1, r1, #1
 8019b08:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8019b0c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019b10:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8019b14:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019b18:	ee06 1a10 	vmov	s12, r1
 8019b1c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8019b20:	ee14 ca90 	vmov	ip, s9
 8019b24:	ea02 0c0c 	and.w	ip, r2, ip
 8019b28:	ee05 ca10 	vmov	s10, ip
 8019b2c:	eeb1 4a45 	vneg.f32	s8, s10
 8019b30:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019b34:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019b38:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019c68 <__ieee754_powf+0x3dc>
 8019b3c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019b40:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8019b44:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019b48:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8019b4c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8019b50:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019c6c <__ieee754_powf+0x3e0>
 8019b54:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019b58:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019c70 <__ieee754_powf+0x3e4>
 8019b5c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019b60:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019c44 <__ieee754_powf+0x3b8>
 8019b64:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019b68:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019c74 <__ieee754_powf+0x3e8>
 8019b6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019b70:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019c78 <__ieee754_powf+0x3ec>
 8019b74:	ee75 6a24 	vadd.f32	s13, s10, s9
 8019b78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019b7c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019b80:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8019b84:	eef0 7a65 	vmov.f32	s15, s11
 8019b88:	eee3 6a87 	vfma.f32	s13, s7, s14
 8019b8c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8019b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b94:	ee17 1a90 	vmov	r1, s15
 8019b98:	4011      	ands	r1, r2
 8019b9a:	ee07 1a90 	vmov	s15, r1
 8019b9e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8019ba2:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019c7c <__ieee754_powf+0x3f0>
 8019ba6:	eea4 7a05 	vfma.f32	s14, s8, s10
 8019baa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019bae:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019bb2:	eea7 7a86 	vfma.f32	s14, s15, s12
 8019bb6:	eeb0 6a47 	vmov.f32	s12, s14
 8019bba:	eea5 6a27 	vfma.f32	s12, s10, s15
 8019bbe:	ee16 1a10 	vmov	r1, s12
 8019bc2:	4011      	ands	r1, r2
 8019bc4:	ee06 1a90 	vmov	s13, r1
 8019bc8:	eee4 6a27 	vfma.f32	s13, s8, s15
 8019bcc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019c80 <__ieee754_powf+0x3f4>
 8019bd0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019bd4:	ee06 1a10 	vmov	s12, r1
 8019bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019bdc:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019c84 <__ieee754_powf+0x3f8>
 8019be0:	4929      	ldr	r1, [pc, #164]	; (8019c88 <__ieee754_powf+0x3fc>)
 8019be2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019be6:	4439      	add	r1, r7
 8019be8:	edd1 7a00 	vldr	s15, [r1]
 8019bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019bf0:	ee07 3a90 	vmov	s15, r3
 8019bf4:	eef0 0a47 	vmov.f32	s1, s14
 8019bf8:	4b24      	ldr	r3, [pc, #144]	; (8019c8c <__ieee754_powf+0x400>)
 8019bfa:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019bfe:	443b      	add	r3, r7
 8019c00:	ed93 5a00 	vldr	s10, [r3]
 8019c04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019c08:	ee70 0a85 	vadd.f32	s1, s1, s10
 8019c0c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019c10:	ee17 3a90 	vmov	r3, s15
 8019c14:	4013      	ands	r3, r2
 8019c16:	ee07 3a90 	vmov	s15, r3
 8019c1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019c1e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019c22:	eee6 7a65 	vfms.f32	s15, s12, s11
 8019c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c2a:	e70e      	b.n	8019a4a <__ieee754_powf+0x1be>
 8019c2c:	2401      	movs	r4, #1
 8019c2e:	e75c      	b.n	8019aea <__ieee754_powf+0x25e>
 8019c30:	0801ada9 	.word	0x0801ada9
 8019c34:	00000000 	.word	0x00000000
 8019c38:	3f7ffff7 	.word	0x3f7ffff7
 8019c3c:	7149f2ca 	.word	0x7149f2ca
 8019c40:	3f800007 	.word	0x3f800007
 8019c44:	3eaaaaab 	.word	0x3eaaaaab
 8019c48:	36eca570 	.word	0x36eca570
 8019c4c:	3fb8aa3b 	.word	0x3fb8aa3b
 8019c50:	3fb8aa00 	.word	0x3fb8aa00
 8019c54:	4b800000 	.word	0x4b800000
 8019c58:	001cc471 	.word	0x001cc471
 8019c5c:	005db3d6 	.word	0x005db3d6
 8019c60:	0801ae80 	.word	0x0801ae80
 8019c64:	fffff000 	.word	0xfffff000
 8019c68:	3e6c3255 	.word	0x3e6c3255
 8019c6c:	3e53f142 	.word	0x3e53f142
 8019c70:	3e8ba305 	.word	0x3e8ba305
 8019c74:	3edb6db7 	.word	0x3edb6db7
 8019c78:	3f19999a 	.word	0x3f19999a
 8019c7c:	3f763800 	.word	0x3f763800
 8019c80:	3f76384f 	.word	0x3f76384f
 8019c84:	369dc3a0 	.word	0x369dc3a0
 8019c88:	0801ae90 	.word	0x0801ae90
 8019c8c:	0801ae88 	.word	0x0801ae88
 8019c90:	3338aa3c 	.word	0x3338aa3c
 8019c94:	f040 8092 	bne.w	8019dbc <__ieee754_powf+0x530>
 8019c98:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019c90 <__ieee754_powf+0x404>
 8019c9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019ca0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019ca4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cac:	f73f aef6 	bgt.w	8019a9c <__ieee754_powf+0x210>
 8019cb0:	15db      	asrs	r3, r3, #23
 8019cb2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019cb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019cba:	4103      	asrs	r3, r0
 8019cbc:	4423      	add	r3, r4
 8019cbe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019cc2:	4947      	ldr	r1, [pc, #284]	; (8019de0 <__ieee754_powf+0x554>)
 8019cc4:	3a7f      	subs	r2, #127	; 0x7f
 8019cc6:	4111      	asrs	r1, r2
 8019cc8:	ea23 0101 	bic.w	r1, r3, r1
 8019ccc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019cd0:	ee07 1a10 	vmov	s14, r1
 8019cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019cd8:	f1c2 0217 	rsb	r2, r2, #23
 8019cdc:	4110      	asrs	r0, r2
 8019cde:	2c00      	cmp	r4, #0
 8019ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ce4:	bfb8      	it	lt
 8019ce6:	4240      	neglt	r0, r0
 8019ce8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019cec:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019de4 <__ieee754_powf+0x558>
 8019cf0:	ee17 3a10 	vmov	r3, s14
 8019cf4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019cf8:	f023 030f 	bic.w	r3, r3, #15
 8019cfc:	ee07 3a10 	vmov	s14, r3
 8019d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d04:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019d08:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019de8 <__ieee754_powf+0x55c>
 8019d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d10:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019d14:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019dec <__ieee754_powf+0x560>
 8019d18:	eeb0 0a67 	vmov.f32	s0, s15
 8019d1c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019d20:	eeb0 6a40 	vmov.f32	s12, s0
 8019d24:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019d28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019d2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019d30:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019df0 <__ieee754_powf+0x564>
 8019d34:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019df4 <__ieee754_powf+0x568>
 8019d38:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019d3c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019df8 <__ieee754_powf+0x56c>
 8019d40:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019d44:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019dfc <__ieee754_powf+0x570>
 8019d48:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019d4c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019e00 <__ieee754_powf+0x574>
 8019d50:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019d54:	eeb0 6a40 	vmov.f32	s12, s0
 8019d58:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019d5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019d60:	eeb0 7a46 	vmov.f32	s14, s12
 8019d64:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019d68:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019d6c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019d70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019d7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019d80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019d84:	ee10 3a10 	vmov	r3, s0
 8019d88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019d8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019d90:	da1a      	bge.n	8019dc8 <__ieee754_powf+0x53c>
 8019d92:	f000 f9c5 	bl	801a120 <scalbnf>
 8019d96:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019d9a:	e5c9      	b.n	8019930 <__ieee754_powf+0xa4>
 8019d9c:	4a19      	ldr	r2, [pc, #100]	; (8019e04 <__ieee754_powf+0x578>)
 8019d9e:	4293      	cmp	r3, r2
 8019da0:	dd02      	ble.n	8019da8 <__ieee754_powf+0x51c>
 8019da2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019e08 <__ieee754_powf+0x57c>
 8019da6:	e67b      	b.n	8019aa0 <__ieee754_powf+0x214>
 8019da8:	d108      	bne.n	8019dbc <__ieee754_powf+0x530>
 8019daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019dae:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db6:	f6ff af7b 	blt.w	8019cb0 <__ieee754_powf+0x424>
 8019dba:	e7f2      	b.n	8019da2 <__ieee754_powf+0x516>
 8019dbc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019dc0:	f73f af76 	bgt.w	8019cb0 <__ieee754_powf+0x424>
 8019dc4:	2000      	movs	r0, #0
 8019dc6:	e78f      	b.n	8019ce8 <__ieee754_powf+0x45c>
 8019dc8:	ee00 3a10 	vmov	s0, r3
 8019dcc:	e7e3      	b.n	8019d96 <__ieee754_powf+0x50a>
 8019dce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019dd2:	e5ad      	b.n	8019930 <__ieee754_powf+0xa4>
 8019dd4:	eeb0 0a68 	vmov.f32	s0, s17
 8019dd8:	e5aa      	b.n	8019930 <__ieee754_powf+0xa4>
 8019dda:	eeb0 0a48 	vmov.f32	s0, s16
 8019dde:	e5a7      	b.n	8019930 <__ieee754_powf+0xa4>
 8019de0:	007fffff 	.word	0x007fffff
 8019de4:	3f317218 	.word	0x3f317218
 8019de8:	35bfbe8c 	.word	0x35bfbe8c
 8019dec:	3f317200 	.word	0x3f317200
 8019df0:	3331bb4c 	.word	0x3331bb4c
 8019df4:	b5ddea0e 	.word	0xb5ddea0e
 8019df8:	388ab355 	.word	0x388ab355
 8019dfc:	bb360b61 	.word	0xbb360b61
 8019e00:	3e2aaaab 	.word	0x3e2aaaab
 8019e04:	43160000 	.word	0x43160000
 8019e08:	0da24260 	.word	0x0da24260

08019e0c <__ieee754_sqrtf>:
 8019e0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019e10:	4770      	bx	lr

08019e12 <fabs>:
 8019e12:	ec51 0b10 	vmov	r0, r1, d0
 8019e16:	ee10 2a10 	vmov	r2, s0
 8019e1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019e1e:	ec43 2b10 	vmov	d0, r2, r3
 8019e22:	4770      	bx	lr

08019e24 <finite>:
 8019e24:	ee10 3a90 	vmov	r3, s1
 8019e28:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8019e2c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019e30:	0fc0      	lsrs	r0, r0, #31
 8019e32:	4770      	bx	lr

08019e34 <matherr>:
 8019e34:	2000      	movs	r0, #0
 8019e36:	4770      	bx	lr

08019e38 <nan>:
 8019e38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e40 <nan+0x8>
 8019e3c:	4770      	bx	lr
 8019e3e:	bf00      	nop
 8019e40:	00000000 	.word	0x00000000
 8019e44:	7ff80000 	.word	0x7ff80000

08019e48 <rint>:
 8019e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e4a:	ec51 0b10 	vmov	r0, r1, d0
 8019e4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019e52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019e56:	2e13      	cmp	r6, #19
 8019e58:	460b      	mov	r3, r1
 8019e5a:	ee10 4a10 	vmov	r4, s0
 8019e5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019e62:	dc56      	bgt.n	8019f12 <rint+0xca>
 8019e64:	2e00      	cmp	r6, #0
 8019e66:	da2b      	bge.n	8019ec0 <rint+0x78>
 8019e68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019e6c:	4302      	orrs	r2, r0
 8019e6e:	d023      	beq.n	8019eb8 <rint+0x70>
 8019e70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019e74:	4302      	orrs	r2, r0
 8019e76:	4254      	negs	r4, r2
 8019e78:	4314      	orrs	r4, r2
 8019e7a:	0c4b      	lsrs	r3, r1, #17
 8019e7c:	0b24      	lsrs	r4, r4, #12
 8019e7e:	045b      	lsls	r3, r3, #17
 8019e80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019e84:	ea44 0103 	orr.w	r1, r4, r3
 8019e88:	460b      	mov	r3, r1
 8019e8a:	492f      	ldr	r1, [pc, #188]	; (8019f48 <rint+0x100>)
 8019e8c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8019e90:	e9d1 6700 	ldrd	r6, r7, [r1]
 8019e94:	4602      	mov	r2, r0
 8019e96:	4639      	mov	r1, r7
 8019e98:	4630      	mov	r0, r6
 8019e9a:	f7e6 fa17 	bl	80002cc <__adddf3>
 8019e9e:	e9cd 0100 	strd	r0, r1, [sp]
 8019ea2:	463b      	mov	r3, r7
 8019ea4:	4632      	mov	r2, r6
 8019ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019eaa:	f7e6 fa0d 	bl	80002c8 <__aeabi_dsub>
 8019eae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019eb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019eb6:	4639      	mov	r1, r7
 8019eb8:	ec41 0b10 	vmov	d0, r0, r1
 8019ebc:	b003      	add	sp, #12
 8019ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ec0:	4a22      	ldr	r2, [pc, #136]	; (8019f4c <rint+0x104>)
 8019ec2:	4132      	asrs	r2, r6
 8019ec4:	ea01 0702 	and.w	r7, r1, r2
 8019ec8:	4307      	orrs	r7, r0
 8019eca:	d0f5      	beq.n	8019eb8 <rint+0x70>
 8019ecc:	0852      	lsrs	r2, r2, #1
 8019ece:	4011      	ands	r1, r2
 8019ed0:	430c      	orrs	r4, r1
 8019ed2:	d00b      	beq.n	8019eec <rint+0xa4>
 8019ed4:	ea23 0202 	bic.w	r2, r3, r2
 8019ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019edc:	2e13      	cmp	r6, #19
 8019ede:	fa43 f306 	asr.w	r3, r3, r6
 8019ee2:	bf0c      	ite	eq
 8019ee4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019ee8:	2400      	movne	r4, #0
 8019eea:	4313      	orrs	r3, r2
 8019eec:	4916      	ldr	r1, [pc, #88]	; (8019f48 <rint+0x100>)
 8019eee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019ef2:	4622      	mov	r2, r4
 8019ef4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019ef8:	4620      	mov	r0, r4
 8019efa:	4629      	mov	r1, r5
 8019efc:	f7e6 f9e6 	bl	80002cc <__adddf3>
 8019f00:	e9cd 0100 	strd	r0, r1, [sp]
 8019f04:	4622      	mov	r2, r4
 8019f06:	462b      	mov	r3, r5
 8019f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f0c:	f7e6 f9dc 	bl	80002c8 <__aeabi_dsub>
 8019f10:	e7d2      	b.n	8019eb8 <rint+0x70>
 8019f12:	2e33      	cmp	r6, #51	; 0x33
 8019f14:	dd07      	ble.n	8019f26 <rint+0xde>
 8019f16:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019f1a:	d1cd      	bne.n	8019eb8 <rint+0x70>
 8019f1c:	ee10 2a10 	vmov	r2, s0
 8019f20:	f7e6 f9d4 	bl	80002cc <__adddf3>
 8019f24:	e7c8      	b.n	8019eb8 <rint+0x70>
 8019f26:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8019f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8019f2e:	40f2      	lsrs	r2, r6
 8019f30:	4210      	tst	r0, r2
 8019f32:	d0c1      	beq.n	8019eb8 <rint+0x70>
 8019f34:	0852      	lsrs	r2, r2, #1
 8019f36:	4210      	tst	r0, r2
 8019f38:	bf1f      	itttt	ne
 8019f3a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019f3e:	ea20 0202 	bicne.w	r2, r0, r2
 8019f42:	4134      	asrne	r4, r6
 8019f44:	4314      	orrne	r4, r2
 8019f46:	e7d1      	b.n	8019eec <rint+0xa4>
 8019f48:	0801ae98 	.word	0x0801ae98
 8019f4c:	000fffff 	.word	0x000fffff

08019f50 <scalbn>:
 8019f50:	b570      	push	{r4, r5, r6, lr}
 8019f52:	ec55 4b10 	vmov	r4, r5, d0
 8019f56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019f5a:	4606      	mov	r6, r0
 8019f5c:	462b      	mov	r3, r5
 8019f5e:	b9aa      	cbnz	r2, 8019f8c <scalbn+0x3c>
 8019f60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019f64:	4323      	orrs	r3, r4
 8019f66:	d03b      	beq.n	8019fe0 <scalbn+0x90>
 8019f68:	4b31      	ldr	r3, [pc, #196]	; (801a030 <scalbn+0xe0>)
 8019f6a:	4629      	mov	r1, r5
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	ee10 0a10 	vmov	r0, s0
 8019f72:	f7e6 fb61 	bl	8000638 <__aeabi_dmul>
 8019f76:	4b2f      	ldr	r3, [pc, #188]	; (801a034 <scalbn+0xe4>)
 8019f78:	429e      	cmp	r6, r3
 8019f7a:	4604      	mov	r4, r0
 8019f7c:	460d      	mov	r5, r1
 8019f7e:	da12      	bge.n	8019fa6 <scalbn+0x56>
 8019f80:	a327      	add	r3, pc, #156	; (adr r3, 801a020 <scalbn+0xd0>)
 8019f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f86:	f7e6 fb57 	bl	8000638 <__aeabi_dmul>
 8019f8a:	e009      	b.n	8019fa0 <scalbn+0x50>
 8019f8c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019f90:	428a      	cmp	r2, r1
 8019f92:	d10c      	bne.n	8019fae <scalbn+0x5e>
 8019f94:	ee10 2a10 	vmov	r2, s0
 8019f98:	4620      	mov	r0, r4
 8019f9a:	4629      	mov	r1, r5
 8019f9c:	f7e6 f996 	bl	80002cc <__adddf3>
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	460d      	mov	r5, r1
 8019fa4:	e01c      	b.n	8019fe0 <scalbn+0x90>
 8019fa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019faa:	460b      	mov	r3, r1
 8019fac:	3a36      	subs	r2, #54	; 0x36
 8019fae:	4432      	add	r2, r6
 8019fb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019fb4:	428a      	cmp	r2, r1
 8019fb6:	dd0b      	ble.n	8019fd0 <scalbn+0x80>
 8019fb8:	ec45 4b11 	vmov	d1, r4, r5
 8019fbc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801a028 <scalbn+0xd8>
 8019fc0:	f000 f90e 	bl	801a1e0 <copysign>
 8019fc4:	a318      	add	r3, pc, #96	; (adr r3, 801a028 <scalbn+0xd8>)
 8019fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fca:	ec51 0b10 	vmov	r0, r1, d0
 8019fce:	e7da      	b.n	8019f86 <scalbn+0x36>
 8019fd0:	2a00      	cmp	r2, #0
 8019fd2:	dd08      	ble.n	8019fe6 <scalbn+0x96>
 8019fd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019fd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019fdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019fe0:	ec45 4b10 	vmov	d0, r4, r5
 8019fe4:	bd70      	pop	{r4, r5, r6, pc}
 8019fe6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019fea:	da0d      	bge.n	801a008 <scalbn+0xb8>
 8019fec:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019ff0:	429e      	cmp	r6, r3
 8019ff2:	ec45 4b11 	vmov	d1, r4, r5
 8019ff6:	dce1      	bgt.n	8019fbc <scalbn+0x6c>
 8019ff8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801a020 <scalbn+0xd0>
 8019ffc:	f000 f8f0 	bl	801a1e0 <copysign>
 801a000:	a307      	add	r3, pc, #28	; (adr r3, 801a020 <scalbn+0xd0>)
 801a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a006:	e7e0      	b.n	8019fca <scalbn+0x7a>
 801a008:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a00c:	3236      	adds	r2, #54	; 0x36
 801a00e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a016:	4620      	mov	r0, r4
 801a018:	4629      	mov	r1, r5
 801a01a:	2200      	movs	r2, #0
 801a01c:	4b06      	ldr	r3, [pc, #24]	; (801a038 <scalbn+0xe8>)
 801a01e:	e7b2      	b.n	8019f86 <scalbn+0x36>
 801a020:	c2f8f359 	.word	0xc2f8f359
 801a024:	01a56e1f 	.word	0x01a56e1f
 801a028:	8800759c 	.word	0x8800759c
 801a02c:	7e37e43c 	.word	0x7e37e43c
 801a030:	43500000 	.word	0x43500000
 801a034:	ffff3cb0 	.word	0xffff3cb0
 801a038:	3c900000 	.word	0x3c900000

0801a03c <fabsf>:
 801a03c:	ee10 3a10 	vmov	r3, s0
 801a040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a044:	ee00 3a10 	vmov	s0, r3
 801a048:	4770      	bx	lr

0801a04a <finitef>:
 801a04a:	ee10 3a10 	vmov	r3, s0
 801a04e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801a052:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a056:	bfac      	ite	ge
 801a058:	2000      	movge	r0, #0
 801a05a:	2001      	movlt	r0, #1
 801a05c:	4770      	bx	lr
	...

0801a060 <nanf>:
 801a060:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a068 <nanf+0x8>
 801a064:	4770      	bx	lr
 801a066:	bf00      	nop
 801a068:	7fc00000 	.word	0x7fc00000

0801a06c <rintf>:
 801a06c:	b513      	push	{r0, r1, r4, lr}
 801a06e:	ee10 1a10 	vmov	r1, s0
 801a072:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a076:	0ddc      	lsrs	r4, r3, #23
 801a078:	3c7f      	subs	r4, #127	; 0x7f
 801a07a:	2c16      	cmp	r4, #22
 801a07c:	dc46      	bgt.n	801a10c <rintf+0xa0>
 801a07e:	b32b      	cbz	r3, 801a0cc <rintf+0x60>
 801a080:	2c00      	cmp	r4, #0
 801a082:	ee10 2a10 	vmov	r2, s0
 801a086:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801a08a:	da21      	bge.n	801a0d0 <rintf+0x64>
 801a08c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801a090:	425b      	negs	r3, r3
 801a092:	4a21      	ldr	r2, [pc, #132]	; (801a118 <rintf+0xac>)
 801a094:	0a5b      	lsrs	r3, r3, #9
 801a096:	0d09      	lsrs	r1, r1, #20
 801a098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a09c:	0509      	lsls	r1, r1, #20
 801a09e:	430b      	orrs	r3, r1
 801a0a0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801a0a4:	ee07 3a90 	vmov	s15, r3
 801a0a8:	edd2 6a00 	vldr	s13, [r2]
 801a0ac:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801a0b0:	ed8d 7a01 	vstr	s14, [sp, #4]
 801a0b4:	eddd 7a01 	vldr	s15, [sp, #4]
 801a0b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a0bc:	ee17 3a90 	vmov	r3, s15
 801a0c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a0c4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801a0c8:	ee00 3a10 	vmov	s0, r3
 801a0cc:	b002      	add	sp, #8
 801a0ce:	bd10      	pop	{r4, pc}
 801a0d0:	4b12      	ldr	r3, [pc, #72]	; (801a11c <rintf+0xb0>)
 801a0d2:	4123      	asrs	r3, r4
 801a0d4:	4219      	tst	r1, r3
 801a0d6:	d0f9      	beq.n	801a0cc <rintf+0x60>
 801a0d8:	085b      	lsrs	r3, r3, #1
 801a0da:	4219      	tst	r1, r3
 801a0dc:	d006      	beq.n	801a0ec <rintf+0x80>
 801a0de:	ea21 0203 	bic.w	r2, r1, r3
 801a0e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801a0e6:	fa43 f404 	asr.w	r4, r3, r4
 801a0ea:	4322      	orrs	r2, r4
 801a0ec:	4b0a      	ldr	r3, [pc, #40]	; (801a118 <rintf+0xac>)
 801a0ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a0f2:	ed90 7a00 	vldr	s14, [r0]
 801a0f6:	ee07 2a90 	vmov	s15, r2
 801a0fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a0fe:	edcd 7a01 	vstr	s15, [sp, #4]
 801a102:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a106:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a10a:	e7df      	b.n	801a0cc <rintf+0x60>
 801a10c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a110:	d3dc      	bcc.n	801a0cc <rintf+0x60>
 801a112:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a116:	e7d9      	b.n	801a0cc <rintf+0x60>
 801a118:	0801aea8 	.word	0x0801aea8
 801a11c:	007fffff 	.word	0x007fffff

0801a120 <scalbnf>:
 801a120:	b508      	push	{r3, lr}
 801a122:	ee10 2a10 	vmov	r2, s0
 801a126:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a12a:	ed2d 8b02 	vpush	{d8}
 801a12e:	eef0 0a40 	vmov.f32	s1, s0
 801a132:	d004      	beq.n	801a13e <scalbnf+0x1e>
 801a134:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a138:	d306      	bcc.n	801a148 <scalbnf+0x28>
 801a13a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801a13e:	ecbd 8b02 	vpop	{d8}
 801a142:	eeb0 0a60 	vmov.f32	s0, s1
 801a146:	bd08      	pop	{r3, pc}
 801a148:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a14c:	d21c      	bcs.n	801a188 <scalbnf+0x68>
 801a14e:	4b1f      	ldr	r3, [pc, #124]	; (801a1cc <scalbnf+0xac>)
 801a150:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a1d0 <scalbnf+0xb0>
 801a154:	4298      	cmp	r0, r3
 801a156:	ee60 0a27 	vmul.f32	s1, s0, s15
 801a15a:	db10      	blt.n	801a17e <scalbnf+0x5e>
 801a15c:	ee10 2a90 	vmov	r2, s1
 801a160:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801a164:	3b19      	subs	r3, #25
 801a166:	4403      	add	r3, r0
 801a168:	2bfe      	cmp	r3, #254	; 0xfe
 801a16a:	dd0f      	ble.n	801a18c <scalbnf+0x6c>
 801a16c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801a1d4 <scalbnf+0xb4>
 801a170:	eeb0 0a48 	vmov.f32	s0, s16
 801a174:	f000 f843 	bl	801a1fe <copysignf>
 801a178:	ee60 0a08 	vmul.f32	s1, s0, s16
 801a17c:	e7df      	b.n	801a13e <scalbnf+0x1e>
 801a17e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a1d8 <scalbnf+0xb8>
 801a182:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a186:	e7da      	b.n	801a13e <scalbnf+0x1e>
 801a188:	0ddb      	lsrs	r3, r3, #23
 801a18a:	e7ec      	b.n	801a166 <scalbnf+0x46>
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	dd06      	ble.n	801a19e <scalbnf+0x7e>
 801a190:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a194:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a198:	ee00 3a90 	vmov	s1, r3
 801a19c:	e7cf      	b.n	801a13e <scalbnf+0x1e>
 801a19e:	f113 0f16 	cmn.w	r3, #22
 801a1a2:	da06      	bge.n	801a1b2 <scalbnf+0x92>
 801a1a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a1a8:	4298      	cmp	r0, r3
 801a1aa:	dcdf      	bgt.n	801a16c <scalbnf+0x4c>
 801a1ac:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801a1d8 <scalbnf+0xb8>
 801a1b0:	e7de      	b.n	801a170 <scalbnf+0x50>
 801a1b2:	3319      	adds	r3, #25
 801a1b4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a1b8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a1bc:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a1dc <scalbnf+0xbc>
 801a1c0:	ee07 3a10 	vmov	s14, r3
 801a1c4:	ee67 0a27 	vmul.f32	s1, s14, s15
 801a1c8:	e7b9      	b.n	801a13e <scalbnf+0x1e>
 801a1ca:	bf00      	nop
 801a1cc:	ffff3cb0 	.word	0xffff3cb0
 801a1d0:	4c000000 	.word	0x4c000000
 801a1d4:	7149f2ca 	.word	0x7149f2ca
 801a1d8:	0da24260 	.word	0x0da24260
 801a1dc:	33000000 	.word	0x33000000

0801a1e0 <copysign>:
 801a1e0:	ec51 0b10 	vmov	r0, r1, d0
 801a1e4:	ee11 0a90 	vmov	r0, s3
 801a1e8:	ee10 2a10 	vmov	r2, s0
 801a1ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a1f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a1f4:	ea41 0300 	orr.w	r3, r1, r0
 801a1f8:	ec43 2b10 	vmov	d0, r2, r3
 801a1fc:	4770      	bx	lr

0801a1fe <copysignf>:
 801a1fe:	ee10 3a10 	vmov	r3, s0
 801a202:	ee10 2a90 	vmov	r2, s1
 801a206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a20a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a20e:	4313      	orrs	r3, r2
 801a210:	ee00 3a10 	vmov	s0, r3
 801a214:	4770      	bx	lr
	...

0801a218 <_init>:
 801a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a21a:	bf00      	nop
 801a21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a21e:	bc08      	pop	{r3}
 801a220:	469e      	mov	lr, r3
 801a222:	4770      	bx	lr

0801a224 <_fini>:
 801a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a226:	bf00      	nop
 801a228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a22a:	bc08      	pop	{r3}
 801a22c:	469e      	mov	lr, r3
 801a22e:	4770      	bx	lr
