
main_board_rev1_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08011e3c  08011e3c  00021e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801248c  0801248c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801248c  0801248c  0002248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012494  08012494  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012494  08012494  00022494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012498  08012498  00022498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801249c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ed4  200001f8  08012694  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a0cc  08012694  0003a0cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030331  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006068  00000000  00000000  00060559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a0  00000000  00000000  000665c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc8  00000000  00000000  00068668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a0a0  00000000  00000000  0006a430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020b04  00000000  00000000  000744d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbf58  00000000  00000000  00094fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190f2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a0c  00000000  00000000  00190fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e24 	.word	0x08011e24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08011e24 	.word	0x08011e24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fe92 	bl	80012ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f861 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f933 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 f90b 	bl	80007ec <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005d6:	f000 f8e9 	bl	80007ac <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005da:	f007 fd1b 	bl	8008014 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005de:	f010 fa35 	bl	8010a4c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e2:	f00c fb09 	bl	800cbf8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Print Mutex */

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0x94>)
 80005e8:	463c      	mov	r4, r7
 80005ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "print_mutex",                            // human readable mutex name
    osMutexPrioInherit,    					  // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };
  print_mutex = osMutexNew(&print_mutex_attr);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00c fc88 	bl	800cf08 <osMutexNew>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <main+0x98>)
 80005fc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 80005fe:	2200      	movs	r2, #0
 8000600:	2128      	movs	r1, #40	; 0x28
 8000602:	2080      	movs	r0, #128	; 0x80
 8000604:	f00c ff5a 	bl	800d4bc <osMessageQueueNew>
 8000608:	4602      	mov	r2, r0
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <main+0x9c>)
 800060c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <main+0xa0>)
 8000610:	2100      	movs	r1, #0
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0xa4>)
 8000614:	f00c fba4 	bl	800cd60 <osThreadNew>
 8000618:	4602      	mov	r2, r0
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <main+0xa8>)
 800061c:	601a      	str	r2, [r3, #0]

  /* creation of task_template */
  task_templateHandle = osThreadNew(vTaskTemplate, NULL, &task_template_attributes);
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <main+0xac>)
 8000620:	2100      	movs	r1, #0
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <main+0xb0>)
 8000624:	f00c fb9c 	bl	800cd60 <osThreadNew>
 8000628:	4602      	mov	r2, r0
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0xb4>)
 800062c:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <main+0xb8>)
 8000630:	2100      	movs	r1, #0
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <main+0xbc>)
 8000634:	f00c fb94 	bl	800cd60 <osThreadNew>
 8000638:	4602      	mov	r2, r0
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <main+0xc0>)
 800063c:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <main+0xc4>)
 8000640:	2100      	movs	r1, #0
 8000642:	4811      	ldr	r0, [pc, #68]	; (8000688 <main+0xc8>)
 8000644:	f00c fb8c 	bl	800cd60 <osThreadNew>
 8000648:	4602      	mov	r2, r0
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <main+0xcc>)
 800064c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800064e:	f00c fb29 	bl	800cca4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x92>
 8000654:	08011e84 	.word	0x08011e84
 8000658:	20005d18 	.word	0x20005d18
 800065c:	20005dd8 	.word	0x20005dd8
 8000660:	08012314 	.word	0x08012314
 8000664:	080008b1 	.word	0x080008b1
 8000668:	20004b64 	.word	0x20004b64
 800066c:	08012338 	.word	0x08012338
 8000670:	08001271 	.word	0x08001271
 8000674:	20006e38 	.word	0x20006e38
 8000678:	0801235c 	.word	0x0801235c
 800067c:	08000e11 	.word	0x08000e11
 8000680:	20004b68 	.word	0x20004b68
 8000684:	08012380 	.word	0x08012380
 8000688:	080011bd 	.word	0x080011bd
 800068c:	20004bf0 	.word	0x20004bf0

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0b4      	sub	sp, #208	; 0xd0
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f010 ff81 	bl	80115a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2284      	movs	r2, #132	; 0x84
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f010 ff72 	bl	80115a6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <SystemClock_Config+0x114>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a37      	ldr	r2, [pc, #220]	; (80007a4 <SystemClock_Config+0x114>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <SystemClock_Config+0x114>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <SystemClock_Config+0x118>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <SystemClock_Config+0x118>)
 80006e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <SystemClock_Config+0x118>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000724:	2307      	movs	r3, #7
 8000726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fe1a 	bl	8003368 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073a:	f000 f8d3 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f003 f8a2 	bl	80038b0 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000772:	f000 f8b7 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000776:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800077a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4618      	mov	r0, r3
 800078e:	f003 faa5 	bl	8003cdc <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000798:	f000 f8a4 	bl	80008e4 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	37d0      	adds	r7, #208	; 0xd0
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <MX_SDMMC1_SD_Init+0x3c>)
 80007b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <MX_SDMMC1_SD_Init+0x38>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20004b6c 	.word	0x20004b6c
 80007e8:	40012c00 	.word	0x40012c00

080007ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_DMA_Init+0x48>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <MX_DMA_Init+0x48>)
 80007f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_DMA_Init+0x48>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2105      	movs	r1, #5
 800080e:	203b      	movs	r0, #59	; 0x3b
 8000810:	f000 fe74 	bl	80014fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000814:	203b      	movs	r0, #59	; 0x3b
 8000816:	f000 fe8d 	bl	8001534 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2105      	movs	r1, #5
 800081e:	2045      	movs	r0, #69	; 0x45
 8000820:	f000 fe6c 	bl	80014fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000824:	2045      	movs	r0, #69	; 0x45
 8000826:	f000 fe85 	bl	8001534 <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_GPIO_Init+0x74>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <MX_GPIO_Init+0x74>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_GPIO_Init+0x74>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_GPIO_Init+0x74>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_GPIO_Init+0x74>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_GPIO_Init+0x74>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_GPIO_Init+0x74>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <MX_GPIO_Init+0x74>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_GPIO_Init+0x74>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_GPIO_Init+0x74>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <MX_GPIO_Init+0x74>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_GPIO_Init+0x74>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f00c faf7 	bl	800ceac <osDelay>
 80008be:	e7fb      	b.n	80008b8 <StartDefaultTask+0x8>

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 fd19 	bl	8001308 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40000800 	.word	0x40000800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f000 fde3 	bl	80014fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a6d      	ldr	r2, [pc, #436]	; (8000b18 <HAL_SD_MspInit+0x1d4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	f040 80d4 	bne.w	8000b10 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000968:	4b6c      	ldr	r3, [pc, #432]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 800096a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096c:	4a6b      	ldr	r2, [pc, #428]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 800096e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000972:	6453      	str	r3, [r2, #68]	; 0x44
 8000974:	4b69      	ldr	r3, [pc, #420]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b66      	ldr	r3, [pc, #408]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a65      	ldr	r2, [pc, #404]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
 800098c:	4b63      	ldr	r3, [pc, #396]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a5f      	ldr	r2, [pc, #380]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
 80009a4:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <HAL_SD_MspInit+0x1d8>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009c2:	230c      	movs	r3, #12
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4854      	ldr	r0, [pc, #336]	; (8000b20 <HAL_SD_MspInit+0x1dc>)
 80009ce:	f001 f963 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009e4:	230c      	movs	r3, #12
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	484c      	ldr	r0, [pc, #304]	; (8000b20 <HAL_SD_MspInit+0x1dc>)
 80009f0:	f001 f952 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f4:	2304      	movs	r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a04:	230c      	movs	r3, #12
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4845      	ldr	r0, [pc, #276]	; (8000b24 <HAL_SD_MspInit+0x1e0>)
 8000a10:	f001 f942 	bl	8001c98 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <HAL_SD_MspInit+0x1e8>)
 8000a18:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a1a:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a20:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a28:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a34:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a3c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a48:	2220      	movs	r2, #32
 8000a4a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a58:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000a6e:	482e      	ldr	r0, [pc, #184]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a70:	f000 fd6e 	bl	8001550 <HAL_DMA_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8000a7a:	f7ff ff33 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <HAL_SD_MspInit+0x1e4>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000a8c:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <HAL_SD_MspInit+0x1f0>)
 8000a8e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a96:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000a9a:	2240      	movs	r2, #64	; 0x40
 8000a9c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aaa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000abe:	2220      	movs	r2, #32
 8000ac0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000aca:	2204      	movs	r2, #4
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000ad6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000ade:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000ae6:	f000 fd33 	bl	8001550 <HAL_DMA_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8000af0:	f7ff fef8 	bl	80008e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000af8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_SD_MspInit+0x1ec>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2105      	movs	r1, #5
 8000b04:	2031      	movs	r0, #49	; 0x31
 8000b06:	f000 fcf9 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000b0a:	2031      	movs	r0, #49	; 0x31
 8000b0c:	f000 fd12 	bl	8001534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	20005d1c 	.word	0x20005d1c
 8000b2c:	40026458 	.word	0x40026458
 8000b30:	20006e3c 	.word	0x20006e3c
 8000b34:	400264a0 	.word	0x400264a0

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	201e      	movs	r0, #30
 8000b4e:	f000 fcd5 	bl	80014fc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000b52:	201e      	movs	r0, #30
 8000b54:	f000 fcee 	bl	8001534 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_InitTick+0xa0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_InitTick+0xa0>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_InitTick+0xa0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 0210 	add.w	r2, r7, #16
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 f87c 	bl	8003c78 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b80:	f003 f866 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8000b84:	4603      	mov	r3, r0
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_InitTick+0xa8>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_InitTick+0xac>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_InitTick+0xa8>)
 8000ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_InitTick+0xa8>)
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_InitTick+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_InitTick+0xa8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_InitTick+0xa8>)
 8000bba:	f004 ff3b 	bl	8005a34 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_InitTick+0xa8>)
 8000bc6:	f004 ff6b 	bl	8005aa0 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	20007e9c 	.word	0x20007e9c
 8000be4:	40000800 	.word	0x40000800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM4_IRQHandler+0x10>)
 8000c22:	f004 ff67 	bl	8005af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20007e9c 	.word	0x20007e9c

08000c30 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <SDMMC1_IRQHandler+0x10>)
 8000c36:	f003 fe79 	bl	800492c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20004b6c 	.word	0x20004b6c

08000c44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <DMA2_Stream3_IRQHandler+0x10>)
 8000c4a:	f000 fdb1 	bl	80017b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20005d1c 	.word	0x20005d1c

08000c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <OTG_FS_IRQHandler+0x10>)
 8000c5e:	f001 fb0b 	bl	8002278 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20009cc4 	.word	0x20009cc4

08000c6c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DMA2_Stream6_IRQHandler+0x10>)
 8000c72:	f000 fd9d 	bl	80017b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20006e3c 	.word	0x20006e3c

08000c80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x50>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x16>
		heap_end = &end;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <_sbrk+0x50>)
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <_sbrk+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_sbrk+0x50>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_sbrk+0x50>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d907      	bls.n	8000cba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000caa:	f010 fc37 	bl	801151c <__errno>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	e006      	b.n	8000cc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <_sbrk+0x50>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <_sbrk+0x50>)
 8000cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000214 	.word	0x20000214
 8000cd4:	2000a0d0 	.word	0x2000a0d0

08000cd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <SystemInit+0x28>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <SystemInit+0x28>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SystemInit+0x28>)
 8000cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <UsbPrint>:
#include <string.h>
#include <stdio.h>
#include <stdarg.h>


uint8_t UsbPrint(const char *format, ...) {
 8000d04:	b40f      	push	{r0, r1, r2, r3}
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <UsbPrint+0x60>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00c f990 	bl	800d03c <osMutexAcquire>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d118      	bne.n	8000d54 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	21c8      	movs	r1, #200	; 0xc8
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <UsbPrint+0x64>)
 8000d30:	f010 fd46 	bl	80117c0 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <UsbPrint+0x64>)
 8000d36:	f7ff fa6b 	bl	8000210 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <UsbPrint+0x64>)
 8000d42:	f00f ff41 	bl	8010bc8 <CDC_Transmit_FS>
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <UsbPrint+0x60>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f00c f9d2 	bl	800d0f8 <osMutexRelease>
	}
#endif
	return ret;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d60:	b004      	add	sp, #16
 8000d62:	4770      	bx	lr
 8000d64:	20005d18 	.word	0x20005d18
 8000d68:	20004bf4 	.word	0x20004bf4

08000d6c <formatLogData>:

void printLogHeader(char log_buffer[]) {
	sprintf(log_buffer, "Timestamp,Sensor Type,fkfkfkf");
}

void formatLogData(const log_entry_t *const log_entry, char log_buffer[]) {
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	b08d      	sub	sp, #52	; 0x34
 8000d70:	af08      	add	r7, sp, #32
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
	switch (log_entry->sens_type) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <formatLogData+0x18>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d024      	beq.n	8000dcc <formatLogData+0x60>
				log_entry->sensor.baro.pressure,
				log_entry->sensor.baro.temperature,
				log_entry->sensor.baro.timestamp);
		break;
	}
}
 8000d82:	e03d      	b.n	8000e00 <formatLogData+0x94>
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6a1e      	ldr	r6, [r3, #32]
				log_entry->timestamp, log_entry->sensor_board_id,
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8000d8e:	469c      	mov	ip, r3
				log_entry->sens_type, log_entry->sensor.imu.acc_x,
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	781b      	ldrb	r3, [r3, #0]
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld,%ld,%ld,%ld\r\n",
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	6952      	ldr	r2, [r2, #20]
 8000d9e:	68f9      	ldr	r1, [r7, #12]
 8000da0:	6989      	ldr	r1, [r1, #24]
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	6840      	ldr	r0, [r0, #4]
 8000da6:	68fc      	ldr	r4, [r7, #12]
 8000da8:	68a4      	ldr	r4, [r4, #8]
 8000daa:	68fd      	ldr	r5, [r7, #12]
 8000dac:	68ed      	ldr	r5, [r5, #12]
 8000dae:	9506      	str	r5, [sp, #24]
 8000db0:	9405      	str	r4, [sp, #20]
 8000db2:	9004      	str	r0, [sp, #16]
 8000db4:	9103      	str	r1, [sp, #12]
 8000db6:	9202      	str	r2, [sp, #8]
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	4663      	mov	r3, ip
 8000dc0:	4632      	mov	r2, r6
 8000dc2:	4911      	ldr	r1, [pc, #68]	; (8000e08 <formatLogData+0x9c>)
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f010 fcaf 	bl	8011728 <siprintf>
		break;
 8000dca:	e019      	b.n	8000e00 <formatLogData+0x94>
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld\r\n", log_entry->timestamp,
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6a18      	ldr	r0, [r3, #32]
				log_entry->sensor_board_id, log_entry->sens_type,
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld\r\n", log_entry->timestamp,
 8000dd6:	461d      	mov	r5, r3
				log_entry->sensor_board_id, log_entry->sens_type,
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	781b      	ldrb	r3, [r3, #0]
		sprintf(log_buffer, "%ld,%d,%d,%ld,%ld,%ld\r\n", log_entry->timestamp,
 8000ddc:	461c      	mov	r4, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	6892      	ldr	r2, [r2, #8]
 8000de6:	68f9      	ldr	r1, [r7, #12]
 8000de8:	68c9      	ldr	r1, [r1, #12]
 8000dea:	9103      	str	r1, [sp, #12]
 8000dec:	9202      	str	r2, [sp, #8]
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	9400      	str	r4, [sp, #0]
 8000df2:	462b      	mov	r3, r5
 8000df4:	4602      	mov	r2, r0
 8000df6:	4905      	ldr	r1, [pc, #20]	; (8000e0c <formatLogData+0xa0>)
 8000df8:	68b8      	ldr	r0, [r7, #8]
 8000dfa:	f010 fc95 	bl	8011728 <siprintf>
		break;
 8000dfe:	bf00      	nop
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e08:	08011eb4 	.word	0x08011eb4
 8000e0c:	08011ed8 	.word	0x08011ed8

08000e10 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0da      	sub	sp, #360	; 0x168
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000e20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\r\n");
 8000e2c:	48ca      	ldr	r0, [pc, #808]	; (8001158 <vTaskSdCard+0x348>)
 8000e2e:	f7ff ff69 	bl	8000d04 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\r\n");
 8000e32:	48ca      	ldr	r0, [pc, #808]	; (800115c <vTaskSdCard+0x34c>)
 8000e34:	f7ff ff66 	bl	8000d04 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	49c9      	ldr	r1, [pc, #804]	; (8001160 <vTaskSdCard+0x350>)
 8000e3c:	48c9      	ldr	r0, [pc, #804]	; (8001164 <vTaskSdCard+0x354>)
 8000e3e:	f00a fe5b 	bl	800baf8 <f_mount>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		if (res != FR_OK) {
 8000e48:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00b      	beq.n	8000e68 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8000e50:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000e54:	4619      	mov	r1, r3
 8000e56:	48c4      	ldr	r0, [pc, #784]	; (8001168 <vTaskSdCard+0x358>)
 8000e58:	f7ff ff54 	bl	8000d04 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8000e5c:	4bc3      	ldr	r3, [pc, #780]	; (800116c <vTaskSdCard+0x35c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f00c f822 	bl	800ceac <osDelay>
		}
	} while (res != FR_OK);
 8000e68:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1e3      	bne.n	8000e38 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8000e70:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f040 80ad 	bne.w	8000fd4 <vTaskSdCard+0x1c4>
		UsbPrint("[STORAGE TASK] Creating file name\r\n");
 8000e7a:	48bd      	ldr	r0, [pc, #756]	; (8001170 <vTaskSdCard+0x360>)
 8000e7c:	f7ff ff42 	bl	8000d04 <UsbPrint>

		unsigned int file_number = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.TXT");
 8000e86:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000e8a:	f107 0008 	add.w	r0, r7, #8
 8000e8e:	4bb9      	ldr	r3, [pc, #740]	; (8001174 <vTaskSdCard+0x364>)
 8000e90:	4ab3      	ldr	r2, [pc, #716]	; (8001160 <vTaskSdCard+0x350>)
 8000e92:	f00b fde9 	bl	800ca68 <f_findfirst>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		while (res == FR_OK && fno.fname[0]) {
 8000e9c:	e02e      	b.n	8000efc <vTaskSdCard+0xec>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8000e9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ea2:	7b5b      	ldrb	r3, [r3, #13]
 8000ea4:	3b30      	subs	r3, #48	; 0x30
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8000eac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eb0:	7b9b      	ldrb	r3, [r3, #14]
 8000eb2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	18ca      	adds	r2, r1, r3
 8000ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec4:	7bdb      	ldrb	r3, [r3, #15]
 8000ec6:	3b30      	subs	r3, #48	; 0x30
 8000ec8:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8000eca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			if (current_file_number + 1 > file_number) {
 8000ece:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d204      	bcs.n	8000ee6 <vTaskSdCard+0xd6>
				file_number = current_file_number + 1;
 8000edc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			}
			res = f_findnext(&dj, &fno);
 8000ee6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00b fd91 	bl	800ca18 <f_findnext>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		while (res == FR_OK && fno.fname[0]) {
 8000efc:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <vTaskSdCard+0xfe>
 8000f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f08:	7a5b      	ldrb	r3, [r3, #9]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1c7      	bne.n	8000e9e <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8000f0e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <vTaskSdCard+0x114>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8000f16:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4896      	ldr	r0, [pc, #600]	; (8001178 <vTaskSdCard+0x368>)
 8000f1e:	f7ff fef1 	bl	8000d04 <UsbPrint>
					res);
			goto resetSDCard;
 8000f22:	e786      	b.n	8000e32 <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8000f24:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000f28:	4a94      	ldr	r2, [pc, #592]	; (800117c <vTaskSdCard+0x36c>)
 8000f2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8000f30:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <vTaskSdCard+0x370>)
 8000f36:	fba3 2301 	umull	r2, r3, r3, r1
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	1aca      	subs	r2, r1, r3
 8000f46:	b2d3      	uxtb	r3, r2
 8000f48:	3330      	adds	r3, #48	; 0x30
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8000f50:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f54:	4a8a      	ldr	r2, [pc, #552]	; (8001180 <vTaskSdCard+0x370>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	08d9      	lsrs	r1, r3, #3
 8000f5c:	4b88      	ldr	r3, [pc, #544]	; (8001180 <vTaskSdCard+0x370>)
 8000f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	1aca      	subs	r2, r1, r3
 8000f6e:	b2d3      	uxtb	r3, r2
 8000f70:	3330      	adds	r3, #48	; 0x30
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8000f78:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f7c:	4a81      	ldr	r2, [pc, #516]	; (8001184 <vTaskSdCard+0x374>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0959      	lsrs	r1, r3, #5
 8000f84:	4b7e      	ldr	r3, [pc, #504]	; (8001180 <vTaskSdCard+0x370>)
 8000f86:	fba3 2301 	umull	r2, r3, r3, r1
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1aca      	subs	r2, r1, r3
 8000f96:	b2d3      	uxtb	r3, r2
 8000f98:	3330      	adds	r3, #48	; 0x30
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8000fa0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4878      	ldr	r0, [pc, #480]	; (8001188 <vTaskSdCard+0x378>)
 8000fa8:	f7ff feac 	bl	8000d04 <UsbPrint>

		res = f_closedir(&dj);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00b fcc3 	bl	800c93c <f_closedir>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
		if (res != FR_OK) {
 8000fbc:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <vTaskSdCard+0x1c4>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8000fc4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4870      	ldr	r0, [pc, #448]	; (800118c <vTaskSdCard+0x37c>)
 8000fcc:	f7ff fe9a 	bl	8000d04 <UsbPrint>
			goto resetSDCard;
 8000fd0:	bf00      	nop
 8000fd2:	e72e      	b.n	8000e32 <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8000fd4:	486e      	ldr	r0, [pc, #440]	; (8001190 <vTaskSdCard+0x380>)
 8000fd6:	f7ff fe95 	bl	8000d04 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8000fda:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000fde:	2212      	movs	r2, #18
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	486c      	ldr	r0, [pc, #432]	; (8001194 <vTaskSdCard+0x384>)
 8000fe4:	f00a fdec 	bl	800bbc0 <f_open>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8000fee:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <vTaskSdCard+0x1f4>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8000ff6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4866      	ldr	r0, [pc, #408]	; (8001198 <vTaskSdCard+0x388>)
 8000ffe:	f7ff fe81 	bl	8000d04 <UsbPrint>
		goto resetSDCard;
 8001002:	e716      	b.n	8000e32 <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8001004:	4865      	ldr	r0, [pc, #404]	; (800119c <vTaskSdCard+0x38c>)
 8001006:	f7ff fe7d 	bl	8000d04 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <vTaskSdCard+0x384>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	4619      	mov	r1, r3
 8001010:	4860      	ldr	r0, [pc, #384]	; (8001194 <vTaskSdCard+0x384>)
 8001012:	f00b f9c7 	bl	800c3a4 <f_lseek>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	if (res != FR_OK) {
 800101c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <vTaskSdCard+0x222>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8001024:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001028:	4619      	mov	r1, r3
 800102a:	485d      	ldr	r0, [pc, #372]	; (80011a0 <vTaskSdCard+0x390>)
 800102c:	f7ff fe6a 	bl	8000d04 <UsbPrint>
		goto resetSDCard;
 8001030:	e6ff      	b.n	8000e32 <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	char log_buffer[200] = "COL_1,COL_2,COL_3,...\r\n";
 8001038:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <vTaskSdCard+0x394>)
 800103a:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001048:	e884 0003 	stmia.w	r4, {r0, r1}
 800104c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001050:	22b0      	movs	r2, #176	; 0xb0
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f010 faa6 	bl	80115a6 <memset>
	uint32_t num_bytes = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	res = f_write(&EULER_LOG_FILE, log_buffer, strlen(log_buffer),
 8001060:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8d3 	bl	8000210 <strlen>
 800106a:	4602      	mov	r2, r0
 800106c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <vTaskSdCard+0x398>)
 8001072:	4848      	ldr	r0, [pc, #288]	; (8001194 <vTaskSdCard+0x384>)
 8001074:	f00a ff69 	bl	800bf4a <f_write>
 8001078:	4603      	mov	r3, r0
 800107a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			&EULER_bytesSD);
	if (res != FR_OK) {
 800107e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <vTaskSdCard+0x284>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8001086:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800108a:	4619      	mov	r1, r3
 800108c:	4847      	ldr	r0, [pc, #284]	; (80011ac <vTaskSdCard+0x39c>)
 800108e:	f7ff fe39 	bl	8000d04 <UsbPrint>
		goto resetSDCard;
 8001092:	e6ce      	b.n	8000e32 <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8001094:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001098:	4618      	mov	r0, r3
 800109a:	2328      	movs	r3, #40	; 0x28
 800109c:	461a      	mov	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f010 fa81 	bl	80115a6 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <vTaskSdCard+0x3a0>)
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	2200      	movs	r2, #0
 80010b2:	f00c fafd 	bl	800d6b0 <osMessageQueueGet>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f3      	bne.n	80010a4 <vTaskSdCard+0x294>
		osWaitForever) == osOK) {
			formatLogData(&log_entry, log_buffer);
 80010bc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80010c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe50 	bl	8000d6c <formatLogData>
			num_bytes = strlen(log_buffer);
 80010cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f89d 	bl	8000210 <strlen>
 80010d6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
			if (num_bytes > 0) {
 80010da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d019      	beq.n	8001116 <vTaskSdCard+0x306>
				res = f_write(&EULER_LOG_FILE, log_buffer, strlen(log_buffer),
 80010e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f892 	bl	8000210 <strlen>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <vTaskSdCard+0x398>)
 80010f4:	4827      	ldr	r0, [pc, #156]	; (8001194 <vTaskSdCard+0x384>)
 80010f6:	f00a ff28 	bl	800bf4a <f_write>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
						&EULER_bytesSD);
				if (res != FR_OK) {
 8001100:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <vTaskSdCard+0x306>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8001108:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800110c:	4619      	mov	r1, r3
 800110e:	4827      	ldr	r0, [pc, #156]	; (80011ac <vTaskSdCard+0x39c>)
 8001110:	f7ff fdf8 	bl	8000d04 <UsbPrint>
							res);
					goto resetSDCard;
 8001114:	e68d      	b.n	8000e32 <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8001116:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800111a:	3301      	adds	r3, #1
 800111c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8001120:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001124:	2b7f      	cmp	r3, #127	; 0x7f
 8001126:	ddbd      	ble.n	80010a4 <vTaskSdCard+0x294>
				msgCounter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

				UsbPrint("[STORAGE TASK] Syncing file..\r\n");
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <vTaskSdCard+0x3a4>)
 8001130:	f7ff fde8 	bl	8000d04 <UsbPrint>
				res = f_sync(&EULER_LOG_FILE);
 8001134:	4817      	ldr	r0, [pc, #92]	; (8001194 <vTaskSdCard+0x384>)
 8001136:	f00b f8ac 	bl	800c292 <f_sync>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
				if (res != FR_OK) {
 8001140:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0ad      	beq.n	80010a4 <vTaskSdCard+0x294>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8001148:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800114c:	4619      	mov	r1, r3
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <vTaskSdCard+0x3a8>)
 8001150:	f7ff fdd8 	bl	8000d04 <UsbPrint>
					goto resetSDCard;
 8001154:	e66d      	b.n	8000e32 <vTaskSdCard+0x22>
 8001156:	bf00      	nop
 8001158:	08011ef0 	.word	0x08011ef0
 800115c:	08011f1c 	.word	0x08011f1c
 8001160:	08011f40 	.word	0x08011f40
 8001164:	2000810c 	.word	0x2000810c
 8001168:	08011f44 	.word	0x08011f44
 800116c:	20000248 	.word	0x20000248
 8001170:	08011f70 	.word	0x08011f70
 8001174:	08011f94 	.word	0x08011f94
 8001178:	08011fa0 	.word	0x08011fa0
 800117c:	08011fd8 	.word	0x08011fd8
 8001180:	cccccccd 	.word	0xcccccccd
 8001184:	51eb851f 	.word	0x51eb851f
 8001188:	08011fe4 	.word	0x08011fe4
 800118c:	08012008 	.word	0x08012008
 8001190:	08012038 	.word	0x08012038
 8001194:	20007edc 	.word	0x20007edc
 8001198:	0801205c 	.word	0x0801205c
 800119c:	08012088 	.word	0x08012088
 80011a0:	080120b0 	.word	0x080120b0
 80011a4:	08012154 	.word	0x08012154
 80011a8:	20008340 	.word	0x20008340
 80011ac:	080120e0 	.word	0x080120e0
 80011b0:	20005dd8 	.word	0x20005dd8
 80011b4:	0801210c 	.word	0x0801210c
 80011b8:	0801212c 	.word	0x0801212c

080011bc <vTaskSensRead>:
#include "util.h"
#include "cmsis_os.h"

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b0a0      	sub	sp, #128	; 0x80
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	imu_data imu1 = { .gyro_x = 1312, .gyro_y = 764, .gyro_z = -123, .acc_x =
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <vTaskSensRead+0xa8>)
 80011c6:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80011ca:	461d      	mov	r5, r3
 80011cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			42738, .acc_y = 321, .acc_z = 777, .timestamp = 3 };
	baro_data baro1 = { .pressure = 123, .temperature = 13321, .timestamp = 3 };
 80011d8:	4a23      	ldr	r2, [pc, #140]	; (8001268 <vTaskSensRead+0xac>)
 80011da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011de:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	log_entry_t log1 = { .sens_type = IMU, .sensor = { .imu = imu1 },
 80011e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e8:	2228      	movs	r2, #40	; 0x28
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f010 f9da 	bl	80115a6 <memset>
 80011f2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80011f6:	f107 0564 	add.w	r5, r7, #100	; 0x64
 80011fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.sensor_board_id = 0 };
	log_entry_t log2 = { .sens_type = BARO, .sensor = { .baro = baro1 },
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f010 f9c9 	bl	80115a6 <memset>
 8001214:	2301      	movs	r3, #1
 8001216:	723b      	strb	r3, [r7, #8]
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001220:	ca07      	ldmia	r2, {r0, r1, r2}
 8001222:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001226:	2302      	movs	r3, #2
 8001228:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			.sensor_board_id = 2 };

	for (;;) {
		log1.timestamp = osKernelGetTickCount();
 800122c:	f00b fd70 	bl	800cd10 <osKernelGetTickCount>
 8001230:	4603      	mov	r3, r0
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
		log2.timestamp = osKernelGetTickCount();
 8001234:	f00b fd6c 	bl	800cd10 <osKernelGetTickCount>
 8001238:	4603      	mov	r3, r0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
		//UsbPrint("[SENSOR READ TASK] Log elements in queue %ld!\n", osMessageQueueGetCount(log_queue));
		osMessageQueuePut(log_queue, &log1, 0U, 0U);
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <vTaskSensRead+0xb0>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001244:	2300      	movs	r3, #0
 8001246:	2200      	movs	r2, #0
 8001248:	f00c f9be 	bl	800d5c8 <osMessageQueuePut>
		osMessageQueuePut(log_queue, &log2, 0U, 0U);
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <vTaskSensRead+0xb0>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f107 0108 	add.w	r1, r7, #8
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	f00c f9b6 	bl	800d5c8 <osMessageQueuePut>

		osDelay(100);
 800125c:	2064      	movs	r0, #100	; 0x64
 800125e:	f00b fe25 	bl	800ceac <osDelay>
		log1.timestamp = osKernelGetTickCount();
 8001262:	e7e3      	b.n	800122c <vTaskSensRead+0x70>
 8001264:	0801221c 	.word	0x0801221c
 8001268:	08012238 	.word	0x08012238
 800126c:	20005dd8 	.word	0x20005dd8

08001270 <vTaskTemplate>:
#include "util.h"

#include "tasks/task_template.h"


void vTaskTemplate(void *argument) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	uint32_t out_int = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
	char* out_str = "template";
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <vTaskTemplate+0x24>)
 800127e:	60bb      	str	r3, [r7, #8]
	for (;;) {
		UsbPrint("[DBG] Hello from %s task %d!\n", out_str, out_int);
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <vTaskTemplate+0x28>)
 8001286:	f7ff fd3d 	bl	8000d04 <UsbPrint>
		osDelay(1000);
 800128a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128e:	f00b fe0d 	bl	800ceac <osDelay>
		UsbPrint("[DBG] Hello from %s task %d!\n", out_str, out_int);
 8001292:	e7f5      	b.n	8001280 <vTaskTemplate+0x10>
 8001294:	08012244 	.word	0x08012244
 8001298:	08012250 	.word	0x08012250

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a2:	e003      	b.n	80012ac <LoopCopyDataInit>

080012a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012aa:	3104      	adds	r1, #4

080012ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b4:	d3f6      	bcc.n	80012a4 <CopyDataInit>
  ldr  r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012b8:	e002      	b.n	80012c0 <LoopFillZerobss>

080012ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012bc:	f842 3b04 	str.w	r3, [r2], #4

080012c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c4:	d3f9      	bcc.n	80012ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c6:	f7ff fd07 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f010 f92d 	bl	8011528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff f977 	bl	80005c0 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80012d8:	0801249c 	.word	0x0801249c
  ldr  r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e0:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80012e4:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80012e8:	2000a0cc 	.word	0x2000a0cc

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>

080012ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f2:	2003      	movs	r0, #3
 80012f4:	f000 f8f7 	bl	80014e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fc1d 	bl	8000b38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012fe:	f7ff faf9 	bl	80008f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	20008344 	.word	0x20008344

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20008344 	.word	0x20008344

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_Delay+0x40>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000008 	.word	0x20000008

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0000 	.word	0x05fa0000

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff4c 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150e:	f7ff ff61 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f7ff ffb1 	bl	8001480 <NVIC_EncodePriority>
 800151e:	4602      	mov	r2, r0
 8001520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff80 	bl	800142c <__NVIC_SetPriority>
}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff54 	bl	80013f0 <__NVIC_EnableIRQ>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff fee8 	bl	8001330 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e099      	b.n	80016a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158c:	e00f      	b.n	80015ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158e:	f7ff fecf 	bl	8001330 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b05      	cmp	r3, #5
 800159a:	d908      	bls.n	80015ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2220      	movs	r2, #32
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2203      	movs	r2, #3
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e078      	b.n	80016a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e8      	bne.n	800158e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <HAL_DMA_Init+0x158>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2b04      	cmp	r3, #4
 8001606:	d107      	bne.n	8001618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4313      	orrs	r3, r2
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f023 0307 	bic.w	r3, r3, #7
 800162e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	4313      	orrs	r3, r2
 8001638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	2b04      	cmp	r3, #4
 8001640:	d117      	bne.n	8001672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4313      	orrs	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00e      	beq.n	8001672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 faa5 	bl	8001ba4 <DMA_CheckFifoParam>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2240      	movs	r2, #64	; 0x40
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800166e:	2301      	movs	r3, #1
 8001670:	e016      	b.n	80016a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa5c 	bl	8001b38 <DMA_CalcBaseAndBitshift>
 8001680:	4603      	mov	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	223f      	movs	r2, #63	; 0x3f
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	f010803f 	.word	0xf010803f

080016ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_DMA_Start_IT+0x26>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e048      	b.n	8001764 <HAL_DMA_Start_IT+0xb8>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d137      	bne.n	8001756 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f9ee 	bl	8001adc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0216 	orr.w	r2, r2, #22
 800171a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0208 	orr.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e005      	b.n	8001762 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800175e:	2302      	movs	r3, #2
 8001760:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001762:	7dfb      	ldrb	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d004      	beq.n	800178a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00c      	b.n	80017a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2205      	movs	r2, #5
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_DMA_IRQHandler+0x258>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a92      	ldr	r2, [pc, #584]	; (8001a0c <HAL_DMA_IRQHandler+0x25c>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0a9b      	lsrs	r3, r3, #10
 80017c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	2208      	movs	r2, #8
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01a      	beq.n	800181c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	2208      	movs	r2, #8
 800180a:	409a      	lsls	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2201      	movs	r2, #1
 8001822:	409a      	lsls	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d012      	beq.n	8001852 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183e:	2201      	movs	r2, #1
 8001840:	409a      	lsls	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2204      	movs	r2, #4
 8001858:	409a      	lsls	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d012      	beq.n	8001888 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00b      	beq.n	8001888 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	2204      	movs	r2, #4
 8001876:	409a      	lsls	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	f043 0204 	orr.w	r2, r3, #4
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	2210      	movs	r2, #16
 800188e:	409a      	lsls	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d043      	beq.n	8001920 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d03c      	beq.n	8001920 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018aa:	2210      	movs	r2, #16
 80018ac:	409a      	lsls	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d018      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d024      	beq.n	8001920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
 80018de:	e01f      	b.n	8001920 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01b      	beq.n	8001920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
 80018f0:	e016      	b.n	8001920 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0208 	bic.w	r2, r2, #8
 800190e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2220      	movs	r2, #32
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 808e 	beq.w	8001a4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8086 	beq.w	8001a4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	2220      	movs	r2, #32
 8001948:	409a      	lsls	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b05      	cmp	r3, #5
 8001958:	d136      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0216 	bic.w	r2, r2, #22
 8001968:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001978:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <HAL_DMA_IRQHandler+0x1da>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0208 	bic.w	r2, r2, #8
 8001998:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	223f      	movs	r2, #63	; 0x3f
 80019a0:	409a      	lsls	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d07d      	beq.n	8001aba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
        }
        return;
 80019c6:	e078      	b.n	8001aba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01c      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d108      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d030      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
 80019f4:	e02b      	b.n	8001a4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d027      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
 8001a06:	e022      	b.n	8001a4e <HAL_DMA_IRQHandler+0x29e>
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0210 	bic.w	r2, r2, #16
 8001a2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d032      	beq.n	8001abc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d022      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2205      	movs	r2, #5
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d307      	bcc.n	8001a96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f2      	bne.n	8001a7a <HAL_DMA_IRQHandler+0x2ca>
 8001a94:	e000      	b.n	8001a98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e000      	b.n	8001abc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001aba:	bf00      	nop
    }
  }
}
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop

08001ac4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d108      	bne.n	8001b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b1a:	e007      	b.n	8001b2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3b10      	subs	r3, #16
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <DMA_CalcBaseAndBitshift+0x60>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <DMA_CalcBaseAndBitshift+0x64>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d908      	bls.n	8001b78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	1d1a      	adds	r2, r3, #4
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	659a      	str	r2, [r3, #88]	; 0x58
 8001b76:	e006      	b.n	8001b86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	aaaaaaab 	.word	0xaaaaaaab
 8001b9c:	080123bc 	.word	0x080123bc
 8001ba0:	fffffc00 	.word	0xfffffc00

08001ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11f      	bne.n	8001bfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d855      	bhi.n	8001c70 <DMA_CheckFifoParam+0xcc>
 8001bc4:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <DMA_CheckFifoParam+0x28>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001bef 	.word	0x08001bef
 8001bd4:	08001bdd 	.word	0x08001bdd
 8001bd8:	08001c71 	.word	0x08001c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d045      	beq.n	8001c74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bec:	e042      	b.n	8001c74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bf6:	d13f      	bne.n	8001c78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e03c      	b.n	8001c78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c06:	d121      	bne.n	8001c4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d836      	bhi.n	8001c7c <DMA_CheckFifoParam+0xd8>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <DMA_CheckFifoParam+0x70>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c2b 	.word	0x08001c2b
 8001c1c:	08001c25 	.word	0x08001c25
 8001c20:	08001c3d 	.word	0x08001c3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      break;
 8001c28:	e02f      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d024      	beq.n	8001c80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3a:	e021      	b.n	8001c80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c44:	d11e      	bne.n	8001c84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c4a:	e01b      	b.n	8001c84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d902      	bls.n	8001c58 <DMA_CheckFifoParam+0xb4>
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d003      	beq.n	8001c5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c56:	e018      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5c:	e015      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6e:	e00b      	b.n	8001c88 <DMA_CheckFifoParam+0xe4>
      break;
 8001c70:	bf00      	nop
 8001c72:	e00a      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;
 8001c74:	bf00      	nop
 8001c76:	e008      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;
 8001c78:	bf00      	nop
 8001c7a:	e006      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;
 8001c7c:	bf00      	nop
 8001c7e:	e004      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;
 8001c80:	bf00      	nop
 8001c82:	e002      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;   
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <DMA_CheckFifoParam+0xe6>
      break;
 8001c88:	bf00      	nop
    }
  } 
  
  return status; 
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e175      	b.n	8001fa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8164 	bne.w	8001f9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_GPIO_Init+0x5e>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cea:	2b11      	cmp	r3, #17
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x100>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b12      	cmp	r3, #18
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80be 	beq.w	8001f9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_GPIO_Init+0x320>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a64      	ldr	r2, [pc, #400]	; (8001fb8 <HAL_GPIO_Init+0x320>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_GPIO_Init+0x320>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e3a:	4a60      	ldr	r2, [pc, #384]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <HAL_GPIO_Init+0x328>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d037      	beq.n	8001ed6 <HAL_GPIO_Init+0x23e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a56      	ldr	r2, [pc, #344]	; (8001fc4 <HAL_GPIO_Init+0x32c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d031      	beq.n	8001ed2 <HAL_GPIO_Init+0x23a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a55      	ldr	r2, [pc, #340]	; (8001fc8 <HAL_GPIO_Init+0x330>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d02b      	beq.n	8001ece <HAL_GPIO_Init+0x236>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a54      	ldr	r2, [pc, #336]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d025      	beq.n	8001eca <HAL_GPIO_Init+0x232>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a53      	ldr	r2, [pc, #332]	; (8001fd0 <HAL_GPIO_Init+0x338>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01f      	beq.n	8001ec6 <HAL_GPIO_Init+0x22e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_GPIO_Init+0x33c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d019      	beq.n	8001ec2 <HAL_GPIO_Init+0x22a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <HAL_GPIO_Init+0x340>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_GPIO_Init+0x226>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a50      	ldr	r2, [pc, #320]	; (8001fdc <HAL_GPIO_Init+0x344>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00d      	beq.n	8001eba <HAL_GPIO_Init+0x222>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4f      	ldr	r2, [pc, #316]	; (8001fe0 <HAL_GPIO_Init+0x348>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d007      	beq.n	8001eb6 <HAL_GPIO_Init+0x21e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4e      	ldr	r2, [pc, #312]	; (8001fe4 <HAL_GPIO_Init+0x34c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_GPIO_Init+0x21a>
 8001eae:	2309      	movs	r3, #9
 8001eb0:	e012      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	e010      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	e00e      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x240>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ee8:	4934      	ldr	r1, [pc, #208]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1a:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f44:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_GPIO_Init+0x350>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	f67f ae86 	bls.w	8001cb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3724      	adds	r7, #36	; 0x24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40021c00 	.word	0x40021c00
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40022400 	.word	0x40022400
 8001fe8:	40013c00 	.word	0x40013c00

08001fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	b08f      	sub	sp, #60	; 0x3c
 8001ff0:	af0a      	add	r7, sp, #40	; 0x28
 8001ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e116      	b.n	800222c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f00e ff2d 	bl	8010e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f004 fdd2 	bl	8006be6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	687e      	ldr	r6, [r7, #4]
 800204a:	466d      	mov	r5, sp
 800204c:	f106 0410 	add.w	r4, r6, #16
 8002050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800205c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002060:	1d33      	adds	r3, r6, #4
 8002062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002064:	6838      	ldr	r0, [r7, #0]
 8002066:	f004 fcb3 	bl	80069d0 <USB_CoreInit>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d7      	b.n	800222c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fdc0 	bl	8006c08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e04a      	b.n	8002124 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	333d      	adds	r3, #61	; 0x3d
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	333c      	adds	r3, #60	; 0x3c
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	b298      	uxth	r0, r3
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3342      	adds	r3, #66	; 0x42
 80020ca:	4602      	mov	r2, r0
 80020cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3344      	adds	r3, #68	; 0x44
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3350      	adds	r3, #80	; 0x50
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	3301      	adds	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	d3af      	bcc.n	800208e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	e044      	b.n	80021be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3301      	adds	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3b5      	bcc.n	8002134 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	687e      	ldr	r6, [r7, #4]
 80021d0:	466d      	mov	r5, sp
 80021d2:	f106 0410 	add.w	r4, r6, #16
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e6:	1d33      	adds	r3, r6, #4
 80021e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ea:	6838      	ldr	r0, [r7, #0]
 80021ec:	f004 fd36 	bl	8006c5c <USB_DevInit>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e014      	b.n	800222c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f001 f880 	bl	8003320 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f005 fd85 	bl	8007d34 <USB_DevDisconnect>

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002234 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_Start+0x16>
 8002246:	2302      	movs	r3, #2
 8002248:	e012      	b.n	8002270 <HAL_PCD_Start+0x3c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f005 fd54 	bl	8007d04 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fcaf 	bl	8006bc4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b08d      	sub	sp, #52	; 0x34
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fdfb 	bl	8007e8a <USB_GetMode>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 83ca 	bne.w	8002a30 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 fd5f 	bl	8007d64 <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 83c0 	beq.w	8002a2e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f005 fd56 	bl	8007d64 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f002 0202 	and.w	r2, r2, #2
 80022d0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 fd44 	bl	8007d64 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d161      	bne.n	80023aa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0210 	bic.w	r2, r2, #16
 80022f4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 020f 	and.w	r2, r3, #15
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	0c5b      	lsrs	r3, r3, #17
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	2b02      	cmp	r3, #2
 8002320:	d124      	bne.n	800236c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d035      	beq.n	800239a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6a38      	ldr	r0, [r7, #32]
 8002342:	f005 fbbc 	bl	8007abe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002352:	441a      	add	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002364:	441a      	add	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	619a      	str	r2, [r3, #24]
 800236a:	e016      	b.n	800239a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	0c5b      	lsrs	r3, r3, #17
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	2b06      	cmp	r3, #6
 8002376:	d110      	bne.n	800239a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800237e:	2208      	movs	r2, #8
 8002380:	4619      	mov	r1, r3
 8002382:	6a38      	ldr	r0, [r7, #32]
 8002384:	f005 fb9b 	bl	8007abe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002394:	441a      	add	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0210 	orr.w	r2, r2, #16
 80023a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fcd8 	bl	8007d64 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023be:	d16e      	bne.n	800249e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f005 fcde 	bl	8007d8a <USB_ReadDevAllOutEpInterrupt>
 80023ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023d0:	e062      	b.n	8002498 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d057      	beq.n	800248c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 fd03 	bl	8007df2 <USB_ReadDevOutEPInterrupt>
 80023ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00c      	beq.n	8002412 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002404:	461a      	mov	r2, r3
 8002406:	2301      	movs	r3, #1
 8002408:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800240a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fddd 	bl	8002fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00c      	beq.n	8002436 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002428:	461a      	mov	r2, r3
 800242a:	2308      	movs	r3, #8
 800242c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800242e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fed7 	bl	80031e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	2310      	movs	r3, #16
 8002450:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	2320      	movs	r3, #32
 800246c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d199      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f005 fc5e 	bl	8007d64 <USB_ReadInterrupts>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b2:	f040 80c0 	bne.w	8002636 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 fc7f 	bl	8007dbe <USB_ReadDevAllInEpInterrupt>
 80024c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024c6:	e0b2      	b.n	800262e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80a7 	beq.w	8002622 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f005 fca5 	bl	8007e2e <USB_ReadDevInEPInterrupt>
 80024e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d057      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	2201      	movs	r2, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	69f9      	ldr	r1, [r7, #28]
 800250c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002510:	4013      	ands	r3, r2
 8002512:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d132      	bne.n	8002594 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3348      	adds	r3, #72	; 0x48
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4403      	add	r3, r0
 800254e:	3344      	adds	r3, #68	; 0x44
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4419      	add	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4403      	add	r3, r0
 8002562:	3348      	adds	r3, #72	; 0x48
 8002564:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	2b00      	cmp	r3, #0
 800256a:	d113      	bne.n	8002594 <HAL_PCD_IRQHandler+0x31c>
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3350      	adds	r3, #80	; 0x50
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800258c:	461a      	mov	r2, r3
 800258e:	2101      	movs	r1, #1
 8002590:	f005 fcae 	bl	8007ef0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f00e fcef 	bl	8010f7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	461a      	mov	r2, r3
 80025b8:	2308      	movs	r3, #8
 80025ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2310      	movs	r3, #16
 80025d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ee:	461a      	mov	r2, r3
 80025f0:	2340      	movs	r3, #64	; 0x40
 80025f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260a:	461a      	mov	r2, r3
 800260c:	2302      	movs	r3, #2
 800260e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800261a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fc48 	bl	8002eb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	3301      	adds	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af49 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fb92 	bl	8007d64 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264a:	d122      	bne.n	8002692 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f00e fed1 	bl	801141c <HAL_PCDEx_LPM_Callback>
 800267a:	e002      	b.n	8002682 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f00e fcf5 	bl	801106c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f005 fb64 	bl	8007d64 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a6:	d112      	bne.n	80026ce <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f00e fcb1 	bl	8011020 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026cc:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 fb46 	bl	8007d64 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e2:	d121      	bne.n	8002728 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d111      	bne.n	8002722 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002718:	2101      	movs	r1, #1
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f00e fe7e 	bl	801141c <HAL_PCDEx_LPM_Callback>
 8002720:	e002      	b.n	8002728 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f00e fc7c 	bl	8011020 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f005 fb19 	bl	8007d64 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273c:	f040 80c7 	bne.w	80028ce <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2110      	movs	r1, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fbec 	bl	8006f38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002764:	e056      	b.n	8002814 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002772:	461a      	mov	r2, r3
 8002774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002778:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278a:	0151      	lsls	r1, r2, #5
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	440a      	add	r2, r1
 8002790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002798:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c6:	461a      	mov	r2, r3
 80027c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027de:	0151      	lsls	r1, r2, #5
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	440a      	add	r2, r1
 80027e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	440a      	add	r2, r1
 8002804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800280c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	3301      	adds	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281a:	429a      	cmp	r2, r3
 800281c:	d3a3      	bcc.n	8002766 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002830:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284a:	f043 030b 	orr.w	r3, r3, #11
 800284e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002860:	f043 030b 	orr.w	r3, r3, #11
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	e015      	b.n	8002894 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002876:	4619      	mov	r1, r3
 8002878:	f242 032b 	movw	r3, #8235	; 0x202b
 800287c:	4313      	orrs	r3, r2
 800287e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288e:	f043 030b 	orr.w	r3, r3, #11
 8002892:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b8:	461a      	mov	r2, r3
 80028ba:	f005 fb19 	bl	8007ef0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 fa46 	bl	8007d64 <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e2:	d124      	bne.n	800292e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 fadd 	bl	8007ea8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fb81 	bl	8006ffa <USB_GetDevSpeed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	f001 f998 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	4620      	mov	r0, r4
 8002914:	f004 f8b4 	bl	8006a80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f00e fb58 	bl	8010fce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800292c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fa16 	bl	8007d64 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b08      	cmp	r3, #8
 8002940:	d10a      	bne.n	8002958 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f00e fb35 	bl	8010fb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f002 0208 	and.w	r2, r2, #8
 8002956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f005 fa01 	bl	8007d64 <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296c:	d10f      	bne.n	800298e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f00e fb97 	bl	80110ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800298c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f005 f9e6 	bl	8007d64 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a2:	d10f      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f00e fb6a 	bl	8011088 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f005 f9cb 	bl	8007d64 <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d10a      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f00e fb78 	bl	80110d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f005 f9b5 	bl	8007d64 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d115      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f00e fb68 	bl	80110ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	e000      	b.n	8002a30 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002a2e:	bf00      	nop
    }
  }
}
 8002a30:	3734      	adds	r7, #52	; 0x34
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd90      	pop	{r4, r7, pc}

08002a36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_PCD_SetAddress+0x1a>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e013      	b.n	8002a78 <HAL_PCD_SetAddress+0x42>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 f925 	bl	8007cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	70fb      	strb	r3, [r7, #3]
 8002a92:	460b      	mov	r3, r1
 8002a94:	803b      	strh	r3, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da0f      	bge.n	8002ac6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	3338      	adds	r3, #56	; 0x38
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	705a      	strb	r2, [r3, #1]
 8002ac4:	e00f      	b.n	8002ae6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	3304      	adds	r3, #4
 8002ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002af2:	883a      	ldrh	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	78ba      	ldrb	r2, [r7, #2]
 8002afc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b10:	78bb      	ldrb	r3, [r7, #2]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_PCD_EP_Open+0xaa>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e00e      	b.n	8002b48 <HAL_PCD_EP_Open+0xc8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 fa83 	bl	8007044 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b46:	7afb      	ldrb	r3, [r7, #11]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da0f      	bge.n	8002b84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3338      	adds	r3, #56	; 0x38
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	705a      	strb	r2, [r3, #1]
 8002b82:	e00f      	b.n	8002ba4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 020f 	and.w	r2, r3, #15
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_PCD_EP_Close+0x6e>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_Close+0x8c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 fac1 	bl	8007154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6979      	ldr	r1, [r7, #20]
 8002c58:	f004 fda4 	bl	80077a4 <USB_EP0StartXfer>
 8002c5c:	e008      	b.n	8002c70 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	f004 fb4e 	bl	800730c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c9c:	681b      	ldr	r3, [r3, #0]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	3338      	adds	r3, #56	; 0x38
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d04:	7afb      	ldrb	r3, [r7, #11]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	f004 fd42 	bl	80077a4 <USB_EP0StartXfer>
 8002d20:	e008      	b.n	8002d34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	f004 faec 	bl	800730c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d901      	bls.n	8002d5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e050      	b.n	8002dfe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da0f      	bge.n	8002d84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	3338      	adds	r3, #56	; 0x38
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	705a      	strb	r2, [r3, #1]
 8002d82:	e00d      	b.n	8002da0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_EP_SetStall+0x82>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e01e      	b.n	8002dfe <HAL_PCD_EP_SetStall+0xc0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fe9e 	bl	8007b10 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	b2d9      	uxtb	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dee:	461a      	mov	r2, r3
 8002df0:	f005 f87e 	bl	8007ef0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d901      	bls.n	8002e24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e042      	b.n	8002eaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da0f      	bge.n	8002e4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 020f 	and.w	r2, r3, #15
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	3338      	adds	r3, #56	; 0x38
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	705a      	strb	r2, [r3, #1]
 8002e4a:	e00f      	b.n	8002e6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_PCD_EP_ClrStall+0x86>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e00e      	b.n	8002eaa <HAL_PCD_EP_ClrStall+0xa4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 fea6 	bl	8007bec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b08a      	sub	sp, #40	; 0x28
 8002eb6:	af02      	add	r7, sp, #8
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	3338      	adds	r3, #56	; 0x38
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d901      	bls.n	8002eea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e06c      	b.n	8002fc4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d902      	bls.n	8002f06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3303      	adds	r3, #3
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f0e:	e02b      	b.n	8002f68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d902      	bls.n	8002f2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3303      	adds	r3, #3
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68d9      	ldr	r1, [r3, #12]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4603      	mov	r3, r0
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f004 fd82 	bl	8007a54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	441a      	add	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	441a      	add	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d809      	bhi.n	8002f92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d203      	bcs.n	8002f92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1be      	bne.n	8002f10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d811      	bhi.n	8002fc2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	6939      	ldr	r1, [r7, #16]
 8002fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	333c      	adds	r3, #60	; 0x3c
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f040 80a0 	bne.w	8003144 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d015      	beq.n	800303a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4a72      	ldr	r2, [pc, #456]	; (80031dc <PCD_EP_OutXfrComplete_int+0x210>)
 8003012:	4293      	cmp	r3, r2
 8003014:	f240 80dd 	bls.w	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80d7 	beq.w	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	6093      	str	r3, [r2, #8]
 8003038:	e0cb      	b.n	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003050:	461a      	mov	r2, r3
 8003052:	2320      	movs	r3, #32
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	e0bc      	b.n	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 80b7 	bne.w	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a5d      	ldr	r2, [pc, #372]	; (80031dc <PCD_EP_OutXfrComplete_int+0x210>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d90f      	bls.n	800308c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003082:	461a      	mov	r2, r3
 8003084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	e0a2      	b.n	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800309e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	440b      	add	r3, r1
 80030a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4403      	add	r3, r0
 80030c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4403      	add	r3, r0
 80030ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4419      	add	r1, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4403      	add	r3, r0
 8003100:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003104:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d114      	bne.n	8003136 <PCD_EP_OutXfrComplete_int+0x16a>
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800312e:	461a      	mov	r2, r3
 8003130:	2101      	movs	r1, #1
 8003132:	f004 fedd 	bl	8007ef0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f00d ff03 	bl	8010f48 <HAL_PCD_DataOutStageCallback>
 8003142:	e046      	b.n	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d124      	bne.n	8003196 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003162:	461a      	mov	r2, r3
 8003164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003168:	6093      	str	r3, [r2, #8]
 800316a:	e032      	b.n	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003182:	461a      	mov	r2, r3
 8003184:	2320      	movs	r3, #32
 8003186:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f00d feda 	bl	8010f48 <HAL_PCD_DataOutStageCallback>
 8003194:	e01d      	b.n	80031d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d114      	bne.n	80031c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d108      	bne.n	80031c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031be:	461a      	mov	r2, r3
 80031c0:	2100      	movs	r1, #0
 80031c2:	f004 fe95 	bl	8007ef0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f00d febb 	bl	8010f48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	4f54300a 	.word	0x4f54300a
 80031e0:	4f54310a 	.word	0x4f54310a

080031e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	333c      	adds	r3, #60	; 0x3c
 80031fc:	3304      	adds	r3, #4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <PCD_EP_OutSetupPacket_int+0x88>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d90e      	bls.n	8003238 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003236:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f00d fe73 	bl	8010f24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a0a      	ldr	r2, [pc, #40]	; (800326c <PCD_EP_OutSetupPacket_int+0x88>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d90c      	bls.n	8003260 <PCD_EP_OutSetupPacket_int+0x7c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003258:	461a      	mov	r2, r3
 800325a:	2101      	movs	r1, #1
 800325c:	f004 fe48 	bl	8007ef0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	4f54300a 	.word	0x4f54300a

08003270 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
 800327c:	4613      	mov	r3, r2
 800327e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800328e:	883b      	ldrh	r3, [r7, #0]
 8003290:	0419      	lsls	r1, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	430a      	orrs	r2, r1
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
 800329c:	e028      	b.n	80032f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4413      	add	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e00d      	b.n	80032ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	3340      	adds	r3, #64	; 0x40
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4413      	add	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	3301      	adds	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d3ec      	bcc.n	80032b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032d8:	883b      	ldrh	r3, [r7, #0]
 80032da:	0418      	lsls	r0, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	4302      	orrs	r2, r0
 80032e8:	3340      	adds	r3, #64	; 0x40
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_PCDEx_ActivateLPM+0x44>)
 8003350:	4313      	orrs	r3, r2
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	10000003 	.word	0x10000003

08003368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003370:	2300      	movs	r3, #0
 8003372:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e291      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8087 	beq.w	800349a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800338c:	4b96      	ldr	r3, [pc, #600]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b04      	cmp	r3, #4
 8003396:	d00c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003398:	4b93      	ldr	r3, [pc, #588]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_OscConfig+0x62>
 80033a4:	4b90      	ldr	r3, [pc, #576]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b0:	d10b      	bne.n	80033ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b2:	4b8d      	ldr	r3, [pc, #564]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d06c      	beq.n	8003498 <HAL_RCC_OscConfig+0x130>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d168      	bne.n	8003498 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e26b      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7a>
 80033d4:	4b84      	ldr	r3, [pc, #528]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a83      	ldr	r2, [pc, #524]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e02e      	b.n	8003440 <HAL_RCC_OscConfig+0xd8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x9c>
 80033ea:	4b7f      	ldr	r3, [pc, #508]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7e      	ldr	r2, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b7c      	ldr	r3, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7b      	ldr	r2, [pc, #492]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80033fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xd8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0xc0>
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b73      	ldr	r3, [pc, #460]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a72      	ldr	r2, [pc, #456]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xd8>
 8003428:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b6c      	ldr	r3, [pc, #432]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6b      	ldr	r2, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd ff72 	bl	8001330 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fd ff6e 	bl	8001330 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e21f      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xe8>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd ff5e 	bl	8001330 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fd ff5a 	bl	8001330 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e20b      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x110>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d069      	beq.n	800357a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a6:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x190>
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1df      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	493d      	ldr	r1, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e040      	b.n	800357a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d023      	beq.n	8003548 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd ff10 	bl	8001330 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fd ff0c 	bl	8001330 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1bd      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4929      	ldr	r1, [pc, #164]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
 8003546:	e018      	b.n	800357a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fd feec 	bl	8001330 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fd fee8 	bl	8001330 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e199      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d038      	beq.n	80035f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d019      	beq.n	80035c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd fec9 	bl	8001330 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd fec5 	bl	8001330 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e176      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x23a>
 80035c0:	e01a      	b.n	80035f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80035c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c6:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_RCC_OscConfig+0x280>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd feaf 	bl	8001330 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fd feab 	bl	8001330 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d903      	bls.n	80035ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e15c      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
 80035e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	4b91      	ldr	r3, [pc, #580]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ee      	bne.n	80035d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80a4 	beq.w	800374e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003606:	4b8b      	ldr	r3, [pc, #556]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10d      	bne.n	800362e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b88      	ldr	r3, [pc, #544]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a87      	ldr	r2, [pc, #540]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b85      	ldr	r3, [pc, #532]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7e      	ldr	r2, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x4d0>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fd fe73 	bl	8001330 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fd fe6f 	bl	8001330 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e120      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003660:	4b75      	ldr	r3, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x4d0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x31a>
 8003674:	4b6f      	ldr	r3, [pc, #444]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	e02d      	b.n	80036de <HAL_RCC_OscConfig+0x376>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x33c>
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a69      	ldr	r2, [pc, #420]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	e01c      	b.n	80036de <HAL_RCC_OscConfig+0x376>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x35e>
 80036ac:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a60      	ldr	r2, [pc, #384]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a5d      	ldr	r2, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	e00b      	b.n	80036de <HAL_RCC_OscConfig+0x376>
 80036c6:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a5a      	ldr	r2, [pc, #360]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d015      	beq.n	8003712 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fe23 	bl	8001330 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fe1f 	bl	8001330 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0ce      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ee      	beq.n	80036ee <HAL_RCC_OscConfig+0x386>
 8003710:	e014      	b.n	800373c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fd fe0d 	bl	8001330 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fd fe09 	bl	8001330 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ee      	bne.n	800371a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80a4 	beq.w	80038a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d06b      	beq.n	800383c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d149      	bne.n	8003800 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a30      	ldr	r2, [pc, #192]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fdda 	bl	8001330 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fd fdd6 	bl	8001330 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e087      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	4b28      	ldr	r3, [pc, #160]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	4313      	orrs	r3, r2
 80037c4:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd fdaa 	bl	8001330 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fd fda6 	bl	8001330 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e057      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x478>
 80037fe:	e04f      	b.n	80038a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fd90 	bl	8001330 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fd8c 	bl	8001330 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e03d      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x4ac>
 8003832:	e035      	b.n	80038a0 <HAL_RCC_OscConfig+0x538>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x544>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d028      	beq.n	800389c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d121      	bne.n	800389c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d11a      	bne.n	800389c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003872:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003874:	4293      	cmp	r3, r2
 8003876:	d111      	bne.n	800389c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	3b01      	subs	r3, #1
 8003886:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d107      	bne.n	800389c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800

080038b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 020f 	bic.w	r2, r3, #15
 80038de:	4965      	ldr	r1, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 800392e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a4:	f7fd fcc4 	bl	8001330 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fd fcc0 	bl	8001330 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 020f 	bic.w	r2, r3, #15
 80039ea:	4922      	ldr	r1, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1cc>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1d0>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1d4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd f868 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	080123a4 	.word	0x080123a4
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d007      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x32>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x38>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 80b4 	bne.w	8003c1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b5e      	ldr	r3, [pc, #376]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ab6:	60bb      	str	r3, [r7, #8]
      break;
 8003ab8:	e0b3      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aba:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003abc:	60bb      	str	r3, [r7, #8]
      break;
 8003abe:	e0b0      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac0:	4b5a      	ldr	r3, [pc, #360]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d04a      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	ea03 0501 	and.w	r5, r3, r1
 8003aec:	ea04 0602 	and.w	r6, r4, r2
 8003af0:	4629      	mov	r1, r5
 8003af2:	4632      	mov	r2, r6
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	0154      	lsls	r4, r2, #5
 8003afe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b02:	014b      	lsls	r3, r1, #5
 8003b04:	4619      	mov	r1, r3
 8003b06:	4622      	mov	r2, r4
 8003b08:	1b49      	subs	r1, r1, r5
 8003b0a:	eb62 0206 	sbc.w	r2, r2, r6
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f04f 0400 	mov.w	r4, #0
 8003b16:	0194      	lsls	r4, r2, #6
 8003b18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b1c:	018b      	lsls	r3, r1, #6
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	eb64 0402 	sbc.w	r4, r4, r2
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	00e2      	lsls	r2, r4, #3
 8003b2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b32:	00d9      	lsls	r1, r3, #3
 8003b34:	460b      	mov	r3, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	195b      	adds	r3, r3, r5
 8003b3a:	eb44 0406 	adc.w	r4, r4, r6
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	0262      	lsls	r2, r4, #9
 8003b48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b4c:	0259      	lsls	r1, r3, #9
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4614      	mov	r4, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	4621      	mov	r1, r4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f04f 0400 	mov.w	r4, #0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	f7fc fbae 	bl	80002c0 <__aeabi_uldivmod>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e049      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	f04f 0400 	mov.w	r4, #0
 8003b76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	ea03 0501 	and.w	r5, r3, r1
 8003b82:	ea04 0602 	and.w	r6, r4, r2
 8003b86:	4629      	mov	r1, r5
 8003b88:	4632      	mov	r2, r6
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f04f 0400 	mov.w	r4, #0
 8003b92:	0154      	lsls	r4, r2, #5
 8003b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b98:	014b      	lsls	r3, r1, #5
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	1b49      	subs	r1, r1, r5
 8003ba0:	eb62 0206 	sbc.w	r2, r2, r6
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	f04f 0400 	mov.w	r4, #0
 8003bac:	0194      	lsls	r4, r2, #6
 8003bae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bb2:	018b      	lsls	r3, r1, #6
 8003bb4:	1a5b      	subs	r3, r3, r1
 8003bb6:	eb64 0402 	sbc.w	r4, r4, r2
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	00e2      	lsls	r2, r4, #3
 8003bc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bc8:	00d9      	lsls	r1, r3, #3
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4614      	mov	r4, r2
 8003bce:	195b      	adds	r3, r3, r5
 8003bd0:	eb44 0406 	adc.w	r4, r4, r6
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	02a2      	lsls	r2, r4, #10
 8003bde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003be2:	0299      	lsls	r1, r3, #10
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	4621      	mov	r1, r4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f04f 0400 	mov.w	r4, #0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	f7fc fb63 	bl	80002c0 <__aeabi_uldivmod>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	60bb      	str	r3, [r7, #8]
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c1e:	60bb      	str	r3, [r7, #8]
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	68bb      	ldr	r3, [r7, #8]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	007a1200 	.word	0x007a1200

08003c38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000000 	.word	0x20000000

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c58:	4601      	mov	r1, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	080123b4 	.word	0x080123b4

08003c78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	220f      	movs	r2, #15
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_RCC_GetClockConfig+0x60>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d04:	4b69      	ldr	r3, [pc, #420]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a68      	ldr	r2, [pc, #416]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d0e:	6093      	str	r3, [r2, #8]
 8003d10:	4b66      	ldr	r3, [pc, #408]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	4964      	ldr	r1, [pc, #400]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d017      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	4959      	ldr	r1, [pc, #356]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d72:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	494a      	ldr	r1, [pc, #296]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d90:	d101      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 808b 	beq.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	4a39      	ldr	r2, [pc, #228]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6413      	str	r3, [r2, #64]	; 0x40
 8003dcc:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de4:	f7fd faa4 	bl	8001330 <HAL_GetTick>
 8003de8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd faa0 	bl	8001330 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e31e      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d035      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d02e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d114      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fa68 	bl	8001330 <HAL_GetTick>
 8003e60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	e00a      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e64:	f7fd fa64 	bl	8001330 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e2e0      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ee      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d111      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ea2:	400b      	ands	r3, r1
 8003ea4:	4901      	ldr	r1, [pc, #4]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	0ffffcff 	.word	0x0ffffcff
 8003eb8:	4bac      	ldr	r3, [pc, #688]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4aab      	ldr	r2, [pc, #684]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	4ba9      	ldr	r3, [pc, #676]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	49a6      	ldr	r1, [pc, #664]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee2:	4ba2      	ldr	r3, [pc, #648]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	4aa0      	ldr	r2, [pc, #640]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ef2:	4b9e      	ldr	r3, [pc, #632]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	499b      	ldr	r1, [pc, #620]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f10:	4b96      	ldr	r3, [pc, #600]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1e:	4993      	ldr	r1, [pc, #588]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f32:	4b8e      	ldr	r3, [pc, #568]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f40:	498a      	ldr	r1, [pc, #552]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f54:	4b85      	ldr	r3, [pc, #532]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	4982      	ldr	r1, [pc, #520]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f76:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4979      	ldr	r1, [pc, #484]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f98:	4b74      	ldr	r3, [pc, #464]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4971      	ldr	r1, [pc, #452]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f023 020c 	bic.w	r2, r3, #12
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	4968      	ldr	r1, [pc, #416]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fdc:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	4960      	ldr	r1, [pc, #384]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	4957      	ldr	r1, [pc, #348]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004020:	4b52      	ldr	r3, [pc, #328]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	494f      	ldr	r1, [pc, #316]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	4946      	ldr	r1, [pc, #280]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004064:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	493e      	ldr	r1, [pc, #248]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	4935      	ldr	r1, [pc, #212]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b6:	492d      	ldr	r1, [pc, #180]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d8:	4924      	ldr	r1, [pc, #144]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040fa:	4b1c      	ldr	r3, [pc, #112]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004108:	4918      	ldr	r1, [pc, #96]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412c:	490f      	ldr	r1, [pc, #60]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d005      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004142:	f040 80d8 	bne.w	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004152:	f7fd f8ed 	bl	8001330 <HAL_GetTick>
 8004156:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800415a:	f7fd f8e9 	bl	8001330 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b64      	cmp	r3, #100	; 0x64
 8004166:	d903      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e167      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800416c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	4bad      	ldr	r3, [pc, #692]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ee      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d021      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11d      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004190:	4ba5      	ldr	r3, [pc, #660]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800419e:	4ba2      	ldr	r3, [pc, #648]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a4:	0e1b      	lsrs	r3, r3, #24
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	019a      	lsls	r2, r3, #6
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	4998      	ldr	r1, [pc, #608]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f6:	d129      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f8:	4b8b      	ldr	r3, [pc, #556]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004206:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	0f1b      	lsrs	r3, r3, #28
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	019a      	lsls	r2, r3, #6
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	431a      	orrs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	071b      	lsls	r3, r3, #28
 800422c:	497e      	ldr	r1, [pc, #504]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004234:	4b7c      	ldr	r3, [pc, #496]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423a:	f023 021f 	bic.w	r2, r3, #31
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	3b01      	subs	r3, #1
 8004244:	4978      	ldr	r1, [pc, #480]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01d      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004258:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	0e1b      	lsrs	r3, r3, #24
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426c:	0f1b      	lsrs	r3, r3, #28
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	019a      	lsls	r2, r3, #6
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	071b      	lsls	r3, r3, #28
 800428c:	4966      	ldr	r1, [pc, #408]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	019a      	lsls	r2, r3, #6
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	071b      	lsls	r3, r3, #28
 80042bc:	495a      	ldr	r1, [pc, #360]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042c4:	4b58      	ldr	r3, [pc, #352]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a57      	ldr	r2, [pc, #348]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fd f82e 	bl	8001330 <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042d8:	f7fd f82a 	bl	8001330 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0a8      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ea:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 809e 	bne.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042fe:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a49      	ldr	r2, [pc, #292]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430a:	f7fd f811 	bl	8001330 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004312:	f7fd f80d 	bl	8001330 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e08b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800432c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004330:	d0ef      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02e      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d12a      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800435a:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004368:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	0f1b      	lsrs	r3, r3, #28
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	019a      	lsls	r2, r3, #6
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	4926      	ldr	r1, [pc, #152]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	491f      	ldr	r1, [pc, #124]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c4:	d11d      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	0e1b      	lsrs	r3, r3, #24
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	0f1b      	lsrs	r3, r3, #28
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	019a      	lsls	r2, r3, #6
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	490b      	ldr	r1, [pc, #44]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440e:	f7fc ff8f 	bl	8001330 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004416:	f7fc ff8b 	bl	8001330 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	; 0x64
 8004422:	d903      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e009      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004428:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004438:	d1ed      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800

08004448 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e022      	b.n	80044a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d105      	bne.n	8004472 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fc fa69 	bl	8000944 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2203      	movs	r2, #3
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f814 	bl	80044a8 <HAL_SD_InitCard>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e00a      	b.n	80044a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044a8:	b5b0      	push	{r4, r5, r7, lr}
 80044aa:	b08e      	sub	sp, #56	; 0x38
 80044ac:	af04      	add	r7, sp, #16
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80044c4:	2376      	movs	r3, #118	; 0x76
 80044c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681d      	ldr	r5, [r3, #0]
 80044cc:	466c      	mov	r4, sp
 80044ce:	f107 0314 	add.w	r3, r7, #20
 80044d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e0:	4628      	mov	r0, r5
 80044e2:	f001 fd0d 	bl	8005f00 <SDMMC_Init>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80044ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e03b      	b.n	8004570 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004506:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f001 fd41 	bl	8005f94 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 ffca 	bl	80054bc <SD_PowerON>
 8004528:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e013      	b.n	8004570 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fee9 	bl	8005320 <SD_InitCard>
 800454e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3728      	adds	r7, #40	; 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bdb0      	pop	{r4, r5, r7, pc}

08004578 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08c      	sub	sp, #48	; 0x30
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0cc      	b.n	800473a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 80c5 	bne.w	8004738 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	441a      	add	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d907      	bls.n	80045d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0b3      	b.n	800473a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2203      	movs	r2, #3
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a53      	ldr	r2, [pc, #332]	; (8004744 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	4a52      	ldr	r2, [pc, #328]	; (8004748 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004600:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2200      	movs	r2, #0
 8004608:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3380      	adds	r3, #128	; 0x80
 8004614:	4619      	mov	r1, r3
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	025b      	lsls	r3, r3, #9
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	f7fd f845 	bl	80016ac <HAL_DMA_Start_IT>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d017      	beq.n	8004658 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e070      	b.n	800473a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	025b      	lsls	r3, r3, #9
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fd1c 	bl	80060bc <SDMMC_CmdBlockLength>
 8004684:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2e      	ldr	r2, [pc, #184]	; (800474c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e046      	b.n	800473a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	025b      	lsls	r3, r3, #9
 80046b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80046b8:	2390      	movs	r3, #144	; 0x90
 80046ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80046bc:	2302      	movs	r3, #2
 80046be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f107 0210 	add.w	r2, r7, #16
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fcc6 	bl	8006064 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d90a      	bls.n	80046f4 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2282      	movs	r2, #130	; 0x82
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fd2a 	bl	8006144 <SDMMC_CmdReadMultiBlock>
 80046f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80046f2:	e009      	b.n	8004708 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2281      	movs	r2, #129	; 0x81
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004700:	4618      	mov	r0, r3
 8004702:	f001 fcfd 	bl	8006100 <SDMMC_CmdReadSingleBlock>
 8004706:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a0e      	ldr	r2, [pc, #56]	; (800474c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	431a      	orrs	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e002      	b.n	800473a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3730      	adds	r7, #48	; 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	0800512f 	.word	0x0800512f
 8004748:	080051a1 	.word	0x080051a1
 800474c:	004005ff 	.word	0x004005ff

08004750 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08c      	sub	sp, #48	; 0x30
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d107      	bne.n	8004778 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0cf      	b.n	8004918 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	f040 80c8 	bne.w	8004916 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800478c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	429a      	cmp	r2, r3
 8004798:	d907      	bls.n	80047aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0b6      	b.n	8004918 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2203      	movs	r2, #3
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 021a 	orr.w	r2, r2, #26
 80047c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80047d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	4a53      	ldr	r2, [pc, #332]	; (8004924 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80047d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2200      	movs	r2, #0
 80047e0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d002      	beq.n	80047f0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	025b      	lsls	r3, r3, #9
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fc5f 	bl	80060bc <SDMMC_CmdBlockLength>
 80047fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00f      	beq.n	8004826 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a47      	ldr	r2, [pc, #284]	; (8004928 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e078      	b.n	8004918 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d90a      	bls.n	8004842 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22a0      	movs	r2, #160	; 0xa0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fcc7 	bl	80061cc <SDMMC_CmdWriteMultiBlock>
 800483e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004840:	e009      	b.n	8004856 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2290      	movs	r2, #144	; 0x90
 8004846:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fc9a 	bl	8006188 <SDMMC_CmdWriteSingleBlock>
 8004854:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a31      	ldr	r2, [pc, #196]	; (8004928 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e04a      	b.n	8004918 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0208 	orr.w	r2, r2, #8
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3380      	adds	r3, #128	; 0x80
 800489e:	461a      	mov	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	025b      	lsls	r3, r3, #9
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	f7fc ff01 	bl	80016ac <HAL_DMA_Start_IT>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01a      	beq.n	80048e6 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 021a 	bic.w	r2, r2, #26
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e018      	b.n	8004918 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	025b      	lsls	r3, r3, #9
 80048f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80048f2:	2390      	movs	r3, #144	; 0x90
 80048f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80048fe:	2301      	movs	r3, #1
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f107 0210 	add.w	r2, r7, #16
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fba9 	bl	8006064 <SDMMC_ConfigData>

      return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3730      	adds	r7, #48	; 0x30
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08005105 	.word	0x08005105
 8004924:	080051a1 	.word	0x080051a1
 8004928:	004005ff 	.word	0x004005ff

0800492c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_SD_IRQHandler+0x2e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 ffc8 	bl	80058e8 <SD_Read_IT>
 8004958:	e153      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 808d 	beq.w	8004a84 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4ba3      	ldr	r3, [pc, #652]	; (8004c0c <HAL_SD_IRQHandler+0x2e0>)
 8004980:	400b      	ands	r3, r1
 8004982:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d039      	beq.n	8004a12 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_SD_IRQHandler+0x86>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d011      	beq.n	80049d6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fc2a 	bl	8006210 <SDMMC_CmdStopTransfer>
 80049bc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f921 	bl	8004c18 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f240 523a 	movw	r2, #1338	; 0x53a
 80049de:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <HAL_SD_IRQHandler+0xd6>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f003 fbac 	bl	8008160 <HAL_SD_RxCpltCallback>
 8004a08:	e0fb      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f003 fb9e 	bl	800814c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a10:	e0f7      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80f2 	beq.w	8004c02 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d011      	beq.n	8004a4c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 fbef 	bl	8006210 <SDMMC_CmdStopTransfer>
 8004a32:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8e6 	bl	8004c18 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 80d5 	bne.w	8004c02 <HAL_SD_IRQHandler+0x2d6>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 80cf 	bne.w	8004c02 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0208 	bic.w	r2, r2, #8
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f003 fb65 	bl	800814c <HAL_SD_TxCpltCallback>
}
 8004a82:	e0be      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_SD_IRQHandler+0x178>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 ff74 	bl	800598a <SD_Write_IT>
 8004aa2:	e0ae      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a7 	beq.w	8004c02 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	f043 0208 	orr.w	r2, r3, #8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	f043 0210 	orr.w	r2, r3, #16
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 fb68 	bl	8006210 <SDMMC_CmdStopTransfer>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f857 	bl	8004c18 <HAL_SD_ErrorCallback>
}
 8004b6a:	e04a      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d045      	beq.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_SD_IRQHandler+0x25e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d011      	beq.n	8004bae <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <HAL_SD_IRQHandler+0x2e4>)
 8004b90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fc fde8 	bl	800176c <HAL_DMA_Abort_IT>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d02f      	beq.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fb4c 	bl	8005244 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004bac:	e029      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_SD_IRQHandler+0x296>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d011      	beq.n	8004be6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <HAL_SD_IRQHandler+0x2e8>)
 8004bc8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fdcc 	bl	800176c <HAL_DMA_Abort_IT>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d013      	beq.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb67 	bl	80052b2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004be4:	e00d      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f003 fa9c 	bl	8008138 <HAL_SD_AbortCallback>
}
 8004c00:	e7ff      	b.n	8004c02 <HAL_SD_IRQHandler+0x2d6>
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	ffff3ec5 	.word	0xffff3ec5
 8004c10:	08005245 	.word	0x08005245
 8004c14:	080052b3 	.word	0x080052b3

08004c18 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3a:	0f9b      	lsrs	r3, r3, #30
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c46:	0e9b      	lsrs	r3, r3, #26
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8c:	0d1b      	lsrs	r3, r3, #20
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004caa:	0bdb      	lsrs	r3, r3, #15
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cbc:	0b9b      	lsrs	r3, r3, #14
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cce:	0b5b      	lsrs	r3, r3, #13
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ce0:	0b1b      	lsrs	r3, r3, #12
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d163      	bne.n	8004dc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d00:	009a      	lsls	r2, r3, #2
 8004d02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d06:	4013      	ands	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004d0c:	0f92      	lsrs	r2, r2, #30
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d18:	0edb      	lsrs	r3, r3, #27
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2a:	0e1b      	lsrs	r3, r3, #24
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3c:	0d5b      	lsrs	r3, r3, #21
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4e:	0c9b      	lsrs	r3, r3, #18
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	0bdb      	lsrs	r3, r3, #15
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	7e1b      	ldrb	r3, [r3, #24]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	3302      	adds	r3, #2
 8004d84:	2201      	movs	r2, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d8e:	fb02 f203 	mul.w	r2, r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	7a1b      	ldrb	r3, [r3, #8]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	2201      	movs	r2, #1
 8004da2:	409a      	lsls	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004db0:	0a52      	lsrs	r2, r2, #9
 8004db2:	fb02 f203 	mul.w	r2, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
 8004dc2:	e031      	b.n	8004e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d11d      	bne.n	8004e08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dda:	0c1b      	lsrs	r3, r3, #16
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	3301      	adds	r3, #1
 8004de8:	029a      	lsls	r2, r3, #10
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60
 8004e06:	e00f      	b.n	8004e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a58      	ldr	r2, [pc, #352]	; (8004f70 <HAL_SD_GetCardCSD+0x344>)
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e09d      	b.n	8004f64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2c:	0b9b      	lsrs	r3, r3, #14
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3e:	09db      	lsrs	r3, r3, #7
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	0fdb      	lsrs	r3, r3, #31
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	0f5b      	lsrs	r3, r3, #29
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	0d9b      	lsrs	r3, r3, #22
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	0d5b      	lsrs	r3, r3, #21
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	0bdb      	lsrs	r3, r3, #15
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	0b9b      	lsrs	r3, r3, #14
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	0b5b      	lsrs	r3, r3, #13
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	0b1b      	lsrs	r3, r3, #12
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	0a9b      	lsrs	r3, r3, #10
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	004005ff 	.word	0x004005ff

08004f74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004fcc:	b5b0      	push	{r4, r5, r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d02e      	beq.n	8005044 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d106      	bne.n	8004ffc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8004ffa:	e029      	b.n	8005050 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005002:	d10a      	bne.n	800501a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fb0f 	bl	8005628 <SD_WideBus_Enable>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
 8005018:	e01a      	b.n	8005050 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb4c 	bl	80056be <SD_WideBus_Disable>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
 8005034:	e00c      	b.n	8005050 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
 8005042:	e005      	b.n	8005050 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e024      	b.n	80050b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681d      	ldr	r5, [r3, #0]
 8005092:	466c      	mov	r4, sp
 8005094:	f107 0318 	add.w	r3, r7, #24
 8005098:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800509c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 ff2a 	bl	8005f00 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3728      	adds	r7, #40	; 0x28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bdb0      	pop	{r4, r5, r7, pc}
 80050be:	bf00      	nop
 80050c0:	004005ff 	.word	0x004005ff

080050c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80050d0:	f107 030c 	add.w	r3, r7, #12
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa7e 	bl	80055d8 <SD_SendStatus>
 80050dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0a5b      	lsrs	r3, r3, #9
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80050fa:	693b      	ldr	r3, [r7, #16]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005120:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	2b82      	cmp	r3, #130	; 0x82
 8005142:	d111      	bne.n	8005168 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f001 f861 	bl	8006210 <SDMMC_CmdStopTransfer>
 800514e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	431a      	orrs	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fd58 	bl	8004c18 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0208 	bic.w	r2, r2, #8
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005180:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f002 ffe5 	bl	8008160 <HAL_SD_RxCpltCallback>
#endif
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc fc88 	bl	8001ac4 <HAL_DMA_GetError>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d03e      	beq.n	8005238 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d002      	beq.n	80051d6 <SD_DMAError+0x36>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d12d      	bne.n	8005232 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a19      	ldr	r2, [pc, #100]	; (8005240 <SD_DMAError+0xa0>)
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80051ec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80051fa:	6978      	ldr	r0, [r7, #20]
 80051fc:	f7ff ff62 	bl	80050c4 <HAL_SD_GetCardState>
 8005200:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b06      	cmp	r3, #6
 8005206:	d002      	beq.n	800520e <SD_DMAError+0x6e>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d10a      	bne.n	8005224 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fffc 	bl	8006210 <SDMMC_CmdStopTransfer>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	431a      	orrs	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7ff fcf0 	bl	8004c18 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	004005ff 	.word	0x004005ff

08005244 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f240 523a 	movw	r2, #1338	; 0x53a
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff31 	bl	80050c4 <HAL_SD_GetCardState>
 8005262:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b06      	cmp	r3, #6
 8005276:	d002      	beq.n	800527e <SD_DMATxAbort+0x3a>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b05      	cmp	r3, #5
 800527c:	d10a      	bne.n	8005294 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 ffc4 	bl	8006210 <SDMMC_CmdStopTransfer>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	431a      	orrs	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f002 ff4b 	bl	8008138 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80052a2:	e002      	b.n	80052aa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fcb7 	bl	8004c18 <HAL_SD_ErrorCallback>
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fefa 	bl	80050c4 <HAL_SD_GetCardState>
 80052d0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d002      	beq.n	80052ec <SD_DMARxAbort+0x3a>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d10a      	bne.n	8005302 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 ff8d 	bl	8006210 <SDMMC_CmdStopTransfer>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f002 ff14 	bl	8008138 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005310:	e002      	b.n	8005318 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fc80 	bl	8004c18 <HAL_SD_ErrorCallback>
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b094      	sub	sp, #80	; 0x50
 8005324:	af04      	add	r7, sp, #16
 8005326:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005328:	2301      	movs	r3, #1
 800532a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fe3e 	bl	8005fb2 <SDMMC_GetPowerState>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800533c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005340:	e0b7      	b.n	80054b2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	2b03      	cmp	r3, #3
 8005348:	d02f      	beq.n	80053aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f001 f869 	bl	8006426 <SDMMC_CmdSendCID>
 8005354:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <SD_InitCard+0x40>
    {
      return errorstate;
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	e0a8      	b.n	80054b2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fe69 	bl	800603e <SDMMC_GetResponse>
 800536c:	4602      	mov	r2, r0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2104      	movs	r1, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fe60 	bl	800603e <SDMMC_GetResponse>
 800537e:	4602      	mov	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2108      	movs	r1, #8
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fe57 	bl	800603e <SDMMC_GetResponse>
 8005390:	4602      	mov	r2, r0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	210c      	movs	r1, #12
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fe4e 	bl	800603e <SDMMC_GetResponse>
 80053a2:	4602      	mov	r2, r0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d00d      	beq.n	80053ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f107 020e 	add.w	r2, r7, #14
 80053ba:	4611      	mov	r1, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 f86f 	bl	80064a0 <SDMMC_CmdSetRelAdd>
 80053c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <SD_InitCard+0xae>
    {
      return errorstate;
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	e071      	b.n	80054b2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d036      	beq.n	8005444 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80053d6:	89fb      	ldrh	r3, [r7, #14]
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f001 f839 	bl	8006462 <SDMMC_CmdSendCSD>
 80053f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80053f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fa:	e05a      	b.n	80054b2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fe1b 	bl	800603e <SDMMC_GetResponse>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2104      	movs	r1, #4
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fe12 	bl	800603e <SDMMC_GetResponse>
 800541a:	4602      	mov	r2, r0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2108      	movs	r1, #8
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fe09 	bl	800603e <SDMMC_GetResponse>
 800542c:	4602      	mov	r2, r0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	210c      	movs	r1, #12
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fe00 	bl	800603e <SDMMC_GetResponse>
 800543e:	4602      	mov	r2, r0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2104      	movs	r1, #4
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fdf7 	bl	800603e <SDMMC_GetResponse>
 8005450:	4603      	mov	r3, r0
 8005452:	0d1a      	lsrs	r2, r3, #20
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005458:	f107 0310 	add.w	r3, r7, #16
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fbe4 	bl	8004c2c <HAL_SD_GetCardCSD>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800546a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800546e:	e020      	b.n	80054b2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	f04f 0400 	mov.w	r4, #0
 800547e:	461a      	mov	r2, r3
 8005480:	4623      	mov	r3, r4
 8005482:	4608      	mov	r0, r1
 8005484:	f000 fee6 	bl	8006254 <SDMMC_CmdSelDesel>
 8005488:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <SD_InitCard+0x174>
  {
    return errorstate;
 8005490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005492:	e00e      	b.n	80054b2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681d      	ldr	r5, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	466c      	mov	r4, sp
 800549c:	f103 0210 	add.w	r2, r3, #16
 80054a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80054a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054a6:	3304      	adds	r3, #4
 80054a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 fd28 	bl	8005f00 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3740      	adds	r7, #64	; 0x40
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080054bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fee0 	bl	800629a <SDMMC_CmdGoIdleState>
 80054da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	e072      	b.n	80055cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fef3 	bl	80062d6 <SDMMC_CmdOperCond>
 80054f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00d      	beq.n	8005514 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fec9 	bl	800629a <SDMMC_CmdGoIdleState>
 8005508:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	e05b      	b.n	80055cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551e:	2b01      	cmp	r3, #1
 8005520:	d137      	bne.n	8005592 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fef3 	bl	8006314 <SDMMC_CmdAppCommand>
 800552e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02d      	beq.n	8005592 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800553a:	e047      	b.n	80055cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fee6 	bl	8006314 <SDMMC_CmdAppCommand>
 8005548:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <SD_PowerON+0x98>
    {
      return errorstate;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e03b      	b.n	80055cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	491e      	ldr	r1, [pc, #120]	; (80055d4 <SD_PowerON+0x118>)
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fefc 	bl	8006358 <SDMMC_CmdAppOperCommand>
 8005560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005568:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800556c:	e02e      	b.n	80055cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2100      	movs	r1, #0
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fd62 	bl	800603e <SDMMC_GetResponse>
 800557a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	0fdb      	lsrs	r3, r3, #31
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <SD_PowerON+0xcc>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <SD_PowerON+0xce>
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]

    count++;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	3301      	adds	r3, #1
 8005590:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005598:	4293      	cmp	r3, r2
 800559a:	d802      	bhi.n	80055a2 <SD_PowerON+0xe6>
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0cc      	beq.n	800553c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d902      	bls.n	80055b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80055ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055b0:	e00c      	b.n	80055cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
 80055c2:	e002      	b.n	80055ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	c1100000 	.word	0xc1100000

080055d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80055e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ec:	e018      	b.n	8005620 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 ff71 	bl	80064e2 <SDMMC_CmdSendStatus>
 8005600:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	e009      	b.n	8005620 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fd13 	bl	800603e <SDMMC_GetResponse>
 8005618:	4602      	mov	r2, r0
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fcfd 	bl	800603e <SDMMC_GetResponse>
 8005644:	4603      	mov	r3, r0
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800564e:	d102      	bne.n	8005656 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005654:	e02f      	b.n	80056b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005656:	f107 030c 	add.w	r3, r7, #12
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f879 	bl	8005754 <SD_FindSCR>
 8005662:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	e023      	b.n	80056b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01c      	beq.n	80056b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f000 fe45 	bl	8006314 <SDMMC_CmdAppCommand>
 800568a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	e00f      	b.n	80056b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2102      	movs	r1, #2
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fe7f 	bl	80063a0 <SDMMC_CmdBusWidth>
 80056a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e003      	b.n	80056b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e001      	b.n	80056b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b086      	sub	sp, #24
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fcb2 	bl	800603e <SDMMC_GetResponse>
 80056da:	4603      	mov	r3, r0
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e4:	d102      	bne.n	80056ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056ea:	e02f      	b.n	800574c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056ec:	f107 030c 	add.w	r3, r7, #12
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f82e 	bl	8005754 <SD_FindSCR>
 80056f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	e023      	b.n	800574c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01c      	beq.n	8005748 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f000 fdfa 	bl	8006314 <SDMMC_CmdAppCommand>
 8005720:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	e00f      	b.n	800574c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fe34 	bl	80063a0 <SDMMC_CmdBusWidth>
 8005738:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e003      	b.n	800574c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005744:	2300      	movs	r3, #0
 8005746:	e001      	b.n	800574c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005748:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b08f      	sub	sp, #60	; 0x3c
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800575e:	f7fb fde7 	bl	8001330 <HAL_GetTick>
 8005762:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2108      	movs	r1, #8
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fc9e 	bl	80060bc <SDMMC_CmdBlockLength>
 8005780:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	e0a9      	b.n	80058e0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f000 fdbb 	bl	8006314 <SDMMC_CmdAppCommand>
 800579e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	e09a      	b.n	80058e0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80057b0:	2308      	movs	r3, #8
 80057b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80057b4:	2330      	movs	r3, #48	; 0x30
 80057b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80057b8:	2302      	movs	r3, #2
 80057ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057bc:	2300      	movs	r3, #0
 80057be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f107 0210 	add.w	r2, r7, #16
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fc48 	bl	8006064 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fe03 	bl	80063e4 <SDMMC_CmdSendSCR>
 80057de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d022      	beq.n	800582c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	e07a      	b.n	80058e0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00e      	beq.n	8005816 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	f107 0208 	add.w	r2, r7, #8
 8005804:	18d4      	adds	r4, r2, r3
 8005806:	4608      	mov	r0, r1
 8005808:	f000 fba6 	bl	8005f58 <SDMMC_ReadFIFO>
 800580c:	4603      	mov	r3, r0
 800580e:	6023      	str	r3, [r4, #0]
      index++;
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	3301      	adds	r3, #1
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005816:	f7fb fd8b 	bl	8001330 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d102      	bne.n	800582c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005826:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800582a:	e059      	b.n	80058e0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005832:	f240 432a 	movw	r3, #1066	; 0x42a
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0d6      	beq.n	80057ea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2208      	movs	r2, #8
 8005850:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005852:	2308      	movs	r3, #8
 8005854:	e044      	b.n	80058e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2202      	movs	r2, #2
 800586a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800586c:	2302      	movs	r3, #2
 800586e:	e037      	b.n	80058e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2220      	movs	r2, #32
 8005884:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005886:	2320      	movs	r3, #32
 8005888:	e02a      	b.n	80058e0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005892:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	061a      	lsls	r2, r3, #24
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	0a1b      	lsrs	r3, r3, #8
 80058a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	0e1b      	lsrs	r3, r3, #24
 80058b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	601a      	str	r2, [r3, #0]
    scr++;
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	3304      	adds	r3, #4
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	061a      	lsls	r2, r3, #24
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	0e1b      	lsrs	r3, r3, #24
 80058d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	373c      	adds	r7, #60	; 0x3c
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d03f      	beq.n	8005982 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e033      	b.n	8005970 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fb23 	bl	8005f58 <SDMMC_ReadFIFO>
 8005912:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	3b01      	subs	r3, #1
 8005926:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b2da      	uxtb	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3b01      	subs	r3, #1
 800593c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3b01      	subs	r3, #1
 8005952:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0e1b      	lsrs	r3, r3, #24
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3b01      	subs	r3, #1
 8005968:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	3301      	adds	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b07      	cmp	r3, #7
 8005974:	d9c8      	bls.n	8005908 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005982:	bf00      	nop
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d043      	beq.n	8005a2c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e037      	b.n	8005a1a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	021a      	lsls	r2, r3, #8
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	041a      	lsls	r2, r3, #16
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	061a      	lsls	r2, r3, #24
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f107 0208 	add.w	r2, r7, #8
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 faaf 	bl	8005f72 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3301      	adds	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b07      	cmp	r3, #7
 8005a1e:	d9c4      	bls.n	80059aa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e01d      	b.n	8005a82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f815 	bl	8005a8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 f986 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_TIM_Base_Start_IT+0x50>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_TIM_Base_Start_IT+0x42>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d007      	beq.n	8005ae2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0201 	orr.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	00010007 	.word	0x00010007

08005af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0202 	mvn.w	r2, #2
 8005b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f905 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8f7 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f908 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d122      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0204 	mvn.w	r2, #4
 8005b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f8db 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 8005b90:	e005      	b.n	8005b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f8cd 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f8de 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d122      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0208 	mvn.w	r2, #8
 8005bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f8b1 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 8005be4:	e005      	b.n	8005bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8a3 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f8b4 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d122      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d11b      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0210 	mvn.w	r2, #16
 8005c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2208      	movs	r2, #8
 8005c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f887 	bl	8005d46 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f879 	bl	8005d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f88a 	bl	8005d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0201 	mvn.w	r2, #1
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fa fe24 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f91a 	bl	8005ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f90d 	bl	8005eec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d10e      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f838 	bl	8005d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0220 	mvn.w	r2, #32
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8cd 	bl	8005ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a40      	ldr	r2, [pc, #256]	; (8005e98 <TIM_Base_SetConfig+0x114>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a3d      	ldr	r2, [pc, #244]	; (8005e9c <TIM_Base_SetConfig+0x118>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3c      	ldr	r2, [pc, #240]	; (8005ea0 <TIM_Base_SetConfig+0x11c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3b      	ldr	r2, [pc, #236]	; (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3a      	ldr	r2, [pc, #232]	; (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d108      	bne.n	8005dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <TIM_Base_SetConfig+0x114>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de4:	d027      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <TIM_Base_SetConfig+0x118>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d023      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <TIM_Base_SetConfig+0x11c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01f      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d017      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a28      	ldr	r2, [pc, #160]	; (8005eac <TIM_Base_SetConfig+0x128>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a26      	ldr	r2, [pc, #152]	; (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a25      	ldr	r2, [pc, #148]	; (8005eb8 <TIM_Base_SetConfig+0x134>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a24      	ldr	r2, [pc, #144]	; (8005ebc <TIM_Base_SetConfig+0x138>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a23      	ldr	r2, [pc, #140]	; (8005ec0 <TIM_Base_SetConfig+0x13c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <TIM_Base_SetConfig+0x114>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_Base_SetConfig+0xf8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0c      	ldr	r2, [pc, #48]	; (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d103      	bne.n	8005e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	615a      	str	r2, [r3, #20]
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40010400 	.word	0x40010400
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800
 8005eb8:	40001800 	.word	0x40001800
 8005ebc:	40001c00 	.word	0x40001c00
 8005ec0:	40002000 	.word	0x40002000

08005ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005f00:	b084      	sub	sp, #16
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	f107 001c 	add.w	r0, r7, #28
 8005f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005f16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005f18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005f1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005f1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005f22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005f26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005f2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <SDMMC_Init+0x54>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	b004      	add	sp, #16
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	ffff8100 	.word	0xffff8100

08005f58 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005fa2:	2002      	movs	r0, #2
 8005fa4:	f7fb f9d0 	bl	8001348 <HAL_Delay>
  
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005fee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ff4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005ffa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <SDMMC_SendCommand+0x50>)
 8006008:	4013      	ands	r3, r2
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	fffff000 	.word	0xfffff000

08006024 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	b2db      	uxtb	r3, r3
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3314      	adds	r3, #20
 800604c:	461a      	mov	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	4413      	add	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
}  
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800608a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006090:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006096:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0

}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80060ca:	2310      	movs	r3, #16
 80060cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060ce:	2340      	movs	r3, #64	; 0x40
 80060d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060dc:	f107 0308 	add.w	r3, r7, #8
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff ff74 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	2110      	movs	r1, #16
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa42 	bl	8006578 <SDMMC_GetCmdResp1>
 80060f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060f6:	69fb      	ldr	r3, [r7, #28]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800610e:	2311      	movs	r3, #17
 8006110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800611a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff ff52 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800612c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006130:	2111      	movs	r1, #17
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa20 	bl	8006578 <SDMMC_GetCmdResp1>
 8006138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800613a:	69fb      	ldr	r3, [r7, #28]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006152:	2312      	movs	r3, #18
 8006154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006156:	2340      	movs	r3, #64	; 0x40
 8006158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800615e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006164:	f107 0308 	add.w	r3, r7, #8
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff ff30 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	2112      	movs	r1, #18
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9fe 	bl	8006578 <SDMMC_GetCmdResp1>
 800617c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800617e:	69fb      	ldr	r3, [r7, #28]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006196:	2318      	movs	r3, #24
 8006198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff ff0e 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80061b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b8:	2118      	movs	r1, #24
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9dc 	bl	8006578 <SDMMC_GetCmdResp1>
 80061c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061c2:	69fb      	ldr	r3, [r7, #28]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80061da:	2319      	movs	r3, #25
 80061dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061de:	2340      	movs	r3, #64	; 0x40
 80061e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061ec:	f107 0308 	add.w	r3, r7, #8
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff feec 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80061f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061fc:	2119      	movs	r1, #25
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f9ba 	bl	8006578 <SDMMC_GetCmdResp1>
 8006204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006206:	69fb      	ldr	r3, [r7, #28]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3720      	adds	r7, #32
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800621c:	230c      	movs	r3, #12
 800621e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff fecb 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800623a:	4a05      	ldr	r2, [pc, #20]	; (8006250 <SDMMC_CmdStopTransfer+0x40>)
 800623c:	210c      	movs	r1, #12
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f99a 	bl	8006578 <SDMMC_GetCmdResp1>
 8006244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006246:	69fb      	ldr	r3, [r7, #28]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	05f5e100 	.word	0x05f5e100

08006254 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006264:	2307      	movs	r3, #7
 8006266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006268:	2340      	movs	r3, #64	; 0x40
 800626a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006274:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006276:	f107 0310 	add.w	r3, r7, #16
 800627a:	4619      	mov	r1, r3
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff fea7 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	2107      	movs	r1, #7
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f975 	bl	8006578 <SDMMC_GetCmdResp1>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006292:	4618      	mov	r0, r3
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fe86 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f92f 	bl	8006528 <SDMMC_GetCmdError>
 80062ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062cc:	69fb      	ldr	r3, [r7, #28]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3720      	adds	r7, #32
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80062de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80062e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80062e4:	2308      	movs	r3, #8
 80062e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fe67 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fb18 	bl	8006938 <SDMMC_GetCmdResp7>
 8006308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800630a:	69fb      	ldr	r3, [r7, #28]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006322:	2337      	movs	r3, #55	; 0x37
 8006324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006326:	2340      	movs	r3, #64	; 0x40
 8006328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800632e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006334:	f107 0308 	add.w	r3, r7, #8
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fe48 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006340:	f241 3288 	movw	r2, #5000	; 0x1388
 8006344:	2137      	movs	r1, #55	; 0x37
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f916 	bl	8006578 <SDMMC_GetCmdResp1>
 800634c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800634e:	69fb      	ldr	r3, [r7, #28]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	4b0d      	ldr	r3, [pc, #52]	; (800639c <SDMMC_CmdAppOperCommand+0x44>)
 8006366:	4313      	orrs	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800636a:	2329      	movs	r3, #41	; 0x29
 800636c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800636e:	2340      	movs	r3, #64	; 0x40
 8006370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800637a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800637c:	f107 0308 	add.w	r3, r7, #8
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff fe24 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fa27 	bl	80067dc <SDMMC_GetCmdResp3>
 800638e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006390:	69fb      	ldr	r3, [r7, #28]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	80100000 	.word	0x80100000

080063a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80063ae:	2306      	movs	r3, #6
 80063b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063b2:	2340      	movs	r3, #64	; 0x40
 80063b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fe02 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	2106      	movs	r1, #6
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8d0 	bl	8006578 <SDMMC_GetCmdResp1>
 80063d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063da:	69fb      	ldr	r3, [r7, #28]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3720      	adds	r7, #32
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80063f0:	2333      	movs	r3, #51	; 0x33
 80063f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063f4:	2340      	movs	r3, #64	; 0x40
 80063f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006400:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006402:	f107 0308 	add.w	r3, r7, #8
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fde1 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800640e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006412:	2133      	movs	r1, #51	; 0x33
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8af 	bl	8006578 <SDMMC_GetCmdResp1>
 800641a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800641c:	69fb      	ldr	r3, [r7, #28]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b088      	sub	sp, #32
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006432:	2302      	movs	r3, #2
 8006434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006436:	23c0      	movs	r3, #192	; 0xc0
 8006438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800643e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006444:	f107 0308 	add.w	r3, r7, #8
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fdc0 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f97d 	bl	8006750 <SDMMC_GetCmdResp2>
 8006456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006458:	69fb      	ldr	r3, [r7, #28]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b088      	sub	sp, #32
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006470:	2309      	movs	r3, #9
 8006472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006474:	23c0      	movs	r3, #192	; 0xc0
 8006476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800647c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006480:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fda1 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f95e 	bl	8006750 <SDMMC_GetCmdResp2>
 8006494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006496:	69fb      	ldr	r3, [r7, #28]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80064ae:	2303      	movs	r3, #3
 80064b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064c0:	f107 0308 	add.w	r3, r7, #8
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fd82 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	2103      	movs	r1, #3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f9bd 	bl	8006850 <SDMMC_GetCmdResp6>
 80064d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064d8:	69fb      	ldr	r3, [r7, #28]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b088      	sub	sp, #32
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80064f0:	230d      	movs	r3, #13
 80064f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064f4:	2340      	movs	r3, #64	; 0x40
 80064f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006500:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006502:	f107 0308 	add.w	r3, r7, #8
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fd61 	bl	8005fd0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800650e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006512:	210d      	movs	r1, #13
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f82f 	bl	8006578 <SDMMC_GetCmdResp1>
 800651a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800651c:	69fb      	ldr	r3, [r7, #28]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006528:	b490      	push	{r4, r7}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <SDMMC_GetCmdError+0x48>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <SDMMC_GetCmdError+0x4c>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	0a5b      	lsrs	r3, r3, #9
 800653c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006540:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006544:	4623      	mov	r3, r4
 8006546:	1e5c      	subs	r4, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800654c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006550:	e009      	b.n	8006566 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f2      	beq.n	8006544 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	22c5      	movs	r2, #197	; 0xc5
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bc90      	pop	{r4, r7}
 800656e:	4770      	bx	lr
 8006570:	20000000 	.word	0x20000000
 8006574:	10624dd3 	.word	0x10624dd3

08006578 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006578:	b590      	push	{r4, r7, lr}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	460b      	mov	r3, r1
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006586:	4b6f      	ldr	r3, [pc, #444]	; (8006744 <SDMMC_GetCmdResp1+0x1cc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6f      	ldr	r2, [pc, #444]	; (8006748 <SDMMC_GetCmdResp1+0x1d0>)
 800658c:	fba2 2303 	umull	r2, r3, r2, r3
 8006590:	0a5b      	lsrs	r3, r3, #9
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006598:	4623      	mov	r3, r4
 800659a:	1e5c      	subs	r4, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a4:	e0c9      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <SDMMC_GetCmdResp1+0x20>
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1eb      	bne.n	8006598 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2204      	movs	r2, #4
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065d2:	2304      	movs	r3, #4
 80065d4:	e0b1      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0a6      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	22c5      	movs	r2, #197	; 0xc5
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fd16 	bl	8006024 <SDMMC_GetCommandResponse>
 80065f8:	4603      	mov	r3, r0
 80065fa:	461a      	mov	r2, r3
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d001      	beq.n	8006606 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006602:	2301      	movs	r3, #1
 8006604:	e099      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006606:	2100      	movs	r1, #0
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fd18 	bl	800603e <SDMMC_GetResponse>
 800660e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4b4e      	ldr	r3, [pc, #312]	; (800674c <SDMMC_GetCmdResp1+0x1d4>)
 8006614:	4013      	ands	r3, r2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800661a:	2300      	movs	r3, #0
 800661c:	e08d      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	da02      	bge.n	800662a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006624:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006628:	e087      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	e080      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	e079      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006654:	e071      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006664:	e069      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006674:	e061      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006684:	e059      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006694:	e051      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066a4:	e049      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80066b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066b4:	e041      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80066c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c4:	e039      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80066d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066d4:	e031      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80066e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066e4:	e029      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80066f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066f4:	e021      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006700:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006704:	e019      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006714:	e011      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006720:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006724:	e009      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006730:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006734:	e001      	b.n	800673a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	bf00      	nop
 8006744:	20000000 	.word	0x20000000
 8006748:	10624dd3 	.word	0x10624dd3
 800674c:	fdffe008 	.word	0xfdffe008

08006750 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006750:	b490      	push	{r4, r7}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <SDMMC_GetCmdResp2+0x84>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <SDMMC_GetCmdResp2+0x88>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0a5b      	lsrs	r3, r3, #9
 8006764:	f241 3288 	movw	r2, #5000	; 0x1388
 8006768:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800676c:	4623      	mov	r3, r4
 800676e:	1e5c      	subs	r4, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006778:	e026      	b.n	80067c8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <SDMMC_GetCmdResp2+0x1c>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1eb      	bne.n	800676c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2204      	movs	r2, #4
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067a6:	2304      	movs	r3, #4
 80067a8:	e00e      	b.n	80067c8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067bc:	2301      	movs	r3, #1
 80067be:	e003      	b.n	80067c8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	22c5      	movs	r2, #197	; 0xc5
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc90      	pop	{r4, r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000000 	.word	0x20000000
 80067d8:	10624dd3 	.word	0x10624dd3

080067dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80067dc:	b490      	push	{r4, r7}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067e4:	4b18      	ldr	r3, [pc, #96]	; (8006848 <SDMMC_GetCmdResp3+0x6c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a18      	ldr	r2, [pc, #96]	; (800684c <SDMMC_GetCmdResp3+0x70>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0a5b      	lsrs	r3, r3, #9
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80067f8:	4623      	mov	r3, r4
 80067fa:	1e5c      	subs	r4, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006804:	e01b      	b.n	800683e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <SDMMC_GetCmdResp3+0x1c>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1eb      	bne.n	80067f8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2204      	movs	r2, #4
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006832:	2304      	movs	r3, #4
 8006834:	e003      	b.n	800683e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	22c5      	movs	r2, #197	; 0xc5
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bc90      	pop	{r4, r7}
 8006846:	4770      	bx	lr
 8006848:	20000000 	.word	0x20000000
 800684c:	10624dd3 	.word	0x10624dd3

08006850 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	460b      	mov	r3, r1
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800685e:	4b34      	ldr	r3, [pc, #208]	; (8006930 <SDMMC_GetCmdResp6+0xe0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a34      	ldr	r2, [pc, #208]	; (8006934 <SDMMC_GetCmdResp6+0xe4>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	0a5b      	lsrs	r3, r3, #9
 800686a:	f241 3288 	movw	r2, #5000	; 0x1388
 800686e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006872:	4623      	mov	r3, r4
 8006874:	1e5c      	subs	r4, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800687a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800687e:	e052      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <SDMMC_GetCmdResp6+0x22>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1eb      	bne.n	8006872 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2204      	movs	r2, #4
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068ac:	2304      	movs	r3, #4
 80068ae:	e03a      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e02f      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fbac 	bl	8006024 <SDMMC_GetCommandResponse>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d001      	beq.n	80068da <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e025      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	22c5      	movs	r2, #197	; 0xc5
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80068e0:	2100      	movs	r1, #0
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fbab 	bl	800603e <SDMMC_GetResponse>
 80068e8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80068fe:	2300      	movs	r3, #0
 8006900:	e011      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800690c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006910:	e009      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800691c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006920:	e001      	b.n	8006926 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	20000000 	.word	0x20000000
 8006934:	10624dd3 	.word	0x10624dd3

08006938 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006938:	b490      	push	{r4, r7}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006940:	4b21      	ldr	r3, [pc, #132]	; (80069c8 <SDMMC_GetCmdResp7+0x90>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a21      	ldr	r2, [pc, #132]	; (80069cc <SDMMC_GetCmdResp7+0x94>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	0a5b      	lsrs	r3, r3, #9
 800694c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006950:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006954:	4623      	mov	r3, r4
 8006956:	1e5c      	subs	r4, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800695c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006960:	e02c      	b.n	80069bc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <SDMMC_GetCmdResp7+0x1c>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1eb      	bne.n	8006954 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2204      	movs	r2, #4
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800698e:	2304      	movs	r3, #4
 8006990:	e014      	b.n	80069bc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e009      	b.n	80069bc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2240      	movs	r2, #64	; 0x40
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80069ba:	2300      	movs	r3, #0
  
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc90      	pop	{r4, r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000000 	.word	0x20000000
 80069cc:	10624dd3 	.word	0x10624dd3

080069d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069d0:	b084      	sub	sp, #16
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	f107 001c 	add.w	r0, r7, #28
 80069de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d120      	bne.n	8006a2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <USB_CoreInit+0xac>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d105      	bne.n	8006a1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fac4 	bl	8007fac <USB_CoreReset>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
 8006a28:	e010      	b.n	8006a4c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fab8 	bl	8007fac <USB_CoreReset>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d10b      	bne.n	8006a6a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f043 0206 	orr.w	r2, r3, #6
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a76:	b004      	add	sp, #16
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	ffbdffbf 	.word	0xffbdffbf

08006a80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d165      	bne.n	8006b60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4a41      	ldr	r2, [pc, #260]	; (8006b9c <USB_SetTurnaroundTime+0x11c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d906      	bls.n	8006aaa <USB_SetTurnaroundTime+0x2a>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4a40      	ldr	r2, [pc, #256]	; (8006ba0 <USB_SetTurnaroundTime+0x120>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d802      	bhi.n	8006aaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006aa4:	230f      	movs	r3, #15
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e062      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <USB_SetTurnaroundTime+0x120>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d906      	bls.n	8006ac0 <USB_SetTurnaroundTime+0x40>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4a3b      	ldr	r2, [pc, #236]	; (8006ba4 <USB_SetTurnaroundTime+0x124>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d802      	bhi.n	8006ac0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006aba:	230e      	movs	r3, #14
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e057      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a38      	ldr	r2, [pc, #224]	; (8006ba4 <USB_SetTurnaroundTime+0x124>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d906      	bls.n	8006ad6 <USB_SetTurnaroundTime+0x56>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4a37      	ldr	r2, [pc, #220]	; (8006ba8 <USB_SetTurnaroundTime+0x128>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d802      	bhi.n	8006ad6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ad0:	230d      	movs	r3, #13
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e04c      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4a33      	ldr	r2, [pc, #204]	; (8006ba8 <USB_SetTurnaroundTime+0x128>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d906      	bls.n	8006aec <USB_SetTurnaroundTime+0x6c>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4a32      	ldr	r2, [pc, #200]	; (8006bac <USB_SetTurnaroundTime+0x12c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d802      	bhi.n	8006aec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e041      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a2f      	ldr	r2, [pc, #188]	; (8006bac <USB_SetTurnaroundTime+0x12c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d906      	bls.n	8006b02 <USB_SetTurnaroundTime+0x82>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4a2e      	ldr	r2, [pc, #184]	; (8006bb0 <USB_SetTurnaroundTime+0x130>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d802      	bhi.n	8006b02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006afc:	230b      	movs	r3, #11
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e036      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <USB_SetTurnaroundTime+0x130>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d906      	bls.n	8006b18 <USB_SetTurnaroundTime+0x98>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4a29      	ldr	r2, [pc, #164]	; (8006bb4 <USB_SetTurnaroundTime+0x134>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d802      	bhi.n	8006b18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b12:	230a      	movs	r3, #10
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e02b      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <USB_SetTurnaroundTime+0x134>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d906      	bls.n	8006b2e <USB_SetTurnaroundTime+0xae>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a25      	ldr	r2, [pc, #148]	; (8006bb8 <USB_SetTurnaroundTime+0x138>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d802      	bhi.n	8006b2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b28:	2309      	movs	r3, #9
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e020      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a21      	ldr	r2, [pc, #132]	; (8006bb8 <USB_SetTurnaroundTime+0x138>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d906      	bls.n	8006b44 <USB_SetTurnaroundTime+0xc4>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4a20      	ldr	r2, [pc, #128]	; (8006bbc <USB_SetTurnaroundTime+0x13c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d802      	bhi.n	8006b44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b3e:	2308      	movs	r3, #8
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	e015      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <USB_SetTurnaroundTime+0x13c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d906      	bls.n	8006b5a <USB_SetTurnaroundTime+0xda>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <USB_SetTurnaroundTime+0x140>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d802      	bhi.n	8006b5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b54:	2307      	movs	r3, #7
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e00a      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b5a:	2306      	movs	r3, #6
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e007      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b66:	2309      	movs	r3, #9
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	e001      	b.n	8006b70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b6c:	2309      	movs	r3, #9
 8006b6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	00d8acbf 	.word	0x00d8acbf
 8006ba0:	00e4e1bf 	.word	0x00e4e1bf
 8006ba4:	00f423ff 	.word	0x00f423ff
 8006ba8:	0106737f 	.word	0x0106737f
 8006bac:	011a499f 	.word	0x011a499f
 8006bb0:	01312cff 	.word	0x01312cff
 8006bb4:	014ca43f 	.word	0x014ca43f
 8006bb8:	016e35ff 	.word	0x016e35ff
 8006bbc:	01a6ab1f 	.word	0x01a6ab1f
 8006bc0:	01e847ff 	.word	0x01e847ff

08006bc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f043 0201 	orr.w	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d106      	bne.n	8006c34 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60da      	str	r2, [r3, #12]
 8006c32:	e00b      	b.n	8006c4c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	e001      	b.n	8006c4c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e003      	b.n	8006c54 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c4c:	2032      	movs	r0, #50	; 0x32
 8006c4e:	f7fa fb7b 	bl	8001348 <HAL_Delay>

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e009      	b.n	8006c90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3340      	adds	r3, #64	; 0x40
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b0e      	cmp	r3, #14
 8006c94:	d9f2      	bls.n	8006c7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11c      	bne.n	8006cd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006caa:	f043 0302 	orr.w	r3, r3, #2
 8006cae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e005      	b.n	8006ce2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce8:	461a      	mov	r2, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	680b      	ldr	r3, [r1, #0]
 8006d00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10c      	bne.n	8006d22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f959 	bl	8006fc8 <USB_SetDevSpeed>
 8006d16:	e018      	b.n	8006d4a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d18:	2101      	movs	r1, #1
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f954 	bl	8006fc8 <USB_SetDevSpeed>
 8006d20:	e013      	b.n	8006d4a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d10c      	bne.n	8006d42 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d2e:	2100      	movs	r1, #0
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f949 	bl	8006fc8 <USB_SetDevSpeed>
 8006d36:	e008      	b.n	8006d4a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d38:	2101      	movs	r1, #1
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f944 	bl	8006fc8 <USB_SetDevSpeed>
 8006d40:	e003      	b.n	8006d4a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d42:	2103      	movs	r1, #3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f93f 	bl	8006fc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d4a:	2110      	movs	r1, #16
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8f3 	bl	8006f38 <USB_FlushTxFifo>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f911 	bl	8006f84 <USB_FlushRxFifo>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	461a      	mov	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	e043      	b.n	8006e1e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dac:	d118      	bne.n	8006de0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	e013      	b.n	8006df2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e008      	b.n	8006df2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dec:	461a      	mov	r2, r3
 8006dee:	2300      	movs	r3, #0
 8006df0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2300      	movs	r3, #0
 8006e02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	461a      	mov	r2, r3
 8006e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d3b7      	bcc.n	8006d96 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	e043      	b.n	8006eb4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e42:	d118      	bne.n	8006e76 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	461a      	mov	r2, r3
 8006e58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e013      	b.n	8006e88 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	e008      	b.n	8006e88 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e82:	461a      	mov	r2, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	461a      	mov	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d3b7      	bcc.n	8006e2c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ece:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006edc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	f043 0210 	orr.w	r2, r3, #16
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <USB_DevInit+0x2d4>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f043 0208 	orr.w	r2, r3, #8
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d105      	bne.n	8006f20 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <USB_DevInit+0x2d8>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2c:	b004      	add	sp, #16
 8006f2e:	4770      	bx	lr
 8006f30:	803c3800 	.word	0x803c3800
 8006f34:	40000004 	.word	0x40000004

08006f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	f043 0220 	orr.w	r2, r3, #32
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <USB_FlushTxFifo+0x48>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d901      	bls.n	8006f64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e006      	b.n	8006f72 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d0f0      	beq.n	8006f52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	00030d40 	.word	0x00030d40

08006f84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2210      	movs	r2, #16
 8006f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <USB_FlushRxFifo+0x40>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d901      	bls.n	8006fa8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e006      	b.n	8006fb6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d0f0      	beq.n	8006f96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	00030d40 	.word	0x00030d40

08006fc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 0306 	and.w	r3, r3, #6
 8007012:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
 800701e:	e00a      	b.n	8007036 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d002      	beq.n	800702c <USB_GetDevSpeed+0x32>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b06      	cmp	r3, #6
 800702a:	d102      	bne.n	8007032 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800702c:	2302      	movs	r3, #2
 800702e:	75fb      	strb	r3, [r7, #23]
 8007030:	e001      	b.n	8007036 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007032:	230f      	movs	r3, #15
 8007034:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d139      	bne.n	80070d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	2101      	movs	r1, #1
 8007072:	fa01 f303 	lsl.w	r3, r1, r3
 8007076:	b29b      	uxth	r3, r3
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800707e:	4313      	orrs	r3, r2
 8007080:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d153      	bne.n	8007140 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	78db      	ldrb	r3, [r3, #3]
 80070b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	059b      	lsls	r3, r3, #22
 80070ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070bc:	431a      	orrs	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	0159      	lsls	r1, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	440b      	add	r3, r1
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	4619      	mov	r1, r3
 80070cc:	4b20      	ldr	r3, [pc, #128]	; (8007150 <USB_ActivateEndpoint+0x10c>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	600b      	str	r3, [r1, #0]
 80070d2:	e035      	b.n	8007140 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	68f9      	ldr	r1, [r7, #12]
 80070ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f2:	4313      	orrs	r3, r2
 80070f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d119      	bne.n	8007140 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	78db      	ldrb	r3, [r3, #3]
 8007126:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007128:	430b      	orrs	r3, r1
 800712a:	431a      	orrs	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	0159      	lsls	r1, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	440b      	add	r3, r1
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	4619      	mov	r1, r3
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <USB_ActivateEndpoint+0x10c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	10008000 	.word	0x10008000

08007154 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d161      	bne.n	8007234 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007186:	d11f      	bne.n	80071c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	440a      	add	r2, r1
 800719e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	b29b      	uxth	r3, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e8:	4013      	ands	r3, r2
 80071ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007202:	b29b      	uxth	r3, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800720c:	4013      	ands	r3, r2
 800720e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	0159      	lsls	r1, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	440b      	add	r3, r1
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	4619      	mov	r1, r3
 800722c:	4b35      	ldr	r3, [pc, #212]	; (8007304 <USB_DeactivateEndpoint+0x1b0>)
 800722e:	4013      	ands	r3, r2
 8007230:	600b      	str	r3, [r1, #0]
 8007232:	e060      	b.n	80072f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800724a:	d11f      	bne.n	800728c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800726a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	440a      	add	r2, r1
 8007282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800728a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	2101      	movs	r1, #1
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	43db      	mvns	r3, r3
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ac:	4013      	ands	r3, r2
 80072ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	2101      	movs	r1, #1
 80072c2:	fa01 f303 	lsl.w	r3, r1, r3
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	43db      	mvns	r3, r3
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d0:	4013      	ands	r3, r2
 80072d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	0159      	lsls	r1, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	440b      	add	r3, r1
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	4619      	mov	r1, r3
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <USB_DeactivateEndpoint+0x1b4>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	ec337800 	.word	0xec337800
 8007308:	eff37800 	.word	0xeff37800

0800730c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	; 0x28
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4613      	mov	r3, r2
 8007318:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b01      	cmp	r3, #1
 800732a:	f040 8163 	bne.w	80075f4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d132      	bne.n	800739c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	0159      	lsls	r1, r3, #5
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	440b      	add	r3, r1
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	4619      	mov	r1, r3
 8007352:	4ba5      	ldr	r3, [pc, #660]	; (80075e8 <USB_EPStartXfer+0x2dc>)
 8007354:	4013      	ands	r3, r2
 8007356:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	0159      	lsls	r1, r3, #5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	440b      	add	r3, r1
 800738e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007392:	4619      	mov	r1, r3
 8007394:	4b95      	ldr	r3, [pc, #596]	; (80075ec <USB_EPStartXfer+0x2e0>)
 8007396:	4013      	ands	r3, r2
 8007398:	610b      	str	r3, [r1, #16]
 800739a:	e074      	b.n	8007486 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	0159      	lsls	r1, r3, #5
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	440b      	add	r3, r1
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	4619      	mov	r1, r3
 80073b8:	4b8c      	ldr	r3, [pc, #560]	; (80075ec <USB_EPStartXfer+0x2e0>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	0159      	lsls	r1, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	440b      	add	r3, r1
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	4619      	mov	r1, r3
 80073da:	4b83      	ldr	r3, [pc, #524]	; (80075e8 <USB_EPStartXfer+0x2dc>)
 80073dc:	4013      	ands	r3, r2
 80073de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6959      	ldr	r1, [r3, #20]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	440b      	add	r3, r1
 80073f8:	1e59      	subs	r1, r3, #1
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007402:	04d9      	lsls	r1, r3, #19
 8007404:	4b7a      	ldr	r3, [pc, #488]	; (80075f0 <USB_EPStartXfer+0x2e4>)
 8007406:	400b      	ands	r3, r1
 8007408:	69b9      	ldr	r1, [r7, #24]
 800740a:	0148      	lsls	r0, r1, #5
 800740c:	69f9      	ldr	r1, [r7, #28]
 800740e:	4401      	add	r1, r0
 8007410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007414:	4313      	orrs	r3, r2
 8007416:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742e:	69b9      	ldr	r1, [r7, #24]
 8007430:	0148      	lsls	r0, r1, #5
 8007432:	69f9      	ldr	r1, [r7, #28]
 8007434:	4401      	add	r1, r0
 8007436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800743a:	4313      	orrs	r3, r2
 800743c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	78db      	ldrb	r3, [r3, #3]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d11f      	bne.n	8007486 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d14b      	bne.n	8007524 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	461a      	mov	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	78db      	ldrb	r3, [r3, #3]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d128      	bne.n	8007502 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d110      	bne.n	80074e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	e00f      	b.n	8007502 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e133      	b.n	800778c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d015      	beq.n	8007578 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 811b 	beq.w	800778c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	2101      	movs	r1, #1
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	69f9      	ldr	r1, [r7, #28]
 800756e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007572:	4313      	orrs	r3, r2
 8007574:	634b      	str	r3, [r1, #52]	; 0x34
 8007576:	e109      	b.n	800778c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d110      	bne.n	80075aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	e00f      	b.n	80075ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	68d9      	ldr	r1, [r3, #12]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	b298      	uxth	r0, r3
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4603      	mov	r3, r0
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fa38 	bl	8007a54 <USB_WritePacket>
 80075e4:	e0d2      	b.n	800778c <USB_EPStartXfer+0x480>
 80075e6:	bf00      	nop
 80075e8:	e007ffff 	.word	0xe007ffff
 80075ec:	fff80000 	.word	0xfff80000
 80075f0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	0159      	lsls	r1, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	440b      	add	r3, r1
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	4619      	mov	r1, r3
 8007610:	4b61      	ldr	r3, [pc, #388]	; (8007798 <USB_EPStartXfer+0x48c>)
 8007612:	4013      	ands	r3, r2
 8007614:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	0159      	lsls	r1, r3, #5
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	440b      	add	r3, r1
 800762c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007630:	4619      	mov	r1, r3
 8007632:	4b5a      	ldr	r3, [pc, #360]	; (800779c <USB_EPStartXfer+0x490>)
 8007634:	4013      	ands	r3, r2
 8007636:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d123      	bne.n	8007688 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007656:	69b9      	ldr	r1, [r7, #24]
 8007658:	0148      	lsls	r0, r1, #5
 800765a:	69f9      	ldr	r1, [r7, #28]
 800765c:	4401      	add	r1, r0
 800765e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007662:	4313      	orrs	r3, r2
 8007664:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007684:	6113      	str	r3, [r2, #16]
 8007686:	e033      	b.n	80076f0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4413      	add	r3, r2
 8007692:	1e5a      	subs	r2, r3, #1
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	fbb2 f3f3 	udiv	r3, r2, r3
 800769c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	8afb      	ldrh	r3, [r7, #22]
 80076ae:	04d9      	lsls	r1, r3, #19
 80076b0:	4b3b      	ldr	r3, [pc, #236]	; (80077a0 <USB_EPStartXfer+0x494>)
 80076b2:	400b      	ands	r3, r1
 80076b4:	69b9      	ldr	r1, [r7, #24]
 80076b6:	0148      	lsls	r0, r1, #5
 80076b8:	69f9      	ldr	r1, [r7, #28]
 80076ba:	4401      	add	r1, r0
 80076bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c0:	4313      	orrs	r3, r2
 80076c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	8af9      	ldrh	r1, [r7, #22]
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	0148      	lsls	r0, r1, #5
 80076e4:	69f9      	ldr	r1, [r7, #28]
 80076e6:	4401      	add	r1, r0
 80076e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076ec:	4313      	orrs	r3, r2
 80076ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d10d      	bne.n	8007712 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68d9      	ldr	r1, [r3, #12]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770e:	460a      	mov	r2, r1
 8007710:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d128      	bne.n	800776c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d110      	bne.n	800774c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	440a      	add	r2, r1
 8007740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007744:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e00f      	b.n	800776c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800776a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007786:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800778a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3720      	adds	r7, #32
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	fff80000 	.word	0xfff80000
 800779c:	e007ffff 	.word	0xe007ffff
 80077a0:	1ff80000 	.word	0x1ff80000

080077a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	f040 80cd 	bne.w	8007960 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d132      	bne.n	8007834 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	0159      	lsls	r1, r3, #5
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	440b      	add	r3, r1
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	4619      	mov	r1, r3
 80077ea:	4b98      	ldr	r3, [pc, #608]	; (8007a4c <USB_EP0StartXfer+0x2a8>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800780e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	0159      	lsls	r1, r3, #5
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	440b      	add	r3, r1
 8007826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782a:	4619      	mov	r1, r3
 800782c:	4b88      	ldr	r3, [pc, #544]	; (8007a50 <USB_EP0StartXfer+0x2ac>)
 800782e:	4013      	ands	r3, r2
 8007830:	610b      	str	r3, [r1, #16]
 8007832:	e04e      	b.n	80078d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	691a      	ldr	r2, [r3, #16]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	0159      	lsls	r1, r3, #5
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	440b      	add	r3, r1
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	4619      	mov	r1, r3
 8007850:	4b7f      	ldr	r3, [pc, #508]	; (8007a50 <USB_EP0StartXfer+0x2ac>)
 8007852:	4013      	ands	r3, r2
 8007854:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	0159      	lsls	r1, r3, #5
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	440b      	add	r3, r1
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	4619      	mov	r1, r3
 8007872:	4b76      	ldr	r3, [pc, #472]	; (8007a4c <USB_EP0StartXfer+0x2a8>)
 8007874:	4013      	ands	r3, r2
 8007876:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	429a      	cmp	r2, r3
 8007882:	d903      	bls.n	800788c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c2:	6939      	ldr	r1, [r7, #16]
 80078c4:	0148      	lsls	r0, r1, #5
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	4401      	add	r1, r0
 80078ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078ce:	4313      	orrs	r3, r2
 80078d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d11e      	bne.n	8007916 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	461a      	mov	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e092      	b.n	8007a3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	440a      	add	r2, r1
 800792c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007934:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d07e      	beq.n	8007a3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	2101      	movs	r1, #1
 8007950:	fa01 f303 	lsl.w	r3, r1, r3
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800795a:	4313      	orrs	r3, r2
 800795c:	634b      	str	r3, [r1, #52]	; 0x34
 800795e:	e06d      	b.n	8007a3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	0159      	lsls	r1, r3, #5
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	440b      	add	r3, r1
 8007976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797a:	4619      	mov	r1, r3
 800797c:	4b34      	ldr	r3, [pc, #208]	; (8007a50 <USB_EP0StartXfer+0x2ac>)
 800797e:	4013      	ands	r3, r2
 8007980:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	0159      	lsls	r1, r3, #5
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	440b      	add	r3, r1
 8007998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799c:	4619      	mov	r1, r3
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <USB_EP0StartXfer+0x2a8>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ea:	6939      	ldr	r1, [r7, #16]
 80079ec:	0148      	lsls	r0, r1, #5
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	4401      	add	r1, r0
 80079f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079f6:	4313      	orrs	r3, r2
 80079f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10d      	bne.n	8007a1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	68d9      	ldr	r1, [r3, #12]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	460a      	mov	r2, r1
 8007a1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	e007ffff 	.word	0xe007ffff
 8007a50:	fff80000 	.word	0xfff80000

08007a54 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	; 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4611      	mov	r1, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	460b      	mov	r3, r1
 8007a64:	71fb      	strb	r3, [r7, #7]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d11a      	bne.n	8007ab0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a7a:	88bb      	ldrh	r3, [r7, #4]
 8007a7c:	3303      	adds	r3, #3
 8007a7e:	089b      	lsrs	r3, r3, #2
 8007a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a82:	2300      	movs	r3, #0
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	e00f      	b.n	8007aa8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	031a      	lsls	r2, r3, #12
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a94:	461a      	mov	r2, r3
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3eb      	bcc.n	8007a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b089      	sub	sp, #36	; 0x24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ad4:	88fb      	ldrh	r3, [r7, #6]
 8007ad6:	3303      	adds	r3, #3
 8007ad8:	089b      	lsrs	r3, r3, #2
 8007ada:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007adc:	2300      	movs	r3, #0
 8007ade:	61bb      	str	r3, [r7, #24]
 8007ae0:	e00b      	b.n	8007afa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	601a      	str	r2, [r3, #0]
    pDest++;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	3304      	adds	r3, #4
 8007af2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	3301      	adds	r3, #1
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3ef      	bcc.n	8007ae2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007b02:	69fb      	ldr	r3, [r7, #28]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3724      	adds	r7, #36	; 0x24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d12c      	bne.n	8007b86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db12      	blt.n	8007b64 <USB_EPSetStall+0x54>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e02b      	b.n	8007bde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db12      	blt.n	8007bbe <USB_EPSetStall+0xae>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d128      	bne.n	8007c5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	78db      	ldrb	r3, [r3, #3]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d003      	beq.n	8007c38 <USB_EPClearStall+0x4c>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d138      	bne.n	8007caa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e027      	b.n	8007caa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	0151      	lsls	r1, r2, #5
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	440a      	add	r2, r1
 8007c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	78db      	ldrb	r3, [r3, #3]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d003      	beq.n	8007c8a <USB_EPClearStall+0x9e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	78db      	ldrb	r3, [r3, #3]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d10f      	bne.n	8007caa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cec:	68f9      	ldr	r1, [r7, #12]
 8007cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d1e:	f023 0302 	bic.w	r3, r3, #2
 8007d22:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d24:	2003      	movs	r0, #3
 8007d26:	f7f9 fb0f 	bl	8001348 <HAL_Delay>

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4e:	f043 0302 	orr.w	r3, r3, #2
 8007d52:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d54:	2003      	movs	r0, #3
 8007d56:	f7f9 faf7 	bl	8001348 <HAL_Delay>

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	4013      	ands	r3, r2
 8007dac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	0c1b      	lsrs	r3, r3, #16
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	b29b      	uxth	r3, r3
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e20:	68bb      	ldr	r3, [r7, #8]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	01db      	lsls	r3, r3, #7
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	f003 0301 	and.w	r3, r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4b09      	ldr	r3, [pc, #36]	; (8007eec <USB_ActivateSetup+0x44>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	fffff800 	.word	0xfffff800

08007ef0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	333c      	adds	r3, #60	; 0x3c
 8007f06:	3304      	adds	r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <USB_EP0_OutStart+0xb8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d90a      	bls.n	8007f2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f24:	d101      	bne.n	8007f2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e037      	b.n	8007f9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	461a      	mov	r2, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f58:	f043 0318 	orr.w	r3, r3, #24
 8007f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d10f      	bne.n	8007f98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	4f54300a 	.word	0x4f54300a

08007fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <USB_CoreReset+0x64>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d901      	bls.n	8007fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e01b      	b.n	8008002 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	daf2      	bge.n	8007fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f043 0201 	orr.w	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4a09      	ldr	r2, [pc, #36]	; (8008010 <USB_CoreReset+0x64>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d901      	bls.n	8007ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e006      	b.n	8008002 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d0f0      	beq.n	8007fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	00030d40 	.word	0x00030d40

08008014 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <MX_FATFS_Init+0x18>)
 800801a:	4805      	ldr	r0, [pc, #20]	; (8008030 <MX_FATFS_Init+0x1c>)
 800801c:	f004 fd8e 	bl	800cb3c <FATFS_LinkDriver>
 8008020:	4603      	mov	r3, r0
 8008022:	461a      	mov	r2, r3
 8008024:	4b03      	ldr	r3, [pc, #12]	; (8008034 <MX_FATFS_Init+0x20>)
 8008026:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}
 800802c:	2000834c 	.word	0x2000834c
 8008030:	080123c4 	.word	0x080123c4
 8008034:	20008348 	.word	0x20008348

08008038 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800803c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800803e:	4618      	mov	r0, r3
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008052:	f000 f896 	bl	8008182 <BSP_SD_IsDetected>
 8008056:	4603      	mov	r3, r0
 8008058:	2b01      	cmp	r3, #1
 800805a:	d001      	beq.n	8008060 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800805c:	2302      	movs	r3, #2
 800805e:	e012      	b.n	8008086 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008060:	480b      	ldr	r0, [pc, #44]	; (8008090 <BSP_SD_Init+0x48>)
 8008062:	f7fc f9f1 	bl	8004448 <HAL_SD_Init>
 8008066:	4603      	mov	r3, r0
 8008068:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008074:	4806      	ldr	r0, [pc, #24]	; (8008090 <BSP_SD_Init+0x48>)
 8008076:	f7fc ffa9 	bl	8004fcc <HAL_SD_ConfigWideBusOperation>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008084:	79fb      	ldrb	r3, [r7, #7]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20004b6c 	.word	0x20004b6c

08008094 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	4806      	ldr	r0, [pc, #24]	; (80080c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80080ac:	f7fc fa64 	bl	8004578 <HAL_SD_ReadBlocks_DMA>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20004b6c 	.word	0x20004b6c

080080c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	4806      	ldr	r0, [pc, #24]	; (80080f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80080e0:	f7fc fb36 	bl	8004750 <HAL_SD_WriteBlocks_DMA>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20004b6c 	.word	0x20004b6c

080080fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008100:	4805      	ldr	r0, [pc, #20]	; (8008118 <BSP_SD_GetCardState+0x1c>)
 8008102:	f7fc ffdf 	bl	80050c4 <HAL_SD_GetCardState>
 8008106:	4603      	mov	r3, r0
 8008108:	2b04      	cmp	r3, #4
 800810a:	bf14      	ite	ne
 800810c:	2301      	movne	r3, #1
 800810e:	2300      	moveq	r3, #0
 8008110:	b2db      	uxtb	r3, r3
}
 8008112:	4618      	mov	r0, r3
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20004b6c 	.word	0x20004b6c

0800811c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4803      	ldr	r0, [pc, #12]	; (8008134 <BSP_SD_GetCardInfo+0x18>)
 8008128:	f7fc ff24 	bl	8004f74 <HAL_SD_GetCardInfo>
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20004b6c 	.word	0x20004b6c

08008138 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008140:	f000 f818 	bl	8008174 <BSP_SD_AbortCallback>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008154:	f000 f998 	bl	8008488 <BSP_SD_WriteCpltCallback>
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008168:	f000 f9a0 	bl	80084ac <BSP_SD_ReadCpltCallback>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0

}
 8008178:	bf00      	nop
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008188:	2301      	movs	r3, #1
 800818a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	b2db      	uxtb	r3, r3
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80081a4:	f004 fdb4 	bl	800cd10 <osKernelGetTickCount>
 80081a8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80081aa:	e006      	b.n	80081ba <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081ac:	f7ff ffa6 	bl	80080fc <BSP_SD_GetCardState>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e009      	b.n	80081ce <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80081ba:	f004 fda9 	bl	800cd10 <osKernelGetTickCount>
 80081be:	4602      	mov	r2, r0
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d8f0      	bhi.n	80081ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80081e2:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <SD_CheckStatus+0x38>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081e8:	f7ff ff88 	bl	80080fc <BSP_SD_GetCardState>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d107      	bne.n	8008202 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <SD_CheckStatus+0x38>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	4b04      	ldr	r3, [pc, #16]	; (8008210 <SD_CheckStatus+0x38>)
 8008200:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008202:	4b03      	ldr	r3, [pc, #12]	; (8008210 <SD_CheckStatus+0x38>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000009 	.word	0x20000009

08008214 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800821e:	4b1c      	ldr	r3, [pc, #112]	; (8008290 <SD_initialize+0x7c>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008224:	f004 fd1c 	bl	800cc60 <osKernelGetState>
 8008228:	4603      	mov	r3, r0
 800822a:	2b02      	cmp	r3, #2
 800822c:	d129      	bne.n	8008282 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800822e:	f7ff ff0b 	bl	8008048 <BSP_SD_Init>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d107      	bne.n	8008248 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff ffcc 	bl	80081d8 <SD_CheckStatus>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
 8008244:	4b12      	ldr	r3, [pc, #72]	; (8008290 <SD_initialize+0x7c>)
 8008246:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008248:	4b11      	ldr	r3, [pc, #68]	; (8008290 <SD_initialize+0x7c>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d017      	beq.n	8008282 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <SD_initialize+0x80>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800825a:	2200      	movs	r2, #0
 800825c:	2102      	movs	r1, #2
 800825e:	200a      	movs	r0, #10
 8008260:	f005 f92c 	bl	800d4bc <osMessageQueueNew>
 8008264:	4602      	mov	r2, r0
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <SD_initialize+0x80>)
 8008268:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <SD_initialize+0x80>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d107      	bne.n	8008282 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <SD_initialize+0x7c>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f043 0301 	orr.w	r3, r3, #1
 800827c:	b2da      	uxtb	r2, r3
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <SD_initialize+0x7c>)
 8008280:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008282:	4b03      	ldr	r3, [pc, #12]	; (8008290 <SD_initialize+0x7c>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b2db      	uxtb	r3, r3
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000009 	.word	0x20000009
 8008294:	20000218 	.word	0x20000218

08008298 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ff97 	bl	80081d8 <SD_CheckStatus>
 80082aa:	4603      	mov	r3, r0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80082c8:	f247 5030 	movw	r0, #30000	; 0x7530
 80082cc:	f7ff ff66 	bl	800819c <SD_CheckStatusWithTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	da01      	bge.n	80082da <SD_read+0x26>
  {
    return res;
 80082d6:	7ffb      	ldrb	r3, [r7, #31]
 80082d8:	e02f      	b.n	800833a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	68b8      	ldr	r0, [r7, #8]
 80082e0:	f7ff fed8 	bl	8008094 <BSP_SD_ReadBlocks_DMA>
 80082e4:	4603      	mov	r3, r0
 80082e6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80082e8:	7fbb      	ldrb	r3, [r7, #30]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d124      	bne.n	8008338 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <SD_read+0x90>)
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f107 0112 	add.w	r1, r7, #18
 80082f6:	f247 5330 	movw	r3, #30000	; 0x7530
 80082fa:	2200      	movs	r2, #0
 80082fc:	f005 f9d8 	bl	800d6b0 <osMessageQueueGet>
 8008300:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d117      	bne.n	8008338 <SD_read+0x84>
 8008308:	8a7b      	ldrh	r3, [r7, #18]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d114      	bne.n	8008338 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800830e:	f004 fcff 	bl	800cd10 <osKernelGetTickCount>
 8008312:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008314:	e007      	b.n	8008326 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008316:	f7ff fef1 	bl	80080fc <BSP_SD_GetCardState>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <SD_read+0x72>
              {
                res = RES_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008324:	e008      	b.n	8008338 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008326:	f004 fcf3 	bl	800cd10 <osKernelGetTickCount>
 800832a:	4602      	mov	r2, r0
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	f247 522f 	movw	r2, #29999	; 0x752f
 8008334:	4293      	cmp	r3, r2
 8008336:	d9ee      	bls.n	8008316 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008338:	7ffb      	ldrb	r3, [r7, #31]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000218 	.word	0x20000218

08008348 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800835c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008360:	f7ff ff1c 	bl	800819c <SD_CheckStatusWithTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	da01      	bge.n	800836e <SD_write+0x26>
  {
    return res;
 800836a:	7ffb      	ldrb	r3, [r7, #31]
 800836c:	e02d      	b.n	80083ca <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	68b8      	ldr	r0, [r7, #8]
 8008374:	f7ff fea8 	bl	80080c8 <BSP_SD_WriteBlocks_DMA>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d124      	bne.n	80083c8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <SD_write+0x8c>)
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f107 0112 	add.w	r1, r7, #18
 8008386:	f247 5330 	movw	r3, #30000	; 0x7530
 800838a:	2200      	movs	r2, #0
 800838c:	f005 f990 	bl	800d6b0 <osMessageQueueGet>
 8008390:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d117      	bne.n	80083c8 <SD_write+0x80>
 8008398:	8a7b      	ldrh	r3, [r7, #18]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d114      	bne.n	80083c8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800839e:	f004 fcb7 	bl	800cd10 <osKernelGetTickCount>
 80083a2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083a4:	e007      	b.n	80083b6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083a6:	f7ff fea9 	bl	80080fc <BSP_SD_GetCardState>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <SD_write+0x6e>
          {
            res = RES_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	77fb      	strb	r3, [r7, #31]
            break;
 80083b4:	e008      	b.n	80083c8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083b6:	f004 fcab 	bl	800cd10 <osKernelGetTickCount>
 80083ba:	4602      	mov	r2, r0
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f247 522f 	movw	r2, #29999	; 0x752f
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d9ee      	bls.n	80083a6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80083c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000218 	.word	0x20000218

080083d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08c      	sub	sp, #48	; 0x30
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	603a      	str	r2, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
 80083e4:	460b      	mov	r3, r1
 80083e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80083ee:	4b25      	ldr	r3, [pc, #148]	; (8008484 <SD_ioctl+0xac>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <SD_ioctl+0x28>
 80083fc:	2303      	movs	r3, #3
 80083fe:	e03c      	b.n	800847a <SD_ioctl+0xa2>

  switch (cmd)
 8008400:	79bb      	ldrb	r3, [r7, #6]
 8008402:	2b03      	cmp	r3, #3
 8008404:	d834      	bhi.n	8008470 <SD_ioctl+0x98>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <SD_ioctl+0x34>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	0800841d 	.word	0x0800841d
 8008410:	08008425 	.word	0x08008425
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008457 	.word	0x08008457
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008422:	e028      	b.n	8008476 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008424:	f107 030c 	add.w	r3, r7, #12
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff fe77 	bl	800811c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800842e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800843a:	e01c      	b.n	8008476 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff fe6b 	bl	800811c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	b29a      	uxth	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008454:	e00f      	b.n	8008476 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fe5e 	bl	800811c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	0a5a      	lsrs	r2, r3, #9
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800846e:	e002      	b.n	8008476 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008470:	2304      	movs	r3, #4
 8008472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800847a:	4618      	mov	r0, r3
 800847c:	3730      	adds	r7, #48	; 0x30
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000009 	.word	0x20000009

08008488 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800848e:	2302      	movs	r3, #2
 8008490:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <BSP_SD_WriteCpltCallback+0x20>)
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	1db9      	adds	r1, r7, #6
 8008498:	2300      	movs	r3, #0
 800849a:	2200      	movs	r2, #0
 800849c:	f005 f894 	bl	800d5c8 <osMessageQueuePut>
#endif
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000218 	.word	0x20000218

080084ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80084b2:	2301      	movs	r3, #1
 80084b4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084b6:	4b05      	ldr	r3, [pc, #20]	; (80084cc <BSP_SD_ReadCpltCallback+0x20>)
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	1db9      	adds	r1, r7, #6
 80084bc:	2300      	movs	r3, #0
 80084be:	2200      	movs	r2, #0
 80084c0:	f005 f882 	bl	800d5c8 <osMessageQueuePut>
#endif
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000218 	.word	0x20000218

080084d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084e0:	f009 f846 	bl	8011570 <malloc>
 80084e4:	4603      	mov	r3, r0
 80084e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80084f6:	2302      	movs	r3, #2
 80084f8:	e066      	b.n	80085c8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7c1b      	ldrb	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d119      	bne.n	800853e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800850a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800850e:	2202      	movs	r2, #2
 8008510:	2181      	movs	r1, #129	; 0x81
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f008 fe5f 	bl	80111d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800851e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008522:	2202      	movs	r2, #2
 8008524:	2101      	movs	r1, #1
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f008 fe55 	bl	80111d6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2210      	movs	r2, #16
 8008538:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800853c:	e016      	b.n	800856c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800853e:	2340      	movs	r3, #64	; 0x40
 8008540:	2202      	movs	r2, #2
 8008542:	2181      	movs	r1, #129	; 0x81
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f008 fe46 	bl	80111d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	2202      	movs	r2, #2
 8008554:	2101      	movs	r1, #1
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f008 fe3d 	bl	80111d6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2210      	movs	r2, #16
 8008568:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800856c:	2308      	movs	r3, #8
 800856e:	2203      	movs	r2, #3
 8008570:	2182      	movs	r1, #130	; 0x82
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f008 fe2f 	bl	80111d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7c1b      	ldrb	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ac:	2101      	movs	r1, #1
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f008 ff00 	bl	80113b4 <USBD_LL_PrepareReceive>
 80085b4:	e007      	b.n	80085c6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	2101      	movs	r1, #1
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f008 fef7 	bl	80113b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085e0:	2181      	movs	r1, #129	; 0x81
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f008 fe1d 	bl	8011222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085ee:	2101      	movs	r1, #1
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f008 fe16 	bl	8011222 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80085fe:	2182      	movs	r1, #130	; 0x82
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f008 fe0e 	bl	8011222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00e      	beq.n	800863e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008630:	4618      	mov	r0, r3
 8008632:	f008 ffa5 	bl	8011580 <free>
    pdev->pClassData = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008658:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800866e:	2b00      	cmp	r3, #0
 8008670:	d03a      	beq.n	80086e8 <USBD_CDC_Setup+0xa0>
 8008672:	2b20      	cmp	r3, #32
 8008674:	f040 8097 	bne.w	80087a6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	88db      	ldrh	r3, [r3, #6]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d029      	beq.n	80086d4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b25b      	sxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	da11      	bge.n	80086ae <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008696:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	88d2      	ldrh	r2, [r2, #6]
 800869c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800869e:	6939      	ldr	r1, [r7, #16]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	88db      	ldrh	r3, [r3, #6]
 80086a4:	461a      	mov	r2, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fac7 	bl	8009c3a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80086ac:	e082      	b.n	80087b4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	785a      	ldrb	r2, [r3, #1]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	88db      	ldrh	r3, [r3, #6]
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086c4:	6939      	ldr	r1, [r7, #16]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	88db      	ldrh	r3, [r3, #6]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 fae0 	bl	8009c92 <USBD_CtlPrepareRx>
    break;
 80086d2:	e06f      	b.n	80087b4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	7850      	ldrb	r0, [r2, #1]
 80086e0:	2200      	movs	r2, #0
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	4798      	blx	r3
    break;
 80086e6:	e065      	b.n	80087b4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	2b0b      	cmp	r3, #11
 80086ee:	d84f      	bhi.n	8008790 <USBD_CDC_Setup+0x148>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_CDC_Setup+0xb0>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008729 	.word	0x08008729
 80086fc:	0800879f 	.word	0x0800879f
 8008700:	08008791 	.word	0x08008791
 8008704:	08008791 	.word	0x08008791
 8008708:	08008791 	.word	0x08008791
 800870c:	08008791 	.word	0x08008791
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008791 	.word	0x08008791
 8008720:	08008751 	.word	0x08008751
 8008724:	08008779 	.word	0x08008779
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872e:	2b03      	cmp	r3, #3
 8008730:	d107      	bne.n	8008742 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	2202      	movs	r2, #2
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fa7d 	bl	8009c3a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008740:	e030      	b.n	80087a4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 fa07 	bl	8009b58 <USBD_CtlError>
        ret = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	75fb      	strb	r3, [r7, #23]
      break;
 800874e:	e029      	b.n	80087a4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008756:	2b03      	cmp	r3, #3
 8008758:	d107      	bne.n	800876a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800875a:	f107 030f 	add.w	r3, r7, #15
 800875e:	2201      	movs	r2, #1
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fa69 	bl	8009c3a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008768:	e01c      	b.n	80087a4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f9f3 	bl	8009b58 <USBD_CtlError>
        ret = USBD_FAIL;
 8008772:	2303      	movs	r3, #3
 8008774:	75fb      	strb	r3, [r7, #23]
      break;
 8008776:	e015      	b.n	80087a4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877e:	2b03      	cmp	r3, #3
 8008780:	d00f      	beq.n	80087a2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f9e7 	bl	8009b58 <USBD_CtlError>
        ret = USBD_FAIL;
 800878a:	2303      	movs	r3, #3
 800878c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800878e:	e008      	b.n	80087a2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 f9e0 	bl	8009b58 <USBD_CtlError>
      ret = USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	75fb      	strb	r3, [r7, #23]
      break;
 800879c:	e002      	b.n	80087a4 <USBD_CDC_Setup+0x15c>
      break;
 800879e:	bf00      	nop
 80087a0:	e008      	b.n	80087b4 <USBD_CDC_Setup+0x16c>
      break;
 80087a2:	bf00      	nop
    }
    break;
 80087a4:	e006      	b.n	80087b4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f9d5 	bl	8009b58 <USBD_CtlError>
    ret = USBD_FAIL;
 80087ae:	2303      	movs	r3, #3
 80087b0:	75fb      	strb	r3, [r7, #23]
    break;
 80087b2:	bf00      	nop
  }

  return (uint8_t)ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop

080087c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087de:	2303      	movs	r3, #3
 80087e0:	e049      	b.n	8008876 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	3318      	adds	r3, #24
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d029      	beq.n	8008854 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	3318      	adds	r3, #24
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	78f9      	ldrb	r1, [r7, #3]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	460b      	mov	r3, r1
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	1a5b      	subs	r3, r3, r1
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4403      	add	r3, r0
 8008820:	3344      	adds	r3, #68	; 0x44
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	fbb2 f1f3 	udiv	r1, r2, r3
 8008828:	fb03 f301 	mul.w	r3, r3, r1
 800882c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800882e:	2b00      	cmp	r3, #0
 8008830:	d110      	bne.n	8008854 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	3318      	adds	r3, #24
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008846:	78f9      	ldrb	r1, [r7, #3]
 8008848:	2300      	movs	r3, #0
 800884a:	2200      	movs	r2, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f008 fd90 	bl	8011372 <USBD_LL_Transmit>
 8008852:	e00f      	b.n	8008874 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008890:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	e015      	b.n	80088cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f008 fda6 	bl	80113f6 <USBD_LL_GetRxDataSize>
 80088aa:	4602      	mov	r2, r0
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088c6:	4611      	mov	r1, r2
 80088c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088e2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d015      	beq.n	800891a <USBD_CDC_EP0_RxReady+0x46>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80088f4:	2bff      	cmp	r3, #255	; 0xff
 80088f6:	d010      	beq.n	800891a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008906:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800890e:	b292      	uxth	r2, r2
 8008910:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	22ff      	movs	r2, #255	; 0xff
 8008916:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2243      	movs	r2, #67	; 0x43
 8008930:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008932:	4b03      	ldr	r3, [pc, #12]	; (8008940 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	20000094 	.word	0x20000094

08008944 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2243      	movs	r2, #67	; 0x43
 8008950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008952:	4b03      	ldr	r3, [pc, #12]	; (8008960 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20000050 	.word	0x20000050

08008964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2243      	movs	r2, #67	; 0x43
 8008970:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008972:	4b03      	ldr	r3, [pc, #12]	; (8008980 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	200000d8 	.word	0x200000d8

08008984 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	220a      	movs	r2, #10
 8008990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008992:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	2000000c 	.word	0x2000000c

080089a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e004      	b.n	80089c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b087      	sub	sp, #28
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a10:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e01a      	b.n	8008a80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d114      	bne.n	8008a7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a72:	2181      	movs	r1, #129	; 0x81
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f008 fc7c 	bl	8011372 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e016      	b.n	8008ad4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	7c1b      	ldrb	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f008 fc7a 	bl	80113b4 <USBD_LL_PrepareReceive>
 8008ac0:	e007      	b.n	8008ad2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	2101      	movs	r1, #1
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f008 fc71 	bl	80113b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e025      	b.n	8008b40 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	79fa      	ldrb	r2, [r7, #7]
 8008b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f008 fae7 	bl	8011108 <USBD_LL_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e010      	b.n	8008b82 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	f107 020e 	add.w	r2, r7, #14
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	4602      	mov	r2, r0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f008 fb04 	bl	80111a0 <USBD_LL_Start>
 8008b98:	4603      	mov	r3, r0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
  }

  return USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 ff56 	bl	8009ae4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d00e      	beq.n	8008c7a <USBD_LL_SetupStage+0x5a>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d302      	bcc.n	8008c66 <USBD_LL_SetupStage+0x46>
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d014      	beq.n	8008c8e <USBD_LL_SetupStage+0x6e>
 8008c64:	e01d      	b.n	8008ca2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa18 	bl	80090a4 <USBD_StdDevReq>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
      break;
 8008c78:	e020      	b.n	8008cbc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa7c 	bl	8009180 <USBD_StdItfReq>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8c:	e016      	b.n	8008cbc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fab8 	bl	800920c <USBD_StdEPReq>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca0:	e00c      	b.n	8008cbc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f008 fad5 	bl	8011260 <USBD_LL_StallEP>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cba:	bf00      	nop
  }

  return ret;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d137      	bne.n	8008d4a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ce0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d14a      	bne.n	8008d82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d913      	bls.n	8008d20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bf28      	it	cs
 8008d12:	4613      	movcs	r3, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 ffd7 	bl	8009ccc <USBD_CtlContinueRx>
 8008d1e:	e030      	b.n	8008d82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d105      	bne.n	8008d42 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 ffd3 	bl	8009cee <USBD_CtlSendStatus>
 8008d48:	e01b      	b.n	8008d82 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d013      	beq.n	8008d7e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d10e      	bne.n	8008d7e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	7afa      	ldrb	r2, [r7, #11]
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	4798      	blx	r3
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	e002      	b.n	8008d84 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e000      	b.n	8008d84 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	460b      	mov	r3, r1
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d9a:	7afb      	ldrb	r3, [r7, #11]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d16a      	bne.n	8008e76 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3314      	adds	r3, #20
 8008da4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d155      	bne.n	8008e5c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d914      	bls.n	8008de6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	1ad2      	subs	r2, r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 ff4c 	bl	8009c70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2100      	movs	r1, #0
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f008 fae8 	bl	80113b4 <USBD_LL_PrepareReceive>
 8008de4:	e03a      	b.n	8008e5c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d11c      	bne.n	8008e2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d316      	bcc.n	8008e2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d20f      	bcs.n	8008e2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2100      	movs	r1, #0
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 ff2d 	bl	8009c70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	2200      	movs	r2, #0
 8008e22:	2100      	movs	r1, #0
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f008 fac5 	bl	80113b4 <USBD_LL_PrepareReceive>
 8008e2a:	e017      	b.n	8008e5c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00a      	beq.n	8008e4e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d105      	bne.n	8008e4e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4e:	2180      	movs	r1, #128	; 0x80
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f008 fa05 	bl	8011260 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 ff5c 	bl	8009d14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d123      	bne.n	8008eae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff fe9b 	bl	8008ba2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e74:	e01b      	b.n	8008eae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d013      	beq.n	8008eaa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d10e      	bne.n	8008eaa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	7afa      	ldrb	r2, [r7, #11]
 8008e96:	4611      	mov	r1, r2
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	4798      	blx	r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	e002      	b.n	8008eb0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e000      	b.n	8008eb0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6852      	ldr	r2, [r2, #4]
 8008ef4:	b2d2      	uxtb	r2, r2
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	2200      	movs	r2, #0
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f008 f967 	bl	80111d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2240      	movs	r2, #64	; 0x40
 8008f14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f18:	2340      	movs	r3, #64	; 0x40
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2180      	movs	r1, #128	; 0x80
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f008 f959 	bl	80111d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2240      	movs	r2, #64	; 0x40
 8008f2e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2204      	movs	r2, #4
 8008f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d105      	bne.n	8008fa2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d10b      	bne.n	8008fda <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	460b      	mov	r3, r1
 8009008:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009044:	2b00      	cmp	r3, #0
 8009046:	d009      	beq.n	800905c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	6852      	ldr	r2, [r2, #4]
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	4611      	mov	r1, r2
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
  }

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009066:	b480      	push	{r7}
 8009068:	b087      	sub	sp, #28
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	3301      	adds	r3, #1
 800907c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009084:	8a3b      	ldrh	r3, [r7, #16]
 8009086:	021b      	lsls	r3, r3, #8
 8009088:	b21a      	sxth	r2, r3
 800908a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800908e:	4313      	orrs	r3, r2
 8009090:	b21b      	sxth	r3, r3
 8009092:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009094:	89fb      	ldrh	r3, [r7, #14]
}
 8009096:	4618      	mov	r0, r3
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d004      	beq.n	80090c8 <USBD_StdDevReq+0x24>
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d002      	beq.n	80090c8 <USBD_StdDevReq+0x24>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <USBD_StdDevReq+0x38>
 80090c6:	e050      	b.n	800916a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
    break;
 80090da:	e04b      	b.n	8009174 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	785b      	ldrb	r3, [r3, #1]
 80090e0:	2b09      	cmp	r3, #9
 80090e2:	d83c      	bhi.n	800915e <USBD_StdDevReq+0xba>
 80090e4:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <USBD_StdDevReq+0x48>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009141 	.word	0x08009141
 80090f0:	08009155 	.word	0x08009155
 80090f4:	0800915f 	.word	0x0800915f
 80090f8:	0800914b 	.word	0x0800914b
 80090fc:	0800915f 	.word	0x0800915f
 8009100:	0800911f 	.word	0x0800911f
 8009104:	08009115 	.word	0x08009115
 8009108:	0800915f 	.word	0x0800915f
 800910c:	08009137 	.word	0x08009137
 8009110:	08009129 	.word	0x08009129
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9ce 	bl	80094b8 <USBD_GetDescriptor>
      break;
 800911c:	e024      	b.n	8009168 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fb5d 	bl	80097e0 <USBD_SetAddress>
      break;
 8009126:	e01f      	b.n	8009168 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb9a 	bl	8009864 <USBD_SetConfig>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
      break;
 8009134:	e018      	b.n	8009168 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fc37 	bl	80099ac <USBD_GetConfig>
      break;
 800913e:	e013      	b.n	8009168 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fc66 	bl	8009a14 <USBD_GetStatus>
      break;
 8009148:	e00e      	b.n	8009168 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc94 	bl	8009a7a <USBD_SetFeature>
      break;
 8009152:	e009      	b.n	8009168 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fca3 	bl	8009aa2 <USBD_ClrFeature>
      break;
 800915c:	e004      	b.n	8009168 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fcf9 	bl	8009b58 <USBD_CtlError>
      break;
 8009166:	bf00      	nop
    }
    break;
 8009168:	e004      	b.n	8009174 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fcf3 	bl	8009b58 <USBD_CtlError>
    break;
 8009172:	bf00      	nop
  }

  return ret;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop

08009180 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009196:	2b20      	cmp	r3, #32
 8009198:	d003      	beq.n	80091a2 <USBD_StdItfReq+0x22>
 800919a:	2b40      	cmp	r3, #64	; 0x40
 800919c:	d001      	beq.n	80091a2 <USBD_StdItfReq+0x22>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d12a      	bne.n	80091f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a8:	3b01      	subs	r3, #1
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d81d      	bhi.n	80091ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	889b      	ldrh	r3, [r3, #4]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d813      	bhi.n	80091e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	88db      	ldrh	r3, [r3, #6]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d110      	bne.n	80091f4 <USBD_StdItfReq+0x74>
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fd88 	bl	8009cee <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80091de:	e009      	b.n	80091f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fcb8 	bl	8009b58 <USBD_CtlError>
      break;
 80091e8:	e004      	b.n	80091f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fcb3 	bl	8009b58 <USBD_CtlError>
      break;
 80091f2:	e000      	b.n	80091f6 <USBD_StdItfReq+0x76>
      break;
 80091f4:	bf00      	nop
    }
    break;
 80091f6:	e004      	b.n	8009202 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fcac 	bl	8009b58 <USBD_CtlError>
    break;
 8009200:	bf00      	nop
  }

  return ret;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	889b      	ldrh	r3, [r3, #4]
 800921e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009228:	2b20      	cmp	r3, #32
 800922a:	d004      	beq.n	8009236 <USBD_StdEPReq+0x2a>
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	d002      	beq.n	8009236 <USBD_StdEPReq+0x2a>
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <USBD_StdEPReq+0x3e>
 8009234:	e135      	b.n	80094a2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e130      	b.n	80094ac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d03e      	beq.n	80092d0 <USBD_StdEPReq+0xc4>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d002      	beq.n	800925c <USBD_StdEPReq+0x50>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d077      	beq.n	800934a <USBD_StdEPReq+0x13e>
 800925a:	e11c      	b.n	8009496 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009262:	2b02      	cmp	r3, #2
 8009264:	d002      	beq.n	800926c <USBD_StdEPReq+0x60>
 8009266:	2b03      	cmp	r3, #3
 8009268:	d015      	beq.n	8009296 <USBD_StdEPReq+0x8a>
 800926a:	e02b      	b.n	80092c4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00c      	beq.n	800928c <USBD_StdEPReq+0x80>
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d009      	beq.n	800928c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f007 ffef 	bl	8011260 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f007 ffeb 	bl	8011260 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800928a:	e020      	b.n	80092ce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fc62 	bl	8009b58 <USBD_CtlError>
        break;
 8009294:	e01b      	b.n	80092ce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	885b      	ldrh	r3, [r3, #2]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10e      	bne.n	80092bc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00b      	beq.n	80092bc <USBD_StdEPReq+0xb0>
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d008      	beq.n	80092bc <USBD_StdEPReq+0xb0>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	88db      	ldrh	r3, [r3, #6]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f007 ffd2 	bl	8011260 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fd16 	bl	8009cee <USBD_CtlSendStatus>

        break;
 80092c2:	e004      	b.n	80092ce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fc46 	bl	8009b58 <USBD_CtlError>
        break;
 80092cc:	bf00      	nop
      }
      break;
 80092ce:	e0e7      	b.n	80094a0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d002      	beq.n	80092e0 <USBD_StdEPReq+0xd4>
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d015      	beq.n	800930a <USBD_StdEPReq+0xfe>
 80092de:	e02d      	b.n	800933c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00c      	beq.n	8009300 <USBD_StdEPReq+0xf4>
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b80      	cmp	r3, #128	; 0x80
 80092ea:	d009      	beq.n	8009300 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f007 ffb5 	bl	8011260 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092f6:	2180      	movs	r1, #128	; 0x80
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f007 ffb1 	bl	8011260 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80092fe:	e023      	b.n	8009348 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fc28 	bl	8009b58 <USBD_CtlError>
        break;
 8009308:	e01e      	b.n	8009348 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	885b      	ldrh	r3, [r3, #2]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d119      	bne.n	8009346 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009318:	2b00      	cmp	r3, #0
 800931a:	d004      	beq.n	8009326 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f007 ffbc 	bl	801129e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fce1 	bl	8009cee <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
        }
        break;
 800933a:	e004      	b.n	8009346 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fc0a 	bl	8009b58 <USBD_CtlError>
        break;
 8009344:	e000      	b.n	8009348 <USBD_StdEPReq+0x13c>
        break;
 8009346:	bf00      	nop
      }
      break;
 8009348:	e0aa      	b.n	80094a0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009350:	2b02      	cmp	r3, #2
 8009352:	d002      	beq.n	800935a <USBD_StdEPReq+0x14e>
 8009354:	2b03      	cmp	r3, #3
 8009356:	d032      	beq.n	80093be <USBD_StdEPReq+0x1b2>
 8009358:	e097      	b.n	800948a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <USBD_StdEPReq+0x164>
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b80      	cmp	r3, #128	; 0x80
 8009364:	d004      	beq.n	8009370 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fbf5 	bl	8009b58 <USBD_CtlError>
          break;
 800936e:	e091      	b.n	8009494 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	da0b      	bge.n	8009390 <USBD_StdEPReq+0x184>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	3310      	adds	r3, #16
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4413      	add	r3, r2
 800938c:	3304      	adds	r3, #4
 800938e:	e00b      	b.n	80093a8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	3304      	adds	r3, #4
 80093a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2202      	movs	r2, #2
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fc3f 	bl	8009c3a <USBD_CtlSendData>
        break;
 80093bc:	e06a      	b.n	8009494 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80093be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da11      	bge.n	80093ea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	f003 020f 	and.w	r2, r3, #15
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	440b      	add	r3, r1
 80093d8:	3324      	adds	r3, #36	; 0x24
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d117      	bne.n	8009410 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fbb8 	bl	8009b58 <USBD_CtlError>
            break;
 80093e8:	e054      	b.n	8009494 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fba5 	bl	8009b58 <USBD_CtlError>
            break;
 800940e:	e041      	b.n	8009494 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da0b      	bge.n	8009430 <USBD_StdEPReq+0x224>
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	3310      	adds	r3, #16
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4413      	add	r3, r2
 800942c:	3304      	adds	r3, #4
 800942e:	e00b      	b.n	8009448 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <USBD_StdEPReq+0x24a>
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	2b80      	cmp	r3, #128	; 0x80
 8009454:	d103      	bne.n	800945e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	e00e      	b.n	800947c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f007 ff3a 	bl	80112dc <USBD_LL_IsStallEP>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2201      	movs	r2, #1
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	e002      	b.n	800947c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2202      	movs	r2, #2
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fbd9 	bl	8009c3a <USBD_CtlSendData>
          break;
 8009488:	e004      	b.n	8009494 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fb63 	bl	8009b58 <USBD_CtlError>
        break;
 8009492:	bf00      	nop
      }
      break;
 8009494:	e004      	b.n	80094a0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fb5d 	bl	8009b58 <USBD_CtlError>
      break;
 800949e:	bf00      	nop
    }
    break;
 80094a0:	e004      	b.n	80094ac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb57 	bl	8009b58 <USBD_CtlError>
    break;
 80094aa:	bf00      	nop
  }

  return ret;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	885b      	ldrh	r3, [r3, #2]
 80094d2:	0a1b      	lsrs	r3, r3, #8
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b01      	subs	r3, #1
 80094d8:	2b0e      	cmp	r3, #14
 80094da:	f200 8152 	bhi.w	8009782 <USBD_GetDescriptor+0x2ca>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <USBD_GetDescriptor+0x2c>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009555 	.word	0x08009555
 80094e8:	0800956d 	.word	0x0800956d
 80094ec:	080095ad 	.word	0x080095ad
 80094f0:	08009783 	.word	0x08009783
 80094f4:	08009783 	.word	0x08009783
 80094f8:	08009723 	.word	0x08009723
 80094fc:	0800974f 	.word	0x0800974f
 8009500:	08009783 	.word	0x08009783
 8009504:	08009783 	.word	0x08009783
 8009508:	08009783 	.word	0x08009783
 800950c:	08009783 	.word	0x08009783
 8009510:	08009783 	.word	0x08009783
 8009514:	08009783 	.word	0x08009783
 8009518:	08009783 	.word	0x08009783
 800951c:	08009521 	.word	0x08009521
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	f107 0108 	add.w	r1, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009542:	e126      	b.n	8009792 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fb06 	bl	8009b58 <USBD_CtlError>
      err++;
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	3301      	adds	r3, #1
 8009550:	72fb      	strb	r3, [r7, #11]
    break;
 8009552:	e11e      	b.n	8009792 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	7c12      	ldrb	r2, [r2, #16]
 8009560:	f107 0108 	add.w	r1, r7, #8
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	60f8      	str	r0, [r7, #12]
    break;
 800956a:	e112      	b.n	8009792 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7c1b      	ldrb	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10d      	bne.n	8009590 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957c:	f107 0208 	add.w	r2, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3301      	adds	r3, #1
 800958a:	2202      	movs	r2, #2
 800958c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800958e:	e100      	b.n	8009792 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	f107 0208 	add.w	r2, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	2202      	movs	r2, #2
 80095a8:	701a      	strb	r2, [r3, #0]
    break;
 80095aa:	e0f2      	b.n	8009792 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	885b      	ldrh	r3, [r3, #2]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	f200 80ac 	bhi.w	8009710 <USBD_GetDescriptor+0x258>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <USBD_GetDescriptor+0x108>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	080095d9 	.word	0x080095d9
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	08009641 	.word	0x08009641
 80095cc:	08009675 	.word	0x08009675
 80095d0:	080096a9 	.word	0x080096a9
 80095d4:	080096dd 	.word	0x080096dd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	7c12      	ldrb	r2, [r2, #16]
 80095f0:	f107 0108 	add.w	r1, r7, #8
 80095f4:	4610      	mov	r0, r2
 80095f6:	4798      	blx	r3
 80095f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095fa:	e091      	b.n	8009720 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 faaa 	bl	8009b58 <USBD_CtlError>
        err++;
 8009604:	7afb      	ldrb	r3, [r7, #11]
 8009606:	3301      	adds	r3, #1
 8009608:	72fb      	strb	r3, [r7, #11]
      break;
 800960a:	e089      	b.n	8009720 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7c12      	ldrb	r2, [r2, #16]
 8009624:	f107 0108 	add.w	r1, r7, #8
 8009628:	4610      	mov	r0, r2
 800962a:	4798      	blx	r3
 800962c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800962e:	e077      	b.n	8009720 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa90 	bl	8009b58 <USBD_CtlError>
        err++;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	3301      	adds	r3, #1
 800963c:	72fb      	strb	r3, [r7, #11]
      break;
 800963e:	e06f      	b.n	8009720 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	7c12      	ldrb	r2, [r2, #16]
 8009658:	f107 0108 	add.w	r1, r7, #8
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009662:	e05d      	b.n	8009720 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa76 	bl	8009b58 <USBD_CtlError>
        err++;
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	3301      	adds	r3, #1
 8009670:	72fb      	strb	r3, [r7, #11]
      break;
 8009672:	e055      	b.n	8009720 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	7c12      	ldrb	r2, [r2, #16]
 800968c:	f107 0108 	add.w	r1, r7, #8
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
 8009694:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009696:	e043      	b.n	8009720 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fa5c 	bl	8009b58 <USBD_CtlError>
        err++;
 80096a0:	7afb      	ldrb	r3, [r7, #11]
 80096a2:	3301      	adds	r3, #1
 80096a4:	72fb      	strb	r3, [r7, #11]
      break;
 80096a6:	e03b      	b.n	8009720 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	7c12      	ldrb	r2, [r2, #16]
 80096c0:	f107 0108 	add.w	r1, r7, #8
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096ca:	e029      	b.n	8009720 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa42 	bl	8009b58 <USBD_CtlError>
        err++;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	3301      	adds	r3, #1
 80096d8:	72fb      	strb	r3, [r7, #11]
      break;
 80096da:	e021      	b.n	8009720 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00b      	beq.n	8009700 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	7c12      	ldrb	r2, [r2, #16]
 80096f4:	f107 0108 	add.w	r1, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096fe:	e00f      	b.n	8009720 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa28 	bl	8009b58 <USBD_CtlError>
        err++;
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	3301      	adds	r3, #1
 800970c:	72fb      	strb	r3, [r7, #11]
      break;
 800970e:	e007      	b.n	8009720 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa20 	bl	8009b58 <USBD_CtlError>
      err++;
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	3301      	adds	r3, #1
 800971c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800971e:	bf00      	nop
    }
    break;
 8009720:	e037      	b.n	8009792 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	7c1b      	ldrb	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	f107 0208 	add.w	r2, r7, #8
 8009736:	4610      	mov	r0, r2
 8009738:	4798      	blx	r3
 800973a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800973c:	e029      	b.n	8009792 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fa09 	bl	8009b58 <USBD_CtlError>
      err++;
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	3301      	adds	r3, #1
 800974a:	72fb      	strb	r3, [r7, #11]
    break;
 800974c:	e021      	b.n	8009792 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7c1b      	ldrb	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	f107 0208 	add.w	r2, r7, #8
 8009762:	4610      	mov	r0, r2
 8009764:	4798      	blx	r3
 8009766:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	2207      	movs	r2, #7
 800976e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009770:	e00f      	b.n	8009792 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f9ef 	bl	8009b58 <USBD_CtlError>
      err++;
 800977a:	7afb      	ldrb	r3, [r7, #11]
 800977c:	3301      	adds	r3, #1
 800977e:	72fb      	strb	r3, [r7, #11]
    break;
 8009780:	e007      	b.n	8009792 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f9e7 	bl	8009b58 <USBD_CtlError>
    err++;
 800978a:	7afb      	ldrb	r3, [r7, #11]
 800978c:	3301      	adds	r3, #1
 800978e:	72fb      	strb	r3, [r7, #11]
    break;
 8009790:	bf00      	nop
  }

  if (err != 0U)
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11e      	bne.n	80097d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	88db      	ldrh	r3, [r3, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d016      	beq.n	80097ce <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80097a0:	893b      	ldrh	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00e      	beq.n	80097c4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	88da      	ldrh	r2, [r3, #6]
 80097aa:	893b      	ldrh	r3, [r7, #8]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	bf28      	it	cs
 80097b0:	4613      	movcs	r3, r2
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80097b6:	893b      	ldrh	r3, [r7, #8]
 80097b8:	461a      	mov	r2, r3
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fa3c 	bl	8009c3a <USBD_CtlSendData>
 80097c2:	e009      	b.n	80097d8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f9c6 	bl	8009b58 <USBD_CtlError>
 80097cc:	e004      	b.n	80097d8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fa8d 	bl	8009cee <USBD_CtlSendStatus>
 80097d4:	e000      	b.n	80097d8 <USBD_GetDescriptor+0x320>
    return;
 80097d6:	bf00      	nop
    }
  }
}
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop

080097e0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	889b      	ldrh	r3, [r3, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d130      	bne.n	8009854 <USBD_SetAddress+0x74>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d12c      	bne.n	8009854 <USBD_SetAddress+0x74>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	885b      	ldrh	r3, [r3, #2]
 80097fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009800:	d828      	bhi.n	8009854 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009814:	2b03      	cmp	r3, #3
 8009816:	d104      	bne.n	8009822 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f99c 	bl	8009b58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009820:	e01c      	b.n	800985c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7bfa      	ldrb	r2, [r7, #15]
 8009826:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f007 fd80 	bl	8011334 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fa5a 	bl	8009cee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2202      	movs	r2, #2
 8009844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009848:	e008      	b.n	800985c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009852:	e003      	b.n	800985c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f97e 	bl	8009b58 <USBD_CtlError>
  }
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	885b      	ldrh	r3, [r3, #2]
 8009876:	b2da      	uxtb	r2, r3
 8009878:	4b4b      	ldr	r3, [pc, #300]	; (80099a8 <USBD_SetConfig+0x144>)
 800987a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800987c:	4b4a      	ldr	r3, [pc, #296]	; (80099a8 <USBD_SetConfig+0x144>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d905      	bls.n	8009890 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f966 	bl	8009b58 <USBD_CtlError>
    return USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	e087      	b.n	80099a0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009896:	2b02      	cmp	r3, #2
 8009898:	d002      	beq.n	80098a0 <USBD_SetConfig+0x3c>
 800989a:	2b03      	cmp	r3, #3
 800989c:	d025      	beq.n	80098ea <USBD_SetConfig+0x86>
 800989e:	e071      	b.n	8009984 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80098a0:	4b41      	ldr	r3, [pc, #260]	; (80099a8 <USBD_SetConfig+0x144>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01c      	beq.n	80098e2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80098a8:	4b3f      	ldr	r3, [pc, #252]	; (80099a8 <USBD_SetConfig+0x144>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80098b2:	4b3d      	ldr	r3, [pc, #244]	; (80099a8 <USBD_SetConfig+0x144>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff f97d 	bl	8008bb8 <USBD_SetClassConfig>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f944 	bl	8009b58 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80098d0:	e065      	b.n	800999e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa0b 	bl	8009cee <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2203      	movs	r2, #3
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80098e0:	e05d      	b.n	800999e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa03 	bl	8009cee <USBD_CtlSendStatus>
    break;
 80098e8:	e059      	b.n	800999e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80098ea:	4b2f      	ldr	r3, [pc, #188]	; (80099a8 <USBD_SetConfig+0x144>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d112      	bne.n	8009918 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2202      	movs	r2, #2
 80098f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80098fa:	4b2b      	ldr	r3, [pc, #172]	; (80099a8 <USBD_SetConfig+0x144>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009904:	4b28      	ldr	r3, [pc, #160]	; (80099a8 <USBD_SetConfig+0x144>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff f970 	bl	8008bf0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f9ec 	bl	8009cee <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009916:	e042      	b.n	800999e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009918:	4b23      	ldr	r3, [pc, #140]	; (80099a8 <USBD_SetConfig+0x144>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	429a      	cmp	r2, r3
 8009924:	d02a      	beq.n	800997c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff f95e 	bl	8008bf0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009934:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <USBD_SetConfig+0x144>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800993e:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <USBD_SetConfig+0x144>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff f937 	bl	8008bb8 <USBD_SetClassConfig>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00f      	beq.n	8009974 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f8fe 	bl	8009b58 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7ff f943 	bl	8008bf0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009972:	e014      	b.n	800999e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f9ba 	bl	8009cee <USBD_CtlSendStatus>
    break;
 800997a:	e010      	b.n	800999e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f9b6 	bl	8009cee <USBD_CtlSendStatus>
    break;
 8009982:	e00c      	b.n	800999e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8e6 	bl	8009b58 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <USBD_SetConfig+0x144>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff f92c 	bl	8008bf0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009998:	2303      	movs	r3, #3
 800999a:	73fb      	strb	r3, [r7, #15]
    break;
 800999c:	bf00      	nop
  }

  return ret;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	2000021c 	.word	0x2000021c

080099ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	88db      	ldrh	r3, [r3, #6]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d004      	beq.n	80099c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f8c9 	bl	8009b58 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80099c6:	e021      	b.n	8009a0c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	db17      	blt.n	8009a02 <USBD_GetConfig+0x56>
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	dd02      	ble.n	80099dc <USBD_GetConfig+0x30>
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d00b      	beq.n	80099f2 <USBD_GetConfig+0x46>
 80099da:	e012      	b.n	8009a02 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3308      	adds	r3, #8
 80099e6:	2201      	movs	r2, #1
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f925 	bl	8009c3a <USBD_CtlSendData>
      break;
 80099f0:	e00c      	b.n	8009a0c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3304      	adds	r3, #4
 80099f6:	2201      	movs	r2, #1
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f91d 	bl	8009c3a <USBD_CtlSendData>
      break;
 8009a00:	e004      	b.n	8009a0c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f8a7 	bl	8009b58 <USBD_CtlError>
      break;
 8009a0a:	bf00      	nop
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a24:	3b01      	subs	r3, #1
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d81e      	bhi.n	8009a68 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	88db      	ldrh	r3, [r3, #6]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d004      	beq.n	8009a3c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f88f 	bl	8009b58 <USBD_CtlError>
      break;
 8009a3a:	e01a      	b.n	8009a72 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f043 0202 	orr.w	r2, r3, #2
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8ea 	bl	8009c3a <USBD_CtlSendData>
    break;
 8009a66:	e004      	b.n	8009a72 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f874 	bl	8009b58 <USBD_CtlError>
    break;
 8009a70:	bf00      	nop
  }
}
 8009a72:	bf00      	nop
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	885b      	ldrh	r3, [r3, #2]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d106      	bne.n	8009a9a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f92a 	bl	8009cee <USBD_CtlSendStatus>
  }
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d80b      	bhi.n	8009ad0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	885b      	ldrh	r3, [r3, #2]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d10c      	bne.n	8009ada <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f910 	bl	8009cee <USBD_CtlSendStatus>
      }
      break;
 8009ace:	e004      	b.n	8009ada <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f840 	bl	8009b58 <USBD_CtlError>
      break;
 8009ad8:	e000      	b.n	8009adc <USBD_ClrFeature+0x3a>
      break;
 8009ada:	bf00      	nop
  }
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff faa9 	bl	8009066 <SWAPBYTE>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461a      	mov	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3301      	adds	r3, #1
 8009b26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff fa9c 	bl	8009066 <SWAPBYTE>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	461a      	mov	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fa8f 	bl	8009066 <SWAPBYTE>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	80da      	strh	r2, [r3, #6]
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b62:	2180      	movs	r1, #128	; 0x80
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f007 fb7b 	bl	8011260 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f007 fb77 	bl	8011260 <USBD_LL_StallEP>
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b086      	sub	sp, #24
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d036      	beq.n	8009bfe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b94:	6938      	ldr	r0, [r7, #16]
 8009b96:	f000 f836 	bl	8009c06 <USBD_GetLen>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	4413      	add	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	7812      	ldrb	r2, [r2, #0]
 8009bb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	2203      	movs	r2, #3
 8009bc2:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bca:	e013      	b.n	8009bf4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	7812      	ldrb	r2, [r2, #0]
 8009bd6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	613b      	str	r3, [r7, #16]
    idx++;
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	3301      	adds	r3, #1
 8009be2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4413      	add	r3, r2
 8009bea:	2200      	movs	r2, #0
 8009bec:	701a      	strb	r2, [r3, #0]
    idx++;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e7      	bne.n	8009bcc <USBD_GetString+0x52>
 8009bfc:	e000      	b.n	8009c00 <USBD_GetString+0x86>
    return;
 8009bfe:	bf00      	nop
  }
}
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c16:	e005      	b.n	8009c24 <USBD_GetLen+0x1e>
  {
    len++;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	3301      	adds	r3, #1
 8009c22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f5      	bne.n	8009c18 <USBD_GetLen+0x12>
  }

  return len;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	2100      	movs	r1, #0
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f007 fb86 	bl	8011372 <USBD_LL_Transmit>

  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	2100      	movs	r1, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f007 fb75 	bl	8011372 <USBD_LL_Transmit>

  return USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2203      	movs	r2, #3
 8009ca2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f007 fb79 	bl	80113b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	2100      	movs	r1, #0
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f007 fb68 	bl	80113b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2204      	movs	r2, #4
 8009cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2200      	movs	r2, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f007 fb34 	bl	8011372 <USBD_LL_Transmit>

  return USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2205      	movs	r2, #5
 8009d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d24:	2300      	movs	r3, #0
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f007 fb42 	bl	80113b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <disk_status+0x30>)
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	79fa      	ldrb	r2, [r7, #7]
 8009d54:	4905      	ldr	r1, [pc, #20]	; (8009d6c <disk_status+0x30>)
 8009d56:	440a      	add	r2, r1
 8009d58:	7a12      	ldrb	r2, [r2, #8]
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4798      	blx	r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20000248 	.word	0x20000248

08009d70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	4a0d      	ldr	r2, [pc, #52]	; (8009db8 <disk_initialize+0x48>)
 8009d82:	5cd3      	ldrb	r3, [r2, r3]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d111      	bne.n	8009dac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <disk_initialize+0x48>)
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	4a09      	ldr	r2, [pc, #36]	; (8009db8 <disk_initialize+0x48>)
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	79fa      	ldrb	r2, [r7, #7]
 8009d9e:	4906      	ldr	r1, [pc, #24]	; (8009db8 <disk_initialize+0x48>)
 8009da0:	440a      	add	r2, r1
 8009da2:	7a12      	ldrb	r2, [r2, #8]
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000248 	.word	0x20000248

08009dbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <disk_read+0x3c>)
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	689c      	ldr	r4, [r3, #8]
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4a07      	ldr	r2, [pc, #28]	; (8009df8 <disk_read+0x3c>)
 8009ddc:	4413      	add	r3, r2
 8009dde:	7a18      	ldrb	r0, [r3, #8]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	47a0      	blx	r4
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd90      	pop	{r4, r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000248 	.word	0x20000248

08009dfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009dfc:	b590      	push	{r4, r7, lr}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	607a      	str	r2, [r7, #4]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4a0a      	ldr	r2, [pc, #40]	; (8009e38 <disk_write+0x3c>)
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68dc      	ldr	r4, [r3, #12]
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	4a07      	ldr	r2, [pc, #28]	; (8009e38 <disk_write+0x3c>)
 8009e1c:	4413      	add	r3, r2
 8009e1e:	7a18      	ldrb	r0, [r3, #8]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	47a0      	blx	r4
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd90      	pop	{r4, r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000248 	.word	0x20000248

08009e3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	603a      	str	r2, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <disk_ioctl+0x38>)
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	79fa      	ldrb	r2, [r7, #7]
 8009e5a:	4906      	ldr	r1, [pc, #24]	; (8009e74 <disk_ioctl+0x38>)
 8009e5c:	440a      	add	r2, r1
 8009e5e:	7a10      	ldrb	r0, [r2, #8]
 8009e60:	79b9      	ldrb	r1, [r7, #6]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4798      	blx	r3
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000248 	.word	0x20000248

08009e78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3301      	adds	r3, #1
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	b21a      	sxth	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3303      	adds	r3, #3
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	3202      	adds	r2, #2
 8009ec0:	7812      	ldrb	r2, [r2, #0]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	021b      	lsls	r3, r3, #8
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	3201      	adds	r2, #1
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	887a      	ldrh	r2, [r7, #2]
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	701a      	strb	r2, [r3, #0]
 8009f06:	887b      	ldrh	r3, [r7, #2]
 8009f08:	0a1b      	lsrs	r3, r3, #8
 8009f0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	607a      	str	r2, [r7, #4]
 8009f12:	887a      	ldrh	r2, [r7, #2]
 8009f14:	b2d2      	uxtb	r2, r2
 8009f16:	701a      	strb	r2, [r3, #0]
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	0a1b      	lsrs	r3, r3, #8
 8009f3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	607a      	str	r2, [r7, #4]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	0a1b      	lsrs	r3, r3, #8
 8009f50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	b2d2      	uxtb	r2, r2
 8009f5c:	701a      	strb	r2, [r3, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	0a1b      	lsrs	r3, r3, #8
 8009f62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00d      	beq.n	8009fb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	1c53      	adds	r3, r2, #1
 8009f9a:	613b      	str	r3, [r7, #16]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	1c59      	adds	r1, r3, #1
 8009fa0:	6179      	str	r1, [r7, #20]
 8009fa2:	7812      	ldrb	r2, [r2, #0]
 8009fa4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	607b      	str	r3, [r7, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1f1      	bne.n	8009f96 <mem_cpy+0x1a>
	}
}
 8009fb2:	bf00      	nop
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009fbe:	b480      	push	{r7}
 8009fc0:	b087      	sub	sp, #28
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	617a      	str	r2, [r7, #20]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	607b      	str	r3, [r7, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1f3      	bne.n	8009fce <mem_set+0x10>
}
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009ff2:	b480      	push	{r7}
 8009ff4:	b089      	sub	sp, #36	; 0x24
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	61fb      	str	r3, [r7, #28]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	61fa      	str	r2, [r7, #28]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	4619      	mov	r1, r3
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	61ba      	str	r2, [r7, #24]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	1acb      	subs	r3, r1, r3
 800a01e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3b01      	subs	r3, #1
 800a024:	607b      	str	r3, [r7, #4]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <mem_cmp+0x40>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0eb      	beq.n	800a00a <mem_cmp+0x18>

	return r;
 800a032:	697b      	ldr	r3, [r7, #20]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3724      	adds	r7, #36	; 0x24
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a04a:	e002      	b.n	800a052 <chk_chr+0x12>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3301      	adds	r3, #1
 800a050:	607b      	str	r3, [r7, #4]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <chk_chr+0x26>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	4293      	cmp	r3, r2
 800a064:	d1f2      	bne.n	800a04c <chk_chr+0xc>
	return *str;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	781b      	ldrb	r3, [r3, #0]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d009      	beq.n	800a098 <lock_fs+0x22>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	4618      	mov	r0, r3
 800a08a:	f002 fd8d 	bl	800cba8 <ff_req_grant>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <lock_fs+0x22>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <lock_fs+0x24>
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00d      	beq.n	800a0d0 <unlock_fs+0x2e>
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	2b0c      	cmp	r3, #12
 800a0b8:	d00a      	beq.n	800a0d0 <unlock_fs+0x2e>
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	2b0b      	cmp	r3, #11
 800a0be:	d007      	beq.n	800a0d0 <unlock_fs+0x2e>
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	2b0f      	cmp	r3, #15
 800a0c4:	d004      	beq.n	800a0d0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f002 fd81 	bl	800cbd2 <ff_rel_grant>
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60bb      	str	r3, [r7, #8]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	60fb      	str	r3, [r7, #12]
 800a0ea:	e029      	b.n	800a140 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a0ec:	4a27      	ldr	r2, [pc, #156]	; (800a18c <chk_lock+0xb4>)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	4413      	add	r3, r2
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01d      	beq.n	800a136 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a0fa:	4a24      	ldr	r2, [pc, #144]	; (800a18c <chk_lock+0xb4>)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	011b      	lsls	r3, r3, #4
 800a100:	4413      	add	r3, r2
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d116      	bne.n	800a13a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a10c:	4a1f      	ldr	r2, [pc, #124]	; (800a18c <chk_lock+0xb4>)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	4413      	add	r3, r2
 800a114:	3304      	adds	r3, #4
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d10c      	bne.n	800a13a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a120:	4a1a      	ldr	r2, [pc, #104]	; (800a18c <chk_lock+0xb4>)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	011b      	lsls	r3, r3, #4
 800a126:	4413      	add	r3, r2
 800a128:	3308      	adds	r3, #8
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a130:	429a      	cmp	r2, r3
 800a132:	d102      	bne.n	800a13a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a134:	e007      	b.n	800a146 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a136:	2301      	movs	r3, #1
 800a138:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3301      	adds	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d9d2      	bls.n	800a0ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d109      	bne.n	800a160 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <chk_lock+0x80>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d101      	bne.n	800a15c <chk_lock+0x84>
 800a158:	2300      	movs	r3, #0
 800a15a:	e010      	b.n	800a17e <chk_lock+0xa6>
 800a15c:	2312      	movs	r3, #18
 800a15e:	e00e      	b.n	800a17e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d108      	bne.n	800a178 <chk_lock+0xa0>
 800a166:	4a09      	ldr	r2, [pc, #36]	; (800a18c <chk_lock+0xb4>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	4413      	add	r3, r2
 800a16e:	330c      	adds	r3, #12
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a176:	d101      	bne.n	800a17c <chk_lock+0xa4>
 800a178:	2310      	movs	r3, #16
 800a17a:	e000      	b.n	800a17e <chk_lock+0xa6>
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	20000228 	.word	0x20000228

0800a190 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a196:	2300      	movs	r3, #0
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	e002      	b.n	800a1a2 <enq_lock+0x12>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d806      	bhi.n	800a1b6 <enq_lock+0x26>
 800a1a8:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <enq_lock+0x40>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	4413      	add	r3, r2
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1f2      	bne.n	800a19c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	20000228 	.word	0x20000228

0800a1d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	e01f      	b.n	800a224 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a1e4:	4a41      	ldr	r2, [pc, #260]	; (800a2ec <inc_lock+0x118>)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	4413      	add	r3, r2
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d113      	bne.n	800a21e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a1f6:	4a3d      	ldr	r2, [pc, #244]	; (800a2ec <inc_lock+0x118>)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3304      	adds	r3, #4
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a206:	429a      	cmp	r2, r3
 800a208:	d109      	bne.n	800a21e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a20a:	4a38      	ldr	r2, [pc, #224]	; (800a2ec <inc_lock+0x118>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	4413      	add	r3, r2
 800a212:	3308      	adds	r3, #8
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d006      	beq.n	800a22c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3301      	adds	r3, #1
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d9dc      	bls.n	800a1e4 <inc_lock+0x10>
 800a22a:	e000      	b.n	800a22e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a22c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d132      	bne.n	800a29a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e002      	b.n	800a240 <inc_lock+0x6c>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3301      	adds	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d806      	bhi.n	800a254 <inc_lock+0x80>
 800a246:	4a29      	ldr	r2, [pc, #164]	; (800a2ec <inc_lock+0x118>)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1f2      	bne.n	800a23a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d101      	bne.n	800a25e <inc_lock+0x8a>
 800a25a:	2300      	movs	r3, #0
 800a25c:	e040      	b.n	800a2e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4922      	ldr	r1, [pc, #136]	; (800a2ec <inc_lock+0x118>)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	440b      	add	r3, r1
 800a26a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	491e      	ldr	r1, [pc, #120]	; (800a2ec <inc_lock+0x118>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	440b      	add	r3, r1
 800a278:	3304      	adds	r3, #4
 800a27a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	695a      	ldr	r2, [r3, #20]
 800a280:	491a      	ldr	r1, [pc, #104]	; (800a2ec <inc_lock+0x118>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	440b      	add	r3, r1
 800a288:	3308      	adds	r3, #8
 800a28a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a28c:	4a17      	ldr	r2, [pc, #92]	; (800a2ec <inc_lock+0x118>)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	4413      	add	r3, r2
 800a294:	330c      	adds	r3, #12
 800a296:	2200      	movs	r2, #0
 800a298:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d009      	beq.n	800a2b4 <inc_lock+0xe0>
 800a2a0:	4a12      	ldr	r2, [pc, #72]	; (800a2ec <inc_lock+0x118>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	4413      	add	r3, r2
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <inc_lock+0xe0>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e015      	b.n	800a2e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d108      	bne.n	800a2cc <inc_lock+0xf8>
 800a2ba:	4a0c      	ldr	r2, [pc, #48]	; (800a2ec <inc_lock+0x118>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	4413      	add	r3, r2
 800a2c2:	330c      	adds	r3, #12
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	e001      	b.n	800a2d0 <inc_lock+0xfc>
 800a2cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2d0:	4906      	ldr	r1, [pc, #24]	; (800a2ec <inc_lock+0x118>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	440b      	add	r3, r1
 800a2d8:	330c      	adds	r3, #12
 800a2da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3301      	adds	r3, #1
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20000228 	.word	0x20000228

0800a2f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	607b      	str	r3, [r7, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d825      	bhi.n	800a350 <dec_lock+0x60>
		n = Files[i].ctr;
 800a304:	4a17      	ldr	r2, [pc, #92]	; (800a364 <dec_lock+0x74>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	4413      	add	r3, r2
 800a30c:	330c      	adds	r3, #12
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a312:	89fb      	ldrh	r3, [r7, #14]
 800a314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a318:	d101      	bne.n	800a31e <dec_lock+0x2e>
 800a31a:	2300      	movs	r3, #0
 800a31c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a31e:	89fb      	ldrh	r3, [r7, #14]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <dec_lock+0x3a>
 800a324:	89fb      	ldrh	r3, [r7, #14]
 800a326:	3b01      	subs	r3, #1
 800a328:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a32a:	4a0e      	ldr	r2, [pc, #56]	; (800a364 <dec_lock+0x74>)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	011b      	lsls	r3, r3, #4
 800a330:	4413      	add	r3, r2
 800a332:	330c      	adds	r3, #12
 800a334:	89fa      	ldrh	r2, [r7, #14]
 800a336:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a338:	89fb      	ldrh	r3, [r7, #14]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d105      	bne.n	800a34a <dec_lock+0x5a>
 800a33e:	4a09      	ldr	r2, [pc, #36]	; (800a364 <dec_lock+0x74>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	011b      	lsls	r3, r3, #4
 800a344:	4413      	add	r3, r2
 800a346:	2200      	movs	r2, #0
 800a348:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	737b      	strb	r3, [r7, #13]
 800a34e:	e001      	b.n	800a354 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a350:	2302      	movs	r3, #2
 800a352:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a354:	7b7b      	ldrb	r3, [r7, #13]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20000228 	.word	0x20000228

0800a368 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	e010      	b.n	800a398 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a376:	4a0d      	ldr	r2, [pc, #52]	; (800a3ac <clear_lock+0x44>)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	4413      	add	r3, r2
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d105      	bne.n	800a392 <clear_lock+0x2a>
 800a386:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <clear_lock+0x44>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	4413      	add	r3, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d9eb      	bls.n	800a376 <clear_lock+0xe>
	}
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	20000228 	.word	0x20000228

0800a3b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	78db      	ldrb	r3, [r3, #3]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d034      	beq.n	800a42e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7858      	ldrb	r0, [r3, #1]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	f7ff fd10 	bl	8009dfc <disk_write>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	e022      	b.n	800a42e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	1ad2      	subs	r2, r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d217      	bcs.n	800a42e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	789b      	ldrb	r3, [r3, #2]
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	e010      	b.n	800a428 <sync_window+0x78>
					wsect += fs->fsize;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4413      	add	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	7858      	ldrb	r0, [r3, #1]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a41a:	2301      	movs	r3, #1
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	f7ff fced 	bl	8009dfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3b01      	subs	r3, #1
 800a426:	613b      	str	r3, [r7, #16]
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d8eb      	bhi.n	800a406 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d01b      	beq.n	800a488 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ffad 	bl	800a3b0 <sync_window>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d113      	bne.n	800a488 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	7858      	ldrb	r0, [r3, #1]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a46a:	2301      	movs	r3, #1
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	f7ff fca5 	bl	8009dbc <disk_read>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a478:	f04f 33ff 	mov.w	r3, #4294967295
 800a47c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ff87 	bl	800a3b0 <sync_window>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d158      	bne.n	800a55e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d148      	bne.n	800a546 <sync_fs+0xb2>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	791b      	ldrb	r3, [r3, #4]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d144      	bne.n	800a546 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3334      	adds	r3, #52	; 0x34
 800a4c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff fd79 	bl	8009fbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3334      	adds	r3, #52	; 0x34
 800a4d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fd08 	bl	8009eee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3334      	adds	r3, #52	; 0x34
 800a4e2:	4921      	ldr	r1, [pc, #132]	; (800a568 <sync_fs+0xd4>)
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fd1d 	bl	8009f24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3334      	adds	r3, #52	; 0x34
 800a4ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a4f2:	491e      	ldr	r1, [pc, #120]	; (800a56c <sync_fs+0xd8>)
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff fd15 	bl	8009f24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3334      	adds	r3, #52	; 0x34
 800a4fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7ff fd0b 	bl	8009f24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3334      	adds	r3, #52	; 0x34
 800a512:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7ff fd01 	bl	8009f24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7858      	ldrb	r0, [r3, #1]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a53a:	2301      	movs	r3, #1
 800a53c:	f7ff fc5e 	bl	8009dfc <disk_write>
			fs->fsi_flag = 0;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fc74 	bl	8009e3c <disk_ioctl>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <sync_fs+0xca>
 800a55a:	2301      	movs	r3, #1
 800a55c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	41615252 	.word	0x41615252
 800a56c:	61417272 	.word	0x61417272

0800a570 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	3b02      	subs	r3, #2
 800a57e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	699b      	ldr	r3, [r3, #24]
 800a584:	3b02      	subs	r3, #2
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d301      	bcc.n	800a590 <clust2sect+0x20>
 800a58c:	2300      	movs	r3, #0
 800a58e:	e008      	b.n	800a5a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	895b      	ldrh	r3, [r3, #10]
 800a594:	461a      	mov	r2, r3
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	fb03 f202 	mul.w	r2, r3, r2
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a0:	4413      	add	r3, r2
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b086      	sub	sp, #24
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d904      	bls.n	800a5ce <get_fat+0x20>
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d302      	bcc.n	800a5d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	e08c      	b.n	800a6ee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d045      	beq.n	800a66e <get_fat+0xc0>
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d05d      	beq.n	800a6a2 <get_fat+0xf4>
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d177      	bne.n	800a6da <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	085b      	lsrs	r3, r3, #1
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	0a5b      	lsrs	r3, r3, #9
 800a600:	4413      	add	r3, r2
 800a602:	4619      	mov	r1, r3
 800a604:	6938      	ldr	r0, [r7, #16]
 800a606:	f7ff ff17 	bl	800a438 <move_window>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d167      	bne.n	800a6e0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	60fa      	str	r2, [r7, #12]
 800a616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	4413      	add	r3, r2
 800a61e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a622:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	0a5b      	lsrs	r3, r3, #9
 800a62c:	4413      	add	r3, r2
 800a62e:	4619      	mov	r1, r3
 800a630:	6938      	ldr	r0, [r7, #16]
 800a632:	f7ff ff01 	bl	800a438 <move_window>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d153      	bne.n	800a6e4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4413      	add	r3, r2
 800a646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a64a:	021b      	lsls	r3, r3, #8
 800a64c:	461a      	mov	r2, r3
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	4313      	orrs	r3, r2
 800a652:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <get_fat+0xb6>
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	091b      	lsrs	r3, r3, #4
 800a662:	e002      	b.n	800a66a <get_fat+0xbc>
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a66a:	617b      	str	r3, [r7, #20]
			break;
 800a66c:	e03f      	b.n	800a6ee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	0a1b      	lsrs	r3, r3, #8
 800a676:	4413      	add	r3, r2
 800a678:	4619      	mov	r1, r3
 800a67a:	6938      	ldr	r0, [r7, #16]
 800a67c:	f7ff fedc 	bl	800a438 <move_window>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d130      	bne.n	800a6e8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a694:	4413      	add	r3, r2
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff fbee 	bl	8009e78 <ld_word>
 800a69c:	4603      	mov	r3, r0
 800a69e:	617b      	str	r3, [r7, #20]
			break;
 800a6a0:	e025      	b.n	800a6ee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	09db      	lsrs	r3, r3, #7
 800a6aa:	4413      	add	r3, r2
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6938      	ldr	r0, [r7, #16]
 800a6b0:	f7ff fec2 	bl	800a438 <move_window>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d118      	bne.n	800a6ec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff fbec 	bl	8009ea8 <ld_dword>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6d6:	617b      	str	r3, [r7, #20]
			break;
 800a6d8:	e009      	b.n	800a6ee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a6da:	2301      	movs	r3, #1
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	e006      	b.n	800a6ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6e0:	bf00      	nop
 800a6e2:	e004      	b.n	800a6ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6e4:	bf00      	nop
 800a6e6:	e002      	b.n	800a6ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6e8:	bf00      	nop
 800a6ea:	e000      	b.n	800a6ee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6ec:	bf00      	nop
		}
	}

	return val;
 800a6ee:	697b      	ldr	r3, [r7, #20]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b089      	sub	sp, #36	; 0x24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a704:	2302      	movs	r3, #2
 800a706:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	f240 80d6 	bls.w	800a8bc <put_fat+0x1c4>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	429a      	cmp	r2, r3
 800a718:	f080 80d0 	bcs.w	800a8bc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d073      	beq.n	800a80c <put_fat+0x114>
 800a724:	2b03      	cmp	r3, #3
 800a726:	f000 8091 	beq.w	800a84c <put_fat+0x154>
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	f040 80c6 	bne.w	800a8bc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	61bb      	str	r3, [r7, #24]
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	4413      	add	r3, r2
 800a73c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	0a5b      	lsrs	r3, r3, #9
 800a746:	4413      	add	r3, r2
 800a748:	4619      	mov	r1, r3
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff fe74 	bl	800a438 <move_window>
 800a750:	4603      	mov	r3, r0
 800a752:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a754:	7ffb      	ldrb	r3, [r7, #31]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 80a9 	bne.w	800a8ae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	1c59      	adds	r1, r3, #1
 800a766:	61b9      	str	r1, [r7, #24]
 800a768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76c:	4413      	add	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00d      	beq.n	800a796 <put_fat+0x9e>
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	b25b      	sxtb	r3, r3
 800a780:	f003 030f 	and.w	r3, r3, #15
 800a784:	b25a      	sxtb	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	011b      	lsls	r3, r3, #4
 800a78c:	b25b      	sxtb	r3, r3
 800a78e:	4313      	orrs	r3, r2
 800a790:	b25b      	sxtb	r3, r3
 800a792:	b2db      	uxtb	r3, r3
 800a794:	e001      	b.n	800a79a <put_fat+0xa2>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	0a5b      	lsrs	r3, r3, #9
 800a7ac:	4413      	add	r3, r2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fe41 	bl	800a438 <move_window>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7ba:	7ffb      	ldrb	r3, [r7, #31]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d178      	bne.n	800a8b2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7cc:	4413      	add	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <put_fat+0xea>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	091b      	lsrs	r3, r3, #4
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	e00e      	b.n	800a800 <put_fat+0x108>
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	b25b      	sxtb	r3, r3
 800a7e8:	f023 030f 	bic.w	r3, r3, #15
 800a7ec:	b25a      	sxtb	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	0a1b      	lsrs	r3, r3, #8
 800a7f2:	b25b      	sxtb	r3, r3
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	b25b      	sxtb	r3, r3
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	b25b      	sxtb	r3, r3
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2201      	movs	r2, #1
 800a808:	70da      	strb	r2, [r3, #3]
			break;
 800a80a:	e057      	b.n	800a8bc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	4413      	add	r3, r2
 800a816:	4619      	mov	r1, r3
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f7ff fe0d 	bl	800a438 <move_window>
 800a81e:	4603      	mov	r3, r0
 800a820:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a822:	7ffb      	ldrb	r3, [r7, #31]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d146      	bne.n	800a8b6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a836:	4413      	add	r3, r2
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	b292      	uxth	r2, r2
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff fb55 	bl	8009eee <st_word>
			fs->wflag = 1;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2201      	movs	r2, #1
 800a848:	70da      	strb	r2, [r3, #3]
			break;
 800a84a:	e037      	b.n	800a8bc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	09db      	lsrs	r3, r3, #7
 800a854:	4413      	add	r3, r2
 800a856:	4619      	mov	r1, r3
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f7ff fded 	bl	800a438 <move_window>
 800a85e:	4603      	mov	r3, r0
 800a860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a862:	7ffb      	ldrb	r3, [r7, #31]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d128      	bne.n	800a8ba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a87c:	4413      	add	r3, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fb12 	bl	8009ea8 <ld_dword>
 800a884:	4603      	mov	r3, r0
 800a886:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a88a:	4323      	orrs	r3, r4
 800a88c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a89c:	4413      	add	r3, r2
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fb3f 	bl	8009f24 <st_dword>
			fs->wflag = 1;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	70da      	strb	r2, [r3, #3]
			break;
 800a8ac:	e006      	b.n	800a8bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8ae:	bf00      	nop
 800a8b0:	e004      	b.n	800a8bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8b2:	bf00      	nop
 800a8b4:	e002      	b.n	800a8bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8b6:	bf00      	nop
 800a8b8:	e000      	b.n	800a8bc <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a8ba:	bf00      	nop
		}
	}
	return res;
 800a8bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3724      	adds	r7, #36	; 0x24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd90      	pop	{r4, r7, pc}

0800a8c6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d904      	bls.n	800a8ec <remove_chain+0x26>
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d301      	bcc.n	800a8f0 <remove_chain+0x2a>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e04b      	b.n	800a988 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00c      	beq.n	800a910 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fa:	6879      	ldr	r1, [r7, #4]
 800a8fc:	69b8      	ldr	r0, [r7, #24]
 800a8fe:	f7ff fefb 	bl	800a6f8 <put_fat>
 800a902:	4603      	mov	r3, r0
 800a904:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a906:	7ffb      	ldrb	r3, [r7, #31]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <remove_chain+0x4a>
 800a90c:	7ffb      	ldrb	r3, [r7, #31]
 800a90e:	e03b      	b.n	800a988 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a910:	68b9      	ldr	r1, [r7, #8]
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7ff fe4b 	bl	800a5ae <get_fat>
 800a918:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d031      	beq.n	800a984 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d101      	bne.n	800a92a <remove_chain+0x64>
 800a926:	2302      	movs	r3, #2
 800a928:	e02e      	b.n	800a988 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a930:	d101      	bne.n	800a936 <remove_chain+0x70>
 800a932:	2301      	movs	r3, #1
 800a934:	e028      	b.n	800a988 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a936:	2200      	movs	r2, #0
 800a938:	68b9      	ldr	r1, [r7, #8]
 800a93a:	69b8      	ldr	r0, [r7, #24]
 800a93c:	f7ff fedc 	bl	800a6f8 <put_fat>
 800a940:	4603      	mov	r3, r0
 800a942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a944:	7ffb      	ldrb	r3, [r7, #31]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <remove_chain+0x88>
 800a94a:	7ffb      	ldrb	r3, [r7, #31]
 800a94c:	e01c      	b.n	800a988 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	695a      	ldr	r2, [r3, #20]
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	3b02      	subs	r3, #2
 800a958:	429a      	cmp	r2, r3
 800a95a:	d20b      	bcs.n	800a974 <remove_chain+0xae>
			fs->free_clst++;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	791b      	ldrb	r3, [r3, #4]
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d3c6      	bcc.n	800a910 <remove_chain+0x4a>
 800a982:	e000      	b.n	800a986 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a984:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10d      	bne.n	800a9c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <create_chain+0x2c>
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d31b      	bcc.n	800a9f4 <create_chain+0x64>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	e018      	b.n	800a9f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fdf2 	bl	800a5ae <get_fat>
 800a9ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d801      	bhi.n	800a9d6 <create_chain+0x46>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e070      	b.n	800aab8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9dc:	d101      	bne.n	800a9e2 <create_chain+0x52>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	e06a      	b.n	800aab8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d201      	bcs.n	800a9f0 <create_chain+0x60>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	e063      	b.n	800aab8 <create_chain+0x128>
		scl = clst;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d307      	bcc.n	800aa18 <create_chain+0x88>
				ncl = 2;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d901      	bls.n	800aa18 <create_chain+0x88>
 800aa14:	2300      	movs	r3, #0
 800aa16:	e04f      	b.n	800aab8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa18:	69f9      	ldr	r1, [r7, #28]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff fdc7 	bl	800a5ae <get_fat>
 800aa20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00e      	beq.n	800aa46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d003      	beq.n	800aa36 <create_chain+0xa6>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa34:	d101      	bne.n	800aa3a <create_chain+0xaa>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	e03e      	b.n	800aab8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa3a:	69fa      	ldr	r2, [r7, #28]
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d1da      	bne.n	800a9f8 <create_chain+0x68>
 800aa42:	2300      	movs	r3, #0
 800aa44:	e038      	b.n	800aab8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aa46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4c:	69f9      	ldr	r1, [r7, #28]
 800aa4e:	6938      	ldr	r0, [r7, #16]
 800aa50:	f7ff fe52 	bl	800a6f8 <put_fat>
 800aa54:	4603      	mov	r3, r0
 800aa56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d109      	bne.n	800aa72 <create_chain+0xe2>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d006      	beq.n	800aa72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa64:	69fa      	ldr	r2, [r7, #28]
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6938      	ldr	r0, [r7, #16]
 800aa6a:	f7ff fe45 	bl	800a6f8 <put_fat>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d116      	bne.n	800aaa6 <create_chain+0x116>
		fs->last_clst = ncl;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	695a      	ldr	r2, [r3, #20]
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	3b02      	subs	r3, #2
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d804      	bhi.n	800aa96 <create_chain+0x106>
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	1e5a      	subs	r2, r3, #1
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	f043 0301 	orr.w	r3, r3, #1
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	711a      	strb	r2, [r3, #4]
 800aaa4:	e007      	b.n	800aab6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d102      	bne.n	800aab2 <create_chain+0x122>
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	e000      	b.n	800aab4 <create_chain+0x124>
 800aab2:	2301      	movs	r3, #1
 800aab4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	3304      	adds	r3, #4
 800aad6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	0a5b      	lsrs	r3, r3, #9
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	8952      	ldrh	r2, [r2, #10]
 800aae0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aae4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	1d1a      	adds	r2, r3, #4
 800aaea:	613a      	str	r2, [r7, #16]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <clmt_clust+0x3a>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e010      	b.n	800ab1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d307      	bcc.n	800ab12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab10:	e7e9      	b.n	800aae6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ab12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	4413      	add	r3, r2
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	371c      	adds	r7, #28
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab3e:	d204      	bcs.n	800ab4a <dir_sdi+0x22>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	f003 031f 	and.w	r3, r3, #31
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	e063      	b.n	800ac16 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <dir_sdi+0x46>
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d902      	bls.n	800ab6e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10c      	bne.n	800ab8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	095b      	lsrs	r3, r3, #5
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	8912      	ldrh	r2, [r2, #8]
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d301      	bcc.n	800ab84 <dir_sdi+0x5c>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e048      	b.n	800ac16 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	61da      	str	r2, [r3, #28]
 800ab8c:	e029      	b.n	800abe2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	895b      	ldrh	r3, [r3, #10]
 800ab92:	025b      	lsls	r3, r3, #9
 800ab94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab96:	e019      	b.n	800abcc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6979      	ldr	r1, [r7, #20]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff fd06 	bl	800a5ae <get_fat>
 800aba2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abaa:	d101      	bne.n	800abb0 <dir_sdi+0x88>
 800abac:	2301      	movs	r3, #1
 800abae:	e032      	b.n	800ac16 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d904      	bls.n	800abc0 <dir_sdi+0x98>
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d301      	bcc.n	800abc4 <dir_sdi+0x9c>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e028      	b.n	800ac16 <dir_sdi+0xee>
			ofs -= csz;
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d2e1      	bcs.n	800ab98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800abd4:	6979      	ldr	r1, [r7, #20]
 800abd6:	6938      	ldr	r0, [r7, #16]
 800abd8:	f7ff fcca 	bl	800a570 <clust2sect>
 800abdc:	4602      	mov	r2, r0
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <dir_sdi+0xcc>
 800abf0:	2302      	movs	r3, #2
 800abf2:	e010      	b.n	800ac16 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	69da      	ldr	r2, [r3, #28]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	0a5b      	lsrs	r3, r3, #9
 800abfc:	441a      	add	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0e:	441a      	add	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	3320      	adds	r3, #32
 800ac34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <dir_next+0x28>
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac44:	d301      	bcc.n	800ac4a <dir_next+0x2c>
 800ac46:	2304      	movs	r3, #4
 800ac48:	e0aa      	b.n	800ada0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f040 8098 	bne.w	800ad86 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10b      	bne.n	800ac80 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	8912      	ldrh	r2, [r2, #8]
 800ac70:	4293      	cmp	r3, r2
 800ac72:	f0c0 8088 	bcc.w	800ad86 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	61da      	str	r2, [r3, #28]
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	e08f      	b.n	800ada0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	0a5b      	lsrs	r3, r3, #9
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	8952      	ldrh	r2, [r2, #10]
 800ac88:	3a01      	subs	r2, #1
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d17a      	bne.n	800ad86 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	4619      	mov	r1, r3
 800ac98:	4610      	mov	r0, r2
 800ac9a:	f7ff fc88 	bl	800a5ae <get_fat>
 800ac9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d801      	bhi.n	800acaa <dir_next+0x8c>
 800aca6:	2302      	movs	r3, #2
 800aca8:	e07a      	b.n	800ada0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb0:	d101      	bne.n	800acb6 <dir_next+0x98>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e074      	b.n	800ada0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d358      	bcc.n	800ad72 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d104      	bne.n	800acd0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	61da      	str	r2, [r3, #28]
 800accc:	2304      	movs	r3, #4
 800acce:	e067      	b.n	800ada0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	4619      	mov	r1, r3
 800acd8:	4610      	mov	r0, r2
 800acda:	f7ff fe59 	bl	800a990 <create_chain>
 800acde:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <dir_next+0xcc>
 800ace6:	2307      	movs	r3, #7
 800ace8:	e05a      	b.n	800ada0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d101      	bne.n	800acf4 <dir_next+0xd6>
 800acf0:	2302      	movs	r3, #2
 800acf2:	e055      	b.n	800ada0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfa:	d101      	bne.n	800ad00 <dir_next+0xe2>
 800acfc:	2301      	movs	r3, #1
 800acfe:	e04f      	b.n	800ada0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff fb55 	bl	800a3b0 <sync_window>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <dir_next+0xf2>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e047      	b.n	800ada0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3334      	adds	r3, #52	; 0x34
 800ad14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad18:	2100      	movs	r1, #0
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff f94f 	bl	8009fbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad20:	2300      	movs	r3, #0
 800ad22:	613b      	str	r3, [r7, #16]
 800ad24:	6979      	ldr	r1, [r7, #20]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff fc22 	bl	800a570 <clust2sect>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	631a      	str	r2, [r3, #48]	; 0x30
 800ad32:	e012      	b.n	800ad5a <dir_next+0x13c>
						fs->wflag = 1;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fb38 	bl	800a3b0 <sync_window>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <dir_next+0x12c>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e02a      	b.n	800ada0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	631a      	str	r2, [r3, #48]	; 0x30
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	895b      	ldrh	r3, [r3, #10]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d3e6      	bcc.n	800ad34 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	1ad2      	subs	r2, r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad78:	6979      	ldr	r1, [r7, #20]
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff fbf8 	bl	800a570 <clust2sect>
 800ad80:	4602      	mov	r2, r0
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad98:	441a      	add	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff feb4 	bl	800ab28 <dir_sdi>
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d12b      	bne.n	800ae22 <dir_alloc+0x7a>
		n = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	4619      	mov	r1, r3
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff fb2f 	bl	800a438 <move_window>
 800adda:	4603      	mov	r3, r0
 800addc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adde:	7dfb      	ldrb	r3, [r7, #23]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d11d      	bne.n	800ae20 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2be5      	cmp	r3, #229	; 0xe5
 800adec:	d004      	beq.n	800adf8 <dir_alloc+0x50>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d107      	bne.n	800ae08 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3301      	adds	r3, #1
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d102      	bne.n	800ae0c <dir_alloc+0x64>
 800ae06:	e00c      	b.n	800ae22 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ff05 	bl	800ac1e <dir_next>
 800ae14:	4603      	mov	r3, r0
 800ae16:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0d7      	beq.n	800adce <dir_alloc+0x26>
 800ae1e:	e000      	b.n	800ae22 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae20:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d101      	bne.n	800ae2c <dir_alloc+0x84>
 800ae28:	2307      	movs	r3, #7
 800ae2a:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	331a      	adds	r3, #26
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff f817 	bl	8009e78 <ld_word>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d109      	bne.n	800ae6a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	3314      	adds	r3, #20
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff f80c 	bl	8009e78 <ld_word>
 800ae60:	4603      	mov	r3, r0
 800ae62:	041b      	lsls	r3, r3, #16
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	331a      	adds	r3, #26
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	b292      	uxth	r2, r2
 800ae88:	4611      	mov	r1, r2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff f82f 	bl	8009eee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d109      	bne.n	800aeac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f103 0214 	add.w	r2, r3, #20
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	0c1b      	lsrs	r3, r3, #16
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f7ff f821 	bl	8009eee <st_word>
	}
}
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aebe:	2304      	movs	r3, #4
 800aec0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800aec8:	e03c      	b.n	800af44 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	4619      	mov	r1, r3
 800aed0:	6938      	ldr	r0, [r7, #16]
 800aed2:	f7ff fab1 	bl	800a438 <move_window>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d136      	bne.n	800af4e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aeee:	2304      	movs	r3, #4
 800aef0:	75fb      	strb	r3, [r7, #23]
 800aef2:	e031      	b.n	800af58 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	330b      	adds	r3, #11
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af00:	73bb      	strb	r3, [r7, #14]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7bba      	ldrb	r2, [r7, #14]
 800af06:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	2be5      	cmp	r3, #229	; 0xe5
 800af0c:	d011      	beq.n	800af32 <dir_read+0x7e>
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	2b2e      	cmp	r3, #46	; 0x2e
 800af12:	d00e      	beq.n	800af32 <dir_read+0x7e>
 800af14:	7bbb      	ldrb	r3, [r7, #14]
 800af16:	2b0f      	cmp	r3, #15
 800af18:	d00b      	beq.n	800af32 <dir_read+0x7e>
 800af1a:	7bbb      	ldrb	r3, [r7, #14]
 800af1c:	f023 0320 	bic.w	r3, r3, #32
 800af20:	2b08      	cmp	r3, #8
 800af22:	bf0c      	ite	eq
 800af24:	2301      	moveq	r3, #1
 800af26:	2300      	movne	r3, #0
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	4293      	cmp	r3, r2
 800af30:	d00f      	beq.n	800af52 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800af32:	2100      	movs	r1, #0
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff fe72 	bl	800ac1e <dir_next>
 800af3a:	4603      	mov	r3, r0
 800af3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d108      	bne.n	800af56 <dir_read+0xa2>
	while (dp->sect) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1be      	bne.n	800aeca <dir_read+0x16>
 800af4c:	e004      	b.n	800af58 <dir_read+0xa4>
		if (res != FR_OK) break;
 800af4e:	bf00      	nop
 800af50:	e002      	b.n	800af58 <dir_read+0xa4>
				break;
 800af52:	bf00      	nop
 800af54:	e000      	b.n	800af58 <dir_read+0xa4>
		if (res != FR_OK) break;
 800af56:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <dir_read+0xb0>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	61da      	str	r2, [r3, #28]
	return res;
 800af64:	7dfb      	ldrb	r3, [r7, #23]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b086      	sub	sp, #24
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af7c:	2100      	movs	r1, #0
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fdd2 	bl	800ab28 <dir_sdi>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <dir_find+0x24>
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	e03e      	b.n	800b010 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	4619      	mov	r1, r3
 800af98:	6938      	ldr	r0, [r7, #16]
 800af9a:	f7ff fa4d 	bl	800a438 <move_window>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d12f      	bne.n	800b008 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d102      	bne.n	800afbc <dir_find+0x4e>
 800afb6:	2304      	movs	r3, #4
 800afb8:	75fb      	strb	r3, [r7, #23]
 800afba:	e028      	b.n	800b00e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	330b      	adds	r3, #11
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	330b      	adds	r3, #11
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10a      	bne.n	800aff4 <dir_find+0x86>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a18      	ldr	r0, [r3, #32]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3324      	adds	r3, #36	; 0x24
 800afe6:	220b      	movs	r2, #11
 800afe8:	4619      	mov	r1, r3
 800afea:	f7ff f802 	bl	8009ff2 <mem_cmp>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00b      	beq.n	800b00c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aff4:	2100      	movs	r1, #0
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff fe11 	bl	800ac1e <dir_next>
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0c5      	beq.n	800af92 <dir_find+0x24>
 800b006:	e002      	b.n	800b00e <dir_find+0xa0>
		if (res != FR_OK) break;
 800b008:	bf00      	nop
 800b00a:	e000      	b.n	800b00e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b00c:	bf00      	nop

	return res;
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b026:	2101      	movs	r1, #1
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff febd 	bl	800ada8 <dir_alloc>
 800b02e:	4603      	mov	r3, r0
 800b030:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d11c      	bne.n	800b072 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	4619      	mov	r1, r3
 800b03e:	68b8      	ldr	r0, [r7, #8]
 800b040:	f7ff f9fa 	bl	800a438 <move_window>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d111      	bne.n	800b072 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	2220      	movs	r2, #32
 800b054:	2100      	movs	r1, #0
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe ffb1 	bl	8009fbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a18      	ldr	r0, [r3, #32]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	3324      	adds	r3, #36	; 0x24
 800b064:	220b      	movs	r2, #11
 800b066:	4619      	mov	r1, r3
 800b068:	f7fe ff88 	bl	8009f7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2201      	movs	r2, #1
 800b070:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2200      	movs	r2, #0
 800b08a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d04e      	beq.n	800b132 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b09c:	e021      	b.n	800b0e2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1a      	ldr	r2, [r3, #32]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	1c59      	adds	r1, r3, #1
 800b0a6:	6179      	str	r1, [r7, #20]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	d100      	bne.n	800b0b6 <get_fileinfo+0x3a>
 800b0b4:	e015      	b.n	800b0e2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	2b05      	cmp	r3, #5
 800b0ba:	d101      	bne.n	800b0c0 <get_fileinfo+0x44>
 800b0bc:	23e5      	movs	r3, #229	; 0xe5
 800b0be:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2b09      	cmp	r3, #9
 800b0c4:	d106      	bne.n	800b0d4 <get_fileinfo+0x58>
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	613a      	str	r2, [r7, #16]
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	222e      	movs	r2, #46	; 0x2e
 800b0d2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	613a      	str	r2, [r7, #16]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	4413      	add	r3, r2
 800b0de:	7bfa      	ldrb	r2, [r7, #15]
 800b0e0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b0a      	cmp	r3, #10
 800b0e6:	d9da      	bls.n	800b09e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3309      	adds	r3, #9
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	7ada      	ldrb	r2, [r3, #11]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	331c      	adds	r3, #28
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe fecf 	bl	8009ea8 <ld_dword>
 800b10a:	4602      	mov	r2, r0
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	3316      	adds	r3, #22
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe fec6 	bl	8009ea8 <ld_dword>
 800b11c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	b29a      	uxth	r2, r3
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	80da      	strh	r2, [r3, #6]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	0c1b      	lsrs	r3, r3, #16
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	809a      	strh	r2, [r3, #4]
 800b130:	e000      	b.n	800b134 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b132:	bf00      	nop
}
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	1c59      	adds	r1, r3, #1
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6011      	str	r1, [r2, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800b152:	89fb      	ldrh	r3, [r7, #14]
 800b154:	2b60      	cmp	r3, #96	; 0x60
 800b156:	d905      	bls.n	800b164 <get_achar+0x28>
 800b158:	89fb      	ldrh	r3, [r7, #14]
 800b15a:	2b7a      	cmp	r3, #122	; 0x7a
 800b15c:	d802      	bhi.n	800b164 <get_achar+0x28>
 800b15e:	89fb      	ldrh	r3, [r7, #14]
 800b160:	3b20      	subs	r3, #32
 800b162:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800b164:	89fb      	ldrh	r3, [r7, #14]
 800b166:	2b7f      	cmp	r3, #127	; 0x7f
 800b168:	d904      	bls.n	800b174 <get_achar+0x38>
 800b16a:	89fb      	ldrh	r3, [r7, #14]
 800b16c:	3b80      	subs	r3, #128	; 0x80
 800b16e:	4a05      	ldr	r2, [pc, #20]	; (800b184 <get_achar+0x48>)
 800b170:	5cd3      	ldrb	r3, [r2, r3]
 800b172:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800b174:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	080123d8 	.word	0x080123d8

0800b188 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08a      	sub	sp, #40	; 0x28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800b196:	e009      	b.n	800b1ac <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800b198:	f107 0308 	add.w	r3, r7, #8
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7ff ffcd 	bl	800b13c <get_achar>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <pattern_matching+0x24>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e064      	b.n	800b276 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	1e5a      	subs	r2, r3, #1
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1f0      	bne.n	800b198 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d104      	bne.n	800b1c8 <pattern_matching+0x40>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <pattern_matching+0x40>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e056      	b.n	800b276 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2b3f      	cmp	r3, #63	; 0x3f
 800b1d6:	d003      	beq.n	800b1e0 <pattern_matching+0x58>
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1de:	d126      	bne.n	800b22e <pattern_matching+0xa6>
				nm = nx = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	617a      	str	r2, [r7, #20]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b3f      	cmp	r3, #63	; 0x3f
 800b1f2:	d103      	bne.n	800b1fc <pattern_matching+0x74>
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	623b      	str	r3, [r7, #32]
 800b1fa:	e001      	b.n	800b200 <pattern_matching+0x78>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b3f      	cmp	r3, #63	; 0x3f
 800b206:	d0ef      	beq.n	800b1e8 <pattern_matching+0x60>
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b2a      	cmp	r3, #42	; 0x2a
 800b20e:	d0eb      	beq.n	800b1e8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	6939      	ldr	r1, [r7, #16]
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	f7ff ffb6 	bl	800b188 <pattern_matching>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <pattern_matching+0x9e>
 800b222:	2301      	movs	r3, #1
 800b224:	e027      	b.n	800b276 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b22c:	e017      	b.n	800b25e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800b22e:	f107 0314 	add.w	r3, r7, #20
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff ff82 	bl	800b13c <get_achar>
 800b238:	4603      	mov	r3, r0
 800b23a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800b23c:	f107 0310 	add.w	r3, r7, #16
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff ff7b 	bl	800b13c <get_achar>
 800b246:	4603      	mov	r3, r0
 800b248:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800b24a:	8b7a      	ldrh	r2, [r7, #26]
 800b24c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b24e:	429a      	cmp	r2, r3
 800b250:	d104      	bne.n	800b25c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800b252:	8b7b      	ldrh	r3, [r7, #26]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1bb      	bne.n	800b1d0 <pattern_matching+0x48>
 800b258:	2301      	movs	r3, #1
 800b25a:	e00c      	b.n	800b276 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800b25c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800b25e:	f107 0308 	add.w	r3, r7, #8
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff ff6a 	bl	800b13c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <pattern_matching+0xec>
 800b26e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1a9      	bne.n	800b1c8 <pattern_matching+0x40>

	return 0;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3728      	adds	r7, #40	; 0x28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3324      	adds	r3, #36	; 0x24
 800b294:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b296:	220b      	movs	r2, #11
 800b298:	2120      	movs	r1, #32
 800b29a:	68b8      	ldr	r0, [r7, #8]
 800b29c:	f7fe fe8f 	bl	8009fbe <mem_set>
	si = i = 0; ni = 8;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	2308      	movs	r3, #8
 800b2aa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	617a      	str	r2, [r7, #20]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b2ba:	7ffb      	ldrb	r3, [r7, #31]
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d94e      	bls.n	800b35e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b2c0:	7ffb      	ldrb	r3, [r7, #31]
 800b2c2:	2b2f      	cmp	r3, #47	; 0x2f
 800b2c4:	d006      	beq.n	800b2d4 <create_name+0x54>
 800b2c6:	7ffb      	ldrb	r3, [r7, #31]
 800b2c8:	2b5c      	cmp	r3, #92	; 0x5c
 800b2ca:	d110      	bne.n	800b2ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b2cc:	e002      	b.n	800b2d4 <create_name+0x54>
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	4413      	add	r3, r2
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b2f      	cmp	r3, #47	; 0x2f
 800b2de:	d0f6      	beq.n	800b2ce <create_name+0x4e>
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b5c      	cmp	r3, #92	; 0x5c
 800b2ea:	d0f0      	beq.n	800b2ce <create_name+0x4e>
			break;
 800b2ec:	e038      	b.n	800b360 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b2ee:	7ffb      	ldrb	r3, [r7, #31]
 800b2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f2:	d003      	beq.n	800b2fc <create_name+0x7c>
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d30c      	bcc.n	800b316 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	2b0b      	cmp	r3, #11
 800b300:	d002      	beq.n	800b308 <create_name+0x88>
 800b302:	7ffb      	ldrb	r3, [r7, #31]
 800b304:	2b2e      	cmp	r3, #46	; 0x2e
 800b306:	d001      	beq.n	800b30c <create_name+0x8c>
 800b308:	2306      	movs	r3, #6
 800b30a:	e044      	b.n	800b396 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b30c:	2308      	movs	r3, #8
 800b30e:	613b      	str	r3, [r7, #16]
 800b310:	230b      	movs	r3, #11
 800b312:	61bb      	str	r3, [r7, #24]
			continue;
 800b314:	e022      	b.n	800b35c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b316:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da04      	bge.n	800b328 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b31e:	7ffb      	ldrb	r3, [r7, #31]
 800b320:	3b80      	subs	r3, #128	; 0x80
 800b322:	4a1f      	ldr	r2, [pc, #124]	; (800b3a0 <create_name+0x120>)
 800b324:	5cd3      	ldrb	r3, [r2, r3]
 800b326:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b328:	7ffb      	ldrb	r3, [r7, #31]
 800b32a:	4619      	mov	r1, r3
 800b32c:	481d      	ldr	r0, [pc, #116]	; (800b3a4 <create_name+0x124>)
 800b32e:	f7fe fe87 	bl	800a040 <chk_chr>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <create_name+0xbc>
 800b338:	2306      	movs	r3, #6
 800b33a:	e02c      	b.n	800b396 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b33c:	7ffb      	ldrb	r3, [r7, #31]
 800b33e:	2b60      	cmp	r3, #96	; 0x60
 800b340:	d905      	bls.n	800b34e <create_name+0xce>
 800b342:	7ffb      	ldrb	r3, [r7, #31]
 800b344:	2b7a      	cmp	r3, #122	; 0x7a
 800b346:	d802      	bhi.n	800b34e <create_name+0xce>
 800b348:	7ffb      	ldrb	r3, [r7, #31]
 800b34a:	3b20      	subs	r3, #32
 800b34c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	613a      	str	r2, [r7, #16]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	4413      	add	r3, r2
 800b358:	7ffa      	ldrb	r2, [r7, #31]
 800b35a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b35c:	e7a6      	b.n	800b2ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b35e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	441a      	add	r2, r3
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <create_name+0xf4>
 800b370:	2306      	movs	r3, #6
 800b372:	e010      	b.n	800b396 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2be5      	cmp	r3, #229	; 0xe5
 800b37a:	d102      	bne.n	800b382 <create_name+0x102>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2205      	movs	r2, #5
 800b380:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b382:	7ffb      	ldrb	r3, [r7, #31]
 800b384:	2b20      	cmp	r3, #32
 800b386:	d801      	bhi.n	800b38c <create_name+0x10c>
 800b388:	2204      	movs	r2, #4
 800b38a:	e000      	b.n	800b38e <create_name+0x10e>
 800b38c:	2200      	movs	r2, #0
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	330b      	adds	r3, #11
 800b392:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b394:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b396:	4618      	mov	r0, r3
 800b398:	3720      	adds	r7, #32
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	080123d8 	.word	0x080123d8
 800b3a4:	08012270 	.word	0x08012270

0800b3a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b3bc:	e002      	b.n	800b3c4 <follow_path+0x1c>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b2f      	cmp	r3, #47	; 0x2f
 800b3ca:	d0f8      	beq.n	800b3be <follow_path+0x16>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b3d2:	d0f4      	beq.n	800b3be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b1f      	cmp	r3, #31
 800b3e0:	d80a      	bhi.n	800b3f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2280      	movs	r2, #128	; 0x80
 800b3e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff fb9b 	bl	800ab28 <dir_sdi>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]
 800b3f6:	e043      	b.n	800b480 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff ff3f 	bl	800b280 <create_name>
 800b402:	4603      	mov	r3, r0
 800b404:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d134      	bne.n	800b476 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7ff fdae 	bl	800af6e <dir_find>
 800b412:	4603      	mov	r3, r0
 800b414:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b41c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00a      	beq.n	800b43a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b424:	7dfb      	ldrb	r3, [r7, #23]
 800b426:	2b04      	cmp	r3, #4
 800b428:	d127      	bne.n	800b47a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b42a:	7afb      	ldrb	r3, [r7, #11]
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d122      	bne.n	800b47a <follow_path+0xd2>
 800b434:	2305      	movs	r3, #5
 800b436:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b438:	e01f      	b.n	800b47a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b43a:	7afb      	ldrb	r3, [r7, #11]
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d11c      	bne.n	800b47e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	799b      	ldrb	r3, [r3, #6]
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d102      	bne.n	800b456 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b450:	2305      	movs	r3, #5
 800b452:	75fb      	strb	r3, [r7, #23]
 800b454:	e014      	b.n	800b480 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b464:	4413      	add	r3, r2
 800b466:	4619      	mov	r1, r3
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fce4 	bl	800ae36 <ld_clust>
 800b46e:	4602      	mov	r2, r0
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b474:	e7c0      	b.n	800b3f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b476:	bf00      	nop
 800b478:	e002      	b.n	800b480 <follow_path+0xd8>
				break;
 800b47a:	bf00      	nop
 800b47c:	e000      	b.n	800b480 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b47e:	bf00      	nop
			}
		}
	}

	return res;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b087      	sub	sp, #28
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b492:	f04f 33ff 	mov.w	r3, #4294967295
 800b496:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d031      	beq.n	800b504 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	617b      	str	r3, [r7, #20]
 800b4a6:	e002      	b.n	800b4ae <get_ldnumber+0x24>
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	617b      	str	r3, [r7, #20]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	d903      	bls.n	800b4be <get_ldnumber+0x34>
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b3a      	cmp	r3, #58	; 0x3a
 800b4bc:	d1f4      	bne.n	800b4a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b3a      	cmp	r3, #58	; 0x3a
 800b4c4:	d11c      	bne.n	800b500 <get_ldnumber+0x76>
			tp = *path;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	60fa      	str	r2, [r7, #12]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	3b30      	subs	r3, #48	; 0x30
 800b4d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b09      	cmp	r3, #9
 800b4dc:	d80e      	bhi.n	800b4fc <get_ldnumber+0x72>
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d10a      	bne.n	800b4fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d107      	bne.n	800b4fc <get_ldnumber+0x72>
					vol = (int)i;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	e002      	b.n	800b506 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b500:	2300      	movs	r3, #0
 800b502:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b504:	693b      	ldr	r3, [r7, #16]
}
 800b506:	4618      	mov	r0, r3
 800b508:	371c      	adds	r7, #28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
	...

0800b514 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	70da      	strb	r2, [r3, #3]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7fe ff82 	bl	800a438 <move_window>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <check_fs+0x2a>
 800b53a:	2304      	movs	r3, #4
 800b53c:	e038      	b.n	800b5b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3334      	adds	r3, #52	; 0x34
 800b542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe fc96 	bl	8009e78 <ld_word>
 800b54c:	4603      	mov	r3, r0
 800b54e:	461a      	mov	r2, r3
 800b550:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b554:	429a      	cmp	r2, r3
 800b556:	d001      	beq.n	800b55c <check_fs+0x48>
 800b558:	2303      	movs	r3, #3
 800b55a:	e029      	b.n	800b5b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b562:	2be9      	cmp	r3, #233	; 0xe9
 800b564:	d009      	beq.n	800b57a <check_fs+0x66>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b56c:	2beb      	cmp	r3, #235	; 0xeb
 800b56e:	d11e      	bne.n	800b5ae <check_fs+0x9a>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b576:	2b90      	cmp	r3, #144	; 0x90
 800b578:	d119      	bne.n	800b5ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3334      	adds	r3, #52	; 0x34
 800b57e:	3336      	adds	r3, #54	; 0x36
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fc91 	bl	8009ea8 <ld_dword>
 800b586:	4603      	mov	r3, r0
 800b588:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b58c:	4a0a      	ldr	r2, [pc, #40]	; (800b5b8 <check_fs+0xa4>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d101      	bne.n	800b596 <check_fs+0x82>
 800b592:	2300      	movs	r3, #0
 800b594:	e00c      	b.n	800b5b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3334      	adds	r3, #52	; 0x34
 800b59a:	3352      	adds	r3, #82	; 0x52
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe fc83 	bl	8009ea8 <ld_dword>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <check_fs+0xa8>)
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d101      	bne.n	800b5ae <check_fs+0x9a>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e000      	b.n	800b5b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b5ae:	2302      	movs	r3, #2
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	00544146 	.word	0x00544146
 800b5bc:	33544146 	.word	0x33544146

0800b5c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b096      	sub	sp, #88	; 0x58
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff ff58 	bl	800b48a <get_ldnumber>
 800b5da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	da01      	bge.n	800b5e6 <find_volume+0x26>
 800b5e2:	230b      	movs	r3, #11
 800b5e4:	e236      	b.n	800ba54 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b5e6:	4aac      	ldr	r2, [pc, #688]	; (800b898 <find_volume+0x2d8>)
 800b5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <find_volume+0x3a>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	e22c      	b.n	800ba54 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800b5fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5fc:	f7fe fd3b 	bl	800a076 <lock_fs>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <find_volume+0x4a>
 800b606:	230f      	movs	r3, #15
 800b608:	e224      	b.n	800ba54 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b60e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b610:	79fb      	ldrb	r3, [r7, #7]
 800b612:	f023 0301 	bic.w	r3, r3, #1
 800b616:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d01a      	beq.n	800b656 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	785b      	ldrb	r3, [r3, #1]
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fb89 	bl	8009d3c <disk_status>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b634:	f003 0301 	and.w	r3, r3, #1
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10c      	bne.n	800b656 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b63c:	79fb      	ldrb	r3, [r7, #7]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d007      	beq.n	800b652 <find_volume+0x92>
 800b642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b64e:	230a      	movs	r3, #10
 800b650:	e200      	b.n	800ba54 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800b652:	2300      	movs	r3, #0
 800b654:	e1fe      	b.n	800ba54 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	785b      	ldrb	r3, [r3, #1]
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fe fb81 	bl	8009d70 <disk_initialize>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b680:	2303      	movs	r3, #3
 800b682:	e1e7      	b.n	800ba54 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d007      	beq.n	800b69a <find_volume+0xda>
 800b68a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b696:	230a      	movs	r3, #10
 800b698:	e1dc      	b.n	800ba54 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b69e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6a2:	f7ff ff37 	bl	800b514 <check_fs>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b6ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d14b      	bne.n	800b74c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b6b8:	e01f      	b.n	800b6fa <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b6c8:	4413      	add	r3, r2
 800b6ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d006      	beq.n	800b6e4 <find_volume+0x124>
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	3308      	adds	r3, #8
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fbe4 	bl	8009ea8 <ld_dword>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	e000      	b.n	800b6e6 <find_volume+0x126>
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b6ee:	440b      	add	r3, r1
 800b6f0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d9dc      	bls.n	800b6ba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b700:	2300      	movs	r3, #0
 800b702:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <find_volume+0x150>
 800b70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b70c:	3b01      	subs	r3, #1
 800b70e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b718:	4413      	add	r3, r2
 800b71a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b71e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <find_volume+0x172>
 800b726:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b72a:	f7ff fef3 	bl	800b514 <check_fs>
 800b72e:	4603      	mov	r3, r0
 800b730:	e000      	b.n	800b734 <find_volume+0x174>
 800b732:	2303      	movs	r3, #3
 800b734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d905      	bls.n	800b74c <find_volume+0x18c>
 800b740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b742:	3301      	adds	r3, #1
 800b744:	643b      	str	r3, [r7, #64]	; 0x40
 800b746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d9e1      	bls.n	800b710 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b74c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b750:	2b04      	cmp	r3, #4
 800b752:	d101      	bne.n	800b758 <find_volume+0x198>
 800b754:	2301      	movs	r3, #1
 800b756:	e17d      	b.n	800ba54 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d901      	bls.n	800b764 <find_volume+0x1a4>
 800b760:	230d      	movs	r3, #13
 800b762:	e177      	b.n	800ba54 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	3334      	adds	r3, #52	; 0x34
 800b768:	330b      	adds	r3, #11
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fb84 	bl	8009e78 <ld_word>
 800b770:	4603      	mov	r3, r0
 800b772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b776:	d001      	beq.n	800b77c <find_volume+0x1bc>
 800b778:	230d      	movs	r3, #13
 800b77a:	e16b      	b.n	800ba54 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	3334      	adds	r3, #52	; 0x34
 800b780:	3316      	adds	r3, #22
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe fb78 	bl	8009e78 <ld_word>
 800b788:	4603      	mov	r3, r0
 800b78a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <find_volume+0x1e0>
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	3334      	adds	r3, #52	; 0x34
 800b796:	3324      	adds	r3, #36	; 0x24
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe fb85 	bl	8009ea8 <ld_dword>
 800b79e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7a4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	789b      	ldrb	r3, [r3, #2]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d005      	beq.n	800b7c4 <find_volume+0x204>
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	789b      	ldrb	r3, [r3, #2]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d001      	beq.n	800b7c4 <find_volume+0x204>
 800b7c0:	230d      	movs	r3, #13
 800b7c2:	e147      	b.n	800ba54 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	789b      	ldrb	r3, [r3, #2]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
 800b7d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	895b      	ldrh	r3, [r3, #10]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d008      	beq.n	800b7f8 <find_volume+0x238>
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e8:	895b      	ldrh	r3, [r3, #10]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	895b      	ldrh	r3, [r3, #10]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <find_volume+0x23c>
 800b7f8:	230d      	movs	r3, #13
 800b7fa:	e12b      	b.n	800ba54 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	3334      	adds	r3, #52	; 0x34
 800b800:	3311      	adds	r3, #17
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fb38 	bl	8009e78 <ld_word>
 800b808:	4603      	mov	r3, r0
 800b80a:	461a      	mov	r2, r3
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	891b      	ldrh	r3, [r3, #8]
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	b29b      	uxth	r3, r3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <find_volume+0x262>
 800b81e:	230d      	movs	r3, #13
 800b820:	e118      	b.n	800ba54 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	3334      	adds	r3, #52	; 0x34
 800b826:	3313      	adds	r3, #19
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe fb25 	bl	8009e78 <ld_word>
 800b82e:	4603      	mov	r3, r0
 800b830:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <find_volume+0x286>
 800b838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83a:	3334      	adds	r3, #52	; 0x34
 800b83c:	3320      	adds	r3, #32
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fb32 	bl	8009ea8 <ld_dword>
 800b844:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	3334      	adds	r3, #52	; 0x34
 800b84a:	330e      	adds	r3, #14
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fe fb13 	bl	8009e78 <ld_word>
 800b852:	4603      	mov	r3, r0
 800b854:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b856:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <find_volume+0x2a0>
 800b85c:	230d      	movs	r3, #13
 800b85e:	e0f9      	b.n	800ba54 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b860:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b864:	4413      	add	r3, r2
 800b866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b868:	8912      	ldrh	r2, [r2, #8]
 800b86a:	0912      	lsrs	r2, r2, #4
 800b86c:	b292      	uxth	r2, r2
 800b86e:	4413      	add	r3, r2
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	429a      	cmp	r2, r3
 800b878:	d201      	bcs.n	800b87e <find_volume+0x2be>
 800b87a:	230d      	movs	r3, #13
 800b87c:	e0ea      	b.n	800ba54 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b87e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b886:	8952      	ldrh	r2, [r2, #10]
 800b888:	fbb3 f3f2 	udiv	r3, r3, r2
 800b88c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	2b00      	cmp	r3, #0
 800b892:	d103      	bne.n	800b89c <find_volume+0x2dc>
 800b894:	230d      	movs	r3, #13
 800b896:	e0dd      	b.n	800ba54 <find_volume+0x494>
 800b898:	20000220 	.word	0x20000220
		fmt = FS_FAT32;
 800b89c:	2303      	movs	r3, #3
 800b89e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d802      	bhi.n	800b8b2 <find_volume+0x2f2>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d802      	bhi.n	800b8c2 <find_volume+0x302>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	1c9a      	adds	r2, r3, #2
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8ce:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b8d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8d4:	441a      	add	r2, r3
 800b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b8da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	441a      	add	r2, r3
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b8e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8e8:	2b03      	cmp	r3, #3
 800b8ea:	d11e      	bne.n	800b92a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ee:	3334      	adds	r3, #52	; 0x34
 800b8f0:	332a      	adds	r3, #42	; 0x2a
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fac0 	bl	8009e78 <ld_word>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <find_volume+0x342>
 800b8fe:	230d      	movs	r3, #13
 800b900:	e0a8      	b.n	800ba54 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	891b      	ldrh	r3, [r3, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <find_volume+0x34e>
 800b90a:	230d      	movs	r3, #13
 800b90c:	e0a2      	b.n	800ba54 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	3334      	adds	r3, #52	; 0x34
 800b912:	332c      	adds	r3, #44	; 0x2c
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe fac7 	bl	8009ea8 <ld_dword>
 800b91a:	4602      	mov	r2, r0
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	647b      	str	r3, [r7, #68]	; 0x44
 800b928:	e01f      	b.n	800b96a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	891b      	ldrh	r3, [r3, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <find_volume+0x376>
 800b932:	230d      	movs	r3, #13
 800b934:	e08e      	b.n	800ba54 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93c:	441a      	add	r2, r3
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b946:	2b02      	cmp	r3, #2
 800b948:	d103      	bne.n	800b952 <find_volume+0x392>
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	e00a      	b.n	800b968 <find_volume+0x3a8>
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	4613      	mov	r3, r2
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	4413      	add	r3, r2
 800b95c:	085a      	lsrs	r2, r3, #1
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b968:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	69da      	ldr	r2, [r3, #28]
 800b96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b970:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b974:	0a5b      	lsrs	r3, r3, #9
 800b976:	429a      	cmp	r2, r3
 800b978:	d201      	bcs.n	800b97e <find_volume+0x3be>
 800b97a:	230d      	movs	r3, #13
 800b97c:	e06a      	b.n	800ba54 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b980:	f04f 32ff 	mov.w	r2, #4294967295
 800b984:	615a      	str	r2, [r3, #20]
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	695a      	ldr	r2, [r3, #20]
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	2280      	movs	r2, #128	; 0x80
 800b992:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d149      	bne.n	800ba30 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	3334      	adds	r3, #52	; 0x34
 800b9a0:	3330      	adds	r3, #48	; 0x30
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fa68 	bl	8009e78 <ld_word>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d140      	bne.n	800ba30 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9b6:	f7fe fd3f 	bl	800a438 <move_window>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d137      	bne.n	800ba30 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	3334      	adds	r3, #52	; 0x34
 800b9ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe fa52 	bl	8009e78 <ld_word>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d127      	bne.n	800ba30 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	3334      	adds	r3, #52	; 0x34
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe fa5f 	bl	8009ea8 <ld_dword>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ba5c <find_volume+0x49c>)
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d11e      	bne.n	800ba30 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	3334      	adds	r3, #52	; 0x34
 800b9f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fa54 	bl	8009ea8 <ld_dword>
 800ba00:	4602      	mov	r2, r0
 800ba02:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <find_volume+0x4a0>)
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d113      	bne.n	800ba30 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	3334      	adds	r3, #52	; 0x34
 800ba0c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fa49 	bl	8009ea8 <ld_dword>
 800ba16:	4602      	mov	r2, r0
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	3334      	adds	r3, #52	; 0x34
 800ba20:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fe fa3f 	bl	8009ea8 <ld_dword>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ba30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ba36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ba38:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <find_volume+0x4a4>)
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	4b08      	ldr	r3, [pc, #32]	; (800ba64 <find_volume+0x4a4>)
 800ba42:	801a      	strh	r2, [r3, #0]
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <find_volume+0x4a4>)
 800ba46:	881a      	ldrh	r2, [r3, #0]
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ba4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba4e:	f7fe fc8b 	bl	800a368 <clear_lock>
#endif
	return FR_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3758      	adds	r7, #88	; 0x58
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	41615252 	.word	0x41615252
 800ba60:	61417272 	.word	0x61417272
 800ba64:	20000224 	.word	0x20000224

0800ba68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ba72:	2309      	movs	r3, #9
 800ba74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d02e      	beq.n	800bada <validate+0x72>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02a      	beq.n	800bada <validate+0x72>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d025      	beq.n	800bada <validate+0x72>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	889a      	ldrh	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	88db      	ldrh	r3, [r3, #6]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d11e      	bne.n	800bada <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe fae8 	bl	800a076 <lock_fs>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d014      	beq.n	800bad6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fe f942 	bl	8009d3c <disk_status>
 800bab8:	4603      	mov	r3, r0
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d102      	bne.n	800bac8 <validate+0x60>
				res = FR_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]
 800bac6:	e008      	b.n	800bada <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2100      	movs	r1, #0
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fae7 	bl	800a0a2 <unlock_fs>
 800bad4:	e001      	b.n	800bada <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bad6:	230f      	movs	r3, #15
 800bad8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <validate+0x7e>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	e000      	b.n	800bae8 <validate+0x80>
 800bae6:	2300      	movs	r3, #0
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	6013      	str	r3, [r2, #0]
	return res;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	4613      	mov	r3, r2
 800bb04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bb0a:	f107 0310 	add.w	r3, r7, #16
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fcbb 	bl	800b48a <get_ldnumber>
 800bb14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da01      	bge.n	800bb20 <f_mount+0x28>
 800bb1c:	230b      	movs	r3, #11
 800bb1e:	e048      	b.n	800bbb2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bb20:	4a26      	ldr	r2, [pc, #152]	; (800bbbc <f_mount+0xc4>)
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00f      	beq.n	800bb50 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bb30:	69b8      	ldr	r0, [r7, #24]
 800bb32:	f7fe fc19 	bl	800a368 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f001 f828 	bl	800cb90 <ff_del_syncobj>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <f_mount+0x52>
 800bb46:	2302      	movs	r3, #2
 800bb48:	e033      	b.n	800bbb2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	330c      	adds	r3, #12
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f000 fff7 	bl	800cb5a <ff_cre_syncobj>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <f_mount+0x7e>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e01d      	b.n	800bbb2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	4910      	ldr	r1, [pc, #64]	; (800bbbc <f_mount+0xc4>)
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <f_mount+0x94>
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d001      	beq.n	800bb90 <f_mount+0x98>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e010      	b.n	800bbb2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bb90:	f107 010c 	add.w	r1, r7, #12
 800bb94:	f107 0308 	add.w	r3, r7, #8
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7ff fd10 	bl	800b5c0 <find_volume>
 800bba0:	4603      	mov	r3, r0
 800bba2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	7dfa      	ldrb	r2, [r7, #23]
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe fa79 	bl	800a0a2 <unlock_fs>
 800bbb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20000220 	.word	0x20000220

0800bbc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b09a      	sub	sp, #104	; 0x68
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <f_open+0x18>
 800bbd4:	2309      	movs	r3, #9
 800bbd6:	e1b4      	b.n	800bf42 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bbe0:	79fa      	ldrb	r2, [r7, #7]
 800bbe2:	f107 0114 	add.w	r1, r7, #20
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fce8 	bl	800b5c0 <find_volume>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bbf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f040 8191 	bne.w	800bf22 <f_open+0x362>
		dj.obj.fs = fs;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	f107 0318 	add.w	r3, r7, #24
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fbcb 	bl	800b3a8 <follow_path>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d11a      	bne.n	800bc56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	da03      	bge.n	800bc32 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bc2a:	2306      	movs	r3, #6
 800bc2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bc30:	e011      	b.n	800bc56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	f023 0301 	bic.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	bf14      	ite	ne
 800bc3c:	2301      	movne	r3, #1
 800bc3e:	2300      	moveq	r3, #0
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	f107 0318 	add.w	r3, r7, #24
 800bc48:	4611      	mov	r1, r2
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe fa44 	bl	800a0d8 <chk_lock>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	f003 031c 	and.w	r3, r3, #28
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d07f      	beq.n	800bd60 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bc60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d017      	beq.n	800bc98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bc68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc6c:	2b04      	cmp	r3, #4
 800bc6e:	d10e      	bne.n	800bc8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bc70:	f7fe fa8e 	bl	800a190 <enq_lock>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d006      	beq.n	800bc88 <f_open+0xc8>
 800bc7a:	f107 0318 	add.w	r3, r7, #24
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff f9ca 	bl	800b018 <dir_register>
 800bc84:	4603      	mov	r3, r0
 800bc86:	e000      	b.n	800bc8a <f_open+0xca>
 800bc88:	2312      	movs	r3, #18
 800bc8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	f043 0308 	orr.w	r3, r3, #8
 800bc94:	71fb      	strb	r3, [r7, #7]
 800bc96:	e010      	b.n	800bcba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bc98:	7fbb      	ldrb	r3, [r7, #30]
 800bc9a:	f003 0311 	and.w	r3, r3, #17
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <f_open+0xea>
					res = FR_DENIED;
 800bca2:	2307      	movs	r3, #7
 800bca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bca8:	e007      	b.n	800bcba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <f_open+0xfa>
 800bcb4:	2308      	movs	r3, #8
 800bcb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bcba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d168      	bne.n	800bd94 <f_open+0x1d4>
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	f003 0308 	and.w	r3, r3, #8
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d063      	beq.n	800bd94 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bccc:	f7fc f9b4 	bl	8008038 <get_fattime>
 800bcd0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	330e      	adds	r3, #14
 800bcd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe f923 	bl	8009f24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	3316      	adds	r3, #22
 800bce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fe f91d 	bl	8009f24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	330b      	adds	r3, #11
 800bcee:	2220      	movs	r2, #32
 800bcf0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff f89c 	bl	800ae36 <ld_clust>
 800bcfe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd04:	2200      	movs	r2, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff f8b4 	bl	800ae74 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	331c      	adds	r3, #28
 800bd10:	2100      	movs	r1, #0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe f906 	bl	8009f24 <st_dword>
					fs->wflag = 1;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d037      	beq.n	800bd94 <f_open+0x1d4>
						dw = fs->winsect;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd28:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bd2a:	f107 0318 	add.w	r3, r7, #24
 800bd2e:	2200      	movs	r2, #0
 800bd30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fe fdc7 	bl	800a8c6 <remove_chain>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800bd3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d126      	bne.n	800bd94 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe fb74 	bl	800a438 <move_window>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd5a:	3a01      	subs	r2, #1
 800bd5c:	611a      	str	r2, [r3, #16]
 800bd5e:	e019      	b.n	800bd94 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bd60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d115      	bne.n	800bd94 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bd68:	7fbb      	ldrb	r3, [r7, #30]
 800bd6a:	f003 0310 	and.w	r3, r3, #16
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <f_open+0x1ba>
					res = FR_NO_FILE;
 800bd72:	2304      	movs	r3, #4
 800bd74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bd78:	e00c      	b.n	800bd94 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	f003 0302 	and.w	r3, r3, #2
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d007      	beq.n	800bd94 <f_open+0x1d4>
 800bd84:	7fbb      	ldrb	r3, [r7, #30]
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <f_open+0x1d4>
						res = FR_DENIED;
 800bd8e:	2307      	movs	r3, #7
 800bd90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bd94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d128      	bne.n	800bdee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	f003 0308 	and.w	r3, r3, #8
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bda6:	79fb      	ldrb	r3, [r7, #7]
 800bda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bdb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	f023 0301 	bic.w	r3, r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bf14      	ite	ne
 800bdc6:	2301      	movne	r3, #1
 800bdc8:	2300      	moveq	r3, #0
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	461a      	mov	r2, r3
 800bdce:	f107 0318 	add.w	r3, r7, #24
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe f9fd 	bl	800a1d4 <inc_lock>
 800bdda:	4602      	mov	r2, r0
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <f_open+0x22e>
 800bde8:	2302      	movs	r3, #2
 800bdea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bdee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f040 8095 	bne.w	800bf22 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff f819 	bl	800ae36 <ld_clust>
 800be04:	4602      	mov	r2, r0
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	331c      	adds	r3, #28
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fe f84a 	bl	8009ea8 <ld_dword>
 800be14:	4602      	mov	r2, r0
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	88da      	ldrh	r2, [r3, #6]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	79fa      	ldrb	r2, [r7, #7]
 800be32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3330      	adds	r3, #48	; 0x30
 800be4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be4e:	2100      	movs	r1, #0
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe f8b4 	bl	8009fbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	f003 0320 	and.w	r3, r3, #32
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d060      	beq.n	800bf22 <f_open+0x362>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d05c      	beq.n	800bf22 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	025b      	lsls	r3, r3, #9
 800be76:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be84:	e016      	b.n	800beb4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe fb8f 	bl	800a5ae <get_fat>
 800be90:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800be92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be94:	2b01      	cmp	r3, #1
 800be96:	d802      	bhi.n	800be9e <f_open+0x2de>
 800be98:	2302      	movs	r3, #2
 800be9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800be9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea4:	d102      	bne.n	800beac <f_open+0x2ec>
 800bea6:	2301      	movs	r3, #1
 800bea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800beac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800beae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb0:	1ad3      	subs	r3, r2, r3
 800beb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d103      	bne.n	800bec4 <f_open+0x304>
 800bebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d8e0      	bhi.n	800be86 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bec8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800beca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d127      	bne.n	800bf22 <f_open+0x362>
 800bed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d022      	beq.n	800bf22 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fb45 	bl	800a570 <clust2sect>
 800bee6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beea:	2b00      	cmp	r3, #0
 800beec:	d103      	bne.n	800bef6 <f_open+0x336>
						res = FR_INT_ERR;
 800beee:	2302      	movs	r3, #2
 800bef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bef4:	e015      	b.n	800bf22 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef8:	0a5a      	lsrs	r2, r3, #9
 800befa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800befc:	441a      	add	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	7858      	ldrb	r0, [r3, #1]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6a1a      	ldr	r2, [r3, #32]
 800bf10:	2301      	movs	r3, #1
 800bf12:	f7fd ff53 	bl	8009dbc <disk_read>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <f_open+0x362>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bf22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <f_open+0x370>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fe f8b2 	bl	800a0a2 <unlock_fs>
 800bf3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3768      	adds	r7, #104	; 0x68
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b08c      	sub	sp, #48	; 0x30
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	60b9      	str	r1, [r7, #8]
 800bf54:	607a      	str	r2, [r7, #4]
 800bf56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f107 0210 	add.w	r2, r7, #16
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff fd7c 	bl	800ba68 <validate>
 800bf70:	4603      	mov	r3, r0
 800bf72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d107      	bne.n	800bf8e <f_write+0x44>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	7d5b      	ldrb	r3, [r3, #21]
 800bf82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bf86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <f_write+0x58>
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bf94:	4611      	mov	r1, r2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe f883 	bl	800a0a2 <unlock_fs>
 800bf9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfa0:	e173      	b.n	800c28a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	7d1b      	ldrb	r3, [r3, #20]
 800bfa6:	f003 0302 	and.w	r3, r3, #2
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <f_write+0x72>
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2107      	movs	r1, #7
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fe f875 	bl	800a0a2 <unlock_fs>
 800bfb8:	2307      	movs	r3, #7
 800bfba:	e166      	b.n	800c28a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	699a      	ldr	r2, [r3, #24]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	441a      	add	r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	f080 814b 	bcs.w	800c264 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	43db      	mvns	r3, r3
 800bfd4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bfd6:	e145      	b.n	800c264 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 8101 	bne.w	800c1e8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	0a5b      	lsrs	r3, r3, #9
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	8952      	ldrh	r2, [r2, #10]
 800bff0:	3a01      	subs	r2, #1
 800bff2:	4013      	ands	r3, r2
 800bff4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d14d      	bne.n	800c098 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10c      	bne.n	800c01e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d11a      	bne.n	800c046 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2100      	movs	r1, #0
 800c014:	4618      	mov	r0, r3
 800c016:	f7fe fcbb 	bl	800a990 <create_chain>
 800c01a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c01c:	e013      	b.n	800c046 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	2b00      	cmp	r3, #0
 800c024:	d007      	beq.n	800c036 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	4619      	mov	r1, r3
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f7fe fd47 	bl	800aac0 <clmt_clust>
 800c032:	62b8      	str	r0, [r7, #40]	; 0x28
 800c034:	e007      	b.n	800c046 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	69db      	ldr	r3, [r3, #28]
 800c03c:	4619      	mov	r1, r3
 800c03e:	4610      	mov	r0, r2
 800c040:	f7fe fca6 	bl	800a990 <create_chain>
 800c044:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 8110 	beq.w	800c26e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	2b01      	cmp	r3, #1
 800c052:	d109      	bne.n	800c068 <f_write+0x11e>
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2202      	movs	r2, #2
 800c058:	755a      	strb	r2, [r3, #21]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2102      	movs	r1, #2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fe f81f 	bl	800a0a2 <unlock_fs>
 800c064:	2302      	movs	r3, #2
 800c066:	e110      	b.n	800c28a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d109      	bne.n	800c084 <f_write+0x13a>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	755a      	strb	r2, [r3, #21]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2101      	movs	r1, #1
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe f811 	bl	800a0a2 <unlock_fs>
 800c080:	2301      	movs	r3, #1
 800c082:	e102      	b.n	800c28a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c088:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d102      	bne.n	800c098 <f_write+0x14e>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c096:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	7d1b      	ldrb	r3, [r3, #20]
 800c09c:	b25b      	sxtb	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da1d      	bge.n	800c0de <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	7858      	ldrb	r0, [r3, #1]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6a1a      	ldr	r2, [r3, #32]
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	f7fd fea3 	bl	8009dfc <disk_write>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d009      	beq.n	800c0d0 <f_write+0x186>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	755a      	strb	r2, [r3, #21]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fd ffeb 	bl	800a0a2 <unlock_fs>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e0dc      	b.n	800c28a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	7d1b      	ldrb	r3, [r3, #20]
 800c0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	f7fe fa42 	bl	800a570 <clust2sect>
 800c0ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d109      	bne.n	800c108 <f_write+0x1be>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	755a      	strb	r2, [r3, #21]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fd ffcf 	bl	800a0a2 <unlock_fs>
 800c104:	2302      	movs	r3, #2
 800c106:	e0c0      	b.n	800c28a <f_write+0x340>
			sect += csect;
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	4413      	add	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	0a5b      	lsrs	r3, r3, #9
 800c114:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d041      	beq.n	800c1a0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	4413      	add	r3, r2
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	8952      	ldrh	r2, [r2, #10]
 800c126:	4293      	cmp	r3, r2
 800c128:	d905      	bls.n	800c136 <f_write+0x1ec>
					cc = fs->csize - csect;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	895b      	ldrh	r3, [r3, #10]
 800c12e:	461a      	mov	r2, r3
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	7858      	ldrb	r0, [r3, #1]
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	69f9      	ldr	r1, [r7, #28]
 800c140:	f7fd fe5c 	bl	8009dfc <disk_write>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <f_write+0x214>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2201      	movs	r2, #1
 800c14e:	755a      	strb	r2, [r3, #21]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2101      	movs	r1, #1
 800c154:	4618      	mov	r0, r3
 800c156:	f7fd ffa4 	bl	800a0a2 <unlock_fs>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e095      	b.n	800c28a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6a1a      	ldr	r2, [r3, #32]
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	6a3a      	ldr	r2, [r7, #32]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d915      	bls.n	800c198 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a1a      	ldr	r2, [r3, #32]
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	025b      	lsls	r3, r3, #9
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	4413      	add	r3, r2
 800c180:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c184:	4619      	mov	r1, r3
 800c186:	f7fd fef9 	bl	8009f7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	7d1b      	ldrb	r3, [r3, #20]
 800c18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c192:	b2da      	uxtb	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	025b      	lsls	r3, r3, #9
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c19e:	e044      	b.n	800c22a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d01b      	beq.n	800c1e2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	699a      	ldr	r2, [r3, #24]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d215      	bcs.n	800c1e2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	7858      	ldrb	r0, [r3, #1]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	697a      	ldr	r2, [r7, #20]
 800c1c4:	f7fd fdfa 	bl	8009dbc <disk_read>
 800c1c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	755a      	strb	r2, [r3, #21]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fd ff62 	bl	800a0a2 <unlock_fs>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e053      	b.n	800c28a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c1f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d901      	bls.n	800c202 <f_write+0x2b8>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c210:	4413      	add	r3, r2
 800c212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c214:	69f9      	ldr	r1, [r7, #28]
 800c216:	4618      	mov	r0, r3
 800c218:	f7fd feb0 	bl	8009f7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	7d1b      	ldrb	r3, [r3, #20]
 800c220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c224:	b2da      	uxtb	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	4413      	add	r3, r2
 800c230:	61fb      	str	r3, [r7, #28]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	699a      	ldr	r2, [r3, #24]
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	441a      	add	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	619a      	str	r2, [r3, #24]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	429a      	cmp	r2, r3
 800c248:	bf38      	it	cc
 800c24a:	461a      	movcc	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	60da      	str	r2, [r3, #12]
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	441a      	add	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f47f aeb6 	bne.w	800bfd8 <f_write+0x8e>
 800c26c:	e000      	b.n	800c270 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c26e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	7d1b      	ldrb	r3, [r3, #20]
 800c274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2100      	movs	r1, #0
 800c282:	4618      	mov	r0, r3
 800c284:	f7fd ff0d 	bl	800a0a2 <unlock_fs>
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3730      	adds	r7, #48	; 0x30
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b086      	sub	sp, #24
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f107 0208 	add.w	r2, r7, #8
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff fbe0 	bl	800ba68 <validate>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d16d      	bne.n	800c38e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7d1b      	ldrb	r3, [r3, #20]
 800c2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d067      	beq.n	800c38e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7d1b      	ldrb	r3, [r3, #20]
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da1a      	bge.n	800c2fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	7858      	ldrb	r0, [r3, #1]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1a      	ldr	r2, [r3, #32]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	f7fd fd90 	bl	8009dfc <disk_write>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d006      	beq.n	800c2f0 <f_sync+0x5e>
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2101      	movs	r1, #1
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fd fedb 	bl	800a0a2 <unlock_fs>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e055      	b.n	800c39c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	7d1b      	ldrb	r3, [r3, #20]
 800c2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2fe:	f7fb fe9b 	bl	8008038 <get_fattime>
 800c302:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30a:	4619      	mov	r1, r3
 800c30c:	4610      	mov	r0, r2
 800c30e:	f7fe f893 	bl	800a438 <move_window>
 800c312:	4603      	mov	r3, r0
 800c314:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d138      	bne.n	800c38e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c320:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	330b      	adds	r3, #11
 800c326:	781a      	ldrb	r2, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	330b      	adds	r3, #11
 800c32c:	f042 0220 	orr.w	r2, r2, #32
 800c330:	b2d2      	uxtb	r2, r2
 800c332:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	461a      	mov	r2, r3
 800c33e:	68f9      	ldr	r1, [r7, #12]
 800c340:	f7fe fd98 	bl	800ae74 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f103 021c 	add.w	r2, r3, #28
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	4619      	mov	r1, r3
 800c350:	4610      	mov	r0, r2
 800c352:	f7fd fde7 	bl	8009f24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	3316      	adds	r3, #22
 800c35a:	6939      	ldr	r1, [r7, #16]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fd fde1 	bl	8009f24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3312      	adds	r3, #18
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fd fdc0 	bl	8009eee <st_word>
					fs->wflag = 1;
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2201      	movs	r2, #1
 800c372:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe f88c 	bl	800a494 <sync_fs>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	7d1b      	ldrb	r3, [r3, #20]
 800c384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	7dfa      	ldrb	r2, [r7, #23]
 800c392:	4611      	mov	r1, r2
 800c394:	4618      	mov	r0, r3
 800c396:	f7fd fe84 	bl	800a0a2 <unlock_fs>
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b090      	sub	sp, #64	; 0x40
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f107 0208 	add.w	r2, r7, #8
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff fb56 	bl	800ba68 <validate>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c3c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d103      	bne.n	800c3d2 <f_lseek+0x2e>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	7d5b      	ldrb	r3, [r3, #21]
 800c3ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c3d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d009      	beq.n	800c3ee <f_lseek+0x4a>
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fd fe5d 	bl	800a0a2 <unlock_fs>
 800c3e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c3ec:	e229      	b.n	800c842 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 80ea 	beq.w	800c5cc <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fe:	d164      	bne.n	800c4ca <f_lseek+0x126>
			tbl = fp->cltbl;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	1d1a      	adds	r2, r3, #4
 800c40a:	627a      	str	r2, [r7, #36]	; 0x24
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	2302      	movs	r3, #2
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d044      	beq.n	800c4aa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	613b      	str	r3, [r7, #16]
 800c424:	2300      	movs	r3, #0
 800c426:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	3302      	adds	r3, #2
 800c42c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	60fb      	str	r3, [r7, #12]
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	3301      	adds	r3, #1
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe f8b6 	bl	800a5ae <get_fat>
 800c442:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	2b01      	cmp	r3, #1
 800c448:	d809      	bhi.n	800c45e <f_lseek+0xba>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2202      	movs	r2, #2
 800c44e:	755a      	strb	r2, [r3, #21]
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2102      	movs	r1, #2
 800c454:	4618      	mov	r0, r3
 800c456:	f7fd fe24 	bl	800a0a2 <unlock_fs>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e1f1      	b.n	800c842 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c464:	d109      	bne.n	800c47a <f_lseek+0xd6>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	755a      	strb	r2, [r3, #21]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2101      	movs	r1, #1
 800c470:	4618      	mov	r0, r3
 800c472:	f7fd fe16 	bl	800a0a2 <unlock_fs>
 800c476:	2301      	movs	r3, #1
 800c478:	e1e3      	b.n	800c842 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3301      	adds	r3, #1
 800c47e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c480:	429a      	cmp	r2, r3
 800c482:	d0d4      	beq.n	800c42e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d809      	bhi.n	800c4a0 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	1d1a      	adds	r2, r3, #4
 800c490:	627a      	str	r2, [r7, #36]	; 0x24
 800c492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	1d1a      	adds	r2, r3, #4
 800c49a:	627a      	str	r2, [r7, #36]	; 0x24
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	699b      	ldr	r3, [r3, #24]
 800c4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d3ba      	bcc.n	800c420 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d803      	bhi.n	800c4c2 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	2200      	movs	r2, #0
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	e1b6      	b.n	800c830 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c4c2:	2311      	movs	r3, #17
 800c4c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c4c8:	e1b2      	b.n	800c830 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d902      	bls.n	800c4da <f_lseek+0x136>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 81a4 	beq.w	800c830 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7fe fae6 	bl	800aac0 <clmt_clust>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fe f834 	bl	800a570 <clust2sect>
 800c508:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d109      	bne.n	800c524 <f_lseek+0x180>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2202      	movs	r2, #2
 800c514:	755a      	strb	r2, [r3, #21]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	2102      	movs	r1, #2
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fd fdc1 	bl	800a0a2 <unlock_fs>
 800c520:	2302      	movs	r3, #2
 800c522:	e18e      	b.n	800c842 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	3b01      	subs	r3, #1
 800c528:	0a5b      	lsrs	r3, r3, #9
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	8952      	ldrh	r2, [r2, #10]
 800c52e:	3a01      	subs	r2, #1
 800c530:	4013      	ands	r3, r2
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	4413      	add	r3, r2
 800c536:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c540:	2b00      	cmp	r3, #0
 800c542:	f000 8175 	beq.w	800c830 <f_lseek+0x48c>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	f000 816f 	beq.w	800c830 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7d1b      	ldrb	r3, [r3, #20]
 800c556:	b25b      	sxtb	r3, r3
 800c558:	2b00      	cmp	r3, #0
 800c55a:	da1d      	bge.n	800c598 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	7858      	ldrb	r0, [r3, #1]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a1a      	ldr	r2, [r3, #32]
 800c56a:	2301      	movs	r3, #1
 800c56c:	f7fd fc46 	bl	8009dfc <disk_write>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d009      	beq.n	800c58a <f_lseek+0x1e6>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	755a      	strb	r2, [r3, #21]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	2101      	movs	r1, #1
 800c580:	4618      	mov	r0, r3
 800c582:	f7fd fd8e 	bl	800a0a2 <unlock_fs>
 800c586:	2301      	movs	r3, #1
 800c588:	e15b      	b.n	800c842 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7d1b      	ldrb	r3, [r3, #20]
 800c58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c592:	b2da      	uxtb	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	7858      	ldrb	r0, [r3, #1]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	f7fd fc09 	bl	8009dbc <disk_read>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d009      	beq.n	800c5c4 <f_lseek+0x220>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	755a      	strb	r2, [r3, #21]
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd fd71 	bl	800a0a2 <unlock_fs>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e13e      	b.n	800c842 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	621a      	str	r2, [r3, #32]
 800c5ca:	e131      	b.n	800c830 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d908      	bls.n	800c5e8 <f_lseek+0x244>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	7d1b      	ldrb	r3, [r3, #20]
 800c5da:	f003 0302 	and.w	r3, r3, #2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d102      	bne.n	800c5e8 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 80c0 	beq.w	800c780 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	895b      	ldrh	r3, [r3, #10]
 800c604:	025b      	lsls	r3, r3, #9
 800c606:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d01b      	beq.n	800c646 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	1e5a      	subs	r2, r3, #1
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	fbb2 f2f3 	udiv	r2, r2, r3
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	1e59      	subs	r1, r3, #1
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c622:	429a      	cmp	r2, r3
 800c624:	d30f      	bcc.n	800c646 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	1e5a      	subs	r2, r3, #1
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	425b      	negs	r3, r3
 800c62e:	401a      	ands	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	63bb      	str	r3, [r7, #56]	; 0x38
 800c644:	e02c      	b.n	800c6a0 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d123      	bne.n	800c69a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2100      	movs	r1, #0
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe f99a 	bl	800a990 <create_chain>
 800c65c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	2b01      	cmp	r3, #1
 800c662:	d109      	bne.n	800c678 <f_lseek+0x2d4>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2202      	movs	r2, #2
 800c668:	755a      	strb	r2, [r3, #21]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2102      	movs	r1, #2
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fd fd17 	bl	800a0a2 <unlock_fs>
 800c674:	2302      	movs	r3, #2
 800c676:	e0e4      	b.n	800c842 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67e:	d109      	bne.n	800c694 <f_lseek+0x2f0>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	755a      	strb	r2, [r3, #21]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2101      	movs	r1, #1
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fd fd09 	bl	800a0a2 <unlock_fs>
 800c690:	2301      	movs	r3, #1
 800c692:	e0d6      	b.n	800c842 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c698:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d06c      	beq.n	800c780 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800c6a6:	e044      	b.n	800c732 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	603b      	str	r3, [r7, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	699a      	ldr	r2, [r3, #24]
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	441a      	add	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	7d1b      	ldrb	r3, [r3, #20]
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe f95f 	bl	800a990 <create_chain>
 800c6d2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d108      	bne.n	800c6ec <f_lseek+0x348>
							ofs = 0; break;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	603b      	str	r3, [r7, #0]
 800c6de:	e02c      	b.n	800c73a <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fd ff62 	bl	800a5ae <get_fat>
 800c6ea:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f2:	d109      	bne.n	800c708 <f_lseek+0x364>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	755a      	strb	r2, [r3, #21]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fd fccf 	bl	800a0a2 <unlock_fs>
 800c704:	2301      	movs	r3, #1
 800c706:	e09c      	b.n	800c842 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d904      	bls.n	800c718 <f_lseek+0x374>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c714:	429a      	cmp	r2, r3
 800c716:	d309      	bcc.n	800c72c <f_lseek+0x388>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	755a      	strb	r2, [r3, #21]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2102      	movs	r1, #2
 800c722:	4618      	mov	r0, r3
 800c724:	f7fd fcbd 	bl	800a0a2 <unlock_fs>
 800c728:	2302      	movs	r3, #2
 800c72a:	e08a      	b.n	800c842 <f_lseek+0x49e>
					fp->clust = clst;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c730:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	429a      	cmp	r2, r3
 800c738:	d8b6      	bhi.n	800c6a8 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	441a      	add	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d017      	beq.n	800c780 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c754:	4618      	mov	r0, r3
 800c756:	f7fd ff0b 	bl	800a570 <clust2sect>
 800c75a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <f_lseek+0x3d2>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2202      	movs	r2, #2
 800c766:	755a      	strb	r2, [r3, #21]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2102      	movs	r1, #2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fd fc98 	bl	800a0a2 <unlock_fs>
 800c772:	2302      	movs	r3, #2
 800c774:	e065      	b.n	800c842 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	0a5b      	lsrs	r3, r3, #9
 800c77a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c77c:	4413      	add	r3, r2
 800c77e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699a      	ldr	r2, [r3, #24]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d90a      	bls.n	800c7a2 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699a      	ldr	r2, [r3, #24]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c79c:	b2da      	uxtb	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d040      	beq.n	800c830 <f_lseek+0x48c>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d03b      	beq.n	800c830 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	7d1b      	ldrb	r3, [r3, #20]
 800c7bc:	b25b      	sxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	da1d      	bge.n	800c7fe <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	7858      	ldrb	r0, [r3, #1]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1a      	ldr	r2, [r3, #32]
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f7fd fb13 	bl	8009dfc <disk_write>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d009      	beq.n	800c7f0 <f_lseek+0x44c>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	755a      	strb	r2, [r3, #21]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2101      	movs	r1, #1
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fd fc5b 	bl	800a0a2 <unlock_fs>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e028      	b.n	800c842 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	7d1b      	ldrb	r3, [r3, #20]
 800c7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	7858      	ldrb	r0, [r3, #1]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c808:	2301      	movs	r3, #1
 800c80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c80c:	f7fd fad6 	bl	8009dbc <disk_read>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d009      	beq.n	800c82a <f_lseek+0x486>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	755a      	strb	r2, [r3, #21]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2101      	movs	r1, #1
 800c820:	4618      	mov	r0, r3
 800c822:	f7fd fc3e 	bl	800a0a2 <unlock_fs>
 800c826:	2301      	movs	r3, #1
 800c828:	e00b      	b.n	800c842 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c82e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fd fc32 	bl	800a0a2 <unlock_fs>
 800c83e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c842:	4618      	mov	r0, r3
 800c844:	3740      	adds	r7, #64	; 0x40
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b086      	sub	sp, #24
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <f_opendir+0x14>
 800c85a:	2309      	movs	r3, #9
 800c85c:	e06a      	b.n	800c934 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c862:	f107 010c 	add.w	r1, r7, #12
 800c866:	463b      	mov	r3, r7
 800c868:	2200      	movs	r2, #0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fe fea8 	bl	800b5c0 <find_volume>
 800c870:	4603      	mov	r3, r0
 800c872:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c874:	7dfb      	ldrb	r3, [r7, #23]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d14f      	bne.n	800c91a <f_opendir+0xd0>
		obj->fs = fs;
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	4619      	mov	r1, r3
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7fe fd8f 	bl	800b3a8 <follow_path>
 800c88a:	4603      	mov	r3, r0
 800c88c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d13d      	bne.n	800c910 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c89a:	b25b      	sxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	db12      	blt.n	800c8c6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	799b      	ldrb	r3, [r3, #6]
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00a      	beq.n	800c8c2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f7fe fabe 	bl	800ae36 <ld_clust>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	609a      	str	r2, [r3, #8]
 800c8c0:	e001      	b.n	800c8c6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c8c2:	2305      	movs	r3, #5
 800c8c4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d121      	bne.n	800c910 <f_opendir+0xc6>
				obj->id = fs->id;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	88da      	ldrh	r2, [r3, #6]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7fe f926 	bl	800ab28 <dir_sdi>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d114      	bne.n	800c910 <f_opendir+0xc6>
					if (obj->sclust) {
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00d      	beq.n	800c90a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fd fc6f 	bl	800a1d4 <inc_lock>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <f_opendir+0xc6>
 800c904:	2312      	movs	r3, #18
 800c906:	75fb      	strb	r3, [r7, #23]
 800c908:	e002      	b.n	800c910 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2200      	movs	r2, #0
 800c90e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	2b04      	cmp	r3, #4
 800c914:	d101      	bne.n	800c91a <f_opendir+0xd0>
 800c916:	2305      	movs	r3, #5
 800c918:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <f_opendir+0xdc>
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	7dfa      	ldrb	r2, [r7, #23]
 800c92a:	4611      	mov	r1, r2
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fd fbb8 	bl	800a0a2 <unlock_fs>
 800c932:	7dfb      	ldrb	r3, [r7, #23]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3718      	adds	r7, #24
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f107 0208 	add.w	r2, r7, #8
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7ff f88b 	bl	800ba68 <validate>
 800c952:	4603      	mov	r3, r0
 800c954:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d115      	bne.n	800c988 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d006      	beq.n	800c972 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fd fcc1 	bl	800a2f0 <dec_lock>
 800c96e:	4603      	mov	r3, r0
 800c970:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f7fd fb8d 	bl	800a0a2 <unlock_fs>
#endif
	}
	return res;
 800c988:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f107 0208 	add.w	r2, r7, #8
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7ff f85f 	bl	800ba68 <validate>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d126      	bne.n	800ca02 <f_readdir+0x70>
		if (!fno) {
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d106      	bne.n	800c9c8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7fe f8b3 	bl	800ab28 <dir_sdi>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
 800c9c6:	e01c      	b.n	800ca02 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7fe fa72 	bl	800aeb4 <dir_read>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
 800c9d6:	2b04      	cmp	r3, #4
 800c9d8:	d101      	bne.n	800c9de <f_readdir+0x4c>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10e      	bne.n	800ca02 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7fe fb48 	bl	800b07c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7fe f915 	bl	800ac1e <dir_next>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d101      	bne.n	800ca02 <f_readdir+0x70>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	7bfa      	ldrb	r2, [r7, #15]
 800ca06:	4611      	mov	r1, r2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fd fb4a 	bl	800a0a2 <unlock_fs>
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff ffb4 	bl	800c992 <f_readdir>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d114      	bne.n	800ca5e <f_findnext+0x46>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d011      	beq.n	800ca5e <f_findnext+0x46>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	7a5b      	ldrb	r3, [r3, #9]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00d      	beq.n	800ca5e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	f103 0109 	add.w	r1, r3, #9
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f7fe fb9a 	bl	800b188 <pattern_matching>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d100      	bne.n	800ca5c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800ca5a:	e7e2      	b.n	800ca22 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800ca5c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	683a      	ldr	r2, [r7, #0]
 800ca7a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff fee3 	bl	800c84a <f_opendir>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d105      	bne.n	800ca9a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f7ff ffc1 	bl	800ca18 <f_findnext>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	4613      	mov	r3, r2
 800cab0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cab2:	2301      	movs	r3, #1
 800cab4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800caba:	4b1f      	ldr	r3, [pc, #124]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cabc:	7a5b      	ldrb	r3, [r3, #9]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d131      	bne.n	800cb28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cac4:	4b1c      	ldr	r3, [pc, #112]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cac6:	7a5b      	ldrb	r3, [r3, #9]
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	461a      	mov	r2, r3
 800cacc:	4b1a      	ldr	r3, [pc, #104]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cace:	2100      	movs	r1, #0
 800cad0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cad2:	4b19      	ldr	r3, [pc, #100]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cad4:	7a5b      	ldrb	r3, [r3, #9]
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	4a17      	ldr	r2, [pc, #92]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cae2:	4b15      	ldr	r3, [pc, #84]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cae4:	7a5b      	ldrb	r3, [r3, #9]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	461a      	mov	r2, r3
 800caea:	4b13      	ldr	r3, [pc, #76]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800caec:	4413      	add	r3, r2
 800caee:	79fa      	ldrb	r2, [r7, #7]
 800caf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800caf2:	4b11      	ldr	r3, [pc, #68]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800caf4:	7a5b      	ldrb	r3, [r3, #9]
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	b2d1      	uxtb	r1, r2
 800cafc:	4a0e      	ldr	r2, [pc, #56]	; (800cb38 <FATFS_LinkDriverEx+0x94>)
 800cafe:	7251      	strb	r1, [r2, #9]
 800cb00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb02:	7dbb      	ldrb	r3, [r7, #22]
 800cb04:	3330      	adds	r3, #48	; 0x30
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	223a      	movs	r2, #58	; 0x3a
 800cb12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	3302      	adds	r3, #2
 800cb18:	222f      	movs	r2, #47	; 0x2f
 800cb1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	3303      	adds	r3, #3
 800cb20:	2200      	movs	r2, #0
 800cb22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	20000248 	.word	0x20000248

0800cb3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb46:	2200      	movs	r2, #0
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7ff ffaa 	bl	800caa4 <FATFS_LinkDriverEx>
 800cb50:	4603      	mov	r3, r0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	4603      	mov	r3, r0
 800cb62:	6039      	str	r1, [r7, #0]
 800cb64:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cb66:	2200      	movs	r2, #0
 800cb68:	2101      	movs	r1, #1
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	f000 fb14 	bl	800d198 <osSemaphoreNew>
 800cb70:	4602      	mov	r2, r0
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	bf14      	ite	ne
 800cb7e:	2301      	movne	r3, #1
 800cb80:	2300      	moveq	r3, #0
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	60fb      	str	r3, [r7, #12]

    return ret;
 800cb86:	68fb      	ldr	r3, [r7, #12]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 fc59 	bl	800d450 <osSemaphoreDelete>
#endif
    return 1;
 800cb9e:	2301      	movs	r3, #1
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cbb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fb8b 	bl	800d2d4 <osSemaphoreAcquire>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fbe0 	bl	800d3a0 <osSemaphoreRelease>
#endif
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cbec:	bf00      	nop
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbfe:	f3ef 8305 	mrs	r3, IPSR
 800cc02:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10f      	bne.n	800cc2a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc0e:	607b      	str	r3, [r7, #4]
  return(result);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d105      	bne.n	800cc22 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc16:	f3ef 8311 	mrs	r3, BASEPRI
 800cc1a:	603b      	str	r3, [r7, #0]
  return(result);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d007      	beq.n	800cc32 <osKernelInitialize+0x3a>
 800cc22:	4b0e      	ldr	r3, [pc, #56]	; (800cc5c <osKernelInitialize+0x64>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d103      	bne.n	800cc32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cc2a:	f06f 0305 	mvn.w	r3, #5
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	e00c      	b.n	800cc4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc32:	4b0a      	ldr	r3, [pc, #40]	; (800cc5c <osKernelInitialize+0x64>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d105      	bne.n	800cc46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc3a:	4b08      	ldr	r3, [pc, #32]	; (800cc5c <osKernelInitialize+0x64>)
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	e002      	b.n	800cc4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	20000254 	.word	0x20000254

0800cc60 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800cc66:	f002 fdb1 	bl	800f7cc <xTaskGetSchedulerState>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <osKernelGetState+0x1a>
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d105      	bne.n	800cc80 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800cc74:	2302      	movs	r3, #2
 800cc76:	607b      	str	r3, [r7, #4]
      break;
 800cc78:	e00c      	b.n	800cc94 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	607b      	str	r3, [r7, #4]
      break;
 800cc7e:	e009      	b.n	800cc94 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800cc80:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <osKernelGetState+0x40>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d102      	bne.n	800cc8e <osKernelGetState+0x2e>
        state = osKernelReady;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800cc8c:	e001      	b.n	800cc92 <osKernelGetState+0x32>
        state = osKernelInactive;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	607b      	str	r3, [r7, #4]
      break;
 800cc92:	bf00      	nop
  }

  return (state);
 800cc94:	687b      	ldr	r3, [r7, #4]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	20000254 	.word	0x20000254

0800cca4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccaa:	f3ef 8305 	mrs	r3, IPSR
 800ccae:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10f      	bne.n	800ccd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccba:	607b      	str	r3, [r7, #4]
  return(result);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d105      	bne.n	800ccce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccc2:	f3ef 8311 	mrs	r3, BASEPRI
 800ccc6:	603b      	str	r3, [r7, #0]
  return(result);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d007      	beq.n	800ccde <osKernelStart+0x3a>
 800ccce:	4b0f      	ldr	r3, [pc, #60]	; (800cd0c <osKernelStart+0x68>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d103      	bne.n	800ccde <osKernelStart+0x3a>
    stat = osErrorISR;
 800ccd6:	f06f 0305 	mvn.w	r3, #5
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	e010      	b.n	800cd00 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ccde:	4b0b      	ldr	r3, [pc, #44]	; (800cd0c <osKernelStart+0x68>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d109      	bne.n	800ccfa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cce6:	f7ff ff7f 	bl	800cbe8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ccea:	4b08      	ldr	r3, [pc, #32]	; (800cd0c <osKernelStart+0x68>)
 800ccec:	2202      	movs	r2, #2
 800ccee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ccf0:	f002 f8fe 	bl	800eef0 <vTaskStartScheduler>
      stat = osOK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	e002      	b.n	800cd00 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cd00:	68fb      	ldr	r3, [r7, #12]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20000254 	.word	0x20000254

0800cd10 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd16:	f3ef 8305 	mrs	r3, IPSR
 800cd1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10f      	bne.n	800cd42 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd22:	f3ef 8310 	mrs	r3, PRIMASK
 800cd26:	607b      	str	r3, [r7, #4]
  return(result);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d105      	bne.n	800cd3a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd2e:	f3ef 8311 	mrs	r3, BASEPRI
 800cd32:	603b      	str	r3, [r7, #0]
  return(result);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d007      	beq.n	800cd4a <osKernelGetTickCount+0x3a>
 800cd3a:	4b08      	ldr	r3, [pc, #32]	; (800cd5c <osKernelGetTickCount+0x4c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d103      	bne.n	800cd4a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cd42:	f002 f9f9 	bl	800f138 <xTaskGetTickCountFromISR>
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	e002      	b.n	800cd50 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cd4a:	f002 f9e5 	bl	800f118 <xTaskGetTickCount>
 800cd4e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cd50:	68fb      	ldr	r3, [r7, #12]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20000254 	.word	0x20000254

0800cd60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b090      	sub	sp, #64	; 0x40
 800cd64:	af04      	add	r7, sp, #16
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd70:	f3ef 8305 	mrs	r3, IPSR
 800cd74:	61fb      	str	r3, [r7, #28]
  return(result);
 800cd76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f040 808f 	bne.w	800ce9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd7e:	f3ef 8310 	mrs	r3, PRIMASK
 800cd82:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd8a:	f3ef 8311 	mrs	r3, BASEPRI
 800cd8e:	617b      	str	r3, [r7, #20]
  return(result);
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <osThreadNew+0x3e>
 800cd96:	4b44      	ldr	r3, [pc, #272]	; (800cea8 <osThreadNew+0x148>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d07e      	beq.n	800ce9c <osThreadNew+0x13c>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d07b      	beq.n	800ce9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cda4:	2380      	movs	r3, #128	; 0x80
 800cda6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cda8:	2318      	movs	r3, #24
 800cdaa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cdac:	2300      	movs	r3, #0
 800cdae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d045      	beq.n	800ce48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <osThreadNew+0x6a>
        name = attr->name;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d008      	beq.n	800cdf0 <osThreadNew+0x90>
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	2b38      	cmp	r3, #56	; 0x38
 800cde2:	d805      	bhi.n	800cdf0 <osThreadNew+0x90>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d001      	beq.n	800cdf4 <osThreadNew+0x94>
        return (NULL);
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e054      	b.n	800ce9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d003      	beq.n	800ce04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	695b      	ldr	r3, [r3, #20]
 800ce00:	089b      	lsrs	r3, r3, #2
 800ce02:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00e      	beq.n	800ce2a <osThreadNew+0xca>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	2b5b      	cmp	r3, #91	; 0x5b
 800ce12:	d90a      	bls.n	800ce2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d006      	beq.n	800ce2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d002      	beq.n	800ce2a <osThreadNew+0xca>
        mem = 1;
 800ce24:	2301      	movs	r3, #1
 800ce26:	623b      	str	r3, [r7, #32]
 800ce28:	e010      	b.n	800ce4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10c      	bne.n	800ce4c <osThreadNew+0xec>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d108      	bne.n	800ce4c <osThreadNew+0xec>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d104      	bne.n	800ce4c <osThreadNew+0xec>
          mem = 0;
 800ce42:	2300      	movs	r3, #0
 800ce44:	623b      	str	r3, [r7, #32]
 800ce46:	e001      	b.n	800ce4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ce4c:	6a3b      	ldr	r3, [r7, #32]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d110      	bne.n	800ce74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce5a:	9202      	str	r2, [sp, #8]
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f001 fe65 	bl	800eb38 <xTaskCreateStatic>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	613b      	str	r3, [r7, #16]
 800ce72:	e013      	b.n	800ce9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d110      	bne.n	800ce9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	f107 0310 	add.w	r3, r7, #16
 800ce82:	9301      	str	r3, [sp, #4]
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f001 feb3 	bl	800ebf8 <xTaskCreate>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d001      	beq.n	800ce9c <osThreadNew+0x13c>
          hTask = NULL;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce9c:	693b      	ldr	r3, [r7, #16]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3730      	adds	r7, #48	; 0x30
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20000254 	.word	0x20000254

0800ceac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceb4:	f3ef 8305 	mrs	r3, IPSR
 800ceb8:	613b      	str	r3, [r7, #16]
  return(result);
 800ceba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10f      	bne.n	800cee0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cec0:	f3ef 8310 	mrs	r3, PRIMASK
 800cec4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d105      	bne.n	800ced8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cecc:	f3ef 8311 	mrs	r3, BASEPRI
 800ced0:	60bb      	str	r3, [r7, #8]
  return(result);
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d007      	beq.n	800cee8 <osDelay+0x3c>
 800ced8:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <osDelay+0x58>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d103      	bne.n	800cee8 <osDelay+0x3c>
    stat = osErrorISR;
 800cee0:	f06f 0305 	mvn.w	r3, #5
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	e007      	b.n	800cef8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f001 ffc6 	bl	800ee84 <vTaskDelay>
    }
  }

  return (stat);
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20000254 	.word	0x20000254

0800cf08 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08a      	sub	sp, #40	; 0x28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf14:	f3ef 8305 	mrs	r3, IPSR
 800cf18:	613b      	str	r3, [r7, #16]
  return(result);
 800cf1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f040 8085 	bne.w	800d02c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf22:	f3ef 8310 	mrs	r3, PRIMASK
 800cf26:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d105      	bne.n	800cf3a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf2e:	f3ef 8311 	mrs	r3, BASEPRI
 800cf32:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <osMutexNew+0x3a>
 800cf3a:	4b3f      	ldr	r3, [pc, #252]	; (800d038 <osMutexNew+0x130>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d074      	beq.n	800d02c <osMutexNew+0x124>
    if (attr != NULL) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	623b      	str	r3, [r7, #32]
 800cf4e:	e001      	b.n	800cf54 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cf50:	2300      	movs	r3, #0
 800cf52:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d002      	beq.n	800cf64 <osMutexNew+0x5c>
      rmtx = 1U;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	61fb      	str	r3, [r7, #28]
 800cf62:	e001      	b.n	800cf68 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	f003 0308 	and.w	r3, r3, #8
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d15c      	bne.n	800d02c <osMutexNew+0x124>
      mem = -1;
 800cf72:	f04f 33ff 	mov.w	r3, #4294967295
 800cf76:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d015      	beq.n	800cfaa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d006      	beq.n	800cf94 <osMutexNew+0x8c>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	2b4f      	cmp	r3, #79	; 0x4f
 800cf8c:	d902      	bls.n	800cf94 <osMutexNew+0x8c>
          mem = 1;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	61bb      	str	r3, [r7, #24]
 800cf92:	e00c      	b.n	800cfae <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d108      	bne.n	800cfae <osMutexNew+0xa6>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d104      	bne.n	800cfae <osMutexNew+0xa6>
            mem = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	61bb      	str	r3, [r7, #24]
 800cfa8:	e001      	b.n	800cfae <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d112      	bne.n	800cfda <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d007      	beq.n	800cfca <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	2004      	movs	r0, #4
 800cfc2:	f000 fe4c 	bl	800dc5e <xQueueCreateMutexStatic>
 800cfc6:	6278      	str	r0, [r7, #36]	; 0x24
 800cfc8:	e016      	b.n	800cff8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	2001      	movs	r0, #1
 800cfd2:	f000 fe44 	bl	800dc5e <xQueueCreateMutexStatic>
 800cfd6:	6278      	str	r0, [r7, #36]	; 0x24
 800cfd8:	e00e      	b.n	800cff8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10b      	bne.n	800cff8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d004      	beq.n	800cff0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cfe6:	2004      	movs	r0, #4
 800cfe8:	f000 fe21 	bl	800dc2e <xQueueCreateMutex>
 800cfec:	6278      	str	r0, [r7, #36]	; 0x24
 800cfee:	e003      	b.n	800cff8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800cff0:	2001      	movs	r0, #1
 800cff2:	f000 fe1c 	bl	800dc2e <xQueueCreateMutex>
 800cff6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00c      	beq.n	800d018 <osMutexNew+0x110>
        if (attr != NULL) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d003      	beq.n	800d00c <osMutexNew+0x104>
          name = attr->name;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	e001      	b.n	800d010 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d010:	6979      	ldr	r1, [r7, #20]
 800d012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d014:	f001 fd0a 	bl	800ea2c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d006      	beq.n	800d02c <osMutexNew+0x124>
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	f043 0301 	orr.w	r3, r3, #1
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3728      	adds	r7, #40	; 0x28
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20000254 	.word	0x20000254

0800d03c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f023 0301 	bic.w	r3, r3, #1
 800d04c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f003 0301 	and.w	r3, r3, #1
 800d054:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d056:	2300      	movs	r3, #0
 800d058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d05a:	f3ef 8305 	mrs	r3, IPSR
 800d05e:	613b      	str	r3, [r7, #16]
  return(result);
 800d060:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10f      	bne.n	800d086 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d066:	f3ef 8310 	mrs	r3, PRIMASK
 800d06a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d105      	bne.n	800d07e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d072:	f3ef 8311 	mrs	r3, BASEPRI
 800d076:	60bb      	str	r3, [r7, #8]
  return(result);
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d007      	beq.n	800d08e <osMutexAcquire+0x52>
 800d07e:	4b1d      	ldr	r3, [pc, #116]	; (800d0f4 <osMutexAcquire+0xb8>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b02      	cmp	r3, #2
 800d084:	d103      	bne.n	800d08e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d086:	f06f 0305 	mvn.w	r3, #5
 800d08a:	61fb      	str	r3, [r7, #28]
 800d08c:	e02c      	b.n	800d0e8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d094:	f06f 0303 	mvn.w	r3, #3
 800d098:	61fb      	str	r3, [r7, #28]
 800d09a:	e025      	b.n	800d0e8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d011      	beq.n	800d0c6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	69b8      	ldr	r0, [r7, #24]
 800d0a6:	f000 fe2a 	bl	800dcfe <xQueueTakeMutexRecursive>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d01b      	beq.n	800d0e8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d003      	beq.n	800d0be <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d0b6:	f06f 0301 	mvn.w	r3, #1
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	e014      	b.n	800d0e8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d0be:	f06f 0302 	mvn.w	r3, #2
 800d0c2:	61fb      	str	r3, [r7, #28]
 800d0c4:	e010      	b.n	800d0e8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	69b8      	ldr	r0, [r7, #24]
 800d0ca:	f001 f9cf 	bl	800e46c <xQueueSemaphoreTake>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d009      	beq.n	800d0e8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d0da:	f06f 0301 	mvn.w	r3, #1
 800d0de:	61fb      	str	r3, [r7, #28]
 800d0e0:	e002      	b.n	800d0e8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d0e2:	f06f 0302 	mvn.w	r3, #2
 800d0e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d0e8:	69fb      	ldr	r3, [r7, #28]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3720      	adds	r7, #32
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20000254 	.word	0x20000254

0800d0f8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f023 0301 	bic.w	r3, r3, #1
 800d106:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d110:	2300      	movs	r3, #0
 800d112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d114:	f3ef 8305 	mrs	r3, IPSR
 800d118:	613b      	str	r3, [r7, #16]
  return(result);
 800d11a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10f      	bne.n	800d140 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d120:	f3ef 8310 	mrs	r3, PRIMASK
 800d124:	60fb      	str	r3, [r7, #12]
  return(result);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d105      	bne.n	800d138 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d12c:	f3ef 8311 	mrs	r3, BASEPRI
 800d130:	60bb      	str	r3, [r7, #8]
  return(result);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <osMutexRelease+0x50>
 800d138:	4b16      	ldr	r3, [pc, #88]	; (800d194 <osMutexRelease+0x9c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d103      	bne.n	800d148 <osMutexRelease+0x50>
    stat = osErrorISR;
 800d140:	f06f 0305 	mvn.w	r3, #5
 800d144:	61fb      	str	r3, [r7, #28]
 800d146:	e01f      	b.n	800d188 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d103      	bne.n	800d156 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d14e:	f06f 0303 	mvn.w	r3, #3
 800d152:	61fb      	str	r3, [r7, #28]
 800d154:	e018      	b.n	800d188 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d009      	beq.n	800d170 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d15c:	69b8      	ldr	r0, [r7, #24]
 800d15e:	f000 fd99 	bl	800dc94 <xQueueGiveMutexRecursive>
 800d162:	4603      	mov	r3, r0
 800d164:	2b01      	cmp	r3, #1
 800d166:	d00f      	beq.n	800d188 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d168:	f06f 0302 	mvn.w	r3, #2
 800d16c:	61fb      	str	r3, [r7, #28]
 800d16e:	e00b      	b.n	800d188 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d170:	2300      	movs	r3, #0
 800d172:	2200      	movs	r2, #0
 800d174:	2100      	movs	r1, #0
 800d176:	69b8      	ldr	r0, [r7, #24]
 800d178:	f000 fe66 	bl	800de48 <xQueueGenericSend>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d002      	beq.n	800d188 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d182:	f06f 0302 	mvn.w	r3, #2
 800d186:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d188:	69fb      	ldr	r3, [r7, #28]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3720      	adds	r7, #32
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	20000254 	.word	0x20000254

0800d198 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08c      	sub	sp, #48	; 0x30
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1a8:	f3ef 8305 	mrs	r3, IPSR
 800d1ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f040 8087 	bne.w	800d2c4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ba:	617b      	str	r3, [r7, #20]
  return(result);
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d105      	bne.n	800d1ce <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1c2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1c6:	613b      	str	r3, [r7, #16]
  return(result);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <osSemaphoreNew+0x3e>
 800d1ce:	4b40      	ldr	r3, [pc, #256]	; (800d2d0 <osSemaphoreNew+0x138>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d076      	beq.n	800d2c4 <osSemaphoreNew+0x12c>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d073      	beq.n	800d2c4 <osSemaphoreNew+0x12c>
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d86f      	bhi.n	800d2c4 <osSemaphoreNew+0x12c>
    mem = -1;
 800d1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d015      	beq.n	800d21c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d006      	beq.n	800d206 <osSemaphoreNew+0x6e>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	2b4f      	cmp	r3, #79	; 0x4f
 800d1fe:	d902      	bls.n	800d206 <osSemaphoreNew+0x6e>
        mem = 1;
 800d200:	2301      	movs	r3, #1
 800d202:	623b      	str	r3, [r7, #32]
 800d204:	e00c      	b.n	800d220 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d108      	bne.n	800d220 <osSemaphoreNew+0x88>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d104      	bne.n	800d220 <osSemaphoreNew+0x88>
          mem = 0;
 800d216:	2300      	movs	r3, #0
 800d218:	623b      	str	r3, [r7, #32]
 800d21a:	e001      	b.n	800d220 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d21c:	2300      	movs	r3, #0
 800d21e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d226:	d04d      	beq.n	800d2c4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d129      	bne.n	800d282 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d10b      	bne.n	800d24c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	689a      	ldr	r2, [r3, #8]
 800d238:	2303      	movs	r3, #3
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	4613      	mov	r3, r2
 800d23e:	2200      	movs	r2, #0
 800d240:	2100      	movs	r1, #0
 800d242:	2001      	movs	r0, #1
 800d244:	f000 fbf8 	bl	800da38 <xQueueGenericCreateStatic>
 800d248:	6278      	str	r0, [r7, #36]	; 0x24
 800d24a:	e005      	b.n	800d258 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d24c:	2203      	movs	r2, #3
 800d24e:	2100      	movs	r1, #0
 800d250:	2001      	movs	r0, #1
 800d252:	f000 fc6e 	bl	800db32 <xQueueGenericCreate>
 800d256:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d022      	beq.n	800d2a4 <osSemaphoreNew+0x10c>
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d01f      	beq.n	800d2a4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d264:	2300      	movs	r3, #0
 800d266:	2200      	movs	r2, #0
 800d268:	2100      	movs	r1, #0
 800d26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d26c:	f000 fdec 	bl	800de48 <xQueueGenericSend>
 800d270:	4603      	mov	r3, r0
 800d272:	2b01      	cmp	r3, #1
 800d274:	d016      	beq.n	800d2a4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800d276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d278:	f001 fa8b 	bl	800e792 <vQueueDelete>
            hSemaphore = NULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	627b      	str	r3, [r7, #36]	; 0x24
 800d280:	e010      	b.n	800d2a4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	2b01      	cmp	r3, #1
 800d286:	d108      	bne.n	800d29a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	461a      	mov	r2, r3
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 fd6b 	bl	800dd6c <xQueueCreateCountingSemaphoreStatic>
 800d296:	6278      	str	r0, [r7, #36]	; 0x24
 800d298:	e004      	b.n	800d2a4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d29a:	68b9      	ldr	r1, [r7, #8]
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f000 fd9e 	bl	800ddde <xQueueCreateCountingSemaphore>
 800d2a2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00c      	beq.n	800d2c4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <osSemaphoreNew+0x120>
          name = attr->name;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	61fb      	str	r3, [r7, #28]
 800d2b6:	e001      	b.n	800d2bc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d2bc:	69f9      	ldr	r1, [r7, #28]
 800d2be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2c0:	f001 fbb4 	bl	800ea2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3728      	adds	r7, #40	; 0x28
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20000254 	.word	0x20000254

0800d2d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d2ec:	f06f 0303 	mvn.w	r3, #3
 800d2f0:	61fb      	str	r3, [r7, #28]
 800d2f2:	e04b      	b.n	800d38c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2f4:	f3ef 8305 	mrs	r3, IPSR
 800d2f8:	617b      	str	r3, [r7, #20]
  return(result);
 800d2fa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10f      	bne.n	800d320 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d300:	f3ef 8310 	mrs	r3, PRIMASK
 800d304:	613b      	str	r3, [r7, #16]
  return(result);
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d105      	bne.n	800d318 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d30c:	f3ef 8311 	mrs	r3, BASEPRI
 800d310:	60fb      	str	r3, [r7, #12]
  return(result);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d026      	beq.n	800d366 <osSemaphoreAcquire+0x92>
 800d318:	4b1f      	ldr	r3, [pc, #124]	; (800d398 <osSemaphoreAcquire+0xc4>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b02      	cmp	r3, #2
 800d31e:	d122      	bne.n	800d366 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d326:	f06f 0303 	mvn.w	r3, #3
 800d32a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d32c:	e02d      	b.n	800d38a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d332:	f107 0308 	add.w	r3, r7, #8
 800d336:	461a      	mov	r2, r3
 800d338:	2100      	movs	r1, #0
 800d33a:	69b8      	ldr	r0, [r7, #24]
 800d33c:	f001 f9a6 	bl	800e68c <xQueueReceiveFromISR>
 800d340:	4603      	mov	r3, r0
 800d342:	2b01      	cmp	r3, #1
 800d344:	d003      	beq.n	800d34e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d346:	f06f 0302 	mvn.w	r3, #2
 800d34a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d34c:	e01d      	b.n	800d38a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d01a      	beq.n	800d38a <osSemaphoreAcquire+0xb6>
 800d354:	4b11      	ldr	r3, [pc, #68]	; (800d39c <osSemaphoreAcquire+0xc8>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d364:	e011      	b.n	800d38a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	69b8      	ldr	r0, [r7, #24]
 800d36a:	f001 f87f 	bl	800e46c <xQueueSemaphoreTake>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b01      	cmp	r3, #1
 800d372:	d00b      	beq.n	800d38c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d003      	beq.n	800d382 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d37a:	f06f 0301 	mvn.w	r3, #1
 800d37e:	61fb      	str	r3, [r7, #28]
 800d380:	e004      	b.n	800d38c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d382:	f06f 0302 	mvn.w	r3, #2
 800d386:	61fb      	str	r3, [r7, #28]
 800d388:	e000      	b.n	800d38c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d38a:	bf00      	nop
      }
    }
  }

  return (stat);
 800d38c:	69fb      	ldr	r3, [r7, #28]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3720      	adds	r7, #32
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	20000254 	.word	0x20000254
 800d39c:	e000ed04 	.word	0xe000ed04

0800d3a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d103      	bne.n	800d3be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d3b6:	f06f 0303 	mvn.w	r3, #3
 800d3ba:	61fb      	str	r3, [r7, #28]
 800d3bc:	e03e      	b.n	800d43c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3be:	f3ef 8305 	mrs	r3, IPSR
 800d3c2:	617b      	str	r3, [r7, #20]
  return(result);
 800d3c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10f      	bne.n	800d3ea <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ce:	613b      	str	r3, [r7, #16]
  return(result);
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d105      	bne.n	800d3e2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d3da:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d01e      	beq.n	800d420 <osSemaphoreRelease+0x80>
 800d3e2:	4b19      	ldr	r3, [pc, #100]	; (800d448 <osSemaphoreRelease+0xa8>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d11a      	bne.n	800d420 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	69b8      	ldr	r0, [r7, #24]
 800d3f6:	f000 fec5 	bl	800e184 <xQueueGiveFromISR>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d003      	beq.n	800d408 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d400:	f06f 0302 	mvn.w	r3, #2
 800d404:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d406:	e018      	b.n	800d43a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d015      	beq.n	800d43a <osSemaphoreRelease+0x9a>
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <osSemaphoreRelease+0xac>)
 800d410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d41e:	e00c      	b.n	800d43a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d420:	2300      	movs	r3, #0
 800d422:	2200      	movs	r2, #0
 800d424:	2100      	movs	r1, #0
 800d426:	69b8      	ldr	r0, [r7, #24]
 800d428:	f000 fd0e 	bl	800de48 <xQueueGenericSend>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d004      	beq.n	800d43c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d432:	f06f 0302 	mvn.w	r3, #2
 800d436:	61fb      	str	r3, [r7, #28]
 800d438:	e000      	b.n	800d43c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d43a:	bf00      	nop
    }
  }

  return (stat);
 800d43c:	69fb      	ldr	r3, [r7, #28]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3720      	adds	r7, #32
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	20000254 	.word	0x20000254
 800d44c:	e000ed04 	.word	0xe000ed04

0800d450 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d45c:	f3ef 8305 	mrs	r3, IPSR
 800d460:	617b      	str	r3, [r7, #20]
  return(result);
 800d462:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10f      	bne.n	800d488 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d468:	f3ef 8310 	mrs	r3, PRIMASK
 800d46c:	613b      	str	r3, [r7, #16]
  return(result);
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d105      	bne.n	800d480 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d474:	f3ef 8311 	mrs	r3, BASEPRI
 800d478:	60fb      	str	r3, [r7, #12]
  return(result);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d007      	beq.n	800d490 <osSemaphoreDelete+0x40>
 800d480:	4b0d      	ldr	r3, [pc, #52]	; (800d4b8 <osSemaphoreDelete+0x68>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d103      	bne.n	800d490 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d488:	f06f 0305 	mvn.w	r3, #5
 800d48c:	61fb      	str	r3, [r7, #28]
 800d48e:	e00e      	b.n	800d4ae <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d103      	bne.n	800d49e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d496:	f06f 0303 	mvn.w	r3, #3
 800d49a:	61fb      	str	r3, [r7, #28]
 800d49c:	e007      	b.n	800d4ae <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d49e:	69b8      	ldr	r0, [r7, #24]
 800d4a0:	f001 faec 	bl	800ea7c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d4a8:	69b8      	ldr	r0, [r7, #24]
 800d4aa:	f001 f972 	bl	800e792 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d4ae:	69fb      	ldr	r3, [r7, #28]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3720      	adds	r7, #32
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	20000254 	.word	0x20000254

0800d4bc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08c      	sub	sp, #48	; 0x30
 800d4c0:	af02      	add	r7, sp, #8
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4cc:	f3ef 8305 	mrs	r3, IPSR
 800d4d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d170      	bne.n	800d5ba <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800d4dc:	617b      	str	r3, [r7, #20]
  return(result);
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d105      	bne.n	800d4f0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4e4:	f3ef 8311 	mrs	r3, BASEPRI
 800d4e8:	613b      	str	r3, [r7, #16]
  return(result);
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d003      	beq.n	800d4f8 <osMessageQueueNew+0x3c>
 800d4f0:	4b34      	ldr	r3, [pc, #208]	; (800d5c4 <osMessageQueueNew+0x108>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d060      	beq.n	800d5ba <osMessageQueueNew+0xfe>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d05d      	beq.n	800d5ba <osMessageQueueNew+0xfe>
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d05a      	beq.n	800d5ba <osMessageQueueNew+0xfe>
    mem = -1;
 800d504:	f04f 33ff 	mov.w	r3, #4294967295
 800d508:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d029      	beq.n	800d564 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d012      	beq.n	800d53e <osMessageQueueNew+0x82>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	2b4f      	cmp	r3, #79	; 0x4f
 800d51e:	d90e      	bls.n	800d53e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00a      	beq.n	800d53e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	695a      	ldr	r2, [r3, #20]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	68b9      	ldr	r1, [r7, #8]
 800d530:	fb01 f303 	mul.w	r3, r1, r3
 800d534:	429a      	cmp	r2, r3
 800d536:	d302      	bcc.n	800d53e <osMessageQueueNew+0x82>
        mem = 1;
 800d538:	2301      	movs	r3, #1
 800d53a:	623b      	str	r3, [r7, #32]
 800d53c:	e014      	b.n	800d568 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d110      	bne.n	800d568 <osMessageQueueNew+0xac>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10c      	bne.n	800d568 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d552:	2b00      	cmp	r3, #0
 800d554:	d108      	bne.n	800d568 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d104      	bne.n	800d568 <osMessageQueueNew+0xac>
          mem = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	623b      	str	r3, [r7, #32]
 800d562:	e001      	b.n	800d568 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d10c      	bne.n	800d588 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	691a      	ldr	r2, [r3, #16]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6899      	ldr	r1, [r3, #8]
 800d576:	2300      	movs	r3, #0
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	460b      	mov	r3, r1
 800d57c:	68b9      	ldr	r1, [r7, #8]
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f000 fa5a 	bl	800da38 <xQueueGenericCreateStatic>
 800d584:	6278      	str	r0, [r7, #36]	; 0x24
 800d586:	e008      	b.n	800d59a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d105      	bne.n	800d59a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d58e:	2200      	movs	r2, #0
 800d590:	68b9      	ldr	r1, [r7, #8]
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f000 facd 	bl	800db32 <xQueueGenericCreate>
 800d598:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00c      	beq.n	800d5ba <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <osMessageQueueNew+0xf2>
        name = attr->name;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e001      	b.n	800d5b2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d5b2:	69f9      	ldr	r1, [r7, #28]
 800d5b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5b6:	f001 fa39 	bl	800ea2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3728      	adds	r7, #40	; 0x28
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20000254 	.word	0x20000254

0800d5c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08a      	sub	sp, #40	; 0x28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5e0:	f3ef 8305 	mrs	r3, IPSR
 800d5e4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d5e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10f      	bne.n	800d60c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d5f0:	61bb      	str	r3, [r7, #24]
  return(result);
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d105      	bne.n	800d604 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d5fc:	617b      	str	r3, [r7, #20]
  return(result);
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d02c      	beq.n	800d65e <osMessageQueuePut+0x96>
 800d604:	4b28      	ldr	r3, [pc, #160]	; (800d6a8 <osMessageQueuePut+0xe0>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d128      	bne.n	800d65e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d005      	beq.n	800d61e <osMessageQueuePut+0x56>
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <osMessageQueuePut+0x56>
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d61e:	f06f 0303 	mvn.w	r3, #3
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d624:	e039      	b.n	800d69a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d626:	2300      	movs	r3, #0
 800d628:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d62a:	f107 0210 	add.w	r2, r7, #16
 800d62e:	2300      	movs	r3, #0
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	6a38      	ldr	r0, [r7, #32]
 800d634:	f000 fd0a 	bl	800e04c <xQueueGenericSendFromISR>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d003      	beq.n	800d646 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d63e:	f06f 0302 	mvn.w	r3, #2
 800d642:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d644:	e029      	b.n	800d69a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d026      	beq.n	800d69a <osMessageQueuePut+0xd2>
 800d64c:	4b17      	ldr	r3, [pc, #92]	; (800d6ac <osMessageQueuePut+0xe4>)
 800d64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d65c:	e01d      	b.n	800d69a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <osMessageQueuePut+0xa2>
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d103      	bne.n	800d672 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d66a:	f06f 0303 	mvn.w	r3, #3
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24
 800d670:	e014      	b.n	800d69c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d672:	2300      	movs	r3, #0
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	68b9      	ldr	r1, [r7, #8]
 800d678:	6a38      	ldr	r0, [r7, #32]
 800d67a:	f000 fbe5 	bl	800de48 <xQueueGenericSend>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b01      	cmp	r3, #1
 800d682:	d00b      	beq.n	800d69c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d68a:	f06f 0301 	mvn.w	r3, #1
 800d68e:	627b      	str	r3, [r7, #36]	; 0x24
 800d690:	e004      	b.n	800d69c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d692:	f06f 0302 	mvn.w	r3, #2
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
 800d698:	e000      	b.n	800d69c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d69a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3728      	adds	r7, #40	; 0x28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000254 	.word	0x20000254
 800d6ac:	e000ed04 	.word	0xe000ed04

0800d6b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08a      	sub	sp, #40	; 0x28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
 800d6bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6c6:	f3ef 8305 	mrs	r3, IPSR
 800d6ca:	61fb      	str	r3, [r7, #28]
  return(result);
 800d6cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10f      	bne.n	800d6f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d6d6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d105      	bne.n	800d6ea <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6de:	f3ef 8311 	mrs	r3, BASEPRI
 800d6e2:	617b      	str	r3, [r7, #20]
  return(result);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d02c      	beq.n	800d744 <osMessageQueueGet+0x94>
 800d6ea:	4b28      	ldr	r3, [pc, #160]	; (800d78c <osMessageQueueGet+0xdc>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d128      	bne.n	800d744 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d005      	beq.n	800d704 <osMessageQueueGet+0x54>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <osMessageQueueGet+0x54>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d003      	beq.n	800d70c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d704:	f06f 0303 	mvn.w	r3, #3
 800d708:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d70a:	e038      	b.n	800d77e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d70c:	2300      	movs	r3, #0
 800d70e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d710:	f107 0310 	add.w	r3, r7, #16
 800d714:	461a      	mov	r2, r3
 800d716:	68b9      	ldr	r1, [r7, #8]
 800d718:	6a38      	ldr	r0, [r7, #32]
 800d71a:	f000 ffb7 	bl	800e68c <xQueueReceiveFromISR>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b01      	cmp	r3, #1
 800d722:	d003      	beq.n	800d72c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d724:	f06f 0302 	mvn.w	r3, #2
 800d728:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d72a:	e028      	b.n	800d77e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d025      	beq.n	800d77e <osMessageQueueGet+0xce>
 800d732:	4b17      	ldr	r3, [pc, #92]	; (800d790 <osMessageQueueGet+0xe0>)
 800d734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d742:	e01c      	b.n	800d77e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <osMessageQueueGet+0xa0>
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d103      	bne.n	800d758 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d750:	f06f 0303 	mvn.w	r3, #3
 800d754:	627b      	str	r3, [r7, #36]	; 0x24
 800d756:	e013      	b.n	800d780 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	6a38      	ldr	r0, [r7, #32]
 800d75e:	f000 fda3 	bl	800e2a8 <xQueueReceive>
 800d762:	4603      	mov	r3, r0
 800d764:	2b01      	cmp	r3, #1
 800d766:	d00b      	beq.n	800d780 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d76e:	f06f 0301 	mvn.w	r3, #1
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
 800d774:	e004      	b.n	800d780 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d776:	f06f 0302 	mvn.w	r3, #2
 800d77a:	627b      	str	r3, [r7, #36]	; 0x24
 800d77c:	e000      	b.n	800d780 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d77e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d782:	4618      	mov	r0, r3
 800d784:	3728      	adds	r7, #40	; 0x28
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20000254 	.word	0x20000254
 800d790:	e000ed04 	.word	0xe000ed04

0800d794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4a07      	ldr	r2, [pc, #28]	; (800d7c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d7a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	4a06      	ldr	r2, [pc, #24]	; (800d7c4 <vApplicationGetIdleTaskMemory+0x30>)
 800d7aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2280      	movs	r2, #128	; 0x80
 800d7b0:	601a      	str	r2, [r3, #0]
}
 800d7b2:	bf00      	nop
 800d7b4:	3714      	adds	r7, #20
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	20000258 	.word	0x20000258
 800d7c4:	200002b4 	.word	0x200002b4

0800d7c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	4a07      	ldr	r2, [pc, #28]	; (800d7f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d7d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	4a06      	ldr	r2, [pc, #24]	; (800d7f8 <vApplicationGetTimerTaskMemory+0x30>)
 800d7de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7e6:	601a      	str	r2, [r3, #0]
}
 800d7e8:	bf00      	nop
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr
 800d7f4:	200004b4 	.word	0x200004b4
 800d7f8:	20000510 	.word	0x20000510

0800d7fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f103 0208 	add.w	r2, r3, #8
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f04f 32ff 	mov.w	r2, #4294967295
 800d814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f103 0208 	add.w	r2, r3, #8
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f103 0208 	add.w	r2, r3, #8
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d830:	bf00      	nop
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d83c:	b480      	push	{r7}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d84a:	bf00      	nop
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr

0800d856 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d856:	b480      	push	{r7}
 800d858:	b085      	sub	sp, #20
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
 800d85e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	689a      	ldr	r2, [r3, #8]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	601a      	str	r2, [r3, #0]
}
 800d892:	bf00      	nop
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d89e:	b480      	push	{r7}
 800d8a0:	b085      	sub	sp, #20
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
 800d8a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b4:	d103      	bne.n	800d8be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	691b      	ldr	r3, [r3, #16]
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	e00c      	b.n	800d8d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	e002      	b.n	800d8cc <vListInsert+0x2e>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	60fb      	str	r3, [r7, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d2f6      	bcs.n	800d8c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	1c5a      	adds	r2, r3, #1
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	601a      	str	r2, [r3, #0]
}
 800d904:	bf00      	nop
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	6892      	ldr	r2, [r2, #8]
 800d926:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	6852      	ldr	r2, [r2, #4]
 800d930:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d103      	bne.n	800d944 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	689a      	ldr	r2, [r3, #8]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	1e5a      	subs	r2, r3, #1
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10b      	bne.n	800d990 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	b672      	cpsid	i
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	b662      	cpsie	i
 800d98c:	60bb      	str	r3, [r7, #8]
 800d98e:	e7fe      	b.n	800d98e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d990:	f002 fd5a 	bl	8010448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99c:	68f9      	ldr	r1, [r7, #12]
 800d99e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9a0:	fb01 f303 	mul.w	r3, r1, r3
 800d9a4:	441a      	add	r2, r3
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	68f9      	ldr	r1, [r7, #12]
 800d9c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9c6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ca:	441a      	add	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	22ff      	movs	r2, #255	; 0xff
 800d9d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	22ff      	movs	r2, #255	; 0xff
 800d9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d114      	bne.n	800da10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d01a      	beq.n	800da24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3310      	adds	r3, #16
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f001 fd1c 	bl	800f430 <xTaskRemoveFromEventList>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d012      	beq.n	800da24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	; (800da34 <xQueueGenericReset+0xd0>)
 800da00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	e009      	b.n	800da24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3310      	adds	r3, #16
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff fef1 	bl	800d7fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3324      	adds	r3, #36	; 0x24
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff feec 	bl	800d7fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da24:	f002 fd42 	bl	80104ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da28:	2301      	movs	r3, #1
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	e000ed04 	.word	0xe000ed04

0800da38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08e      	sub	sp, #56	; 0x38
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10b      	bne.n	800da64 <xQueueGenericCreateStatic+0x2c>
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	b672      	cpsid	i
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	b662      	cpsie	i
 800da60:	62bb      	str	r3, [r7, #40]	; 0x28
 800da62:	e7fe      	b.n	800da62 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10b      	bne.n	800da82 <xQueueGenericCreateStatic+0x4a>
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	b672      	cpsid	i
 800da70:	f383 8811 	msr	BASEPRI, r3
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	b662      	cpsie	i
 800da7e:	627b      	str	r3, [r7, #36]	; 0x24
 800da80:	e7fe      	b.n	800da80 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d002      	beq.n	800da8e <xQueueGenericCreateStatic+0x56>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <xQueueGenericCreateStatic+0x5a>
 800da8e:	2301      	movs	r3, #1
 800da90:	e000      	b.n	800da94 <xQueueGenericCreateStatic+0x5c>
 800da92:	2300      	movs	r3, #0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <xQueueGenericCreateStatic+0x78>
 800da98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9c:	b672      	cpsid	i
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	b662      	cpsie	i
 800daac:	623b      	str	r3, [r7, #32]
 800daae:	e7fe      	b.n	800daae <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d102      	bne.n	800dabc <xQueueGenericCreateStatic+0x84>
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d101      	bne.n	800dac0 <xQueueGenericCreateStatic+0x88>
 800dabc:	2301      	movs	r3, #1
 800dabe:	e000      	b.n	800dac2 <xQueueGenericCreateStatic+0x8a>
 800dac0:	2300      	movs	r3, #0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10b      	bne.n	800dade <xQueueGenericCreateStatic+0xa6>
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	b672      	cpsid	i
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	b662      	cpsie	i
 800dada:	61fb      	str	r3, [r7, #28]
 800dadc:	e7fe      	b.n	800dadc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dade:	2350      	movs	r3, #80	; 0x50
 800dae0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b50      	cmp	r3, #80	; 0x50
 800dae6:	d00b      	beq.n	800db00 <xQueueGenericCreateStatic+0xc8>
 800dae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daec:	b672      	cpsid	i
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	b662      	cpsie	i
 800dafc:	61bb      	str	r3, [r7, #24]
 800dafe:	e7fe      	b.n	800dafe <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00d      	beq.n	800db28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	4613      	mov	r3, r2
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f000 f846 	bl	800dbb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3730      	adds	r7, #48	; 0x30
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db32:	b580      	push	{r7, lr}
 800db34:	b08a      	sub	sp, #40	; 0x28
 800db36:	af02      	add	r7, sp, #8
 800db38:	60f8      	str	r0, [r7, #12]
 800db3a:	60b9      	str	r1, [r7, #8]
 800db3c:	4613      	mov	r3, r2
 800db3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10b      	bne.n	800db5e <xQueueGenericCreate+0x2c>
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	b672      	cpsid	i
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	b662      	cpsie	i
 800db5a:	613b      	str	r3, [r7, #16]
 800db5c:	e7fe      	b.n	800db5c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800db64:	2300      	movs	r3, #0
 800db66:	61fb      	str	r3, [r7, #28]
 800db68:	e004      	b.n	800db74 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	fb02 f303 	mul.w	r3, r2, r3
 800db72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	3350      	adds	r3, #80	; 0x50
 800db78:	4618      	mov	r0, r3
 800db7a:	f002 fd87 	bl	801068c <pvPortMalloc>
 800db7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d011      	beq.n	800dbaa <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	3350      	adds	r3, #80	; 0x50
 800db8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db98:	79fa      	ldrb	r2, [r7, #7]
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	4613      	mov	r3, r2
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	68b9      	ldr	r1, [r7, #8]
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f000 f805 	bl	800dbb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbaa:	69bb      	ldr	r3, [r7, #24]
	}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3720      	adds	r7, #32
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
 800dbc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d103      	bne.n	800dbd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	69ba      	ldr	r2, [r7, #24]
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	e002      	b.n	800dbd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbe2:	2101      	movs	r1, #1
 800dbe4:	69b8      	ldr	r0, [r7, #24]
 800dbe6:	f7ff febd 	bl	800d964 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	78fa      	ldrb	r2, [r7, #3]
 800dbee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b082      	sub	sp, #8
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00e      	beq.n	800dc26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	2100      	movs	r1, #0
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f911 	bl	800de48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc26:	bf00      	nop
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b086      	sub	sp, #24
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	4603      	mov	r3, r0
 800dc36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	461a      	mov	r2, r3
 800dc44:	6939      	ldr	r1, [r7, #16]
 800dc46:	6978      	ldr	r0, [r7, #20]
 800dc48:	f7ff ff73 	bl	800db32 <xQueueGenericCreate>
 800dc4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f7ff ffd3 	bl	800dbfa <prvInitialiseMutex>

		return xNewQueue;
 800dc54:	68fb      	ldr	r3, [r7, #12]
	}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b088      	sub	sp, #32
 800dc62:	af02      	add	r7, sp, #8
 800dc64:	4603      	mov	r3, r0
 800dc66:	6039      	str	r1, [r7, #0]
 800dc68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	617b      	str	r3, [r7, #20]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dc72:	79fb      	ldrb	r3, [r7, #7]
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	6939      	ldr	r1, [r7, #16]
 800dc7c:	6978      	ldr	r0, [r7, #20]
 800dc7e:	f7ff fedb 	bl	800da38 <xQueueGenericCreateStatic>
 800dc82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f7ff ffb8 	bl	800dbfa <prvInitialiseMutex>

		return xNewQueue;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
	}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dc94:	b590      	push	{r4, r7, lr}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10b      	bne.n	800dcbe <xQueueGiveMutexRecursive+0x2a>
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	b672      	cpsid	i
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	b662      	cpsie	i
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	e7fe      	b.n	800dcbc <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	689c      	ldr	r4, [r3, #8]
 800dcc2:	f001 fd73 	bl	800f7ac <xTaskGetCurrentTaskHandle>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	429c      	cmp	r4, r3
 800dcca:	d111      	bne.n	800dcf0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	1e5a      	subs	r2, r3, #1
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d105      	bne.n	800dcea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dcde:	2300      	movs	r3, #0
 800dce0:	2200      	movs	r2, #0
 800dce2:	2100      	movs	r1, #0
 800dce4:	6938      	ldr	r0, [r7, #16]
 800dce6:	f000 f8af 	bl	800de48 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dcea:	2301      	movs	r3, #1
 800dcec:	617b      	str	r3, [r7, #20]
 800dcee:	e001      	b.n	800dcf4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dcf4:	697b      	ldr	r3, [r7, #20]
	}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	371c      	adds	r7, #28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd90      	pop	{r4, r7, pc}

0800dcfe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dcfe:	b590      	push	{r4, r7, lr}
 800dd00:	b087      	sub	sp, #28
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10b      	bne.n	800dd2a <xQueueTakeMutexRecursive+0x2c>
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	b672      	cpsid	i
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	b662      	cpsie	i
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	e7fe      	b.n	800dd28 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	689c      	ldr	r4, [r3, #8]
 800dd2e:	f001 fd3d 	bl	800f7ac <xTaskGetCurrentTaskHandle>
 800dd32:	4603      	mov	r3, r0
 800dd34:	429c      	cmp	r4, r3
 800dd36:	d107      	bne.n	800dd48 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	1c5a      	adds	r2, r3, #1
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dd42:	2301      	movs	r3, #1
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	e00c      	b.n	800dd62 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6938      	ldr	r0, [r7, #16]
 800dd4c:	f000 fb8e 	bl	800e46c <xQueueSemaphoreTake>
 800dd50:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	1c5a      	adds	r2, r3, #1
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dd62:	697b      	ldr	r3, [r7, #20]
	}
 800dd64:	4618      	mov	r0, r3
 800dd66:	371c      	adds	r7, #28
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd90      	pop	{r4, r7, pc}

0800dd6c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08a      	sub	sp, #40	; 0x28
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10b      	bne.n	800dd96 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800dd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd82:	b672      	cpsid	i
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	b662      	cpsie	i
 800dd92:	61bb      	str	r3, [r7, #24]
 800dd94:	e7fe      	b.n	800dd94 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d90b      	bls.n	800ddb6 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	b672      	cpsid	i
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	b662      	cpsie	i
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	e7fe      	b.n	800ddb4 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddb6:	2302      	movs	r3, #2
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f7ff fe39 	bl	800da38 <xQueueGenericCreateStatic>
 800ddc6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
	}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b086      	sub	sp, #24
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10b      	bne.n	800de06 <xQueueCreateCountingSemaphore+0x28>
 800ddee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf2:	b672      	cpsid	i
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	b662      	cpsie	i
 800de02:	613b      	str	r3, [r7, #16]
 800de04:	e7fe      	b.n	800de04 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d90b      	bls.n	800de26 <xQueueCreateCountingSemaphore+0x48>
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	b672      	cpsid	i
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	b662      	cpsie	i
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e7fe      	b.n	800de24 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800de26:	2202      	movs	r2, #2
 800de28:	2100      	movs	r1, #0
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7ff fe81 	bl	800db32 <xQueueGenericCreate>
 800de30:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800de3e:	697b      	ldr	r3, [r7, #20]
	}
 800de40:	4618      	mov	r0, r3
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08e      	sub	sp, #56	; 0x38
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de56:	2300      	movs	r3, #0
 800de58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10b      	bne.n	800de7c <xQueueGenericSend+0x34>
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	b672      	cpsid	i
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	b662      	cpsie	i
 800de78:	62bb      	str	r3, [r7, #40]	; 0x28
 800de7a:	e7fe      	b.n	800de7a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d103      	bne.n	800de8a <xQueueGenericSend+0x42>
 800de82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <xQueueGenericSend+0x46>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <xQueueGenericSend+0x48>
 800de8e:	2300      	movs	r3, #0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10b      	bne.n	800deac <xQueueGenericSend+0x64>
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	b672      	cpsid	i
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	b662      	cpsie	i
 800dea8:	627b      	str	r3, [r7, #36]	; 0x24
 800deaa:	e7fe      	b.n	800deaa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d103      	bne.n	800deba <xQueueGenericSend+0x72>
 800deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d101      	bne.n	800debe <xQueueGenericSend+0x76>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <xQueueGenericSend+0x78>
 800debe:	2300      	movs	r3, #0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10b      	bne.n	800dedc <xQueueGenericSend+0x94>
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	b672      	cpsid	i
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	b662      	cpsie	i
 800ded8:	623b      	str	r3, [r7, #32]
 800deda:	e7fe      	b.n	800deda <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dedc:	f001 fc76 	bl	800f7cc <xTaskGetSchedulerState>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <xQueueGenericSend+0xa4>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <xQueueGenericSend+0xa8>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <xQueueGenericSend+0xaa>
 800def0:	2300      	movs	r3, #0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10b      	bne.n	800df0e <xQueueGenericSend+0xc6>
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	b672      	cpsid	i
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	b662      	cpsie	i
 800df0a:	61fb      	str	r3, [r7, #28]
 800df0c:	e7fe      	b.n	800df0c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df0e:	f002 fa9b 	bl	8010448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d302      	bcc.n	800df24 <xQueueGenericSend+0xdc>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	2b02      	cmp	r3, #2
 800df22:	d129      	bne.n	800df78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df24:	683a      	ldr	r2, [r7, #0]
 800df26:	68b9      	ldr	r1, [r7, #8]
 800df28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df2a:	f000 fc6e 	bl	800e80a <prvCopyDataToQueue>
 800df2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	d010      	beq.n	800df5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	3324      	adds	r3, #36	; 0x24
 800df3c:	4618      	mov	r0, r3
 800df3e:	f001 fa77 	bl	800f430 <xTaskRemoveFromEventList>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d013      	beq.n	800df70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df48:	4b3f      	ldr	r3, [pc, #252]	; (800e048 <xQueueGenericSend+0x200>)
 800df4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	e00a      	b.n	800df70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d007      	beq.n	800df70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df60:	4b39      	ldr	r3, [pc, #228]	; (800e048 <xQueueGenericSend+0x200>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df70:	f002 fa9c 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800df74:	2301      	movs	r3, #1
 800df76:	e063      	b.n	800e040 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d103      	bne.n	800df86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df7e:	f002 fa95 	bl	80104ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df82:	2300      	movs	r3, #0
 800df84:	e05c      	b.n	800e040 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df8c:	f107 0314 	add.w	r3, r7, #20
 800df90:	4618      	mov	r0, r3
 800df92:	f001 fab1 	bl	800f4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df96:	2301      	movs	r3, #1
 800df98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df9a:	f002 fa87 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df9e:	f001 f80f 	bl	800efc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfa2:	f002 fa51 	bl	8010448 <vPortEnterCritical>
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfac:	b25b      	sxtb	r3, r3
 800dfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb2:	d103      	bne.n	800dfbc <xQueueGenericSend+0x174>
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfc2:	b25b      	sxtb	r3, r3
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc8:	d103      	bne.n	800dfd2 <xQueueGenericSend+0x18a>
 800dfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfd2:	f002 fa6b 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfd6:	1d3a      	adds	r2, r7, #4
 800dfd8:	f107 0314 	add.w	r3, r7, #20
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f001 faa0 	bl	800f524 <xTaskCheckForTimeOut>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d124      	bne.n	800e034 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dfea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfec:	f000 fd05 	bl	800e9fa <prvIsQueueFull>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d018      	beq.n	800e028 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	3310      	adds	r3, #16
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	4611      	mov	r1, r2
 800dffe:	4618      	mov	r0, r3
 800e000:	f001 f9c4 	bl	800f38c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e006:	f000 fc90 	bl	800e92a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e00a:	f000 ffe7 	bl	800efdc <xTaskResumeAll>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	f47f af7c 	bne.w	800df0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e016:	4b0c      	ldr	r3, [pc, #48]	; (800e048 <xQueueGenericSend+0x200>)
 800e018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	e772      	b.n	800df0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e02a:	f000 fc7e 	bl	800e92a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e02e:	f000 ffd5 	bl	800efdc <xTaskResumeAll>
 800e032:	e76c      	b.n	800df0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e036:	f000 fc78 	bl	800e92a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e03a:	f000 ffcf 	bl	800efdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e03e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e040:	4618      	mov	r0, r3
 800e042:	3738      	adds	r7, #56	; 0x38
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b08e      	sub	sp, #56	; 0x38
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
 800e058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10b      	bne.n	800e07c <xQueueGenericSendFromISR+0x30>
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	b672      	cpsid	i
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	b662      	cpsie	i
 800e078:	627b      	str	r3, [r7, #36]	; 0x24
 800e07a:	e7fe      	b.n	800e07a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d103      	bne.n	800e08a <xQueueGenericSendFromISR+0x3e>
 800e082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e086:	2b00      	cmp	r3, #0
 800e088:	d101      	bne.n	800e08e <xQueueGenericSendFromISR+0x42>
 800e08a:	2301      	movs	r3, #1
 800e08c:	e000      	b.n	800e090 <xQueueGenericSendFromISR+0x44>
 800e08e:	2300      	movs	r3, #0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10b      	bne.n	800e0ac <xQueueGenericSendFromISR+0x60>
 800e094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e098:	b672      	cpsid	i
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	b662      	cpsie	i
 800e0a8:	623b      	str	r3, [r7, #32]
 800e0aa:	e7fe      	b.n	800e0aa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d103      	bne.n	800e0ba <xQueueGenericSendFromISR+0x6e>
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d101      	bne.n	800e0be <xQueueGenericSendFromISR+0x72>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e000      	b.n	800e0c0 <xQueueGenericSendFromISR+0x74>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10b      	bne.n	800e0dc <xQueueGenericSendFromISR+0x90>
 800e0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c8:	b672      	cpsid	i
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	b662      	cpsie	i
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	e7fe      	b.n	800e0da <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0dc:	f002 fa94 	bl	8010608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e0e0:	f3ef 8211 	mrs	r2, BASEPRI
 800e0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e8:	b672      	cpsid	i
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	b662      	cpsie	i
 800e0f8:	61ba      	str	r2, [r7, #24]
 800e0fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e0fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e108:	429a      	cmp	r2, r3
 800e10a:	d302      	bcc.n	800e112 <xQueueGenericSendFromISR+0xc6>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b02      	cmp	r3, #2
 800e110:	d12c      	bne.n	800e16c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e122:	f000 fb72 	bl	800e80a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e126:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12e:	d112      	bne.n	800e156 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e134:	2b00      	cmp	r3, #0
 800e136:	d016      	beq.n	800e166 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	3324      	adds	r3, #36	; 0x24
 800e13c:	4618      	mov	r0, r3
 800e13e:	f001 f977 	bl	800f430 <xTaskRemoveFromEventList>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00e      	beq.n	800e166 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00b      	beq.n	800e166 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	e007      	b.n	800e166 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e15a:	3301      	adds	r3, #1
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	b25a      	sxtb	r2, r3
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e166:	2301      	movs	r3, #1
 800e168:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e16a:	e001      	b.n	800e170 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e16c:	2300      	movs	r3, #0
 800e16e:	637b      	str	r3, [r7, #52]	; 0x34
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3738      	adds	r7, #56	; 0x38
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08e      	sub	sp, #56	; 0x38
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10b      	bne.n	800e1b0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	b672      	cpsid	i
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	b662      	cpsie	i
 800e1ac:	623b      	str	r3, [r7, #32]
 800e1ae:	e7fe      	b.n	800e1ae <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00b      	beq.n	800e1d0 <xQueueGiveFromISR+0x4c>
 800e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1bc:	b672      	cpsid	i
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	b662      	cpsie	i
 800e1cc:	61fb      	str	r3, [r7, #28]
 800e1ce:	e7fe      	b.n	800e1ce <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d103      	bne.n	800e1e0 <xQueueGiveFromISR+0x5c>
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <xQueueGiveFromISR+0x60>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e000      	b.n	800e1e6 <xQueueGiveFromISR+0x62>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d10b      	bne.n	800e202 <xQueueGiveFromISR+0x7e>
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	b672      	cpsid	i
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	b662      	cpsie	i
 800e1fe:	61bb      	str	r3, [r7, #24]
 800e200:	e7fe      	b.n	800e200 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e202:	f002 fa01 	bl	8010608 <vPortValidateInterruptPriority>
	__asm volatile
 800e206:	f3ef 8211 	mrs	r2, BASEPRI
 800e20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20e:	b672      	cpsid	i
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	b662      	cpsie	i
 800e21e:	617a      	str	r2, [r7, #20]
 800e220:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e222:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e232:	429a      	cmp	r2, r3
 800e234:	d22b      	bcs.n	800e28e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e23c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e248:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e250:	d112      	bne.n	800e278 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	2b00      	cmp	r3, #0
 800e258:	d016      	beq.n	800e288 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	3324      	adds	r3, #36	; 0x24
 800e25e:	4618      	mov	r0, r3
 800e260:	f001 f8e6 	bl	800f430 <xTaskRemoveFromEventList>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00e      	beq.n	800e288 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00b      	beq.n	800e288 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2201      	movs	r2, #1
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	e007      	b.n	800e288 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e27c:	3301      	adds	r3, #1
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	b25a      	sxtb	r2, r3
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e288:	2301      	movs	r3, #1
 800e28a:	637b      	str	r3, [r7, #52]	; 0x34
 800e28c:	e001      	b.n	800e292 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	637b      	str	r3, [r7, #52]	; 0x34
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3738      	adds	r7, #56	; 0x38
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
	...

0800e2a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b08c      	sub	sp, #48	; 0x30
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d10b      	bne.n	800e2da <xQueueReceive+0x32>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c6:	b672      	cpsid	i
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	b662      	cpsie	i
 800e2d6:	623b      	str	r3, [r7, #32]
 800e2d8:	e7fe      	b.n	800e2d8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d103      	bne.n	800e2e8 <xQueueReceive+0x40>
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <xQueueReceive+0x44>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e000      	b.n	800e2ee <xQueueReceive+0x46>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10b      	bne.n	800e30a <xQueueReceive+0x62>
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	b672      	cpsid	i
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	b662      	cpsie	i
 800e306:	61fb      	str	r3, [r7, #28]
 800e308:	e7fe      	b.n	800e308 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e30a:	f001 fa5f 	bl	800f7cc <xTaskGetSchedulerState>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d102      	bne.n	800e31a <xQueueReceive+0x72>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d101      	bne.n	800e31e <xQueueReceive+0x76>
 800e31a:	2301      	movs	r3, #1
 800e31c:	e000      	b.n	800e320 <xQueueReceive+0x78>
 800e31e:	2300      	movs	r3, #0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10b      	bne.n	800e33c <xQueueReceive+0x94>
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	b672      	cpsid	i
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	b662      	cpsie	i
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	e7fe      	b.n	800e33a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e33c:	f002 f884 	bl	8010448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e344:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d01f      	beq.n	800e38c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e34c:	68b9      	ldr	r1, [r7, #8]
 800e34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e350:	f000 fac5 	bl	800e8de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	1e5a      	subs	r2, r3, #1
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00f      	beq.n	800e384 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e366:	3310      	adds	r3, #16
 800e368:	4618      	mov	r0, r3
 800e36a:	f001 f861 	bl	800f430 <xTaskRemoveFromEventList>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d007      	beq.n	800e384 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e374:	4b3c      	ldr	r3, [pc, #240]	; (800e468 <xQueueReceive+0x1c0>)
 800e376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e37a:	601a      	str	r2, [r3, #0]
 800e37c:	f3bf 8f4f 	dsb	sy
 800e380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e384:	f002 f892 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800e388:	2301      	movs	r3, #1
 800e38a:	e069      	b.n	800e460 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d103      	bne.n	800e39a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e392:	f002 f88b 	bl	80104ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e396:	2300      	movs	r3, #0
 800e398:	e062      	b.n	800e460 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d106      	bne.n	800e3ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3a0:	f107 0310 	add.w	r3, r7, #16
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f001 f8a7 	bl	800f4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3ae:	f002 f87d 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3b2:	f000 fe05 	bl	800efc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3b6:	f002 f847 	bl	8010448 <vPortEnterCritical>
 800e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3c0:	b25b      	sxtb	r3, r3
 800e3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c6:	d103      	bne.n	800e3d0 <xQueueReceive+0x128>
 800e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3d6:	b25b      	sxtb	r3, r3
 800e3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3dc:	d103      	bne.n	800e3e6 <xQueueReceive+0x13e>
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3e6:	f002 f861 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3ea:	1d3a      	adds	r2, r7, #4
 800e3ec:	f107 0310 	add.w	r3, r7, #16
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f001 f896 	bl	800f524 <xTaskCheckForTimeOut>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d123      	bne.n	800e446 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e400:	f000 fae5 	bl	800e9ce <prvIsQueueEmpty>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d017      	beq.n	800e43a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	3324      	adds	r3, #36	; 0x24
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f000 ffba 	bl	800f38c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e41a:	f000 fa86 	bl	800e92a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e41e:	f000 fddd 	bl	800efdc <xTaskResumeAll>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d189      	bne.n	800e33c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e428:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <xQueueReceive+0x1c0>)
 800e42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	e780      	b.n	800e33c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e43a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e43c:	f000 fa75 	bl	800e92a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e440:	f000 fdcc 	bl	800efdc <xTaskResumeAll>
 800e444:	e77a      	b.n	800e33c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e448:	f000 fa6f 	bl	800e92a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e44c:	f000 fdc6 	bl	800efdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e452:	f000 fabc 	bl	800e9ce <prvIsQueueEmpty>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f43f af6f 	beq.w	800e33c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e45e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e460:	4618      	mov	r0, r3
 800e462:	3730      	adds	r7, #48	; 0x30
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	e000ed04 	.word	0xe000ed04

0800e46c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08e      	sub	sp, #56	; 0x38
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e476:	2300      	movs	r3, #0
 800e478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e47e:	2300      	movs	r3, #0
 800e480:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10b      	bne.n	800e4a0 <xQueueSemaphoreTake+0x34>
 800e488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48c:	b672      	cpsid	i
 800e48e:	f383 8811 	msr	BASEPRI, r3
 800e492:	f3bf 8f6f 	isb	sy
 800e496:	f3bf 8f4f 	dsb	sy
 800e49a:	b662      	cpsie	i
 800e49c:	623b      	str	r3, [r7, #32]
 800e49e:	e7fe      	b.n	800e49e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00b      	beq.n	800e4c0 <xQueueSemaphoreTake+0x54>
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	b672      	cpsid	i
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	b662      	cpsie	i
 800e4bc:	61fb      	str	r3, [r7, #28]
 800e4be:	e7fe      	b.n	800e4be <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4c0:	f001 f984 	bl	800f7cc <xTaskGetSchedulerState>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d102      	bne.n	800e4d0 <xQueueSemaphoreTake+0x64>
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <xQueueSemaphoreTake+0x68>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e000      	b.n	800e4d6 <xQueueSemaphoreTake+0x6a>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10b      	bne.n	800e4f2 <xQueueSemaphoreTake+0x86>
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	b672      	cpsid	i
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	b662      	cpsie	i
 800e4ee:	61bb      	str	r3, [r7, #24]
 800e4f0:	e7fe      	b.n	800e4f0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4f2:	f001 ffa9 	bl	8010448 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d024      	beq.n	800e54c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	1e5a      	subs	r2, r3, #1
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e508:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d104      	bne.n	800e51c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e512:	f001 fad5 	bl	800fac0 <pvTaskIncrementMutexHeldCount>
 800e516:	4602      	mov	r2, r0
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00f      	beq.n	800e544 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	3310      	adds	r3, #16
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 ff81 	bl	800f430 <xTaskRemoveFromEventList>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d007      	beq.n	800e544 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e534:	4b54      	ldr	r3, [pc, #336]	; (800e688 <xQueueSemaphoreTake+0x21c>)
 800e536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e544:	f001 ffb2 	bl	80104ac <vPortExitCritical>
				return pdPASS;
 800e548:	2301      	movs	r3, #1
 800e54a:	e098      	b.n	800e67e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d112      	bne.n	800e578 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <xQueueSemaphoreTake+0x104>
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	b672      	cpsid	i
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	b662      	cpsie	i
 800e56c:	617b      	str	r3, [r7, #20]
 800e56e:	e7fe      	b.n	800e56e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e570:	f001 ff9c 	bl	80104ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e574:	2300      	movs	r3, #0
 800e576:	e082      	b.n	800e67e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d106      	bne.n	800e58c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e57e:	f107 030c 	add.w	r3, r7, #12
 800e582:	4618      	mov	r0, r3
 800e584:	f000 ffb8 	bl	800f4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e588:	2301      	movs	r3, #1
 800e58a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e58c:	f001 ff8e 	bl	80104ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e590:	f000 fd16 	bl	800efc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e594:	f001 ff58 	bl	8010448 <vPortEnterCritical>
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e59e:	b25b      	sxtb	r3, r3
 800e5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a4:	d103      	bne.n	800e5ae <xQueueSemaphoreTake+0x142>
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5b4:	b25b      	sxtb	r3, r3
 800e5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ba:	d103      	bne.n	800e5c4 <xQueueSemaphoreTake+0x158>
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5c4:	f001 ff72 	bl	80104ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5c8:	463a      	mov	r2, r7
 800e5ca:	f107 030c 	add.w	r3, r7, #12
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 ffa7 	bl	800f524 <xTaskCheckForTimeOut>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d132      	bne.n	800e642 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5de:	f000 f9f6 	bl	800e9ce <prvIsQueueEmpty>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d026      	beq.n	800e636 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d109      	bne.n	800e604 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e5f0:	f001 ff2a 	bl	8010448 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f001 f905 	bl	800f808 <xTaskPriorityInherit>
 800e5fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e600:	f001 ff54 	bl	80104ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	3324      	adds	r3, #36	; 0x24
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	4611      	mov	r1, r2
 800e60c:	4618      	mov	r0, r3
 800e60e:	f000 febd 	bl	800f38c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e614:	f000 f989 	bl	800e92a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e618:	f000 fce0 	bl	800efdc <xTaskResumeAll>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f47f af67 	bne.w	800e4f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e624:	4b18      	ldr	r3, [pc, #96]	; (800e688 <xQueueSemaphoreTake+0x21c>)
 800e626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e62a:	601a      	str	r2, [r3, #0]
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	e75d      	b.n	800e4f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e638:	f000 f977 	bl	800e92a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e63c:	f000 fcce 	bl	800efdc <xTaskResumeAll>
 800e640:	e757      	b.n	800e4f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e644:	f000 f971 	bl	800e92a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e648:	f000 fcc8 	bl	800efdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e64e:	f000 f9be 	bl	800e9ce <prvIsQueueEmpty>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	f43f af4c 	beq.w	800e4f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00d      	beq.n	800e67c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e660:	f001 fef2 	bl	8010448 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e666:	f000 f8b8 	bl	800e7da <prvGetDisinheritPriorityAfterTimeout>
 800e66a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e672:	4618      	mov	r0, r3
 800e674:	f001 f9a0 	bl	800f9b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e678:	f001 ff18 	bl	80104ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e67c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3738      	adds	r7, #56	; 0x38
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	e000ed04 	.word	0xe000ed04

0800e68c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b08e      	sub	sp, #56	; 0x38
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10b      	bne.n	800e6ba <xQueueReceiveFromISR+0x2e>
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	b672      	cpsid	i
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	b662      	cpsie	i
 800e6b6:	623b      	str	r3, [r7, #32]
 800e6b8:	e7fe      	b.n	800e6b8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d103      	bne.n	800e6c8 <xQueueReceiveFromISR+0x3c>
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d101      	bne.n	800e6cc <xQueueReceiveFromISR+0x40>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e000      	b.n	800e6ce <xQueueReceiveFromISR+0x42>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10b      	bne.n	800e6ea <xQueueReceiveFromISR+0x5e>
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	b672      	cpsid	i
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	b662      	cpsie	i
 800e6e6:	61fb      	str	r3, [r7, #28]
 800e6e8:	e7fe      	b.n	800e6e8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6ea:	f001 ff8d 	bl	8010608 <vPortValidateInterruptPriority>
	__asm volatile
 800e6ee:	f3ef 8211 	mrs	r2, BASEPRI
 800e6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f6:	b672      	cpsid	i
 800e6f8:	f383 8811 	msr	BASEPRI, r3
 800e6fc:	f3bf 8f6f 	isb	sy
 800e700:	f3bf 8f4f 	dsb	sy
 800e704:	b662      	cpsie	i
 800e706:	61ba      	str	r2, [r7, #24]
 800e708:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e70a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e70c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e712:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e716:	2b00      	cmp	r3, #0
 800e718:	d02f      	beq.n	800e77a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e724:	68b9      	ldr	r1, [r7, #8]
 800e726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e728:	f000 f8d9 	bl	800e8de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	1e5a      	subs	r2, r3, #1
 800e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e732:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73c:	d112      	bne.n	800e764 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d016      	beq.n	800e774 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	3310      	adds	r3, #16
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 fe70 	bl	800f430 <xTaskRemoveFromEventList>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00e      	beq.n	800e774 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00b      	beq.n	800e774 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	e007      	b.n	800e774 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e768:	3301      	adds	r3, #1
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	b25a      	sxtb	r2, r3
 800e76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e774:	2301      	movs	r3, #1
 800e776:	637b      	str	r3, [r7, #52]	; 0x34
 800e778:	e001      	b.n	800e77e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	637b      	str	r3, [r7, #52]	; 0x34
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3738      	adds	r7, #56	; 0x38
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10b      	bne.n	800e7bc <vQueueDelete+0x2a>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a8:	b672      	cpsid	i
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	b662      	cpsie	i
 800e7b8:	60bb      	str	r3, [r7, #8]
 800e7ba:	e7fe      	b.n	800e7ba <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 f95d 	bl	800ea7c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f002 f825 	bl	801081c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e7d2:	bf00      	nop
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e7da:	b480      	push	{r7}
 800e7dc:	b085      	sub	sp, #20
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d006      	beq.n	800e7f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	e001      	b.n	800e7fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
	}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b086      	sub	sp, #24
 800e80e:	af00      	add	r7, sp, #0
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e816:	2300      	movs	r3, #0
 800e818:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10d      	bne.n	800e844 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d14d      	bne.n	800e8cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	689b      	ldr	r3, [r3, #8]
 800e834:	4618      	mov	r0, r3
 800e836:	f001 f84f 	bl	800f8d8 <xTaskPriorityDisinherit>
 800e83a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	609a      	str	r2, [r3, #8]
 800e842:	e043      	b.n	800e8cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d119      	bne.n	800e87e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6858      	ldr	r0, [r3, #4]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e852:	461a      	mov	r2, r3
 800e854:	68b9      	ldr	r1, [r7, #8]
 800e856:	f002 fe9b 	bl	8011590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	685a      	ldr	r2, [r3, #4]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e862:	441a      	add	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	429a      	cmp	r2, r3
 800e872:	d32b      	bcc.n	800e8cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	605a      	str	r2, [r3, #4]
 800e87c:	e026      	b.n	800e8cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	68d8      	ldr	r0, [r3, #12]
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e886:	461a      	mov	r2, r3
 800e888:	68b9      	ldr	r1, [r7, #8]
 800e88a:	f002 fe81 	bl	8011590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	68da      	ldr	r2, [r3, #12]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e896:	425b      	negs	r3, r3
 800e898:	441a      	add	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	68da      	ldr	r2, [r3, #12]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d207      	bcs.n	800e8ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	689a      	ldr	r2, [r3, #8]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b2:	425b      	negs	r3, r3
 800e8b4:	441a      	add	r2, r3
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d105      	bne.n	800e8cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e8d4:	697b      	ldr	r3, [r7, #20]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b082      	sub	sp, #8
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
 800e8e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d018      	beq.n	800e922 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68da      	ldr	r2, [r3, #12]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f8:	441a      	add	r2, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68da      	ldr	r2, [r3, #12]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	429a      	cmp	r2, r3
 800e908:	d303      	bcc.n	800e912 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	68d9      	ldr	r1, [r3, #12]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91a:	461a      	mov	r2, r3
 800e91c:	6838      	ldr	r0, [r7, #0]
 800e91e:	f002 fe37 	bl	8011590 <memcpy>
	}
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b084      	sub	sp, #16
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e932:	f001 fd89 	bl	8010448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e93c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e93e:	e011      	b.n	800e964 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e944:	2b00      	cmp	r3, #0
 800e946:	d012      	beq.n	800e96e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	3324      	adds	r3, #36	; 0x24
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 fd6f 	bl	800f430 <xTaskRemoveFromEventList>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d001      	beq.n	800e95c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e958:	f000 fe48 	bl	800f5ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	3b01      	subs	r3, #1
 800e960:	b2db      	uxtb	r3, r3
 800e962:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	dce9      	bgt.n	800e940 <prvUnlockQueue+0x16>
 800e96c:	e000      	b.n	800e970 <prvUnlockQueue+0x46>
					break;
 800e96e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	22ff      	movs	r2, #255	; 0xff
 800e974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e978:	f001 fd98 	bl	80104ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e97c:	f001 fd64 	bl	8010448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e986:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e988:	e011      	b.n	800e9ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d012      	beq.n	800e9b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	3310      	adds	r3, #16
 800e996:	4618      	mov	r0, r3
 800e998:	f000 fd4a 	bl	800f430 <xTaskRemoveFromEventList>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e9a2:	f000 fe23 	bl	800f5ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e9a6:	7bbb      	ldrb	r3, [r7, #14]
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dce9      	bgt.n	800e98a <prvUnlockQueue+0x60>
 800e9b6:	e000      	b.n	800e9ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e9b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	22ff      	movs	r2, #255	; 0xff
 800e9be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e9c2:	f001 fd73 	bl	80104ac <vPortExitCritical>
}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9d6:	f001 fd37 	bl	8010448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	60fb      	str	r3, [r7, #12]
 800e9e6:	e001      	b.n	800e9ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9ec:	f001 fd5e 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea02:	f001 fd21 	bl	8010448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d102      	bne.n	800ea18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea12:	2301      	movs	r3, #1
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e001      	b.n	800ea1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea1c:	f001 fd46 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800ea20:	68fb      	ldr	r3, [r7, #12]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
	...

0800ea2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea36:	2300      	movs	r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
 800ea3a:	e014      	b.n	800ea66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ea3c:	4a0e      	ldr	r2, [pc, #56]	; (800ea78 <vQueueAddToRegistry+0x4c>)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10b      	bne.n	800ea60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ea48:	490b      	ldr	r1, [pc, #44]	; (800ea78 <vQueueAddToRegistry+0x4c>)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	683a      	ldr	r2, [r7, #0]
 800ea4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ea52:	4a09      	ldr	r2, [pc, #36]	; (800ea78 <vQueueAddToRegistry+0x4c>)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	4413      	add	r3, r2
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ea5e:	e005      	b.n	800ea6c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	3301      	adds	r3, #1
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b07      	cmp	r3, #7
 800ea6a:	d9e7      	bls.n	800ea3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ea6c:	bf00      	nop
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	200087b4 	.word	0x200087b4

0800ea7c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea84:	2300      	movs	r3, #0
 800ea86:	60fb      	str	r3, [r7, #12]
 800ea88:	e016      	b.n	800eab8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ea8a:	4a10      	ldr	r2, [pc, #64]	; (800eacc <vQueueUnregisterQueue+0x50>)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	4413      	add	r3, r2
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d10b      	bne.n	800eab2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ea9a:	4a0c      	ldr	r2, [pc, #48]	; (800eacc <vQueueUnregisterQueue+0x50>)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800eaa4:	4a09      	ldr	r2, [pc, #36]	; (800eacc <vQueueUnregisterQueue+0x50>)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	4413      	add	r3, r2
 800eaac:	2200      	movs	r2, #0
 800eaae:	605a      	str	r2, [r3, #4]
				break;
 800eab0:	e005      	b.n	800eabe <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	3301      	adds	r3, #1
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2b07      	cmp	r3, #7
 800eabc:	d9e5      	bls.n	800ea8a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800eabe:	bf00      	nop
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200087b4 	.word	0x200087b4

0800ead0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eae0:	f001 fcb2 	bl	8010448 <vPortEnterCritical>
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eaea:	b25b      	sxtb	r3, r3
 800eaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf0:	d103      	bne.n	800eafa <vQueueWaitForMessageRestricted+0x2a>
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb00:	b25b      	sxtb	r3, r3
 800eb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb06:	d103      	bne.n	800eb10 <vQueueWaitForMessageRestricted+0x40>
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb10:	f001 fccc 	bl	80104ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d106      	bne.n	800eb2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	3324      	adds	r3, #36	; 0x24
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	68b9      	ldr	r1, [r7, #8]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 fc57 	bl	800f3d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb2a:	6978      	ldr	r0, [r7, #20]
 800eb2c:	f7ff fefd 	bl	800e92a <prvUnlockQueue>
	}
 800eb30:	bf00      	nop
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08e      	sub	sp, #56	; 0x38
 800eb3c:	af04      	add	r7, sp, #16
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10b      	bne.n	800eb64 <xTaskCreateStatic+0x2c>
 800eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb50:	b672      	cpsid	i
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	b662      	cpsie	i
 800eb60:	623b      	str	r3, [r7, #32]
 800eb62:	e7fe      	b.n	800eb62 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d10b      	bne.n	800eb82 <xTaskCreateStatic+0x4a>
 800eb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6e:	b672      	cpsid	i
 800eb70:	f383 8811 	msr	BASEPRI, r3
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	b662      	cpsie	i
 800eb7e:	61fb      	str	r3, [r7, #28]
 800eb80:	e7fe      	b.n	800eb80 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb82:	235c      	movs	r3, #92	; 0x5c
 800eb84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	2b5c      	cmp	r3, #92	; 0x5c
 800eb8a:	d00b      	beq.n	800eba4 <xTaskCreateStatic+0x6c>
 800eb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb90:	b672      	cpsid	i
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	b662      	cpsie	i
 800eba0:	61bb      	str	r3, [r7, #24]
 800eba2:	e7fe      	b.n	800eba2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eba4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01e      	beq.n	800ebea <xTaskCreateStatic+0xb2>
 800ebac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d01b      	beq.n	800ebea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	9303      	str	r3, [sp, #12]
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	9302      	str	r3, [sp, #8]
 800ebcc:	f107 0314 	add.w	r3, r7, #20
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f000 f850 	bl	800ec82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebe4:	f000 f8de 	bl	800eda4 <prvAddNewTaskToReadyList>
 800ebe8:	e001      	b.n	800ebee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ebee:	697b      	ldr	r3, [r7, #20]
	}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3728      	adds	r7, #40	; 0x28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08c      	sub	sp, #48	; 0x30
 800ebfc:	af04      	add	r7, sp, #16
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	603b      	str	r3, [r7, #0]
 800ec04:	4613      	mov	r3, r2
 800ec06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec08:	88fb      	ldrh	r3, [r7, #6]
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f001 fd3d 	bl	801068c <pvPortMalloc>
 800ec12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00e      	beq.n	800ec38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec1a:	205c      	movs	r0, #92	; 0x5c
 800ec1c:	f001 fd36 	bl	801068c <pvPortMalloc>
 800ec20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d003      	beq.n	800ec30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	697a      	ldr	r2, [r7, #20]
 800ec2c:	631a      	str	r2, [r3, #48]	; 0x30
 800ec2e:	e005      	b.n	800ec3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec30:	6978      	ldr	r0, [r7, #20]
 800ec32:	f001 fdf3 	bl	801081c <vPortFree>
 800ec36:	e001      	b.n	800ec3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d017      	beq.n	800ec72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec4a:	88fa      	ldrh	r2, [r7, #6]
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	9303      	str	r3, [sp, #12]
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	9302      	str	r3, [sp, #8]
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	9301      	str	r3, [sp, #4]
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	68b9      	ldr	r1, [r7, #8]
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f000 f80e 	bl	800ec82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec66:	69f8      	ldr	r0, [r7, #28]
 800ec68:	f000 f89c 	bl	800eda4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	61bb      	str	r3, [r7, #24]
 800ec70:	e002      	b.n	800ec78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec72:	f04f 33ff 	mov.w	r3, #4294967295
 800ec76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec78:	69bb      	ldr	r3, [r7, #24]
	}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3720      	adds	r7, #32
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b088      	sub	sp, #32
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ec90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	461a      	mov	r2, r3
 800ec9a:	21a5      	movs	r1, #165	; 0xa5
 800ec9c:	f002 fc83 	bl	80115a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eca4:	6879      	ldr	r1, [r7, #4]
 800eca6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ecaa:	440b      	add	r3, r1
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4413      	add	r3, r2
 800ecb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	f023 0307 	bic.w	r3, r3, #7
 800ecb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	f003 0307 	and.w	r3, r3, #7
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00b      	beq.n	800ecdc <prvInitialiseNewTask+0x5a>
 800ecc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc8:	b672      	cpsid	i
 800ecca:	f383 8811 	msr	BASEPRI, r3
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	b662      	cpsie	i
 800ecd8:	617b      	str	r3, [r7, #20]
 800ecda:	e7fe      	b.n	800ecda <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d01f      	beq.n	800ed22 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ece2:	2300      	movs	r3, #0
 800ece4:	61fb      	str	r3, [r7, #28]
 800ece6:	e012      	b.n	800ed0e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	4413      	add	r3, r2
 800ecee:	7819      	ldrb	r1, [r3, #0]
 800ecf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	3334      	adds	r3, #52	; 0x34
 800ecf8:	460a      	mov	r2, r1
 800ecfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ecfc:	68ba      	ldr	r2, [r7, #8]
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	4413      	add	r3, r2
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d006      	beq.n	800ed16 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	61fb      	str	r3, [r7, #28]
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	2b0f      	cmp	r3, #15
 800ed12:	d9e9      	bls.n	800ece8 <prvInitialiseNewTask+0x66>
 800ed14:	e000      	b.n	800ed18 <prvInitialiseNewTask+0x96>
			{
				break;
 800ed16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed20:	e003      	b.n	800ed2a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	2b37      	cmp	r3, #55	; 0x37
 800ed2e:	d901      	bls.n	800ed34 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed30:	2337      	movs	r3, #55	; 0x37
 800ed32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	2200      	movs	r2, #0
 800ed44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	3304      	adds	r3, #4
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe fd76 	bl	800d83c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	3318      	adds	r3, #24
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fe fd71 	bl	800d83c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	2200      	movs	r2, #0
 800ed74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	68f9      	ldr	r1, [r7, #12]
 800ed82:	69b8      	ldr	r0, [r7, #24]
 800ed84:	f001 fa58 	bl	8010238 <pxPortInitialiseStack>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ed8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d002      	beq.n	800ed9a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed9a:	bf00      	nop
 800ed9c:	3720      	adds	r7, #32
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edac:	f001 fb4c 	bl	8010448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edb0:	4b2d      	ldr	r3, [pc, #180]	; (800ee68 <prvAddNewTaskToReadyList+0xc4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	3301      	adds	r3, #1
 800edb6:	4a2c      	ldr	r2, [pc, #176]	; (800ee68 <prvAddNewTaskToReadyList+0xc4>)
 800edb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edba:	4b2c      	ldr	r3, [pc, #176]	; (800ee6c <prvAddNewTaskToReadyList+0xc8>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d109      	bne.n	800edd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edc2:	4a2a      	ldr	r2, [pc, #168]	; (800ee6c <prvAddNewTaskToReadyList+0xc8>)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800edc8:	4b27      	ldr	r3, [pc, #156]	; (800ee68 <prvAddNewTaskToReadyList+0xc4>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d110      	bne.n	800edf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800edd0:	f000 fc30 	bl	800f634 <prvInitialiseTaskLists>
 800edd4:	e00d      	b.n	800edf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800edd6:	4b26      	ldr	r3, [pc, #152]	; (800ee70 <prvAddNewTaskToReadyList+0xcc>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d109      	bne.n	800edf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edde:	4b23      	ldr	r3, [pc, #140]	; (800ee6c <prvAddNewTaskToReadyList+0xc8>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede8:	429a      	cmp	r2, r3
 800edea:	d802      	bhi.n	800edf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800edec:	4a1f      	ldr	r2, [pc, #124]	; (800ee6c <prvAddNewTaskToReadyList+0xc8>)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800edf2:	4b20      	ldr	r3, [pc, #128]	; (800ee74 <prvAddNewTaskToReadyList+0xd0>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3301      	adds	r3, #1
 800edf8:	4a1e      	ldr	r2, [pc, #120]	; (800ee74 <prvAddNewTaskToReadyList+0xd0>)
 800edfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800edfc:	4b1d      	ldr	r3, [pc, #116]	; (800ee74 <prvAddNewTaskToReadyList+0xd0>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee08:	4b1b      	ldr	r3, [pc, #108]	; (800ee78 <prvAddNewTaskToReadyList+0xd4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d903      	bls.n	800ee18 <prvAddNewTaskToReadyList+0x74>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee14:	4a18      	ldr	r2, [pc, #96]	; (800ee78 <prvAddNewTaskToReadyList+0xd4>)
 800ee16:	6013      	str	r3, [r2, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4a15      	ldr	r2, [pc, #84]	; (800ee7c <prvAddNewTaskToReadyList+0xd8>)
 800ee26:	441a      	add	r2, r3
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f7fe fd11 	bl	800d856 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee34:	f001 fb3a 	bl	80104ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee38:	4b0d      	ldr	r3, [pc, #52]	; (800ee70 <prvAddNewTaskToReadyList+0xcc>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00e      	beq.n	800ee5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee40:	4b0a      	ldr	r3, [pc, #40]	; (800ee6c <prvAddNewTaskToReadyList+0xc8>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d207      	bcs.n	800ee5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee4e:	4b0c      	ldr	r3, [pc, #48]	; (800ee80 <prvAddNewTaskToReadyList+0xdc>)
 800ee50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee5e:	bf00      	nop
 800ee60:	3708      	adds	r7, #8
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	20000de4 	.word	0x20000de4
 800ee6c:	20000910 	.word	0x20000910
 800ee70:	20000df0 	.word	0x20000df0
 800ee74:	20000e00 	.word	0x20000e00
 800ee78:	20000dec 	.word	0x20000dec
 800ee7c:	20000914 	.word	0x20000914
 800ee80:	e000ed04 	.word	0xe000ed04

0800ee84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d018      	beq.n	800eec8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ee96:	4b14      	ldr	r3, [pc, #80]	; (800eee8 <vTaskDelay+0x64>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00b      	beq.n	800eeb6 <vTaskDelay+0x32>
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	b672      	cpsid	i
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	b662      	cpsie	i
 800eeb2:	60bb      	str	r3, [r7, #8]
 800eeb4:	e7fe      	b.n	800eeb4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800eeb6:	f000 f883 	bl	800efc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eeba:	2100      	movs	r1, #0
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 fe13 	bl	800fae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eec2:	f000 f88b 	bl	800efdc <xTaskResumeAll>
 800eec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d107      	bne.n	800eede <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800eece:	4b07      	ldr	r3, [pc, #28]	; (800eeec <vTaskDelay+0x68>)
 800eed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	f3bf 8f4f 	dsb	sy
 800eeda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20000e0c 	.word	0x20000e0c
 800eeec:	e000ed04 	.word	0xe000ed04

0800eef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b08a      	sub	sp, #40	; 0x28
 800eef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eefe:	463a      	mov	r2, r7
 800ef00:	1d39      	adds	r1, r7, #4
 800ef02:	f107 0308 	add.w	r3, r7, #8
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fc44 	bl	800d794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	9202      	str	r2, [sp, #8]
 800ef14:	9301      	str	r3, [sp, #4]
 800ef16:	2300      	movs	r3, #0
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	460a      	mov	r2, r1
 800ef1e:	4922      	ldr	r1, [pc, #136]	; (800efa8 <vTaskStartScheduler+0xb8>)
 800ef20:	4822      	ldr	r0, [pc, #136]	; (800efac <vTaskStartScheduler+0xbc>)
 800ef22:	f7ff fe09 	bl	800eb38 <xTaskCreateStatic>
 800ef26:	4602      	mov	r2, r0
 800ef28:	4b21      	ldr	r3, [pc, #132]	; (800efb0 <vTaskStartScheduler+0xc0>)
 800ef2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef2c:	4b20      	ldr	r3, [pc, #128]	; (800efb0 <vTaskStartScheduler+0xc0>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef34:	2301      	movs	r3, #1
 800ef36:	617b      	str	r3, [r7, #20]
 800ef38:	e001      	b.n	800ef3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d102      	bne.n	800ef4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef44:	f000 fe24 	bl	800fb90 <xTimerCreateTimerTask>
 800ef48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d117      	bne.n	800ef80 <vTaskStartScheduler+0x90>
 800ef50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef54:	b672      	cpsid	i
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	b662      	cpsie	i
 800ef64:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef66:	4b13      	ldr	r3, [pc, #76]	; (800efb4 <vTaskStartScheduler+0xc4>)
 800ef68:	f04f 32ff 	mov.w	r2, #4294967295
 800ef6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef6e:	4b12      	ldr	r3, [pc, #72]	; (800efb8 <vTaskStartScheduler+0xc8>)
 800ef70:	2201      	movs	r2, #1
 800ef72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef74:	4b11      	ldr	r3, [pc, #68]	; (800efbc <vTaskStartScheduler+0xcc>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef7a:	f001 f9e9 	bl	8010350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef7e:	e00f      	b.n	800efa0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef86:	d10b      	bne.n	800efa0 <vTaskStartScheduler+0xb0>
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	b672      	cpsid	i
 800ef8e:	f383 8811 	msr	BASEPRI, r3
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	b662      	cpsie	i
 800ef9c:	60fb      	str	r3, [r7, #12]
 800ef9e:	e7fe      	b.n	800ef9e <vTaskStartScheduler+0xae>
}
 800efa0:	bf00      	nop
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	080122b4 	.word	0x080122b4
 800efac:	0800f605 	.word	0x0800f605
 800efb0:	20000e08 	.word	0x20000e08
 800efb4:	20000e04 	.word	0x20000e04
 800efb8:	20000df0 	.word	0x20000df0
 800efbc:	20000de8 	.word	0x20000de8

0800efc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efc0:	b480      	push	{r7}
 800efc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800efc4:	4b04      	ldr	r3, [pc, #16]	; (800efd8 <vTaskSuspendAll+0x18>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	3301      	adds	r3, #1
 800efca:	4a03      	ldr	r2, [pc, #12]	; (800efd8 <vTaskSuspendAll+0x18>)
 800efcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800efce:	bf00      	nop
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	20000e0c 	.word	0x20000e0c

0800efdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800efe6:	2300      	movs	r3, #0
 800efe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800efea:	4b42      	ldr	r3, [pc, #264]	; (800f0f4 <xTaskResumeAll+0x118>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d10b      	bne.n	800f00a <xTaskResumeAll+0x2e>
 800eff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff6:	b672      	cpsid	i
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	b662      	cpsie	i
 800f006:	603b      	str	r3, [r7, #0]
 800f008:	e7fe      	b.n	800f008 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f00a:	f001 fa1d 	bl	8010448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f00e:	4b39      	ldr	r3, [pc, #228]	; (800f0f4 <xTaskResumeAll+0x118>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3b01      	subs	r3, #1
 800f014:	4a37      	ldr	r2, [pc, #220]	; (800f0f4 <xTaskResumeAll+0x118>)
 800f016:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f018:	4b36      	ldr	r3, [pc, #216]	; (800f0f4 <xTaskResumeAll+0x118>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d162      	bne.n	800f0e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f020:	4b35      	ldr	r3, [pc, #212]	; (800f0f8 <xTaskResumeAll+0x11c>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d05e      	beq.n	800f0e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f028:	e02f      	b.n	800f08a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f02a:	4b34      	ldr	r3, [pc, #208]	; (800f0fc <xTaskResumeAll+0x120>)
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3318      	adds	r3, #24
 800f036:	4618      	mov	r0, r3
 800f038:	f7fe fc6a 	bl	800d910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	3304      	adds	r3, #4
 800f040:	4618      	mov	r0, r3
 800f042:	f7fe fc65 	bl	800d910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f04a:	4b2d      	ldr	r3, [pc, #180]	; (800f100 <xTaskResumeAll+0x124>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d903      	bls.n	800f05a <xTaskResumeAll+0x7e>
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	4a2a      	ldr	r2, [pc, #168]	; (800f100 <xTaskResumeAll+0x124>)
 800f058:	6013      	str	r3, [r2, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f05e:	4613      	mov	r3, r2
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	4413      	add	r3, r2
 800f064:	009b      	lsls	r3, r3, #2
 800f066:	4a27      	ldr	r2, [pc, #156]	; (800f104 <xTaskResumeAll+0x128>)
 800f068:	441a      	add	r2, r3
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3304      	adds	r3, #4
 800f06e:	4619      	mov	r1, r3
 800f070:	4610      	mov	r0, r2
 800f072:	f7fe fbf0 	bl	800d856 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07a:	4b23      	ldr	r3, [pc, #140]	; (800f108 <xTaskResumeAll+0x12c>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f080:	429a      	cmp	r2, r3
 800f082:	d302      	bcc.n	800f08a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f084:	4b21      	ldr	r3, [pc, #132]	; (800f10c <xTaskResumeAll+0x130>)
 800f086:	2201      	movs	r2, #1
 800f088:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f08a:	4b1c      	ldr	r3, [pc, #112]	; (800f0fc <xTaskResumeAll+0x120>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1cb      	bne.n	800f02a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f098:	f000 fb68 	bl	800f76c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f09c:	4b1c      	ldr	r3, [pc, #112]	; (800f110 <xTaskResumeAll+0x134>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d010      	beq.n	800f0ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0a8:	f000 f858 	bl	800f15c <xTaskIncrementTick>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f0b2:	4b16      	ldr	r3, [pc, #88]	; (800f10c <xTaskResumeAll+0x130>)
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1f1      	bne.n	800f0a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f0c4:	4b12      	ldr	r3, [pc, #72]	; (800f110 <xTaskResumeAll+0x134>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0ca:	4b10      	ldr	r3, [pc, #64]	; (800f10c <xTaskResumeAll+0x130>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d009      	beq.n	800f0e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0d6:	4b0f      	ldr	r3, [pc, #60]	; (800f114 <xTaskResumeAll+0x138>)
 800f0d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0e6:	f001 f9e1 	bl	80104ac <vPortExitCritical>

	return xAlreadyYielded;
 800f0ea:	68bb      	ldr	r3, [r7, #8]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	20000e0c 	.word	0x20000e0c
 800f0f8:	20000de4 	.word	0x20000de4
 800f0fc:	20000da4 	.word	0x20000da4
 800f100:	20000dec 	.word	0x20000dec
 800f104:	20000914 	.word	0x20000914
 800f108:	20000910 	.word	0x20000910
 800f10c:	20000df8 	.word	0x20000df8
 800f110:	20000df4 	.word	0x20000df4
 800f114:	e000ed04 	.word	0xe000ed04

0800f118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f11e:	4b05      	ldr	r3, [pc, #20]	; (800f134 <xTaskGetTickCount+0x1c>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f124:	687b      	ldr	r3, [r7, #4]
}
 800f126:	4618      	mov	r0, r3
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20000de8 	.word	0x20000de8

0800f138 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f13e:	f001 fa63 	bl	8010608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f142:	2300      	movs	r3, #0
 800f144:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f146:	4b04      	ldr	r3, [pc, #16]	; (800f158 <xTaskGetTickCountFromISR+0x20>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f14c:	683b      	ldr	r3, [r7, #0]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	20000de8 	.word	0x20000de8

0800f15c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f162:	2300      	movs	r3, #0
 800f164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f166:	4b4f      	ldr	r3, [pc, #316]	; (800f2a4 <xTaskIncrementTick+0x148>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f040 808a 	bne.w	800f284 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f170:	4b4d      	ldr	r3, [pc, #308]	; (800f2a8 <xTaskIncrementTick+0x14c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3301      	adds	r3, #1
 800f176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f178:	4a4b      	ldr	r2, [pc, #300]	; (800f2a8 <xTaskIncrementTick+0x14c>)
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d121      	bne.n	800f1c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f184:	4b49      	ldr	r3, [pc, #292]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00b      	beq.n	800f1a6 <xTaskIncrementTick+0x4a>
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	b672      	cpsid	i
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	b662      	cpsie	i
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	e7fe      	b.n	800f1a4 <xTaskIncrementTick+0x48>
 800f1a6:	4b41      	ldr	r3, [pc, #260]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	4b40      	ldr	r3, [pc, #256]	; (800f2b0 <xTaskIncrementTick+0x154>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a3e      	ldr	r2, [pc, #248]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	4a3e      	ldr	r2, [pc, #248]	; (800f2b0 <xTaskIncrementTick+0x154>)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	4b3e      	ldr	r3, [pc, #248]	; (800f2b4 <xTaskIncrementTick+0x158>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4a3c      	ldr	r2, [pc, #240]	; (800f2b4 <xTaskIncrementTick+0x158>)
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	f000 fad2 	bl	800f76c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1c8:	4b3b      	ldr	r3, [pc, #236]	; (800f2b8 <xTaskIncrementTick+0x15c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	693a      	ldr	r2, [r7, #16]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d349      	bcc.n	800f266 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1d2:	4b36      	ldr	r3, [pc, #216]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d104      	bne.n	800f1e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1dc:	4b36      	ldr	r3, [pc, #216]	; (800f2b8 <xTaskIncrementTick+0x15c>)
 800f1de:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e2:	601a      	str	r2, [r3, #0]
					break;
 800f1e4:	e03f      	b.n	800f266 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e6:	4b31      	ldr	r3, [pc, #196]	; (800f2ac <xTaskIncrementTick+0x150>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d203      	bcs.n	800f206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1fe:	4a2e      	ldr	r2, [pc, #184]	; (800f2b8 <xTaskIncrementTick+0x15c>)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f204:	e02f      	b.n	800f266 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	3304      	adds	r3, #4
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fe fb80 	bl	800d910 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f214:	2b00      	cmp	r3, #0
 800f216:	d004      	beq.n	800f222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	3318      	adds	r3, #24
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fe fb77 	bl	800d910 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f226:	4b25      	ldr	r3, [pc, #148]	; (800f2bc <xTaskIncrementTick+0x160>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d903      	bls.n	800f236 <xTaskIncrementTick+0xda>
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f232:	4a22      	ldr	r2, [pc, #136]	; (800f2bc <xTaskIncrementTick+0x160>)
 800f234:	6013      	str	r3, [r2, #0]
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23a:	4613      	mov	r3, r2
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	4413      	add	r3, r2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4a1f      	ldr	r2, [pc, #124]	; (800f2c0 <xTaskIncrementTick+0x164>)
 800f244:	441a      	add	r2, r3
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	3304      	adds	r3, #4
 800f24a:	4619      	mov	r1, r3
 800f24c:	4610      	mov	r0, r2
 800f24e:	f7fe fb02 	bl	800d856 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f256:	4b1b      	ldr	r3, [pc, #108]	; (800f2c4 <xTaskIncrementTick+0x168>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d3b8      	bcc.n	800f1d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f260:	2301      	movs	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f264:	e7b5      	b.n	800f1d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f266:	4b17      	ldr	r3, [pc, #92]	; (800f2c4 <xTaskIncrementTick+0x168>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26c:	4914      	ldr	r1, [pc, #80]	; (800f2c0 <xTaskIncrementTick+0x164>)
 800f26e:	4613      	mov	r3, r2
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	4413      	add	r3, r2
 800f274:	009b      	lsls	r3, r3, #2
 800f276:	440b      	add	r3, r1
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d907      	bls.n	800f28e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f27e:	2301      	movs	r3, #1
 800f280:	617b      	str	r3, [r7, #20]
 800f282:	e004      	b.n	800f28e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f284:	4b10      	ldr	r3, [pc, #64]	; (800f2c8 <xTaskIncrementTick+0x16c>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	3301      	adds	r3, #1
 800f28a:	4a0f      	ldr	r2, [pc, #60]	; (800f2c8 <xTaskIncrementTick+0x16c>)
 800f28c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f28e:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <xTaskIncrementTick+0x170>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f296:	2301      	movs	r3, #1
 800f298:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f29a:	697b      	ldr	r3, [r7, #20]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3718      	adds	r7, #24
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	20000e0c 	.word	0x20000e0c
 800f2a8:	20000de8 	.word	0x20000de8
 800f2ac:	20000d9c 	.word	0x20000d9c
 800f2b0:	20000da0 	.word	0x20000da0
 800f2b4:	20000dfc 	.word	0x20000dfc
 800f2b8:	20000e04 	.word	0x20000e04
 800f2bc:	20000dec 	.word	0x20000dec
 800f2c0:	20000914 	.word	0x20000914
 800f2c4:	20000910 	.word	0x20000910
 800f2c8:	20000df4 	.word	0x20000df4
 800f2cc:	20000df8 	.word	0x20000df8

0800f2d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2d6:	4b28      	ldr	r3, [pc, #160]	; (800f378 <vTaskSwitchContext+0xa8>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2de:	4b27      	ldr	r3, [pc, #156]	; (800f37c <vTaskSwitchContext+0xac>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2e4:	e042      	b.n	800f36c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800f2e6:	4b25      	ldr	r3, [pc, #148]	; (800f37c <vTaskSwitchContext+0xac>)
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2ec:	4b24      	ldr	r3, [pc, #144]	; (800f380 <vTaskSwitchContext+0xb0>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	e011      	b.n	800f318 <vTaskSwitchContext+0x48>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10b      	bne.n	800f312 <vTaskSwitchContext+0x42>
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	b672      	cpsid	i
 800f300:	f383 8811 	msr	BASEPRI, r3
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	b662      	cpsie	i
 800f30e:	607b      	str	r3, [r7, #4]
 800f310:	e7fe      	b.n	800f310 <vTaskSwitchContext+0x40>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	3b01      	subs	r3, #1
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	491a      	ldr	r1, [pc, #104]	; (800f384 <vTaskSwitchContext+0xb4>)
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4613      	mov	r3, r2
 800f31e:	009b      	lsls	r3, r3, #2
 800f320:	4413      	add	r3, r2
 800f322:	009b      	lsls	r3, r3, #2
 800f324:	440b      	add	r3, r1
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d0e3      	beq.n	800f2f4 <vTaskSwitchContext+0x24>
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	4613      	mov	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4413      	add	r3, r2
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	4a13      	ldr	r2, [pc, #76]	; (800f384 <vTaskSwitchContext+0xb4>)
 800f338:	4413      	add	r3, r2
 800f33a:	60bb      	str	r3, [r7, #8]
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	605a      	str	r2, [r3, #4]
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	685a      	ldr	r2, [r3, #4]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	3308      	adds	r3, #8
 800f34e:	429a      	cmp	r2, r3
 800f350:	d104      	bne.n	800f35c <vTaskSwitchContext+0x8c>
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	685a      	ldr	r2, [r3, #4]
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	605a      	str	r2, [r3, #4]
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	4a09      	ldr	r2, [pc, #36]	; (800f388 <vTaskSwitchContext+0xb8>)
 800f364:	6013      	str	r3, [r2, #0]
 800f366:	4a06      	ldr	r2, [pc, #24]	; (800f380 <vTaskSwitchContext+0xb0>)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6013      	str	r3, [r2, #0]
}
 800f36c:	bf00      	nop
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	20000e0c 	.word	0x20000e0c
 800f37c:	20000df8 	.word	0x20000df8
 800f380:	20000dec 	.word	0x20000dec
 800f384:	20000914 	.word	0x20000914
 800f388:	20000910 	.word	0x20000910

0800f38c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d10b      	bne.n	800f3b4 <vTaskPlaceOnEventList+0x28>
 800f39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a0:	b672      	cpsid	i
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	b662      	cpsie	i
 800f3b0:	60fb      	str	r3, [r7, #12]
 800f3b2:	e7fe      	b.n	800f3b2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3b4:	4b07      	ldr	r3, [pc, #28]	; (800f3d4 <vTaskPlaceOnEventList+0x48>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3318      	adds	r3, #24
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f7fe fa6e 	bl	800d89e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3c2:	2101      	movs	r1, #1
 800f3c4:	6838      	ldr	r0, [r7, #0]
 800f3c6:	f000 fb8f 	bl	800fae8 <prvAddCurrentTaskToDelayedList>
}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	20000910 	.word	0x20000910

0800f3d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10b      	bne.n	800f402 <vTaskPlaceOnEventListRestricted+0x2a>
 800f3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ee:	b672      	cpsid	i
 800f3f0:	f383 8811 	msr	BASEPRI, r3
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	f3bf 8f4f 	dsb	sy
 800f3fc:	b662      	cpsie	i
 800f3fe:	617b      	str	r3, [r7, #20]
 800f400:	e7fe      	b.n	800f400 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f402:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <vTaskPlaceOnEventListRestricted+0x54>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	3318      	adds	r3, #24
 800f408:	4619      	mov	r1, r3
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f7fe fa23 	bl	800d856 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d002      	beq.n	800f41c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f416:	f04f 33ff 	mov.w	r3, #4294967295
 800f41a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	68b8      	ldr	r0, [r7, #8]
 800f420:	f000 fb62 	bl	800fae8 <prvAddCurrentTaskToDelayedList>
	}
 800f424:	bf00      	nop
 800f426:	3718      	adds	r7, #24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	20000910 	.word	0x20000910

0800f430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68db      	ldr	r3, [r3, #12]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10b      	bne.n	800f45e <xTaskRemoveFromEventList+0x2e>
 800f446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44a:	b672      	cpsid	i
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	b662      	cpsie	i
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	e7fe      	b.n	800f45c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	3318      	adds	r3, #24
 800f462:	4618      	mov	r0, r3
 800f464:	f7fe fa54 	bl	800d910 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f468:	4b1d      	ldr	r3, [pc, #116]	; (800f4e0 <xTaskRemoveFromEventList+0xb0>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d11d      	bne.n	800f4ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	3304      	adds	r3, #4
 800f474:	4618      	mov	r0, r3
 800f476:	f7fe fa4b 	bl	800d910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f47e:	4b19      	ldr	r3, [pc, #100]	; (800f4e4 <xTaskRemoveFromEventList+0xb4>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	429a      	cmp	r2, r3
 800f484:	d903      	bls.n	800f48e <xTaskRemoveFromEventList+0x5e>
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48a:	4a16      	ldr	r2, [pc, #88]	; (800f4e4 <xTaskRemoveFromEventList+0xb4>)
 800f48c:	6013      	str	r3, [r2, #0]
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f492:	4613      	mov	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4a13      	ldr	r2, [pc, #76]	; (800f4e8 <xTaskRemoveFromEventList+0xb8>)
 800f49c:	441a      	add	r2, r3
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	f7fe f9d6 	bl	800d856 <vListInsertEnd>
 800f4aa:	e005      	b.n	800f4b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	3318      	adds	r3, #24
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	480e      	ldr	r0, [pc, #56]	; (800f4ec <xTaskRemoveFromEventList+0xbc>)
 800f4b4:	f7fe f9cf 	bl	800d856 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4bc:	4b0c      	ldr	r3, [pc, #48]	; (800f4f0 <xTaskRemoveFromEventList+0xc0>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d905      	bls.n	800f4d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4ca:	4b0a      	ldr	r3, [pc, #40]	; (800f4f4 <xTaskRemoveFromEventList+0xc4>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	601a      	str	r2, [r3, #0]
 800f4d0:	e001      	b.n	800f4d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4d6:	697b      	ldr	r3, [r7, #20]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	20000e0c 	.word	0x20000e0c
 800f4e4:	20000dec 	.word	0x20000dec
 800f4e8:	20000914 	.word	0x20000914
 800f4ec:	20000da4 	.word	0x20000da4
 800f4f0:	20000910 	.word	0x20000910
 800f4f4:	20000df8 	.word	0x20000df8

0800f4f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f500:	4b06      	ldr	r3, [pc, #24]	; (800f51c <vTaskInternalSetTimeOutState+0x24>)
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f508:	4b05      	ldr	r3, [pc, #20]	; (800f520 <vTaskInternalSetTimeOutState+0x28>)
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	605a      	str	r2, [r3, #4]
}
 800f510:	bf00      	nop
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	20000dfc 	.word	0x20000dfc
 800f520:	20000de8 	.word	0x20000de8

0800f524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b088      	sub	sp, #32
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d10b      	bne.n	800f54c <xTaskCheckForTimeOut+0x28>
 800f534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f538:	b672      	cpsid	i
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	b662      	cpsie	i
 800f548:	613b      	str	r3, [r7, #16]
 800f54a:	e7fe      	b.n	800f54a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d10b      	bne.n	800f56a <xTaskCheckForTimeOut+0x46>
 800f552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f556:	b672      	cpsid	i
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	b662      	cpsie	i
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	e7fe      	b.n	800f568 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f56a:	f000 ff6d 	bl	8010448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f56e:	4b1d      	ldr	r3, [pc, #116]	; (800f5e4 <xTaskCheckForTimeOut+0xc0>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	69ba      	ldr	r2, [r7, #24]
 800f57a:	1ad3      	subs	r3, r2, r3
 800f57c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f586:	d102      	bne.n	800f58e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f588:	2300      	movs	r3, #0
 800f58a:	61fb      	str	r3, [r7, #28]
 800f58c:	e023      	b.n	800f5d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	4b15      	ldr	r3, [pc, #84]	; (800f5e8 <xTaskCheckForTimeOut+0xc4>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	429a      	cmp	r2, r3
 800f598:	d007      	beq.n	800f5aa <xTaskCheckForTimeOut+0x86>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	69ba      	ldr	r2, [r7, #24]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d302      	bcc.n	800f5aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	61fb      	str	r3, [r7, #28]
 800f5a8:	e015      	b.n	800f5d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	697a      	ldr	r2, [r7, #20]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d20b      	bcs.n	800f5cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	1ad2      	subs	r2, r2, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff ff99 	bl	800f4f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61fb      	str	r3, [r7, #28]
 800f5ca:	e004      	b.n	800f5d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5d6:	f000 ff69 	bl	80104ac <vPortExitCritical>

	return xReturn;
 800f5da:	69fb      	ldr	r3, [r7, #28]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3720      	adds	r7, #32
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	20000de8 	.word	0x20000de8
 800f5e8:	20000dfc 	.word	0x20000dfc

0800f5ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5f0:	4b03      	ldr	r3, [pc, #12]	; (800f600 <vTaskMissedYield+0x14>)
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	601a      	str	r2, [r3, #0]
}
 800f5f6:	bf00      	nop
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr
 800f600:	20000df8 	.word	0x20000df8

0800f604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f60c:	f000 f852 	bl	800f6b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f610:	4b06      	ldr	r3, [pc, #24]	; (800f62c <prvIdleTask+0x28>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d9f9      	bls.n	800f60c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f618:	4b05      	ldr	r3, [pc, #20]	; (800f630 <prvIdleTask+0x2c>)
 800f61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f61e:	601a      	str	r2, [r3, #0]
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f628:	e7f0      	b.n	800f60c <prvIdleTask+0x8>
 800f62a:	bf00      	nop
 800f62c:	20000914 	.word	0x20000914
 800f630:	e000ed04 	.word	0xe000ed04

0800f634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f63a:	2300      	movs	r3, #0
 800f63c:	607b      	str	r3, [r7, #4]
 800f63e:	e00c      	b.n	800f65a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	4613      	mov	r3, r2
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	4413      	add	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4a12      	ldr	r2, [pc, #72]	; (800f694 <prvInitialiseTaskLists+0x60>)
 800f64c:	4413      	add	r3, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fe f8d4 	bl	800d7fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	3301      	adds	r3, #1
 800f658:	607b      	str	r3, [r7, #4]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b37      	cmp	r3, #55	; 0x37
 800f65e:	d9ef      	bls.n	800f640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f660:	480d      	ldr	r0, [pc, #52]	; (800f698 <prvInitialiseTaskLists+0x64>)
 800f662:	f7fe f8cb 	bl	800d7fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f666:	480d      	ldr	r0, [pc, #52]	; (800f69c <prvInitialiseTaskLists+0x68>)
 800f668:	f7fe f8c8 	bl	800d7fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f66c:	480c      	ldr	r0, [pc, #48]	; (800f6a0 <prvInitialiseTaskLists+0x6c>)
 800f66e:	f7fe f8c5 	bl	800d7fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f672:	480c      	ldr	r0, [pc, #48]	; (800f6a4 <prvInitialiseTaskLists+0x70>)
 800f674:	f7fe f8c2 	bl	800d7fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f678:	480b      	ldr	r0, [pc, #44]	; (800f6a8 <prvInitialiseTaskLists+0x74>)
 800f67a:	f7fe f8bf 	bl	800d7fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f67e:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <prvInitialiseTaskLists+0x78>)
 800f680:	4a05      	ldr	r2, [pc, #20]	; (800f698 <prvInitialiseTaskLists+0x64>)
 800f682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f684:	4b0a      	ldr	r3, [pc, #40]	; (800f6b0 <prvInitialiseTaskLists+0x7c>)
 800f686:	4a05      	ldr	r2, [pc, #20]	; (800f69c <prvInitialiseTaskLists+0x68>)
 800f688:	601a      	str	r2, [r3, #0]
}
 800f68a:	bf00      	nop
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	20000914 	.word	0x20000914
 800f698:	20000d74 	.word	0x20000d74
 800f69c:	20000d88 	.word	0x20000d88
 800f6a0:	20000da4 	.word	0x20000da4
 800f6a4:	20000db8 	.word	0x20000db8
 800f6a8:	20000dd0 	.word	0x20000dd0
 800f6ac:	20000d9c 	.word	0x20000d9c
 800f6b0:	20000da0 	.word	0x20000da0

0800f6b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6ba:	e019      	b.n	800f6f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6bc:	f000 fec4 	bl	8010448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6c0:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <prvCheckTasksWaitingTermination+0x4c>)
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe f91f 	bl	800d910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6d2:	4b0c      	ldr	r3, [pc, #48]	; (800f704 <prvCheckTasksWaitingTermination+0x50>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	4a0a      	ldr	r2, [pc, #40]	; (800f704 <prvCheckTasksWaitingTermination+0x50>)
 800f6da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6dc:	4b0a      	ldr	r3, [pc, #40]	; (800f708 <prvCheckTasksWaitingTermination+0x54>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	4a09      	ldr	r2, [pc, #36]	; (800f708 <prvCheckTasksWaitingTermination+0x54>)
 800f6e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6e6:	f000 fee1 	bl	80104ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 f80e 	bl	800f70c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <prvCheckTasksWaitingTermination+0x54>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1e1      	bne.n	800f6bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6f8:	bf00      	nop
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	20000db8 	.word	0x20000db8
 800f704:	20000de4 	.word	0x20000de4
 800f708:	20000dcc 	.word	0x20000dcc

0800f70c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d108      	bne.n	800f730 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f722:	4618      	mov	r0, r3
 800f724:	f001 f87a 	bl	801081c <vPortFree>
				vPortFree( pxTCB );
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f001 f877 	bl	801081c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f72e:	e019      	b.n	800f764 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f736:	2b01      	cmp	r3, #1
 800f738:	d103      	bne.n	800f742 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f001 f86e 	bl	801081c <vPortFree>
	}
 800f740:	e010      	b.n	800f764 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d00b      	beq.n	800f764 <prvDeleteTCB+0x58>
 800f74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f750:	b672      	cpsid	i
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	b662      	cpsie	i
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e7fe      	b.n	800f762 <prvDeleteTCB+0x56>
	}
 800f764:	bf00      	nop
 800f766:	3710      	adds	r7, #16
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f772:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <prvResetNextTaskUnblockTime+0x38>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d104      	bne.n	800f786 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f77c:	4b0a      	ldr	r3, [pc, #40]	; (800f7a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f77e:	f04f 32ff 	mov.w	r2, #4294967295
 800f782:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f784:	e008      	b.n	800f798 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f786:	4b07      	ldr	r3, [pc, #28]	; (800f7a4 <prvResetNextTaskUnblockTime+0x38>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	4a04      	ldr	r2, [pc, #16]	; (800f7a8 <prvResetNextTaskUnblockTime+0x3c>)
 800f796:	6013      	str	r3, [r2, #0]
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr
 800f7a4:	20000d9c 	.word	0x20000d9c
 800f7a8:	20000e04 	.word	0x20000e04

0800f7ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f7b2:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <xTaskGetCurrentTaskHandle+0x1c>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f7b8:	687b      	ldr	r3, [r7, #4]
	}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	370c      	adds	r7, #12
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	20000910 	.word	0x20000910

0800f7cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7d2:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <xTaskGetSchedulerState+0x34>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d102      	bne.n	800f7e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	607b      	str	r3, [r7, #4]
 800f7de:	e008      	b.n	800f7f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7e0:	4b08      	ldr	r3, [pc, #32]	; (800f804 <xTaskGetSchedulerState+0x38>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d102      	bne.n	800f7ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7e8:	2302      	movs	r3, #2
 800f7ea:	607b      	str	r3, [r7, #4]
 800f7ec:	e001      	b.n	800f7f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7f2:	687b      	ldr	r3, [r7, #4]
	}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr
 800f800:	20000df0 	.word	0x20000df0
 800f804:	20000e0c 	.word	0x20000e0c

0800f808 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d051      	beq.n	800f8c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f822:	4b2a      	ldr	r3, [pc, #168]	; (800f8cc <xTaskPriorityInherit+0xc4>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f828:	429a      	cmp	r2, r3
 800f82a:	d241      	bcs.n	800f8b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	699b      	ldr	r3, [r3, #24]
 800f830:	2b00      	cmp	r3, #0
 800f832:	db06      	blt.n	800f842 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f834:	4b25      	ldr	r3, [pc, #148]	; (800f8cc <xTaskPriorityInherit+0xc4>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	6959      	ldr	r1, [r3, #20]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84a:	4613      	mov	r3, r2
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	4413      	add	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4a1f      	ldr	r2, [pc, #124]	; (800f8d0 <xTaskPriorityInherit+0xc8>)
 800f854:	4413      	add	r3, r2
 800f856:	4299      	cmp	r1, r3
 800f858:	d122      	bne.n	800f8a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fe f856 	bl	800d910 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f864:	4b19      	ldr	r3, [pc, #100]	; (800f8cc <xTaskPriorityInherit+0xc4>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f872:	4b18      	ldr	r3, [pc, #96]	; (800f8d4 <xTaskPriorityInherit+0xcc>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	429a      	cmp	r2, r3
 800f878:	d903      	bls.n	800f882 <xTaskPriorityInherit+0x7a>
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87e:	4a15      	ldr	r2, [pc, #84]	; (800f8d4 <xTaskPriorityInherit+0xcc>)
 800f880:	6013      	str	r3, [r2, #0]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f886:	4613      	mov	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4a10      	ldr	r2, [pc, #64]	; (800f8d0 <xTaskPriorityInherit+0xc8>)
 800f890:	441a      	add	r2, r3
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	3304      	adds	r3, #4
 800f896:	4619      	mov	r1, r3
 800f898:	4610      	mov	r0, r2
 800f89a:	f7fd ffdc 	bl	800d856 <vListInsertEnd>
 800f89e:	e004      	b.n	800f8aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f8a0:	4b0a      	ldr	r3, [pc, #40]	; (800f8cc <xTaskPriorityInherit+0xc4>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	60fb      	str	r3, [r7, #12]
 800f8ae:	e008      	b.n	800f8c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8b4:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <xTaskPriorityInherit+0xc4>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d201      	bcs.n	800f8c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
	}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	20000910 	.word	0x20000910
 800f8d0:	20000914 	.word	0x20000914
 800f8d4:	20000dec 	.word	0x20000dec

0800f8d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d058      	beq.n	800f9a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f8ee:	4b2f      	ldr	r3, [pc, #188]	; (800f9ac <xTaskPriorityDisinherit+0xd4>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d00b      	beq.n	800f910 <xTaskPriorityDisinherit+0x38>
 800f8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fc:	b672      	cpsid	i
 800f8fe:	f383 8811 	msr	BASEPRI, r3
 800f902:	f3bf 8f6f 	isb	sy
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	b662      	cpsie	i
 800f90c:	60fb      	str	r3, [r7, #12]
 800f90e:	e7fe      	b.n	800f90e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10b      	bne.n	800f930 <xTaskPriorityDisinherit+0x58>
 800f918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91c:	b672      	cpsid	i
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	b662      	cpsie	i
 800f92c:	60bb      	str	r3, [r7, #8]
 800f92e:	e7fe      	b.n	800f92e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f934:	1e5a      	subs	r2, r3, #1
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f942:	429a      	cmp	r2, r3
 800f944:	d02c      	beq.n	800f9a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d128      	bne.n	800f9a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	3304      	adds	r3, #4
 800f952:	4618      	mov	r0, r3
 800f954:	f7fd ffdc 	bl	800d910 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f964:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f970:	4b0f      	ldr	r3, [pc, #60]	; (800f9b0 <xTaskPriorityDisinherit+0xd8>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	429a      	cmp	r2, r3
 800f976:	d903      	bls.n	800f980 <xTaskPriorityDisinherit+0xa8>
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97c:	4a0c      	ldr	r2, [pc, #48]	; (800f9b0 <xTaskPriorityDisinherit+0xd8>)
 800f97e:	6013      	str	r3, [r2, #0]
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f984:	4613      	mov	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4413      	add	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4a09      	ldr	r2, [pc, #36]	; (800f9b4 <xTaskPriorityDisinherit+0xdc>)
 800f98e:	441a      	add	r2, r3
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	3304      	adds	r3, #4
 800f994:	4619      	mov	r1, r3
 800f996:	4610      	mov	r0, r2
 800f998:	f7fd ff5d 	bl	800d856 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f99c:	2301      	movs	r3, #1
 800f99e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9a0:	697b      	ldr	r3, [r7, #20]
	}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3718      	adds	r7, #24
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20000910 	.word	0x20000910
 800f9b0:	20000dec 	.word	0x20000dec
 800f9b4:	20000914 	.word	0x20000914

0800f9b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b088      	sub	sp, #32
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d06c      	beq.n	800faaa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10b      	bne.n	800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800f9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9dc:	b672      	cpsid	i
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	b662      	cpsie	i
 800f9ec:	60fb      	str	r3, [r7, #12]
 800f9ee:	e7fe      	b.n	800f9ee <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9f4:	683a      	ldr	r2, [r7, #0]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d902      	bls.n	800fa00 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	61fb      	str	r3, [r7, #28]
 800f9fe:	e002      	b.n	800fa06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0a:	69fa      	ldr	r2, [r7, #28]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d04c      	beq.n	800faaa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d147      	bne.n	800faaa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fa1a:	4b26      	ldr	r3, [pc, #152]	; (800fab4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	69ba      	ldr	r2, [r7, #24]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d10b      	bne.n	800fa3c <vTaskPriorityDisinheritAfterTimeout+0x84>
 800fa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa28:	b672      	cpsid	i
 800fa2a:	f383 8811 	msr	BASEPRI, r3
 800fa2e:	f3bf 8f6f 	isb	sy
 800fa32:	f3bf 8f4f 	dsb	sy
 800fa36:	b662      	cpsie	i
 800fa38:	60bb      	str	r3, [r7, #8]
 800fa3a:	e7fe      	b.n	800fa3a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	69fa      	ldr	r2, [r7, #28]
 800fa46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	699b      	ldr	r3, [r3, #24]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	db04      	blt.n	800fa5a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	6959      	ldr	r1, [r3, #20]
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	4613      	mov	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	4a13      	ldr	r2, [pc, #76]	; (800fab8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa6a:	4413      	add	r3, r2
 800fa6c:	4299      	cmp	r1, r3
 800fa6e:	d11c      	bne.n	800faaa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	3304      	adds	r3, #4
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fd ff4b 	bl	800d910 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d903      	bls.n	800fa8e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8a:	4a0c      	ldr	r2, [pc, #48]	; (800fabc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa92:	4613      	mov	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4a07      	ldr	r2, [pc, #28]	; (800fab8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fa9c:	441a      	add	r2, r3
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	3304      	adds	r3, #4
 800faa2:	4619      	mov	r1, r3
 800faa4:	4610      	mov	r0, r2
 800faa6:	f7fd fed6 	bl	800d856 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800faaa:	bf00      	nop
 800faac:	3720      	adds	r7, #32
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	20000910 	.word	0x20000910
 800fab8:	20000914 	.word	0x20000914
 800fabc:	20000dec 	.word	0x20000dec

0800fac0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fac0:	b480      	push	{r7}
 800fac2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fac4:	4b07      	ldr	r3, [pc, #28]	; (800fae4 <pvTaskIncrementMutexHeldCount+0x24>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d004      	beq.n	800fad6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800facc:	4b05      	ldr	r3, [pc, #20]	; (800fae4 <pvTaskIncrementMutexHeldCount+0x24>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fad2:	3201      	adds	r2, #1
 800fad4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fad6:	4b03      	ldr	r3, [pc, #12]	; (800fae4 <pvTaskIncrementMutexHeldCount+0x24>)
 800fad8:	681b      	ldr	r3, [r3, #0]
	}
 800fada:	4618      	mov	r0, r3
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	20000910 	.word	0x20000910

0800fae8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800faf2:	4b21      	ldr	r3, [pc, #132]	; (800fb78 <prvAddCurrentTaskToDelayedList+0x90>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faf8:	4b20      	ldr	r3, [pc, #128]	; (800fb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	3304      	adds	r3, #4
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fd ff06 	bl	800d910 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d10a      	bne.n	800fb22 <prvAddCurrentTaskToDelayedList+0x3a>
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb12:	4b1a      	ldr	r3, [pc, #104]	; (800fb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3304      	adds	r3, #4
 800fb18:	4619      	mov	r1, r3
 800fb1a:	4819      	ldr	r0, [pc, #100]	; (800fb80 <prvAddCurrentTaskToDelayedList+0x98>)
 800fb1c:	f7fd fe9b 	bl	800d856 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb20:	e026      	b.n	800fb70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb22:	68fa      	ldr	r2, [r7, #12]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4413      	add	r3, r2
 800fb28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb2a:	4b14      	ldr	r3, [pc, #80]	; (800fb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb32:	68ba      	ldr	r2, [r7, #8]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d209      	bcs.n	800fb4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb3a:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	4b0f      	ldr	r3, [pc, #60]	; (800fb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3304      	adds	r3, #4
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7fd fea9 	bl	800d89e <vListInsert>
}
 800fb4c:	e010      	b.n	800fb70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	4b0a      	ldr	r3, [pc, #40]	; (800fb7c <prvAddCurrentTaskToDelayedList+0x94>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3304      	adds	r3, #4
 800fb58:	4619      	mov	r1, r3
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	f7fd fe9f 	bl	800d89e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb60:	4b0a      	ldr	r3, [pc, #40]	; (800fb8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d202      	bcs.n	800fb70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb6a:	4a08      	ldr	r2, [pc, #32]	; (800fb8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	6013      	str	r3, [r2, #0]
}
 800fb70:	bf00      	nop
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	20000de8 	.word	0x20000de8
 800fb7c:	20000910 	.word	0x20000910
 800fb80:	20000dd0 	.word	0x20000dd0
 800fb84:	20000da0 	.word	0x20000da0
 800fb88:	20000d9c 	.word	0x20000d9c
 800fb8c:	20000e04 	.word	0x20000e04

0800fb90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08a      	sub	sp, #40	; 0x28
 800fb94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fb96:	2300      	movs	r3, #0
 800fb98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fb9a:	f000 fb0d 	bl	80101b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fb9e:	4b1d      	ldr	r3, [pc, #116]	; (800fc14 <xTimerCreateTimerTask+0x84>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d021      	beq.n	800fbea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fba6:	2300      	movs	r3, #0
 800fba8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fbae:	1d3a      	adds	r2, r7, #4
 800fbb0:	f107 0108 	add.w	r1, r7, #8
 800fbb4:	f107 030c 	add.w	r3, r7, #12
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fd fe05 	bl	800d7c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fbbe:	6879      	ldr	r1, [r7, #4]
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	9202      	str	r2, [sp, #8]
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	2302      	movs	r3, #2
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	2300      	movs	r3, #0
 800fbce:	460a      	mov	r2, r1
 800fbd0:	4911      	ldr	r1, [pc, #68]	; (800fc18 <xTimerCreateTimerTask+0x88>)
 800fbd2:	4812      	ldr	r0, [pc, #72]	; (800fc1c <xTimerCreateTimerTask+0x8c>)
 800fbd4:	f7fe ffb0 	bl	800eb38 <xTaskCreateStatic>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	4b11      	ldr	r3, [pc, #68]	; (800fc20 <xTimerCreateTimerTask+0x90>)
 800fbdc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fbde:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <xTimerCreateTimerTask+0x90>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10b      	bne.n	800fc08 <xTimerCreateTimerTask+0x78>
 800fbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf4:	b672      	cpsid	i
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	b662      	cpsie	i
 800fc04:	613b      	str	r3, [r7, #16]
 800fc06:	e7fe      	b.n	800fc06 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800fc08:	697b      	ldr	r3, [r7, #20]
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3718      	adds	r7, #24
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	20000e40 	.word	0x20000e40
 800fc18:	080122bc 	.word	0x080122bc
 800fc1c:	0800fd5d 	.word	0x0800fd5d
 800fc20:	20000e44 	.word	0x20000e44

0800fc24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08a      	sub	sp, #40	; 0x28
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
 800fc30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fc32:	2300      	movs	r3, #0
 800fc34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10b      	bne.n	800fc54 <xTimerGenericCommand+0x30>
 800fc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc40:	b672      	cpsid	i
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	b662      	cpsie	i
 800fc50:	623b      	str	r3, [r7, #32]
 800fc52:	e7fe      	b.n	800fc52 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fc54:	4b19      	ldr	r3, [pc, #100]	; (800fcbc <xTimerGenericCommand+0x98>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d02a      	beq.n	800fcb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	2b05      	cmp	r3, #5
 800fc6c:	dc18      	bgt.n	800fca0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc6e:	f7ff fdad 	bl	800f7cc <xTaskGetSchedulerState>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d109      	bne.n	800fc8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fc78:	4b10      	ldr	r3, [pc, #64]	; (800fcbc <xTimerGenericCommand+0x98>)
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	f107 0110 	add.w	r1, r7, #16
 800fc80:	2300      	movs	r3, #0
 800fc82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc84:	f7fe f8e0 	bl	800de48 <xQueueGenericSend>
 800fc88:	6278      	str	r0, [r7, #36]	; 0x24
 800fc8a:	e012      	b.n	800fcb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc8c:	4b0b      	ldr	r3, [pc, #44]	; (800fcbc <xTimerGenericCommand+0x98>)
 800fc8e:	6818      	ldr	r0, [r3, #0]
 800fc90:	f107 0110 	add.w	r1, r7, #16
 800fc94:	2300      	movs	r3, #0
 800fc96:	2200      	movs	r2, #0
 800fc98:	f7fe f8d6 	bl	800de48 <xQueueGenericSend>
 800fc9c:	6278      	str	r0, [r7, #36]	; 0x24
 800fc9e:	e008      	b.n	800fcb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fca0:	4b06      	ldr	r3, [pc, #24]	; (800fcbc <xTimerGenericCommand+0x98>)
 800fca2:	6818      	ldr	r0, [r3, #0]
 800fca4:	f107 0110 	add.w	r1, r7, #16
 800fca8:	2300      	movs	r3, #0
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	f7fe f9ce 	bl	800e04c <xQueueGenericSendFromISR>
 800fcb0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3728      	adds	r7, #40	; 0x28
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	20000e40 	.word	0x20000e40

0800fcc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b088      	sub	sp, #32
 800fcc4:	af02      	add	r7, sp, #8
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcca:	4b23      	ldr	r3, [pc, #140]	; (800fd58 <prvProcessExpiredTimer+0x98>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fd fe19 	bl	800d910 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fce4:	f003 0304 	and.w	r3, r3, #4
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d023      	beq.n	800fd34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	699a      	ldr	r2, [r3, #24]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	18d1      	adds	r1, r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	6978      	ldr	r0, [r7, #20]
 800fcfa:	f000 f8d3 	bl	800fea4 <prvInsertTimerInActiveList>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d020      	beq.n	800fd46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd04:	2300      	movs	r3, #0
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	2300      	movs	r3, #0
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	6978      	ldr	r0, [r7, #20]
 800fd10:	f7ff ff88 	bl	800fc24 <xTimerGenericCommand>
 800fd14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d114      	bne.n	800fd46 <prvProcessExpiredTimer+0x86>
 800fd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd20:	b672      	cpsid	i
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	b662      	cpsie	i
 800fd30:	60fb      	str	r3, [r7, #12]
 800fd32:	e7fe      	b.n	800fd32 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd3a:	f023 0301 	bic.w	r3, r3, #1
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	6978      	ldr	r0, [r7, #20]
 800fd4c:	4798      	blx	r3
}
 800fd4e:	bf00      	nop
 800fd50:	3718      	adds	r7, #24
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	20000e38 	.word	0x20000e38

0800fd5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd64:	f107 0308 	add.w	r3, r7, #8
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f000 f857 	bl	800fe1c <prvGetNextExpireTime>
 800fd6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	4619      	mov	r1, r3
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 f803 	bl	800fd80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fd7a:	f000 f8d5 	bl	800ff28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd7e:	e7f1      	b.n	800fd64 <prvTimerTask+0x8>

0800fd80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fd8a:	f7ff f919 	bl	800efc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd8e:	f107 0308 	add.w	r3, r7, #8
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 f866 	bl	800fe64 <prvSampleTimeNow>
 800fd98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d130      	bne.n	800fe02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d10a      	bne.n	800fdbc <prvProcessTimerOrBlockTask+0x3c>
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d806      	bhi.n	800fdbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fdae:	f7ff f915 	bl	800efdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fdb2:	68f9      	ldr	r1, [r7, #12]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff ff83 	bl	800fcc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fdba:	e024      	b.n	800fe06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d008      	beq.n	800fdd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fdc2:	4b13      	ldr	r3, [pc, #76]	; (800fe10 <prvProcessTimerOrBlockTask+0x90>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d101      	bne.n	800fdd0 <prvProcessTimerOrBlockTask+0x50>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e000      	b.n	800fdd2 <prvProcessTimerOrBlockTask+0x52>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fdd4:	4b0f      	ldr	r3, [pc, #60]	; (800fe14 <prvProcessTimerOrBlockTask+0x94>)
 800fdd6:	6818      	ldr	r0, [r3, #0]
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	1ad3      	subs	r3, r2, r3
 800fdde:	683a      	ldr	r2, [r7, #0]
 800fde0:	4619      	mov	r1, r3
 800fde2:	f7fe fe75 	bl	800ead0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fde6:	f7ff f8f9 	bl	800efdc <xTaskResumeAll>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d10a      	bne.n	800fe06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fdf0:	4b09      	ldr	r3, [pc, #36]	; (800fe18 <prvProcessTimerOrBlockTask+0x98>)
 800fdf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdf6:	601a      	str	r2, [r3, #0]
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	f3bf 8f6f 	isb	sy
}
 800fe00:	e001      	b.n	800fe06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fe02:	f7ff f8eb 	bl	800efdc <xTaskResumeAll>
}
 800fe06:	bf00      	nop
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	20000e3c 	.word	0x20000e3c
 800fe14:	20000e40 	.word	0x20000e40
 800fe18:	e000ed04 	.word	0xe000ed04

0800fe1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe24:	4b0e      	ldr	r3, [pc, #56]	; (800fe60 <prvGetNextExpireTime+0x44>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d101      	bne.n	800fe32 <prvGetNextExpireTime+0x16>
 800fe2e:	2201      	movs	r2, #1
 800fe30:	e000      	b.n	800fe34 <prvGetNextExpireTime+0x18>
 800fe32:	2200      	movs	r2, #0
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d105      	bne.n	800fe4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe40:	4b07      	ldr	r3, [pc, #28]	; (800fe60 <prvGetNextExpireTime+0x44>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	60fb      	str	r3, [r7, #12]
 800fe4a:	e001      	b.n	800fe50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fe50:	68fb      	ldr	r3, [r7, #12]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3714      	adds	r7, #20
 800fe56:	46bd      	mov	sp, r7
 800fe58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	20000e38 	.word	0x20000e38

0800fe64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fe6c:	f7ff f954 	bl	800f118 <xTaskGetTickCount>
 800fe70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fe72:	4b0b      	ldr	r3, [pc, #44]	; (800fea0 <prvSampleTimeNow+0x3c>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d205      	bcs.n	800fe88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fe7c:	f000 f936 	bl	80100ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	601a      	str	r2, [r3, #0]
 800fe86:	e002      	b.n	800fe8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fe8e:	4a04      	ldr	r2, [pc, #16]	; (800fea0 <prvSampleTimeNow+0x3c>)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fe94:	68fb      	ldr	r3, [r7, #12]
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	20000e48 	.word	0x20000e48

0800fea4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b086      	sub	sp, #24
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800feb2:	2300      	movs	r3, #0
 800feb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d812      	bhi.n	800fef0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	1ad2      	subs	r2, r2, r3
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d302      	bcc.n	800fede <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fed8:	2301      	movs	r3, #1
 800feda:	617b      	str	r3, [r7, #20]
 800fedc:	e01b      	b.n	800ff16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fede:	4b10      	ldr	r3, [pc, #64]	; (800ff20 <prvInsertTimerInActiveList+0x7c>)
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3304      	adds	r3, #4
 800fee6:	4619      	mov	r1, r3
 800fee8:	4610      	mov	r0, r2
 800feea:	f7fd fcd8 	bl	800d89e <vListInsert>
 800feee:	e012      	b.n	800ff16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d206      	bcs.n	800ff06 <prvInsertTimerInActiveList+0x62>
 800fef8:	68ba      	ldr	r2, [r7, #8]
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d302      	bcc.n	800ff06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ff00:	2301      	movs	r3, #1
 800ff02:	617b      	str	r3, [r7, #20]
 800ff04:	e007      	b.n	800ff16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff06:	4b07      	ldr	r3, [pc, #28]	; (800ff24 <prvInsertTimerInActiveList+0x80>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	4619      	mov	r1, r3
 800ff10:	4610      	mov	r0, r2
 800ff12:	f7fd fcc4 	bl	800d89e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ff16:	697b      	ldr	r3, [r7, #20]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3718      	adds	r7, #24
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	20000e3c 	.word	0x20000e3c
 800ff24:	20000e38 	.word	0x20000e38

0800ff28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08e      	sub	sp, #56	; 0x38
 800ff2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff2e:	e0cc      	b.n	80100ca <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	da19      	bge.n	800ff6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ff36:	1d3b      	adds	r3, r7, #4
 800ff38:	3304      	adds	r3, #4
 800ff3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ff3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10b      	bne.n	800ff5a <prvProcessReceivedCommands+0x32>
 800ff42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff46:	b672      	cpsid	i
 800ff48:	f383 8811 	msr	BASEPRI, r3
 800ff4c:	f3bf 8f6f 	isb	sy
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	b662      	cpsie	i
 800ff56:	61fb      	str	r3, [r7, #28]
 800ff58:	e7fe      	b.n	800ff58 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff60:	6850      	ldr	r0, [r2, #4]
 800ff62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff64:	6892      	ldr	r2, [r2, #8]
 800ff66:	4611      	mov	r1, r2
 800ff68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f2c0 80ab 	blt.w	80100c8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ff76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff78:	695b      	ldr	r3, [r3, #20]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d004      	beq.n	800ff88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff80:	3304      	adds	r3, #4
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fd fcc4 	bl	800d910 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff88:	463b      	mov	r3, r7
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7ff ff6a 	bl	800fe64 <prvSampleTimeNow>
 800ff90:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2b09      	cmp	r3, #9
 800ff96:	f200 8098 	bhi.w	80100ca <prvProcessReceivedCommands+0x1a2>
 800ff9a:	a201      	add	r2, pc, #4	; (adr r2, 800ffa0 <prvProcessReceivedCommands+0x78>)
 800ff9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa0:	0800ffc9 	.word	0x0800ffc9
 800ffa4:	0800ffc9 	.word	0x0800ffc9
 800ffa8:	0800ffc9 	.word	0x0800ffc9
 800ffac:	0801003f 	.word	0x0801003f
 800ffb0:	08010053 	.word	0x08010053
 800ffb4:	0801009f 	.word	0x0801009f
 800ffb8:	0800ffc9 	.word	0x0800ffc9
 800ffbc:	0800ffc9 	.word	0x0800ffc9
 800ffc0:	0801003f 	.word	0x0801003f
 800ffc4:	08010053 	.word	0x08010053
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffce:	f043 0301 	orr.w	r3, r3, #1
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	699b      	ldr	r3, [r3, #24]
 800ffe0:	18d1      	adds	r1, r2, r3
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffe8:	f7ff ff5c 	bl	800fea4 <prvInsertTimerInActiveList>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d06b      	beq.n	80100ca <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff4:	6a1b      	ldr	r3, [r3, #32]
 800fff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fff8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d060      	beq.n	80100ca <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	441a      	add	r2, r3
 8010010:	2300      	movs	r3, #0
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	2300      	movs	r3, #0
 8010016:	2100      	movs	r1, #0
 8010018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801001a:	f7ff fe03 	bl	800fc24 <xTimerGenericCommand>
 801001e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010020:	6a3b      	ldr	r3, [r7, #32]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d151      	bne.n	80100ca <prvProcessReceivedCommands+0x1a2>
 8010026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002a:	b672      	cpsid	i
 801002c:	f383 8811 	msr	BASEPRI, r3
 8010030:	f3bf 8f6f 	isb	sy
 8010034:	f3bf 8f4f 	dsb	sy
 8010038:	b662      	cpsie	i
 801003a:	61bb      	str	r3, [r7, #24]
 801003c:	e7fe      	b.n	801003c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801003e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010044:	f023 0301 	bic.w	r3, r3, #1
 8010048:	b2da      	uxtb	r2, r3
 801004a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010050:	e03b      	b.n	80100ca <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010058:	f043 0301 	orr.w	r3, r3, #1
 801005c:	b2da      	uxtb	r2, r3
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010068:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801006a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006c:	699b      	ldr	r3, [r3, #24]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10b      	bne.n	801008a <prvProcessReceivedCommands+0x162>
 8010072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010076:	b672      	cpsid	i
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	b662      	cpsie	i
 8010086:	617b      	str	r3, [r7, #20]
 8010088:	e7fe      	b.n	8010088 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801008a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008c:	699a      	ldr	r2, [r3, #24]
 801008e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010090:	18d1      	adds	r1, r2, r3
 8010092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010098:	f7ff ff04 	bl	800fea4 <prvInsertTimerInActiveList>
					break;
 801009c:	e015      	b.n	80100ca <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801009e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100a4:	f003 0302 	and.w	r3, r3, #2
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d103      	bne.n	80100b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80100ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100ae:	f000 fbb5 	bl	801081c <vPortFree>
 80100b2:	e00a      	b.n	80100ca <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100ba:	f023 0301 	bic.w	r3, r3, #1
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80100c6:	e000      	b.n	80100ca <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80100c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100ca:	4b07      	ldr	r3, [pc, #28]	; (80100e8 <prvProcessReceivedCommands+0x1c0>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	1d39      	adds	r1, r7, #4
 80100d0:	2200      	movs	r2, #0
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fe f8e8 	bl	800e2a8 <xQueueReceive>
 80100d8:	4603      	mov	r3, r0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f47f af28 	bne.w	800ff30 <prvProcessReceivedCommands+0x8>
	}
}
 80100e0:	bf00      	nop
 80100e2:	3730      	adds	r7, #48	; 0x30
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	20000e40 	.word	0x20000e40

080100ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b088      	sub	sp, #32
 80100f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100f2:	e049      	b.n	8010188 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100f4:	4b2e      	ldr	r3, [pc, #184]	; (80101b0 <prvSwitchTimerLists+0xc4>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100fe:	4b2c      	ldr	r3, [pc, #176]	; (80101b0 <prvSwitchTimerLists+0xc4>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	3304      	adds	r3, #4
 801010c:	4618      	mov	r0, r3
 801010e:	f7fd fbff 	bl	800d910 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010120:	f003 0304 	and.w	r3, r3, #4
 8010124:	2b00      	cmp	r3, #0
 8010126:	d02f      	beq.n	8010188 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	693a      	ldr	r2, [r7, #16]
 801012e:	4413      	add	r3, r2
 8010130:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	429a      	cmp	r2, r3
 8010138:	d90e      	bls.n	8010158 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	68ba      	ldr	r2, [r7, #8]
 801013e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010146:	4b1a      	ldr	r3, [pc, #104]	; (80101b0 <prvSwitchTimerLists+0xc4>)
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	3304      	adds	r3, #4
 801014e:	4619      	mov	r1, r3
 8010150:	4610      	mov	r0, r2
 8010152:	f7fd fba4 	bl	800d89e <vListInsert>
 8010156:	e017      	b.n	8010188 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010158:	2300      	movs	r3, #0
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	2300      	movs	r3, #0
 801015e:	693a      	ldr	r2, [r7, #16]
 8010160:	2100      	movs	r1, #0
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7ff fd5e 	bl	800fc24 <xTimerGenericCommand>
 8010168:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d10b      	bne.n	8010188 <prvSwitchTimerLists+0x9c>
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	b672      	cpsid	i
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	b662      	cpsie	i
 8010184:	603b      	str	r3, [r7, #0]
 8010186:	e7fe      	b.n	8010186 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010188:	4b09      	ldr	r3, [pc, #36]	; (80101b0 <prvSwitchTimerLists+0xc4>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d1b0      	bne.n	80100f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010192:	4b07      	ldr	r3, [pc, #28]	; (80101b0 <prvSwitchTimerLists+0xc4>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010198:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <prvSwitchTimerLists+0xc8>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a04      	ldr	r2, [pc, #16]	; (80101b0 <prvSwitchTimerLists+0xc4>)
 801019e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80101a0:	4a04      	ldr	r2, [pc, #16]	; (80101b4 <prvSwitchTimerLists+0xc8>)
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	6013      	str	r3, [r2, #0]
}
 80101a6:	bf00      	nop
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	20000e38 	.word	0x20000e38
 80101b4:	20000e3c 	.word	0x20000e3c

080101b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80101be:	f000 f943 	bl	8010448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80101c2:	4b15      	ldr	r3, [pc, #84]	; (8010218 <prvCheckForValidListAndQueue+0x60>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d120      	bne.n	801020c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80101ca:	4814      	ldr	r0, [pc, #80]	; (801021c <prvCheckForValidListAndQueue+0x64>)
 80101cc:	f7fd fb16 	bl	800d7fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80101d0:	4813      	ldr	r0, [pc, #76]	; (8010220 <prvCheckForValidListAndQueue+0x68>)
 80101d2:	f7fd fb13 	bl	800d7fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80101d6:	4b13      	ldr	r3, [pc, #76]	; (8010224 <prvCheckForValidListAndQueue+0x6c>)
 80101d8:	4a10      	ldr	r2, [pc, #64]	; (801021c <prvCheckForValidListAndQueue+0x64>)
 80101da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80101dc:	4b12      	ldr	r3, [pc, #72]	; (8010228 <prvCheckForValidListAndQueue+0x70>)
 80101de:	4a10      	ldr	r2, [pc, #64]	; (8010220 <prvCheckForValidListAndQueue+0x68>)
 80101e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80101e2:	2300      	movs	r3, #0
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	4b11      	ldr	r3, [pc, #68]	; (801022c <prvCheckForValidListAndQueue+0x74>)
 80101e8:	4a11      	ldr	r2, [pc, #68]	; (8010230 <prvCheckForValidListAndQueue+0x78>)
 80101ea:	2110      	movs	r1, #16
 80101ec:	200a      	movs	r0, #10
 80101ee:	f7fd fc23 	bl	800da38 <xQueueGenericCreateStatic>
 80101f2:	4602      	mov	r2, r0
 80101f4:	4b08      	ldr	r3, [pc, #32]	; (8010218 <prvCheckForValidListAndQueue+0x60>)
 80101f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80101f8:	4b07      	ldr	r3, [pc, #28]	; (8010218 <prvCheckForValidListAndQueue+0x60>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d005      	beq.n	801020c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010200:	4b05      	ldr	r3, [pc, #20]	; (8010218 <prvCheckForValidListAndQueue+0x60>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	490b      	ldr	r1, [pc, #44]	; (8010234 <prvCheckForValidListAndQueue+0x7c>)
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe fc10 	bl	800ea2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801020c:	f000 f94e 	bl	80104ac <vPortExitCritical>
}
 8010210:	bf00      	nop
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	20000e40 	.word	0x20000e40
 801021c:	20000e10 	.word	0x20000e10
 8010220:	20000e24 	.word	0x20000e24
 8010224:	20000e38 	.word	0x20000e38
 8010228:	20000e3c 	.word	0x20000e3c
 801022c:	20000eec 	.word	0x20000eec
 8010230:	20000e4c 	.word	0x20000e4c
 8010234:	080122c4 	.word	0x080122c4

08010238 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010238:	b480      	push	{r7}
 801023a:	b085      	sub	sp, #20
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	3b04      	subs	r3, #4
 8010248:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	3b04      	subs	r3, #4
 8010256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	f023 0201 	bic.w	r2, r3, #1
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	3b04      	subs	r3, #4
 8010266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010268:	4a0c      	ldr	r2, [pc, #48]	; (801029c <pxPortInitialiseStack+0x64>)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	3b14      	subs	r3, #20
 8010272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3b04      	subs	r3, #4
 801027e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f06f 0202 	mvn.w	r2, #2
 8010286:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	3b20      	subs	r3, #32
 801028c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801028e:	68fb      	ldr	r3, [r7, #12]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	080102a1 	.word	0x080102a1

080102a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80102aa:	4b13      	ldr	r3, [pc, #76]	; (80102f8 <prvTaskExitError+0x58>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b2:	d00b      	beq.n	80102cc <prvTaskExitError+0x2c>
 80102b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b8:	b672      	cpsid	i
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	b662      	cpsie	i
 80102c8:	60fb      	str	r3, [r7, #12]
 80102ca:	e7fe      	b.n	80102ca <prvTaskExitError+0x2a>
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	b672      	cpsid	i
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	b662      	cpsie	i
 80102e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80102e2:	bf00      	nop
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d0fc      	beq.n	80102e4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80102ea:	bf00      	nop
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	2000011c 	.word	0x2000011c
 80102fc:	00000000 	.word	0x00000000

08010300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010300:	4b07      	ldr	r3, [pc, #28]	; (8010320 <pxCurrentTCBConst2>)
 8010302:	6819      	ldr	r1, [r3, #0]
 8010304:	6808      	ldr	r0, [r1, #0]
 8010306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030a:	f380 8809 	msr	PSP, r0
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f04f 0000 	mov.w	r0, #0
 8010316:	f380 8811 	msr	BASEPRI, r0
 801031a:	4770      	bx	lr
 801031c:	f3af 8000 	nop.w

08010320 <pxCurrentTCBConst2>:
 8010320:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010324:	bf00      	nop
 8010326:	bf00      	nop

08010328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010328:	4808      	ldr	r0, [pc, #32]	; (801034c <prvPortStartFirstTask+0x24>)
 801032a:	6800      	ldr	r0, [r0, #0]
 801032c:	6800      	ldr	r0, [r0, #0]
 801032e:	f380 8808 	msr	MSP, r0
 8010332:	f04f 0000 	mov.w	r0, #0
 8010336:	f380 8814 	msr	CONTROL, r0
 801033a:	b662      	cpsie	i
 801033c:	b661      	cpsie	f
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	f3bf 8f6f 	isb	sy
 8010346:	df00      	svc	0
 8010348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801034a:	bf00      	nop
 801034c:	e000ed08 	.word	0xe000ed08

08010350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010356:	4b36      	ldr	r3, [pc, #216]	; (8010430 <xPortStartScheduler+0xe0>)
 8010358:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	b2db      	uxtb	r3, r3
 8010360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	22ff      	movs	r2, #255	; 0xff
 8010366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	b2db      	uxtb	r3, r3
 801036e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010370:	78fb      	ldrb	r3, [r7, #3]
 8010372:	b2db      	uxtb	r3, r3
 8010374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010378:	b2da      	uxtb	r2, r3
 801037a:	4b2e      	ldr	r3, [pc, #184]	; (8010434 <xPortStartScheduler+0xe4>)
 801037c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801037e:	4b2e      	ldr	r3, [pc, #184]	; (8010438 <xPortStartScheduler+0xe8>)
 8010380:	2207      	movs	r2, #7
 8010382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010384:	e009      	b.n	801039a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010386:	4b2c      	ldr	r3, [pc, #176]	; (8010438 <xPortStartScheduler+0xe8>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	3b01      	subs	r3, #1
 801038c:	4a2a      	ldr	r2, [pc, #168]	; (8010438 <xPortStartScheduler+0xe8>)
 801038e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	b2db      	uxtb	r3, r3
 8010398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801039a:	78fb      	ldrb	r3, [r7, #3]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103a2:	2b80      	cmp	r3, #128	; 0x80
 80103a4:	d0ef      	beq.n	8010386 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80103a6:	4b24      	ldr	r3, [pc, #144]	; (8010438 <xPortStartScheduler+0xe8>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f1c3 0307 	rsb	r3, r3, #7
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	d00b      	beq.n	80103ca <xPortStartScheduler+0x7a>
 80103b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b6:	b672      	cpsid	i
 80103b8:	f383 8811 	msr	BASEPRI, r3
 80103bc:	f3bf 8f6f 	isb	sy
 80103c0:	f3bf 8f4f 	dsb	sy
 80103c4:	b662      	cpsie	i
 80103c6:	60bb      	str	r3, [r7, #8]
 80103c8:	e7fe      	b.n	80103c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80103ca:	4b1b      	ldr	r3, [pc, #108]	; (8010438 <xPortStartScheduler+0xe8>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	021b      	lsls	r3, r3, #8
 80103d0:	4a19      	ldr	r2, [pc, #100]	; (8010438 <xPortStartScheduler+0xe8>)
 80103d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80103d4:	4b18      	ldr	r3, [pc, #96]	; (8010438 <xPortStartScheduler+0xe8>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80103dc:	4a16      	ldr	r2, [pc, #88]	; (8010438 <xPortStartScheduler+0xe8>)
 80103de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	b2da      	uxtb	r2, r3
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80103e8:	4b14      	ldr	r3, [pc, #80]	; (801043c <xPortStartScheduler+0xec>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a13      	ldr	r2, [pc, #76]	; (801043c <xPortStartScheduler+0xec>)
 80103ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80103f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80103f4:	4b11      	ldr	r3, [pc, #68]	; (801043c <xPortStartScheduler+0xec>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a10      	ldr	r2, [pc, #64]	; (801043c <xPortStartScheduler+0xec>)
 80103fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80103fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010400:	f000 f8d4 	bl	80105ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010404:	4b0e      	ldr	r3, [pc, #56]	; (8010440 <xPortStartScheduler+0xf0>)
 8010406:	2200      	movs	r2, #0
 8010408:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801040a:	f000 f8f3 	bl	80105f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801040e:	4b0d      	ldr	r3, [pc, #52]	; (8010444 <xPortStartScheduler+0xf4>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4a0c      	ldr	r2, [pc, #48]	; (8010444 <xPortStartScheduler+0xf4>)
 8010414:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010418:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801041a:	f7ff ff85 	bl	8010328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801041e:	f7fe ff57 	bl	800f2d0 <vTaskSwitchContext>
	prvTaskExitError();
 8010422:	f7ff ff3d 	bl	80102a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	e000e400 	.word	0xe000e400
 8010434:	20000f3c 	.word	0x20000f3c
 8010438:	20000f40 	.word	0x20000f40
 801043c:	e000ed20 	.word	0xe000ed20
 8010440:	2000011c 	.word	0x2000011c
 8010444:	e000ef34 	.word	0xe000ef34

08010448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010452:	b672      	cpsid	i
 8010454:	f383 8811 	msr	BASEPRI, r3
 8010458:	f3bf 8f6f 	isb	sy
 801045c:	f3bf 8f4f 	dsb	sy
 8010460:	b662      	cpsie	i
 8010462:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010464:	4b0f      	ldr	r3, [pc, #60]	; (80104a4 <vPortEnterCritical+0x5c>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	3301      	adds	r3, #1
 801046a:	4a0e      	ldr	r2, [pc, #56]	; (80104a4 <vPortEnterCritical+0x5c>)
 801046c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801046e:	4b0d      	ldr	r3, [pc, #52]	; (80104a4 <vPortEnterCritical+0x5c>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d110      	bne.n	8010498 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010476:	4b0c      	ldr	r3, [pc, #48]	; (80104a8 <vPortEnterCritical+0x60>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	b2db      	uxtb	r3, r3
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00b      	beq.n	8010498 <vPortEnterCritical+0x50>
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	b672      	cpsid	i
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	b662      	cpsie	i
 8010494:	603b      	str	r3, [r7, #0]
 8010496:	e7fe      	b.n	8010496 <vPortEnterCritical+0x4e>
	}
}
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	2000011c 	.word	0x2000011c
 80104a8:	e000ed04 	.word	0xe000ed04

080104ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80104b2:	4b12      	ldr	r3, [pc, #72]	; (80104fc <vPortExitCritical+0x50>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10b      	bne.n	80104d2 <vPortExitCritical+0x26>
 80104ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104be:	b672      	cpsid	i
 80104c0:	f383 8811 	msr	BASEPRI, r3
 80104c4:	f3bf 8f6f 	isb	sy
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	b662      	cpsie	i
 80104ce:	607b      	str	r3, [r7, #4]
 80104d0:	e7fe      	b.n	80104d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80104d2:	4b0a      	ldr	r3, [pc, #40]	; (80104fc <vPortExitCritical+0x50>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	3b01      	subs	r3, #1
 80104d8:	4a08      	ldr	r2, [pc, #32]	; (80104fc <vPortExitCritical+0x50>)
 80104da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80104dc:	4b07      	ldr	r3, [pc, #28]	; (80104fc <vPortExitCritical+0x50>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d104      	bne.n	80104ee <vPortExitCritical+0x42>
 80104e4:	2300      	movs	r3, #0
 80104e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80104ee:	bf00      	nop
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	2000011c 	.word	0x2000011c

08010500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010500:	f3ef 8009 	mrs	r0, PSP
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	4b15      	ldr	r3, [pc, #84]	; (8010560 <pxCurrentTCBConst>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	f01e 0f10 	tst.w	lr, #16
 8010510:	bf08      	it	eq
 8010512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051a:	6010      	str	r0, [r2, #0]
 801051c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010524:	b672      	cpsid	i
 8010526:	f380 8811 	msr	BASEPRI, r0
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	f3bf 8f6f 	isb	sy
 8010532:	b662      	cpsie	i
 8010534:	f7fe fecc 	bl	800f2d0 <vTaskSwitchContext>
 8010538:	f04f 0000 	mov.w	r0, #0
 801053c:	f380 8811 	msr	BASEPRI, r0
 8010540:	bc09      	pop	{r0, r3}
 8010542:	6819      	ldr	r1, [r3, #0]
 8010544:	6808      	ldr	r0, [r1, #0]
 8010546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801054a:	f01e 0f10 	tst.w	lr, #16
 801054e:	bf08      	it	eq
 8010550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010554:	f380 8809 	msr	PSP, r0
 8010558:	f3bf 8f6f 	isb	sy
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop

08010560 <pxCurrentTCBConst>:
 8010560:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010564:	bf00      	nop
 8010566:	bf00      	nop

08010568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
	__asm volatile
 801056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010572:	b672      	cpsid	i
 8010574:	f383 8811 	msr	BASEPRI, r3
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	b662      	cpsie	i
 8010582:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010584:	f7fe fdea 	bl	800f15c <xTaskIncrementTick>
 8010588:	4603      	mov	r3, r0
 801058a:	2b00      	cmp	r3, #0
 801058c:	d003      	beq.n	8010596 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801058e:	4b06      	ldr	r3, [pc, #24]	; (80105a8 <SysTick_Handler+0x40>)
 8010590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010594:	601a      	str	r2, [r3, #0]
 8010596:	2300      	movs	r3, #0
 8010598:	603b      	str	r3, [r7, #0]
	__asm volatile
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	e000ed04 	.word	0xe000ed04

080105ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80105b0:	4b0b      	ldr	r3, [pc, #44]	; (80105e0 <vPortSetupTimerInterrupt+0x34>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80105b6:	4b0b      	ldr	r3, [pc, #44]	; (80105e4 <vPortSetupTimerInterrupt+0x38>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105bc:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <vPortSetupTimerInterrupt+0x3c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a0a      	ldr	r2, [pc, #40]	; (80105ec <vPortSetupTimerInterrupt+0x40>)
 80105c2:	fba2 2303 	umull	r2, r3, r2, r3
 80105c6:	099b      	lsrs	r3, r3, #6
 80105c8:	4a09      	ldr	r2, [pc, #36]	; (80105f0 <vPortSetupTimerInterrupt+0x44>)
 80105ca:	3b01      	subs	r3, #1
 80105cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80105ce:	4b04      	ldr	r3, [pc, #16]	; (80105e0 <vPortSetupTimerInterrupt+0x34>)
 80105d0:	2207      	movs	r2, #7
 80105d2:	601a      	str	r2, [r3, #0]
}
 80105d4:	bf00      	nop
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr
 80105de:	bf00      	nop
 80105e0:	e000e010 	.word	0xe000e010
 80105e4:	e000e018 	.word	0xe000e018
 80105e8:	20000000 	.word	0x20000000
 80105ec:	10624dd3 	.word	0x10624dd3
 80105f0:	e000e014 	.word	0xe000e014

080105f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80105f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010604 <vPortEnableVFP+0x10>
 80105f8:	6801      	ldr	r1, [r0, #0]
 80105fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80105fe:	6001      	str	r1, [r0, #0]
 8010600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010602:	bf00      	nop
 8010604:	e000ed88 	.word	0xe000ed88

08010608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801060e:	f3ef 8305 	mrs	r3, IPSR
 8010612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2b0f      	cmp	r3, #15
 8010618:	d915      	bls.n	8010646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801061a:	4a18      	ldr	r2, [pc, #96]	; (801067c <vPortValidateInterruptPriority+0x74>)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	4413      	add	r3, r2
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010624:	4b16      	ldr	r3, [pc, #88]	; (8010680 <vPortValidateInterruptPriority+0x78>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	7afa      	ldrb	r2, [r7, #11]
 801062a:	429a      	cmp	r2, r3
 801062c:	d20b      	bcs.n	8010646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010632:	b672      	cpsid	i
 8010634:	f383 8811 	msr	BASEPRI, r3
 8010638:	f3bf 8f6f 	isb	sy
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	b662      	cpsie	i
 8010642:	607b      	str	r3, [r7, #4]
 8010644:	e7fe      	b.n	8010644 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010646:	4b0f      	ldr	r3, [pc, #60]	; (8010684 <vPortValidateInterruptPriority+0x7c>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801064e:	4b0e      	ldr	r3, [pc, #56]	; (8010688 <vPortValidateInterruptPriority+0x80>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	429a      	cmp	r2, r3
 8010654:	d90b      	bls.n	801066e <vPortValidateInterruptPriority+0x66>
 8010656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065a:	b672      	cpsid	i
 801065c:	f383 8811 	msr	BASEPRI, r3
 8010660:	f3bf 8f6f 	isb	sy
 8010664:	f3bf 8f4f 	dsb	sy
 8010668:	b662      	cpsie	i
 801066a:	603b      	str	r3, [r7, #0]
 801066c:	e7fe      	b.n	801066c <vPortValidateInterruptPriority+0x64>
	}
 801066e:	bf00      	nop
 8010670:	3714      	adds	r7, #20
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	e000e3f0 	.word	0xe000e3f0
 8010680:	20000f3c 	.word	0x20000f3c
 8010684:	e000ed0c 	.word	0xe000ed0c
 8010688:	20000f40 	.word	0x20000f40

0801068c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010694:	2300      	movs	r3, #0
 8010696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010698:	f7fe fc92 	bl	800efc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801069c:	4b5a      	ldr	r3, [pc, #360]	; (8010808 <pvPortMalloc+0x17c>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d101      	bne.n	80106a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80106a4:	f000 f916 	bl	80108d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80106a8:	4b58      	ldr	r3, [pc, #352]	; (801080c <pvPortMalloc+0x180>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4013      	ands	r3, r2
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f040 8090 	bne.w	80107d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d01e      	beq.n	80106fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80106bc:	2208      	movs	r2, #8
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4413      	add	r3, r2
 80106c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f003 0307 	and.w	r3, r3, #7
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d015      	beq.n	80106fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f023 0307 	bic.w	r3, r3, #7
 80106d4:	3308      	adds	r3, #8
 80106d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f003 0307 	and.w	r3, r3, #7
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00b      	beq.n	80106fa <pvPortMalloc+0x6e>
 80106e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e6:	b672      	cpsid	i
 80106e8:	f383 8811 	msr	BASEPRI, r3
 80106ec:	f3bf 8f6f 	isb	sy
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	b662      	cpsie	i
 80106f6:	617b      	str	r3, [r7, #20]
 80106f8:	e7fe      	b.n	80106f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d06a      	beq.n	80107d6 <pvPortMalloc+0x14a>
 8010700:	4b43      	ldr	r3, [pc, #268]	; (8010810 <pvPortMalloc+0x184>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	429a      	cmp	r2, r3
 8010708:	d865      	bhi.n	80107d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801070a:	4b42      	ldr	r3, [pc, #264]	; (8010814 <pvPortMalloc+0x188>)
 801070c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801070e:	4b41      	ldr	r3, [pc, #260]	; (8010814 <pvPortMalloc+0x188>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010714:	e004      	b.n	8010720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	429a      	cmp	r2, r3
 8010728:	d903      	bls.n	8010732 <pvPortMalloc+0xa6>
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1f1      	bne.n	8010716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010732:	4b35      	ldr	r3, [pc, #212]	; (8010808 <pvPortMalloc+0x17c>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010738:	429a      	cmp	r2, r3
 801073a:	d04c      	beq.n	80107d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2208      	movs	r2, #8
 8010742:	4413      	add	r3, r2
 8010744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	1ad2      	subs	r2, r2, r3
 8010756:	2308      	movs	r3, #8
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	429a      	cmp	r2, r3
 801075c:	d920      	bls.n	80107a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4413      	add	r3, r2
 8010764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	f003 0307 	and.w	r3, r3, #7
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00b      	beq.n	8010788 <pvPortMalloc+0xfc>
 8010770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010774:	b672      	cpsid	i
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	b662      	cpsie	i
 8010784:	613b      	str	r3, [r7, #16]
 8010786:	e7fe      	b.n	8010786 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078a:	685a      	ldr	r2, [r3, #4]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	1ad2      	subs	r2, r2, r3
 8010790:	69bb      	ldr	r3, [r7, #24]
 8010792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801079a:	69b8      	ldr	r0, [r7, #24]
 801079c:	f000 f8fc 	bl	8010998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80107a0:	4b1b      	ldr	r3, [pc, #108]	; (8010810 <pvPortMalloc+0x184>)
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	4a19      	ldr	r2, [pc, #100]	; (8010810 <pvPortMalloc+0x184>)
 80107ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80107ae:	4b18      	ldr	r3, [pc, #96]	; (8010810 <pvPortMalloc+0x184>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	4b19      	ldr	r3, [pc, #100]	; (8010818 <pvPortMalloc+0x18c>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d203      	bcs.n	80107c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80107ba:	4b15      	ldr	r3, [pc, #84]	; (8010810 <pvPortMalloc+0x184>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a16      	ldr	r2, [pc, #88]	; (8010818 <pvPortMalloc+0x18c>)
 80107c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	685a      	ldr	r2, [r3, #4]
 80107c6:	4b11      	ldr	r3, [pc, #68]	; (801080c <pvPortMalloc+0x180>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	431a      	orrs	r2, r3
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80107d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80107d6:	f7fe fc01 	bl	800efdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	f003 0307 	and.w	r3, r3, #7
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00b      	beq.n	80107fc <pvPortMalloc+0x170>
 80107e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e8:	b672      	cpsid	i
 80107ea:	f383 8811 	msr	BASEPRI, r3
 80107ee:	f3bf 8f6f 	isb	sy
 80107f2:	f3bf 8f4f 	dsb	sy
 80107f6:	b662      	cpsie	i
 80107f8:	60fb      	str	r3, [r7, #12]
 80107fa:	e7fe      	b.n	80107fa <pvPortMalloc+0x16e>
	return pvReturn;
 80107fc:	69fb      	ldr	r3, [r7, #28]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3728      	adds	r7, #40	; 0x28
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	20004b4c 	.word	0x20004b4c
 801080c:	20004b58 	.word	0x20004b58
 8010810:	20004b50 	.word	0x20004b50
 8010814:	20004b44 	.word	0x20004b44
 8010818:	20004b54 	.word	0x20004b54

0801081c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b086      	sub	sp, #24
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d04a      	beq.n	80108c4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801082e:	2308      	movs	r3, #8
 8010830:	425b      	negs	r3, r3
 8010832:	697a      	ldr	r2, [r7, #20]
 8010834:	4413      	add	r3, r2
 8010836:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	685a      	ldr	r2, [r3, #4]
 8010840:	4b22      	ldr	r3, [pc, #136]	; (80108cc <vPortFree+0xb0>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4013      	ands	r3, r2
 8010846:	2b00      	cmp	r3, #0
 8010848:	d10b      	bne.n	8010862 <vPortFree+0x46>
 801084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084e:	b672      	cpsid	i
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	b662      	cpsie	i
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	e7fe      	b.n	8010860 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00b      	beq.n	8010882 <vPortFree+0x66>
 801086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086e:	b672      	cpsid	i
 8010870:	f383 8811 	msr	BASEPRI, r3
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	f3bf 8f4f 	dsb	sy
 801087c:	b662      	cpsie	i
 801087e:	60bb      	str	r3, [r7, #8]
 8010880:	e7fe      	b.n	8010880 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	685a      	ldr	r2, [r3, #4]
 8010886:	4b11      	ldr	r3, [pc, #68]	; (80108cc <vPortFree+0xb0>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4013      	ands	r3, r2
 801088c:	2b00      	cmp	r3, #0
 801088e:	d019      	beq.n	80108c4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d115      	bne.n	80108c4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <vPortFree+0xb0>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	43db      	mvns	r3, r3
 80108a2:	401a      	ands	r2, r3
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80108a8:	f7fe fb8a 	bl	800efc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	685a      	ldr	r2, [r3, #4]
 80108b0:	4b07      	ldr	r3, [pc, #28]	; (80108d0 <vPortFree+0xb4>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4413      	add	r3, r2
 80108b6:	4a06      	ldr	r2, [pc, #24]	; (80108d0 <vPortFree+0xb4>)
 80108b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80108ba:	6938      	ldr	r0, [r7, #16]
 80108bc:	f000 f86c 	bl	8010998 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80108c0:	f7fe fb8c 	bl	800efdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80108c4:	bf00      	nop
 80108c6:	3718      	adds	r7, #24
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20004b58 	.word	0x20004b58
 80108d0:	20004b50 	.word	0x20004b50

080108d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80108da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80108de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80108e0:	4b27      	ldr	r3, [pc, #156]	; (8010980 <prvHeapInit+0xac>)
 80108e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00c      	beq.n	8010908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	3307      	adds	r3, #7
 80108f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f023 0307 	bic.w	r3, r3, #7
 80108fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	4a1f      	ldr	r2, [pc, #124]	; (8010980 <prvHeapInit+0xac>)
 8010904:	4413      	add	r3, r2
 8010906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801090c:	4a1d      	ldr	r2, [pc, #116]	; (8010984 <prvHeapInit+0xb0>)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010912:	4b1c      	ldr	r3, [pc, #112]	; (8010984 <prvHeapInit+0xb0>)
 8010914:	2200      	movs	r2, #0
 8010916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	4413      	add	r3, r2
 801091e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010920:	2208      	movs	r2, #8
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f023 0307 	bic.w	r3, r3, #7
 801092e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	4a15      	ldr	r2, [pc, #84]	; (8010988 <prvHeapInit+0xb4>)
 8010934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010936:	4b14      	ldr	r3, [pc, #80]	; (8010988 <prvHeapInit+0xb4>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2200      	movs	r2, #0
 801093c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801093e:	4b12      	ldr	r3, [pc, #72]	; (8010988 <prvHeapInit+0xb4>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	1ad2      	subs	r2, r2, r3
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010954:	4b0c      	ldr	r3, [pc, #48]	; (8010988 <prvHeapInit+0xb4>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	4a0a      	ldr	r2, [pc, #40]	; (801098c <prvHeapInit+0xb8>)
 8010962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	4a09      	ldr	r2, [pc, #36]	; (8010990 <prvHeapInit+0xbc>)
 801096a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801096c:	4b09      	ldr	r3, [pc, #36]	; (8010994 <prvHeapInit+0xc0>)
 801096e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010972:	601a      	str	r2, [r3, #0]
}
 8010974:	bf00      	nop
 8010976:	3714      	adds	r7, #20
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr
 8010980:	20000f44 	.word	0x20000f44
 8010984:	20004b44 	.word	0x20004b44
 8010988:	20004b4c 	.word	0x20004b4c
 801098c:	20004b54 	.word	0x20004b54
 8010990:	20004b50 	.word	0x20004b50
 8010994:	20004b58 	.word	0x20004b58

08010998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80109a0:	4b28      	ldr	r3, [pc, #160]	; (8010a44 <prvInsertBlockIntoFreeList+0xac>)
 80109a2:	60fb      	str	r3, [r7, #12]
 80109a4:	e002      	b.n	80109ac <prvInsertBlockIntoFreeList+0x14>
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	60fb      	str	r3, [r7, #12]
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d8f7      	bhi.n	80109a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	4413      	add	r3, r2
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d108      	bne.n	80109da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	685a      	ldr	r2, [r3, #4]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	441a      	add	r2, r3
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	68ba      	ldr	r2, [r7, #8]
 80109e4:	441a      	add	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d118      	bne.n	8010a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <prvInsertBlockIntoFreeList+0xb0>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d00d      	beq.n	8010a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	685a      	ldr	r2, [r3, #4]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	441a      	add	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	e008      	b.n	8010a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a16:	4b0c      	ldr	r3, [pc, #48]	; (8010a48 <prvInsertBlockIntoFreeList+0xb0>)
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	e003      	b.n	8010a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d002      	beq.n	8010a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a36:	bf00      	nop
 8010a38:	3714      	adds	r7, #20
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	20004b44 	.word	0x20004b44
 8010a48:	20004b4c 	.word	0x20004b4c

08010a4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010a50:	2200      	movs	r2, #0
 8010a52:	4912      	ldr	r1, [pc, #72]	; (8010a9c <MX_USB_DEVICE_Init+0x50>)
 8010a54:	4812      	ldr	r0, [pc, #72]	; (8010aa0 <MX_USB_DEVICE_Init+0x54>)
 8010a56:	f7f8 f841 	bl	8008adc <USBD_Init>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d001      	beq.n	8010a64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010a60:	f7ef ff40 	bl	80008e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010a64:	490f      	ldr	r1, [pc, #60]	; (8010aa4 <MX_USB_DEVICE_Init+0x58>)
 8010a66:	480e      	ldr	r0, [pc, #56]	; (8010aa0 <MX_USB_DEVICE_Init+0x54>)
 8010a68:	f7f8 f86e 	bl	8008b48 <USBD_RegisterClass>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d001      	beq.n	8010a76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010a72:	f7ef ff37 	bl	80008e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010a76:	490c      	ldr	r1, [pc, #48]	; (8010aa8 <MX_USB_DEVICE_Init+0x5c>)
 8010a78:	4809      	ldr	r0, [pc, #36]	; (8010aa0 <MX_USB_DEVICE_Init+0x54>)
 8010a7a:	f7f7 ff93 	bl	80089a4 <USBD_CDC_RegisterInterface>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d001      	beq.n	8010a88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010a84:	f7ef ff2e 	bl	80008e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010a88:	4805      	ldr	r0, [pc, #20]	; (8010aa0 <MX_USB_DEVICE_Init+0x54>)
 8010a8a:	f7f8 f87e 	bl	8008b8a <USBD_Start>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d001      	beq.n	8010a98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010a94:	f7ef ff26 	bl	80008e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010a98:	bf00      	nop
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	20000134 	.word	0x20000134
 8010aa0:	200087f4 	.word	0x200087f4
 8010aa4:	20000018 	.word	0x20000018
 8010aa8:	20000120 	.word	0x20000120

08010aac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	4905      	ldr	r1, [pc, #20]	; (8010ac8 <CDC_Init_FS+0x1c>)
 8010ab4:	4805      	ldr	r0, [pc, #20]	; (8010acc <CDC_Init_FS+0x20>)
 8010ab6:	f7f7 ff8a 	bl	80089ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010aba:	4905      	ldr	r1, [pc, #20]	; (8010ad0 <CDC_Init_FS+0x24>)
 8010abc:	4803      	ldr	r0, [pc, #12]	; (8010acc <CDC_Init_FS+0x20>)
 8010abe:	f7f7 ff9f 	bl	8008a00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ac2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	200092c4 	.word	0x200092c4
 8010acc:	200087f4 	.word	0x200087f4
 8010ad0:	20008ac4 	.word	0x20008ac4

08010ad4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010ad8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	4603      	mov	r3, r0
 8010aec:	6039      	str	r1, [r7, #0]
 8010aee:	71fb      	strb	r3, [r7, #7]
 8010af0:	4613      	mov	r3, r2
 8010af2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010af4:	79fb      	ldrb	r3, [r7, #7]
 8010af6:	2b23      	cmp	r3, #35	; 0x23
 8010af8:	d84a      	bhi.n	8010b90 <CDC_Control_FS+0xac>
 8010afa:	a201      	add	r2, pc, #4	; (adr r2, 8010b00 <CDC_Control_FS+0x1c>)
 8010afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b00:	08010b91 	.word	0x08010b91
 8010b04:	08010b91 	.word	0x08010b91
 8010b08:	08010b91 	.word	0x08010b91
 8010b0c:	08010b91 	.word	0x08010b91
 8010b10:	08010b91 	.word	0x08010b91
 8010b14:	08010b91 	.word	0x08010b91
 8010b18:	08010b91 	.word	0x08010b91
 8010b1c:	08010b91 	.word	0x08010b91
 8010b20:	08010b91 	.word	0x08010b91
 8010b24:	08010b91 	.word	0x08010b91
 8010b28:	08010b91 	.word	0x08010b91
 8010b2c:	08010b91 	.word	0x08010b91
 8010b30:	08010b91 	.word	0x08010b91
 8010b34:	08010b91 	.word	0x08010b91
 8010b38:	08010b91 	.word	0x08010b91
 8010b3c:	08010b91 	.word	0x08010b91
 8010b40:	08010b91 	.word	0x08010b91
 8010b44:	08010b91 	.word	0x08010b91
 8010b48:	08010b91 	.word	0x08010b91
 8010b4c:	08010b91 	.word	0x08010b91
 8010b50:	08010b91 	.word	0x08010b91
 8010b54:	08010b91 	.word	0x08010b91
 8010b58:	08010b91 	.word	0x08010b91
 8010b5c:	08010b91 	.word	0x08010b91
 8010b60:	08010b91 	.word	0x08010b91
 8010b64:	08010b91 	.word	0x08010b91
 8010b68:	08010b91 	.word	0x08010b91
 8010b6c:	08010b91 	.word	0x08010b91
 8010b70:	08010b91 	.word	0x08010b91
 8010b74:	08010b91 	.word	0x08010b91
 8010b78:	08010b91 	.word	0x08010b91
 8010b7c:	08010b91 	.word	0x08010b91
 8010b80:	08010b91 	.word	0x08010b91
 8010b84:	08010b91 	.word	0x08010b91
 8010b88:	08010b91 	.word	0x08010b91
 8010b8c:	08010b91 	.word	0x08010b91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010b90:	bf00      	nop
  }

  return (USBD_OK);
 8010b92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010baa:	6879      	ldr	r1, [r7, #4]
 8010bac:	4805      	ldr	r0, [pc, #20]	; (8010bc4 <CDC_Receive_FS+0x24>)
 8010bae:	f7f7 ff27 	bl	8008a00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010bb2:	4804      	ldr	r0, [pc, #16]	; (8010bc4 <CDC_Receive_FS+0x24>)
 8010bb4:	f7f7 ff68 	bl	8008a88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010bb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	200087f4 	.word	0x200087f4

08010bc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010bd8:	4b0d      	ldr	r3, [pc, #52]	; (8010c10 <CDC_Transmit_FS+0x48>)
 8010bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d001      	beq.n	8010bee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e00b      	b.n	8010c06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010bee:	887b      	ldrh	r3, [r7, #2]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	6879      	ldr	r1, [r7, #4]
 8010bf4:	4806      	ldr	r0, [pc, #24]	; (8010c10 <CDC_Transmit_FS+0x48>)
 8010bf6:	f7f7 feea 	bl	80089ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010bfa:	4805      	ldr	r0, [pc, #20]	; (8010c10 <CDC_Transmit_FS+0x48>)
 8010bfc:	f7f7 ff14 	bl	8008a28 <USBD_CDC_TransmitPacket>
 8010c00:	4603      	mov	r3, r0
 8010c02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	200087f4 	.word	0x200087f4

08010c14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b087      	sub	sp, #28
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	4613      	mov	r3, r2
 8010c20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	371c      	adds	r7, #28
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
	...

08010c38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	6039      	str	r1, [r7, #0]
 8010c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	2212      	movs	r2, #18
 8010c48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010c4a:	4b03      	ldr	r3, [pc, #12]	; (8010c58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	20000154 	.word	0x20000154

08010c5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	6039      	str	r1, [r7, #0]
 8010c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2204      	movs	r2, #4
 8010c6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c6e:	4b03      	ldr	r3, [pc, #12]	; (8010c7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr
 8010c7c:	20000174 	.word	0x20000174

08010c80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	4603      	mov	r3, r0
 8010c88:	6039      	str	r1, [r7, #0]
 8010c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c8c:	79fb      	ldrb	r3, [r7, #7]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d105      	bne.n	8010c9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	4907      	ldr	r1, [pc, #28]	; (8010cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010c96:	4808      	ldr	r0, [pc, #32]	; (8010cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010c98:	f7f8 ff6f 	bl	8009b7a <USBD_GetString>
 8010c9c:	e004      	b.n	8010ca8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	4904      	ldr	r1, [pc, #16]	; (8010cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ca2:	4805      	ldr	r0, [pc, #20]	; (8010cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010ca4:	f7f8 ff69 	bl	8009b7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ca8:	4b02      	ldr	r3, [pc, #8]	; (8010cb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	20009ac4 	.word	0x20009ac4
 8010cb8:	080122cc 	.word	0x080122cc

08010cbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	6039      	str	r1, [r7, #0]
 8010cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010cc8:	683a      	ldr	r2, [r7, #0]
 8010cca:	4904      	ldr	r1, [pc, #16]	; (8010cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ccc:	4804      	ldr	r0, [pc, #16]	; (8010ce0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010cce:	f7f8 ff54 	bl	8009b7a <USBD_GetString>
  return USBD_StrDesc;
 8010cd2:	4b02      	ldr	r3, [pc, #8]	; (8010cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	20009ac4 	.word	0x20009ac4
 8010ce0:	080122e4 	.word	0x080122e4

08010ce4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	6039      	str	r1, [r7, #0]
 8010cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	221a      	movs	r2, #26
 8010cf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010cf6:	f000 f855 	bl	8010da4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010cfa:	4b02      	ldr	r3, [pc, #8]	; (8010d04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	20000178 	.word	0x20000178

08010d08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	6039      	str	r1, [r7, #0]
 8010d12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010d14:	79fb      	ldrb	r3, [r7, #7]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d105      	bne.n	8010d26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d1a:	683a      	ldr	r2, [r7, #0]
 8010d1c:	4907      	ldr	r1, [pc, #28]	; (8010d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d1e:	4808      	ldr	r0, [pc, #32]	; (8010d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d20:	f7f8 ff2b 	bl	8009b7a <USBD_GetString>
 8010d24:	e004      	b.n	8010d30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d26:	683a      	ldr	r2, [r7, #0]
 8010d28:	4904      	ldr	r1, [pc, #16]	; (8010d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d2a:	4805      	ldr	r0, [pc, #20]	; (8010d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d2c:	f7f8 ff25 	bl	8009b7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d30:	4b02      	ldr	r3, [pc, #8]	; (8010d3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	20009ac4 	.word	0x20009ac4
 8010d40:	080122f8 	.word	0x080122f8

08010d44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	6039      	str	r1, [r7, #0]
 8010d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d105      	bne.n	8010d62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d56:	683a      	ldr	r2, [r7, #0]
 8010d58:	4907      	ldr	r1, [pc, #28]	; (8010d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d5a:	4808      	ldr	r0, [pc, #32]	; (8010d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d5c:	f7f8 ff0d 	bl	8009b7a <USBD_GetString>
 8010d60:	e004      	b.n	8010d6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	4904      	ldr	r1, [pc, #16]	; (8010d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d66:	4805      	ldr	r0, [pc, #20]	; (8010d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d68:	f7f8 ff07 	bl	8009b7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d6c:	4b02      	ldr	r3, [pc, #8]	; (8010d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3708      	adds	r7, #8
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	20009ac4 	.word	0x20009ac4
 8010d7c:	08012304 	.word	0x08012304

08010d80 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	4603      	mov	r3, r0
 8010d88:	6039      	str	r1, [r7, #0]
 8010d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	220c      	movs	r2, #12
 8010d90:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010d92:	4b03      	ldr	r3, [pc, #12]	; (8010da0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	20000168 	.word	0x20000168

08010da4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010daa:	4b0f      	ldr	r3, [pc, #60]	; (8010de8 <Get_SerialNum+0x44>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010db0:	4b0e      	ldr	r3, [pc, #56]	; (8010dec <Get_SerialNum+0x48>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010db6:	4b0e      	ldr	r3, [pc, #56]	; (8010df0 <Get_SerialNum+0x4c>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d009      	beq.n	8010dde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010dca:	2208      	movs	r2, #8
 8010dcc:	4909      	ldr	r1, [pc, #36]	; (8010df4 <Get_SerialNum+0x50>)
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f000 f814 	bl	8010dfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010dd4:	2204      	movs	r2, #4
 8010dd6:	4908      	ldr	r1, [pc, #32]	; (8010df8 <Get_SerialNum+0x54>)
 8010dd8:	68b8      	ldr	r0, [r7, #8]
 8010dda:	f000 f80f 	bl	8010dfc <IntToUnicode>
  }
}
 8010dde:	bf00      	nop
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	1ff0f420 	.word	0x1ff0f420
 8010dec:	1ff0f424 	.word	0x1ff0f424
 8010df0:	1ff0f428 	.word	0x1ff0f428
 8010df4:	2000017a 	.word	0x2000017a
 8010df8:	2000018a 	.word	0x2000018a

08010dfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b087      	sub	sp, #28
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	4613      	mov	r3, r2
 8010e08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e0e:	2300      	movs	r3, #0
 8010e10:	75fb      	strb	r3, [r7, #23]
 8010e12:	e027      	b.n	8010e64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	0f1b      	lsrs	r3, r3, #28
 8010e18:	2b09      	cmp	r3, #9
 8010e1a:	d80b      	bhi.n	8010e34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	0f1b      	lsrs	r3, r3, #28
 8010e20:	b2da      	uxtb	r2, r3
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	4619      	mov	r1, r3
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	440b      	add	r3, r1
 8010e2c:	3230      	adds	r2, #48	; 0x30
 8010e2e:	b2d2      	uxtb	r2, r2
 8010e30:	701a      	strb	r2, [r3, #0]
 8010e32:	e00a      	b.n	8010e4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	0f1b      	lsrs	r3, r3, #28
 8010e38:	b2da      	uxtb	r2, r3
 8010e3a:	7dfb      	ldrb	r3, [r7, #23]
 8010e3c:	005b      	lsls	r3, r3, #1
 8010e3e:	4619      	mov	r1, r3
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	440b      	add	r3, r1
 8010e44:	3237      	adds	r2, #55	; 0x37
 8010e46:	b2d2      	uxtb	r2, r2
 8010e48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	011b      	lsls	r3, r3, #4
 8010e4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	3301      	adds	r3, #1
 8010e56:	68ba      	ldr	r2, [r7, #8]
 8010e58:	4413      	add	r3, r2
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010e5e:	7dfb      	ldrb	r3, [r7, #23]
 8010e60:	3301      	adds	r3, #1
 8010e62:	75fb      	strb	r3, [r7, #23]
 8010e64:	7dfa      	ldrb	r2, [r7, #23]
 8010e66:	79fb      	ldrb	r3, [r7, #7]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d3d3      	bcc.n	8010e14 <IntToUnicode+0x18>
  }
}
 8010e6c:	bf00      	nop
 8010e6e:	371c      	adds	r7, #28
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b08a      	sub	sp, #40	; 0x28
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e80:	f107 0314 	add.w	r3, r7, #20
 8010e84:	2200      	movs	r2, #0
 8010e86:	601a      	str	r2, [r3, #0]
 8010e88:	605a      	str	r2, [r3, #4]
 8010e8a:	609a      	str	r2, [r3, #8]
 8010e8c:	60da      	str	r2, [r3, #12]
 8010e8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e98:	d13c      	bne.n	8010f14 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e9a:	4b20      	ldr	r3, [pc, #128]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e9e:	4a1f      	ldr	r2, [pc, #124]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010ea0:	f043 0301 	orr.w	r3, r3, #1
 8010ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ea6:	4b1d      	ldr	r3, [pc, #116]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eaa:	f003 0301 	and.w	r3, r3, #1
 8010eae:	613b      	str	r3, [r7, #16]
 8010eb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010eb8:	2302      	movs	r3, #2
 8010eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ec4:	230a      	movs	r3, #10
 8010ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ec8:	f107 0314 	add.w	r3, r7, #20
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4814      	ldr	r0, [pc, #80]	; (8010f20 <HAL_PCD_MspInit+0xa8>)
 8010ed0:	f7f0 fee2 	bl	8001c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ed4:	4b11      	ldr	r3, [pc, #68]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed8:	4a10      	ldr	r2, [pc, #64]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ede:	6353      	str	r3, [r2, #52]	; 0x34
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ee8:	60fb      	str	r3, [r7, #12]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	4b0b      	ldr	r3, [pc, #44]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ef0:	4a0a      	ldr	r2, [pc, #40]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8010ef8:	4b08      	ldr	r3, [pc, #32]	; (8010f1c <HAL_PCD_MspInit+0xa4>)
 8010efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f00:	60bb      	str	r3, [r7, #8]
 8010f02:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010f04:	2200      	movs	r2, #0
 8010f06:	2105      	movs	r1, #5
 8010f08:	2043      	movs	r0, #67	; 0x43
 8010f0a:	f7f0 faf7 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f0e:	2043      	movs	r0, #67	; 0x43
 8010f10:	f7f0 fb10 	bl	8001534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f14:	bf00      	nop
 8010f16:	3728      	adds	r7, #40	; 0x28
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	40023800 	.word	0x40023800
 8010f20:	40020000 	.word	0x40020000

08010f24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f7f7 fe70 	bl	8008c20 <USBD_LL_SetupStage>
}
 8010f40:	bf00      	nop
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	460b      	mov	r3, r1
 8010f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8010f5a:	78fa      	ldrb	r2, [r7, #3]
 8010f5c:	6879      	ldr	r1, [r7, #4]
 8010f5e:	4613      	mov	r3, r2
 8010f60:	00db      	lsls	r3, r3, #3
 8010f62:	1a9b      	subs	r3, r3, r2
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	440b      	add	r3, r1
 8010f68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	78fb      	ldrb	r3, [r7, #3]
 8010f70:	4619      	mov	r1, r3
 8010f72:	f7f7 fea8 	bl	8008cc6 <USBD_LL_DataOutStage>
}
 8010f76:	bf00      	nop
 8010f78:	3708      	adds	r7, #8
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b082      	sub	sp, #8
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
 8010f86:	460b      	mov	r3, r1
 8010f88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8010f90:	78fa      	ldrb	r2, [r7, #3]
 8010f92:	6879      	ldr	r1, [r7, #4]
 8010f94:	4613      	mov	r3, r2
 8010f96:	00db      	lsls	r3, r3, #3
 8010f98:	1a9b      	subs	r3, r3, r2
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	440b      	add	r3, r1
 8010f9e:	3348      	adds	r3, #72	; 0x48
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	78fb      	ldrb	r3, [r7, #3]
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	f7f7 fef1 	bl	8008d8c <USBD_LL_DataInStage>
}
 8010faa:	bf00      	nop
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b082      	sub	sp, #8
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f7 fff5 	bl	8008fb0 <USBD_LL_SOF>
}
 8010fc6:	bf00      	nop
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b084      	sub	sp, #16
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d102      	bne.n	8010fe8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73fb      	strb	r3, [r7, #15]
 8010fe6:	e008      	b.n	8010ffa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	d102      	bne.n	8010ff6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	73fb      	strb	r3, [r7, #15]
 8010ff4:	e001      	b.n	8010ffa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010ff6:	f7ef fc75 	bl	80008e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8011000:	7bfa      	ldrb	r2, [r7, #15]
 8011002:	4611      	mov	r1, r2
 8011004:	4618      	mov	r0, r3
 8011006:	f7f7 ff98 	bl	8008f3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8011010:	4618      	mov	r0, r3
 8011012:	f7f7 ff51 	bl	8008eb8 <USBD_LL_Reset>
}
 8011016:	bf00      	nop
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
	...

08011020 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801102e:	4618      	mov	r0, r3
 8011030:	f7f7 ff93 	bl	8008f5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	6812      	ldr	r2, [r2, #0]
 8011042:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011046:	f043 0301 	orr.w	r3, r3, #1
 801104a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a1b      	ldr	r3, [r3, #32]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d005      	beq.n	8011060 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011054:	4b04      	ldr	r3, [pc, #16]	; (8011068 <HAL_PCD_SuspendCallback+0x48>)
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	4a03      	ldr	r2, [pc, #12]	; (8011068 <HAL_PCD_SuspendCallback+0x48>)
 801105a:	f043 0306 	orr.w	r3, r3, #6
 801105e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011060:	bf00      	nop
 8011062:	3708      	adds	r7, #8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	e000ed00 	.word	0xe000ed00

0801106c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801107a:	4618      	mov	r0, r3
 801107c:	f7f7 ff82 	bl	8008f84 <USBD_LL_Resume>
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	460b      	mov	r3, r1
 8011092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801109a:	78fa      	ldrb	r2, [r7, #3]
 801109c:	4611      	mov	r1, r2
 801109e:	4618      	mov	r0, r3
 80110a0:	f7f7 ffad 	bl	8008ffe <USBD_LL_IsoOUTIncomplete>
}
 80110a4:	bf00      	nop
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	460b      	mov	r3, r1
 80110b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80110be:	78fa      	ldrb	r2, [r7, #3]
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f7 ff8e 	bl	8008fe4 <USBD_LL_IsoINIncomplete>
}
 80110c8:	bf00      	nop
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f7 ff9a 	bl	8009018 <USBD_LL_DevConnected>
}
 80110e4:	bf00      	nop
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7f7 ff97 	bl	800902e <USBD_LL_DevDisconnected>
}
 8011100:	bf00      	nop
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d13c      	bne.n	8011192 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011118:	4a20      	ldr	r2, [pc, #128]	; (801119c <USBD_LL_Init+0x94>)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a1e      	ldr	r2, [pc, #120]	; (801119c <USBD_LL_Init+0x94>)
 8011124:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011128:	4b1c      	ldr	r3, [pc, #112]	; (801119c <USBD_LL_Init+0x94>)
 801112a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801112e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011130:	4b1a      	ldr	r3, [pc, #104]	; (801119c <USBD_LL_Init+0x94>)
 8011132:	2206      	movs	r2, #6
 8011134:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011136:	4b19      	ldr	r3, [pc, #100]	; (801119c <USBD_LL_Init+0x94>)
 8011138:	2202      	movs	r2, #2
 801113a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801113c:	4b17      	ldr	r3, [pc, #92]	; (801119c <USBD_LL_Init+0x94>)
 801113e:	2200      	movs	r2, #0
 8011140:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011142:	4b16      	ldr	r3, [pc, #88]	; (801119c <USBD_LL_Init+0x94>)
 8011144:	2202      	movs	r2, #2
 8011146:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011148:	4b14      	ldr	r3, [pc, #80]	; (801119c <USBD_LL_Init+0x94>)
 801114a:	2200      	movs	r2, #0
 801114c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801114e:	4b13      	ldr	r3, [pc, #76]	; (801119c <USBD_LL_Init+0x94>)
 8011150:	2200      	movs	r2, #0
 8011152:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011154:	4b11      	ldr	r3, [pc, #68]	; (801119c <USBD_LL_Init+0x94>)
 8011156:	2200      	movs	r2, #0
 8011158:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801115a:	4b10      	ldr	r3, [pc, #64]	; (801119c <USBD_LL_Init+0x94>)
 801115c:	2200      	movs	r2, #0
 801115e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011160:	4b0e      	ldr	r3, [pc, #56]	; (801119c <USBD_LL_Init+0x94>)
 8011162:	2200      	movs	r2, #0
 8011164:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011166:	480d      	ldr	r0, [pc, #52]	; (801119c <USBD_LL_Init+0x94>)
 8011168:	f7f0 ff40 	bl	8001fec <HAL_PCD_Init>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d001      	beq.n	8011176 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011172:	f7ef fbb7 	bl	80008e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011176:	2180      	movs	r1, #128	; 0x80
 8011178:	4808      	ldr	r0, [pc, #32]	; (801119c <USBD_LL_Init+0x94>)
 801117a:	f7f2 f8c0 	bl	80032fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801117e:	2240      	movs	r2, #64	; 0x40
 8011180:	2100      	movs	r1, #0
 8011182:	4806      	ldr	r0, [pc, #24]	; (801119c <USBD_LL_Init+0x94>)
 8011184:	f7f2 f874 	bl	8003270 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011188:	2280      	movs	r2, #128	; 0x80
 801118a:	2101      	movs	r1, #1
 801118c:	4803      	ldr	r0, [pc, #12]	; (801119c <USBD_LL_Init+0x94>)
 801118e:	f7f2 f86f 	bl	8003270 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011192:	2300      	movs	r3, #0
}
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	20009cc4 	.word	0x20009cc4

080111a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111a8:	2300      	movs	r3, #0
 80111aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111ac:	2300      	movs	r3, #0
 80111ae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7f1 f83c 	bl	8002234 <HAL_PCD_Start>
 80111bc:	4603      	mov	r3, r0
 80111be:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f000 f97e 	bl	80114c4 <USBD_Get_USB_Status>
 80111c8:	4603      	mov	r3, r0
 80111ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80111cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b084      	sub	sp, #16
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
 80111de:	4608      	mov	r0, r1
 80111e0:	4611      	mov	r1, r2
 80111e2:	461a      	mov	r2, r3
 80111e4:	4603      	mov	r3, r0
 80111e6:	70fb      	strb	r3, [r7, #3]
 80111e8:	460b      	mov	r3, r1
 80111ea:	70bb      	strb	r3, [r7, #2]
 80111ec:	4613      	mov	r3, r2
 80111ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111f0:	2300      	movs	r3, #0
 80111f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111f4:	2300      	movs	r3, #0
 80111f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80111fe:	78bb      	ldrb	r3, [r7, #2]
 8011200:	883a      	ldrh	r2, [r7, #0]
 8011202:	78f9      	ldrb	r1, [r7, #3]
 8011204:	f7f1 fc3c 	bl	8002a80 <HAL_PCD_EP_Open>
 8011208:	4603      	mov	r3, r0
 801120a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801120c:	7bfb      	ldrb	r3, [r7, #15]
 801120e:	4618      	mov	r0, r3
 8011210:	f000 f958 	bl	80114c4 <USBD_Get_USB_Status>
 8011214:	4603      	mov	r3, r0
 8011216:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011218:	7bbb      	ldrb	r3, [r7, #14]
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011222:	b580      	push	{r7, lr}
 8011224:	b084      	sub	sp, #16
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
 801122a:	460b      	mov	r3, r1
 801122c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801122e:	2300      	movs	r3, #0
 8011230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801123c:	78fa      	ldrb	r2, [r7, #3]
 801123e:	4611      	mov	r1, r2
 8011240:	4618      	mov	r0, r3
 8011242:	f7f1 fc85 	bl	8002b50 <HAL_PCD_EP_Close>
 8011246:	4603      	mov	r3, r0
 8011248:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801124a:	7bfb      	ldrb	r3, [r7, #15]
 801124c:	4618      	mov	r0, r3
 801124e:	f000 f939 	bl	80114c4 <USBD_Get_USB_Status>
 8011252:	4603      	mov	r3, r0
 8011254:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8011256:	7bbb      	ldrb	r3, [r7, #14]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3710      	adds	r7, #16
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	460b      	mov	r3, r1
 801126a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801127a:	78fa      	ldrb	r2, [r7, #3]
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f7f1 fd5d 	bl	8002d3e <HAL_PCD_EP_SetStall>
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011288:	7bfb      	ldrb	r3, [r7, #15]
 801128a:	4618      	mov	r0, r3
 801128c:	f000 f91a 	bl	80114c4 <USBD_Get_USB_Status>
 8011290:	4603      	mov	r3, r0
 8011292:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011294:	7bbb      	ldrb	r3, [r7, #14]
}
 8011296:	4618      	mov	r0, r3
 8011298:	3710      	adds	r7, #16
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b084      	sub	sp, #16
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	460b      	mov	r3, r1
 80112a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112aa:	2300      	movs	r3, #0
 80112ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112b8:	78fa      	ldrb	r2, [r7, #3]
 80112ba:	4611      	mov	r1, r2
 80112bc:	4618      	mov	r0, r3
 80112be:	f7f1 fda2 	bl	8002e06 <HAL_PCD_EP_ClrStall>
 80112c2:	4603      	mov	r3, r0
 80112c4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80112c6:	7bfb      	ldrb	r3, [r7, #15]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f000 f8fb 	bl	80114c4 <USBD_Get_USB_Status>
 80112ce:	4603      	mov	r3, r0
 80112d0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80112d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112dc:	b480      	push	{r7}
 80112de:	b085      	sub	sp, #20
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	460b      	mov	r3, r1
 80112e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80112f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	da0b      	bge.n	8011310 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80112f8:	78fb      	ldrb	r3, [r7, #3]
 80112fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112fe:	68f9      	ldr	r1, [r7, #12]
 8011300:	4613      	mov	r3, r2
 8011302:	00db      	lsls	r3, r3, #3
 8011304:	1a9b      	subs	r3, r3, r2
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	440b      	add	r3, r1
 801130a:	333e      	adds	r3, #62	; 0x3e
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	e00b      	b.n	8011328 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011316:	68f9      	ldr	r1, [r7, #12]
 8011318:	4613      	mov	r3, r2
 801131a:	00db      	lsls	r3, r3, #3
 801131c:	1a9b      	subs	r3, r3, r2
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	440b      	add	r3, r1
 8011322:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011328:	4618      	mov	r0, r3
 801132a:	3714      	adds	r7, #20
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	460b      	mov	r3, r1
 801133e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011340:	2300      	movs	r3, #0
 8011342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011344:	2300      	movs	r3, #0
 8011346:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801134e:	78fa      	ldrb	r2, [r7, #3]
 8011350:	4611      	mov	r1, r2
 8011352:	4618      	mov	r0, r3
 8011354:	f7f1 fb6f 	bl	8002a36 <HAL_PCD_SetAddress>
 8011358:	4603      	mov	r3, r0
 801135a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801135c:	7bfb      	ldrb	r3, [r7, #15]
 801135e:	4618      	mov	r0, r3
 8011360:	f000 f8b0 	bl	80114c4 <USBD_Get_USB_Status>
 8011364:	4603      	mov	r3, r0
 8011366:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8011368:	7bbb      	ldrb	r3, [r7, #14]
}
 801136a:	4618      	mov	r0, r3
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b086      	sub	sp, #24
 8011376:	af00      	add	r7, sp, #0
 8011378:	60f8      	str	r0, [r7, #12]
 801137a:	607a      	str	r2, [r7, #4]
 801137c:	603b      	str	r3, [r7, #0]
 801137e:	460b      	mov	r3, r1
 8011380:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011382:	2300      	movs	r3, #0
 8011384:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011386:	2300      	movs	r3, #0
 8011388:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011390:	7af9      	ldrb	r1, [r7, #11]
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	f7f1 fc88 	bl	8002caa <HAL_PCD_EP_Transmit>
 801139a:	4603      	mov	r3, r0
 801139c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801139e:	7dfb      	ldrb	r3, [r7, #23]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f000 f88f 	bl	80114c4 <USBD_Get_USB_Status>
 80113a6:	4603      	mov	r3, r0
 80113a8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80113aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3718      	adds	r7, #24
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b086      	sub	sp, #24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	607a      	str	r2, [r7, #4]
 80113be:	603b      	str	r3, [r7, #0]
 80113c0:	460b      	mov	r3, r1
 80113c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113c4:	2300      	movs	r3, #0
 80113c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80113d2:	7af9      	ldrb	r1, [r7, #11]
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	f7f1 fc04 	bl	8002be4 <HAL_PCD_EP_Receive>
 80113dc:	4603      	mov	r3, r0
 80113de:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80113e0:	7dfb      	ldrb	r3, [r7, #23]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f000 f86e 	bl	80114c4 <USBD_Get_USB_Status>
 80113e8:	4603      	mov	r3, r0
 80113ea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80113ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3718      	adds	r7, #24
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b082      	sub	sp, #8
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	460b      	mov	r3, r1
 8011400:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011408:	78fa      	ldrb	r2, [r7, #3]
 801140a:	4611      	mov	r1, r2
 801140c:	4618      	mov	r0, r3
 801140e:	f7f1 fc34 	bl	8002c7a <HAL_PCD_EP_GetRxCount>
 8011412:	4603      	mov	r3, r0
}
 8011414:	4618      	mov	r0, r3
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	460b      	mov	r3, r1
 8011426:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011428:	78fb      	ldrb	r3, [r7, #3]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d002      	beq.n	8011434 <HAL_PCDEx_LPM_Callback+0x18>
 801142e:	2b01      	cmp	r3, #1
 8011430:	d01f      	beq.n	8011472 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8011432:	e03b      	b.n	80114ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6a1b      	ldr	r3, [r3, #32]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d007      	beq.n	801144c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801143c:	f000 f83c 	bl	80114b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011440:	4b1c      	ldr	r3, [pc, #112]	; (80114b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011442:	691b      	ldr	r3, [r3, #16]
 8011444:	4a1b      	ldr	r2, [pc, #108]	; (80114b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011446:	f023 0306 	bic.w	r3, r3, #6
 801144a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	6812      	ldr	r2, [r2, #0]
 801145a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801145e:	f023 0301 	bic.w	r3, r3, #1
 8011462:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801146a:	4618      	mov	r0, r3
 801146c:	f7f7 fd8a 	bl	8008f84 <USBD_LL_Resume>
    break;
 8011470:	e01c      	b.n	80114ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	6812      	ldr	r2, [r2, #0]
 8011480:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011484:	f043 0301 	orr.w	r3, r3, #1
 8011488:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8011490:	4618      	mov	r0, r3
 8011492:	f7f7 fd62 	bl	8008f5a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a1b      	ldr	r3, [r3, #32]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d005      	beq.n	80114aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801149e:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80114a0:	691b      	ldr	r3, [r3, #16]
 80114a2:	4a04      	ldr	r2, [pc, #16]	; (80114b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80114a4:	f043 0306 	orr.w	r3, r3, #6
 80114a8:	6113      	str	r3, [r2, #16]
    break;   
 80114aa:	bf00      	nop
}
 80114ac:	bf00      	nop
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	e000ed00 	.word	0xe000ed00

080114b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80114bc:	f7ef f8e8 	bl	8000690 <SystemClock_Config>
}
 80114c0:	bf00      	nop
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114ce:	2300      	movs	r3, #0
 80114d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	2b03      	cmp	r3, #3
 80114d6:	d817      	bhi.n	8011508 <USBD_Get_USB_Status+0x44>
 80114d8:	a201      	add	r2, pc, #4	; (adr r2, 80114e0 <USBD_Get_USB_Status+0x1c>)
 80114da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114de:	bf00      	nop
 80114e0:	080114f1 	.word	0x080114f1
 80114e4:	080114f7 	.word	0x080114f7
 80114e8:	080114fd 	.word	0x080114fd
 80114ec:	08011503 	.word	0x08011503
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	73fb      	strb	r3, [r7, #15]
    break;
 80114f4:	e00b      	b.n	801150e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80114f6:	2303      	movs	r3, #3
 80114f8:	73fb      	strb	r3, [r7, #15]
    break;
 80114fa:	e008      	b.n	801150e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80114fc:	2301      	movs	r3, #1
 80114fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011500:	e005      	b.n	801150e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011502:	2303      	movs	r3, #3
 8011504:	73fb      	strb	r3, [r7, #15]
    break;
 8011506:	e002      	b.n	801150e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011508:	2303      	movs	r3, #3
 801150a:	73fb      	strb	r3, [r7, #15]
    break;
 801150c:	bf00      	nop
  }
  return usb_status;
 801150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011510:	4618      	mov	r0, r3
 8011512:	3714      	adds	r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr

0801151c <__errno>:
 801151c:	4b01      	ldr	r3, [pc, #4]	; (8011524 <__errno+0x8>)
 801151e:	6818      	ldr	r0, [r3, #0]
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	20000194 	.word	0x20000194

08011528 <__libc_init_array>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	4e0d      	ldr	r6, [pc, #52]	; (8011560 <__libc_init_array+0x38>)
 801152c:	4c0d      	ldr	r4, [pc, #52]	; (8011564 <__libc_init_array+0x3c>)
 801152e:	1ba4      	subs	r4, r4, r6
 8011530:	10a4      	asrs	r4, r4, #2
 8011532:	2500      	movs	r5, #0
 8011534:	42a5      	cmp	r5, r4
 8011536:	d109      	bne.n	801154c <__libc_init_array+0x24>
 8011538:	4e0b      	ldr	r6, [pc, #44]	; (8011568 <__libc_init_array+0x40>)
 801153a:	4c0c      	ldr	r4, [pc, #48]	; (801156c <__libc_init_array+0x44>)
 801153c:	f000 fc72 	bl	8011e24 <_init>
 8011540:	1ba4      	subs	r4, r4, r6
 8011542:	10a4      	asrs	r4, r4, #2
 8011544:	2500      	movs	r5, #0
 8011546:	42a5      	cmp	r5, r4
 8011548:	d105      	bne.n	8011556 <__libc_init_array+0x2e>
 801154a:	bd70      	pop	{r4, r5, r6, pc}
 801154c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011550:	4798      	blx	r3
 8011552:	3501      	adds	r5, #1
 8011554:	e7ee      	b.n	8011534 <__libc_init_array+0xc>
 8011556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801155a:	4798      	blx	r3
 801155c:	3501      	adds	r5, #1
 801155e:	e7f2      	b.n	8011546 <__libc_init_array+0x1e>
 8011560:	08012494 	.word	0x08012494
 8011564:	08012494 	.word	0x08012494
 8011568:	08012494 	.word	0x08012494
 801156c:	08012498 	.word	0x08012498

08011570 <malloc>:
 8011570:	4b02      	ldr	r3, [pc, #8]	; (801157c <malloc+0xc>)
 8011572:	4601      	mov	r1, r0
 8011574:	6818      	ldr	r0, [r3, #0]
 8011576:	f000 b86d 	b.w	8011654 <_malloc_r>
 801157a:	bf00      	nop
 801157c:	20000194 	.word	0x20000194

08011580 <free>:
 8011580:	4b02      	ldr	r3, [pc, #8]	; (801158c <free+0xc>)
 8011582:	4601      	mov	r1, r0
 8011584:	6818      	ldr	r0, [r3, #0]
 8011586:	f000 b817 	b.w	80115b8 <_free_r>
 801158a:	bf00      	nop
 801158c:	20000194 	.word	0x20000194

08011590 <memcpy>:
 8011590:	b510      	push	{r4, lr}
 8011592:	1e43      	subs	r3, r0, #1
 8011594:	440a      	add	r2, r1
 8011596:	4291      	cmp	r1, r2
 8011598:	d100      	bne.n	801159c <memcpy+0xc>
 801159a:	bd10      	pop	{r4, pc}
 801159c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115a4:	e7f7      	b.n	8011596 <memcpy+0x6>

080115a6 <memset>:
 80115a6:	4402      	add	r2, r0
 80115a8:	4603      	mov	r3, r0
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d100      	bne.n	80115b0 <memset+0xa>
 80115ae:	4770      	bx	lr
 80115b0:	f803 1b01 	strb.w	r1, [r3], #1
 80115b4:	e7f9      	b.n	80115aa <memset+0x4>
	...

080115b8 <_free_r>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	4605      	mov	r5, r0
 80115bc:	2900      	cmp	r1, #0
 80115be:	d045      	beq.n	801164c <_free_r+0x94>
 80115c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115c4:	1f0c      	subs	r4, r1, #4
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	bfb8      	it	lt
 80115ca:	18e4      	addlt	r4, r4, r3
 80115cc:	f000 f906 	bl	80117dc <__malloc_lock>
 80115d0:	4a1f      	ldr	r2, [pc, #124]	; (8011650 <_free_r+0x98>)
 80115d2:	6813      	ldr	r3, [r2, #0]
 80115d4:	4610      	mov	r0, r2
 80115d6:	b933      	cbnz	r3, 80115e6 <_free_r+0x2e>
 80115d8:	6063      	str	r3, [r4, #4]
 80115da:	6014      	str	r4, [r2, #0]
 80115dc:	4628      	mov	r0, r5
 80115de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115e2:	f000 b8fc 	b.w	80117de <__malloc_unlock>
 80115e6:	42a3      	cmp	r3, r4
 80115e8:	d90c      	bls.n	8011604 <_free_r+0x4c>
 80115ea:	6821      	ldr	r1, [r4, #0]
 80115ec:	1862      	adds	r2, r4, r1
 80115ee:	4293      	cmp	r3, r2
 80115f0:	bf04      	itt	eq
 80115f2:	681a      	ldreq	r2, [r3, #0]
 80115f4:	685b      	ldreq	r3, [r3, #4]
 80115f6:	6063      	str	r3, [r4, #4]
 80115f8:	bf04      	itt	eq
 80115fa:	1852      	addeq	r2, r2, r1
 80115fc:	6022      	streq	r2, [r4, #0]
 80115fe:	6004      	str	r4, [r0, #0]
 8011600:	e7ec      	b.n	80115dc <_free_r+0x24>
 8011602:	4613      	mov	r3, r2
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	b10a      	cbz	r2, 801160c <_free_r+0x54>
 8011608:	42a2      	cmp	r2, r4
 801160a:	d9fa      	bls.n	8011602 <_free_r+0x4a>
 801160c:	6819      	ldr	r1, [r3, #0]
 801160e:	1858      	adds	r0, r3, r1
 8011610:	42a0      	cmp	r0, r4
 8011612:	d10b      	bne.n	801162c <_free_r+0x74>
 8011614:	6820      	ldr	r0, [r4, #0]
 8011616:	4401      	add	r1, r0
 8011618:	1858      	adds	r0, r3, r1
 801161a:	4282      	cmp	r2, r0
 801161c:	6019      	str	r1, [r3, #0]
 801161e:	d1dd      	bne.n	80115dc <_free_r+0x24>
 8011620:	6810      	ldr	r0, [r2, #0]
 8011622:	6852      	ldr	r2, [r2, #4]
 8011624:	605a      	str	r2, [r3, #4]
 8011626:	4401      	add	r1, r0
 8011628:	6019      	str	r1, [r3, #0]
 801162a:	e7d7      	b.n	80115dc <_free_r+0x24>
 801162c:	d902      	bls.n	8011634 <_free_r+0x7c>
 801162e:	230c      	movs	r3, #12
 8011630:	602b      	str	r3, [r5, #0]
 8011632:	e7d3      	b.n	80115dc <_free_r+0x24>
 8011634:	6820      	ldr	r0, [r4, #0]
 8011636:	1821      	adds	r1, r4, r0
 8011638:	428a      	cmp	r2, r1
 801163a:	bf04      	itt	eq
 801163c:	6811      	ldreq	r1, [r2, #0]
 801163e:	6852      	ldreq	r2, [r2, #4]
 8011640:	6062      	str	r2, [r4, #4]
 8011642:	bf04      	itt	eq
 8011644:	1809      	addeq	r1, r1, r0
 8011646:	6021      	streq	r1, [r4, #0]
 8011648:	605c      	str	r4, [r3, #4]
 801164a:	e7c7      	b.n	80115dc <_free_r+0x24>
 801164c:	bd38      	pop	{r3, r4, r5, pc}
 801164e:	bf00      	nop
 8011650:	20004b5c 	.word	0x20004b5c

08011654 <_malloc_r>:
 8011654:	b570      	push	{r4, r5, r6, lr}
 8011656:	1ccd      	adds	r5, r1, #3
 8011658:	f025 0503 	bic.w	r5, r5, #3
 801165c:	3508      	adds	r5, #8
 801165e:	2d0c      	cmp	r5, #12
 8011660:	bf38      	it	cc
 8011662:	250c      	movcc	r5, #12
 8011664:	2d00      	cmp	r5, #0
 8011666:	4606      	mov	r6, r0
 8011668:	db01      	blt.n	801166e <_malloc_r+0x1a>
 801166a:	42a9      	cmp	r1, r5
 801166c:	d903      	bls.n	8011676 <_malloc_r+0x22>
 801166e:	230c      	movs	r3, #12
 8011670:	6033      	str	r3, [r6, #0]
 8011672:	2000      	movs	r0, #0
 8011674:	bd70      	pop	{r4, r5, r6, pc}
 8011676:	f000 f8b1 	bl	80117dc <__malloc_lock>
 801167a:	4a21      	ldr	r2, [pc, #132]	; (8011700 <_malloc_r+0xac>)
 801167c:	6814      	ldr	r4, [r2, #0]
 801167e:	4621      	mov	r1, r4
 8011680:	b991      	cbnz	r1, 80116a8 <_malloc_r+0x54>
 8011682:	4c20      	ldr	r4, [pc, #128]	; (8011704 <_malloc_r+0xb0>)
 8011684:	6823      	ldr	r3, [r4, #0]
 8011686:	b91b      	cbnz	r3, 8011690 <_malloc_r+0x3c>
 8011688:	4630      	mov	r0, r6
 801168a:	f000 f83d 	bl	8011708 <_sbrk_r>
 801168e:	6020      	str	r0, [r4, #0]
 8011690:	4629      	mov	r1, r5
 8011692:	4630      	mov	r0, r6
 8011694:	f000 f838 	bl	8011708 <_sbrk_r>
 8011698:	1c43      	adds	r3, r0, #1
 801169a:	d124      	bne.n	80116e6 <_malloc_r+0x92>
 801169c:	230c      	movs	r3, #12
 801169e:	6033      	str	r3, [r6, #0]
 80116a0:	4630      	mov	r0, r6
 80116a2:	f000 f89c 	bl	80117de <__malloc_unlock>
 80116a6:	e7e4      	b.n	8011672 <_malloc_r+0x1e>
 80116a8:	680b      	ldr	r3, [r1, #0]
 80116aa:	1b5b      	subs	r3, r3, r5
 80116ac:	d418      	bmi.n	80116e0 <_malloc_r+0x8c>
 80116ae:	2b0b      	cmp	r3, #11
 80116b0:	d90f      	bls.n	80116d2 <_malloc_r+0x7e>
 80116b2:	600b      	str	r3, [r1, #0]
 80116b4:	50cd      	str	r5, [r1, r3]
 80116b6:	18cc      	adds	r4, r1, r3
 80116b8:	4630      	mov	r0, r6
 80116ba:	f000 f890 	bl	80117de <__malloc_unlock>
 80116be:	f104 000b 	add.w	r0, r4, #11
 80116c2:	1d23      	adds	r3, r4, #4
 80116c4:	f020 0007 	bic.w	r0, r0, #7
 80116c8:	1ac3      	subs	r3, r0, r3
 80116ca:	d0d3      	beq.n	8011674 <_malloc_r+0x20>
 80116cc:	425a      	negs	r2, r3
 80116ce:	50e2      	str	r2, [r4, r3]
 80116d0:	e7d0      	b.n	8011674 <_malloc_r+0x20>
 80116d2:	428c      	cmp	r4, r1
 80116d4:	684b      	ldr	r3, [r1, #4]
 80116d6:	bf16      	itet	ne
 80116d8:	6063      	strne	r3, [r4, #4]
 80116da:	6013      	streq	r3, [r2, #0]
 80116dc:	460c      	movne	r4, r1
 80116de:	e7eb      	b.n	80116b8 <_malloc_r+0x64>
 80116e0:	460c      	mov	r4, r1
 80116e2:	6849      	ldr	r1, [r1, #4]
 80116e4:	e7cc      	b.n	8011680 <_malloc_r+0x2c>
 80116e6:	1cc4      	adds	r4, r0, #3
 80116e8:	f024 0403 	bic.w	r4, r4, #3
 80116ec:	42a0      	cmp	r0, r4
 80116ee:	d005      	beq.n	80116fc <_malloc_r+0xa8>
 80116f0:	1a21      	subs	r1, r4, r0
 80116f2:	4630      	mov	r0, r6
 80116f4:	f000 f808 	bl	8011708 <_sbrk_r>
 80116f8:	3001      	adds	r0, #1
 80116fa:	d0cf      	beq.n	801169c <_malloc_r+0x48>
 80116fc:	6025      	str	r5, [r4, #0]
 80116fe:	e7db      	b.n	80116b8 <_malloc_r+0x64>
 8011700:	20004b5c 	.word	0x20004b5c
 8011704:	20004b60 	.word	0x20004b60

08011708 <_sbrk_r>:
 8011708:	b538      	push	{r3, r4, r5, lr}
 801170a:	4c06      	ldr	r4, [pc, #24]	; (8011724 <_sbrk_r+0x1c>)
 801170c:	2300      	movs	r3, #0
 801170e:	4605      	mov	r5, r0
 8011710:	4608      	mov	r0, r1
 8011712:	6023      	str	r3, [r4, #0]
 8011714:	f7ef fab4 	bl	8000c80 <_sbrk>
 8011718:	1c43      	adds	r3, r0, #1
 801171a:	d102      	bne.n	8011722 <_sbrk_r+0x1a>
 801171c:	6823      	ldr	r3, [r4, #0]
 801171e:	b103      	cbz	r3, 8011722 <_sbrk_r+0x1a>
 8011720:	602b      	str	r3, [r5, #0]
 8011722:	bd38      	pop	{r3, r4, r5, pc}
 8011724:	2000a0c8 	.word	0x2000a0c8

08011728 <siprintf>:
 8011728:	b40e      	push	{r1, r2, r3}
 801172a:	b500      	push	{lr}
 801172c:	b09c      	sub	sp, #112	; 0x70
 801172e:	ab1d      	add	r3, sp, #116	; 0x74
 8011730:	9002      	str	r0, [sp, #8]
 8011732:	9006      	str	r0, [sp, #24]
 8011734:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011738:	4809      	ldr	r0, [pc, #36]	; (8011760 <siprintf+0x38>)
 801173a:	9107      	str	r1, [sp, #28]
 801173c:	9104      	str	r1, [sp, #16]
 801173e:	4909      	ldr	r1, [pc, #36]	; (8011764 <siprintf+0x3c>)
 8011740:	f853 2b04 	ldr.w	r2, [r3], #4
 8011744:	9105      	str	r1, [sp, #20]
 8011746:	6800      	ldr	r0, [r0, #0]
 8011748:	9301      	str	r3, [sp, #4]
 801174a:	a902      	add	r1, sp, #8
 801174c:	f000 f8a2 	bl	8011894 <_svfiprintf_r>
 8011750:	9b02      	ldr	r3, [sp, #8]
 8011752:	2200      	movs	r2, #0
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	b01c      	add	sp, #112	; 0x70
 8011758:	f85d eb04 	ldr.w	lr, [sp], #4
 801175c:	b003      	add	sp, #12
 801175e:	4770      	bx	lr
 8011760:	20000194 	.word	0x20000194
 8011764:	ffff0208 	.word	0xffff0208

08011768 <_vsniprintf_r>:
 8011768:	b530      	push	{r4, r5, lr}
 801176a:	1e14      	subs	r4, r2, #0
 801176c:	4605      	mov	r5, r0
 801176e:	b09b      	sub	sp, #108	; 0x6c
 8011770:	4618      	mov	r0, r3
 8011772:	da05      	bge.n	8011780 <_vsniprintf_r+0x18>
 8011774:	238b      	movs	r3, #139	; 0x8b
 8011776:	602b      	str	r3, [r5, #0]
 8011778:	f04f 30ff 	mov.w	r0, #4294967295
 801177c:	b01b      	add	sp, #108	; 0x6c
 801177e:	bd30      	pop	{r4, r5, pc}
 8011780:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011784:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011788:	bf14      	ite	ne
 801178a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801178e:	4623      	moveq	r3, r4
 8011790:	9302      	str	r3, [sp, #8]
 8011792:	9305      	str	r3, [sp, #20]
 8011794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011798:	9100      	str	r1, [sp, #0]
 801179a:	9104      	str	r1, [sp, #16]
 801179c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80117a0:	4602      	mov	r2, r0
 80117a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80117a4:	4669      	mov	r1, sp
 80117a6:	4628      	mov	r0, r5
 80117a8:	f000 f874 	bl	8011894 <_svfiprintf_r>
 80117ac:	1c43      	adds	r3, r0, #1
 80117ae:	bfbc      	itt	lt
 80117b0:	238b      	movlt	r3, #139	; 0x8b
 80117b2:	602b      	strlt	r3, [r5, #0]
 80117b4:	2c00      	cmp	r4, #0
 80117b6:	d0e1      	beq.n	801177c <_vsniprintf_r+0x14>
 80117b8:	9b00      	ldr	r3, [sp, #0]
 80117ba:	2200      	movs	r2, #0
 80117bc:	701a      	strb	r2, [r3, #0]
 80117be:	e7dd      	b.n	801177c <_vsniprintf_r+0x14>

080117c0 <vsniprintf>:
 80117c0:	b507      	push	{r0, r1, r2, lr}
 80117c2:	9300      	str	r3, [sp, #0]
 80117c4:	4613      	mov	r3, r2
 80117c6:	460a      	mov	r2, r1
 80117c8:	4601      	mov	r1, r0
 80117ca:	4803      	ldr	r0, [pc, #12]	; (80117d8 <vsniprintf+0x18>)
 80117cc:	6800      	ldr	r0, [r0, #0]
 80117ce:	f7ff ffcb 	bl	8011768 <_vsniprintf_r>
 80117d2:	b003      	add	sp, #12
 80117d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80117d8:	20000194 	.word	0x20000194

080117dc <__malloc_lock>:
 80117dc:	4770      	bx	lr

080117de <__malloc_unlock>:
 80117de:	4770      	bx	lr

080117e0 <__ssputs_r>:
 80117e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117e4:	688e      	ldr	r6, [r1, #8]
 80117e6:	429e      	cmp	r6, r3
 80117e8:	4682      	mov	sl, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	4690      	mov	r8, r2
 80117ee:	4699      	mov	r9, r3
 80117f0:	d837      	bhi.n	8011862 <__ssputs_r+0x82>
 80117f2:	898a      	ldrh	r2, [r1, #12]
 80117f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80117f8:	d031      	beq.n	801185e <__ssputs_r+0x7e>
 80117fa:	6825      	ldr	r5, [r4, #0]
 80117fc:	6909      	ldr	r1, [r1, #16]
 80117fe:	1a6f      	subs	r7, r5, r1
 8011800:	6965      	ldr	r5, [r4, #20]
 8011802:	2302      	movs	r3, #2
 8011804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011808:	fb95 f5f3 	sdiv	r5, r5, r3
 801180c:	f109 0301 	add.w	r3, r9, #1
 8011810:	443b      	add	r3, r7
 8011812:	429d      	cmp	r5, r3
 8011814:	bf38      	it	cc
 8011816:	461d      	movcc	r5, r3
 8011818:	0553      	lsls	r3, r2, #21
 801181a:	d530      	bpl.n	801187e <__ssputs_r+0x9e>
 801181c:	4629      	mov	r1, r5
 801181e:	f7ff ff19 	bl	8011654 <_malloc_r>
 8011822:	4606      	mov	r6, r0
 8011824:	b950      	cbnz	r0, 801183c <__ssputs_r+0x5c>
 8011826:	230c      	movs	r3, #12
 8011828:	f8ca 3000 	str.w	r3, [sl]
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011832:	81a3      	strh	r3, [r4, #12]
 8011834:	f04f 30ff 	mov.w	r0, #4294967295
 8011838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183c:	463a      	mov	r2, r7
 801183e:	6921      	ldr	r1, [r4, #16]
 8011840:	f7ff fea6 	bl	8011590 <memcpy>
 8011844:	89a3      	ldrh	r3, [r4, #12]
 8011846:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801184a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801184e:	81a3      	strh	r3, [r4, #12]
 8011850:	6126      	str	r6, [r4, #16]
 8011852:	6165      	str	r5, [r4, #20]
 8011854:	443e      	add	r6, r7
 8011856:	1bed      	subs	r5, r5, r7
 8011858:	6026      	str	r6, [r4, #0]
 801185a:	60a5      	str	r5, [r4, #8]
 801185c:	464e      	mov	r6, r9
 801185e:	454e      	cmp	r6, r9
 8011860:	d900      	bls.n	8011864 <__ssputs_r+0x84>
 8011862:	464e      	mov	r6, r9
 8011864:	4632      	mov	r2, r6
 8011866:	4641      	mov	r1, r8
 8011868:	6820      	ldr	r0, [r4, #0]
 801186a:	f000 fa93 	bl	8011d94 <memmove>
 801186e:	68a3      	ldr	r3, [r4, #8]
 8011870:	1b9b      	subs	r3, r3, r6
 8011872:	60a3      	str	r3, [r4, #8]
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	441e      	add	r6, r3
 8011878:	6026      	str	r6, [r4, #0]
 801187a:	2000      	movs	r0, #0
 801187c:	e7dc      	b.n	8011838 <__ssputs_r+0x58>
 801187e:	462a      	mov	r2, r5
 8011880:	f000 faa1 	bl	8011dc6 <_realloc_r>
 8011884:	4606      	mov	r6, r0
 8011886:	2800      	cmp	r0, #0
 8011888:	d1e2      	bne.n	8011850 <__ssputs_r+0x70>
 801188a:	6921      	ldr	r1, [r4, #16]
 801188c:	4650      	mov	r0, sl
 801188e:	f7ff fe93 	bl	80115b8 <_free_r>
 8011892:	e7c8      	b.n	8011826 <__ssputs_r+0x46>

08011894 <_svfiprintf_r>:
 8011894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011898:	461d      	mov	r5, r3
 801189a:	898b      	ldrh	r3, [r1, #12]
 801189c:	061f      	lsls	r7, r3, #24
 801189e:	b09d      	sub	sp, #116	; 0x74
 80118a0:	4680      	mov	r8, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	4616      	mov	r6, r2
 80118a6:	d50f      	bpl.n	80118c8 <_svfiprintf_r+0x34>
 80118a8:	690b      	ldr	r3, [r1, #16]
 80118aa:	b96b      	cbnz	r3, 80118c8 <_svfiprintf_r+0x34>
 80118ac:	2140      	movs	r1, #64	; 0x40
 80118ae:	f7ff fed1 	bl	8011654 <_malloc_r>
 80118b2:	6020      	str	r0, [r4, #0]
 80118b4:	6120      	str	r0, [r4, #16]
 80118b6:	b928      	cbnz	r0, 80118c4 <_svfiprintf_r+0x30>
 80118b8:	230c      	movs	r3, #12
 80118ba:	f8c8 3000 	str.w	r3, [r8]
 80118be:	f04f 30ff 	mov.w	r0, #4294967295
 80118c2:	e0c8      	b.n	8011a56 <_svfiprintf_r+0x1c2>
 80118c4:	2340      	movs	r3, #64	; 0x40
 80118c6:	6163      	str	r3, [r4, #20]
 80118c8:	2300      	movs	r3, #0
 80118ca:	9309      	str	r3, [sp, #36]	; 0x24
 80118cc:	2320      	movs	r3, #32
 80118ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118d2:	2330      	movs	r3, #48	; 0x30
 80118d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118d8:	9503      	str	r5, [sp, #12]
 80118da:	f04f 0b01 	mov.w	fp, #1
 80118de:	4637      	mov	r7, r6
 80118e0:	463d      	mov	r5, r7
 80118e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80118e6:	b10b      	cbz	r3, 80118ec <_svfiprintf_r+0x58>
 80118e8:	2b25      	cmp	r3, #37	; 0x25
 80118ea:	d13e      	bne.n	801196a <_svfiprintf_r+0xd6>
 80118ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80118f0:	d00b      	beq.n	801190a <_svfiprintf_r+0x76>
 80118f2:	4653      	mov	r3, sl
 80118f4:	4632      	mov	r2, r6
 80118f6:	4621      	mov	r1, r4
 80118f8:	4640      	mov	r0, r8
 80118fa:	f7ff ff71 	bl	80117e0 <__ssputs_r>
 80118fe:	3001      	adds	r0, #1
 8011900:	f000 80a4 	beq.w	8011a4c <_svfiprintf_r+0x1b8>
 8011904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011906:	4453      	add	r3, sl
 8011908:	9309      	str	r3, [sp, #36]	; 0x24
 801190a:	783b      	ldrb	r3, [r7, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 809d 	beq.w	8011a4c <_svfiprintf_r+0x1b8>
 8011912:	2300      	movs	r3, #0
 8011914:	f04f 32ff 	mov.w	r2, #4294967295
 8011918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801191c:	9304      	str	r3, [sp, #16]
 801191e:	9307      	str	r3, [sp, #28]
 8011920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011924:	931a      	str	r3, [sp, #104]	; 0x68
 8011926:	462f      	mov	r7, r5
 8011928:	2205      	movs	r2, #5
 801192a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801192e:	4850      	ldr	r0, [pc, #320]	; (8011a70 <_svfiprintf_r+0x1dc>)
 8011930:	f7ee fc76 	bl	8000220 <memchr>
 8011934:	9b04      	ldr	r3, [sp, #16]
 8011936:	b9d0      	cbnz	r0, 801196e <_svfiprintf_r+0xda>
 8011938:	06d9      	lsls	r1, r3, #27
 801193a:	bf44      	itt	mi
 801193c:	2220      	movmi	r2, #32
 801193e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011942:	071a      	lsls	r2, r3, #28
 8011944:	bf44      	itt	mi
 8011946:	222b      	movmi	r2, #43	; 0x2b
 8011948:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801194c:	782a      	ldrb	r2, [r5, #0]
 801194e:	2a2a      	cmp	r2, #42	; 0x2a
 8011950:	d015      	beq.n	801197e <_svfiprintf_r+0xea>
 8011952:	9a07      	ldr	r2, [sp, #28]
 8011954:	462f      	mov	r7, r5
 8011956:	2000      	movs	r0, #0
 8011958:	250a      	movs	r5, #10
 801195a:	4639      	mov	r1, r7
 801195c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011960:	3b30      	subs	r3, #48	; 0x30
 8011962:	2b09      	cmp	r3, #9
 8011964:	d94d      	bls.n	8011a02 <_svfiprintf_r+0x16e>
 8011966:	b1b8      	cbz	r0, 8011998 <_svfiprintf_r+0x104>
 8011968:	e00f      	b.n	801198a <_svfiprintf_r+0xf6>
 801196a:	462f      	mov	r7, r5
 801196c:	e7b8      	b.n	80118e0 <_svfiprintf_r+0x4c>
 801196e:	4a40      	ldr	r2, [pc, #256]	; (8011a70 <_svfiprintf_r+0x1dc>)
 8011970:	1a80      	subs	r0, r0, r2
 8011972:	fa0b f000 	lsl.w	r0, fp, r0
 8011976:	4318      	orrs	r0, r3
 8011978:	9004      	str	r0, [sp, #16]
 801197a:	463d      	mov	r5, r7
 801197c:	e7d3      	b.n	8011926 <_svfiprintf_r+0x92>
 801197e:	9a03      	ldr	r2, [sp, #12]
 8011980:	1d11      	adds	r1, r2, #4
 8011982:	6812      	ldr	r2, [r2, #0]
 8011984:	9103      	str	r1, [sp, #12]
 8011986:	2a00      	cmp	r2, #0
 8011988:	db01      	blt.n	801198e <_svfiprintf_r+0xfa>
 801198a:	9207      	str	r2, [sp, #28]
 801198c:	e004      	b.n	8011998 <_svfiprintf_r+0x104>
 801198e:	4252      	negs	r2, r2
 8011990:	f043 0302 	orr.w	r3, r3, #2
 8011994:	9207      	str	r2, [sp, #28]
 8011996:	9304      	str	r3, [sp, #16]
 8011998:	783b      	ldrb	r3, [r7, #0]
 801199a:	2b2e      	cmp	r3, #46	; 0x2e
 801199c:	d10c      	bne.n	80119b8 <_svfiprintf_r+0x124>
 801199e:	787b      	ldrb	r3, [r7, #1]
 80119a0:	2b2a      	cmp	r3, #42	; 0x2a
 80119a2:	d133      	bne.n	8011a0c <_svfiprintf_r+0x178>
 80119a4:	9b03      	ldr	r3, [sp, #12]
 80119a6:	1d1a      	adds	r2, r3, #4
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	9203      	str	r2, [sp, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	bfb8      	it	lt
 80119b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80119b4:	3702      	adds	r7, #2
 80119b6:	9305      	str	r3, [sp, #20]
 80119b8:	4d2e      	ldr	r5, [pc, #184]	; (8011a74 <_svfiprintf_r+0x1e0>)
 80119ba:	7839      	ldrb	r1, [r7, #0]
 80119bc:	2203      	movs	r2, #3
 80119be:	4628      	mov	r0, r5
 80119c0:	f7ee fc2e 	bl	8000220 <memchr>
 80119c4:	b138      	cbz	r0, 80119d6 <_svfiprintf_r+0x142>
 80119c6:	2340      	movs	r3, #64	; 0x40
 80119c8:	1b40      	subs	r0, r0, r5
 80119ca:	fa03 f000 	lsl.w	r0, r3, r0
 80119ce:	9b04      	ldr	r3, [sp, #16]
 80119d0:	4303      	orrs	r3, r0
 80119d2:	3701      	adds	r7, #1
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	7839      	ldrb	r1, [r7, #0]
 80119d8:	4827      	ldr	r0, [pc, #156]	; (8011a78 <_svfiprintf_r+0x1e4>)
 80119da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119de:	2206      	movs	r2, #6
 80119e0:	1c7e      	adds	r6, r7, #1
 80119e2:	f7ee fc1d 	bl	8000220 <memchr>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d038      	beq.n	8011a5c <_svfiprintf_r+0x1c8>
 80119ea:	4b24      	ldr	r3, [pc, #144]	; (8011a7c <_svfiprintf_r+0x1e8>)
 80119ec:	bb13      	cbnz	r3, 8011a34 <_svfiprintf_r+0x1a0>
 80119ee:	9b03      	ldr	r3, [sp, #12]
 80119f0:	3307      	adds	r3, #7
 80119f2:	f023 0307 	bic.w	r3, r3, #7
 80119f6:	3308      	adds	r3, #8
 80119f8:	9303      	str	r3, [sp, #12]
 80119fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fc:	444b      	add	r3, r9
 80119fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011a00:	e76d      	b.n	80118de <_svfiprintf_r+0x4a>
 8011a02:	fb05 3202 	mla	r2, r5, r2, r3
 8011a06:	2001      	movs	r0, #1
 8011a08:	460f      	mov	r7, r1
 8011a0a:	e7a6      	b.n	801195a <_svfiprintf_r+0xc6>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	3701      	adds	r7, #1
 8011a10:	9305      	str	r3, [sp, #20]
 8011a12:	4619      	mov	r1, r3
 8011a14:	250a      	movs	r5, #10
 8011a16:	4638      	mov	r0, r7
 8011a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a1c:	3a30      	subs	r2, #48	; 0x30
 8011a1e:	2a09      	cmp	r2, #9
 8011a20:	d903      	bls.n	8011a2a <_svfiprintf_r+0x196>
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d0c8      	beq.n	80119b8 <_svfiprintf_r+0x124>
 8011a26:	9105      	str	r1, [sp, #20]
 8011a28:	e7c6      	b.n	80119b8 <_svfiprintf_r+0x124>
 8011a2a:	fb05 2101 	mla	r1, r5, r1, r2
 8011a2e:	2301      	movs	r3, #1
 8011a30:	4607      	mov	r7, r0
 8011a32:	e7f0      	b.n	8011a16 <_svfiprintf_r+0x182>
 8011a34:	ab03      	add	r3, sp, #12
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	4622      	mov	r2, r4
 8011a3a:	4b11      	ldr	r3, [pc, #68]	; (8011a80 <_svfiprintf_r+0x1ec>)
 8011a3c:	a904      	add	r1, sp, #16
 8011a3e:	4640      	mov	r0, r8
 8011a40:	f3af 8000 	nop.w
 8011a44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011a48:	4681      	mov	r9, r0
 8011a4a:	d1d6      	bne.n	80119fa <_svfiprintf_r+0x166>
 8011a4c:	89a3      	ldrh	r3, [r4, #12]
 8011a4e:	065b      	lsls	r3, r3, #25
 8011a50:	f53f af35 	bmi.w	80118be <_svfiprintf_r+0x2a>
 8011a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a56:	b01d      	add	sp, #116	; 0x74
 8011a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5c:	ab03      	add	r3, sp, #12
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	4622      	mov	r2, r4
 8011a62:	4b07      	ldr	r3, [pc, #28]	; (8011a80 <_svfiprintf_r+0x1ec>)
 8011a64:	a904      	add	r1, sp, #16
 8011a66:	4640      	mov	r0, r8
 8011a68:	f000 f882 	bl	8011b70 <_printf_i>
 8011a6c:	e7ea      	b.n	8011a44 <_svfiprintf_r+0x1b0>
 8011a6e:	bf00      	nop
 8011a70:	08012458 	.word	0x08012458
 8011a74:	0801245e 	.word	0x0801245e
 8011a78:	08012462 	.word	0x08012462
 8011a7c:	00000000 	.word	0x00000000
 8011a80:	080117e1 	.word	0x080117e1

08011a84 <_printf_common>:
 8011a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a88:	4691      	mov	r9, r2
 8011a8a:	461f      	mov	r7, r3
 8011a8c:	688a      	ldr	r2, [r1, #8]
 8011a8e:	690b      	ldr	r3, [r1, #16]
 8011a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a94:	4293      	cmp	r3, r2
 8011a96:	bfb8      	it	lt
 8011a98:	4613      	movlt	r3, r2
 8011a9a:	f8c9 3000 	str.w	r3, [r9]
 8011a9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011aa2:	4606      	mov	r6, r0
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	b112      	cbz	r2, 8011aae <_printf_common+0x2a>
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	f8c9 3000 	str.w	r3, [r9]
 8011aae:	6823      	ldr	r3, [r4, #0]
 8011ab0:	0699      	lsls	r1, r3, #26
 8011ab2:	bf42      	ittt	mi
 8011ab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ab8:	3302      	addmi	r3, #2
 8011aba:	f8c9 3000 	strmi.w	r3, [r9]
 8011abe:	6825      	ldr	r5, [r4, #0]
 8011ac0:	f015 0506 	ands.w	r5, r5, #6
 8011ac4:	d107      	bne.n	8011ad6 <_printf_common+0x52>
 8011ac6:	f104 0a19 	add.w	sl, r4, #25
 8011aca:	68e3      	ldr	r3, [r4, #12]
 8011acc:	f8d9 2000 	ldr.w	r2, [r9]
 8011ad0:	1a9b      	subs	r3, r3, r2
 8011ad2:	42ab      	cmp	r3, r5
 8011ad4:	dc28      	bgt.n	8011b28 <_printf_common+0xa4>
 8011ad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ada:	6822      	ldr	r2, [r4, #0]
 8011adc:	3300      	adds	r3, #0
 8011ade:	bf18      	it	ne
 8011ae0:	2301      	movne	r3, #1
 8011ae2:	0692      	lsls	r2, r2, #26
 8011ae4:	d42d      	bmi.n	8011b42 <_printf_common+0xbe>
 8011ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011aea:	4639      	mov	r1, r7
 8011aec:	4630      	mov	r0, r6
 8011aee:	47c0      	blx	r8
 8011af0:	3001      	adds	r0, #1
 8011af2:	d020      	beq.n	8011b36 <_printf_common+0xb2>
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	68e5      	ldr	r5, [r4, #12]
 8011af8:	f8d9 2000 	ldr.w	r2, [r9]
 8011afc:	f003 0306 	and.w	r3, r3, #6
 8011b00:	2b04      	cmp	r3, #4
 8011b02:	bf08      	it	eq
 8011b04:	1aad      	subeq	r5, r5, r2
 8011b06:	68a3      	ldr	r3, [r4, #8]
 8011b08:	6922      	ldr	r2, [r4, #16]
 8011b0a:	bf0c      	ite	eq
 8011b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b10:	2500      	movne	r5, #0
 8011b12:	4293      	cmp	r3, r2
 8011b14:	bfc4      	itt	gt
 8011b16:	1a9b      	subgt	r3, r3, r2
 8011b18:	18ed      	addgt	r5, r5, r3
 8011b1a:	f04f 0900 	mov.w	r9, #0
 8011b1e:	341a      	adds	r4, #26
 8011b20:	454d      	cmp	r5, r9
 8011b22:	d11a      	bne.n	8011b5a <_printf_common+0xd6>
 8011b24:	2000      	movs	r0, #0
 8011b26:	e008      	b.n	8011b3a <_printf_common+0xb6>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	4639      	mov	r1, r7
 8011b2e:	4630      	mov	r0, r6
 8011b30:	47c0      	blx	r8
 8011b32:	3001      	adds	r0, #1
 8011b34:	d103      	bne.n	8011b3e <_printf_common+0xba>
 8011b36:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b3e:	3501      	adds	r5, #1
 8011b40:	e7c3      	b.n	8011aca <_printf_common+0x46>
 8011b42:	18e1      	adds	r1, r4, r3
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	2030      	movs	r0, #48	; 0x30
 8011b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b4c:	4422      	add	r2, r4
 8011b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b56:	3302      	adds	r3, #2
 8011b58:	e7c5      	b.n	8011ae6 <_printf_common+0x62>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	4622      	mov	r2, r4
 8011b5e:	4639      	mov	r1, r7
 8011b60:	4630      	mov	r0, r6
 8011b62:	47c0      	blx	r8
 8011b64:	3001      	adds	r0, #1
 8011b66:	d0e6      	beq.n	8011b36 <_printf_common+0xb2>
 8011b68:	f109 0901 	add.w	r9, r9, #1
 8011b6c:	e7d8      	b.n	8011b20 <_printf_common+0x9c>
	...

08011b70 <_printf_i>:
 8011b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011b78:	460c      	mov	r4, r1
 8011b7a:	7e09      	ldrb	r1, [r1, #24]
 8011b7c:	b085      	sub	sp, #20
 8011b7e:	296e      	cmp	r1, #110	; 0x6e
 8011b80:	4617      	mov	r7, r2
 8011b82:	4606      	mov	r6, r0
 8011b84:	4698      	mov	r8, r3
 8011b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b88:	f000 80b3 	beq.w	8011cf2 <_printf_i+0x182>
 8011b8c:	d822      	bhi.n	8011bd4 <_printf_i+0x64>
 8011b8e:	2963      	cmp	r1, #99	; 0x63
 8011b90:	d036      	beq.n	8011c00 <_printf_i+0x90>
 8011b92:	d80a      	bhi.n	8011baa <_printf_i+0x3a>
 8011b94:	2900      	cmp	r1, #0
 8011b96:	f000 80b9 	beq.w	8011d0c <_printf_i+0x19c>
 8011b9a:	2958      	cmp	r1, #88	; 0x58
 8011b9c:	f000 8083 	beq.w	8011ca6 <_printf_i+0x136>
 8011ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ba4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011ba8:	e032      	b.n	8011c10 <_printf_i+0xa0>
 8011baa:	2964      	cmp	r1, #100	; 0x64
 8011bac:	d001      	beq.n	8011bb2 <_printf_i+0x42>
 8011bae:	2969      	cmp	r1, #105	; 0x69
 8011bb0:	d1f6      	bne.n	8011ba0 <_printf_i+0x30>
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	6813      	ldr	r3, [r2, #0]
 8011bb6:	0605      	lsls	r5, r0, #24
 8011bb8:	f103 0104 	add.w	r1, r3, #4
 8011bbc:	d52a      	bpl.n	8011c14 <_printf_i+0xa4>
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	6011      	str	r1, [r2, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da03      	bge.n	8011bce <_printf_i+0x5e>
 8011bc6:	222d      	movs	r2, #45	; 0x2d
 8011bc8:	425b      	negs	r3, r3
 8011bca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bce:	486f      	ldr	r0, [pc, #444]	; (8011d8c <_printf_i+0x21c>)
 8011bd0:	220a      	movs	r2, #10
 8011bd2:	e039      	b.n	8011c48 <_printf_i+0xd8>
 8011bd4:	2973      	cmp	r1, #115	; 0x73
 8011bd6:	f000 809d 	beq.w	8011d14 <_printf_i+0x1a4>
 8011bda:	d808      	bhi.n	8011bee <_printf_i+0x7e>
 8011bdc:	296f      	cmp	r1, #111	; 0x6f
 8011bde:	d020      	beq.n	8011c22 <_printf_i+0xb2>
 8011be0:	2970      	cmp	r1, #112	; 0x70
 8011be2:	d1dd      	bne.n	8011ba0 <_printf_i+0x30>
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	f043 0320 	orr.w	r3, r3, #32
 8011bea:	6023      	str	r3, [r4, #0]
 8011bec:	e003      	b.n	8011bf6 <_printf_i+0x86>
 8011bee:	2975      	cmp	r1, #117	; 0x75
 8011bf0:	d017      	beq.n	8011c22 <_printf_i+0xb2>
 8011bf2:	2978      	cmp	r1, #120	; 0x78
 8011bf4:	d1d4      	bne.n	8011ba0 <_printf_i+0x30>
 8011bf6:	2378      	movs	r3, #120	; 0x78
 8011bf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011bfc:	4864      	ldr	r0, [pc, #400]	; (8011d90 <_printf_i+0x220>)
 8011bfe:	e055      	b.n	8011cac <_printf_i+0x13c>
 8011c00:	6813      	ldr	r3, [r2, #0]
 8011c02:	1d19      	adds	r1, r3, #4
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	6011      	str	r1, [r2, #0]
 8011c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c10:	2301      	movs	r3, #1
 8011c12:	e08c      	b.n	8011d2e <_printf_i+0x1be>
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	6011      	str	r1, [r2, #0]
 8011c18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c1c:	bf18      	it	ne
 8011c1e:	b21b      	sxthne	r3, r3
 8011c20:	e7cf      	b.n	8011bc2 <_printf_i+0x52>
 8011c22:	6813      	ldr	r3, [r2, #0]
 8011c24:	6825      	ldr	r5, [r4, #0]
 8011c26:	1d18      	adds	r0, r3, #4
 8011c28:	6010      	str	r0, [r2, #0]
 8011c2a:	0628      	lsls	r0, r5, #24
 8011c2c:	d501      	bpl.n	8011c32 <_printf_i+0xc2>
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	e002      	b.n	8011c38 <_printf_i+0xc8>
 8011c32:	0668      	lsls	r0, r5, #25
 8011c34:	d5fb      	bpl.n	8011c2e <_printf_i+0xbe>
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	4854      	ldr	r0, [pc, #336]	; (8011d8c <_printf_i+0x21c>)
 8011c3a:	296f      	cmp	r1, #111	; 0x6f
 8011c3c:	bf14      	ite	ne
 8011c3e:	220a      	movne	r2, #10
 8011c40:	2208      	moveq	r2, #8
 8011c42:	2100      	movs	r1, #0
 8011c44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c48:	6865      	ldr	r5, [r4, #4]
 8011c4a:	60a5      	str	r5, [r4, #8]
 8011c4c:	2d00      	cmp	r5, #0
 8011c4e:	f2c0 8095 	blt.w	8011d7c <_printf_i+0x20c>
 8011c52:	6821      	ldr	r1, [r4, #0]
 8011c54:	f021 0104 	bic.w	r1, r1, #4
 8011c58:	6021      	str	r1, [r4, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d13d      	bne.n	8011cda <_printf_i+0x16a>
 8011c5e:	2d00      	cmp	r5, #0
 8011c60:	f040 808e 	bne.w	8011d80 <_printf_i+0x210>
 8011c64:	4665      	mov	r5, ip
 8011c66:	2a08      	cmp	r2, #8
 8011c68:	d10b      	bne.n	8011c82 <_printf_i+0x112>
 8011c6a:	6823      	ldr	r3, [r4, #0]
 8011c6c:	07db      	lsls	r3, r3, #31
 8011c6e:	d508      	bpl.n	8011c82 <_printf_i+0x112>
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	6862      	ldr	r2, [r4, #4]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	bfde      	ittt	le
 8011c78:	2330      	movle	r3, #48	; 0x30
 8011c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011c82:	ebac 0305 	sub.w	r3, ip, r5
 8011c86:	6123      	str	r3, [r4, #16]
 8011c88:	f8cd 8000 	str.w	r8, [sp]
 8011c8c:	463b      	mov	r3, r7
 8011c8e:	aa03      	add	r2, sp, #12
 8011c90:	4621      	mov	r1, r4
 8011c92:	4630      	mov	r0, r6
 8011c94:	f7ff fef6 	bl	8011a84 <_printf_common>
 8011c98:	3001      	adds	r0, #1
 8011c9a:	d14d      	bne.n	8011d38 <_printf_i+0x1c8>
 8011c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca0:	b005      	add	sp, #20
 8011ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ca6:	4839      	ldr	r0, [pc, #228]	; (8011d8c <_printf_i+0x21c>)
 8011ca8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011cac:	6813      	ldr	r3, [r2, #0]
 8011cae:	6821      	ldr	r1, [r4, #0]
 8011cb0:	1d1d      	adds	r5, r3, #4
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6015      	str	r5, [r2, #0]
 8011cb6:	060a      	lsls	r2, r1, #24
 8011cb8:	d50b      	bpl.n	8011cd2 <_printf_i+0x162>
 8011cba:	07ca      	lsls	r2, r1, #31
 8011cbc:	bf44      	itt	mi
 8011cbe:	f041 0120 	orrmi.w	r1, r1, #32
 8011cc2:	6021      	strmi	r1, [r4, #0]
 8011cc4:	b91b      	cbnz	r3, 8011cce <_printf_i+0x15e>
 8011cc6:	6822      	ldr	r2, [r4, #0]
 8011cc8:	f022 0220 	bic.w	r2, r2, #32
 8011ccc:	6022      	str	r2, [r4, #0]
 8011cce:	2210      	movs	r2, #16
 8011cd0:	e7b7      	b.n	8011c42 <_printf_i+0xd2>
 8011cd2:	064d      	lsls	r5, r1, #25
 8011cd4:	bf48      	it	mi
 8011cd6:	b29b      	uxthmi	r3, r3
 8011cd8:	e7ef      	b.n	8011cba <_printf_i+0x14a>
 8011cda:	4665      	mov	r5, ip
 8011cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ce0:	fb02 3311 	mls	r3, r2, r1, r3
 8011ce4:	5cc3      	ldrb	r3, [r0, r3]
 8011ce6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011cea:	460b      	mov	r3, r1
 8011cec:	2900      	cmp	r1, #0
 8011cee:	d1f5      	bne.n	8011cdc <_printf_i+0x16c>
 8011cf0:	e7b9      	b.n	8011c66 <_printf_i+0xf6>
 8011cf2:	6813      	ldr	r3, [r2, #0]
 8011cf4:	6825      	ldr	r5, [r4, #0]
 8011cf6:	6961      	ldr	r1, [r4, #20]
 8011cf8:	1d18      	adds	r0, r3, #4
 8011cfa:	6010      	str	r0, [r2, #0]
 8011cfc:	0628      	lsls	r0, r5, #24
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	d501      	bpl.n	8011d06 <_printf_i+0x196>
 8011d02:	6019      	str	r1, [r3, #0]
 8011d04:	e002      	b.n	8011d0c <_printf_i+0x19c>
 8011d06:	066a      	lsls	r2, r5, #25
 8011d08:	d5fb      	bpl.n	8011d02 <_printf_i+0x192>
 8011d0a:	8019      	strh	r1, [r3, #0]
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	6123      	str	r3, [r4, #16]
 8011d10:	4665      	mov	r5, ip
 8011d12:	e7b9      	b.n	8011c88 <_printf_i+0x118>
 8011d14:	6813      	ldr	r3, [r2, #0]
 8011d16:	1d19      	adds	r1, r3, #4
 8011d18:	6011      	str	r1, [r2, #0]
 8011d1a:	681d      	ldr	r5, [r3, #0]
 8011d1c:	6862      	ldr	r2, [r4, #4]
 8011d1e:	2100      	movs	r1, #0
 8011d20:	4628      	mov	r0, r5
 8011d22:	f7ee fa7d 	bl	8000220 <memchr>
 8011d26:	b108      	cbz	r0, 8011d2c <_printf_i+0x1bc>
 8011d28:	1b40      	subs	r0, r0, r5
 8011d2a:	6060      	str	r0, [r4, #4]
 8011d2c:	6863      	ldr	r3, [r4, #4]
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	2300      	movs	r3, #0
 8011d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d36:	e7a7      	b.n	8011c88 <_printf_i+0x118>
 8011d38:	6923      	ldr	r3, [r4, #16]
 8011d3a:	462a      	mov	r2, r5
 8011d3c:	4639      	mov	r1, r7
 8011d3e:	4630      	mov	r0, r6
 8011d40:	47c0      	blx	r8
 8011d42:	3001      	adds	r0, #1
 8011d44:	d0aa      	beq.n	8011c9c <_printf_i+0x12c>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	079b      	lsls	r3, r3, #30
 8011d4a:	d413      	bmi.n	8011d74 <_printf_i+0x204>
 8011d4c:	68e0      	ldr	r0, [r4, #12]
 8011d4e:	9b03      	ldr	r3, [sp, #12]
 8011d50:	4298      	cmp	r0, r3
 8011d52:	bfb8      	it	lt
 8011d54:	4618      	movlt	r0, r3
 8011d56:	e7a3      	b.n	8011ca0 <_printf_i+0x130>
 8011d58:	2301      	movs	r3, #1
 8011d5a:	464a      	mov	r2, r9
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	4630      	mov	r0, r6
 8011d60:	47c0      	blx	r8
 8011d62:	3001      	adds	r0, #1
 8011d64:	d09a      	beq.n	8011c9c <_printf_i+0x12c>
 8011d66:	3501      	adds	r5, #1
 8011d68:	68e3      	ldr	r3, [r4, #12]
 8011d6a:	9a03      	ldr	r2, [sp, #12]
 8011d6c:	1a9b      	subs	r3, r3, r2
 8011d6e:	42ab      	cmp	r3, r5
 8011d70:	dcf2      	bgt.n	8011d58 <_printf_i+0x1e8>
 8011d72:	e7eb      	b.n	8011d4c <_printf_i+0x1dc>
 8011d74:	2500      	movs	r5, #0
 8011d76:	f104 0919 	add.w	r9, r4, #25
 8011d7a:	e7f5      	b.n	8011d68 <_printf_i+0x1f8>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1ac      	bne.n	8011cda <_printf_i+0x16a>
 8011d80:	7803      	ldrb	r3, [r0, #0]
 8011d82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d8a:	e76c      	b.n	8011c66 <_printf_i+0xf6>
 8011d8c:	08012469 	.word	0x08012469
 8011d90:	0801247a 	.word	0x0801247a

08011d94 <memmove>:
 8011d94:	4288      	cmp	r0, r1
 8011d96:	b510      	push	{r4, lr}
 8011d98:	eb01 0302 	add.w	r3, r1, r2
 8011d9c:	d807      	bhi.n	8011dae <memmove+0x1a>
 8011d9e:	1e42      	subs	r2, r0, #1
 8011da0:	4299      	cmp	r1, r3
 8011da2:	d00a      	beq.n	8011dba <memmove+0x26>
 8011da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011da8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011dac:	e7f8      	b.n	8011da0 <memmove+0xc>
 8011dae:	4283      	cmp	r3, r0
 8011db0:	d9f5      	bls.n	8011d9e <memmove+0xa>
 8011db2:	1881      	adds	r1, r0, r2
 8011db4:	1ad2      	subs	r2, r2, r3
 8011db6:	42d3      	cmn	r3, r2
 8011db8:	d100      	bne.n	8011dbc <memmove+0x28>
 8011dba:	bd10      	pop	{r4, pc}
 8011dbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011dc0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011dc4:	e7f7      	b.n	8011db6 <memmove+0x22>

08011dc6 <_realloc_r>:
 8011dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc8:	4607      	mov	r7, r0
 8011dca:	4614      	mov	r4, r2
 8011dcc:	460e      	mov	r6, r1
 8011dce:	b921      	cbnz	r1, 8011dda <_realloc_r+0x14>
 8011dd0:	4611      	mov	r1, r2
 8011dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011dd6:	f7ff bc3d 	b.w	8011654 <_malloc_r>
 8011dda:	b922      	cbnz	r2, 8011de6 <_realloc_r+0x20>
 8011ddc:	f7ff fbec 	bl	80115b8 <_free_r>
 8011de0:	4625      	mov	r5, r4
 8011de2:	4628      	mov	r0, r5
 8011de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de6:	f000 f814 	bl	8011e12 <_malloc_usable_size_r>
 8011dea:	42a0      	cmp	r0, r4
 8011dec:	d20f      	bcs.n	8011e0e <_realloc_r+0x48>
 8011dee:	4621      	mov	r1, r4
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ff fc2f 	bl	8011654 <_malloc_r>
 8011df6:	4605      	mov	r5, r0
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	d0f2      	beq.n	8011de2 <_realloc_r+0x1c>
 8011dfc:	4631      	mov	r1, r6
 8011dfe:	4622      	mov	r2, r4
 8011e00:	f7ff fbc6 	bl	8011590 <memcpy>
 8011e04:	4631      	mov	r1, r6
 8011e06:	4638      	mov	r0, r7
 8011e08:	f7ff fbd6 	bl	80115b8 <_free_r>
 8011e0c:	e7e9      	b.n	8011de2 <_realloc_r+0x1c>
 8011e0e:	4635      	mov	r5, r6
 8011e10:	e7e7      	b.n	8011de2 <_realloc_r+0x1c>

08011e12 <_malloc_usable_size_r>:
 8011e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e16:	1f18      	subs	r0, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bfbc      	itt	lt
 8011e1c:	580b      	ldrlt	r3, [r1, r0]
 8011e1e:	18c0      	addlt	r0, r0, r3
 8011e20:	4770      	bx	lr
	...

08011e24 <_init>:
 8011e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e26:	bf00      	nop
 8011e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e2a:	bc08      	pop	{r3}
 8011e2c:	469e      	mov	lr, r3
 8011e2e:	4770      	bx	lr

08011e30 <_fini>:
 8011e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e32:	bf00      	nop
 8011e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e36:	bc08      	pop	{r3}
 8011e38:	469e      	mov	lr, r3
 8011e3a:	4770      	bx	lr
