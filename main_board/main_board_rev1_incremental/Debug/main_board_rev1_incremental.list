
main_board_rev1_incremental.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b0  080091b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080091b0  080091b0  000191b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b8  080091b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080091c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f40  2000000c  080091cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006f4c  080091cc  00026f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e3a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d75  00000000  00000000  00041e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00045bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d8  00000000  00000000  00047480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000596d  00000000  00000000  00048b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014de8  00000000  00000000  0004e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1a89  00000000  00000000  000632ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000677c  00000000  00000000  00154db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800914c 	.word	0x0800914c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	0800914c 	.word	0x0800914c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b092      	sub	sp, #72	; 0x48
 8000514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fc0a 	bl	8000d2e <HAL_Init>
  //HAL_Delay(1000);
  /* USER CODE BEGIN Init */
  //This is needed in order for line-by-line debugging to work
  //https://community.st.com/s/question/0D50X00009XkgyISAR/stm32f7-debugging-stepping-impossible-ide-jumps-into-interrupts
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 800051a:	4b24      	ldr	r3, [pc, #144]	; (80005ac <main+0x9c>)
 800051c:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <main+0xa0>)
 800051e:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <main+0x9c>)
 8000522:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <main+0xa4>)
 8000524:	60da      	str	r2, [r3, #12]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f857 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f99f 	bl	800086c <MX_GPIO_Init>
  MX_SPI1_Init();
 800052e:	f000 f8e3 	bl	80006f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000532:	f000 f91f 	bl	8000774 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000536:	f000 f95b 	bl	80007f0 <MX_SPI3_Init>
  //HAL_Delay(1000);
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800053a:	f005 fd21 	bl	8005f80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	2224      	movs	r2, #36	; 0x24
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fdf7 	bl	800913a <memset>
 800054c:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <main+0xa8>)
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
 8000556:	2318      	movs	r3, #24
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 512
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	461a      	mov	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xac>)
 8000564:	f005 fda6 	bl	80060b4 <osThreadNew>
 8000568:	4602      	mov	r2, r0
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <main+0xb0>)
 800056c:	601a      	str	r2, [r3, #0]

  /* definition and creation of taskSensRead */
  const osThreadAttr_t taskSensRead_attributes = {
 800056e:	463b      	mov	r3, r7
 8000570:	2224      	movs	r2, #36	; 0x24
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f008 fde0 	bl	800913a <memset>
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <main+0xb4>)
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <main+0xb8>)
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	235c      	movs	r3, #92	; 0x5c
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <main+0xbc>)
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	2318      	movs	r3, #24
 8000592:	61bb      	str	r3, [r7, #24]
    .stack_size = sizeof(taskSensReadBuffer),
    .cb_mem = &taskSensReadControlBlock,
    .cb_size = sizeof(taskSensReadControlBlock),
    .priority = (osPriority_t) osPriorityNormal,
  };
  taskSensReadHandle = osThreadNew(vTaskSensRead, NULL, &taskSensRead_attributes);
 8000594:	463b      	mov	r3, r7
 8000596:	461a      	mov	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <main+0xc0>)
 800059c:	f005 fd8a 	bl	80060b4 <osThreadNew>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0xc4>)
 80005a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a6:	f005 fd1f 	bl	8005fe8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <main+0x9a>
 80005ac:	e0042000 	.word	0xe0042000
 80005b0:	07e01bff 	.word	0x07e01bff
 80005b4:	00070003 	.word	0x00070003
 80005b8:	08009164 	.word	0x08009164
 80005bc:	080008cd 	.word	0x080008cd
 80005c0:	20004994 	.word	0x20004994
 80005c4:	08009170 	.word	0x08009170
 80005c8:	20004938 	.word	0x20004938
 80005cc:	20004ac4 	.word	0x20004ac4
 80005d0:	08000c7d 	.word	0x08000c7d
 80005d4:	20004934 	.word	0x20004934

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b4      	sub	sp, #208	; 0xd0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fda7 	bl	800913a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2284      	movs	r2, #132	; 0x84
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 fd98 	bl	800913a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <SystemClock_Config+0x118>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a38      	ldr	r2, [pc, #224]	; (80006f0 <SystemClock_Config+0x118>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6413      	str	r3, [r2, #64]	; 0x40
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <SystemClock_Config+0x118>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <SystemClock_Config+0x11c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062a:	4a32      	ldr	r2, [pc, #200]	; (80006f4 <SystemClock_Config+0x11c>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <SystemClock_Config+0x11c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800063e:	2303      	movs	r3, #3
 8000640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000666:	230f      	movs	r3, #15
 8000668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 144;
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000678:	2305      	movs	r3, #5
 800067a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fdb2 	bl	80021ec <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800068e:	f000 f937 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 f808 	bl	80026cc <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006c2:	f000 f91d 	bl	8000900 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80006c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80006ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 f9e4 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80006e2:	f000 f90d 	bl	8000900 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	37d0      	adds	r7, #208	; 0xd0
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_SPI1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_SPI1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_SPI1_Init+0x74>)
 8000704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_SPI1_Init+0x74>)
 8000712:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000716:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_SPI1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_SPI1_Init+0x74>)
 8000726:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800072a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SPI1_Init+0x74>)
 8000746:	2207      	movs	r2, #7
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SPI1_Init+0x74>)
 8000752:	2208      	movs	r2, #8
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_SPI1_Init+0x74>)
 8000758:	f002 fd5a 	bl	8003210 <HAL_SPI_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f8cd 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20004a60 	.word	0x20004a60
 8000770:	40013000 	.word	0x40013000

08000774 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_SPI2_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_SPI2_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_SPI2_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_SPI2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_SPI2_Init+0x74>)
 800078e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_SPI2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_SPI2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_SPI2_Init+0x74>)
 80007d4:	f002 fd1c 	bl	8003210 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f88f 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20004998 	.word	0x20004998
 80007ec:	40003800 	.word	0x40003800

080007f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_SPI3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_SPI3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_SPI3_Init+0x74>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI3_Init+0x74>)
 800080a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800080e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_SPI3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI3_Init+0x74>)
 800081e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000822:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI3_Init+0x74>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI3_Init+0x74>)
 800084a:	2208      	movs	r2, #8
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_SPI3_Init+0x74>)
 8000850:	f002 fcde 	bl	8003210 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f851 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200049fc 	.word	0x200049fc
 8000868:	40003c00 	.word	0x40003c00

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_GPIO_Init+0x5c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x5c>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_GPIO_Init+0x5c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_GPIO_Init+0x5c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <MX_GPIO_Init+0x5c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_GPIO_Init+0x5c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x5c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x5c>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_GPIO_Init+0x5c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f005 fc97 	bl	8006208 <osDelay>
 80008da:	e7fb      	b.n	80008d4 <StartDefaultTask+0x8>

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 fa2b 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010000 	.word	0x40010000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fad3 	bl	8000ef8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a5c      	ldr	r2, [pc, #368]	; (8000af0 <HAL_SPI_MspInit+0x190>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d129      	bne.n	80009d6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000982:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a5b      	ldr	r2, [pc, #364]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000996:	623b      	str	r3, [r7, #32]
 8000998:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b56      	ldr	r3, [pc, #344]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a55      	ldr	r2, [pc, #340]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80009b2:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c4:	2305      	movs	r3, #5
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	484a      	ldr	r0, [pc, #296]	; (8000af8 <HAL_SPI_MspInit+0x198>)
 80009d0:	f000 fabc 	bl	8000f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009d4:	e087      	b.n	8000ae6 <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a48      	ldr	r2, [pc, #288]	; (8000afc <HAL_SPI_MspInit+0x19c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d129      	bne.n	8000a34 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a43      	ldr	r2, [pc, #268]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	6313      	str	r3, [r2, #48]	; 0x30
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a10:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a22:	2305      	movs	r3, #5
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4834      	ldr	r0, [pc, #208]	; (8000b00 <HAL_SPI_MspInit+0x1a0>)
 8000a2e:	f000 fa8d 	bl	8000f4c <HAL_GPIO_Init>
}
 8000a32:	e058      	b.n	8000ae6 <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI3)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <HAL_SPI_MspInit+0x1a4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d153      	bne.n	8000ae6 <HAL_SPI_MspInit+0x186>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_SPI_MspInit+0x194>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a86:	2310      	movs	r3, #16
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a96:	2306      	movs	r3, #6
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4815      	ldr	r0, [pc, #84]	; (8000af8 <HAL_SPI_MspInit+0x198>)
 8000aa2:	f000 fa53 	bl	8000f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <HAL_SPI_MspInit+0x1a0>)
 8000ac2:	f000 fa43 	bl	8000f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <HAL_SPI_MspInit+0x1a0>)
 8000ae2:	f000 fa33 	bl	8000f4c <HAL_GPIO_Init>
}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40013000 	.word	0x40013000
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40003800 	.word	0x40003800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40003c00 	.word	0x40003c00

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2019      	movs	r0, #25
 8000b1e:	f000 f9eb 	bl	8000ef8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b22:	2019      	movs	r0, #25
 8000b24:	f000 fa04 	bl	8000f30 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_InitTick+0x9c>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_InitTick+0x9c>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6453      	str	r3, [r2, #68]	; 0x44
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_InitTick+0x9c>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b40:	f107 0210 	add.w	r2, r7, #16
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 ff78 	bl	8002a40 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b50:	f001 ff62 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 8000b54:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <HAL_InitTick+0xa0>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3b01      	subs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_InitTick+0xa4>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <HAL_InitTick+0xa8>)
 8000b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_InitTick+0xa4>)
 8000b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_InitTick+0xa4>)
 8000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_InitTick+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_InitTick+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_InitTick+0xa4>)
 8000b86:	f003 f885 	bl	8003c94 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d104      	bne.n	8000b9a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <HAL_InitTick+0xa4>)
 8000b92:	f003 f8b5 	bl	8003d00 <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3730      	adds	r7, #48	; 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	20006ac4 	.word	0x20006ac4
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bee:	f003 f8b1 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20006ac4 	.word	0x20006ac4

08000bfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <OTG_FS_IRQHandler+0x10>)
 8000c02:	f000 fb4d 	bl	80012a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20006b48 	.word	0x20006b48

08000c10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <SystemInit+0x5c>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <SystemInit+0x5c>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <SystemInit+0x60>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <SystemInit+0x60>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <SystemInit+0x60>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <SystemInit+0x60>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <SystemInit+0x60>)
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <SystemInit+0x64>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <SystemInit+0x60>)
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <SystemInit+0x68>)
 8000c46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <SystemInit+0x60>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <SystemInit+0x60>)
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x60>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SystemInit+0x5c>)
 8000c5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c60:	609a      	str	r2, [r3, #8]
#endif
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	40023800 	.word	0x40023800
 8000c74:	fef6ffff 	.word	0xfef6ffff
 8000c78:	24003010 	.word	0x24003010

08000c7c <vTaskSensRead>:
#include "typedef.h"
#include "usbd_cdc_if.h"
#include "usb_device.h"
#include "stm32f7xx_hal.h"

void vTaskSensRead(void *argument) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b090      	sub	sp, #64	; 0x40
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	char output_buffer[30] = { 0 };
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	221e      	movs	r2, #30
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f008 fa54 	bl	800913a <memset>

	//uint8_t baro_data[12] = { 0 };

	baro_data last_baro_data = { 0 };
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8000c9e:	f005 f9d7 	bl	8006050 <osKernelGetTickCount>
 8000ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8000ca4:	f005 f9fc 	bl	80060a0 <osKernelGetTickFreq>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <vTaskSensRead+0x58>)
 8000cac:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb0:	095b      	lsrs	r3, r3, #5
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
	for (;;) {
		tick_count += tick_update;
 8000cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb8:	4413      	add	r3, r2
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c

		HAL_SPI_Receive(&hspi3, (uint8_t*) &last_baro_data, sizeof(baro_data),
 8000cbc:	f107 010c 	add.w	r1, r7, #12
 8000cc0:	231e      	movs	r3, #30
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <vTaskSensRead+0x5c>)
 8000cc6:	f002 fb35 	bl	8003334 <HAL_SPI_Receive>
// 		sprintf(output_buffer, "P: %d; T: %d; t: %lu\n", 10,
//				15, tick_count);
//
//		CDC_Transmit_FS((uint8_t*) output_buffer, strlen(output_buffer));

		osDelayUntil(tick_count);
 8000cca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ccc:	f005 faca 	bl	8006264 <osDelayUntil>
		tick_count += tick_update;
 8000cd0:	e7f0      	b.n	8000cb4 <vTaskSensRead+0x38>
 8000cd2:	bf00      	nop
 8000cd4:	51eb851f 	.word	0x51eb851f
 8000cd8:	200049fc 	.word	0x200049fc

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ce0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ce2:	e003      	b.n	8000cec <LoopCopyDataInit>

08000ce4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ce6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ce8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cea:	3104      	adds	r1, #4

08000cec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cf4:	d3f6      	bcc.n	8000ce4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cf8:	e002      	b.n	8000d00 <LoopFillZerobss>

08000cfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cfc:	f842 3b04 	str.w	r3, [r2], #4

08000d00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d04:	d3f9      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d06:	f7ff ff83 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f008 f9e7 	bl	80090dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fbff 	bl	8000510 <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000d18:	080091c0 	.word	0x080091c0
  ldr  r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d20:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d28:	20006f4c 	.word	0x20006f4c

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>

08000d2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 f8d5 	bl	8000ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fee5 	bl	8000b08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d3e:	f7ff fde7 	bl	8000910 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	20006b04 	.word	0x20006b04

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20006b04 	.word	0x20006b04

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	05fa0000 	.word	0x05fa0000

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff4c 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0a:	f7ff ff61 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	f7ff ffb1 	bl	8000e7c <NVIC_EncodePriority>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff80 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff54 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e175      	b.n	8001258 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8164 	bne.w	8001252 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x4e>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d123      	bne.n	8000fe2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	69b9      	ldr	r1, [r7, #24]
 8000fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0203 	and.w	r2, r3, #3
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00b      	beq.n	8001036 <HAL_GPIO_Init+0xea>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102a:	2b11      	cmp	r3, #17
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b12      	cmp	r3, #18
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80be 	beq.w	8001252 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_GPIO_Init+0x320>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a64      	ldr	r2, [pc, #400]	; (800126c <HAL_GPIO_Init+0x320>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b62      	ldr	r3, [pc, #392]	; (800126c <HAL_GPIO_Init+0x320>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ee:	4a60      	ldr	r2, [pc, #384]	; (8001270 <HAL_GPIO_Init+0x324>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x328>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d037      	beq.n	800118a <HAL_GPIO_Init+0x23e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x32c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d031      	beq.n	8001186 <HAL_GPIO_Init+0x23a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <HAL_GPIO_Init+0x330>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x236>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x334>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x232>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x338>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x22e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x33c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x22a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x340>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x344>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x348>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_GPIO_Init+0x34c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x21a>
 8001162:	2309      	movs	r3, #9
 8001164:	e012      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001166:	230a      	movs	r3, #10
 8001168:	e010      	b.n	800118c <HAL_GPIO_Init+0x240>
 800116a:	2308      	movs	r3, #8
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x240>
 800116e:	2307      	movs	r3, #7
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x240>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x240>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x240>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800119c:	4934      	ldr	r1, [pc, #208]	; (8001270 <HAL_GPIO_Init+0x324>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_GPIO_Init+0x350>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ce:	4a33      	ldr	r2, [pc, #204]	; (800129c <HAL_GPIO_Init+0x350>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_GPIO_Init+0x350>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <HAL_GPIO_Init+0x350>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_GPIO_Init+0x350>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a1e      	ldr	r2, [pc, #120]	; (800129c <HAL_GPIO_Init+0x350>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_GPIO_Init+0x350>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_GPIO_Init+0x350>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae86 	bls.w	8000f6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	3724      	adds	r7, #36	; 0x24
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40023800 	.word	0x40023800
 8001270:	40013800 	.word	0x40013800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40021000 	.word	0x40021000
 8001288:	40021400 	.word	0x40021400
 800128c:	40021800 	.word	0x40021800
 8001290:	40021c00 	.word	0x40021c00
 8001294:	40022000 	.word	0x40022000
 8001298:	40022400 	.word	0x40022400
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b08d      	sub	sp, #52	; 0x34
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fe0f 	bl	8004ede <USB_GetMode>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 83bd 	bne.w	8001a42 <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fd73 	bl	8004db8 <USB_ReadInterrupts>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 83b3 	beq.w	8001a40 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fd6a 	bl	8004db8 <USB_ReadInterrupts>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d107      	bne.n	80012fe <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f002 0202 	and.w	r2, r2, #2
 80012fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fd58 	bl	8004db8 <USB_ReadInterrupts>
 8001308:	4603      	mov	r3, r0
 800130a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001312:	d17b      	bne.n	800140c <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fd5e 	bl	8004dde <USB_ReadDevAllOutEpInterrupt>
 8001322:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001324:	e06f      	b.n	8001406 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d064      	beq.n	80013fa <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fd83 	bl	8004e46 <USB_ReadDevOutEPInterrupt>
 8001340:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00c      	beq.n	8001366 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	015a      	lsls	r2, r3, #5
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	4413      	add	r3, r2
 8001354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001358:	461a      	mov	r2, r3
 800135a:	2301      	movs	r3, #1
 800135c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800135e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fddb 	bl	8001f1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00c      	beq.n	800138a <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 feda 	bl	800212c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	015a      	lsls	r2, r3, #5
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	4413      	add	r3, r2
 8001380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001384:	461a      	mov	r2, r3
 8001386:	2308      	movs	r3, #8
 8001388:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	015a      	lsls	r2, r3, #5
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	4413      	add	r3, r2
 800139c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013a0:	461a      	mov	r2, r3
 80013a2:	2310      	movs	r3, #16
 80013a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d015      	beq.n	80013dc <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013c2:	461a      	mov	r2, r3
 80013c4:	2101      	movs	r1, #1
 80013c6:	f003 fdcf 	bl	8004f68 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d6:	461a      	mov	r2, r3
 80013d8:	2320      	movs	r3, #32
 80013da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d18c      	bne.n	8001326 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fcd1 	bl	8004db8 <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001420:	f040 80c4 	bne.w	80015ac <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fcf2 	bl	8004e12 <USB_ReadDevAllInEpInterrupt>
 800142e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001434:	e0b6      	b.n	80015a4 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80ab 	beq.w	8001598 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fd18 	bl	8004e82 <USB_ReadDevInEPInterrupt>
 8001452:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d05b      	beq.n	8001516 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	2201      	movs	r2, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	43db      	mvns	r3, r3
 8001478:	69f9      	ldr	r1, [r7, #28]
 800147a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800147e:	4013      	ands	r3, r2
 8001480:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148e:	461a      	mov	r2, r3
 8001490:	2301      	movs	r3, #1
 8001492:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d11b      	bne.n	80014d4 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3348      	adds	r3, #72	; 0x48
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4403      	add	r3, r0
 80014bc:	3344      	adds	r3, #68	; 0x44
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4419      	add	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	3348      	adds	r3, #72	; 0x48
 80014d2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f007 fbc3 	bl	8008c66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d116      	bne.n	8001516 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d113      	bne.n	8001516 <HAL_PCD_IRQHandler+0x276>
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3350      	adds	r3, #80	; 0x50
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800150e:	461a      	mov	r2, r3
 8001510:	2101      	movs	r1, #1
 8001512:	f003 fd29 	bl	8004f68 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152c:	461a      	mov	r2, r3
 800152e:	2308      	movs	r3, #8
 8001530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001548:	461a      	mov	r2, r3
 800154a:	2310      	movs	r3, #16
 800154c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001564:	461a      	mov	r2, r3
 8001566:	2340      	movs	r3, #64	; 0x40
 8001568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001580:	461a      	mov	r2, r3
 8001582:	2302      	movs	r3, #2
 8001584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fc34 	bl	8001e00 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	3301      	adds	r3, #1
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f47f af45 	bne.w	8001436 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fc01 	bl	8004db8 <USB_ReadInterrupts>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015c0:	d122      	bne.n	8001608 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d108      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015e8:	2100      	movs	r1, #0
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f007 fcf6 	bl	8008fdc <HAL_PCDEx_LPM_Callback>
 80015f0:	e002      	b.n	80015f8 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f007 fbae 	bl	8008d54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fbd3 	bl	8004db8 <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800161c:	d112      	bne.n	8001644 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f007 fb6a 	bl	8008d08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001642:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fbb5 	bl	8004db8 <USB_ReadInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001658:	d121      	bne.n	800169e <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001668:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	f003 020f 	and.w	r2, r3, #15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800168e:	2101      	movs	r1, #1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f007 fca3 	bl	8008fdc <HAL_PCDEx_LPM_Callback>
 8001696:	e002      	b.n	800169e <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f007 fb35 	bl	8008d08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fb88 	bl	8004db8 <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b2:	f040 80a7 	bne.w	8001804 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2110      	movs	r1, #16
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 fde7 	bl	80042a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016da:	e036      	b.n	800174a <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	461a      	mov	r2, r3
 80016ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001700:	0151      	lsls	r1, r2, #5
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	440a      	add	r2, r1
 8001706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800170a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800170e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800171c:	461a      	mov	r2, r3
 800171e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001722:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001734:	0151      	lsls	r1, r2, #5
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	440a      	add	r2, r1
 800173a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800173e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001742:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	3301      	adds	r3, #1
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001750:	429a      	cmp	r2, r3
 8001752:	d3c3      	bcc.n	80016dc <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001762:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001766:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	2b00      	cmp	r3, #0
 800176e:	d016      	beq.n	800179e <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001780:	f043 030b 	orr.w	r3, r3, #11
 8001784:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001796:	f043 030b 	orr.w	r3, r3, #11
 800179a:	6453      	str	r3, [r2, #68]	; 0x44
 800179c:	e015      	b.n	80017ca <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ac:	4619      	mov	r1, r3
 80017ae:	f242 032b 	movw	r3, #8235	; 0x202b
 80017b2:	4313      	orrs	r3, r2
 80017b4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c4:	f043 030b 	orr.w	r3, r3, #11
 80017c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ee:	461a      	mov	r2, r3
 80017f0:	f003 fbba 	bl	8004f68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fad5 	bl	8004db8 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001818:	d12a      	bne.n	8001870 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fb6c 	bl	8004efc <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fd61 	bl	80042f0 <USB_GetDevSpeed>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d103      	bne.n	800183c <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e002      	b.n	8001842 <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681c      	ldr	r4, [r3, #0]
 8001846:	f001 f8db 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 800184a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4620      	mov	r0, r4
 8001856:	f002 fc83 	bl	8004160 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f007 fa2b 	bl	8008cb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800186e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fa9f 	bl	8004db8 <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b10      	cmp	r3, #16
 8001882:	d161      	bne.n	8001948 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0210 	bic.w	r2, r2, #16
 8001892:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 020f 	and.w	r2, r3, #15
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	3304      	adds	r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	0c5b      	lsrs	r3, r3, #17
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d124      	bne.n	800190a <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d035      	beq.n	8001938 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	6a38      	ldr	r0, [r7, #32]
 80018e0:	f003 f947 	bl	8004b72 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f0:	441a      	add	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001902:	441a      	add	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	619a      	str	r2, [r3, #24]
 8001908:	e016      	b.n	8001938 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	0c5b      	lsrs	r3, r3, #17
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	2b06      	cmp	r3, #6
 8001914:	d110      	bne.n	8001938 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800191c:	2208      	movs	r2, #8
 800191e:	4619      	mov	r1, r3
 8001920:	6a38      	ldr	r0, [r7, #32]
 8001922:	f003 f926 	bl	8004b72 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001932:	441a      	add	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0210 	orr.w	r2, r2, #16
 8001946:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fa33 	bl	8004db8 <USB_ReadInterrupts>
 8001952:	4603      	mov	r3, r0
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b08      	cmp	r3, #8
 800195a:	d10a      	bne.n	8001972 <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f007 f99c 	bl	8008c9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f002 0208 	and.w	r2, r2, #8
 8001970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fa1e 	bl	8004db8 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001986:	d10d      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f007 fa00 	bl	8008d94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fa05 	bl	8004db8 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019b8:	d10d      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f007 f9d5 	bl	8008d70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 f9ec 	bl	8004db8 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d10a      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f007 f9e3 	bl	8008db8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f9d6 	bl	8004db8 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d115      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f007 f9d3 	bl	8008dd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	e000      	b.n	8001a42 <HAL_PCD_IRQHandler+0x7a2>
      return;
 8001a40:	bf00      	nop
    }
  }
}
 8001a42:	3734      	adds	r7, #52	; 0x34
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_SetAddress+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e013      	b.n	8001a8a <HAL_PCD_SetAddress+0x42>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f976 	bl	8004d6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	70fb      	strb	r3, [r7, #3]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	803b      	strh	r3, [r7, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da0f      	bge.n	8001ad8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 020f 	and.w	r2, r3, #15
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	3338      	adds	r3, #56	; 0x38
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
 8001ad6:	e00f      	b.n	8001af8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 020f 	and.w	r2, r3, #15
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b04:	883a      	ldrh	r2, [r7, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_EP_Open+0xaa>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_Open+0xc8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fbf6 	bl	800433c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b58:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	f003 020f 	and.w	r2, r3, #15
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	3304      	adds	r3, #4
 8001b8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d102      	bne.n	8001bbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6979      	ldr	r1, [r7, #20]
 8001bd6:	f002 fe4f 	bl	8004878 <USB_EP0StartXfer>
 8001bda:	e008      	b.n	8001bee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	f002 fc2f 	bl	800444c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	3338      	adds	r3, #56	; 0x38
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2201      	movs	r2, #1
 8001c36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	f002 fe05 	bl	8004878 <USB_EP0StartXfer>
 8001c6e:	e008      	b.n	8001c82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	f002 fbe5 	bl	800444c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 020f 	and.w	r2, r3, #15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d901      	bls.n	8001caa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e050      	b.n	8001d4c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da0f      	bge.n	8001cd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	3338      	adds	r3, #56	; 0x38
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	705a      	strb	r2, [r3, #1]
 8001cd0:	e00d      	b.n	8001cee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_PCD_EP_SetStall+0x82>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e01e      	b.n	8001d4c <HAL_PCD_EP_SetStall+0xc0>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68f9      	ldr	r1, [r7, #12]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 ff51 	bl	8004bc4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10a      	bne.n	8001d42 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	b2d9      	uxtb	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f003 f913 	bl	8004f68 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d901      	bls.n	8001d72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e042      	b.n	8001df8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da0f      	bge.n	8001d9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	3338      	adds	r3, #56	; 0x38
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
 8001d98:	e00f      	b.n	8001dba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_EP_ClrStall+0x86>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e00e      	b.n	8001df8 <HAL_PCD_EP_ClrStall+0xa4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 ff59 	bl	8004ca0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	3338      	adds	r3, #56	; 0x38
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d901      	bls.n	8001e38 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e06c      	b.n	8001f12 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d902      	bls.n	8001e54 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3303      	adds	r3, #3
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e5c:	e02b      	b.n	8001eb6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d902      	bls.n	8001e7a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	68d9      	ldr	r1, [r3, #12]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4603      	mov	r3, r0
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	f002 fe35 	bl	8004b08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d809      	bhi.n	8001ee0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d203      	bcs.n	8001ee0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1be      	bne.n	8001e5e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d811      	bhi.n	8001f10 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	6939      	ldr	r1, [r7, #16]
 8001f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	333c      	adds	r3, #60	; 0x3c
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	f040 80b3 	bne.w	80020ba <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d028      	beq.n	8001fb0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a70      	ldr	r2, [pc, #448]	; (8002124 <PCD_EP_OutXfrComplete_int+0x208>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d90e      	bls.n	8001f84 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f82:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f006 fe41 	bl	8008c0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f94:	461a      	mov	r2, r3
 8001f96:	2101      	movs	r1, #1
 8001f98:	f002 ffe6 	bl	8004f68 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2308      	movs	r3, #8
 8001fac:	6093      	str	r3, [r2, #8]
 8001fae:	e0b3      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2320      	movs	r3, #32
 8001fca:	6093      	str	r3, [r2, #8]
 8001fcc:	e0a4      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 809f 	bne.w	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a51      	ldr	r2, [pc, #324]	; (8002124 <PCD_EP_OutXfrComplete_int+0x208>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d90f      	bls.n	8002002 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffe:	6093      	str	r3, [r2, #8]
 8002000:	e08a      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002014:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	0159      	lsls	r1, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	440b      	add	r3, r1
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002028:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4403      	add	r3, r0
 8002038:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800203c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4403      	add	r3, r0
 8002060:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4419      	add	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4403      	add	r3, r0
 8002076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f006 fdd4 	bl	8008c30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d144      	bne.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d138      	bne.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020b0:	461a      	mov	r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	f002 ff58 	bl	8004f68 <USB_EP0_OutStart>
 80020b8:	e02e      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <PCD_EP_OutXfrComplete_int+0x20c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d124      	bne.n	800210c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d8:	461a      	mov	r2, r3
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	e01a      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2320      	movs	r3, #32
 80020fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f006 fd93 	bl	8008c30 <HAL_PCD_DataOutStageCallback>
 800210a:	e005      	b.n	8002118 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f006 fd8c 	bl	8008c30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	4f54300a 	.word	0x4f54300a
 8002128:	4f54310a 	.word	0x4f54310a

0800212c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	333c      	adds	r3, #60	; 0x3c
 8002144:	3304      	adds	r3, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d113      	bne.n	800218a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d922      	bls.n	80021b0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01d      	beq.n	80021b0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	e012      	b.n	80021b0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <PCD_EP_OutSetupPacket_int+0xbc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10e      	bne.n	80021b0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a8:	461a      	mov	r2, r3
 80021aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f006 fd2b 	bl	8008c0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <PCD_EP_OutSetupPacket_int+0xb8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d90c      	bls.n	80021d8 <PCD_EP_OutSetupPacket_int+0xac>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021d0:	461a      	mov	r2, r3
 80021d2:	2101      	movs	r1, #1
 80021d4:	f002 fec8 	bl	8004f68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	4f54300a 	.word	0x4f54300a
 80021e8:	4f54310a 	.word	0x4f54310a

080021ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e25c      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8087 	beq.w	800231e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00c      	beq.n	8002236 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221c:	4b93      	ldr	r3, [pc, #588]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d112      	bne.n	800224e <HAL_RCC_OscConfig+0x62>
 8002228:	4b90      	ldr	r3, [pc, #576]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002234:	d10b      	bne.n	800224e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002236:	4b8d      	ldr	r3, [pc, #564]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d06c      	beq.n	800231c <HAL_RCC_OscConfig+0x130>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d168      	bne.n	800231c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e236      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x7a>
 8002258:	4b84      	ldr	r3, [pc, #528]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a83      	ldr	r2, [pc, #524]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e02e      	b.n	80022c4 <HAL_RCC_OscConfig+0xd8>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x9c>
 800226e:	4b7f      	ldr	r3, [pc, #508]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7e      	ldr	r2, [pc, #504]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7b      	ldr	r2, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0xd8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0xc0>
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a75      	ldr	r2, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b73      	ldr	r3, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a72      	ldr	r2, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xd8>
 80022ac:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6e      	ldr	r2, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b6c      	ldr	r3, [pc, #432]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6b      	ldr	r2, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fd50 	bl	8000d70 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe fd4c 	bl	8000d70 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1ea      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe8>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fd3c 	bl	8000d70 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe fd38 	bl	8000d70 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1d6      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x110>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d069      	beq.n	80023fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800232a:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b08      	cmp	r3, #8
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x190>
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x17a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e1aa      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	493d      	ldr	r1, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e040      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d023      	beq.n	80023cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fcee 	bl	8000d70 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fcea 	bl	8000d70 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e188      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4929      	ldr	r1, [pc, #164]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
 80023ca:	e018      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fcca 	bl	8000d70 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fcc6 	bl	8000d70 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e164      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d038      	beq.n	800247c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fca7 	bl	8000d70 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002426:	f7fe fca3 	bl	8000d70 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e141      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x23a>
 8002444:	e01a      	b.n	800247c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_OscConfig+0x280>)
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_RCC_OscConfig+0x280>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7fe fc8d 	bl	8000d70 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245a:	f7fe fc89 	bl	8000d70 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d903      	bls.n	8002470 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e127      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
 800246c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a4 	beq.w	80025d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b8e      	ldr	r3, [pc, #568]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	4b8b      	ldr	r3, [pc, #556]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a8a      	ldr	r2, [pc, #552]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b2:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024be:	4b82      	ldr	r3, [pc, #520]	; (80026c8 <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a81      	ldr	r2, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x4dc>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fc51 	bl	8000d70 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe fc4d 	bl	8000d70 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	; 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0eb      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <HAL_RCC_OscConfig+0x4dc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x31a>
 80024f8:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	4a71      	ldr	r2, [pc, #452]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	; 0x70
 8002504:	e02d      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x33c>
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a6c      	ldr	r2, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a69      	ldr	r2, [pc, #420]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	e01c      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d10c      	bne.n	800254a <HAL_RCC_OscConfig+0x35e>
 8002530:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a63      	ldr	r2, [pc, #396]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4a60      	ldr	r2, [pc, #384]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	e00b      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
 800254a:	4b5e      	ldr	r3, [pc, #376]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a5a      	ldr	r2, [pc, #360]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d015      	beq.n	8002596 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fc01 	bl	8000d70 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fbfd 	bl	8000d70 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e099      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ee      	beq.n	8002572 <HAL_RCC_OscConfig+0x386>
 8002594:	e014      	b.n	80025c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe fbeb 	bl	8000d70 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fbe7 	bl	8000d70 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e083      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ee      	bne.n	800259e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a3e      	ldr	r2, [pc, #248]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d06f      	beq.n	80026ba <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d067      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d149      	bne.n	8002682 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fbb9 	bl	8000d70 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fbb5 	bl	8000d70 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e053      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	019b      	lsls	r3, r3, #6
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	4313      	orrs	r3, r2
 8002646:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800264c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fb89 	bl	8000d70 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fb85 	bl	8000d70 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e023      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x476>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fb6f 	bl	8000d70 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fb6b 	bl	8000d70 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e009      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_OscConfig+0x4d8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x4aa>
 80026b4:	e001      	b.n	80026ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0ce      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b69      	ldr	r3, [pc, #420]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 020f 	bic.w	r2, r3, #15
 80026fa:	4964      	ldr	r1, [pc, #400]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b62      	ldr	r3, [pc, #392]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b6      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494c      	ldr	r1, [pc, #304]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d040      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07d      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e071      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e069      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4935      	ldr	r1, [pc, #212]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fad6 	bl	8000d70 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe fad2 	bl	8000d70 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e051      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d210      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 020f 	bic.w	r2, r3, #15
 8002806:	4921      	ldr	r1, [pc, #132]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e030      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4915      	ldr	r1, [pc, #84]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490d      	ldr	r1, [pc, #52]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f81d 	bl	800289c <HAL_RCC_GetSysClockFreq>
 8002862:	4601      	mov	r1, r0
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	fa21 f303 	lsr.w	r3, r1, r3
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_RCC_ClockConfig+0x1cc>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f944 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00
 8002890:	40023800 	.word	0x40023800
 8002894:	08009198 	.word	0x08009198
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	2300      	movs	r3, #0
 80028ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b2:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d007      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x32>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d008      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x38>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 808d 	bne.w	80029e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028ca:	60bb      	str	r3, [r7, #8]
       break;
 80028cc:	e08c      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_RCC_GetSysClockFreq+0x160>)
 80028d0:	60bb      	str	r3, [r7, #8]
      break;
 80028d2:	e089      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d4:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d023      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	f04f 0400 	mov.w	r4, #0
 80028f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	ea03 0501 	and.w	r5, r3, r1
 8002900:	ea04 0602 	and.w	r6, r4, r2
 8002904:	4a3d      	ldr	r2, [pc, #244]	; (80029fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002906:	fb02 f106 	mul.w	r1, r2, r6
 800290a:	2200      	movs	r2, #0
 800290c:	fb02 f205 	mul.w	r2, r2, r5
 8002910:	440a      	add	r2, r1
 8002912:	493a      	ldr	r1, [pc, #232]	; (80029fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002914:	fba5 0101 	umull	r0, r1, r5, r1
 8002918:	1853      	adds	r3, r2, r1
 800291a:	4619      	mov	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	461a      	mov	r2, r3
 8002924:	4623      	mov	r3, r4
 8002926:	f7fd fc73 	bl	8000210 <__aeabi_uldivmod>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e049      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	ea03 0501 	and.w	r5, r3, r1
 8002948:	ea04 0602 	and.w	r6, r4, r2
 800294c:	4629      	mov	r1, r5
 800294e:	4632      	mov	r2, r6
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	0154      	lsls	r4, r2, #5
 800295a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800295e:	014b      	lsls	r3, r1, #5
 8002960:	4619      	mov	r1, r3
 8002962:	4622      	mov	r2, r4
 8002964:	1b49      	subs	r1, r1, r5
 8002966:	eb62 0206 	sbc.w	r2, r2, r6
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	f04f 0400 	mov.w	r4, #0
 8002972:	0194      	lsls	r4, r2, #6
 8002974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002978:	018b      	lsls	r3, r1, #6
 800297a:	1a5b      	subs	r3, r3, r1
 800297c:	eb64 0402 	sbc.w	r4, r4, r2
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	00e2      	lsls	r2, r4, #3
 800298a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800298e:	00d9      	lsls	r1, r3, #3
 8002990:	460b      	mov	r3, r1
 8002992:	4614      	mov	r4, r2
 8002994:	195b      	adds	r3, r3, r5
 8002996:	eb44 0406 	adc.w	r4, r4, r6
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	02a2      	lsls	r2, r4, #10
 80029a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029a8:	0299      	lsls	r1, r3, #10
 80029aa:	460b      	mov	r3, r1
 80029ac:	4614      	mov	r4, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	4621      	mov	r1, r4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f04f 0400 	mov.w	r4, #0
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	f7fd fc28 	bl	8000210 <__aeabi_uldivmod>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	3301      	adds	r3, #1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	60bb      	str	r3, [r7, #8]
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80029e4:	60bb      	str	r3, [r7, #8]
      break;
 80029e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e8:	68bb      	ldr	r3, [r7, #8]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	017d7840 	.word	0x017d7840

08002a00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a20:	4601      	mov	r1, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	0b5b      	lsrs	r3, r3, #13
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	080091a8 	.word	0x080091a8

08002a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_GetClockConfig+0x5c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetClockConfig+0x60>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002acc:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	4964      	ldr	r1, [pc, #400]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d017      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	4959      	ldr	r1, [pc, #356]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d017      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	494a      	ldr	r1, [pc, #296]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 808b 	beq.w	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe f8e0 	bl	8000d70 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb4:	f7fe f8dc 	bl	8000d70 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e31e      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d035      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d02e      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf0:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d114      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe f8a4 	bl	8000d70 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f8a0 	bl	8000d70 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e2e0      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ee      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c5a:	d111      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	4901      	ldr	r1, [pc, #4]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	0ffffcff 	.word	0x0ffffcff
 8002c80:	4bac      	ldr	r3, [pc, #688]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4aab      	ldr	r2, [pc, #684]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	4ba9      	ldr	r3, [pc, #676]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	49a6      	ldr	r1, [pc, #664]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002caa:	4ba2      	ldr	r3, [pc, #648]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb0:	4aa0      	ldr	r2, [pc, #640]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cba:	4b9e      	ldr	r3, [pc, #632]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	499b      	ldr	r1, [pc, #620]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd8:	4b96      	ldr	r3, [pc, #600]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	4993      	ldr	r1, [pc, #588]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cfa:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d08:	498a      	ldr	r1, [pc, #552]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1c:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2a:	4982      	ldr	r1, [pc, #520]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4979      	ldr	r1, [pc, #484]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d60:	4b74      	ldr	r3, [pc, #464]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4971      	ldr	r1, [pc, #452]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d82:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f023 020c 	bic.w	r2, r3, #12
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	4968      	ldr	r1, [pc, #416]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da4:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	4960      	ldr	r1, [pc, #384]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	4957      	ldr	r1, [pc, #348]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de8:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	494f      	ldr	r1, [pc, #316]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e0a:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	4946      	ldr	r1, [pc, #280]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e2c:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	493e      	ldr	r1, [pc, #248]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	4935      	ldr	r1, [pc, #212]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e70:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7e:	492d      	ldr	r1, [pc, #180]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d011      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea0:	4924      	ldr	r1, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	490f      	ldr	r1, [pc, #60]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d005      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0a:	f040 80d8 	bne.w	80030be <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fd ff29 	bl	8000d70 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f22:	f7fd ff25 	bl	8000d70 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b64      	cmp	r3, #100	; 0x64
 8002f2e:	d903      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e167      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002f34:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f38:	4bad      	ldr	r3, [pc, #692]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ee      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d021      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11d      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f58:	4ba5      	ldr	r3, [pc, #660]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	0c1b      	lsrs	r3, r3, #16
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f66:	4ba2      	ldr	r3, [pc, #648]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	0e1b      	lsrs	r3, r3, #24
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	019a      	lsls	r2, r3, #6
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	071b      	lsls	r3, r3, #28
 8002f8c:	4998      	ldr	r1, [pc, #608]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02e      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fbe:	d129      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fc0:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fce:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd4:	0f1b      	lsrs	r3, r3, #28
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	019a      	lsls	r2, r3, #6
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	071b      	lsls	r3, r3, #28
 8002ff4:	497e      	ldr	r1, [pc, #504]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ffc:	4b7c      	ldr	r3, [pc, #496]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8002ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003002:	f023 021f 	bic.w	r2, r3, #31
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	3b01      	subs	r3, #1
 800300c:	4978      	ldr	r1, [pc, #480]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01d      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003020:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	0e1b      	lsrs	r3, r3, #24
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800302e:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	0f1b      	lsrs	r3, r3, #28
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	019a      	lsls	r2, r3, #6
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	071b      	lsls	r3, r3, #28
 8003054:	4966      	ldr	r1, [pc, #408]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d011      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	019a      	lsls	r2, r3, #6
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	071b      	lsls	r3, r3, #28
 8003084:	495a      	ldr	r1, [pc, #360]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800308c:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003098:	f7fd fe6a 	bl	8000d70 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030a0:	f7fd fe66 	bl	8000d70 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0a8      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030b2:	4b4f      	ldr	r3, [pc, #316]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 809e 	bne.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d2:	f7fd fe4d 	bl	8000d70 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030da:	f7fd fe49 	bl	8000d70 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	; 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e08b      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ec:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f8:	d0ef      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02e      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d12a      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003130:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	0f1b      	lsrs	r3, r3, #28
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	019a      	lsls	r2, r3, #6
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	061b      	lsls	r3, r3, #24
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	071b      	lsls	r3, r3, #28
 8003156:	4926      	ldr	r1, [pc, #152]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003164:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	491f      	ldr	r1, [pc, #124]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d022      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318c:	d11d      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	0f1b      	lsrs	r3, r3, #28
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	019a      	lsls	r2, r3, #6
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	061b      	lsls	r3, r3, #24
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	071b      	lsls	r3, r3, #28
 80031c2:	490b      	ldr	r1, [pc, #44]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d6:	f7fd fdcb 	bl	8000d70 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031de:	f7fd fdc7 	bl	8000d70 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d903      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e009      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80031f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003200:	d1ed      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e084      	b.n	800332c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fd fb8f 	bl	8000960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003258:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003262:	d902      	bls.n	800326a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e002      	b.n	8003270 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800326a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003278:	d007      	beq.n	800328a <HAL_SPI_Init+0x7a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003282:	d002      	beq.n	800328a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10b      	bne.n	80032aa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800329a:	d903      	bls.n	80032a4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
 80032a2:	e002      	b.n	80032aa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	ea42 0103 	orr.w	r1, r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	f003 0204 	and.w	r2, r3, #4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	ea42 0103 	orr.w	r1, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003350:	d112      	bne.n	8003378 <HAL_SPI_Receive+0x44>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2204      	movs	r2, #4
 800335e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f908 	bl	8003584 <HAL_SPI_TransmitReceive>
 8003374:	4603      	mov	r3, r0
 8003376:	e101      	b.n	800357c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_SPI_Receive+0x52>
 8003382:	2302      	movs	r3, #2
 8003384:	e0fa      	b.n	800357c <HAL_SPI_Receive+0x248>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800338e:	f7fd fcef 	bl	8000d70 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
 80033a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033a4:	e0e1      	b.n	800356a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_Receive+0x7e>
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033b6:	e0d8      	b.n	800356a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2204      	movs	r2, #4
 80033bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003402:	d908      	bls.n	8003416 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	e007      	b.n	8003426 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d107      	bne.n	8003440 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d007      	beq.n	800345e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800345c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003466:	d867      	bhi.n	8003538 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003468:	e030      	b.n	80034cc <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d117      	bne.n	80034a8 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f103 020c 	add.w	r2, r3, #12
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034a6:	e011      	b.n	80034cc <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7fd fc62 	bl	8000d70 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d803      	bhi.n	80034c0 <HAL_SPI_Receive+0x18c>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Receive+0x192>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034ca:	e04e      	b.n	800356a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1c8      	bne.n	800346a <HAL_SPI_Receive+0x136>
 80034d8:	e034      	b.n	8003544 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d115      	bne.n	8003514 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	b292      	uxth	r2, r2
 80034f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	1c9a      	adds	r2, r3, #2
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003512:	e011      	b.n	8003538 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003514:	f7fd fc2c 	bl	8000d70 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d803      	bhi.n	800352c <HAL_SPI_Receive+0x1f8>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Receive+0x1fe>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003536:	e018      	b.n	800356a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ca      	bne.n	80034da <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb05 	bl	8003b58 <SPI_EndRxTransaction>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
 8003566:	e000      	b.n	800356a <HAL_SPI_Receive+0x236>
  }

error :
 8003568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003592:	2301      	movs	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x26>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e1fb      	b.n	80039a2 <HAL_SPI_TransmitReceive+0x41e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b2:	f7fd fbdd 	bl	8000d70 <HAL_GetTick>
 80035b6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d00e      	beq.n	80035f2 <HAL_SPI_TransmitReceive+0x6e>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035da:	d106      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x66>
 80035e4:	7efb      	ldrb	r3, [r7, #27]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d003      	beq.n	80035f2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035f0:	e1cd      	b.n	800398e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x80>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x80>
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800360a:	e1c0      	b.n	800398e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b04      	cmp	r3, #4
 8003616:	d003      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2205      	movs	r2, #5
 800361c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	887a      	ldrh	r2, [r7, #2]
 8003646:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003662:	d802      	bhi.n	800366a <HAL_SPI_TransmitReceive+0xe6>
 8003664:	8a3b      	ldrh	r3, [r7, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d908      	bls.n	800367c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e007      	b.n	800368c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d007      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b2:	d97c      	bls.n	80037ae <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x13e>
 80036bc:	8a7b      	ldrh	r3, [r7, #18]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d169      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	1c9a      	adds	r2, r3, #2
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e6:	e056      	b.n	8003796 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d11b      	bne.n	800372e <HAL_SPI_TransmitReceive+0x1aa>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d016      	beq.n	800372e <HAL_SPI_TransmitReceive+0x1aa>
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	2b01      	cmp	r3, #1
 8003704:	d113      	bne.n	800372e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d11c      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x1f2>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d016      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	b292      	uxth	r2, r2
 8003754:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003772:	2301      	movs	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003776:	f7fd fafb 	bl	8000d70 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003782:	429a      	cmp	r2, r3
 8003784:	d807      	bhi.n	8003796 <HAL_SPI_TransmitReceive+0x212>
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d003      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003794:	e0fb      	b.n	800398e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1a3      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x164>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d19d      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x164>
 80037ac:	e0df      	b.n	800396e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_SPI_TransmitReceive+0x23a>
 80037b6:	8a7b      	ldrh	r3, [r7, #18]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 80cb 	bne.w	8003954 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d912      	bls.n	80037ee <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b02      	subs	r3, #2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037ec:	e0b2      	b.n	8003954 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	7812      	ldrb	r2, [r2, #0]
 80037fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003814:	e09e      	b.n	8003954 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d134      	bne.n	800388e <HAL_SPI_TransmitReceive+0x30a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02f      	beq.n	800388e <HAL_SPI_TransmitReceive+0x30a>
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	2b01      	cmp	r3, #1
 8003832:	d12c      	bne.n	800388e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d912      	bls.n	8003864 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	881a      	ldrh	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	1c9a      	adds	r2, r3, #2
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b02      	subs	r3, #2
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003862:	e012      	b.n	800388a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d148      	bne.n	800392e <HAL_SPI_TransmitReceive+0x3aa>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d042      	beq.n	800392e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d923      	bls.n	80038fc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	b292      	uxth	r2, r2
 80038c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b02      	subs	r3, #2
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d81f      	bhi.n	800392a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e016      	b.n	800392a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f103 020c 	add.w	r2, r3, #12
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800392a:	2301      	movs	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800392e:	f7fd fa1f 	bl	8000d70 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_TransmitReceive+0x3c2>
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d102      	bne.n	800394c <HAL_SPI_TransmitReceive+0x3c8>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d103      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003952:	e01c      	b.n	800398e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	f47f af5b 	bne.w	8003816 <HAL_SPI_TransmitReceive+0x292>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	f47f af54 	bne.w	8003816 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f948 	bl	8003c08 <SPI_EndRxTxTransaction>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	661a      	str	r2, [r3, #96]	; 0x60
 800398a:	e000      	b.n	800398e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800398c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800399e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ba:	e04c      	b.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d048      	beq.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80039c4:	f7fd f9d4 	bl	8000d70 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d902      	bls.n	80039da <SPI_WaitFlagStateUntilTimeout+0x30>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d13d      	bne.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f2:	d111      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	d004      	beq.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d107      	bne.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d10f      	bne.n	8003a42 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e00f      	b.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1a3      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a8c:	e057      	b.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a94:	d106      	bne.n	8003aa4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d048      	beq.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003aac:	f7fd f960 	bl	8000d70 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13d      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ada:	d111      	bne.n	8003b00 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d004      	beq.n	8003af0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aee:	d107      	bne.n	8003b00 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b08:	d10f      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e008      	b.n	8003b50 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d19f      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6c:	d111      	bne.n	8003b92 <SPI_EndRxTransaction+0x3a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d004      	beq.n	8003b82 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b80:	d107      	bne.n	8003b92 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b90:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff04 	bl	80039aa <SPI_WaitFlagStateUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e023      	b.n	8003c00 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc0:	d11d      	bne.n	8003bfe <SPI_EndRxTransaction+0xa6>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bca:	d004      	beq.n	8003bd6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d113      	bne.n	8003bfe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff4b 	bl	8003a7e <SPI_WaitFifoStateUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e000      	b.n	8003c00 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff ff2c 	bl	8003a7e <SPI_WaitFifoStateUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	f043 0220 	orr.w	r2, r3, #32
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e027      	b.n	8003c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2200      	movs	r2, #0
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff feaf 	bl	80039aa <SPI_WaitFlagStateUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e014      	b.n	8003c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff05 	bl	8003a7e <SPI_WaitFifoStateUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e000      	b.n	8003c8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e01d      	b.n	8003ce2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f815 	bl	8003cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f000 f986 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_TIM_Base_Start_IT+0x50>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d00b      	beq.n	8003d42 <HAL_TIM_Base_Start_IT+0x42>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	d007      	beq.n	8003d42 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	00010007 	.word	0x00010007

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f905 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8f7 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f908 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8db 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8cd 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8de 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0208 	mvn.w	r2, #8
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8b1 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f8a3 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8b4 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f887 	bl	8003fa6 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f879 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f88a 	bl	8003fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0201 	mvn.w	r2, #1
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc fd02 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f91a 	bl	8004138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d10e      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d107      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f90d 	bl	800414c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f838 	bl	8003fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d10e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0220 	mvn.w	r2, #32
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8cd 	bl	8004124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a40      	ldr	r2, [pc, #256]	; (80040f8 <TIM_Base_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3d      	ldr	r2, [pc, #244]	; (80040fc <TIM_Base_SetConfig+0x118>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a3c      	ldr	r2, [pc, #240]	; (8004100 <TIM_Base_SetConfig+0x11c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3b      	ldr	r2, [pc, #236]	; (8004104 <TIM_Base_SetConfig+0x120>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <TIM_Base_SetConfig+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2f      	ldr	r2, [pc, #188]	; (80040f8 <TIM_Base_SetConfig+0x114>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d027      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <TIM_Base_SetConfig+0x118>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d023      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <TIM_Base_SetConfig+0x11c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <TIM_Base_SetConfig+0x120>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a29      	ldr	r2, [pc, #164]	; (8004108 <TIM_Base_SetConfig+0x124>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a28      	ldr	r2, [pc, #160]	; (800410c <TIM_Base_SetConfig+0x128>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a27      	ldr	r2, [pc, #156]	; (8004110 <TIM_Base_SetConfig+0x12c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a26      	ldr	r2, [pc, #152]	; (8004114 <TIM_Base_SetConfig+0x130>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a25      	ldr	r2, [pc, #148]	; (8004118 <TIM_Base_SetConfig+0x134>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <TIM_Base_SetConfig+0x138>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a23      	ldr	r2, [pc, #140]	; (8004120 <TIM_Base_SetConfig+0x13c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <TIM_Base_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <TIM_Base_SetConfig+0x124>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00
 8004108:	40010400 	.word	0x40010400
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800
 8004118:	40001800 	.word	0x40001800
 800411c:	40001c00 	.word	0x40001c00
 8004120:	40002000 	.word	0x40002000

08004124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d165      	bne.n	8004240 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a41      	ldr	r2, [pc, #260]	; (800427c <USB_SetTurnaroundTime+0x11c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d906      	bls.n	800418a <USB_SetTurnaroundTime+0x2a>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a40      	ldr	r2, [pc, #256]	; (8004280 <USB_SetTurnaroundTime+0x120>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d802      	bhi.n	800418a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004184:	230f      	movs	r3, #15
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e062      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a3c      	ldr	r2, [pc, #240]	; (8004280 <USB_SetTurnaroundTime+0x120>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d906      	bls.n	80041a0 <USB_SetTurnaroundTime+0x40>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a3b      	ldr	r2, [pc, #236]	; (8004284 <USB_SetTurnaroundTime+0x124>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d802      	bhi.n	80041a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800419a:	230e      	movs	r3, #14
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e057      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a38      	ldr	r2, [pc, #224]	; (8004284 <USB_SetTurnaroundTime+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d906      	bls.n	80041b6 <USB_SetTurnaroundTime+0x56>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a37      	ldr	r2, [pc, #220]	; (8004288 <USB_SetTurnaroundTime+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d802      	bhi.n	80041b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041b0:	230d      	movs	r3, #13
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e04c      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a33      	ldr	r2, [pc, #204]	; (8004288 <USB_SetTurnaroundTime+0x128>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d906      	bls.n	80041cc <USB_SetTurnaroundTime+0x6c>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a32      	ldr	r2, [pc, #200]	; (800428c <USB_SetTurnaroundTime+0x12c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041c6:	230c      	movs	r3, #12
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e041      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a2f      	ldr	r2, [pc, #188]	; (800428c <USB_SetTurnaroundTime+0x12c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d906      	bls.n	80041e2 <USB_SetTurnaroundTime+0x82>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <USB_SetTurnaroundTime+0x130>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d802      	bhi.n	80041e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041dc:	230b      	movs	r3, #11
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e036      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <USB_SetTurnaroundTime+0x130>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d906      	bls.n	80041f8 <USB_SetTurnaroundTime+0x98>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a29      	ldr	r2, [pc, #164]	; (8004294 <USB_SetTurnaroundTime+0x134>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d802      	bhi.n	80041f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041f2:	230a      	movs	r3, #10
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e02b      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a26      	ldr	r2, [pc, #152]	; (8004294 <USB_SetTurnaroundTime+0x134>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d906      	bls.n	800420e <USB_SetTurnaroundTime+0xae>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <USB_SetTurnaroundTime+0x138>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d802      	bhi.n	800420e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004208:	2309      	movs	r3, #9
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e020      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <USB_SetTurnaroundTime+0x138>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d906      	bls.n	8004224 <USB_SetTurnaroundTime+0xc4>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <USB_SetTurnaroundTime+0x13c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d802      	bhi.n	8004224 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800421e:	2308      	movs	r3, #8
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e015      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a1d      	ldr	r2, [pc, #116]	; (800429c <USB_SetTurnaroundTime+0x13c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d906      	bls.n	800423a <USB_SetTurnaroundTime+0xda>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <USB_SetTurnaroundTime+0x140>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d802      	bhi.n	800423a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004234:	2307      	movs	r3, #7
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e00a      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800423a:	2306      	movs	r3, #6
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e007      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004246:	2309      	movs	r3, #9
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e001      	b.n	8004250 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800424c:	2309      	movs	r3, #9
 800424e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	029b      	lsls	r3, r3, #10
 8004264:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	00d8acbf 	.word	0x00d8acbf
 8004280:	00e4e1bf 	.word	0x00e4e1bf
 8004284:	00f423ff 	.word	0x00f423ff
 8004288:	0106737f 	.word	0x0106737f
 800428c:	011a499f 	.word	0x011a499f
 8004290:	01312cff 	.word	0x01312cff
 8004294:	014ca43f 	.word	0x014ca43f
 8004298:	016e35ff 	.word	0x016e35ff
 800429c:	01a6ab1f 	.word	0x01a6ab1f
 80042a0:	01e847ff 	.word	0x01e847ff

080042a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3301      	adds	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <USB_FlushTxFifo+0x48>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e006      	b.n	80042de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d0f0      	beq.n	80042be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	00030d40 	.word	0x00030d40

080042f0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0306 	and.w	r3, r3, #6
 8004308:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]
 8004314:	e00a      	b.n	800432c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d002      	beq.n	8004322 <USB_GetDevSpeed+0x32>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d102      	bne.n	8004328 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8004322:	2303      	movs	r3, #3
 8004324:	75fb      	strb	r3, [r7, #23]
 8004326:	e001      	b.n	800432c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
}
 800432e:	4618      	mov	r0, r3
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d139      	bne.n	80043cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004376:	4313      	orrs	r3, r2
 8004378:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d153      	bne.n	8004438 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	78db      	ldrb	r3, [r3, #3]
 80043aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	059b      	lsls	r3, r3, #22
 80043b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0159      	lsls	r1, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	440b      	add	r3, r1
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	4619      	mov	r1, r3
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <USB_ActivateEndpoint+0x10c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
 80043ca:	e035      	b.n	8004438 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	68f9      	ldr	r1, [r7, #12]
 80043e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d119      	bne.n	8004438 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	78db      	ldrb	r3, [r3, #3]
 800441e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004420:	430b      	orrs	r3, r1
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	440b      	add	r3, r1
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	4619      	mov	r1, r3
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <USB_ActivateEndpoint+0x10c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	10008000 	.word	0x10008000

0800444c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 812d 	bne.w	80046c8 <USB_EPStartXfer+0x27c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d132      	bne.n	80044dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	0159      	lsls	r1, r3, #5
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	440b      	add	r3, r1
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	4619      	mov	r1, r3
 8004492:	4b8a      	ldr	r3, [pc, #552]	; (80046bc <USB_EPStartXfer+0x270>)
 8004494:	4013      	ands	r3, r2
 8004496:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	0159      	lsls	r1, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	4619      	mov	r1, r3
 80044d4:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <USB_EPStartXfer+0x274>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	610b      	str	r3, [r1, #16]
 80044da:	e074      	b.n	80045c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	4619      	mov	r1, r3
 80044f8:	4b71      	ldr	r3, [pc, #452]	; (80046c0 <USB_EPStartXfer+0x274>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	0159      	lsls	r1, r3, #5
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	440b      	add	r3, r1
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	4619      	mov	r1, r3
 800451a:	4b68      	ldr	r3, [pc, #416]	; (80046bc <USB_EPStartXfer+0x270>)
 800451c:	4013      	ands	r3, r2
 800451e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6959      	ldr	r1, [r3, #20]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	440b      	add	r3, r1
 8004538:	1e59      	subs	r1, r3, #1
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004542:	04d9      	lsls	r1, r3, #19
 8004544:	4b5f      	ldr	r3, [pc, #380]	; (80046c4 <USB_EPStartXfer+0x278>)
 8004546:	400b      	ands	r3, r1
 8004548:	69b9      	ldr	r1, [r7, #24]
 800454a:	0148      	lsls	r0, r1, #5
 800454c:	69f9      	ldr	r1, [r7, #28]
 800454e:	4401      	add	r1, r0
 8004550:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456e:	69b9      	ldr	r1, [r7, #24]
 8004570:	0148      	lsls	r0, r1, #5
 8004572:	69f9      	ldr	r1, [r7, #28]
 8004574:	4401      	add	r1, r0
 8004576:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800457a:	4313      	orrs	r3, r2
 800457c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	78db      	ldrb	r3, [r3, #3]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d11f      	bne.n	80045c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10e      	bne.n	80045ea <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d022      	beq.n	800461a <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	6153      	str	r3, [r2, #20]
 80045e8:	e017      	b.n	800461a <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	78db      	ldrb	r3, [r3, #3]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d013      	beq.n	800461a <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00f      	beq.n	800461a <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	69f9      	ldr	r1, [r7, #28]
 8004612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004616:	4313      	orrs	r3, r2
 8004618:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d128      	bne.n	8004674 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d110      	bne.n	8004654 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e00f      	b.n	8004674 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004692:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	78db      	ldrb	r3, [r3, #3]
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 80e1 	bne.w	8004860 <USB_EPStartXfer+0x414>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	b298      	uxth	r0, r3
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	4603      	mov	r3, r0
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa28 	bl	8004b08 <USB_WritePacket>
 80046b8:	e0d2      	b.n	8004860 <USB_EPStartXfer+0x414>
 80046ba:	bf00      	nop
 80046bc:	e007ffff 	.word	0xe007ffff
 80046c0:	fff80000 	.word	0xfff80000
 80046c4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	0159      	lsls	r1, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	440b      	add	r3, r1
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	4619      	mov	r1, r3
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <USB_EPStartXfer+0x420>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	0159      	lsls	r1, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	440b      	add	r3, r1
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	4619      	mov	r1, r3
 8004706:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <USB_EPStartXfer+0x424>)
 8004708:	4013      	ands	r3, r2
 800470a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d123      	bne.n	800475c <USB_EPStartXfer+0x310>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472a:	69b9      	ldr	r1, [r7, #24]
 800472c:	0148      	lsls	r0, r1, #5
 800472e:	69f9      	ldr	r1, [r7, #28]
 8004730:	4401      	add	r1, r0
 8004732:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004736:	4313      	orrs	r3, r2
 8004738:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004758:	6113      	str	r3, [r2, #16]
 800475a:	e033      	b.n	80047c4 <USB_EPStartXfer+0x378>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4413      	add	r3, r2
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	8afb      	ldrh	r3, [r7, #22]
 8004782:	04d9      	lsls	r1, r3, #19
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <USB_EPStartXfer+0x428>)
 8004786:	400b      	ands	r3, r1
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	0148      	lsls	r0, r1, #5
 800478c:	69f9      	ldr	r1, [r7, #28]
 800478e:	4401      	add	r1, r0
 8004790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004794:	4313      	orrs	r3, r2
 8004796:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	8af9      	ldrh	r1, [r7, #22]
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	69b9      	ldr	r1, [r7, #24]
 80047b6:	0148      	lsls	r0, r1, #5
 80047b8:	69f9      	ldr	r1, [r7, #28]
 80047ba:	4401      	add	r1, r0
 80047bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047c0:	4313      	orrs	r3, r2
 80047c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10d      	bne.n	80047e6 <USB_EPStartXfer+0x39a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <USB_EPStartXfer+0x39a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e2:	460a      	mov	r2, r1
 80047e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d128      	bne.n	8004840 <USB_EPStartXfer+0x3f4>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d110      	bne.n	8004820 <USB_EPStartXfer+0x3d4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00f      	b.n	8004840 <USB_EPStartXfer+0x3f4>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800485e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	fff80000 	.word	0xfff80000
 8004870:	e007ffff 	.word	0xe007ffff
 8004874:	1ff80000 	.word	0x1ff80000

08004878 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 80bd 	bne.w	8004a14 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d132      	bne.n	8004908 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	0159      	lsls	r1, r3, #5
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	4619      	mov	r1, r3
 80048be:	4b90      	ldr	r3, [pc, #576]	; (8004b00 <USB_EP0StartXfer+0x288>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	4619      	mov	r1, r3
 8004900:	4b80      	ldr	r3, [pc, #512]	; (8004b04 <USB_EP0StartXfer+0x28c>)
 8004902:	4013      	ands	r3, r2
 8004904:	610b      	str	r3, [r1, #16]
 8004906:	e04e      	b.n	80049a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	440b      	add	r3, r1
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	4619      	mov	r1, r3
 8004924:	4b77      	ldr	r3, [pc, #476]	; (8004b04 <USB_EP0StartXfer+0x28c>)
 8004926:	4013      	ands	r3, r2
 8004928:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	0159      	lsls	r1, r3, #5
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	440b      	add	r3, r1
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	4619      	mov	r1, r3
 8004946:	4b6e      	ldr	r3, [pc, #440]	; (8004b00 <USB_EP0StartXfer+0x288>)
 8004948:	4013      	ands	r3, r2
 800494a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d903      	bls.n	8004960 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800497e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	0148      	lsls	r0, r1, #5
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	4401      	add	r1, r0
 800499e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049a2:	4313      	orrs	r3, r2
 80049a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10e      	bne.n	80049ca <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01e      	beq.n	80049f2 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	461a      	mov	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	6153      	str	r3, [r2, #20]
 80049c8:	e013      	b.n	80049f2 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00f      	beq.n	80049f2 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	6979      	ldr	r1, [r7, #20]
 80049ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ee:	4313      	orrs	r3, r2
 80049f0:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e06d      	b.n	8004af0 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	0159      	lsls	r1, r3, #5
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	440b      	add	r3, r1
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <USB_EP0StartXfer+0x28c>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	0159      	lsls	r1, r3, #5
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a50:	4619      	mov	r1, r3
 8004a52:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <USB_EP0StartXfer+0x288>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9e:	6939      	ldr	r1, [r7, #16]
 8004aa0:	0148      	lsls	r0, r1, #5
 8004aa2:	6979      	ldr	r1, [r7, #20]
 8004aa4:	4401      	add	r1, r0
 8004aa6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10d      	bne.n	8004ad0 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	68d9      	ldr	r1, [r3, #12]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	460a      	mov	r2, r1
 8004ace:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e007ffff 	.word	0xe007ffff
 8004b04:	fff80000 	.word	0xfff80000

08004b08 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	460b      	mov	r3, r1
 8004b18:	71fb      	strb	r3, [r7, #7]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004b26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11a      	bne.n	8004b64 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b2e:	88bb      	ldrh	r3, [r7, #4]
 8004b30:	3303      	adds	r3, #3
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e00f      	b.n	8004b5c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	031a      	lsls	r2, r3, #12
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b48:	461a      	mov	r2, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3304      	adds	r3, #4
 8004b54:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3eb      	bcc.n	8004b3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3724      	adds	r7, #36	; 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b089      	sub	sp, #36	; 0x24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	3303      	adds	r3, #3
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	e00b      	b.n	8004bae <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d3ef      	bcc.n	8004b96 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3724      	adds	r7, #36	; 0x24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d12c      	bne.n	8004c3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db12      	blt.n	8004c18 <USB_EPSetStall+0x54>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00f      	beq.n	8004c18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e02b      	b.n	8004c92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db12      	blt.n	8004c72 <USB_EPSetStall+0xae>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00f      	beq.n	8004c72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d128      	bne.n	8004d0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	78db      	ldrb	r3, [r3, #3]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d003      	beq.n	8004cec <USB_EPClearStall+0x4c>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d138      	bne.n	8004d5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e027      	b.n	8004d5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d003      	beq.n	8004d3e <USB_EPClearStall+0x9e>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	78db      	ldrb	r3, [r3, #3]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d10f      	bne.n	8004d5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	0c1b      	lsrs	r3, r3, #16
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	b29b      	uxth	r3, r3
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e74:	68bb      	ldr	r3, [r7, #8]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	01db      	lsls	r3, r3, #7
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0301 	and.w	r3, r3, #1
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	4619      	mov	r1, r3
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <USB_ActivateSetup+0x68>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0306 	and.w	r3, r3, #6
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d109      	bne.n	8004f42 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3c:	f043 0303 	orr.w	r3, r3, #3
 8004f40:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	fffff800 	.word	0xfffff800

08004f68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	460b      	mov	r3, r1
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	333c      	adds	r3, #60	; 0x3c
 8004f7e:	3304      	adds	r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4a26      	ldr	r2, [pc, #152]	; (8005020 <USB_EP0_OutStart+0xb8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d90a      	bls.n	8004fa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9c:	d101      	bne.n	8004fa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e037      	b.n	8005012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2300      	movs	r3, #0
 8004fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	f043 0318 	orr.w	r3, r3, #24
 8004fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10f      	bne.n	8005010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800500e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	4f54300a 	.word	0x4f54300a

08005024 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005046:	2302      	movs	r3, #2
 8005048:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00c      	beq.n	800506e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	4611      	mov	r1, r2
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	4611      	mov	r1, r2
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
  return USBD_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 feb1 	bl	8005e18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80050c4:	461a      	mov	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d00c      	beq.n	80050f4 <USBD_LL_SetupStage+0x56>
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d302      	bcc.n	80050e4 <USBD_LL_SetupStage+0x46>
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d010      	beq.n	8005104 <USBD_LL_SetupStage+0x66>
 80050e2:	e017      	b.n	8005114 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa05 	bl	80054fc <USBD_StdDevReq>
    break;
 80050f2:	e01a      	b.n	800512a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa67 	bl	80055d0 <USBD_StdItfReq>
    break;
 8005102:	e012      	b.n	800512a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 faa5 	bl	800565c <USBD_StdEPReq>
    break;
 8005112:	e00a      	b.n	800512a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800511a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f003 fe8a 	bl	8008e3c <USBD_LL_StallEP>
    break;
 8005128:	bf00      	nop
  }

  return USBD_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	460b      	mov	r3, r1
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005142:	7afb      	ldrb	r3, [r7, #11]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d14b      	bne.n	80051e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800514e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005156:	2b03      	cmp	r3, #3
 8005158:	d134      	bne.n	80051c4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	429a      	cmp	r2, r3
 8005164:	d919      	bls.n	800519a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800517c:	429a      	cmp	r2, r3
 800517e:	d203      	bcs.n	8005188 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8005184:	b29b      	uxth	r3, r3
 8005186:	e002      	b.n	800518e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 febc 	bl	8005f10 <USBD_CtlContinueRx>
 8005198:	e038      	b.n	800520c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d105      	bne.n	80051bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 feb9 	bl	8005f34 <USBD_CtlSendStatus>
 80051c2:	e023      	b.n	800520c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d11e      	bne.n	800520c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80051d6:	2100      	movs	r1, #0
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f003 fe2f 	bl	8008e3c <USBD_LL_StallEP>
 80051de:	e015      	b.n	800520c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d108      	bne.n	8005208 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	7afa      	ldrb	r2, [r7, #11]
 8005200:	4611      	mov	r1, r2
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	4798      	blx	r3
 8005206:	e001      	b.n	800520c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005208:	2302      	movs	r3, #2
 800520a:	e000      	b.n	800520e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	460b      	mov	r3, r1
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d17f      	bne.n	800532a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3314      	adds	r3, #20
 800522e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005236:	2b02      	cmp	r3, #2
 8005238:	d15c      	bne.n	80052f4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d915      	bls.n	8005272 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fe44 	bl	8005eec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005264:	2300      	movs	r3, #0
 8005266:	2200      	movs	r2, #0
 8005268:	2100      	movs	r1, #0
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f003 fe92 	bl	8008f94 <USBD_LL_PrepareReceive>
 8005270:	e04e      	b.n	8005310 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	6912      	ldr	r2, [r2, #16]
 800527a:	fbb3 f1f2 	udiv	r1, r3, r2
 800527e:	fb02 f201 	mul.w	r2, r2, r1
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11c      	bne.n	80052c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005290:	429a      	cmp	r2, r3
 8005292:	d316      	bcc.n	80052c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800529e:	429a      	cmp	r2, r3
 80052a0:	d20f      	bcs.n	80052c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fe20 	bl	8005eec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80052b4:	2300      	movs	r3, #0
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f003 fe6a 	bl	8008f94 <USBD_LL_PrepareReceive>
 80052c0:	e026      	b.n	8005310 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d105      	bne.n	80052e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80052e4:	2180      	movs	r1, #128	; 0x80
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f003 fda8 	bl	8008e3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fe34 	bl	8005f5a <USBD_CtlReceiveStatus>
 80052f2:	e00d      	b.n	8005310 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d004      	beq.n	8005308 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f003 fd96 	bl	8008e3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005316:	2b01      	cmp	r3, #1
 8005318:	d11d      	bne.n	8005356 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff fe82 	bl	8005024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005328:	e015      	b.n	8005356 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800533c:	2b03      	cmp	r3, #3
 800533e:	d108      	bne.n	8005352 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	7afa      	ldrb	r2, [r7, #11]
 800534a:	4611      	mov	r1, r2
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	4798      	blx	r3
 8005350:	e001      	b.n	8005356 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005352:	2302      	movs	r3, #2
 8005354:	e000      	b.n	8005358 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	2200      	movs	r2, #0
 800536c:	2100      	movs	r1, #0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f003 fd3e 	bl	8008df0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	2200      	movs	r2, #0
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f003 fd30 	bl	8008df0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2240      	movs	r2, #64	; 0x40
 800539a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6852      	ldr	r2, [r2, #4]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	4611      	mov	r1, r2
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
  }

  return USBD_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2204      	movs	r2, #4
 800541a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800545c:	2b03      	cmp	r3, #3
 800545e:	d10b      	bne.n	8005478 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	4611      	mov	r1, r2
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3

  return USBD_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005512:	2b20      	cmp	r3, #32
 8005514:	d004      	beq.n	8005520 <USBD_StdDevReq+0x24>
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d002      	beq.n	8005520 <USBD_StdDevReq+0x24>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <USBD_StdDevReq+0x34>
 800551e:	e04c      	b.n	80055ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
    break;
 800552e:	e049      	b.n	80055c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b09      	cmp	r3, #9
 8005536:	d83a      	bhi.n	80055ae <USBD_StdDevReq+0xb2>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <USBD_StdDevReq+0x44>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005591 	.word	0x08005591
 8005544:	080055a5 	.word	0x080055a5
 8005548:	080055af 	.word	0x080055af
 800554c:	0800559b 	.word	0x0800559b
 8005550:	080055af 	.word	0x080055af
 8005554:	08005573 	.word	0x08005573
 8005558:	08005569 	.word	0x08005569
 800555c:	080055af 	.word	0x080055af
 8005560:	08005587 	.word	0x08005587
 8005564:	0800557d 	.word	0x0800557d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9d2 	bl	8005914 <USBD_GetDescriptor>
      break;
 8005570:	e022      	b.n	80055b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fae3 	bl	8005b40 <USBD_SetAddress>
      break;
 800557a:	e01d      	b.n	80055b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fb20 	bl	8005bc4 <USBD_SetConfig>
      break;
 8005584:	e018      	b.n	80055b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fba9 	bl	8005ce0 <USBD_GetConfig>
      break;
 800558e:	e013      	b.n	80055b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fbd8 	bl	8005d48 <USBD_GetStatus>
      break;
 8005598:	e00e      	b.n	80055b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fc06 	bl	8005dae <USBD_SetFeature>
      break;
 80055a2:	e009      	b.n	80055b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc15 	bl	8005dd6 <USBD_ClrFeature>
      break;
 80055ac:	e004      	b.n	80055b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fc6e 	bl	8005e92 <USBD_CtlError>
      break;
 80055b6:	bf00      	nop
    }
    break;
 80055b8:	e004      	b.n	80055c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fc68 	bl	8005e92 <USBD_CtlError>
    break;
 80055c2:	bf00      	nop
  }

  return ret;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop

080055d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d003      	beq.n	80055f2 <USBD_StdItfReq+0x22>
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d001      	beq.n	80055f2 <USBD_StdItfReq+0x22>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d12a      	bne.n	8005648 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80055f8:	3b01      	subs	r3, #1
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d81d      	bhi.n	800563a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	889b      	ldrh	r3, [r3, #4]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d813      	bhi.n	8005630 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	88db      	ldrh	r3, [r3, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d110      	bne.n	8005644 <USBD_StdItfReq+0x74>
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10d      	bne.n	8005644 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fc83 	bl	8005f34 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800562e:	e009      	b.n	8005644 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fc2d 	bl	8005e92 <USBD_CtlError>
      break;
 8005638:	e004      	b.n	8005644 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fc28 	bl	8005e92 <USBD_CtlError>
      break;
 8005642:	e000      	b.n	8005646 <USBD_StdItfReq+0x76>
      break;
 8005644:	bf00      	nop
    }
    break;
 8005646:	e004      	b.n	8005652 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fc21 	bl	8005e92 <USBD_CtlError>
    break;
 8005650:	bf00      	nop
  }

  return USBD_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	889b      	ldrh	r3, [r3, #4]
 800566e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005678:	2b20      	cmp	r3, #32
 800567a:	d004      	beq.n	8005686 <USBD_StdEPReq+0x2a>
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d002      	beq.n	8005686 <USBD_StdEPReq+0x2a>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <USBD_StdEPReq+0x3a>
 8005684:	e13b      	b.n	80058fe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
    break;
 8005694:	e138      	b.n	8005908 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d10a      	bne.n	80056b8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	e128      	b.n	800590a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d03e      	beq.n	800573e <USBD_StdEPReq+0xe2>
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d002      	beq.n	80056ca <USBD_StdEPReq+0x6e>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d070      	beq.n	80057aa <USBD_StdEPReq+0x14e>
 80056c8:	e113      	b.n	80058f2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d002      	beq.n	80056da <USBD_StdEPReq+0x7e>
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d015      	beq.n	8005704 <USBD_StdEPReq+0xa8>
 80056d8:	e02b      	b.n	8005732 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <USBD_StdEPReq+0x9e>
 80056e0:	7bbb      	ldrb	r3, [r7, #14]
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d009      	beq.n	80056fa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80056e6:	7bbb      	ldrb	r3, [r7, #14]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f003 fba6 	bl	8008e3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80056f0:	2180      	movs	r1, #128	; 0x80
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f003 fba2 	bl	8008e3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80056f8:	e020      	b.n	800573c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fbc8 	bl	8005e92 <USBD_CtlError>
        break;
 8005702:	e01b      	b.n	800573c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	885b      	ldrh	r3, [r3, #2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10e      	bne.n	800572a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <USBD_StdEPReq+0xce>
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d008      	beq.n	800572a <USBD_StdEPReq+0xce>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	88db      	ldrh	r3, [r3, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f003 fb89 	bl	8008e3c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fc02 	bl	8005f34 <USBD_CtlSendStatus>

        break;
 8005730:	e004      	b.n	800573c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fbac 	bl	8005e92 <USBD_CtlError>
        break;
 800573a:	bf00      	nop
      }
      break;
 800573c:	e0de      	b.n	80058fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005744:	2b02      	cmp	r3, #2
 8005746:	d002      	beq.n	800574e <USBD_StdEPReq+0xf2>
 8005748:	2b03      	cmp	r3, #3
 800574a:	d015      	beq.n	8005778 <USBD_StdEPReq+0x11c>
 800574c:	e026      	b.n	800579c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <USBD_StdEPReq+0x112>
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d009      	beq.n	800576e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800575a:	7bbb      	ldrb	r3, [r7, #14]
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f003 fb6c 	bl	8008e3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f003 fb68 	bl	8008e3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800576c:	e01c      	b.n	80057a8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb8e 	bl	8005e92 <USBD_CtlError>
        break;
 8005776:	e017      	b.n	80057a8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	885b      	ldrh	r3, [r3, #2]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d112      	bne.n	80057a6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005786:	2b00      	cmp	r3, #0
 8005788:	d004      	beq.n	8005794 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f003 fb73 	bl	8008e7a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fbcd 	bl	8005f34 <USBD_CtlSendStatus>
        }
        break;
 800579a:	e004      	b.n	80057a6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb77 	bl	8005e92 <USBD_CtlError>
        break;
 80057a4:	e000      	b.n	80057a8 <USBD_StdEPReq+0x14c>
        break;
 80057a6:	bf00      	nop
      }
      break;
 80057a8:	e0a8      	b.n	80058fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d002      	beq.n	80057ba <USBD_StdEPReq+0x15e>
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d031      	beq.n	800581c <USBD_StdEPReq+0x1c0>
 80057b8:	e095      	b.n	80058e6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <USBD_StdEPReq+0x174>
 80057c0:	7bbb      	ldrb	r3, [r7, #14]
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d004      	beq.n	80057d0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fb62 	bl	8005e92 <USBD_CtlError>
          break;
 80057ce:	e08f      	b.n	80058f0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80057d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da0b      	bge.n	80057f0 <USBD_StdEPReq+0x194>
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	3310      	adds	r3, #16
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	3304      	adds	r3, #4
 80057ee:	e00a      	b.n	8005806 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2202      	movs	r2, #2
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb4d 	bl	8005eb4 <USBD_CtlSendData>
          break;
 800581a:	e069      	b.n	80058f0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800581c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da11      	bge.n	8005848 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	3318      	adds	r3, #24
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d117      	bne.n	800586e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fb26 	bl	8005e92 <USBD_CtlError>
            break;
 8005846:	e053      	b.n	80058f0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	f003 020f 	and.w	r2, r3, #15
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fb13 	bl	8005e92 <USBD_CtlError>
            break;
 800586c:	e040      	b.n	80058f0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800586e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da0b      	bge.n	800588e <USBD_StdEPReq+0x232>
 8005876:	7bbb      	ldrb	r3, [r7, #14]
 8005878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	3310      	adds	r3, #16
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	3304      	adds	r3, #4
 800588c:	e00a      	b.n	80058a4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <USBD_StdEPReq+0x256>
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d103      	bne.n	80058ba <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e00e      	b.n	80058d8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f003 fafa 	bl	8008eb8 <USBD_LL_IsStallEP>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	e002      	b.n	80058d8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2202      	movs	r2, #2
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fae8 	bl	8005eb4 <USBD_CtlSendData>
          break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fad2 	bl	8005e92 <USBD_CtlError>
        break;
 80058ee:	bf00      	nop
      }
      break;
 80058f0:	e004      	b.n	80058fc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 facc 	bl	8005e92 <USBD_CtlError>
      break;
 80058fa:	bf00      	nop
    }
    break;
 80058fc:	e004      	b.n	8005908 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fac6 	bl	8005e92 <USBD_CtlError>
    break;
 8005906:	bf00      	nop
  }

  return ret;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	885b      	ldrh	r3, [r3, #2]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	2b0e      	cmp	r3, #14
 800592a:	f200 80e5 	bhi.w	8005af8 <USBD_GetDescriptor+0x1e4>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <USBD_GetDescriptor+0x20>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005989 	.word	0x08005989
 8005938:	080059a1 	.word	0x080059a1
 800593c:	080059e1 	.word	0x080059e1
 8005940:	08005af9 	.word	0x08005af9
 8005944:	08005af9 	.word	0x08005af9
 8005948:	08005aa5 	.word	0x08005aa5
 800594c:	08005acb 	.word	0x08005acb
 8005950:	08005af9 	.word	0x08005af9
 8005954:	08005af9 	.word	0x08005af9
 8005958:	08005af9 	.word	0x08005af9
 800595c:	08005af9 	.word	0x08005af9
 8005960:	08005af9 	.word	0x08005af9
 8005964:	08005af9 	.word	0x08005af9
 8005968:	08005af9 	.word	0x08005af9
 800596c:	08005971 	.word	0x08005971
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	7c12      	ldrb	r2, [r2, #16]
 800597c:	f107 010a 	add.w	r1, r7, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4798      	blx	r3
 8005984:	60f8      	str	r0, [r7, #12]
    break;
 8005986:	e0bc      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	7c12      	ldrb	r2, [r2, #16]
 8005994:	f107 010a 	add.w	r1, r7, #10
 8005998:	4610      	mov	r0, r2
 800599a:	4798      	blx	r3
 800599c:	60f8      	str	r0, [r7, #12]
    break;
 800599e:	e0b0      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7c1b      	ldrb	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10d      	bne.n	80059c4 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f107 020a 	add.w	r2, r7, #10
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
 80059b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3301      	adds	r3, #1
 80059be:	2202      	movs	r2, #2
 80059c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80059c2:	e09e      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	f107 020a 	add.w	r2, r7, #10
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	2202      	movs	r2, #2
 80059dc:	701a      	strb	r2, [r3, #0]
    break;
 80059de:	e090      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	885b      	ldrh	r3, [r3, #2]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b05      	cmp	r3, #5
 80059e8:	d856      	bhi.n	8005a98 <USBD_GetDescriptor+0x184>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <USBD_GetDescriptor+0xdc>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a09 	.word	0x08005a09
 80059f4:	08005a21 	.word	0x08005a21
 80059f8:	08005a39 	.word	0x08005a39
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	08005a81 	.word	0x08005a81
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	7c12      	ldrb	r2, [r2, #16]
 8005a14:	f107 010a 	add.w	r1, r7, #10
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4798      	blx	r3
 8005a1c:	60f8      	str	r0, [r7, #12]
      break;
 8005a1e:	e040      	b.n	8005aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	7c12      	ldrb	r2, [r2, #16]
 8005a2c:	f107 010a 	add.w	r1, r7, #10
 8005a30:	4610      	mov	r0, r2
 8005a32:	4798      	blx	r3
 8005a34:	60f8      	str	r0, [r7, #12]
      break;
 8005a36:	e034      	b.n	8005aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	7c12      	ldrb	r2, [r2, #16]
 8005a44:	f107 010a 	add.w	r1, r7, #10
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
 8005a4c:	60f8      	str	r0, [r7, #12]
      break;
 8005a4e:	e028      	b.n	8005aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	7c12      	ldrb	r2, [r2, #16]
 8005a5c:	f107 010a 	add.w	r1, r7, #10
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
 8005a64:	60f8      	str	r0, [r7, #12]
      break;
 8005a66:	e01c      	b.n	8005aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	7c12      	ldrb	r2, [r2, #16]
 8005a74:	f107 010a 	add.w	r1, r7, #10
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
 8005a7c:	60f8      	str	r0, [r7, #12]
      break;
 8005a7e:	e010      	b.n	8005aa2 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	7c12      	ldrb	r2, [r2, #16]
 8005a8c:	f107 010a 	add.w	r1, r7, #10
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
 8005a94:	60f8      	str	r0, [r7, #12]
      break;
 8005a96:	e004      	b.n	8005aa2 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9f9 	bl	8005e92 <USBD_CtlError>
      return;
 8005aa0:	e04b      	b.n	8005b3a <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8005aa2:	e02e      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	7c1b      	ldrb	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	f107 020a 	add.w	r2, r7, #10
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
      break;
 8005abe:	e020      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9e5 	bl	8005e92 <USBD_CtlError>
      return;
 8005ac8:	e037      	b.n	8005b3a <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7c1b      	ldrb	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f107 020a 	add.w	r2, r7, #10
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4798      	blx	r3
 8005ae2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	2207      	movs	r2, #7
 8005aea:	701a      	strb	r2, [r3, #0]
      break;
 8005aec:	e009      	b.n	8005b02 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9ce 	bl	8005e92 <USBD_CtlError>
      return;
 8005af6:	e020      	b.n	8005b3a <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9c9 	bl	8005e92 <USBD_CtlError>
    return;
 8005b00:	e01b      	b.n	8005b3a <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d011      	beq.n	8005b2c <USBD_GetDescriptor+0x218>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	88db      	ldrh	r3, [r3, #6]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	88da      	ldrh	r2, [r3, #6]
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bf28      	it	cs
 8005b1a:	4613      	movcs	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8005b20:	897b      	ldrh	r3, [r7, #10]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9c4 	bl	8005eb4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9fd 	bl	8005f34 <USBD_CtlSendStatus>
  }
}
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	889b      	ldrh	r3, [r3, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d130      	bne.n	8005bb4 <USBD_SetAddress+0x74>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	88db      	ldrh	r3, [r3, #6]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d12c      	bne.n	8005bb4 <USBD_SetAddress+0x74>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	885b      	ldrh	r3, [r3, #2]
 8005b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b60:	d828      	bhi.n	8005bb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	885b      	ldrh	r3, [r3, #2]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d104      	bne.n	8005b82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f989 	bl	8005e92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b80:	e01c      	b.n	8005bbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	7bfa      	ldrb	r2, [r7, #15]
 8005b86:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 f9be 	bl	8008f10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f9cd 	bl	8005f34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba8:	e008      	b.n	8005bbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	e003      	b.n	8005bbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f96b 	bl	8005e92 <USBD_CtlError>
  }
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	885b      	ldrh	r3, [r3, #2]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <USBD_SetConfig+0x118>)
 8005bd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bd8:	4b40      	ldr	r3, [pc, #256]	; (8005cdc <USBD_SetConfig+0x118>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d904      	bls.n	8005bea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f955 	bl	8005e92 <USBD_CtlError>
 8005be8:	e075      	b.n	8005cd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d002      	beq.n	8005bfa <USBD_SetConfig+0x36>
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d023      	beq.n	8005c40 <USBD_SetConfig+0x7c>
 8005bf8:	e062      	b.n	8005cc0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005bfa:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <USBD_SetConfig+0x118>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01a      	beq.n	8005c38 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005c02:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c14:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fa0d 	bl	800503a <USBD_SetClassConfig>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d104      	bne.n	8005c30 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f932 	bl	8005e92 <USBD_CtlError>
          return;
 8005c2e:	e052      	b.n	8005cd6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f97f 	bl	8005f34 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005c36:	e04e      	b.n	8005cd6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f97b 	bl	8005f34 <USBD_CtlSendStatus>
      break;
 8005c3e:	e04a      	b.n	8005cd6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005c40:	4b26      	ldr	r3, [pc, #152]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d112      	bne.n	8005c6e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005c50:	4b22      	ldr	r3, [pc, #136]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005c5a:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fa09 	bl	8005078 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f964 	bl	8005f34 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005c6c:	e033      	b.n	8005cd6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005c6e:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d01d      	beq.n	8005cb8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff f9f7 	bl	8005078 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <USBD_SetConfig+0x118>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff f9cd 	bl	800503a <USBD_SetClassConfig>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d104      	bne.n	8005cb0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f8f2 	bl	8005e92 <USBD_CtlError>
          return;
 8005cae:	e012      	b.n	8005cd6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f93f 	bl	8005f34 <USBD_CtlSendStatus>
      break;
 8005cb6:	e00e      	b.n	8005cd6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f93b 	bl	8005f34 <USBD_CtlSendStatus>
      break;
 8005cbe:	e00a      	b.n	8005cd6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8e5 	bl	8005e92 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005cc8:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <USBD_SetConfig+0x118>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff f9d2 	bl	8005078 <USBD_ClrClassConfig>
      break;
 8005cd4:	bf00      	nop
    }
  }
}
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000028 	.word	0x20000028

08005ce0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	88db      	ldrh	r3, [r3, #6]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d004      	beq.n	8005cfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f8cc 	bl	8005e92 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005cfa:	e021      	b.n	8005d40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	db17      	blt.n	8005d36 <USBD_GetConfig+0x56>
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	dd02      	ble.n	8005d10 <USBD_GetConfig+0x30>
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d00b      	beq.n	8005d26 <USBD_GetConfig+0x46>
 8005d0e:	e012      	b.n	8005d36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8c8 	bl	8005eb4 <USBD_CtlSendData>
      break;
 8005d24:	e00c      	b.n	8005d40 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8c0 	bl	8005eb4 <USBD_CtlSendData>
      break;
 8005d34:	e004      	b.n	8005d40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8aa 	bl	8005e92 <USBD_CtlError>
      break;
 8005d3e:	bf00      	nop
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d81e      	bhi.n	8005d9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	88db      	ldrh	r3, [r3, #6]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d004      	beq.n	8005d70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f892 	bl	8005e92 <USBD_CtlError>
      break;
 8005d6e:	e01a      	b.n	8005da6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f043 0202 	orr.w	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	2202      	movs	r2, #2
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f88d 	bl	8005eb4 <USBD_CtlSendData>
    break;
 8005d9a:	e004      	b.n	8005da6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f877 	bl	8005e92 <USBD_CtlError>
    break;
 8005da4:	bf00      	nop
  }
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	885b      	ldrh	r3, [r3, #2]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d106      	bne.n	8005dce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8b3 	bl	8005f34 <USBD_CtlSendStatus>
  }

}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005de6:	3b01      	subs	r3, #1
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d80b      	bhi.n	8005e04 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	885b      	ldrh	r3, [r3, #2]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10c      	bne.n	8005e0e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f899 	bl	8005f34 <USBD_CtlSendStatus>
    }
    break;
 8005e02:	e004      	b.n	8005e0e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f843 	bl	8005e92 <USBD_CtlError>
    break;
 8005e0c:	e000      	b.n	8005e10 <USBD_ClrFeature+0x3a>
    break;
 8005e0e:	bf00      	nop
  }
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	785a      	ldrb	r2, [r3, #1]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	3302      	adds	r3, #2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	4413      	add	r3, r2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	3304      	adds	r3, #4
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	3305      	adds	r3, #5
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	3306      	adds	r3, #6
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3307      	adds	r3, #7
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	80da      	strh	r2, [r3, #6]

}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005e9c:	2180      	movs	r1, #128	; 0x80
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f002 ffcc 	bl	8008e3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f002 ffc8 	bl	8008e3c <USBD_LL_StallEP>
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005ed0:	88fa      	ldrh	r2, [r7, #6]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	2100      	movs	r1, #0
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f003 f836 	bl	8008f4e <USBD_LL_Transmit>

  return USBD_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	2100      	movs	r1, #0
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f003 f824 	bl	8008f4e <USBD_LL_Transmit>

  return USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	2100      	movs	r1, #0
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f003 f835 	bl	8008f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f44:	2300      	movs	r3, #0
 8005f46:	2200      	movs	r2, #0
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 ffff 	bl	8008f4e <USBD_LL_Transmit>

  return USBD_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2205      	movs	r2, #5
 8005f66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f003 f80f 	bl	8008f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f86:	f3ef 8305 	mrs	r3, IPSR
 8005f8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10f      	bne.n	8005fb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f92:	f3ef 8310 	mrs	r3, PRIMASK
 8005f96:	607b      	str	r3, [r7, #4]
  return(result);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <osKernelInitialize+0x32>
 8005f9e:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <osKernelInitialize+0x64>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d109      	bne.n	8005fba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	603b      	str	r3, [r7, #0]
  return(result);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005fb2:	f06f 0305 	mvn.w	r3, #5
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e00c      	b.n	8005fd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fba:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <osKernelInitialize+0x64>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <osKernelInitialize+0x64>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e002      	b.n	8005fd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	2000002c 	.word	0x2000002c

08005fe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffe:	607b      	str	r3, [r7, #4]
  return(result);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <osKernelStart+0x32>
 8006006:	4b11      	ldr	r3, [pc, #68]	; (800604c <osKernelStart+0x64>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d109      	bne.n	8006022 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800600e:	f3ef 8311 	mrs	r3, BASEPRI
 8006012:	603b      	str	r3, [r7, #0]
  return(result);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <osKernelStart+0x3a>
    stat = osErrorISR;
 800601a:	f06f 0305 	mvn.w	r3, #5
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e00e      	b.n	8006040 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <osKernelStart+0x64>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d107      	bne.n	800603a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <osKernelStart+0x64>)
 800602c:	2202      	movs	r2, #2
 800602e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006030:	f001 f97c 	bl	800732c <vTaskStartScheduler>
      stat = osOK;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e002      	b.n	8006040 <osKernelStart+0x58>
    } else {
      stat = osError;
 800603a:	f04f 33ff 	mov.w	r3, #4294967295
 800603e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006040:	68fb      	ldr	r3, [r7, #12]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2000002c 	.word	0x2000002c

08006050 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006056:	f3ef 8305 	mrs	r3, IPSR
 800605a:	60bb      	str	r3, [r7, #8]
  return(result);
 800605c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006062:	f3ef 8310 	mrs	r3, PRIMASK
 8006066:	607b      	str	r3, [r7, #4]
  return(result);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <osKernelGetTickCount+0x32>
 800606e:	4b0b      	ldr	r3, [pc, #44]	; (800609c <osKernelGetTickCount+0x4c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d109      	bne.n	800608a <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006076:	f3ef 8311 	mrs	r3, BASEPRI
 800607a:	603b      	str	r3, [r7, #0]
  return(result);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006082:	f001 fa77 	bl	8007574 <xTaskGetTickCountFromISR>
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	e002      	b.n	8006090 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800608a:	f001 fa63 	bl	8007554 <xTaskGetTickCount>
 800608e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006090:	68fb      	ldr	r3, [r7, #12]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000002c 	.word	0x2000002c

080060a0 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80060a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b092      	sub	sp, #72	; 0x48
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c4:	f3ef 8305 	mrs	r3, IPSR
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 8094 	bne.w	80061fa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d2:	f3ef 8310 	mrs	r3, PRIMASK
 80060d6:	623b      	str	r3, [r7, #32]
  return(result);
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 808d 	bne.w	80061fa <osThreadNew+0x146>
 80060e0:	4b48      	ldr	r3, [pc, #288]	; (8006204 <osThreadNew+0x150>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d106      	bne.n	80060f6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060e8:	f3ef 8311 	mrs	r3, BASEPRI
 80060ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8082 	bne.w	80061fa <osThreadNew+0x146>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d07e      	beq.n	80061fa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006100:	2318      	movs	r3, #24
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006104:	2300      	movs	r3, #0
 8006106:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006108:	f107 031b 	add.w	r3, r7, #27
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800610e:	f04f 33ff 	mov.w	r3, #4294967295
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d045      	beq.n	80061a6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <osThreadNew+0x74>
        name = attr->name;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <osThreadNew+0x9a>
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	2b38      	cmp	r3, #56	; 0x38
 8006140:	d805      	bhi.n	800614e <osThreadNew+0x9a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <osThreadNew+0x9e>
        return (NULL);
 800614e:	2300      	movs	r3, #0
 8006150:	e054      	b.n	80061fc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	089b      	lsrs	r3, r3, #2
 8006160:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00e      	beq.n	8006188 <osThreadNew+0xd4>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b5b      	cmp	r3, #91	; 0x5b
 8006170:	d90a      	bls.n	8006188 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <osThreadNew+0xd4>
        mem = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28
 8006186:	e010      	b.n	80061aa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10c      	bne.n	80061aa <osThreadNew+0xf6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <osThreadNew+0xf6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <osThreadNew+0xf6>
          mem = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a4:	e001      	b.n	80061aa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d110      	bne.n	80061d2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061b8:	9202      	str	r2, [sp, #8]
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fe5e 	bl	8006e88 <xTaskCreateStatic>
 80061cc:	4603      	mov	r3, r0
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e013      	b.n	80061fa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d110      	bne.n	80061fa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 feab 	bl	8006f46 <xTaskCreate>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d001      	beq.n	80061fa <osThreadNew+0x146>
          hTask = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061fa:	697b      	ldr	r3, [r7, #20]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3738      	adds	r7, #56	; 0x38
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	2000002c 	.word	0x2000002c

08006208 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006210:	f3ef 8305 	mrs	r3, IPSR
 8006214:	613b      	str	r3, [r7, #16]
  return(result);
 8006216:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10f      	bne.n	800623c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621c:	f3ef 8310 	mrs	r3, PRIMASK
 8006220:	60fb      	str	r3, [r7, #12]
  return(result);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <osDelay+0x34>
 8006228:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <osDelay+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d109      	bne.n	8006244 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006230:	f3ef 8311 	mrs	r3, BASEPRI
 8006234:	60bb      	str	r3, [r7, #8]
  return(result);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <osDelay+0x3c>
    stat = osErrorISR;
 800623c:	f06f 0305 	mvn.w	r3, #5
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	e007      	b.n	8006254 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <osDelay+0x4c>
      vTaskDelay(ticks);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 f836 	bl	80072c0 <vTaskDelay>
    }
  }

  return (stat);
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	2000002c 	.word	0x2000002c

08006264 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626c:	f3ef 8305 	mrs	r3, IPSR
 8006270:	61bb      	str	r3, [r7, #24]
  return(result);
 8006272:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006278:	f3ef 8310 	mrs	r3, PRIMASK
 800627c:	617b      	str	r3, [r7, #20]
  return(result);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <osDelayUntil+0x34>
 8006284:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <osDelayUntil+0x64>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d109      	bne.n	80062a0 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	613b      	str	r3, [r7, #16]
  return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8006298:	f06f 0305 	mvn.w	r3, #5
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	e00e      	b.n	80062be <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80062a4:	f001 f956 	bl	8007554 <xTaskGetTickCount>
 80062a8:	4603      	mov	r3, r0
 80062aa:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 ff81 	bl	80071c0 <vTaskDelayUntil>
  }

  return (stat);
 80062be:	69fb      	ldr	r3, [r7, #28]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	2000002c 	.word	0x2000002c

080062cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a07      	ldr	r2, [pc, #28]	; (80062f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80062dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4a06      	ldr	r2, [pc, #24]	; (80062fc <vApplicationGetIdleTaskMemory+0x30>)
 80062e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2280      	movs	r2, #128	; 0x80
 80062e8:	601a      	str	r2, [r3, #0]
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000030 	.word	0x20000030
 80062fc:	2000008c 	.word	0x2000008c

08006300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <vApplicationGetTimerTaskMemory+0x2c>)
 8006310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4a06      	ldr	r2, [pc, #24]	; (8006330 <vApplicationGetTimerTaskMemory+0x30>)
 8006316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800631e:	601a      	str	r2, [r3, #0]
}
 8006320:	bf00      	nop
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	2000028c 	.word	0x2000028c
 8006330:	200002e8 	.word	0x200002e8

08006334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f103 0208 	add.w	r2, r3, #8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f04f 32ff 	mov.w	r2, #4294967295
 800634c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f103 0208 	add.w	r2, r3, #8
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f103 0208 	add.w	r2, r3, #8
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d103      	bne.n	80063f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e00c      	b.n	8006410 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3308      	adds	r3, #8
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e002      	b.n	8006404 <vListInsert+0x2e>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	429a      	cmp	r2, r3
 800640e:	d2f6      	bcs.n	80063fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
}
 800643c:	bf00      	nop
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6892      	ldr	r2, [r2, #8]
 800645e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6852      	ldr	r2, [r2, #4]
 8006468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d103      	bne.n	800647c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	b672      	cpsid	i
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	b662      	cpsie	i
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	e7fe      	b.n	80064c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80064c8:	f002 f89e 	bl	8008608 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	441a      	add	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	3b01      	subs	r3, #1
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	441a      	add	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	22ff      	movs	r2, #255	; 0xff
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d114      	bne.n	8006548 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01a      	beq.n	800655c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3310      	adds	r3, #16
 800652a:	4618      	mov	r0, r3
 800652c:	f001 f9a4 	bl	8007878 <xTaskRemoveFromEventList>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d012      	beq.n	800655c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <xQueueGenericReset+0xd0>)
 8006538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	e009      	b.n	800655c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3310      	adds	r3, #16
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fef1 	bl	8006334 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3324      	adds	r3, #36	; 0x24
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff feec 	bl	8006334 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800655c:	f002 f886 	bl	800866c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006560:	2301      	movs	r3, #1
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <xQueueGenericCreateStatic+0x2c>
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
 800659a:	e7fe      	b.n	800659a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <xQueueGenericCreateStatic+0x4a>
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	b672      	cpsid	i
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	b662      	cpsie	i
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	e7fe      	b.n	80065b8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <xQueueGenericCreateStatic+0x56>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <xQueueGenericCreateStatic+0x5a>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <xQueueGenericCreateStatic+0x5c>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <xQueueGenericCreateStatic+0x78>
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	b672      	cpsid	i
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	b662      	cpsie	i
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	e7fe      	b.n	80065e6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <xQueueGenericCreateStatic+0x84>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <xQueueGenericCreateStatic+0x88>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <xQueueGenericCreateStatic+0x8a>
 80065f8:	2300      	movs	r3, #0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <xQueueGenericCreateStatic+0xa6>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	b672      	cpsid	i
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	b662      	cpsie	i
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e7fe      	b.n	8006614 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006616:	2350      	movs	r3, #80	; 0x50
 8006618:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b50      	cmp	r3, #80	; 0x50
 800661e:	d00b      	beq.n	8006638 <xQueueGenericCreateStatic+0xc8>
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	b672      	cpsid	i
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	b662      	cpsie	i
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e7fe      	b.n	8006636 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800664a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f805 	bl	8006668 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006660:	4618      	mov	r0, r3
 8006662:	3730      	adds	r7, #48	; 0x30
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e002      	b.n	800668a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006696:	2101      	movs	r1, #1
 8006698:	69b8      	ldr	r0, [r7, #24]
 800669a:	f7ff feff 	bl	800649c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	; 0x38
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066be:	2300      	movs	r3, #0
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <xQueueGenericSend+0x34>
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	b672      	cpsid	i
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	b662      	cpsie	i
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e2:	e7fe      	b.n	80066e2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <xQueueGenericSend+0x42>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueGenericSend+0x46>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericSend+0x48>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <xQueueGenericSend+0x64>
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	b672      	cpsid	i
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	b662      	cpsie	i
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
 8006712:	e7fe      	b.n	8006712 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d103      	bne.n	8006722 <xQueueGenericSend+0x72>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <xQueueGenericSend+0x76>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <xQueueGenericSend+0x78>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <xQueueGenericSend+0x94>
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	b672      	cpsid	i
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	b662      	cpsie	i
 8006740:	623b      	str	r3, [r7, #32]
 8006742:	e7fe      	b.n	8006742 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006744:	f001 fa5c 	bl	8007c00 <xTaskGetSchedulerState>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <xQueueGenericSend+0xa4>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <xQueueGenericSend+0xa8>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <xQueueGenericSend+0xaa>
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <xQueueGenericSend+0xc6>
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	b672      	cpsid	i
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	b662      	cpsie	i
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e7fe      	b.n	8006774 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006776:	f001 ff47 	bl	8008608 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <xQueueGenericSend+0xdc>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d129      	bne.n	80067e0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006792:	f000 fa0d 	bl	8006bb0 <prvCopyDataToQueue>
 8006796:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d010      	beq.n	80067c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	3324      	adds	r3, #36	; 0x24
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 f867 	bl	8007878 <xTaskRemoveFromEventList>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d013      	beq.n	80067d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067b0:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <xQueueGenericSend+0x200>)
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	e00a      	b.n	80067d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067c8:	4b39      	ldr	r3, [pc, #228]	; (80068b0 <xQueueGenericSend+0x200>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067d8:	f001 ff48 	bl	800866c <vPortExitCritical>
				return pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	e063      	b.n	80068a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067e6:	f001 ff41 	bl	800866c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e05c      	b.n	80068a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 f8a1 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006802:	f001 ff33 	bl	800866c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006806:	f000 fdf9 	bl	80073fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800680a:	f001 fefd 	bl	8008608 <vPortEnterCritical>
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006814:	b25b      	sxtb	r3, r3
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d103      	bne.n	8006824 <xQueueGenericSend+0x174>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800682a:	b25b      	sxtb	r3, r3
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d103      	bne.n	800683a <xQueueGenericSend+0x18a>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800683a:	f001 ff17 	bl	800866c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800683e:	1d3a      	adds	r2, r7, #4
 8006840:	f107 0314 	add.w	r3, r7, #20
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f001 f890 	bl	800796c <xTaskCheckForTimeOut>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d124      	bne.n	800689c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006854:	f000 faa4 	bl	8006da0 <prvIsQueueFull>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d018      	beq.n	8006890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	3310      	adds	r3, #16
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f000 ffb4 	bl	80077d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800686c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686e:	f000 fa2f 	bl	8006cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006872:	f000 fdd1 	bl	8007418 <xTaskResumeAll>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f af7c 	bne.w	8006776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <xQueueGenericSend+0x200>)
 8006880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	e772      	b.n	8006776 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006892:	f000 fa1d 	bl	8006cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006896:	f000 fdbf 	bl	8007418 <xTaskResumeAll>
 800689a:	e76c      	b.n	8006776 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800689c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800689e:	f000 fa17 	bl	8006cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068a2:	f000 fdb9 	bl	8007418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068a6:	2300      	movs	r3, #0
		}
	}
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3738      	adds	r7, #56	; 0x38
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08e      	sub	sp, #56	; 0x38
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueGenericSendFromISR+0x30>
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	b672      	cpsid	i
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	b662      	cpsie	i
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
 80068e2:	e7fe      	b.n	80068e2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSendFromISR+0x3e>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericSendFromISR+0x42>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericSendFromISR+0x44>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericSendFromISR+0x60>
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	b672      	cpsid	i
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	b662      	cpsie	i
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	e7fe      	b.n	8006912 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d103      	bne.n	8006922 <xQueueGenericSendFromISR+0x6e>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <xQueueGenericSendFromISR+0x72>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueGenericSendFromISR+0x74>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <xQueueGenericSendFromISR+0x90>
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	b672      	cpsid	i
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	b662      	cpsie	i
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	e7fe      	b.n	8006942 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006944:	f001 ff40 	bl	80087c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006948:	f3ef 8211 	mrs	r2, BASEPRI
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	b672      	cpsid	i
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	b662      	cpsie	i
 8006960:	61ba      	str	r2, [r7, #24]
 8006962:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006964:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <xQueueGenericSendFromISR+0xc6>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d12c      	bne.n	80069d4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698a:	f000 f911 	bl	8006bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800698e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d112      	bne.n	80069be <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d016      	beq.n	80069ce <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	3324      	adds	r3, #36	; 0x24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 ff67 	bl	8007878 <xTaskRemoveFromEventList>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00e      	beq.n	80069ce <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	e007      	b.n	80069ce <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069c2:	3301      	adds	r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	b25a      	sxtb	r2, r3
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069ce:	2301      	movs	r3, #1
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80069d2:	e001      	b.n	80069d8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3738      	adds	r7, #56	; 0x38
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08c      	sub	sp, #48	; 0x30
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <xQueueReceive+0x32>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	b672      	cpsid	i
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	b662      	cpsie	i
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	e7fe      	b.n	8006a1c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <xQueueReceive+0x40>
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <xQueueReceive+0x44>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <xQueueReceive+0x46>
 8006a30:	2300      	movs	r3, #0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <xQueueReceive+0x62>
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	b672      	cpsid	i
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	b662      	cpsie	i
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	e7fe      	b.n	8006a4c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a4e:	f001 f8d7 	bl	8007c00 <xTaskGetSchedulerState>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <xQueueReceive+0x72>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <xQueueReceive+0x76>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueReceive+0x78>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <xQueueReceive+0x94>
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	b672      	cpsid	i
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	b662      	cpsie	i
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e7fe      	b.n	8006a7e <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a80:	f001 fdc2 	bl	8008608 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01f      	beq.n	8006ad0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a94:	f000 f8f6 	bl	8006c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00f      	beq.n	8006ac8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	3310      	adds	r3, #16
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fee3 	bl	8007878 <xTaskRemoveFromEventList>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b3c      	ldr	r3, [pc, #240]	; (8006bac <xQueueReceive+0x1c0>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ac8:	f001 fdd0 	bl	800866c <vPortExitCritical>
				return pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e069      	b.n	8006ba4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ad6:	f001 fdc9 	bl	800866c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e062      	b.n	8006ba4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae4:	f107 0310 	add.w	r3, r7, #16
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 ff29 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006af2:	f001 fdbb 	bl	800866c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af6:	f000 fc81 	bl	80073fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006afa:	f001 fd85 	bl	8008608 <vPortEnterCritical>
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <xQueueReceive+0x128>
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <xQueueReceive+0x13e>
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b2a:	f001 fd9f 	bl	800866c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b2e:	1d3a      	adds	r2, r7, #4
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 ff18 	bl	800796c <xTaskCheckForTimeOut>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d123      	bne.n	8006b8a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b44:	f000 f916 	bl	8006d74 <prvIsQueueEmpty>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d017      	beq.n	8006b7e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	3324      	adds	r3, #36	; 0x24
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fe3c 	bl	80077d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b5e:	f000 f8b7 	bl	8006cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b62:	f000 fc59 	bl	8007418 <xTaskResumeAll>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d189      	bne.n	8006a80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <xQueueReceive+0x1c0>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	e780      	b.n	8006a80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b80:	f000 f8a6 	bl	8006cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b84:	f000 fc48 	bl	8007418 <xTaskResumeAll>
 8006b88:	e77a      	b.n	8006a80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 f8a0 	bl	8006cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b90:	f000 fc42 	bl	8007418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b96:	f000 f8ed 	bl	8006d74 <prvIsQueueEmpty>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f43f af6f 	beq.w	8006a80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ba2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3730      	adds	r7, #48	; 0x30
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d14d      	bne.n	8006c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f82e 	bl	8007c3c <xTaskPriorityDisinherit>
 8006be0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	e043      	b.n	8006c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d119      	bne.n	8006c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6898      	ldr	r0, [r3, #8]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	f002 fa92 	bl	8009124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	441a      	add	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d32b      	bcc.n	8006c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	e026      	b.n	8006c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68d8      	ldr	r0, [r3, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	f002 fa78 	bl	8009124 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	425b      	negs	r3, r3
 8006c3e:	441a      	add	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d207      	bcs.n	8006c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	425b      	negs	r3, r3
 8006c5a:	441a      	add	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d105      	bne.n	8006c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c7a:	697b      	ldr	r3, [r7, #20]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d018      	beq.n	8006cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	441a      	add	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d303      	bcc.n	8006cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68d9      	ldr	r1, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6838      	ldr	r0, [r7, #0]
 8006cc4:	f002 fa2e 	bl	8009124 <memcpy>
	}
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cd8:	f001 fc96 	bl	8008608 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ce4:	e011      	b.n	8006d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d012      	beq.n	8006d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fdc0 	bl	8007878 <xTaskRemoveFromEventList>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cfe:	f000 fe99 	bl	8007a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dce9      	bgt.n	8006ce6 <prvUnlockQueue+0x16>
 8006d12:	e000      	b.n	8006d16 <prvUnlockQueue+0x46>
					break;
 8006d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d1e:	f001 fca5 	bl	800866c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d22:	f001 fc71 	bl	8008608 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d2e:	e011      	b.n	8006d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d012      	beq.n	8006d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3310      	adds	r3, #16
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fd9b 	bl	8007878 <xTaskRemoveFromEventList>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d48:	f000 fe74 	bl	8007a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dce9      	bgt.n	8006d30 <prvUnlockQueue+0x60>
 8006d5c:	e000      	b.n	8006d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	22ff      	movs	r2, #255	; 0xff
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d68:	f001 fc80 	bl	800866c <vPortExitCritical>
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d7c:	f001 fc44 	bl	8008608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e001      	b.n	8006d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d92:	f001 fc6b 	bl	800866c <vPortExitCritical>

	return xReturn;
 8006d96:	68fb      	ldr	r3, [r7, #12]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da8:	f001 fc2e 	bl	8008608 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d102      	bne.n	8006dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e001      	b.n	8006dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dc2:	f001 fc53 	bl	800866c <vPortExitCritical>

	return xReturn;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e014      	b.n	8006e0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006de0:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <vQueueAddToRegistry+0x4c>)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006dec:	490b      	ldr	r1, [pc, #44]	; (8006e1c <vQueueAddToRegistry+0x4c>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006df6:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <vQueueAddToRegistry+0x4c>)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e02:	e005      	b.n	8006e10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b07      	cmp	r3, #7
 8006e0e:	d9e7      	bls.n	8006de0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20006b08 	.word	0x20006b08

08006e20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e30:	f001 fbea 	bl	8008608 <vPortEnterCritical>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e3a:	b25b      	sxtb	r3, r3
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d103      	bne.n	8006e4a <vQueueWaitForMessageRestricted+0x2a>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d103      	bne.n	8006e60 <vQueueWaitForMessageRestricted+0x40>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e60:	f001 fc04 	bl	800866c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3324      	adds	r3, #36	; 0x24
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fcd3 	bl	8007820 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e7a:	6978      	ldr	r0, [r7, #20]
 8006e7c:	f7ff ff28 	bl	8006cd0 <prvUnlockQueue>
	}
 8006e80:	bf00      	nop
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	; 0x38
 8006e8c:	af04      	add	r7, sp, #16
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <xTaskCreateStatic+0x2c>
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	b672      	cpsid	i
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	b662      	cpsie	i
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	e7fe      	b.n	8006eb2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <xTaskCreateStatic+0x4a>
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	b672      	cpsid	i
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	b662      	cpsie	i
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e7fe      	b.n	8006ed0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ed2:	235c      	movs	r3, #92	; 0x5c
 8006ed4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8006eda:	d00b      	beq.n	8006ef4 <xTaskCreateStatic+0x6c>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	b672      	cpsid	i
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	b662      	cpsie	i
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	e7fe      	b.n	8006ef2 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01e      	beq.n	8006f38 <xTaskCreateStatic+0xb0>
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01b      	beq.n	8006f38 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f12:	2300      	movs	r3, #0
 8006f14:	9303      	str	r3, [sp, #12]
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	9302      	str	r3, [sp, #8]
 8006f1a:	f107 0314 	add.w	r3, r7, #20
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f850 	bl	8006fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f32:	f000 f8d5 	bl	80070e0 <prvAddNewTaskToReadyList>
 8006f36:	e001      	b.n	8006f3c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f3c:	697b      	ldr	r3, [r7, #20]
	}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3728      	adds	r7, #40	; 0x28
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b08c      	sub	sp, #48	; 0x30
 8006f4a:	af04      	add	r7, sp, #16
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fc76 	bl	800884c <pvPortMalloc>
 8006f60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00e      	beq.n	8006f86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f68:	205c      	movs	r0, #92	; 0x5c
 8006f6a:	f001 fc6f 	bl	800884c <pvPortMalloc>
 8006f6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f7c:	e005      	b.n	8006f8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	f001 fd2c 	bl	80089dc <vPortFree>
 8006f84:	e001      	b.n	8006f8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9303      	str	r3, [sp, #12]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	9302      	str	r3, [sp, #8]
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f80e 	bl	8006fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fb4:	69f8      	ldr	r0, [r7, #28]
 8006fb6:	f000 f893 	bl	80070e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e002      	b.n	8006fc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	21a5      	movs	r1, #165	; 0xa5
 8006fea:	f002 f8a6 	bl	800913a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ff8:	440b      	add	r3, r1
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f023 0307 	bic.w	r3, r3, #7
 8007006:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <prvInitialiseNewTask+0x5a>
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	b672      	cpsid	i
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	b662      	cpsie	i
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e7fe      	b.n	8007028 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
 800702e:	e012      	b.n	8007056 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	7819      	ldrb	r1, [r3, #0]
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	3334      	adds	r3, #52	; 0x34
 8007040:	460a      	mov	r2, r1
 8007042:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3301      	adds	r3, #1
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	2b0f      	cmp	r3, #15
 800705a:	d9e9      	bls.n	8007030 <prvInitialiseNewTask+0x60>
 800705c:	e000      	b.n	8007060 <prvInitialiseNewTask+0x90>
		{
			break;
 800705e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	2b37      	cmp	r3, #55	; 0x37
 800706c:	d901      	bls.n	8007072 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800706e:	2337      	movs	r3, #55	; 0x37
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800707c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	3304      	adds	r3, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff f973 	bl	8006374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	3318      	adds	r3, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff f96e 	bl	8006374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	2200      	movs	r2, #0
 80070b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	69b8      	ldr	r0, [r7, #24]
 80070c2:	f001 f997 	bl	80083f4 <pxPortInitialiseStack>
 80070c6:	4602      	mov	r2, r0
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d8:	bf00      	nop
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070e8:	f001 fa8e 	bl	8008608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070ec:	4b2d      	ldr	r3, [pc, #180]	; (80071a4 <prvAddNewTaskToReadyList+0xc4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	4a2c      	ldr	r2, [pc, #176]	; (80071a4 <prvAddNewTaskToReadyList+0xc4>)
 80070f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070f6:	4b2c      	ldr	r3, [pc, #176]	; (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070fe:	4a2a      	ldr	r2, [pc, #168]	; (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007104:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <prvAddNewTaskToReadyList+0xc4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d110      	bne.n	800712e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800710c:	f000 fcb6 	bl	8007a7c <prvInitialiseTaskLists>
 8007110:	e00d      	b.n	800712e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007112:	4b26      	ldr	r3, [pc, #152]	; (80071ac <prvAddNewTaskToReadyList+0xcc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800711a:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	429a      	cmp	r2, r3
 8007126:	d802      	bhi.n	800712e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007128:	4a1f      	ldr	r2, [pc, #124]	; (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800712e:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <prvAddNewTaskToReadyList+0xd0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <prvAddNewTaskToReadyList+0xd0>)
 8007136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007138:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <prvAddNewTaskToReadyList+0xd0>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	4b1b      	ldr	r3, [pc, #108]	; (80071b4 <prvAddNewTaskToReadyList+0xd4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d903      	bls.n	8007154 <prvAddNewTaskToReadyList+0x74>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <prvAddNewTaskToReadyList+0xd4>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <prvAddNewTaskToReadyList+0xd8>)
 8007162:	441a      	add	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7ff f90f 	bl	800638e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007170:	f001 fa7c 	bl	800866c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007174:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <prvAddNewTaskToReadyList+0xcc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	429a      	cmp	r2, r3
 8007188:	d207      	bcs.n	800719a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <prvAddNewTaskToReadyList+0xdc>)
 800718c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000bbc 	.word	0x20000bbc
 80071a8:	200006e8 	.word	0x200006e8
 80071ac:	20000bc8 	.word	0x20000bc8
 80071b0:	20000bd8 	.word	0x20000bd8
 80071b4:	20000bc4 	.word	0x20000bc4
 80071b8:	200006ec 	.word	0x200006ec
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <vTaskDelayUntil+0x2c>
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e7fe      	b.n	80071ea <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <vTaskDelayUntil+0x4a>
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	b672      	cpsid	i
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	b662      	cpsie	i
 8007206:	613b      	str	r3, [r7, #16]
 8007208:	e7fe      	b.n	8007208 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800720a:	4b2a      	ldr	r3, [pc, #168]	; (80072b4 <vTaskDelayUntil+0xf4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <vTaskDelayUntil+0x6a>
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	b672      	cpsid	i
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	b662      	cpsie	i
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e7fe      	b.n	8007228 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800722a:	f000 f8e7 	bl	80073fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <vTaskDelayUntil+0xf8>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	4413      	add	r3, r2
 800723c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	429a      	cmp	r2, r3
 8007246:	d20b      	bcs.n	8007260 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	429a      	cmp	r2, r3
 8007250:	d211      	bcs.n	8007276 <vTaskDelayUntil+0xb6>
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	429a      	cmp	r2, r3
 8007258:	d90d      	bls.n	8007276 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
 800725e:	e00a      	b.n	8007276 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	429a      	cmp	r2, r3
 8007268:	d303      	bcc.n	8007272 <vTaskDelayUntil+0xb2>
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	429a      	cmp	r2, r3
 8007270:	d901      	bls.n	8007276 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fd46 	bl	8007d1c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007290:	f000 f8c2 	bl	8007418 <xTaskResumeAll>
 8007294:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800729c:	4b07      	ldr	r3, [pc, #28]	; (80072bc <vTaskDelayUntil+0xfc>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ac:	bf00      	nop
 80072ae:	3728      	adds	r7, #40	; 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000be4 	.word	0x20000be4
 80072b8:	20000bc0 	.word	0x20000bc0
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d018      	beq.n	8007304 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072d2:	4b14      	ldr	r3, [pc, #80]	; (8007324 <vTaskDelay+0x64>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <vTaskDelay+0x32>
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	60bb      	str	r3, [r7, #8]
 80072f0:	e7fe      	b.n	80072f0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80072f2:	f000 f883 	bl	80073fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072f6:	2100      	movs	r1, #0
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fd0f 	bl	8007d1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072fe:	f000 f88b 	bl	8007418 <xTaskResumeAll>
 8007302:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d107      	bne.n	800731a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800730a:	4b07      	ldr	r3, [pc, #28]	; (8007328 <vTaskDelay+0x68>)
 800730c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000be4 	.word	0x20000be4
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007332:	2300      	movs	r3, #0
 8007334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800733a:	463a      	mov	r2, r7
 800733c:	1d39      	adds	r1, r7, #4
 800733e:	f107 0308 	add.w	r3, r7, #8
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe ffc2 	bl	80062cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	9202      	str	r2, [sp, #8]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	2300      	movs	r3, #0
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	460a      	mov	r2, r1
 800735a:	4922      	ldr	r1, [pc, #136]	; (80073e4 <vTaskStartScheduler+0xb8>)
 800735c:	4822      	ldr	r0, [pc, #136]	; (80073e8 <vTaskStartScheduler+0xbc>)
 800735e:	f7ff fd93 	bl	8006e88 <xTaskCreateStatic>
 8007362:	4602      	mov	r2, r0
 8007364:	4b21      	ldr	r3, [pc, #132]	; (80073ec <vTaskStartScheduler+0xc0>)
 8007366:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007368:	4b20      	ldr	r3, [pc, #128]	; (80073ec <vTaskStartScheduler+0xc0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007370:	2301      	movs	r3, #1
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e001      	b.n	800737a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d102      	bne.n	8007386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007380:	f000 fd20 	bl	8007dc4 <xTimerCreateTimerTask>
 8007384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d117      	bne.n	80073bc <vTaskStartScheduler+0x90>
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	b672      	cpsid	i
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	b662      	cpsie	i
 80073a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <vTaskStartScheduler+0xc4>)
 80073a4:	f04f 32ff 	mov.w	r2, #4294967295
 80073a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073aa:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <vTaskStartScheduler+0xc8>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80073b0:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <vTaskStartScheduler+0xcc>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073b6:	f001 f8ab 	bl	8008510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ba:	e00f      	b.n	80073dc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d10b      	bne.n	80073dc <vTaskStartScheduler+0xb0>
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e7fe      	b.n	80073da <vTaskStartScheduler+0xae>
}
 80073dc:	bf00      	nop
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	08009180 	.word	0x08009180
 80073e8:	08007a4d 	.word	0x08007a4d
 80073ec:	20000be0 	.word	0x20000be0
 80073f0:	20000bdc 	.word	0x20000bdc
 80073f4:	20000bc8 	.word	0x20000bc8
 80073f8:	20000bc0 	.word	0x20000bc0

080073fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <vTaskSuspendAll+0x18>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	4a03      	ldr	r2, [pc, #12]	; (8007414 <vTaskSuspendAll+0x18>)
 8007408:	6013      	str	r3, [r2, #0]
}
 800740a:	bf00      	nop
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20000be4 	.word	0x20000be4

08007418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007426:	4b42      	ldr	r3, [pc, #264]	; (8007530 <xTaskResumeAll+0x118>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10b      	bne.n	8007446 <xTaskResumeAll+0x2e>
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	e7fe      	b.n	8007444 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007446:	f001 f8df 	bl	8008608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800744a:	4b39      	ldr	r3, [pc, #228]	; (8007530 <xTaskResumeAll+0x118>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3b01      	subs	r3, #1
 8007450:	4a37      	ldr	r2, [pc, #220]	; (8007530 <xTaskResumeAll+0x118>)
 8007452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007454:	4b36      	ldr	r3, [pc, #216]	; (8007530 <xTaskResumeAll+0x118>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d162      	bne.n	8007522 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800745c:	4b35      	ldr	r3, [pc, #212]	; (8007534 <xTaskResumeAll+0x11c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d05e      	beq.n	8007522 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007464:	e02f      	b.n	80074c6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007466:	4b34      	ldr	r3, [pc, #208]	; (8007538 <xTaskResumeAll+0x120>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3318      	adds	r3, #24
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe ffe8 	bl	8006448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe ffe3 	bl	8006448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	4b2d      	ldr	r3, [pc, #180]	; (800753c <xTaskResumeAll+0x124>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d903      	bls.n	8007496 <xTaskResumeAll+0x7e>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	4a2a      	ldr	r2, [pc, #168]	; (800753c <xTaskResumeAll+0x124>)
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4a27      	ldr	r2, [pc, #156]	; (8007540 <xTaskResumeAll+0x128>)
 80074a4:	441a      	add	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fe ff6e 	bl	800638e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <xTaskResumeAll+0x12c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80074c0:	4b21      	ldr	r3, [pc, #132]	; (8007548 <xTaskResumeAll+0x130>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074c6:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <xTaskResumeAll+0x120>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1cb      	bne.n	8007466 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074d4:	f000 fb6e 	bl	8007bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074d8:	4b1c      	ldr	r3, [pc, #112]	; (800754c <xTaskResumeAll+0x134>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d010      	beq.n	8007506 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074e4:	f000 f858 	bl	8007598 <xTaskIncrementTick>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80074ee:	4b16      	ldr	r3, [pc, #88]	; (8007548 <xTaskResumeAll+0x130>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f1      	bne.n	80074e4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007500:	4b12      	ldr	r3, [pc, #72]	; (800754c <xTaskResumeAll+0x134>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007506:	4b10      	ldr	r3, [pc, #64]	; (8007548 <xTaskResumeAll+0x130>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800750e:	2301      	movs	r3, #1
 8007510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <xTaskResumeAll+0x138>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007522:	f001 f8a3 	bl	800866c <vPortExitCritical>

	return xAlreadyYielded;
 8007526:	68bb      	ldr	r3, [r7, #8]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000be4 	.word	0x20000be4
 8007534:	20000bbc 	.word	0x20000bbc
 8007538:	20000b7c 	.word	0x20000b7c
 800753c:	20000bc4 	.word	0x20000bc4
 8007540:	200006ec 	.word	0x200006ec
 8007544:	200006e8 	.word	0x200006e8
 8007548:	20000bd0 	.word	0x20000bd0
 800754c:	20000bcc 	.word	0x20000bcc
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <xTaskGetTickCount+0x1c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007560:	687b      	ldr	r3, [r7, #4]
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000bc0 	.word	0x20000bc0

08007574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757a:	f001 f925 	bl	80087c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007582:	4b04      	ldr	r3, [pc, #16]	; (8007594 <xTaskGetTickCountFromISR+0x20>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007588:	683b      	ldr	r3, [r7, #0]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000bc0 	.word	0x20000bc0

08007598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a2:	4b52      	ldr	r3, [pc, #328]	; (80076ec <xTaskIncrementTick+0x154>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 808f 	bne.w	80076ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075ac:	4b50      	ldr	r3, [pc, #320]	; (80076f0 <xTaskIncrementTick+0x158>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075b4:	4a4e      	ldr	r2, [pc, #312]	; (80076f0 <xTaskIncrementTick+0x158>)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d121      	bne.n	8007604 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075c0:	4b4c      	ldr	r3, [pc, #304]	; (80076f4 <xTaskIncrementTick+0x15c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <xTaskIncrementTick+0x4a>
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	e7fe      	b.n	80075e0 <xTaskIncrementTick+0x48>
 80075e2:	4b44      	ldr	r3, [pc, #272]	; (80076f4 <xTaskIncrementTick+0x15c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	4b43      	ldr	r3, [pc, #268]	; (80076f8 <xTaskIncrementTick+0x160>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a41      	ldr	r2, [pc, #260]	; (80076f4 <xTaskIncrementTick+0x15c>)
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4a41      	ldr	r2, [pc, #260]	; (80076f8 <xTaskIncrementTick+0x160>)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4b41      	ldr	r3, [pc, #260]	; (80076fc <xTaskIncrementTick+0x164>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	4a3f      	ldr	r2, [pc, #252]	; (80076fc <xTaskIncrementTick+0x164>)
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	f000 fad8 	bl	8007bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <xTaskIncrementTick+0x168>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	429a      	cmp	r2, r3
 800760c:	d34e      	bcc.n	80076ac <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800760e:	4b39      	ldr	r3, [pc, #228]	; (80076f4 <xTaskIncrementTick+0x15c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <xTaskIncrementTick+0x84>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <xTaskIncrementTick+0x86>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007622:	4b37      	ldr	r3, [pc, #220]	; (8007700 <xTaskIncrementTick+0x168>)
 8007624:	f04f 32ff 	mov.w	r2, #4294967295
 8007628:	601a      	str	r2, [r3, #0]
					break;
 800762a:	e03f      	b.n	80076ac <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800762c:	4b31      	ldr	r3, [pc, #196]	; (80076f4 <xTaskIncrementTick+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d203      	bcs.n	800764c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007644:	4a2e      	ldr	r2, [pc, #184]	; (8007700 <xTaskIncrementTick+0x168>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6013      	str	r3, [r2, #0]
						break;
 800764a:	e02f      	b.n	80076ac <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	3304      	adds	r3, #4
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe fef9 	bl	8006448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3318      	adds	r3, #24
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fef0 	bl	8006448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	4b25      	ldr	r3, [pc, #148]	; (8007704 <xTaskIncrementTick+0x16c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d903      	bls.n	800767c <xTaskIncrementTick+0xe4>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	4a22      	ldr	r2, [pc, #136]	; (8007704 <xTaskIncrementTick+0x16c>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <xTaskIncrementTick+0x170>)
 800768a:	441a      	add	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe fe7b 	bl	800638e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769c:	4b1b      	ldr	r3, [pc, #108]	; (800770c <xTaskIncrementTick+0x174>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3b3      	bcc.n	800760e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076a6:	2301      	movs	r3, #1
 80076a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076aa:	e7b0      	b.n	800760e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ac:	4b17      	ldr	r3, [pc, #92]	; (800770c <xTaskIncrementTick+0x174>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4915      	ldr	r1, [pc, #84]	; (8007708 <xTaskIncrementTick+0x170>)
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d907      	bls.n	80076d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e004      	b.n	80076d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076ca:	4b11      	ldr	r3, [pc, #68]	; (8007710 <xTaskIncrementTick+0x178>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <xTaskIncrementTick+0x178>)
 80076d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076d4:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <xTaskIncrementTick+0x17c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076e0:	697b      	ldr	r3, [r7, #20]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000be4 	.word	0x20000be4
 80076f0:	20000bc0 	.word	0x20000bc0
 80076f4:	20000b74 	.word	0x20000b74
 80076f8:	20000b78 	.word	0x20000b78
 80076fc:	20000bd4 	.word	0x20000bd4
 8007700:	20000bdc 	.word	0x20000bdc
 8007704:	20000bc4 	.word	0x20000bc4
 8007708:	200006ec 	.word	0x200006ec
 800770c:	200006e8 	.word	0x200006e8
 8007710:	20000bcc 	.word	0x20000bcc
 8007714:	20000bd0 	.word	0x20000bd0

08007718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800771e:	4b28      	ldr	r3, [pc, #160]	; (80077c0 <vTaskSwitchContext+0xa8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007726:	4b27      	ldr	r3, [pc, #156]	; (80077c4 <vTaskSwitchContext+0xac>)
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800772c:	e042      	b.n	80077b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <vTaskSwitchContext+0xac>)
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <vTaskSwitchContext+0xb0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e011      	b.n	8007760 <vTaskSwitchContext+0x48>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <vTaskSwitchContext+0x42>
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	b672      	cpsid	i
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	b662      	cpsie	i
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	e7fe      	b.n	8007758 <vTaskSwitchContext+0x40>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3b01      	subs	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	491a      	ldr	r1, [pc, #104]	; (80077cc <vTaskSwitchContext+0xb4>)
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0e3      	beq.n	800773c <vTaskSwitchContext+0x24>
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4a13      	ldr	r2, [pc, #76]	; (80077cc <vTaskSwitchContext+0xb4>)
 8007780:	4413      	add	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3308      	adds	r3, #8
 8007796:	429a      	cmp	r2, r3
 8007798:	d104      	bne.n	80077a4 <vTaskSwitchContext+0x8c>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <vTaskSwitchContext+0xb8>)
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	4a06      	ldr	r2, [pc, #24]	; (80077c8 <vTaskSwitchContext+0xb0>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6013      	str	r3, [r2, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20000be4 	.word	0x20000be4
 80077c4:	20000bd0 	.word	0x20000bd0
 80077c8:	20000bc4 	.word	0x20000bc4
 80077cc:	200006ec 	.word	0x200006ec
 80077d0:	200006e8 	.word	0x200006e8

080077d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <vTaskPlaceOnEventList+0x28>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	b672      	cpsid	i
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	b662      	cpsie	i
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e7fe      	b.n	80077fa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <vTaskPlaceOnEventList+0x48>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3318      	adds	r3, #24
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe fde6 	bl	80063d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800780a:	2101      	movs	r1, #1
 800780c:	6838      	ldr	r0, [r7, #0]
 800780e:	f000 fa85 	bl	8007d1c <prvAddCurrentTaskToDelayedList>
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	200006e8 	.word	0x200006e8

08007820 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <vTaskPlaceOnEventListRestricted+0x2a>
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	b672      	cpsid	i
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	b662      	cpsie	i
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	e7fe      	b.n	8007848 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800784a:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <vTaskPlaceOnEventListRestricted+0x54>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3318      	adds	r3, #24
 8007850:	4619      	mov	r1, r3
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7fe fd9b 	bl	800638e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	68b8      	ldr	r0, [r7, #8]
 8007868:	f000 fa58 	bl	8007d1c <prvAddCurrentTaskToDelayedList>
	}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	200006e8 	.word	0x200006e8

08007878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xTaskRemoveFromEventList+0x2e>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	b672      	cpsid	i
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	b662      	cpsie	i
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e7fe      	b.n	80078a4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3318      	adds	r3, #24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fdcc 	bl	8006448 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b0:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <xTaskRemoveFromEventList+0xb0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11d      	bne.n	80078f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fdc3 	bl	8006448 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c6:	4b19      	ldr	r3, [pc, #100]	; (800792c <xTaskRemoveFromEventList+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d903      	bls.n	80078d6 <xTaskRemoveFromEventList+0x5e>
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4a16      	ldr	r2, [pc, #88]	; (800792c <xTaskRemoveFromEventList+0xb4>)
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4a13      	ldr	r2, [pc, #76]	; (8007930 <xTaskRemoveFromEventList+0xb8>)
 80078e4:	441a      	add	r2, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7fe fd4e 	bl	800638e <vListInsertEnd>
 80078f2:	e005      	b.n	8007900 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3318      	adds	r3, #24
 80078f8:	4619      	mov	r1, r3
 80078fa:	480e      	ldr	r0, [pc, #56]	; (8007934 <xTaskRemoveFromEventList+0xbc>)
 80078fc:	f7fe fd47 	bl	800638e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007904:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <xTaskRemoveFromEventList+0xc0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	429a      	cmp	r2, r3
 800790c:	d905      	bls.n	800791a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800790e:	2301      	movs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <xTaskRemoveFromEventList+0xc4>)
 8007914:	2201      	movs	r2, #1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e001      	b.n	800791e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800791e:	697b      	ldr	r3, [r7, #20]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20000be4 	.word	0x20000be4
 800792c:	20000bc4 	.word	0x20000bc4
 8007930:	200006ec 	.word	0x200006ec
 8007934:	20000b7c 	.word	0x20000b7c
 8007938:	200006e8 	.word	0x200006e8
 800793c:	20000bd0 	.word	0x20000bd0

08007940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <vTaskInternalSetTimeOutState+0x24>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <vTaskInternalSetTimeOutState+0x28>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000bd4 	.word	0x20000bd4
 8007968:	20000bc0 	.word	0x20000bc0

0800796c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <xTaskCheckForTimeOut+0x28>
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	b672      	cpsid	i
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	b662      	cpsie	i
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	e7fe      	b.n	8007992 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <xTaskCheckForTimeOut+0x46>
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	b672      	cpsid	i
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	b662      	cpsie	i
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e7fe      	b.n	80079b0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80079b2:	f000 fe29 	bl	8008608 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079b6:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <xTaskCheckForTimeOut+0xc0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d102      	bne.n	80079d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e023      	b.n	8007a1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <xTaskCheckForTimeOut+0xc4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d007      	beq.n	80079f2 <xTaskCheckForTimeOut+0x86>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e015      	b.n	8007a1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d20b      	bcs.n	8007a14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff99 	bl	8007940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	e004      	b.n	8007a1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f000 fe25 	bl	800866c <vPortExitCritical>

	return xReturn;
 8007a22:	69fb      	ldr	r3, [r7, #28]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000bc0 	.word	0x20000bc0
 8007a30:	20000bd4 	.word	0x20000bd4

08007a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a38:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <vTaskMissedYield+0x14>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	20000bd0 	.word	0x20000bd0

08007a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a54:	f000 f852 	bl	8007afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <prvIdleTask+0x28>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d9f9      	bls.n	8007a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <prvIdleTask+0x2c>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a70:	e7f0      	b.n	8007a54 <prvIdleTask+0x8>
 8007a72:	bf00      	nop
 8007a74:	200006ec 	.word	0x200006ec
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
 8007a86:	e00c      	b.n	8007aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <prvInitialiseTaskLists+0x60>)
 8007a94:	4413      	add	r3, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fc4c 	bl	8006334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b37      	cmp	r3, #55	; 0x37
 8007aa6:	d9ef      	bls.n	8007a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa8:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aaa:	f7fe fc43 	bl	8006334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aae:	480d      	ldr	r0, [pc, #52]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ab0:	f7fe fc40 	bl	8006334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab4:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <prvInitialiseTaskLists+0x6c>)
 8007ab6:	f7fe fc3d 	bl	8006334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aba:	480c      	ldr	r0, [pc, #48]	; (8007aec <prvInitialiseTaskLists+0x70>)
 8007abc:	f7fe fc3a 	bl	8006334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac0:	480b      	ldr	r0, [pc, #44]	; (8007af0 <prvInitialiseTaskLists+0x74>)
 8007ac2:	f7fe fc37 	bl	8006334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <prvInitialiseTaskLists+0x78>)
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <prvInitialiseTaskLists+0x7c>)
 8007ace:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	200006ec 	.word	0x200006ec
 8007ae0:	20000b4c 	.word	0x20000b4c
 8007ae4:	20000b60 	.word	0x20000b60
 8007ae8:	20000b7c 	.word	0x20000b7c
 8007aec:	20000b90 	.word	0x20000b90
 8007af0:	20000ba8 	.word	0x20000ba8
 8007af4:	20000b74 	.word	0x20000b74
 8007af8:	20000b78 	.word	0x20000b78

08007afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b02:	e019      	b.n	8007b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b04:	f000 fd80 	bl	8008608 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b08:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <prvCheckTasksWaitingTermination+0x4c>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fc97 	bl	8006448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2e:	f000 fd9d 	bl	800866c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f80e 	bl	8007b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e1      	bne.n	8007b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000b90 	.word	0x20000b90
 8007b4c:	20000bbc 	.word	0x20000bbc
 8007b50:	20000ba4 	.word	0x20000ba4

08007b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d108      	bne.n	8007b78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 ff36 	bl	80089dc <vPortFree>
				vPortFree( pxTCB );
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 ff33 	bl	80089dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b76:	e019      	b.n	8007bac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d103      	bne.n	8007b8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 ff2a 	bl	80089dc <vPortFree>
	}
 8007b88:	e010      	b.n	8007bac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d00b      	beq.n	8007bac <prvDeleteTCB+0x58>
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	b672      	cpsid	i
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	b662      	cpsie	i
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	e7fe      	b.n	8007baa <prvDeleteTCB+0x56>
	}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bba:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <prvResetNextTaskUnblockTime+0x44>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <prvResetNextTaskUnblockTime+0x14>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <prvResetNextTaskUnblockTime+0x16>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bce:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <prvResetNextTaskUnblockTime+0x48>)
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd6:	e008      	b.n	8007bea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <prvResetNextTaskUnblockTime+0x44>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	4a05      	ldr	r2, [pc, #20]	; (8007bfc <prvResetNextTaskUnblockTime+0x48>)
 8007be8:	6013      	str	r3, [r2, #0]
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	20000b74 	.word	0x20000b74
 8007bfc:	20000bdc 	.word	0x20000bdc

08007c00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <xTaskGetSchedulerState+0x34>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	e008      	b.n	8007c26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c14:	4b08      	ldr	r3, [pc, #32]	; (8007c38 <xTaskGetSchedulerState+0x38>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	607b      	str	r3, [r7, #4]
 8007c20:	e001      	b.n	8007c26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c22:	2300      	movs	r3, #0
 8007c24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c26:	687b      	ldr	r3, [r7, #4]
	}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20000bc8 	.word	0x20000bc8
 8007c38:	20000be4 	.word	0x20000be4

08007c3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d058      	beq.n	8007d04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c52:	4b2f      	ldr	r3, [pc, #188]	; (8007d10 <xTaskPriorityDisinherit+0xd4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d00b      	beq.n	8007c74 <xTaskPriorityDisinherit+0x38>
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e7fe      	b.n	8007c72 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10b      	bne.n	8007c94 <xTaskPriorityDisinherit+0x58>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	e7fe      	b.n	8007c92 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c98:	1e5a      	subs	r2, r3, #1
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d02c      	beq.n	8007d04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d128      	bne.n	8007d04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fbc6 	bl	8006448 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <xTaskPriorityDisinherit+0xd8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d903      	bls.n	8007ce4 <xTaskPriorityDisinherit+0xa8>
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	4a0c      	ldr	r2, [pc, #48]	; (8007d14 <xTaskPriorityDisinherit+0xd8>)
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4a09      	ldr	r2, [pc, #36]	; (8007d18 <xTaskPriorityDisinherit+0xdc>)
 8007cf2:	441a      	add	r2, r3
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fe fb47 	bl	800638e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d04:	697b      	ldr	r3, [r7, #20]
	}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200006e8 	.word	0x200006e8
 8007d14:	20000bc4 	.word	0x20000bc4
 8007d18:	200006ec 	.word	0x200006ec

08007d1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d26:	4b21      	ldr	r3, [pc, #132]	; (8007dac <prvAddCurrentTaskToDelayedList+0x90>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d2c:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3304      	adds	r3, #4
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fb88 	bl	8006448 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d10a      	bne.n	8007d56 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d46:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4819      	ldr	r0, [pc, #100]	; (8007db4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d50:	f7fe fb1d 	bl	800638e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d54:	e026      	b.n	8007da4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d5e:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d209      	bcs.n	8007d82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d6e:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	f7fe fb2b 	bl	80063d6 <vListInsert>
}
 8007d80:	e010      	b.n	8007da4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d82:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe fb21 	bl	80063d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d94:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d202      	bcs.n	8007da4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d9e:	4a08      	ldr	r2, [pc, #32]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6013      	str	r3, [r2, #0]
}
 8007da4:	bf00      	nop
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000bc0 	.word	0x20000bc0
 8007db0:	200006e8 	.word	0x200006e8
 8007db4:	20000ba8 	.word	0x20000ba8
 8007db8:	20000b78 	.word	0x20000b78
 8007dbc:	20000b74 	.word	0x20000b74
 8007dc0:	20000bdc 	.word	0x20000bdc

08007dc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	; 0x28
 8007dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dce:	f000 fad1 	bl	8008374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <xTimerCreateTimerTask+0x84>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d021      	beq.n	8007e1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007de2:	1d3a      	adds	r2, r7, #4
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	f107 030c 	add.w	r3, r7, #12
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fa87 	bl	8006300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	9202      	str	r2, [sp, #8]
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	460a      	mov	r2, r1
 8007e04:	4911      	ldr	r1, [pc, #68]	; (8007e4c <xTimerCreateTimerTask+0x88>)
 8007e06:	4812      	ldr	r0, [pc, #72]	; (8007e50 <xTimerCreateTimerTask+0x8c>)
 8007e08:	f7ff f83e 	bl	8006e88 <xTaskCreateStatic>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4b11      	ldr	r3, [pc, #68]	; (8007e54 <xTimerCreateTimerTask+0x90>)
 8007e10:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e12:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <xTimerCreateTimerTask+0x90>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10b      	bne.n	8007e3c <xTimerCreateTimerTask+0x78>
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	b672      	cpsid	i
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	b662      	cpsie	i
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	e7fe      	b.n	8007e3a <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007e3c:	697b      	ldr	r3, [r7, #20]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000c18 	.word	0x20000c18
 8007e4c:	08009188 	.word	0x08009188
 8007e50:	08007f79 	.word	0x08007f79
 8007e54:	20000c1c 	.word	0x20000c1c

08007e58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10b      	bne.n	8007e88 <xTimerGenericCommand+0x30>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	b672      	cpsid	i
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	b662      	cpsie	i
 8007e84:	623b      	str	r3, [r7, #32]
 8007e86:	e7fe      	b.n	8007e86 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e88:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02a      	beq.n	8007ee6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	dc18      	bgt.n	8007ed4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ea2:	f7ff fead 	bl	8007c00 <xTaskGetSchedulerState>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d109      	bne.n	8007ec0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	f107 0110 	add.w	r1, r7, #16
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb8:	f7fe fbfa 	bl	80066b0 <xQueueGenericSend>
 8007ebc:	6278      	str	r0, [r7, #36]	; 0x24
 8007ebe:	e012      	b.n	8007ee6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	f107 0110 	add.w	r1, r7, #16
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f7fe fbf0 	bl	80066b0 <xQueueGenericSend>
 8007ed0:	6278      	str	r0, [r7, #36]	; 0x24
 8007ed2:	e008      	b.n	8007ee6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <xTimerGenericCommand+0x98>)
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	f107 0110 	add.w	r1, r7, #16
 8007edc:	2300      	movs	r3, #0
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f7fe fce8 	bl	80068b4 <xQueueGenericSendFromISR>
 8007ee4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3728      	adds	r7, #40	; 0x28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20000c18 	.word	0x20000c18

08007ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007efe:	4b1d      	ldr	r3, [pc, #116]	; (8007f74 <prvProcessExpiredTimer+0x80>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fa9b 	bl	8006448 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d123      	bne.n	8007f62 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	699a      	ldr	r2, [r3, #24]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	18d1      	adds	r1, r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	6978      	ldr	r0, [r7, #20]
 8007f28:	f000 f8ca 	bl	80080c0 <prvInsertTimerInActiveList>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d017      	beq.n	8007f62 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f32:	2300      	movs	r3, #0
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	2300      	movs	r3, #0
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6978      	ldr	r0, [r7, #20]
 8007f3e:	f7ff ff8b 	bl	8007e58 <xTimerGenericCommand>
 8007f42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10b      	bne.n	8007f62 <prvProcessExpiredTimer+0x6e>
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	b672      	cpsid	i
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	b662      	cpsie	i
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e7fe      	b.n	8007f60 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	6978      	ldr	r0, [r7, #20]
 8007f68:	4798      	blx	r3
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000c10 	.word	0x20000c10

08007f78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f80:	f107 0308 	add.w	r3, r7, #8
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f857 	bl	8008038 <prvGetNextExpireTime>
 8007f8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f803 	bl	8007f9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f96:	f000 f8d5 	bl	8008144 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f9a:	e7f1      	b.n	8007f80 <prvTimerTask+0x8>

08007f9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fa6:	f7ff fa29 	bl	80073fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f866 	bl	8008080 <prvSampleTimeNow>
 8007fb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d130      	bne.n	800801e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <prvProcessTimerOrBlockTask+0x3c>
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d806      	bhi.n	8007fd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fca:	f7ff fa25 	bl	8007418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff ff8f 	bl	8007ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fd6:	e024      	b.n	8008022 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <prvProcessTimerOrBlockTask+0x90>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2301      	moveq	r3, #1
 8007fea:	2300      	movne	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <prvProcessTimerOrBlockTask+0x94>)
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f7fe ff0f 	bl	8006e20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008002:	f7ff fa09 	bl	8007418 <xTaskResumeAll>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <prvProcessTimerOrBlockTask+0x98>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
}
 800801c:	e001      	b.n	8008022 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800801e:	f7ff f9fb 	bl	8007418 <xTaskResumeAll>
}
 8008022:	bf00      	nop
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000c14 	.word	0x20000c14
 8008030:	20000c18 	.word	0x20000c18
 8008034:	e000ed04 	.word	0xe000ed04

08008038 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008040:	4b0e      	ldr	r3, [pc, #56]	; (800807c <prvGetNextExpireTime+0x44>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	bf0c      	ite	eq
 800804a:	2301      	moveq	r3, #1
 800804c:	2300      	movne	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d105      	bne.n	800806a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800805e:	4b07      	ldr	r3, [pc, #28]	; (800807c <prvGetNextExpireTime+0x44>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e001      	b.n	800806e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800806e:	68fb      	ldr	r3, [r7, #12]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000c10 	.word	0x20000c10

08008080 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008088:	f7ff fa64 	bl	8007554 <xTaskGetTickCount>
 800808c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800808e:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <prvSampleTimeNow+0x3c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	429a      	cmp	r2, r3
 8008096:	d205      	bcs.n	80080a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008098:	f000 f90a 	bl	80082b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e002      	b.n	80080aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080aa:	4a04      	ldr	r2, [pc, #16]	; (80080bc <prvSampleTimeNow+0x3c>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080b0:	68fb      	ldr	r3, [r7, #12]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000c20 	.word	0x20000c20

080080c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d812      	bhi.n	800810c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	1ad2      	subs	r2, r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e01b      	b.n	8008132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080fa:	4b10      	ldr	r3, [pc, #64]	; (800813c <prvInsertTimerInActiveList+0x7c>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fe f966 	bl	80063d6 <vListInsert>
 800810a:	e012      	b.n	8008132 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d206      	bcs.n	8008122 <prvInsertTimerInActiveList+0x62>
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	e007      	b.n	8008132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <prvInsertTimerInActiveList+0x80>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3304      	adds	r3, #4
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f7fe f952 	bl	80063d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008132:	697b      	ldr	r3, [r7, #20]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000c14 	.word	0x20000c14
 8008140:	20000c10 	.word	0x20000c10

08008144 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08e      	sub	sp, #56	; 0x38
 8008148:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800814a:	e09f      	b.n	800828c <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	da19      	bge.n	8008186 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008152:	1d3b      	adds	r3, r7, #4
 8008154:	3304      	adds	r3, #4
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10b      	bne.n	8008176 <prvProcessReceivedCommands+0x32>
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	b672      	cpsid	i
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	b662      	cpsie	i
 8008172:	61fb      	str	r3, [r7, #28]
 8008174:	e7fe      	b.n	8008174 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800817c:	6850      	ldr	r0, [r2, #4]
 800817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008180:	6892      	ldr	r2, [r2, #8]
 8008182:	4611      	mov	r1, r2
 8008184:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	db7e      	blt.n	800828a <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	3304      	adds	r3, #4
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe f953 	bl	8006448 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081a2:	463b      	mov	r3, r7
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff ff6b 	bl	8008080 <prvSampleTimeNow>
 80081aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b09      	cmp	r3, #9
 80081b0:	d86c      	bhi.n	800828c <prvProcessReceivedCommands+0x148>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <prvProcessReceivedCommands+0x74>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081e1 	.word	0x080081e1
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	0800828d 	.word	0x0800828d
 80081c8:	0800823f 	.word	0x0800823f
 80081cc:	08008279 	.word	0x08008279
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081e1 	.word	0x080081e1
 80081d8:	0800828d 	.word	0x0800828d
 80081dc:	0800823f 	.word	0x0800823f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	18d1      	adds	r1, r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f7ff ff67 	bl	80080c0 <prvInsertTimerInActiveList>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d049      	beq.n	800828c <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d141      	bne.n	800828c <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	441a      	add	r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	2100      	movs	r1, #0
 8008218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800821a:	f7ff fe1d 	bl	8007e58 <xTimerGenericCommand>
 800821e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d132      	bne.n	800828c <prvProcessReceivedCommands+0x148>
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	b672      	cpsid	i
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	b662      	cpsie	i
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	e7fe      	b.n	800823c <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <prvProcessReceivedCommands+0x120>
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	b672      	cpsid	i
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	b662      	cpsie	i
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e7fe      	b.n	8008262 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	699a      	ldr	r2, [r3, #24]
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	18d1      	adds	r1, r2, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008272:	f7ff ff25 	bl	80080c0 <prvInsertTimerInActiveList>
					break;
 8008276:	e009      	b.n	800828c <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 8008282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008284:	f000 fbaa 	bl	80089dc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008288:	e000      	b.n	800828c <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800828a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <prvProcessReceivedCommands+0x168>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	1d39      	adds	r1, r7, #4
 8008292:	2200      	movs	r2, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fba9 	bl	80069ec <xQueueReceive>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	f47f af55 	bne.w	800814c <prvProcessReceivedCommands+0x8>
	}
}
 80082a2:	bf00      	nop
 80082a4:	3730      	adds	r7, #48	; 0x30
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000c18 	.word	0x20000c18

080082b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082b6:	e046      	b.n	8008346 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b8:	4b2c      	ldr	r3, [pc, #176]	; (800836c <prvSwitchTimerLists+0xbc>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c2:	4b2a      	ldr	r3, [pc, #168]	; (800836c <prvSwitchTimerLists+0xbc>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fe f8b9 	bl	8006448 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d12f      	bne.n	8008346 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4413      	add	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d90e      	bls.n	8008316 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008304:	4b19      	ldr	r3, [pc, #100]	; (800836c <prvSwitchTimerLists+0xbc>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe f861 	bl	80063d6 <vListInsert>
 8008314:	e017      	b.n	8008346 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008316:	2300      	movs	r3, #0
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	2100      	movs	r1, #0
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fd99 	bl	8007e58 <xTimerGenericCommand>
 8008326:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <prvSwitchTimerLists+0x96>
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	b672      	cpsid	i
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	b662      	cpsie	i
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	e7fe      	b.n	8008344 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <prvSwitchTimerLists+0xbc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1b3      	bne.n	80082b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <prvSwitchTimerLists+0xbc>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <prvSwitchTimerLists+0xc0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a04      	ldr	r2, [pc, #16]	; (800836c <prvSwitchTimerLists+0xbc>)
 800835c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800835e:	4a04      	ldr	r2, [pc, #16]	; (8008370 <prvSwitchTimerLists+0xc0>)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6013      	str	r3, [r2, #0]
}
 8008364:	bf00      	nop
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000c10 	.word	0x20000c10
 8008370:	20000c14 	.word	0x20000c14

08008374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800837a:	f000 f945 	bl	8008608 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d120      	bne.n	80083c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008386:	4814      	ldr	r0, [pc, #80]	; (80083d8 <prvCheckForValidListAndQueue+0x64>)
 8008388:	f7fd ffd4 	bl	8006334 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800838c:	4813      	ldr	r0, [pc, #76]	; (80083dc <prvCheckForValidListAndQueue+0x68>)
 800838e:	f7fd ffd1 	bl	8006334 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008392:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <prvCheckForValidListAndQueue+0x6c>)
 8008394:	4a10      	ldr	r2, [pc, #64]	; (80083d8 <prvCheckForValidListAndQueue+0x64>)
 8008396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008398:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <prvCheckForValidListAndQueue+0x70>)
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <prvCheckForValidListAndQueue+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800839e:	2300      	movs	r3, #0
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <prvCheckForValidListAndQueue+0x74>)
 80083a4:	4a11      	ldr	r2, [pc, #68]	; (80083ec <prvCheckForValidListAndQueue+0x78>)
 80083a6:	2110      	movs	r1, #16
 80083a8:	200a      	movs	r0, #10
 80083aa:	f7fe f8e1 	bl	8006570 <xQueueGenericCreateStatic>
 80083ae:	4602      	mov	r2, r0
 80083b0:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	490b      	ldr	r1, [pc, #44]	; (80083f0 <prvCheckForValidListAndQueue+0x7c>)
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd04 	bl	8006dd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c8:	f000 f950 	bl	800866c <vPortExitCritical>
}
 80083cc:	bf00      	nop
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000c18 	.word	0x20000c18
 80083d8:	20000be8 	.word	0x20000be8
 80083dc:	20000bfc 	.word	0x20000bfc
 80083e0:	20000c10 	.word	0x20000c10
 80083e4:	20000c14 	.word	0x20000c14
 80083e8:	20000cc4 	.word	0x20000cc4
 80083ec:	20000c24 	.word	0x20000c24
 80083f0:	08009190 	.word	0x08009190

080083f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3b04      	subs	r3, #4
 8008404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800840c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3b04      	subs	r3, #4
 8008412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f023 0201 	bic.w	r2, r3, #1
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b04      	subs	r3, #4
 8008422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008424:	4a0c      	ldr	r2, [pc, #48]	; (8008458 <pxPortInitialiseStack+0x64>)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3b14      	subs	r3, #20
 800842e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3b04      	subs	r3, #4
 800843a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f06f 0202 	mvn.w	r2, #2
 8008442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3b20      	subs	r3, #32
 8008448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800844a:	68fb      	ldr	r3, [r7, #12]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	0800845d 	.word	0x0800845d

0800845c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <prvTaskExitError+0x58>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d00b      	beq.n	8008488 <prvTaskExitError+0x2c>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	b672      	cpsid	i
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	b662      	cpsie	i
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	e7fe      	b.n	8008486 <prvTaskExitError+0x2a>
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	b672      	cpsid	i
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	b662      	cpsie	i
 800849c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800849e:	bf00      	nop
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0fc      	beq.n	80084a0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000008 	.word	0x20000008
	...

080084c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <pxCurrentTCBConst2>)
 80084c2:	6819      	ldr	r1, [r3, #0]
 80084c4:	6808      	ldr	r0, [r1, #0]
 80084c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ca:	f380 8809 	msr	PSP, r0
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f04f 0000 	mov.w	r0, #0
 80084d6:	f380 8811 	msr	BASEPRI, r0
 80084da:	4770      	bx	lr
 80084dc:	f3af 8000 	nop.w

080084e0 <pxCurrentTCBConst2>:
 80084e0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop

080084e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084e8:	4808      	ldr	r0, [pc, #32]	; (800850c <prvPortStartFirstTask+0x24>)
 80084ea:	6800      	ldr	r0, [r0, #0]
 80084ec:	6800      	ldr	r0, [r0, #0]
 80084ee:	f380 8808 	msr	MSP, r0
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8814 	msr	CONTROL, r0
 80084fa:	b662      	cpsie	i
 80084fc:	b661      	cpsie	f
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	df00      	svc	0
 8008508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800850a:	bf00      	nop
 800850c:	e000ed08 	.word	0xe000ed08

08008510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008516:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <xPortStartScheduler+0xe0>)
 8008518:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	22ff      	movs	r2, #255	; 0xff
 8008526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008538:	b2da      	uxtb	r2, r3
 800853a:	4b2e      	ldr	r3, [pc, #184]	; (80085f4 <xPortStartScheduler+0xe4>)
 800853c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800853e:	4b2e      	ldr	r3, [pc, #184]	; (80085f8 <xPortStartScheduler+0xe8>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008544:	e009      	b.n	800855a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008546:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <xPortStartScheduler+0xe8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3b01      	subs	r3, #1
 800854c:	4a2a      	ldr	r2, [pc, #168]	; (80085f8 <xPortStartScheduler+0xe8>)
 800854e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	b2db      	uxtb	r3, r3
 8008558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d0ef      	beq.n	8008546 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008566:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <xPortStartScheduler+0xe8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1c3 0307 	rsb	r3, r3, #7
 800856e:	2b04      	cmp	r3, #4
 8008570:	d00b      	beq.n	800858a <xPortStartScheduler+0x7a>
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	b672      	cpsid	i
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	b662      	cpsie	i
 8008586:	60bb      	str	r3, [r7, #8]
 8008588:	e7fe      	b.n	8008588 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <xPortStartScheduler+0xe8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	4a19      	ldr	r2, [pc, #100]	; (80085f8 <xPortStartScheduler+0xe8>)
 8008592:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008594:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <xPortStartScheduler+0xe8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800859c:	4a16      	ldr	r2, [pc, #88]	; (80085f8 <xPortStartScheduler+0xe8>)
 800859e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085a8:	4b14      	ldr	r3, [pc, #80]	; (80085fc <xPortStartScheduler+0xec>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a13      	ldr	r2, [pc, #76]	; (80085fc <xPortStartScheduler+0xec>)
 80085ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085b4:	4b11      	ldr	r3, [pc, #68]	; (80085fc <xPortStartScheduler+0xec>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a10      	ldr	r2, [pc, #64]	; (80085fc <xPortStartScheduler+0xec>)
 80085ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80085be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085c0:	f000 f8d4 	bl	800876c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085c4:	4b0e      	ldr	r3, [pc, #56]	; (8008600 <xPortStartScheduler+0xf0>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085ca:	f000 f8f3 	bl	80087b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085ce:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <xPortStartScheduler+0xf4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <xPortStartScheduler+0xf4>)
 80085d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80085d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085da:	f7ff ff85 	bl	80084e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085de:	f7ff f89b 	bl	8007718 <vTaskSwitchContext>
	prvTaskExitError();
 80085e2:	f7ff ff3b 	bl	800845c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	e000e400 	.word	0xe000e400
 80085f4:	20000d14 	.word	0x20000d14
 80085f8:	20000d18 	.word	0x20000d18
 80085fc:	e000ed20 	.word	0xe000ed20
 8008600:	20000008 	.word	0x20000008
 8008604:	e000ef34 	.word	0xe000ef34

08008608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	b672      	cpsid	i
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	b662      	cpsie	i
 8008622:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <vPortEnterCritical+0x5c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3301      	adds	r3, #1
 800862a:	4a0e      	ldr	r2, [pc, #56]	; (8008664 <vPortEnterCritical+0x5c>)
 800862c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <vPortEnterCritical+0x5c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d110      	bne.n	8008658 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <vPortEnterCritical+0x60>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <vPortEnterCritical+0x50>
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	b672      	cpsid	i
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	b662      	cpsie	i
 8008654:	603b      	str	r3, [r7, #0]
 8008656:	e7fe      	b.n	8008656 <vPortEnterCritical+0x4e>
	}
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	20000008 	.word	0x20000008
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <vPortExitCritical+0x50>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <vPortExitCritical+0x26>
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	b672      	cpsid	i
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	b662      	cpsie	i
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	e7fe      	b.n	8008690 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008692:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <vPortExitCritical+0x50>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3b01      	subs	r3, #1
 8008698:	4a08      	ldr	r2, [pc, #32]	; (80086bc <vPortExitCritical+0x50>)
 800869a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800869c:	4b07      	ldr	r3, [pc, #28]	; (80086bc <vPortExitCritical+0x50>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <vPortExitCritical+0x42>
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000008 	.word	0x20000008

080086c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086c0:	f3ef 8009 	mrs	r0, PSP
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	4b15      	ldr	r3, [pc, #84]	; (8008720 <pxCurrentTCBConst>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	f01e 0f10 	tst.w	lr, #16
 80086d0:	bf08      	it	eq
 80086d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	6010      	str	r0, [r2, #0]
 80086dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f380 8811 	msr	BASEPRI, r0
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	f7ff f810 	bl	8007718 <vTaskSwitchContext>
 80086f8:	f04f 0000 	mov.w	r0, #0
 80086fc:	f380 8811 	msr	BASEPRI, r0
 8008700:	bc09      	pop	{r0, r3}
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	6808      	ldr	r0, [r1, #0]
 8008706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870a:	f01e 0f10 	tst.w	lr, #16
 800870e:	bf08      	it	eq
 8008710:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008714:	f380 8809 	msr	PSP, r0
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop

08008720 <pxCurrentTCBConst>:
 8008720:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	b672      	cpsid	i
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	b662      	cpsie	i
 8008742:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008744:	f7fe ff28 	bl	8007598 <xTaskIncrementTick>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800874e:	4b06      	ldr	r3, [pc, #24]	; (8008768 <SysTick_Handler+0x40>)
 8008750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	2300      	movs	r3, #0
 8008758:	603b      	str	r3, [r7, #0]
	__asm volatile
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <vPortSetupTimerInterrupt+0x34>)
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <vPortSetupTimerInterrupt+0x38>)
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <vPortSetupTimerInterrupt+0x3c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <vPortSetupTimerInterrupt+0x40>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	099b      	lsrs	r3, r3, #6
 8008788:	4a09      	ldr	r2, [pc, #36]	; (80087b0 <vPortSetupTimerInterrupt+0x44>)
 800878a:	3b01      	subs	r3, #1
 800878c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800878e:	4b04      	ldr	r3, [pc, #16]	; (80087a0 <vPortSetupTimerInterrupt+0x34>)
 8008790:	2207      	movs	r2, #7
 8008792:	601a      	str	r2, [r3, #0]
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	e000e010 	.word	0xe000e010
 80087a4:	e000e018 	.word	0xe000e018
 80087a8:	20000000 	.word	0x20000000
 80087ac:	10624dd3 	.word	0x10624dd3
 80087b0:	e000e014 	.word	0xe000e014

080087b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80087c4 <vPortEnableVFP+0x10>
 80087b8:	6801      	ldr	r1, [r0, #0]
 80087ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087be:	6001      	str	r1, [r0, #0]
 80087c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087c2:	bf00      	nop
 80087c4:	e000ed88 	.word	0xe000ed88

080087c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087ce:	f3ef 8305 	mrs	r3, IPSR
 80087d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b0f      	cmp	r3, #15
 80087d8:	d915      	bls.n	8008806 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087da:	4a18      	ldr	r2, [pc, #96]	; (800883c <vPortValidateInterruptPriority+0x74>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087e4:	4b16      	ldr	r3, [pc, #88]	; (8008840 <vPortValidateInterruptPriority+0x78>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	7afa      	ldrb	r2, [r7, #11]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d20b      	bcs.n	8008806 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	607b      	str	r3, [r7, #4]
 8008804:	e7fe      	b.n	8008804 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008806:	4b0f      	ldr	r3, [pc, #60]	; (8008844 <vPortValidateInterruptPriority+0x7c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800880e:	4b0e      	ldr	r3, [pc, #56]	; (8008848 <vPortValidateInterruptPriority+0x80>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d90b      	bls.n	800882e <vPortValidateInterruptPriority+0x66>
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	b672      	cpsid	i
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	b662      	cpsie	i
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	e7fe      	b.n	800882c <vPortValidateInterruptPriority+0x64>
	}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000e3f0 	.word	0xe000e3f0
 8008840:	20000d14 	.word	0x20000d14
 8008844:	e000ed0c 	.word	0xe000ed0c
 8008848:	20000d18 	.word	0x20000d18

0800884c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008858:	f7fe fdd0 	bl	80073fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800885c:	4b5a      	ldr	r3, [pc, #360]	; (80089c8 <pvPortMalloc+0x17c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008864:	f000 f916 	bl	8008a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008868:	4b58      	ldr	r3, [pc, #352]	; (80089cc <pvPortMalloc+0x180>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4013      	ands	r3, r2
 8008870:	2b00      	cmp	r3, #0
 8008872:	f040 8090 	bne.w	8008996 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01e      	beq.n	80088ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800887c:	2208      	movs	r2, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d015      	beq.n	80088ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f023 0307 	bic.w	r3, r3, #7
 8008894:	3308      	adds	r3, #8
 8008896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00b      	beq.n	80088ba <pvPortMalloc+0x6e>
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	b672      	cpsid	i
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	b662      	cpsie	i
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e7fe      	b.n	80088b8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d06a      	beq.n	8008996 <pvPortMalloc+0x14a>
 80088c0:	4b43      	ldr	r3, [pc, #268]	; (80089d0 <pvPortMalloc+0x184>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d865      	bhi.n	8008996 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ca:	4b42      	ldr	r3, [pc, #264]	; (80089d4 <pvPortMalloc+0x188>)
 80088cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ce:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <pvPortMalloc+0x188>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088d4:	e004      	b.n	80088e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d903      	bls.n	80088f2 <pvPortMalloc+0xa6>
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1f1      	bne.n	80088d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088f2:	4b35      	ldr	r3, [pc, #212]	; (80089c8 <pvPortMalloc+0x17c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d04c      	beq.n	8008996 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2208      	movs	r2, #8
 8008902:	4413      	add	r3, r2
 8008904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	2308      	movs	r3, #8
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	429a      	cmp	r2, r3
 800891c:	d920      	bls.n	8008960 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <pvPortMalloc+0xfc>
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	b672      	cpsid	i
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	b662      	cpsie	i
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	e7fe      	b.n	8008946 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800895a:	69b8      	ldr	r0, [r7, #24]
 800895c:	f000 f8fc 	bl	8008b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008960:	4b1b      	ldr	r3, [pc, #108]	; (80089d0 <pvPortMalloc+0x184>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	4a19      	ldr	r2, [pc, #100]	; (80089d0 <pvPortMalloc+0x184>)
 800896c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800896e:	4b18      	ldr	r3, [pc, #96]	; (80089d0 <pvPortMalloc+0x184>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <pvPortMalloc+0x18c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d203      	bcs.n	8008982 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800897a:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <pvPortMalloc+0x184>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <pvPortMalloc+0x18c>)
 8008980:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <pvPortMalloc+0x180>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	431a      	orrs	r2, r3
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008996:	f7fe fd3f 	bl	8007418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <pvPortMalloc+0x170>
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	b672      	cpsid	i
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	b662      	cpsie	i
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e7fe      	b.n	80089ba <pvPortMalloc+0x16e>
	return pvReturn;
 80089bc:	69fb      	ldr	r3, [r7, #28]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3728      	adds	r7, #40	; 0x28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20004924 	.word	0x20004924
 80089cc:	20004930 	.word	0x20004930
 80089d0:	20004928 	.word	0x20004928
 80089d4:	2000491c 	.word	0x2000491c
 80089d8:	2000492c 	.word	0x2000492c

080089dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d04a      	beq.n	8008a84 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ee:	2308      	movs	r3, #8
 80089f0:	425b      	negs	r3, r3
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	4413      	add	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <vPortFree+0xb0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4013      	ands	r3, r2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <vPortFree+0x46>
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e7fe      	b.n	8008a20 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00b      	beq.n	8008a42 <vPortFree+0x66>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	b672      	cpsid	i
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	b662      	cpsie	i
 8008a3e:	60bb      	str	r3, [r7, #8]
 8008a40:	e7fe      	b.n	8008a40 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <vPortFree+0xb0>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d019      	beq.n	8008a84 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d115      	bne.n	8008a84 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <vPortFree+0xb0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	43db      	mvns	r3, r3
 8008a62:	401a      	ands	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a68:	f7fe fcc8 	bl	80073fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <vPortFree+0xb4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4413      	add	r3, r2
 8008a76:	4a06      	ldr	r2, [pc, #24]	; (8008a90 <vPortFree+0xb4>)
 8008a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a7a:	6938      	ldr	r0, [r7, #16]
 8008a7c:	f000 f86c 	bl	8008b58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a80:	f7fe fcca 	bl	8007418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a84:	bf00      	nop
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20004930 	.word	0x20004930
 8008a90:	20004928 	.word	0x20004928

08008a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aa0:	4b27      	ldr	r3, [pc, #156]	; (8008b40 <prvHeapInit+0xac>)
 8008aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00c      	beq.n	8008ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3307      	adds	r3, #7
 8008ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	4a1f      	ldr	r2, [pc, #124]	; (8008b40 <prvHeapInit+0xac>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <prvHeapInit+0xb0>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <prvHeapInit+0xb0>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0307 	bic.w	r3, r3, #7
 8008aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4a15      	ldr	r2, [pc, #84]	; (8008b48 <prvHeapInit+0xb4>)
 8008af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008af6:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <prvHeapInit+0xb4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008afe:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <prvHeapInit+0xb4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <prvHeapInit+0xb4>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <prvHeapInit+0xb8>)
 8008b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <prvHeapInit+0xbc>)
 8008b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b2c:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <prvHeapInit+0xc0>)
 8008b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b32:	601a      	str	r2, [r3, #0]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	20000d1c 	.word	0x20000d1c
 8008b44:	2000491c 	.word	0x2000491c
 8008b48:	20004924 	.word	0x20004924
 8008b4c:	2000492c 	.word	0x2000492c
 8008b50:	20004928 	.word	0x20004928
 8008b54:	20004930 	.word	0x20004930

08008b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b60:	4b28      	ldr	r3, [pc, #160]	; (8008c04 <prvInsertBlockIntoFreeList+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e002      	b.n	8008b6c <prvInsertBlockIntoFreeList+0x14>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d8f7      	bhi.n	8008b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4413      	add	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d108      	bne.n	8008b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d118      	bne.n	8008be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d00d      	beq.n	8008bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e008      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bd6:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvInsertBlockIntoFreeList+0xb0>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e003      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d002      	beq.n	8008bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	2000491c 	.word	0x2000491c
 8008c08:	20004924 	.word	0x20004924

08008c0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fc fa3b 	bl	800509e <USBD_LL_SetupStage>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	4613      	mov	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	440b      	add	r3, r1
 8008c50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7fc fa6b 	bl	8005134 <USBD_LL_DataOutStage>
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	3348      	adds	r3, #72	; 0x48
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f7fc fac2 	bl	8005216 <USBD_LL_DataInStage>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fc fbd0 	bl	800544e <USBD_LL_SOF>
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
 8008cce:	e008      	b.n	8008ce2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d102      	bne.n	8008cde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	73fb      	strb	r3, [r7, #15]
 8008cdc:	e001      	b.n	8008ce2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008cde:	f7f7 fe0f 	bl	8000900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ce8:	7bfa      	ldrb	r2, [r7, #15]
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fc fb78 	bl	80053e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fc fb31 	bl	8005360 <USBD_LL_Reset>
}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fc fb73 	bl	8005402 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <HAL_PCD_SuspendCallback+0x48>)
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	4a03      	ldr	r2, [pc, #12]	; (8008d50 <HAL_PCD_SuspendCallback+0x48>)
 8008d42:	f043 0306 	orr.w	r3, r3, #6
 8008d46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fc fb62 	bl	800542c <USBD_LL_Resume>
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fc fb88 	bl	800549c <USBD_LL_IsoOUTIncomplete>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fc fb69 	bl	8005482 <USBD_LL_IsoINIncomplete>
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fc fb75 	bl	80054b6 <USBD_LL_DevConnected>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fc fb72 	bl	80054cc <USBD_LL_DevDisconnected>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	70fb      	strb	r3, [r7, #3]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70bb      	strb	r3, [r7, #2]
 8008e06:	4613      	mov	r3, r2
 8008e08:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008e18:	78bb      	ldrb	r3, [r7, #2]
 8008e1a:	883a      	ldrh	r2, [r7, #0]
 8008e1c:	78f9      	ldrb	r1, [r7, #3]
 8008e1e:	f7f8 fe38 	bl	8001a92 <HAL_PCD_EP_Open>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f92b 	bl	8009084 <USBD_Get_USB_Status>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7f8 ff16 	bl	8001c8c <HAL_PCD_EP_SetStall>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f90c 	bl	8009084 <USBD_Get_USB_Status>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f8 ff5b 	bl	8001d54 <HAL_PCD_EP_ClrStall>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 f8ed 	bl	8009084 <USBD_Get_USB_Status>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008eca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	da0b      	bge.n	8008eec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	4613      	mov	r3, r2
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	333e      	adds	r3, #62	; 0x3e
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	e00b      	b.n	8008f04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f8 fd8a 	bl	8001a48 <HAL_PCD_SetAddress>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f8a2 	bl	8009084 <USBD_Get_USB_Status>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	72fb      	strb	r3, [r7, #11]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008f70:	893b      	ldrh	r3, [r7, #8]
 8008f72:	7af9      	ldrb	r1, [r7, #11]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	f7f8 fe3f 	bl	8001bf8 <HAL_PCD_EP_Transmit>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f87f 	bl	8009084 <USBD_Get_USB_Status>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008f8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	607a      	str	r2, [r7, #4]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	72fb      	strb	r3, [r7, #11]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008fb6:	893b      	ldrh	r3, [r7, #8]
 8008fb8:	7af9      	ldrb	r1, [r7, #11]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	f7f8 fdd1 	bl	8001b62 <HAL_PCD_EP_Receive>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 f85c 	bl	8009084 <USBD_Get_USB_Status>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008fd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_PCDEx_LPM_Callback+0x18>
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d01f      	beq.n	8009032 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8008ff2:	e03b      	b.n	800906c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008ffc:	f000 f83c 	bl	8009078 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009000:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <HAL_PCDEx_LPM_Callback+0x98>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <HAL_PCDEx_LPM_Callback+0x98>)
 8009006:	f023 0306 	bic.w	r3, r3, #6
 800900a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6812      	ldr	r2, [r2, #0]
 800901a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800902a:	4618      	mov	r0, r3
 800902c:	f7fc f9fe 	bl	800542c <USBD_LL_Resume>
    break;
 8009030:	e01c      	b.n	800906c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6812      	ldr	r2, [r2, #0]
 8009040:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009050:	4618      	mov	r0, r3
 8009052:	f7fc f9d6 	bl	8005402 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d005      	beq.n	800906a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <HAL_PCDEx_LPM_Callback+0x98>)
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	4a04      	ldr	r2, [pc, #16]	; (8009074 <HAL_PCDEx_LPM_Callback+0x98>)
 8009064:	f043 0306 	orr.w	r3, r3, #6
 8009068:	6113      	str	r3, [r2, #16]
    break;   
 800906a:	bf00      	nop
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed00 	.word	0xe000ed00

08009078 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800907c:	f7f7 faac 	bl	80005d8 <SystemClock_Config>
}
 8009080:	bf00      	nop
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d817      	bhi.n	80090c8 <USBD_Get_USB_Status+0x44>
 8009098:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <USBD_Get_USB_Status+0x1c>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080090b1 	.word	0x080090b1
 80090a4:	080090b7 	.word	0x080090b7
 80090a8:	080090bd 	.word	0x080090bd
 80090ac:	080090c3 	.word	0x080090c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
    break;
 80090b4:	e00b      	b.n	80090ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ba:	e008      	b.n	80090ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090bc:	2301      	movs	r3, #1
 80090be:	73fb      	strb	r3, [r7, #15]
    break;
 80090c0:	e005      	b.n	80090ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	73fb      	strb	r3, [r7, #15]
    break;
 80090c6:	e002      	b.n	80090ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090c8:	2302      	movs	r3, #2
 80090ca:	73fb      	strb	r3, [r7, #15]
    break;
 80090cc:	bf00      	nop
  }
  return usb_status;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4e0d      	ldr	r6, [pc, #52]	; (8009114 <__libc_init_array+0x38>)
 80090e0:	4c0d      	ldr	r4, [pc, #52]	; (8009118 <__libc_init_array+0x3c>)
 80090e2:	1ba4      	subs	r4, r4, r6
 80090e4:	10a4      	asrs	r4, r4, #2
 80090e6:	2500      	movs	r5, #0
 80090e8:	42a5      	cmp	r5, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	4e0b      	ldr	r6, [pc, #44]	; (800911c <__libc_init_array+0x40>)
 80090ee:	4c0c      	ldr	r4, [pc, #48]	; (8009120 <__libc_init_array+0x44>)
 80090f0:	f000 f82c 	bl	800914c <_init>
 80090f4:	1ba4      	subs	r4, r4, r6
 80090f6:	10a4      	asrs	r4, r4, #2
 80090f8:	2500      	movs	r5, #0
 80090fa:	42a5      	cmp	r5, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009104:	4798      	blx	r3
 8009106:	3501      	adds	r5, #1
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800910e:	4798      	blx	r3
 8009110:	3501      	adds	r5, #1
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	080091b8 	.word	0x080091b8
 8009118:	080091b8 	.word	0x080091b8
 800911c:	080091b8 	.word	0x080091b8
 8009120:	080091bc 	.word	0x080091bc

08009124 <memcpy>:
 8009124:	b510      	push	{r4, lr}
 8009126:	1e43      	subs	r3, r0, #1
 8009128:	440a      	add	r2, r1
 800912a:	4291      	cmp	r1, r2
 800912c:	d100      	bne.n	8009130 <memcpy+0xc>
 800912e:	bd10      	pop	{r4, pc}
 8009130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009138:	e7f7      	b.n	800912a <memcpy+0x6>

0800913a <memset>:
 800913a:	4402      	add	r2, r0
 800913c:	4603      	mov	r3, r0
 800913e:	4293      	cmp	r3, r2
 8009140:	d100      	bne.n	8009144 <memset+0xa>
 8009142:	4770      	bx	lr
 8009144:	f803 1b01 	strb.w	r1, [r3], #1
 8009148:	e7f9      	b.n	800913e <memset+0x4>
	...

0800914c <_init>:
 800914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914e:	bf00      	nop
 8009150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009152:	bc08      	pop	{r3}
 8009154:	469e      	mov	lr, r3
 8009156:	4770      	bx	lr

08009158 <_fini>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	bf00      	nop
 800915c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915e:	bc08      	pop	{r3}
 8009160:	469e      	mov	lr, r3
 8009162:	4770      	bx	lr
