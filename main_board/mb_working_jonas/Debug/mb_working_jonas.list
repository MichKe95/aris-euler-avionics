
mb_working_jonas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800d0c0  0800d0c0  0001d0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1c8  0800d1c8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1c8  0800d1c8  0001d1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d0  0800d1d0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d0  0800d1d0  0001d1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d4  0800d1d4  0001d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d1d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c60  200001f4  0800d3cc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20007e54  0800d3cc  00027e54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028185  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d42  00000000  00000000  000483a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001aa0  00000000  00000000  0004d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001868  00000000  00000000  0004eb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007af6  00000000  00000000  000503f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019678  00000000  00000000  00057eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f314b  00000000  00000000  00071566  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001646b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000746c  00000000  00000000  0016472c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d0a4 	.word	0x0800d0a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800d0a4 	.word	0x0800d0a4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0a8      	sub	sp, #160	; 0xa0
 8000ecc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f000 fd60 	bl	8001992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8bd 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 f985 	bl	80011e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eda:	f000 f945 	bl	8001168 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8000ede:	f006 ff93 	bl	8007e08 <osKernelInitialize>

  /* Create the mutex(es) */
  /* definition and creation of sb_1_mutex */
  const osMutexAttr_t sb_1_mutex_attributes = {
 8000ee2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <main+0x134>)
 8000ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000ef6:	4b42      	ldr	r3, [pc, #264]	; (8001000 <main+0x138>)
 8000ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000efc:	2350      	movs	r3, #80	; 0x50
 8000efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    .name = "sb_1_mutex",
    .cb_mem = &myMutex01ControlBlock,
    .cb_size = sizeof(myMutex01ControlBlock),
  };
  sb_1_mutexHandle = osMutexNew(&sb_1_mutex_attributes);
 8000f02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f06:	4618      	mov	r0, r3
 8000f08:	f007 f924 	bl	8008154 <osMutexNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <main+0x13c>)
 8000f10:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000f12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f16:	2224      	movs	r2, #36	; 0x24
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00a ff2f 	bl	800bd7e <memset>
 8000f20:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x140>)
 8000f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f2a:	2318      	movs	r3, #24
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f34:	461a      	mov	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	4834      	ldr	r0, [pc, #208]	; (800100c <main+0x144>)
 8000f3a:	f006 ffff 	bl	8007f3c <osThreadNew>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <main+0x148>)
 8000f42:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_state_est */
  const osThreadAttr_t task_state_est_attributes = {
 8000f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f48:	2224      	movs	r2, #36	; 0x24
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00a ff16 	bl	800bd7e <memset>
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <main+0x14c>)
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f56:	4b30      	ldr	r3, [pc, #192]	; (8001018 <main+0x150>)
 8000f58:	653b      	str	r3, [r7, #80]	; 0x50
 8000f5a:	235c      	movs	r3, #92	; 0x5c
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <main+0x154>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f68:	2308      	movs	r3, #8
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60
    .stack_size = sizeof(task_sfBuffer),
    .cb_mem = &task_sfControlBlock,
    .cb_size = sizeof(task_sfControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8000f6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f70:	461a      	mov	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <main+0x158>)
 8000f76:	f006 ffe1 	bl	8007f3c <osThreadNew>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <main+0x15c>)
 8000f7e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_controller */
  const osThreadAttr_t task_controller_attributes = {
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00a fef8 	bl	800bd7e <memset>
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <main+0x160>)
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <main+0x164>)
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f96:	235c      	movs	r3, #92	; 0x5c
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <main+0x168>)
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    .stack_size = sizeof(task_controllerBuffer),
    .cb_mem = &task_controllerControlBlock,
    .cb_size = sizeof(task_controllerControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	461a      	mov	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4820      	ldr	r0, [pc, #128]	; (8001034 <main+0x16c>)
 8000fb2:	f006 ffc3 	bl	8007f3c <osThreadNew>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <main+0x170>)
 8000fba:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_sens_read */
  const osThreadAttr_t task_sens_read_attributes = {
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2224      	movs	r2, #36	; 0x24
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00a fedb 	bl	800bd7e <memset>
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <main+0x174>)
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <main+0x178>)
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	235c      	movs	r3, #92	; 0x5c
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <main+0x17c>)
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	2308      	movs	r3, #8
 8000fe0:	61bb      	str	r3, [r7, #24]
    .stack_size = sizeof(task_sensor_reaBuffer),
    .cb_mem = &task_sensor_reaControlBlock,
    .cb_size = sizeof(task_sensor_reaControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4817      	ldr	r0, [pc, #92]	; (8001048 <main+0x180>)
 8000fea:	f006 ffa7 	bl	8007f3c <osThreadNew>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <main+0x184>)
 8000ff2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ff4:	f006 ff3c 	bl	8007e70 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x130>
 8000ffa:	bf00      	nop
 8000ffc:	0800d0c0 	.word	0x0800d0c0
 8001000:	20004b28 	.word	0x20004b28
 8001004:	20006524 	.word	0x20006524
 8001008:	0800d0cc 	.word	0x0800d0cc
 800100c:	0800122d 	.word	0x0800122d
 8001010:	20004b78 	.word	0x20004b78
 8001014:	0800d0d8 	.word	0x0800d0d8
 8001018:	200053a0 	.word	0x200053a0
 800101c:	20004b80 	.word	0x20004b80
 8001020:	08001879 	.word	0x08001879
 8001024:	20005380 	.word	0x20005380
 8001028:	0800d0e8 	.word	0x0800d0e8
 800102c:	20005bfc 	.word	0x20005bfc
 8001030:	20005d24 	.word	0x20005d24
 8001034:	08001521 	.word	0x08001521
 8001038:	20006528 	.word	0x20006528
 800103c:	0800d0f8 	.word	0x0800d0f8
 8001040:	20005cc8 	.word	0x20005cc8
 8001044:	200053fc 	.word	0x200053fc
 8001048:	0800181d 	.word	0x0800181d
 800104c:	20004b7c 	.word	0x20004b7c

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0b4      	sub	sp, #208	; 0xd0
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00a fe8d 	bl	800bd7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2284      	movs	r2, #132	; 0x84
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f00a fe7e 	bl	800bd7e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <SystemClock_Config+0x110>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a36      	ldr	r2, [pc, #216]	; (8001160 <SystemClock_Config+0x110>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <SystemClock_Config+0x110>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <SystemClock_Config+0x114>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <SystemClock_Config+0x114>)
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <SystemClock_Config+0x114>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d8:	23a8      	movs	r3, #168	; 0xa8
 80010da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 f8e8 	bl	80032c4 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010fa:	f000 f8b3 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001120:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fb3c 	bl	80037a4 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001132:	f000 f897 	bl	8001264 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001136:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800113a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fd3e 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001152:	f000 f887 	bl	8001264 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	37d0      	adds	r7, #208	; 0xd0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_SPI1_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <MX_SPI1_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_SPI1_Init+0x74>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x74>)
 8001182:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x74>)
 8001196:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800119a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SPI1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x74>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SPI1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0x74>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_SPI1_Init+0x74>)
 80011c8:	f003 f8b4 	bl	8004334 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f847 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005c58 	.word	0x20005c58
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_GPIO_Init+0x44>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <MX_GPIO_Init+0x44>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_GPIO_Init+0x44>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_GPIO_Init+0x44>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <MX_GPIO_Init+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_GPIO_Init+0x44>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001234:	f00a f82a 	bl	800b28c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f006 ff29 	bl	8008090 <osDelay>
 800123e:	e7fb      	b.n	8001238 <StartDefaultTask+0xc>

08001240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001252:	f000 fbab 	bl	80019ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210f      	movs	r1, #15
 80012ae:	f06f 0001 	mvn.w	r0, #1
 80012b2:	f000 fc75 	bl	8001ba0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_SPI_MspInit+0x7c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d128      	bne.n	8001338 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_SPI_MspInit+0x80>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_SPI_MspInit+0x80>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_SPI_MspInit+0x80>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001316:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001328:	2305      	movs	r3, #5
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_SPI_MspInit+0x84>)
 8001334:	f000 fc5e 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	2019      	movs	r0, #25
 8001362:	f000 fc1d 	bl	8001ba0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001366:	2019      	movs	r0, #25
 8001368:	f000 fc36 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_InitTick+0xa0>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <HAL_InitTick+0xa0>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6453      	str	r3, [r2, #68]	; 0x44
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_InitTick+0xa0>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001384:	f107 0210 	add.w	r2, r7, #16
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fbe8 	bl	8003b64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001394:	f002 fbd2 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 8001398:	4603      	mov	r3, r0
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_InitTick+0xa4>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	3b01      	subs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_InitTick+0xa8>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_InitTick+0xac>)
 80013b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_InitTick+0xa8>)
 80013b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_InitTick+0xa8>)
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_InitTick+0xa8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_InitTick+0xa8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <HAL_InitTick+0xa8>)
 80013ce:	f003 fcf3 	bl	8004db8 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d104      	bne.n	80013e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <HAL_InitTick+0xa8>)
 80013da:	f003 fd23 	bl	8004e24 <HAL_TIM_Base_Start_IT>
 80013de:	4603      	mov	r3, r0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	2000652c 	.word	0x2000652c
 80013f8:	40010000 	.word	0x40010000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001436:	f003 fd1f 	bl	8004e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000652c 	.word	0x2000652c

08001444 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <OTG_FS_IRQHandler+0x10>)
 800144a:	f000 feb7 	bl	80021bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20007a4c 	.word	0x20007a4c

08001458 <_sbrk>:
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x50>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x16>
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <_sbrk+0x50>)
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <_sbrk+0x54>)
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <_sbrk+0x50>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <_sbrk+0x50>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	466a      	mov	r2, sp
 800147e:	4293      	cmp	r3, r2
 8001480:	d907      	bls.n	8001492 <_sbrk+0x3a>
 8001482:	f00a fc37 	bl	800bcf4 <__errno>
 8001486:	4602      	mov	r2, r0
 8001488:	230c      	movs	r3, #12
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e006      	b.n	80014a0 <_sbrk+0x48>
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <_sbrk+0x50>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <_sbrk+0x50>)
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000210 	.word	0x20000210
 80014ac:	20007e58 	.word	0x20007e58

080014b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <SystemInit+0x5c>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <SystemInit+0x5c>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x60>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <SystemInit+0x60>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <SystemInit+0x60>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <SystemInit+0x60>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <SystemInit+0x60>)
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <SystemInit+0x64>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <SystemInit+0x60>)
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <SystemInit+0x68>)
 80014e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <SystemInit+0x60>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <SystemInit+0x60>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x60>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SystemInit+0x5c>)
 80014fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001500:	609a      	str	r2, [r3, #8]
#endif
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	40023800 	.word	0x40023800
 8001514:	fef6ffff 	.word	0xfef6ffff
 8001518:	24003010 	.word	0x24003010
 800151c:	00000000 	.word	0x00000000

08001520 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001526:	af00      	add	r7, sp, #0
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001536:	461a      	mov	r2, r3
 8001538:	2100      	movs	r1, #0
 800153a:	f00a fc20 	bl	800bd7e <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	461a      	mov	r2, r3
 8001554:	2300      	movs	r3, #0
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	6053      	str	r3, [r2, #4]
 800155a:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800158c:	f006 fca4 	bl	8007ed8 <osKernelGetTickCount>
 8001590:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8001594:	f006 fcc8 	bl	8007f28 <osKernelGetTickFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <vTaskController+0x1d8>)
 800159c:	fba3 2302 	umull	r2, r3, r3, r2
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80015a6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80015aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015ae:	4413      	add	r3, r2
 80015b0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 80015b4:	f107 021c 	add.w	r2, r7, #28
 80015b8:	f107 0110 	add.w	r1, r7, #16
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4618      	mov	r0, r3
 80015c2:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 80015c6:	f000 f899 	bl	80016fc <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb1 7a67 	vneg.f32	s14, s15
 80015ea:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80015fa:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	edd3 6a02 	vldr	s13, [r3, #8]
 800160e:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8001612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 800161a:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8001626:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800162a:	f7fe ff55 	bl	80004d8 <__aeabi_f2d>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	ed9f 1b29 	vldr	d1, [pc, #164]	; 80016d8 <vTaskController+0x1b8>
 8001636:	ec44 3b10 	vmov	d0, r3, r4
 800163a:	f00a fc8a 	bl	800bf52 <fmin>
 800163e:	eeb0 7a40 	vmov.f32	s14, s0
 8001642:	eef0 7a60 	vmov.f32	s15, s1
 8001646:	eeb0 1a47 	vmov.f32	s2, s14
 800164a:	eef0 1a67 	vmov.f32	s3, s15
 800164e:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80016e0 <vTaskController+0x1c0>
 8001652:	f00a fc57 	bl	800bf04 <fmax>
 8001656:	ec54 3b10 	vmov	r3, r4, d0
 800165a:	4618      	mov	r0, r3
 800165c:	4621      	mov	r1, r4
 800165e:	f7ff fa63 	bl	8000b28 <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 8001668:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001674:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167c:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	ee17 0a90 	vmov	r0, s15
 8001688:	f7fe ff26 	bl	80004d8 <__aeabi_f2d>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80016e8 <vTaskController+0x1c8>
 8001694:	ec44 3b10 	vmov	d0, r3, r4
 8001698:	f00a fc5b 	bl	800bf52 <fmin>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	eef0 7a60 	vmov.f32	s15, s1
 80016a4:	eeb0 1a47 	vmov.f32	s2, s14
 80016a8:	eef0 1a67 	vmov.f32	s3, s15
 80016ac:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80016f0 <vTaskController+0x1d0>
 80016b0:	f00a fc28 	bl	800bf04 <fmax>
 80016b4:	ec54 3b10 	vmov	r3, r4, d0
 80016b8:	4618      	mov	r0, r3
 80016ba:	4621      	mov	r1, r4
 80016bc:	f7ff fa34 	bl	8000b28 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 80016c6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80016ca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		/* Sleep */
		osDelayUntil(tick_count);
 80016ce:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80016d2:	f006 fd0b 	bl	80080ec <osDelayUntil>
		tick_count += tick_update;
 80016d6:	e766      	b.n	80015a6 <vTaskController+0x86>
 80016d8:	00000000 	.word	0x00000000
 80016dc:	3ff00000 	.word	0x3ff00000
	...
 80016ec:	40240000 	.word	0x40240000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	c0240000 	.word	0xc0240000
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	ed87 0a03 	vstr	s0, [r7, #12]
 8001706:	60b8      	str	r0, [r7, #8]
 8001708:	6079      	str	r1, [r7, #4]
 800170a:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e07b      	b.n	800180e <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7fe fede 	bl	80004d8 <__aeabi_f2d>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f1c3 031d 	rsb	r3, r3, #29
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fec4 	bl	80004b4 <__aeabi_i2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ec43 2b11 	vmov	d1, r2, r3
 8001734:	ec45 4b10 	vmov	d0, r4, r5
 8001738:	f00a fc5e 	bl	800bff8 <pow>
 800173c:	ec54 3b10 	vmov	r3, r4, d0
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	f7ff f9d0 	bl	8000ae8 <__aeabi_d2uiz>
 8001748:	4603      	mov	r3, r0
 800174a:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	ed93 7a00 	vldr	s14, [r3]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	edd3 6a00 	vldr	s13, [r3]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3308      	adds	r3, #8
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	edd3 6a00 	vldr	s13, [r3]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3308      	adds	r3, #8
 80017d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d6:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	edd3 6a00 	vldr	s13, [r3]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b1d      	cmp	r3, #29
 8001812:	dd80      	ble.n	8001716 <CalcPolynomial+0x1a>
	}

}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}

0800181c <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001824:	f006 fb58 	bl	8007ed8 <osKernelGetTickCount>
 8001828:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800182a:	f006 fb7d 	bl	8007f28 <osKernelGetTickFreq>
 800182e:	4602      	mov	r2, r0
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <vTaskSensRead+0x4c>)
 8001832:	fba3 2302 	umull	r2, r3, r3, r2
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */
		if(osMutexAcquire(sb_1_mutexHandle, SB1_MUTEX_TIMEOUT) == osOK) {
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <vTaskSensRead+0x50>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	211e      	movs	r1, #30
 8001848:	4618      	mov	r0, r3
 800184a:	f006 fd1d 	bl	8008288 <osMutexAcquire>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <vTaskSensRead+0x44>
			HAL_SPI_Receive(&hspi1, (uint8_t*) &sb1_baro, sizeof(sb1_baro), SB1_SPI_TIMEOUT);
 8001854:	231e      	movs	r3, #30
 8001856:	220c      	movs	r2, #12
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <vTaskSensRead+0x54>)
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <vTaskSensRead+0x58>)
 800185c:	f002 fdfc 	bl	8004458 <HAL_SPI_Receive>
		}
		osDelayUntil(tick_count);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f006 fc43 	bl	80080ec <osDelayUntil>
		tick_count += tick_update;
 8001866:	e7e8      	b.n	800183a <vTaskSensRead+0x1e>
 8001868:	10624dd3 	.word	0x10624dd3
 800186c:	20006524 	.word	0x20006524
 8001870:	20005cbc 	.word	0x20005cbc
 8001874:	20005c58 	.word	0x20005c58

08001878 <vTaskStateEst>:
		float H[NUMBER_SENSOR][A_SIZE], float Q[A_SIZE][A_SIZE],
		float R[NUMBER_SENSOR][NUMBER_SENSOR]);

void M_Calc_Size_A_vec(float A[A_SIZE][A_SIZE], float x[A_SIZE], float y[A_SIZE]);

void vTaskStateEst(void *argument) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b0c6      	sub	sp, #280	; 0x118
 800187c:	af00      	add	r7, sp, #0
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	6018      	str	r0, [r3, #0]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Variables */
	float Ad[A_SIZE][A_SIZE] = { 0 };
 8001882:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001886:	2224      	movs	r2, #36	; 0x24
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f00a fa77 	bl	800bd7e <memset>
	float Bd[A_SIZE][B_SIZE] = { 0 };
 8001890:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
	float Gd[A_SIZE][G_SIZE] = { 0 };
 800189c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
	float H[NUMBER_SENSOR][A_SIZE] = { 0 };
 80018a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018ac:	2224      	movs	r2, #36	; 0x24
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00a fa64 	bl	800bd7e <memset>
	float Q[A_SIZE][A_SIZE] = { 0 };
 80018b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f00a fa5d 	bl	800bd7e <memset>
	float R[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80018c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c8:	2224      	movs	r2, #36	; 0x24
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00a fa56 	bl	800bd7e <memset>
	float x_priori[A_SIZE] = { 0 };
 80018d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
	float x_est[A_SIZE] = { 0 };
 80018de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
	float P_priori[A_SIZE][A_SIZE] = { 0 };
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00a fa43 	bl	800bd7e <memset>
	float P_est[A_SIZE][A_SIZE] = { 0 };
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4618      	mov	r0, r3
 80018fe:	2324      	movs	r3, #36	; 0x24
 8001900:	461a      	mov	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	f00a fa3b 	bl	800bd7e <memset>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001908:	f006 fae6 	bl	8007ed8 <osKernelGetTickCount>
 800190c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8001910:	f006 fb0a 	bl	8007f28 <osKernelGetTickFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <vTaskStateEst+0xc4>)
 8001918:	fba3 2302 	umull	r2, r3, r3, r2
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	for (;;) {
		tick_count += tick_update;
 8001922:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800192a:	4413      	add	r3, r2
 800192c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		/* Prediction Step */


		osDelayUntil(tick_count);
 8001930:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001934:	f006 fbda 	bl	80080ec <osDelayUntil>
		tick_count += tick_update;
 8001938:	e7f3      	b.n	8001922 <vTaskStateEst+0xaa>
 800193a:	bf00      	nop
 800193c:	10624dd3 	.word	0x10624dd3

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001946:	e003      	b.n	8001950 <LoopCopyDataInit>

08001948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800194a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800194c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800194e:	3104      	adds	r1, #4

08001950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001958:	d3f6      	bcc.n	8001948 <CopyDataInit>
  ldr  r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800195c:	e002      	b.n	8001964 <LoopFillZerobss>

0800195e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800195e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001960:	f842 3b04 	str.w	r3, [r2], #4

08001964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001968:	d3f9      	bcc.n	800195e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196a:	f7ff fda1 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f00a f9c7 	bl	800bd00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff faa9 	bl	8000ec8 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800197c:	0800d1d8 	.word	0x0800d1d8
  ldr  r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001984:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001988:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 800198c:	20007e54 	.word	0x20007e54

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>

08001992 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001996:	2003      	movs	r0, #3
 8001998:	f000 f8f7 	bl	8001b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fcd5 	bl	800134c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80019a2:	f7ff fc67 	bl	8001274 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000004 	.word	0x20000004
 80019d0:	2000656c 	.word	0x2000656c

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000656c 	.word	0x2000656c

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_Delay+0x40>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000004 	.word	0x20000004

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	05fa0000 	.word	0x05fa0000

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff4c 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb2:	f7ff ff61 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f7ff ffb1 	bl	8001b24 <NVIC_EncodePriority>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff80 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff54 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e175      	b.n	8001f00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8164 	bne.w	8001efa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x4e>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d123      	bne.n	8001c8a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	69b9      	ldr	r1, [r7, #24]
 8001c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0203 	and.w	r2, r3, #3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d00b      	beq.n	8001cde <HAL_GPIO_Init+0xea>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd2:	2b11      	cmp	r3, #17
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80be 	beq.w	8001efa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a64      	ldr	r2, [pc, #400]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_GPIO_Init+0x320>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d96:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a57      	ldr	r2, [pc, #348]	; (8001f1c <HAL_GPIO_Init+0x328>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d037      	beq.n	8001e32 <HAL_GPIO_Init+0x23e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_GPIO_Init+0x32c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d031      	beq.n	8001e2e <HAL_GPIO_Init+0x23a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a55      	ldr	r2, [pc, #340]	; (8001f24 <HAL_GPIO_Init+0x330>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <HAL_GPIO_Init+0x236>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a54      	ldr	r2, [pc, #336]	; (8001f28 <HAL_GPIO_Init+0x334>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x232>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_GPIO_Init+0x338>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x22e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	; (8001f30 <HAL_GPIO_Init+0x33c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x22a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x340>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x344>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x348>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x34c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001e0a:	2309      	movs	r3, #9
 8001e0c:	e012      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e0e:	230a      	movs	r3, #10
 8001e10:	e010      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e12:	2308      	movs	r3, #8
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x240>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e44:	4934      	ldr	r1, [pc, #208]	; (8001f18 <HAL_GPIO_Init+0x324>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e52:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e76:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea0:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef4:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_GPIO_Init+0x350>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae86 	bls.w	8001c14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	; 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40021400 	.word	0x40021400
 8001f34:	40021800 	.word	0x40021800
 8001f38:	40021c00 	.word	0x40021c00
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40022400 	.word	0x40022400
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	b08f      	sub	sp, #60	; 0x3c
 8001f4c:	af0a      	add	r7, sp, #40	; 0x28
 8001f4e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e10a      	b.n	8002170 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f009 fb6a 	bl	800b648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fa8a 	bl	800549a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	687e      	ldr	r6, [r7, #4]
 8001f8e:	466d      	mov	r5, sp
 8001f90:	f106 0410 	add.w	r4, r6, #16
 8001f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa4:	1d33      	adds	r3, r6, #4
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f003 f96b 	bl	8005284 <USB_CoreInit>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0d7      	b.n	8002170 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fa78 	bl	80054bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e04a      	b.n	8002068 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	333d      	adds	r3, #61	; 0x3d
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	333c      	adds	r3, #60	; 0x3c
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b298      	uxth	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3342      	adds	r3, #66	; 0x42
 800200e:	4602      	mov	r2, r0
 8002010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	333f      	adds	r3, #63	; 0x3f
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3344      	adds	r3, #68	; 0x44
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3348      	adds	r3, #72	; 0x48
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3350      	adds	r3, #80	; 0x50
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3af      	bcc.n	8001fd2 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e044      	b.n	8002102 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3b5      	bcc.n	8002078 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	687e      	ldr	r6, [r7, #4]
 8002114:	466d      	mov	r5, sp
 8002116:	f106 0410 	add.w	r4, r6, #16
 800211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002126:	e885 0003 	stmia.w	r5, {r0, r1}
 800212a:	1d33      	adds	r3, r6, #4
 800212c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f003 f9ee 	bl	8005510 <USB_DevInit>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e014      	b.n	8002170 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f001 f88c 	bl	800327c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 f9ad 	bl	80064c8 <USB_DevDisconnect>

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002178 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_PCD_Start+0x16>
 800218a:	2302      	movs	r3, #2
 800218c:	e012      	b.n	80021b4 <HAL_PCD_Start+0x3c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f97c 	bl	8006498 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 f967 	bl	8005478 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08d      	sub	sp, #52	; 0x34
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fa21 	bl	800661e <USB_GetMode>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 83bd 	bne.w	800295e <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f985 	bl	80064f8 <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 83b3 	beq.w	800295c <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 f97c 	bl	80064f8 <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f002 0202 	and.w	r2, r2, #2
 8002218:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f96a 	bl	80064f8 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800222e:	d17b      	bne.n	8002328 <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f970 	bl	800651e <USB_ReadDevAllOutEpInterrupt>
 800223e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002240:	e06f      	b.n	8002322 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d064      	beq.n	8002316 <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f995 	bl	8006586 <USB_ReadDevOutEPInterrupt>
 800225c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00c      	beq.n	8002282 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	461a      	mov	r2, r3
 8002276:	2301      	movs	r3, #1
 8002278:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800227a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fe3d 	bl	8002efc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800228c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 ff3c 	bl	800310c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a0:	461a      	mov	r2, r3
 80022a2:	2308      	movs	r3, #8
 80022a4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022bc:	461a      	mov	r2, r3
 80022be:	2310      	movs	r3, #16
 80022c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d108      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022de:	461a      	mov	r2, r3
 80022e0:	2101      	movs	r1, #1
 80022e2:	f004 f9e1 	bl	80066a8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2320      	movs	r3, #32
 80022f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002314:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d18c      	bne.n	8002242 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 f8e3 	bl	80064f8 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800233c:	f040 80c4 	bne.w	80024c8 <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 f904 	bl	8006552 <USB_ReadDevAllInEpInterrupt>
 800234a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002350:	e0b6      	b.n	80024c0 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80ab 	beq.w	80024b4 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f004 f92a 	bl	80065c2 <USB_ReadDevInEPInterrupt>
 800236e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d05b      	beq.n	8002432 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	2201      	movs	r2, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	43db      	mvns	r3, r3
 8002394:	69f9      	ldr	r1, [r7, #28]
 8002396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800239a:	4013      	ands	r3, r2
 800239c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023aa:	461a      	mov	r2, r3
 80023ac:	2301      	movs	r3, #1
 80023ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11b      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3348      	adds	r3, #72	; 0x48
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4403      	add	r3, r0
 80023d8:	3344      	adds	r3, #68	; 0x44
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4419      	add	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4403      	add	r3, r0
 80023ec:	3348      	adds	r3, #72	; 0x48
 80023ee:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f009 f9a9 	bl	800b74e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d116      	bne.n	8002432 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	2b00      	cmp	r3, #0
 8002408:	d113      	bne.n	8002432 <HAL_PCD_IRQHandler+0x276>
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3350      	adds	r3, #80	; 0x50
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d108      	bne.n	8002432 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800242a:	461a      	mov	r2, r3
 800242c:	2101      	movs	r1, #1
 800242e:	f004 f93b 	bl	80066a8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002448:	461a      	mov	r2, r3
 800244a:	2308      	movs	r3, #8
 800244c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002464:	461a      	mov	r2, r3
 8002466:	2310      	movs	r3, #16
 8002468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002480:	461a      	mov	r2, r3
 8002482:	2340      	movs	r3, #64	; 0x40
 8002484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249c:	461a      	mov	r2, r3
 800249e:	2302      	movs	r3, #2
 80024a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fc96 	bl	8002de0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	3301      	adds	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	085b      	lsrs	r3, r3, #1
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f47f af45 	bne.w	8002352 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 f813 	bl	80064f8 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024dc:	d122      	bne.n	8002524 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f009 fb74 	bl	800bbf4 <HAL_PCDEx_LPM_Callback>
 800250c:	e002      	b.n	8002514 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f009 f994 	bl	800b83c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 ffe5 	bl	80064f8 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002538:	d112      	bne.n	8002560 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f009 f950 	bl	800b7f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800255e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 ffc7 	bl	80064f8 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002574:	d121      	bne.n	80025ba <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002584:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025aa:	2101      	movs	r1, #1
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f009 fb21 	bl	800bbf4 <HAL_PCDEx_LPM_Callback>
 80025b2:	e002      	b.n	80025ba <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f009 f91b 	bl	800b7f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 ff9a 	bl	80064f8 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	f040 80a7 	bne.w	8002720 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2110      	movs	r1, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 f90b 	bl	8005808 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f6:	e036      	b.n	8002666 <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800260a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261c:	0151      	lsls	r1, r2, #5
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	440a      	add	r2, r1
 8002622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800262a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800263e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002650:	0151      	lsls	r1, r2, #5
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	440a      	add	r2, r1
 8002656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800265a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800265e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	3301      	adds	r3, #1
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	d3c3      	bcc.n	80025f8 <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002682:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	2b00      	cmp	r3, #0
 800268a:	d016      	beq.n	80026ba <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269c:	f043 030b 	orr.w	r3, r3, #11
 80026a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b2:	f043 030b 	orr.w	r3, r3, #11
 80026b6:	6453      	str	r3, [r2, #68]	; 0x44
 80026b8:	e015      	b.n	80026e6 <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c8:	4619      	mov	r1, r3
 80026ca:	f242 032b 	movw	r3, #8235	; 0x202b
 80026ce:	4313      	orrs	r3, r2
 80026d0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e0:	f043 030b 	orr.w	r3, r3, #11
 80026e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800270a:	461a      	mov	r2, r3
 800270c:	f003 ffcc 	bl	80066a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f003 fee7 	bl	80064f8 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002734:	d12a      	bne.n	800278c <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f003 ff7e 	bl	800663c <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f003 f8c0 	bl	80058ca <USB_GetDevSpeed>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	e002      	b.n	800275e <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681c      	ldr	r4, [r3, #0]
 8002762:	f001 f9df 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8002766:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	4620      	mov	r0, r4
 8002772:	f002 fddf 	bl	8005334 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f009 f811 	bl	800b79e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800278a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 feb1 	bl	80064f8 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b10      	cmp	r3, #16
 800279e:	d161      	bne.n	8002864 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0210 	bic.w	r2, r2, #16
 80027ae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	0c5b      	lsrs	r3, r3, #17
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d124      	bne.n	8002826 <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d035      	beq.n	8002854 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a38      	ldr	r0, [r7, #32]
 80027fc:	f003 fd29 	bl	8006252 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280c:	441a      	add	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	e016      	b.n	8002854 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	0c5b      	lsrs	r3, r3, #17
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	2b06      	cmp	r3, #6
 8002830:	d110      	bne.n	8002854 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002838:	2208      	movs	r2, #8
 800283a:	4619      	mov	r1, r3
 800283c:	6a38      	ldr	r0, [r7, #32]
 800283e:	f003 fd08 	bl	8006252 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284e:	441a      	add	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0210 	orr.w	r2, r2, #16
 8002862:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fe45 	bl	80064f8 <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b08      	cmp	r3, #8
 8002876:	d10a      	bne.n	800288e <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f008 ff82 	bl	800b782 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 0208 	and.w	r2, r2, #8
 800288c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fe30 	bl	80064f8 <USB_ReadInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a2:	d10d      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f008 ffe6 	bl	800b87c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fe17 	bl	80064f8 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d10d      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f008 ffbb 	bl	800b858 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fdfe 	bl	80064f8 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d10a      	bne.n	800291e <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f008 ffc9 	bl	800b8a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800291c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fde8 	bl	80064f8 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b04      	cmp	r3, #4
 8002930:	d115      	bne.n	800295e <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f008 ffb9 	bl	800b8bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e000      	b.n	800295e <HAL_PCD_IRQHandler+0x7a2>
      return;
 800295c:	bf00      	nop
    }
  }
}
 800295e:	3734      	adds	r7, #52	; 0x34
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_PCD_SetAddress+0x1a>
 800297a:	2302      	movs	r3, #2
 800297c:	e013      	b.n	80029a6 <HAL_PCD_SetAddress+0x42>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fd58 	bl	800644c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	4608      	mov	r0, r1
 80029b8:	4611      	mov	r1, r2
 80029ba:	461a      	mov	r2, r3
 80029bc:	4603      	mov	r3, r0
 80029be:	70fb      	strb	r3, [r7, #3]
 80029c0:	460b      	mov	r3, r1
 80029c2:	803b      	strh	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da0f      	bge.n	80029f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3338      	adds	r3, #56	; 0x38
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	705a      	strb	r2, [r3, #1]
 80029f2:	e00f      	b.n	8002a14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a20:	883a      	ldrh	r2, [r7, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	78ba      	ldrb	r2, [r7, #2]
 8002a2a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a3e:	78bb      	ldrb	r3, [r7, #2]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d102      	bne.n	8002a4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_PCD_EP_Open+0xaa>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e00e      	b.n	8002a76 <HAL_PCD_EP_Open+0xc8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 ff54 	bl	8005914 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a74:	7afb      	ldrb	r3, [r7, #11]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da0f      	bge.n	8002ab2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	f003 020f 	and.w	r2, r3, #15
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	3338      	adds	r3, #56	; 0x38
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	705a      	strb	r2, [r3, #1]
 8002ab0:	e00f      	b.n	8002ad2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	f003 020f 	and.w	r2, r3, #15
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3304      	adds	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_PCD_EP_Close+0x6e>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e00e      	b.n	8002b0a <HAL_PCD_EP_Close+0x8c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 ff92 	bl	8005a24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b54:	7afb      	ldrb	r3, [r7, #11]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6979      	ldr	r1, [r7, #20]
 8002b86:	f003 f9e7 	bl	8005f58 <USB_EP0StartXfer>
 8002b8a:	e008      	b.n	8002b9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	6979      	ldr	r1, [r7, #20]
 8002b9a:	f002 ffc7 	bl	8005b2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	460b      	mov	r3, r1
 8002be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	7afb      	ldrb	r3, [r7, #11]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	3338      	adds	r3, #56	; 0x38
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2201      	movs	r2, #1
 8002c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6979      	ldr	r1, [r7, #20]
 8002c4a:	f003 f985 	bl	8005f58 <USB_EP0StartXfer>
 8002c4e:	e008      	b.n	8002c62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6979      	ldr	r1, [r7, #20]
 8002c5e:	f002 ff65 	bl	8005b2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d901      	bls.n	8002c8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e050      	b.n	8002d2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da0f      	bge.n	8002cb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3338      	adds	r3, #56	; 0x38
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	705a      	strb	r2, [r3, #1]
 8002cb0:	e00d      	b.n	8002cce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_PCD_EP_SetStall+0x82>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e01e      	b.n	8002d2c <HAL_PCD_EP_SetStall+0xc0>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 fad1 	bl	80062a4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	b2d9      	uxtb	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f003 fcc3 	bl	80066a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d901      	bls.n	8002d52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e042      	b.n	8002dd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da0f      	bge.n	8002d7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 020f 	and.w	r2, r3, #15
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3338      	adds	r3, #56	; 0x38
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
 8002d78:	e00f      	b.n	8002d9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_PCD_EP_ClrStall+0x86>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e00e      	b.n	8002dd8 <HAL_PCD_EP_ClrStall+0xa4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68f9      	ldr	r1, [r7, #12]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fad9 	bl	8006380 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3338      	adds	r3, #56	; 0x38
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d901      	bls.n	8002e18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e06c      	b.n	8002ef2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d902      	bls.n	8002e34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	3303      	adds	r3, #3
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3c:	e02b      	b.n	8002e96 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d902      	bls.n	8002e5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4603      	mov	r3, r0
 8002e78:	6978      	ldr	r0, [r7, #20]
 8002e7a:	f003 f9b5 	bl	80061e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	441a      	add	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	441a      	add	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d809      	bhi.n	8002ec0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d203      	bcs.n	8002ec0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1be      	bne.n	8002e3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d811      	bhi.n	8002ef0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	6939      	ldr	r1, [r7, #16]
 8002ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eec:	4013      	ands	r3, r2
 8002eee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	333c      	adds	r3, #60	; 0x3c
 8002f14:	3304      	adds	r3, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	f040 80b3 	bne.w	800309a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d028      	beq.n	8002f90 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a70      	ldr	r2, [pc, #448]	; (8003104 <PCD_EP_OutXfrComplete_int+0x208>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d90e      	bls.n	8002f64 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f62:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f008 fbc5 	bl	800b6f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f74:	461a      	mov	r2, r3
 8002f76:	2101      	movs	r1, #1
 8002f78:	f003 fb96 	bl	80066a8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	e0b3      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2320      	movs	r3, #32
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	e0a4      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 809f 	bne.w	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	; (8003104 <PCD_EP_OutXfrComplete_int+0x208>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d90f      	bls.n	8002fe2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	6093      	str	r3, [r2, #8]
 8002fe0:	e08a      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ff4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	0159      	lsls	r1, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003008:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4403      	add	r3, r0
 8003018:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800301c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4403      	add	r3, r0
 8003040:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4419      	add	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4403      	add	r3, r0
 8003056:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800305a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f008 fb58 	bl	800b718 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d144      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d138      	bne.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003090:	461a      	mov	r2, r3
 8003092:	2101      	movs	r1, #1
 8003094:	f003 fb08 	bl	80066a8 <USB_EP0_OutStart>
 8003098:	e02e      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <PCD_EP_OutXfrComplete_int+0x20c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d124      	bne.n	80030ec <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	461a      	mov	r2, r3
 80030ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	e01a      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	2320      	movs	r3, #32
 80030dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f008 fb17 	bl	800b718 <HAL_PCD_DataOutStageCallback>
 80030ea:	e005      	b.n	80030f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	4619      	mov	r1, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f008 fb10 	bl	800b718 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	4f54300a 	.word	0x4f54300a
 8003108:	4f54310a 	.word	0x4f54310a

0800310c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	333c      	adds	r3, #60	; 0x3c
 8003124:	3304      	adds	r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d113      	bne.n	800316a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d922      	bls.n	8003190 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01d      	beq.n	8003190 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	461a      	mov	r2, r3
 8003162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003166:	6093      	str	r3, [r2, #8]
 8003168:	e012      	b.n	8003190 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <PCD_EP_OutSetupPacket_int+0xbc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10e      	bne.n	8003190 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f008 faaf 	bl	800b6f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <PCD_EP_OutSetupPacket_int+0xb8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d90c      	bls.n	80031b8 <PCD_EP_OutSetupPacket_int+0xac>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031b0:	461a      	mov	r2, r3
 80031b2:	2101      	movs	r1, #1
 80031b4:	f003 fa78 	bl	80066a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	4f54300a 	.word	0x4f54300a
 80031c8:	4f54310a 	.word	0x4f54310a

080031cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70fb      	strb	r3, [r7, #3]
 80031d8:	4613      	mov	r3, r2
 80031da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031ea:	883b      	ldrh	r3, [r7, #0]
 80031ec:	0419      	lsls	r1, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
 80031f8:	e028      	b.n	800324c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e00d      	b.n	800322a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	3340      	adds	r3, #64	; 0x40
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	0c1b      	lsrs	r3, r3, #16
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	4413      	add	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	3301      	adds	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	3b01      	subs	r3, #1
 8003230:	429a      	cmp	r2, r3
 8003232:	d3ec      	bcc.n	800320e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003234:	883b      	ldrh	r3, [r7, #0]
 8003236:	0418      	lsls	r0, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	3b01      	subs	r3, #1
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4302      	orrs	r2, r0
 8003244:	3340      	adds	r3, #64	; 0x40
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	10000003 	.word	0x10000003

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e25c      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b96      	ldr	r3, [pc, #600]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f4:	4b93      	ldr	r3, [pc, #588]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d112      	bne.n	8003326 <HAL_RCC_OscConfig+0x62>
 8003300:	4b90      	ldr	r3, [pc, #576]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d10b      	bne.n	8003326 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x130>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e236      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x7a>
 8003330:	4b84      	ldr	r3, [pc, #528]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a83      	ldr	r2, [pc, #524]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e02e      	b.n	800339c <HAL_RCC_OscConfig+0xd8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x9c>
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7b      	ldr	r2, [pc, #492]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xd8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0xc0>
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b73      	ldr	r3, [pc, #460]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a72      	ldr	r2, [pc, #456]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xd8>
 8003384:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fb16 	bl	80019d4 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe fb12 	bl	80019d4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1ea      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b61      	ldr	r3, [pc, #388]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xe8>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fb02 	bl	80019d4 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fafe 	bl	80019d4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1d6      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x110>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d069      	beq.n	80034d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003402:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340e:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x190>
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x17a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1aa      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	493d      	ldr	r1, [pc, #244]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e040      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d023      	beq.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a38      	ldr	r2, [pc, #224]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fab4 	bl	80019d4 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe fab0 	bl	80019d4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e188      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	4b30      	ldr	r3, [pc, #192]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4929      	ldr	r1, [pc, #164]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
 80034a2:	e018      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe fa90 	bl	80019d4 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe fa8c 	bl	80019d4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e164      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d038      	beq.n	8003554 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d019      	beq.n	800351e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f6:	f7fe fa6d 	bl	80019d4 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fe:	f7fe fa69 	bl	80019d4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e141      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x23a>
 800351c:	e01a      	b.n	8003554 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe fa53 	bl	80019d4 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003532:	f7fe fa4f 	bl	80019d4 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d903      	bls.n	8003548 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e127      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
 8003544:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b94      	ldr	r3, [pc, #592]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ee      	bne.n	8003532 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a4 	beq.w	80036aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b8e      	ldr	r3, [pc, #568]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	4b8b      	ldr	r3, [pc, #556]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a8a      	ldr	r2, [pc, #552]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	4b85      	ldr	r3, [pc, #532]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d118      	bne.n	80035c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003596:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a81      	ldr	r2, [pc, #516]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fe fa17 	bl	80019d4 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fe fa13 	bl	80019d4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b64      	cmp	r3, #100	; 0x64
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e0eb      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035bc:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCC_OscConfig+0x4dc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x31a>
 80035d0:	4b72      	ldr	r3, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a71      	ldr	r2, [pc, #452]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	e02d      	b.n	800363a <HAL_RCC_OscConfig+0x376>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x33c>
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a6c      	ldr	r2, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a69      	ldr	r2, [pc, #420]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	f023 0304 	bic.w	r3, r3, #4
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	e01c      	b.n	800363a <HAL_RCC_OscConfig+0x376>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d10c      	bne.n	8003622 <HAL_RCC_OscConfig+0x35e>
 8003608:	4b64      	ldr	r3, [pc, #400]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a60      	ldr	r2, [pc, #384]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e00b      	b.n	800363a <HAL_RCC_OscConfig+0x376>
 8003622:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a5d      	ldr	r2, [pc, #372]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a5a      	ldr	r2, [pc, #360]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d015      	beq.n	800366e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fe f9c7 	bl	80019d4 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe f9c3 	bl	80019d4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e099      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	4b4e      	ldr	r3, [pc, #312]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0ee      	beq.n	800364a <HAL_RCC_OscConfig+0x386>
 800366c:	e014      	b.n	8003698 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fe f9b1 	bl	80019d4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fe f9ad 	bl	80019d4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e083      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ee      	bne.n	8003676 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369e:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a3e      	ldr	r2, [pc, #248]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d06f      	beq.n	8003792 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d067      	beq.n	800378e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d149      	bne.n	800375a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a34      	ldr	r2, [pc, #208]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fe f97f 	bl	80019d4 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe f97b 	bl	80019d4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e053      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	019b      	lsls	r3, r3, #6
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	4313      	orrs	r3, r2
 800371e:	4a1f      	ldr	r2, [pc, #124]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003724:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800372c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fe f94f 	bl	80019d4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe f94b 	bl	80019d4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e023      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x476>
 8003758:	e01b      	b.n	8003792 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a0f      	ldr	r2, [pc, #60]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fe f935 	bl	80019d4 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe f931 	bl	80019d4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e009      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x4d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x4aa>
 800378c:	e001      	b.n	8003792 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0ce      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b69      	ldr	r3, [pc, #420]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d910      	bls.n	80037ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b66      	ldr	r3, [pc, #408]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 020f 	bic.w	r2, r3, #15
 80037d2:	4964      	ldr	r1, [pc, #400]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b62      	ldr	r3, [pc, #392]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0b6      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800381c:	4b52      	ldr	r3, [pc, #328]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003826:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b4f      	ldr	r3, [pc, #316]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	494c      	ldr	r1, [pc, #304]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d040      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b46      	ldr	r3, [pc, #280]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d115      	bne.n	8003886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07d      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e071      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e069      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b38      	ldr	r3, [pc, #224]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4935      	ldr	r1, [pc, #212]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe f89c 	bl	80019d4 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fe f898 	bl	80019d4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e051      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d210      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 020f 	bic.w	r2, r3, #15
 80038de:	4921      	ldr	r1, [pc, #132]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e030      	b.n	800395a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b18      	ldr	r3, [pc, #96]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4915      	ldr	r1, [pc, #84]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490d      	ldr	r1, [pc, #52]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003936:	f000 f81d 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 800393a:	4601      	mov	r1, r0
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	fa21 f303 	lsr.w	r3, r1, r3
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <HAL_RCC_ClockConfig+0x1cc>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003952:	2000      	movs	r0, #0
 8003954:	f7fd fcfa 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	0800d168 	.word	0x0800d168
 8003970:	20000000 	.word	0x20000000

08003974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	2300      	movs	r3, #0
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d007      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x32>
 8003996:	2b08      	cmp	r3, #8
 8003998:	d008      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x38>
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 80b4 	bne.w	8003b08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039a2:	60bb      	str	r3, [r7, #8]
       break;
 80039a4:	e0b3      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a6:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039a8:	60bb      	str	r3, [r7, #8]
      break;
 80039aa:	e0b0      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ac:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039b6:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04a      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	ea03 0501 	and.w	r5, r3, r1
 80039d8:	ea04 0602 	and.w	r6, r4, r2
 80039dc:	4629      	mov	r1, r5
 80039de:	4632      	mov	r2, r6
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	0154      	lsls	r4, r2, #5
 80039ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039ee:	014b      	lsls	r3, r1, #5
 80039f0:	4619      	mov	r1, r3
 80039f2:	4622      	mov	r2, r4
 80039f4:	1b49      	subs	r1, r1, r5
 80039f6:	eb62 0206 	sbc.w	r2, r2, r6
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	0194      	lsls	r4, r2, #6
 8003a04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a08:	018b      	lsls	r3, r1, #6
 8003a0a:	1a5b      	subs	r3, r3, r1
 8003a0c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	00e2      	lsls	r2, r4, #3
 8003a1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a1e:	00d9      	lsls	r1, r3, #3
 8003a20:	460b      	mov	r3, r1
 8003a22:	4614      	mov	r4, r2
 8003a24:	195b      	adds	r3, r3, r5
 8003a26:	eb44 0406 	adc.w	r4, r4, r6
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	0262      	lsls	r2, r4, #9
 8003a34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a38:	0259      	lsls	r1, r3, #9
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	4621      	mov	r1, r4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7fd f8bc 	bl	8000bc8 <__aeabi_uldivmod>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e049      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a58:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	ea03 0501 	and.w	r5, r3, r1
 8003a6e:	ea04 0602 	and.w	r6, r4, r2
 8003a72:	4629      	mov	r1, r5
 8003a74:	4632      	mov	r2, r6
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	0154      	lsls	r4, r2, #5
 8003a80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a84:	014b      	lsls	r3, r1, #5
 8003a86:	4619      	mov	r1, r3
 8003a88:	4622      	mov	r2, r4
 8003a8a:	1b49      	subs	r1, r1, r5
 8003a8c:	eb62 0206 	sbc.w	r2, r2, r6
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	0194      	lsls	r4, r2, #6
 8003a9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a9e:	018b      	lsls	r3, r1, #6
 8003aa0:	1a5b      	subs	r3, r3, r1
 8003aa2:	eb64 0402 	sbc.w	r4, r4, r2
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ab4:	00d9      	lsls	r1, r3, #3
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4614      	mov	r4, r2
 8003aba:	195b      	adds	r3, r3, r5
 8003abc:	eb44 0406 	adc.w	r4, r4, r6
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	02a2      	lsls	r2, r4, #10
 8003aca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ace:	0299      	lsls	r1, r3, #10
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	f7fd f871 	bl	8000bc8 <__aeabi_uldivmod>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	60bb      	str	r3, [r7, #8]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b0a:	60bb      	str	r3, [r7, #8]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	007a1200 	.word	0x007a1200

08003b24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000000 	.word	0x20000000

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b40:	f7ff fff0 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0b5b      	lsrs	r3, r3, #13
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	0800d178 	.word	0x0800d178

08003b64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	220f      	movs	r2, #15
 8003b72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <HAL_RCC_GetClockConfig+0x60>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40023c00 	.word	0x40023c00

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bf0:	4b69      	ldr	r3, [pc, #420]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a68      	ldr	r2, [pc, #416]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bfa:	6093      	str	r3, [r2, #8]
 8003bfc:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	4964      	ldr	r1, [pc, #400]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c22:	4b5d      	ldr	r3, [pc, #372]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	4959      	ldr	r1, [pc, #356]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c40:	d101      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	494a      	ldr	r1, [pc, #296]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 808b 	beq.w	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	4a39      	ldr	r2, [pc, #228]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cc4:	4b35      	ldr	r3, [pc, #212]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a34      	ldr	r2, [pc, #208]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fe80 	bl	80019d4 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fd fe7c 	bl	80019d4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e31e      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cea:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf6:	4b28      	ldr	r3, [pc, #160]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d035      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d02e      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d3c:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d114      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fe44 	bl	80019d4 <HAL_GetTick>
 8003d4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fd fe40 	bl	80019d4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e2e0      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0ee      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7e:	d111      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d8e:	400b      	ands	r3, r1
 8003d90:	4901      	ldr	r1, [pc, #4]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	0ffffcff 	.word	0x0ffffcff
 8003da4:	4bac      	ldr	r3, [pc, #688]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4aab      	ldr	r2, [pc, #684]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003daa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dae:	6093      	str	r3, [r2, #8]
 8003db0:	4ba9      	ldr	r3, [pc, #676]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	49a6      	ldr	r1, [pc, #664]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dce:	4ba2      	ldr	r3, [pc, #648]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd4:	4aa0      	ldr	r2, [pc, #640]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003dde:	4b9e      	ldr	r3, [pc, #632]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	499b      	ldr	r1, [pc, #620]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dfc:	4b96      	ldr	r3, [pc, #600]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0a:	4993      	ldr	r1, [pc, #588]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e1e:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2c:	498a      	ldr	r1, [pc, #552]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e40:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4e:	4982      	ldr	r1, [pc, #520]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e62:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4979      	ldr	r1, [pc, #484]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e84:	4b74      	ldr	r3, [pc, #464]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	4971      	ldr	r1, [pc, #452]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea6:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f023 020c 	bic.w	r2, r3, #12
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	4968      	ldr	r1, [pc, #416]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec8:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	4960      	ldr	r1, [pc, #384]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eea:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	4957      	ldr	r1, [pc, #348]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f0c:	4b52      	ldr	r3, [pc, #328]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	494f      	ldr	r1, [pc, #316]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	4946      	ldr	r1, [pc, #280]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	493e      	ldr	r1, [pc, #248]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f80:	4935      	ldr	r1, [pc, #212]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f94:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa2:	492d      	ldr	r1, [pc, #180]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d011      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fb6:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc4:	4924      	ldr	r1, [pc, #144]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd4:	d101      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	4918      	ldr	r1, [pc, #96]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004018:	490f      	ldr	r1, [pc, #60]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d005      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800402e:	f040 80d8 	bne.w	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800403c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403e:	f7fd fcc9 	bl	80019d4 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004046:	f7fd fcc5 	bl	80019d4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d903      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e167      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004058:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800405c:	4bad      	ldr	r3, [pc, #692]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ee      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d021      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11d      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800407c:	4ba5      	ldr	r3, [pc, #660]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800408a:	4ba2      	ldr	r3, [pc, #648]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004090:	0e1b      	lsrs	r3, r3, #24
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	019a      	lsls	r2, r3, #6
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	071b      	lsls	r3, r3, #28
 80040b0:	4998      	ldr	r1, [pc, #608]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02e      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e2:	d129      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040e4:	4b8b      	ldr	r3, [pc, #556]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040f2:	4b88      	ldr	r3, [pc, #544]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	0f1b      	lsrs	r3, r3, #28
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	019a      	lsls	r2, r3, #6
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	431a      	orrs	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	071b      	lsls	r3, r3, #28
 8004118:	497e      	ldr	r1, [pc, #504]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004120:	4b7c      	ldr	r3, [pc, #496]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004126:	f023 021f 	bic.w	r2, r3, #31
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	3b01      	subs	r3, #1
 8004130:	4978      	ldr	r1, [pc, #480]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01d      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004144:	4b73      	ldr	r3, [pc, #460]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414a:	0e1b      	lsrs	r3, r3, #24
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004152:	4b70      	ldr	r3, [pc, #448]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	0f1b      	lsrs	r3, r3, #28
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	019a      	lsls	r2, r3, #6
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	041b      	lsls	r3, r3, #16
 800416c:	431a      	orrs	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	431a      	orrs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	071b      	lsls	r3, r3, #28
 8004178:	4966      	ldr	r1, [pc, #408]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	019a      	lsls	r2, r3, #6
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	071b      	lsls	r3, r3, #28
 80041a8:	495a      	ldr	r1, [pc, #360]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041b0:	4b58      	ldr	r3, [pc, #352]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a57      	ldr	r2, [pc, #348]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fd fc0a 	bl	80019d4 <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041c4:	f7fd fc06 	bl	80019d4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0a8      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d6:	4b4f      	ldr	r3, [pc, #316]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	f040 809e 	bne.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041ea:	4b4a      	ldr	r3, [pc, #296]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a49      	ldr	r2, [pc, #292]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80041f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fd fbed 	bl	80019d4 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041fe:	f7fd fbe9 	bl	80019d4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b64      	cmp	r3, #100	; 0x64
 800420a:	d901      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e08b      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004210:	4b40      	ldr	r3, [pc, #256]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800421c:	d0ef      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02e      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d12a      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004246:	4b33      	ldr	r3, [pc, #204]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004254:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	019a      	lsls	r2, r3, #6
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	4926      	ldr	r1, [pc, #152]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004288:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	491f      	ldr	r1, [pc, #124]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d022      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x726>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b0:	d11d      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	0f1b      	lsrs	r3, r3, #28
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	019a      	lsls	r2, r3, #6
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	490b      	ldr	r1, [pc, #44]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fa:	f7fd fb6b 	bl	80019d4 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004300:	e00a      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004302:	f7fd fb67 	bl	80019d4 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b64      	cmp	r3, #100	; 0x64
 800430e:	d903      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e009      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004314:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004324:	d1ed      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023800 	.word	0x40023800

08004334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e084      	b.n	8004450 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fc ffaf 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004386:	d902      	bls.n	800438e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e002      	b.n	8004394 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800438e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004392:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800439c:	d007      	beq.n	80043ae <HAL_SPI_Init+0x7a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a6:	d002      	beq.n	80043ae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043be:	d903      	bls.n	80043c8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
 80043c6:	e002      	b.n	80043ce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	ea42 0103 	orr.w	r1, r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0204 	and.w	r2, r3, #4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	ea42 0103 	orr.w	r1, r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004474:	d112      	bne.n	800449c <HAL_SPI_Receive+0x44>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10e      	bne.n	800449c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2204      	movs	r2, #4
 8004482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f908 	bl	80046a8 <HAL_SPI_TransmitReceive>
 8004498:	4603      	mov	r3, r0
 800449a:	e101      	b.n	80046a0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Receive+0x52>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e0fa      	b.n	80046a0 <HAL_SPI_Receive+0x248>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b2:	f7fd fa8f 	bl	80019d4 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044c8:	e0e1      	b.n	800468e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_SPI_Receive+0x7e>
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044da:	e0d8      	b.n	800468e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2204      	movs	r2, #4
 80044e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004526:	d908      	bls.n	800453a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004536:	605a      	str	r2, [r3, #4]
 8004538:	e007      	b.n	800454a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004552:	d107      	bne.n	8004564 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d007      	beq.n	8004582 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800458a:	d867      	bhi.n	800465c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800458c:	e030      	b.n	80045f0 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d117      	bne.n	80045cc <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f103 020c 	add.w	r2, r3, #12
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80045ca:	e011      	b.n	80045f0 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045cc:	f7fd fa02 	bl	80019d4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d803      	bhi.n	80045e4 <HAL_SPI_Receive+0x18c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d102      	bne.n	80045ea <HAL_SPI_Receive+0x192>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045ee:	e04e      	b.n	800468e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1c8      	bne.n	800458e <HAL_SPI_Receive+0x136>
 80045fc:	e034      	b.n	8004668 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d115      	bne.n	8004638 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	b292      	uxth	r2, r2
 8004618:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004636:	e011      	b.n	800465c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004638:	f7fd f9cc 	bl	80019d4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d803      	bhi.n	8004650 <HAL_SPI_Receive+0x1f8>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d102      	bne.n	8004656 <HAL_SPI_Receive+0x1fe>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	75fb      	strb	r3, [r7, #23]
          goto error;
 800465a:	e018      	b.n	800468e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ca      	bne.n	80045fe <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fb05 	bl	8004c7c <SPI_EndRxTransaction>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	e000      	b.n	800468e <HAL_SPI_Receive+0x236>
  }

error :
 800468c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046b6:	2301      	movs	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x26>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e1fb      	b.n	8004ac6 <HAL_SPI_TransmitReceive+0x41e>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046d6:	f7fd f97d 	bl	80019d4 <HAL_GetTick>
 80046da:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046e2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046ea:	887b      	ldrh	r3, [r7, #2]
 80046ec:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046ee:	887b      	ldrh	r3, [r7, #2]
 80046f0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046f2:	7efb      	ldrb	r3, [r7, #27]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d00e      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x6e>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fe:	d106      	bne.n	800470e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_SPI_TransmitReceive+0x66>
 8004708:	7efb      	ldrb	r3, [r7, #27]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d003      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800470e:	2302      	movs	r3, #2
 8004710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004714:	e1cd      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x80>
 8004722:	887b      	ldrh	r3, [r7, #2]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800472e:	e1c0      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b04      	cmp	r3, #4
 800473a:	d003      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2205      	movs	r2, #5
 8004740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	887a      	ldrh	r2, [r7, #2]
 8004754:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	887a      	ldrh	r2, [r7, #2]
 800476a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	887a      	ldrh	r2, [r7, #2]
 8004770:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004786:	d802      	bhi.n	800478e <HAL_SPI_TransmitReceive+0xe6>
 8004788:	8a3b      	ldrh	r3, [r7, #16]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d908      	bls.n	80047a0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	e007      	b.n	80047b0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d007      	beq.n	80047ce <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d6:	d97c      	bls.n	80048d2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x13e>
 80047e0:	8a7b      	ldrh	r3, [r7, #18]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d169      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	1c9a      	adds	r2, r3, #2
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480a:	e056      	b.n	80048ba <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d11b      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x1aa>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x1aa>
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	2b01      	cmp	r3, #1
 8004828:	d113      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	881a      	ldrh	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d11c      	bne.n	800489a <HAL_SPI_TransmitReceive+0x1f2>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	b292      	uxth	r2, r2
 8004878:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004896:	2301      	movs	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800489a:	f7fd f89b 	bl	80019d4 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d807      	bhi.n	80048ba <HAL_SPI_TransmitReceive+0x212>
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d003      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048b8:	e0fb      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1a3      	bne.n	800480c <HAL_SPI_TransmitReceive+0x164>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d19d      	bne.n	800480c <HAL_SPI_TransmitReceive+0x164>
 80048d0:	e0df      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x23a>
 80048da:	8a7b      	ldrh	r3, [r7, #18]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 80cb 	bne.w	8004a78 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d912      	bls.n	8004912 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	881a      	ldrh	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b02      	subs	r3, #2
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004910:	e0b2      	b.n	8004a78 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004938:	e09e      	b.n	8004a78 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b02      	cmp	r3, #2
 8004946:	d134      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x30a>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d02f      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x30a>
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2b01      	cmp	r3, #1
 8004956:	d12c      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d912      	bls.n	8004988 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	881a      	ldrh	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b02      	subs	r3, #2
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004986:	e012      	b.n	80049ae <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d148      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x3aa>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d042      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d923      	bls.n	8004a20 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	b292      	uxth	r2, r2
 80049e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	1c9a      	adds	r2, r3, #2
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b02      	subs	r3, #2
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d81f      	bhi.n	8004a4e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	e016      	b.n	8004a4e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f103 020c 	add.w	r2, r3, #12
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a52:	f7fc ffbf 	bl	80019d4 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d803      	bhi.n	8004a6a <HAL_SPI_TransmitReceive+0x3c2>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d102      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x3c8>
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a76:	e01c      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f47f af5b 	bne.w	800493a <HAL_SPI_TransmitReceive+0x292>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f af54 	bne.w	800493a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f948 	bl	8004d2c <SPI_EndRxTxTransaction>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	661a      	str	r2, [r3, #96]	; 0x60
 8004aae:	e000      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3728      	adds	r7, #40	; 0x28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ade:	e04c      	b.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d048      	beq.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ae8:	f7fc ff74 	bl	80019d4 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d902      	bls.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x30>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d13d      	bne.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b16:	d111      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d004      	beq.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d107      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b44:	d10f      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1a3      	bne.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bb0:	e057      	b.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bb8:	d106      	bne.n	8004bc8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d048      	beq.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bd0:	f7fc ff00 	bl	80019d4 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d902      	bls.n	8004be6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d13d      	bne.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfe:	d111      	bne.n	8004c24 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c08:	d004      	beq.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d107      	bne.n	8004c24 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2c:	d10f      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e008      	b.n	8004c74 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d19f      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c90:	d111      	bne.n	8004cb6 <SPI_EndRxTransaction+0x3a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9a:	d004      	beq.n	8004ca6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d107      	bne.n	8004cb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff04 	bl	8004ace <SPI_WaitFlagStateUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e023      	b.n	8004d24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce4:	d11d      	bne.n	8004d22 <SPI_EndRxTransaction+0xa6>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cee:	d004      	beq.n	8004cfa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d113      	bne.n	8004d22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff ff4b 	bl	8004ba2 <SPI_WaitFifoStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e000      	b.n	8004d24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff ff2c 	bl	8004ba2 <SPI_WaitFifoStateUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e027      	b.n	8004db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff feaf 	bl	8004ace <SPI_WaitFlagStateUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e014      	b.n	8004db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff ff05 	bl	8004ba2 <SPI_WaitFifoStateUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e000      	b.n	8004db0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e01d      	b.n	8004e06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f815 	bl	8004e0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f000 f986 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <HAL_TIM_Base_Start_IT+0x50>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d00b      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x42>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d007      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	00010007 	.word	0x00010007

08004e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0202 	mvn.w	r2, #2
 8004ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f905 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8f7 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f908 	bl	80050de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0204 	mvn.w	r2, #4
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8db 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8cd 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8de 	bl	80050de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d122      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0208 	mvn.w	r2, #8
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2204      	movs	r2, #4
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8b1 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8a3 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f8b4 	bl	80050de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0210 	mvn.w	r2, #16
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f887 	bl	80050ca <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f879 	bl	80050b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f88a 	bl	80050de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0201 	mvn.w	r2, #1
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc f922 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d10e      	bne.n	8005028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d107      	bne.n	8005028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f91a 	bl	800525c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f90d 	bl	8005270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d10e      	bne.n	8005082 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d107      	bne.n	8005082 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f838 	bl	80050f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b20      	cmp	r3, #32
 800508e:	d10e      	bne.n	80050ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d107      	bne.n	80050ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0220 	mvn.w	r2, #32
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f8cd 	bl	8005248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a40      	ldr	r2, [pc, #256]	; (800521c <TIM_Base_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3b      	ldr	r2, [pc, #236]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3a      	ldr	r2, [pc, #232]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2f      	ldr	r2, [pc, #188]	; (800521c <TIM_Base_SetConfig+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d027      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d023      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01f      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a29      	ldr	r2, [pc, #164]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d017      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	; (8005230 <TIM_Base_SetConfig+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	; (8005234 <TIM_Base_SetConfig+0x12c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00f      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <TIM_Base_SetConfig+0x130>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00b      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <TIM_Base_SetConfig+0x134>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a24      	ldr	r2, [pc, #144]	; (8005240 <TIM_Base_SetConfig+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <TIM_Base_SetConfig+0x13c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <TIM_Base_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a0c      	ldr	r2, [pc, #48]	; (800522c <TIM_Base_SetConfig+0x124>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d103      	bne.n	8005208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	615a      	str	r2, [r3, #20]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800
 800523c:	40001800 	.word	0x40001800
 8005240:	40001c00 	.word	0x40001c00
 8005244:	40002000 	.word	0x40002000

08005248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005284:	b084      	sub	sp, #16
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	f107 001c 	add.w	r0, r7, #28
 8005292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	2b01      	cmp	r3, #1
 800529a:	d120      	bne.n	80052de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <USB_CoreInit+0xac>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fa46 	bl	8006764 <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e010      	b.n	8005300 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fa3a 	bl	8006764 <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10b      	bne.n	800531e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f043 0206 	orr.w	r2, r3, #6
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800532a:	b004      	add	sp, #16
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	ffbdffbf 	.word	0xffbdffbf

08005334 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d165      	bne.n	8005414 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a41      	ldr	r2, [pc, #260]	; (8005450 <USB_SetTurnaroundTime+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d906      	bls.n	800535e <USB_SetTurnaroundTime+0x2a>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	4a40      	ldr	r2, [pc, #256]	; (8005454 <USB_SetTurnaroundTime+0x120>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d802      	bhi.n	800535e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005358:	230f      	movs	r3, #15
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e062      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <USB_SetTurnaroundTime+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d906      	bls.n	8005374 <USB_SetTurnaroundTime+0x40>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <USB_SetTurnaroundTime+0x124>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d802      	bhi.n	8005374 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800536e:	230e      	movs	r3, #14
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e057      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a38      	ldr	r2, [pc, #224]	; (8005458 <USB_SetTurnaroundTime+0x124>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d906      	bls.n	800538a <USB_SetTurnaroundTime+0x56>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4a37      	ldr	r2, [pc, #220]	; (800545c <USB_SetTurnaroundTime+0x128>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d802      	bhi.n	800538a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005384:	230d      	movs	r3, #13
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e04c      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a33      	ldr	r2, [pc, #204]	; (800545c <USB_SetTurnaroundTime+0x128>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d906      	bls.n	80053a0 <USB_SetTurnaroundTime+0x6c>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4a32      	ldr	r2, [pc, #200]	; (8005460 <USB_SetTurnaroundTime+0x12c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d802      	bhi.n	80053a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800539a:	230c      	movs	r3, #12
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e041      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <USB_SetTurnaroundTime+0x12c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d906      	bls.n	80053b6 <USB_SetTurnaroundTime+0x82>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a2e      	ldr	r2, [pc, #184]	; (8005464 <USB_SetTurnaroundTime+0x130>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d802      	bhi.n	80053b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053b0:	230b      	movs	r3, #11
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e036      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <USB_SetTurnaroundTime+0x130>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d906      	bls.n	80053cc <USB_SetTurnaroundTime+0x98>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4a29      	ldr	r2, [pc, #164]	; (8005468 <USB_SetTurnaroundTime+0x134>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d802      	bhi.n	80053cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053c6:	230a      	movs	r3, #10
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e02b      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a26      	ldr	r2, [pc, #152]	; (8005468 <USB_SetTurnaroundTime+0x134>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d906      	bls.n	80053e2 <USB_SetTurnaroundTime+0xae>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a25      	ldr	r2, [pc, #148]	; (800546c <USB_SetTurnaroundTime+0x138>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d802      	bhi.n	80053e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053dc:	2309      	movs	r3, #9
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e020      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <USB_SetTurnaroundTime+0x138>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d906      	bls.n	80053f8 <USB_SetTurnaroundTime+0xc4>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a20      	ldr	r2, [pc, #128]	; (8005470 <USB_SetTurnaroundTime+0x13c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d802      	bhi.n	80053f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053f2:	2308      	movs	r3, #8
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e015      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <USB_SetTurnaroundTime+0x13c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0xda>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <USB_SetTurnaroundTime+0x140>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d802      	bhi.n	800540e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005408:	2307      	movs	r3, #7
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e00a      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800540e:	2306      	movs	r3, #6
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e007      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800541a:	2309      	movs	r3, #9
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	e001      	b.n	8005424 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005420:	2309      	movs	r3, #9
 8005422:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	00d8acbf 	.word	0x00d8acbf
 8005454:	00e4e1bf 	.word	0x00e4e1bf
 8005458:	00f423ff 	.word	0x00f423ff
 800545c:	0106737f 	.word	0x0106737f
 8005460:	011a499f 	.word	0x011a499f
 8005464:	01312cff 	.word	0x01312cff
 8005468:	014ca43f 	.word	0x014ca43f
 800546c:	016e35ff 	.word	0x016e35ff
 8005470:	01a6ab1f 	.word	0x01a6ab1f
 8005474:	01e847ff 	.word	0x01e847ff

08005478 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f043 0201 	orr.w	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d106      	bne.n	80054e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	e00b      	b.n	8005500 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	e001      	b.n	8005500 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e003      	b.n	8005508 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005500:	2032      	movs	r0, #50	; 0x32
 8005502:	f7fc fa73 	bl	80019ec <HAL_Delay>

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005510:	b084      	sub	sp, #16
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800551e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e009      	b.n	8005544 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3340      	adds	r3, #64	; 0x40
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	3301      	adds	r3, #1
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b0e      	cmp	r3, #14
 8005548:	d9f2      	bls.n	8005530 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d112      	bne.n	8005576 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e005      	b.n	8005582 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	4619      	mov	r1, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	461a      	mov	r2, r3
 800559e:	680b      	ldr	r3, [r1, #0]
 80055a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10c      	bne.n	80055c2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ae:	2100      	movs	r1, #0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f971 	bl	8005898 <USB_SetDevSpeed>
 80055b6:	e018      	b.n	80055ea <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055b8:	2101      	movs	r1, #1
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f96c 	bl	8005898 <USB_SetDevSpeed>
 80055c0:	e013      	b.n	80055ea <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d10c      	bne.n	80055e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ce:	2100      	movs	r1, #0
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f961 	bl	8005898 <USB_SetDevSpeed>
 80055d6:	e008      	b.n	80055ea <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055d8:	2101      	movs	r1, #1
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f95c 	bl	8005898 <USB_SetDevSpeed>
 80055e0:	e003      	b.n	80055ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055e2:	2103      	movs	r1, #3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f957 	bl	8005898 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ea:	2110      	movs	r1, #16
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f90b 	bl	8005808 <USB_FlushTxFifo>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f929 	bl	8005854 <USB_FlushRxFifo>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	461a      	mov	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	e043      	b.n	80056be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564c:	d118      	bne.n	8005680 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e013      	b.n	8005692 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	461a      	mov	r2, r3
 8005678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e008      	b.n	8005692 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3301      	adds	r3, #1
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d3b7      	bcc.n	8005636 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e043      	b.n	8005754 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e2:	d118      	bne.n	8005716 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e013      	b.n	8005728 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	461a      	mov	r2, r3
 800570e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e008      	b.n	8005728 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	461a      	mov	r2, r3
 8005736:	2300      	movs	r3, #0
 8005738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800574c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3301      	adds	r3, #1
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d3b7      	bcc.n	80056cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2b01      	cmp	r3, #1
 8005774:	d110      	bne.n	8005798 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577c:	461a      	mov	r2, r3
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <USB_DevInit+0x2e8>)
 8005780:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	4619      	mov	r1, r3
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <USB_DevInit+0x2ec>)
 8005794:	4313      	orrs	r3, r2
 8005796:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f043 0210 	orr.w	r2, r3, #16
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <USB_DevInit+0x2f0>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f043 0208 	orr.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <USB_DevInit+0x2f4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr
 80057f8:	00800100 	.word	0x00800100
 80057fc:	00010003 	.word	0x00010003
 8005800:	803c3800 	.word	0x803c3800
 8005804:	40000004 	.word	0x40000004

08005808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3301      	adds	r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <USB_FlushTxFifo+0x48>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e006      	b.n	8005842 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b20      	cmp	r3, #32
 800583e:	d0f0      	beq.n	8005822 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	00030d40 	.word	0x00030d40

08005854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2210      	movs	r2, #16
 8005864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <USB_FlushRxFifo+0x40>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d0f0      	beq.n	8005866 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	00030d40 	.word	0x00030d40

08005898 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0306 	and.w	r3, r3, #6
 80058e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]
 80058ee:	e00a      	b.n	8005906 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d002      	beq.n	80058fc <USB_GetDevSpeed+0x32>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d102      	bne.n	8005902 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 80058fc:	2303      	movs	r3, #3
 80058fe:	75fb      	strb	r3, [r7, #23]
 8005900:	e001      	b.n	8005906 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005906:	7dfb      	ldrb	r3, [r7, #23]
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d139      	bne.n	80059a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	68f9      	ldr	r1, [r7, #12]
 800594a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594e:	4313      	orrs	r3, r2
 8005950:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d153      	bne.n	8005a10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	78db      	ldrb	r3, [r3, #3]
 8005982:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005984:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	059b      	lsls	r3, r3, #22
 800598a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800598c:	431a      	orrs	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	0159      	lsls	r1, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	440b      	add	r3, r1
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	4619      	mov	r1, r3
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <USB_ActivateEndpoint+0x10c>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	600b      	str	r3, [r1, #0]
 80059a2:	e035      	b.n	8005a10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	68f9      	ldr	r1, [r7, #12]
 80059be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d119      	bne.n	8005a10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059f8:	430b      	orrs	r3, r1
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	0159      	lsls	r1, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	440b      	add	r3, r1
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <USB_ActivateEndpoint+0x10c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	10008000 	.word	0x10008000

08005a24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d135      	bne.n	8005aac <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a60:	4013      	ands	r3, r2
 8005a62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	2101      	movs	r1, #1
 8005a76:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a84:	4013      	ands	r3, r2
 8005a86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	0159      	lsls	r1, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	; (8005b24 <USB_DeactivateEndpoint+0x100>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
 8005aaa:	e034      	b.n	8005b16 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	2101      	movs	r1, #1
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005acc:	4013      	ands	r3, r2
 8005ace:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af0:	4013      	ands	r3, r2
 8005af2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	0159      	lsls	r1, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	440b      	add	r3, r1
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <USB_DeactivateEndpoint+0x104>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	ec337800 	.word	0xec337800
 8005b28:	eff37800 	.word	0xeff37800

08005b2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 812d 	bne.w	8005da8 <USB_EPStartXfer+0x27c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d132      	bne.n	8005bbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	0159      	lsls	r1, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	4619      	mov	r1, r3
 8005b72:	4b8a      	ldr	r3, [pc, #552]	; (8005d9c <USB_EPStartXfer+0x270>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	440b      	add	r3, r1
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4b7a      	ldr	r3, [pc, #488]	; (8005da0 <USB_EPStartXfer+0x274>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	610b      	str	r3, [r1, #16]
 8005bba:	e074      	b.n	8005ca6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	0159      	lsls	r1, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	440b      	add	r3, r1
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4b71      	ldr	r3, [pc, #452]	; (8005da0 <USB_EPStartXfer+0x274>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	0159      	lsls	r1, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	440b      	add	r3, r1
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <USB_EPStartXfer+0x270>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6959      	ldr	r1, [r3, #20]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	440b      	add	r3, r1
 8005c18:	1e59      	subs	r1, r3, #1
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c22:	04d9      	lsls	r1, r3, #19
 8005c24:	4b5f      	ldr	r3, [pc, #380]	; (8005da4 <USB_EPStartXfer+0x278>)
 8005c26:	400b      	ands	r3, r1
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	0148      	lsls	r0, r1, #5
 8005c2c:	69f9      	ldr	r1, [r7, #28]
 8005c2e:	4401      	add	r1, r0
 8005c30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c4e:	69b9      	ldr	r1, [r7, #24]
 8005c50:	0148      	lsls	r0, r1, #5
 8005c52:	69f9      	ldr	r1, [r7, #28]
 8005c54:	4401      	add	r1, r0
 8005c56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	78db      	ldrb	r3, [r3, #3]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d11f      	bne.n	8005ca6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ca4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d10e      	bne.n	8005cca <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d022      	beq.n	8005cfa <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	6153      	str	r3, [r2, #20]
 8005cc8:	e017      	b.n	8005cfa <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	78db      	ldrb	r3, [r3, #3]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d013      	beq.n	8005cfa <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	2101      	movs	r1, #1
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	69f9      	ldr	r1, [r7, #28]
 8005cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d128      	bne.n	8005d54 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d110      	bne.n	8005d34 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e00f      	b.n	8005d54 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d52:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d72:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	78db      	ldrb	r3, [r3, #3]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	f040 80e1 	bne.w	8005f40 <USB_EPStartXfer+0x414>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	68d9      	ldr	r1, [r3, #12]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	b298      	uxth	r0, r3
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	4603      	mov	r3, r0
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa28 	bl	80061e8 <USB_WritePacket>
 8005d98:	e0d2      	b.n	8005f40 <USB_EPStartXfer+0x414>
 8005d9a:	bf00      	nop
 8005d9c:	e007ffff 	.word	0xe007ffff
 8005da0:	fff80000 	.word	0xfff80000
 8005da4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	0159      	lsls	r1, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	440b      	add	r3, r1
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4b61      	ldr	r3, [pc, #388]	; (8005f4c <USB_EPStartXfer+0x420>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	0159      	lsls	r1, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	440b      	add	r3, r1
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	4619      	mov	r1, r3
 8005de6:	4b5a      	ldr	r3, [pc, #360]	; (8005f50 <USB_EPStartXfer+0x424>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d123      	bne.n	8005e3c <USB_EPStartXfer+0x310>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0a:	69b9      	ldr	r1, [r7, #24]
 8005e0c:	0148      	lsls	r0, r1, #5
 8005e0e:	69f9      	ldr	r1, [r7, #28]
 8005e10:	4401      	add	r1, r0
 8005e12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e16:	4313      	orrs	r3, r2
 8005e18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e38:	6113      	str	r3, [r2, #16]
 8005e3a:	e033      	b.n	8005ea4 <USB_EPStartXfer+0x378>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4413      	add	r3, r2
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	04d9      	lsls	r1, r3, #19
 8005e64:	4b3b      	ldr	r3, [pc, #236]	; (8005f54 <USB_EPStartXfer+0x428>)
 8005e66:	400b      	ands	r3, r1
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	0148      	lsls	r0, r1, #5
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	4401      	add	r1, r0
 8005e70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	8af9      	ldrh	r1, [r7, #22]
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e94:	69b9      	ldr	r1, [r7, #24]
 8005e96:	0148      	lsls	r0, r1, #5
 8005e98:	69f9      	ldr	r1, [r7, #28]
 8005e9a:	4401      	add	r1, r0
 8005e9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10d      	bne.n	8005ec6 <USB_EPStartXfer+0x39a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <USB_EPStartXfer+0x39a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	68d9      	ldr	r1, [r3, #12]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	460a      	mov	r2, r1
 8005ec4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d128      	bne.n	8005f20 <USB_EPStartXfer+0x3f4>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d110      	bne.n	8005f00 <USB_EPStartXfer+0x3d4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	e00f      	b.n	8005f20 <USB_EPStartXfer+0x3f4>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	fff80000 	.word	0xfff80000
 8005f50:	e007ffff 	.word	0xe007ffff
 8005f54:	1ff80000 	.word	0x1ff80000

08005f58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f040 80bd 	bne.w	80060f4 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d132      	bne.n	8005fe8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	440b      	add	r3, r1
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4b90      	ldr	r3, [pc, #576]	; (80061e0 <USB_EP0StartXfer+0x288>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	0159      	lsls	r1, r3, #5
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	440b      	add	r3, r1
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4b80      	ldr	r3, [pc, #512]	; (80061e4 <USB_EP0StartXfer+0x28c>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	610b      	str	r3, [r1, #16]
 8005fe6:	e04e      	b.n	8006086 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	0159      	lsls	r1, r3, #5
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	440b      	add	r3, r1
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	4619      	mov	r1, r3
 8006004:	4b77      	ldr	r3, [pc, #476]	; (80061e4 <USB_EP0StartXfer+0x28c>)
 8006006:	4013      	ands	r3, r2
 8006008:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	0159      	lsls	r1, r3, #5
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	440b      	add	r3, r1
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	4619      	mov	r1, r3
 8006026:	4b6e      	ldr	r3, [pc, #440]	; (80061e0 <USB_EP0StartXfer+0x288>)
 8006028:	4013      	ands	r3, r2
 800602a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	695a      	ldr	r2, [r3, #20]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800605e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006076:	6939      	ldr	r1, [r7, #16]
 8006078:	0148      	lsls	r0, r1, #5
 800607a:	6979      	ldr	r1, [r7, #20]
 800607c:	4401      	add	r1, r0
 800607e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006082:	4313      	orrs	r3, r2
 8006084:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d10e      	bne.n	80060aa <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01e      	beq.n	80060d2 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	461a      	mov	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	6153      	str	r3, [r2, #20]
 80060a8:	e013      	b.n	80060d2 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	2101      	movs	r1, #1
 80060c4:	fa01 f303 	lsl.w	r3, r1, r3
 80060c8:	6979      	ldr	r1, [r7, #20]
 80060ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ce:	4313      	orrs	r3, r2
 80060d0:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e06d      	b.n	80061d0 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	0159      	lsls	r1, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	440b      	add	r3, r1
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	4619      	mov	r1, r3
 8006110:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <USB_EP0StartXfer+0x28c>)
 8006112:	4013      	ands	r3, r2
 8006114:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	0159      	lsls	r1, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	440b      	add	r3, r1
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	4619      	mov	r1, r3
 8006132:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <USB_EP0StartXfer+0x288>)
 8006134:	4013      	ands	r3, r2
 8006136:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006166:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617e:	6939      	ldr	r1, [r7, #16]
 8006180:	0148      	lsls	r0, r1, #5
 8006182:	6979      	ldr	r1, [r7, #20]
 8006184:	4401      	add	r1, r0
 8006186:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800618a:	4313      	orrs	r3, r2
 800618c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10d      	bne.n	80061b0 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	68d9      	ldr	r1, [r3, #12]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	460a      	mov	r2, r1
 80061ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e007ffff 	.word	0xe007ffff
 80061e4:	fff80000 	.word	0xfff80000

080061e8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	; 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4611      	mov	r1, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	460b      	mov	r3, r1
 80061f8:	71fb      	strb	r3, [r7, #7]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11a      	bne.n	8006244 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800620e:	88bb      	ldrh	r3, [r7, #4]
 8006210:	3303      	adds	r3, #3
 8006212:	089b      	lsrs	r3, r3, #2
 8006214:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e00f      	b.n	800623c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	031a      	lsls	r2, r3, #12
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006228:	461a      	mov	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3304      	adds	r3, #4
 8006234:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	3301      	adds	r3, #1
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d3eb      	bcc.n	800621c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3724      	adds	r7, #36	; 0x24
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006252:	b480      	push	{r7}
 8006254:	b089      	sub	sp, #36	; 0x24
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	4613      	mov	r3, r2
 800625e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	3303      	adds	r3, #3
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006270:	2300      	movs	r3, #0
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e00b      	b.n	800628e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	601a      	str	r2, [r3, #0]
    pDest++;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	3304      	adds	r3, #4
 8006286:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	3301      	adds	r3, #1
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	429a      	cmp	r2, r3
 8006294:	d3ef      	bcc.n	8006276 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006296:	69fb      	ldr	r3, [r7, #28]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3724      	adds	r7, #36	; 0x24
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d12c      	bne.n	800631a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db12      	blt.n	80062f8 <USB_EPSetStall+0x54>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00f      	beq.n	80062f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	440a      	add	r2, r1
 800630e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	e02b      	b.n	8006372 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	db12      	blt.n	8006352 <USB_EPSetStall+0xae>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00f      	beq.n	8006352 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	440a      	add	r2, r1
 8006348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006350:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006370:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d128      	bne.n	80063ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	78db      	ldrb	r3, [r3, #3]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d003      	beq.n	80063cc <USB_EPClearStall+0x4c>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	78db      	ldrb	r3, [r3, #3]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d138      	bne.n	800643e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e027      	b.n	800643e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006408:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	78db      	ldrb	r3, [r3, #3]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d003      	beq.n	800641e <USB_EPClearStall+0x9e>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	78db      	ldrb	r3, [r3, #3]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d10f      	bne.n	800643e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800646e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006486:	4313      	orrs	r3, r2
 8006488:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b2:	f023 0302 	bic.w	r3, r3, #2
 80064b6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064b8:	2003      	movs	r0, #3
 80064ba:	f7fb fa97 	bl	80019ec <HAL_Delay>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e2:	f043 0302 	orr.w	r3, r3, #2
 80064e6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064e8:	2003      	movs	r0, #3
 80064ea:	f7fb fa7f 	bl	80019ec <HAL_Delay>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	0c1b      	lsrs	r3, r3, #16
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	b29b      	uxth	r3, r3
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065b4:	68bb      	ldr	r3, [r7, #8]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	fa22 f303 	lsr.w	r3, r2, r3
 80065f2:	01db      	lsls	r3, r3, #7
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006610:	68bb      	ldr	r3, [r7, #8]
}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0301 	and.w	r3, r3, #1
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
	...

0800663c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	4619      	mov	r1, r3
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <USB_ActivateSetup+0x68>)
 800665a:	4013      	ands	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0306 	and.w	r3, r3, #6
 800666a:	2b04      	cmp	r3, #4
 800666c:	d109      	bne.n	8006682 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	f043 0303 	orr.w	r3, r3, #3
 8006680:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	fffff800 	.word	0xfffff800

080066a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	333c      	adds	r3, #60	; 0x3c
 80066be:	3304      	adds	r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4a26      	ldr	r2, [pc, #152]	; (8006760 <USB_EP0_OutStart+0xb8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d90a      	bls.n	80066e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066dc:	d101      	bne.n	80066e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e037      	b.n	8006752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	f043 0318 	orr.w	r3, r3, #24
 8006714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10f      	bne.n	8006750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800674e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	4f54300a 	.word	0x4f54300a

08006764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <USB_CoreReset+0x64>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e01b      	b.n	80067ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	daf2      	bge.n	8006770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <USB_CoreReset+0x64>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e006      	b.n	80067ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d0f0      	beq.n	800679a <USB_CoreReset+0x36>

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	00030d40 	.word	0x00030d40

080067cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7c1b      	ldrb	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d115      	bne.n	8006810 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e8:	2202      	movs	r2, #2
 80067ea:	2181      	movs	r1, #129	; 0x81
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f005 f8da 	bl	800b9a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067fc:	2202      	movs	r2, #2
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f005 f8d0 	bl	800b9a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800680e:	e012      	b.n	8006836 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	2202      	movs	r2, #2
 8006814:	2181      	movs	r1, #129	; 0x81
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f005 f8c5 	bl	800b9a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006822:	2340      	movs	r3, #64	; 0x40
 8006824:	2202      	movs	r2, #2
 8006826:	2101      	movs	r1, #1
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f005 f8bc 	bl	800b9a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006836:	2308      	movs	r3, #8
 8006838:	2203      	movs	r2, #3
 800683a:	2182      	movs	r1, #130	; 0x82
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f005 f8b2 	bl	800b9a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006848:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800684c:	f005 fa7c 	bl	800bd48 <malloc>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	e026      	b.n	80068b8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006870:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7c1b      	ldrb	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800689a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f005 f971 	bl	800bb88 <USBD_LL_PrepareReceive>
 80068a6:	e007      	b.n	80068b8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ae:	2340      	movs	r3, #64	; 0x40
 80068b0:	2101      	movs	r1, #1
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f005 f968 	bl	800bb88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068d2:	2181      	movs	r1, #129	; 0x81
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f005 f88c 	bl	800b9f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068e0:	2101      	movs	r1, #1
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f005 f885 	bl	800b9f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068f0:	2182      	movs	r1, #130	; 0x82
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f005 f87d 	bl	800b9f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006918:	4618      	mov	r0, r3
 800691a:	f005 fa1d 	bl	800bd58 <free>
    pdev->pClassData = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006940:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006956:	2b00      	cmp	r3, #0
 8006958:	d039      	beq.n	80069ce <USBD_CDC_Setup+0x9e>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d17c      	bne.n	8006a58 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	88db      	ldrh	r3, [r3, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d029      	beq.n	80069ba <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	b25b      	sxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	da11      	bge.n	8006994 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800697c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	88d2      	ldrh	r2, [r2, #6]
 8006982:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006984:	6939      	ldr	r1, [r7, #16]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	88db      	ldrh	r3, [r3, #6]
 800698a:	461a      	mov	r2, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 f9b7 	bl	8007d00 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006992:	e068      	b.n	8006a66 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	785a      	ldrb	r2, [r3, #1]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	88db      	ldrh	r3, [r3, #6]
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069aa:	6939      	ldr	r1, [r7, #16]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	88db      	ldrh	r3, [r3, #6]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 f9d2 	bl	8007d5c <USBD_CtlPrepareRx>
    break;
 80069b8:	e055      	b.n	8006a66 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	7850      	ldrb	r0, [r2, #1]
 80069c6:	2200      	movs	r2, #0
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	4798      	blx	r3
    break;
 80069cc:	e04b      	b.n	8006a66 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b0a      	cmp	r3, #10
 80069d4:	d017      	beq.n	8006a06 <USBD_CDC_Setup+0xd6>
 80069d6:	2b0b      	cmp	r3, #11
 80069d8:	d029      	beq.n	8006a2e <USBD_CDC_Setup+0xfe>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d133      	bne.n	8006a46 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d107      	bne.n	80069f8 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069e8:	f107 030c 	add.w	r3, r7, #12
 80069ec:	2202      	movs	r2, #2
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f985 	bl	8007d00 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069f6:	e02e      	b.n	8006a56 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f915 	bl	8007c2a <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a00:	2302      	movs	r3, #2
 8006a02:	75fb      	strb	r3, [r7, #23]
      break;
 8006a04:	e027      	b.n	8006a56 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d107      	bne.n	8006a20 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006a10:	f107 030f 	add.w	r3, r7, #15
 8006a14:	2201      	movs	r2, #1
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f971 	bl	8007d00 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006a1e:	e01a      	b.n	8006a56 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f901 	bl	8007c2a <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2c:	e013      	b.n	8006a56 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d00d      	beq.n	8006a54 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f8f5 	bl	8007c2a <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a40:	2302      	movs	r3, #2
 8006a42:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a44:	e006      	b.n	8006a54 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f8ee 	bl	8007c2a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	75fb      	strb	r3, [r7, #23]
      break;
 8006a52:	e000      	b.n	8006a56 <USBD_CDC_Setup+0x126>
      break;
 8006a54:	bf00      	nop
    }
    break;
 8006a56:	e006      	b.n	8006a66 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 f8e5 	bl	8007c2a <USBD_CtlError>
    ret = USBD_FAIL;
 8006a60:	2302      	movs	r3, #2
 8006a62:	75fb      	strb	r3, [r7, #23]
    break;
 8006a64:	bf00      	nop
  }

  return ret;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a82:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a8a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d03a      	beq.n	8006b0c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	331c      	adds	r3, #28
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d029      	beq.n	8006b00 <USBD_CDC_DataIn+0x90>
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	331c      	adds	r3, #28
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	78f9      	ldrb	r1, [r7, #3]
 8006ac0:	68b8      	ldr	r0, [r7, #8]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	1a5b      	subs	r3, r3, r1
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4403      	add	r3, r0
 8006acc:	3344      	adds	r3, #68	; 0x44
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ad4:	fb03 f301 	mul.w	r3, r3, r1
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d110      	bne.n	8006b00 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	331c      	adds	r3, #28
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006af2:	78f9      	ldrb	r1, [r7, #3]
 8006af4:	2300      	movs	r3, #0
 8006af6:	2200      	movs	r2, #0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f005 f822 	bl	800bb42 <USBD_LL_Transmit>
 8006afe:	e003      	b.n	8006b08 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e000      	b.n	8006b0e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b0c:	2302      	movs	r3, #2
  }
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f005 f84d 	bl	800bbce <USBD_LL_GetRxDataSize>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4798      	blx	r3

    return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e000      	b.n	8006b64 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b62:	2302      	movs	r3, #2
  }
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b7a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d015      	beq.n	8006bb2 <USBD_CDC_EP0_RxReady+0x46>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b8c:	2bff      	cmp	r3, #255	; 0xff
 8006b8e:	d010      	beq.n	8006bb2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	22ff      	movs	r2, #255	; 0xff
 8006bae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2243      	movs	r2, #67	; 0x43
 8006bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000090 	.word	0x20000090

08006bdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2243      	movs	r2, #67	; 0x43
 8006be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	2000004c 	.word	0x2000004c

08006bfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2243      	movs	r2, #67	; 0x43
 8006c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	200000d4 	.word	0x200000d4

08006c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	220a      	movs	r2, #10
 8006c28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	20000008 	.word	0x20000008

08006c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b087      	sub	sp, #28
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c7e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d017      	beq.n	8006d10 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7c1b      	ldrb	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d109      	bne.n	8006cfc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f004 ff47 	bl	800bb88 <USBD_LL_PrepareReceive>
 8006cfa:	e007      	b.n	8006d0c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	2101      	movs	r1, #1
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f004 ff3e 	bl	800bb88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e000      	b.n	8006d12 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d10:	2302      	movs	r3, #2
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e01a      	b.n	8006d68 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	79fa      	ldrb	r2, [r7, #7]
 8006d5e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f004 fdb9 	bl	800b8d8 <USBD_LL_Init>

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	e001      	b.n	8006d96 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d92:	2302      	movs	r3, #2
 8006d94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f004 fddf 	bl	800b970 <USBD_LL_Start>

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00c      	beq.n	8006e06 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	4611      	mov	r1, r2
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	4611      	mov	r1, r2
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 feb1 	bl	8007bb0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d00c      	beq.n	8006e8c <USBD_LL_SetupStage+0x56>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d302      	bcc.n	8006e7c <USBD_LL_SetupStage+0x46>
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d010      	beq.n	8006e9c <USBD_LL_SetupStage+0x66>
 8006e7a:	e017      	b.n	8006eac <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa05 	bl	8007294 <USBD_StdDevReq>
    break;
 8006e8a:	e01a      	b.n	8006ec2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fa67 	bl	8007368 <USBD_StdItfReq>
    break;
 8006e9a:	e012      	b.n	8006ec2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 faa5 	bl	80073f4 <USBD_StdEPReq>
    break;
 8006eaa:	e00a      	b.n	8006ec2 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006eb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f004 fdb8 	bl	800ba30 <USBD_LL_StallEP>
    break;
 8006ec0:	bf00      	nop
  }

  return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d14b      	bne.n	8006f78 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ee6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d134      	bne.n	8006f5c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d919      	bls.n	8006f32 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d203      	bcs.n	8006f20 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	e002      	b.n	8006f26 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 ff34 	bl	8007d98 <USBD_CtlContinueRx>
 8006f30:	e038      	b.n	8006fa4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d105      	bne.n	8006f54 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 ff31 	bl	8007dbc <USBD_CtlSendStatus>
 8006f5a:	e023      	b.n	8006fa4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f62:	2b05      	cmp	r3, #5
 8006f64:	d11e      	bne.n	8006fa4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f004 fd5d 	bl	800ba30 <USBD_LL_StallEP>
 8006f76:	e015      	b.n	8006fa4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00d      	beq.n	8006fa0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d108      	bne.n	8006fa0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	7afa      	ldrb	r2, [r7, #11]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	4798      	blx	r3
 8006f9e:	e001      	b.n	8006fa4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e000      	b.n	8006fa6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d17f      	bne.n	80070c2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d15c      	bne.n	800708c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d915      	bls.n	800700a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fe9e 	bl	8007d38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	2100      	movs	r1, #0
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f004 fdc0 	bl	800bb88 <USBD_LL_PrepareReceive>
 8007008:	e04e      	b.n	80070a8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	6912      	ldr	r2, [r2, #16]
 8007012:	fbb3 f1f2 	udiv	r1, r3, r2
 8007016:	fb02 f201 	mul.w	r2, r2, r1
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11c      	bne.n	800705a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d316      	bcc.n	800705a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007036:	429a      	cmp	r2, r3
 8007038:	d20f      	bcs.n	800705a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fe7a 	bl	8007d38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800704c:	2300      	movs	r3, #0
 800704e:	2200      	movs	r2, #0
 8007050:	2100      	movs	r1, #0
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f004 fd98 	bl	800bb88 <USBD_LL_PrepareReceive>
 8007058:	e026      	b.n	80070a8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800706c:	2b03      	cmp	r3, #3
 800706e:	d105      	bne.n	800707c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800707c:	2180      	movs	r1, #128	; 0x80
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f004 fcd6 	bl	800ba30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 feac 	bl	8007de2 <USBD_CtlReceiveStatus>
 800708a:	e00d      	b.n	80070a8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007092:	2b04      	cmp	r3, #4
 8007094:	d004      	beq.n	80070a0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070a0:	2180      	movs	r1, #128	; 0x80
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f004 fcc4 	bl	800ba30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d11d      	bne.n	80070ee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff fe82 	bl	8006dbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80070c0:	e015      	b.n	80070ee <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00d      	beq.n	80070ea <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d108      	bne.n	80070ea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	7afa      	ldrb	r2, [r7, #11]
 80070e2:	4611      	mov	r1, r2
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	4798      	blx	r3
 80070e8:	e001      	b.n	80070ee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070ea:	2302      	movs	r3, #2
 80070ec:	e000      	b.n	80070f0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	2200      	movs	r2, #0
 8007104:	2100      	movs	r1, #0
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f004 fc4d 	bl	800b9a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2240      	movs	r2, #64	; 0x40
 8007118:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800711c:	2340      	movs	r3, #64	; 0x40
 800711e:	2200      	movs	r2, #0
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f004 fc3f 	bl	800b9a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2240      	movs	r2, #64	; 0x40
 8007132:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	4611      	mov	r1, r2
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
  }

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d10b      	bne.n	8007210 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6852      	ldr	r2, [r2, #4]
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	4611      	mov	r1, r2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d004      	beq.n	80072b8 <USBD_StdDevReq+0x24>
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d002      	beq.n	80072b8 <USBD_StdDevReq+0x24>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <USBD_StdDevReq+0x34>
 80072b6:	e04c      	b.n	8007352 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
    break;
 80072c6:	e049      	b.n	800735c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	2b09      	cmp	r3, #9
 80072ce:	d83a      	bhi.n	8007346 <USBD_StdDevReq+0xb2>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <USBD_StdDevReq+0x44>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	08007329 	.word	0x08007329
 80072dc:	0800733d 	.word	0x0800733d
 80072e0:	08007347 	.word	0x08007347
 80072e4:	08007333 	.word	0x08007333
 80072e8:	08007347 	.word	0x08007347
 80072ec:	0800730b 	.word	0x0800730b
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007347 	.word	0x08007347
 80072f8:	0800731f 	.word	0x0800731f
 80072fc:	08007315 	.word	0x08007315
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9d2 	bl	80076ac <USBD_GetDescriptor>
      break;
 8007308:	e022      	b.n	8007350 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fae3 	bl	80078d8 <USBD_SetAddress>
      break;
 8007312:	e01d      	b.n	8007350 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fb20 	bl	800795c <USBD_SetConfig>
      break;
 800731c:	e018      	b.n	8007350 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fba9 	bl	8007a78 <USBD_GetConfig>
      break;
 8007326:	e013      	b.n	8007350 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fbd8 	bl	8007ae0 <USBD_GetStatus>
      break;
 8007330:	e00e      	b.n	8007350 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fc06 	bl	8007b46 <USBD_SetFeature>
      break;
 800733a:	e009      	b.n	8007350 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fc15 	bl	8007b6e <USBD_ClrFeature>
      break;
 8007344:	e004      	b.n	8007350 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc6e 	bl	8007c2a <USBD_CtlError>
      break;
 800734e:	bf00      	nop
    }
    break;
 8007350:	e004      	b.n	800735c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fc68 	bl	8007c2a <USBD_CtlError>
    break;
 800735a:	bf00      	nop
  }

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800737e:	2b20      	cmp	r3, #32
 8007380:	d003      	beq.n	800738a <USBD_StdItfReq+0x22>
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d001      	beq.n	800738a <USBD_StdItfReq+0x22>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d12a      	bne.n	80073e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007390:	3b01      	subs	r3, #1
 8007392:	2b02      	cmp	r3, #2
 8007394:	d81d      	bhi.n	80073d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	889b      	ldrh	r3, [r3, #4]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d813      	bhi.n	80073c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	88db      	ldrh	r3, [r3, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d110      	bne.n	80073dc <USBD_StdItfReq+0x74>
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10d      	bne.n	80073dc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fcfb 	bl	8007dbc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80073c6:	e009      	b.n	80073dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fc2d 	bl	8007c2a <USBD_CtlError>
      break;
 80073d0:	e004      	b.n	80073dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc28 	bl	8007c2a <USBD_CtlError>
      break;
 80073da:	e000      	b.n	80073de <USBD_StdItfReq+0x76>
      break;
 80073dc:	bf00      	nop
    }
    break;
 80073de:	e004      	b.n	80073ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fc21 	bl	8007c2a <USBD_CtlError>
    break;
 80073e8:	bf00      	nop
  }

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	889b      	ldrh	r3, [r3, #4]
 8007406:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007410:	2b20      	cmp	r3, #32
 8007412:	d004      	beq.n	800741e <USBD_StdEPReq+0x2a>
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d002      	beq.n	800741e <USBD_StdEPReq+0x2a>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <USBD_StdEPReq+0x3a>
 800741c:	e13b      	b.n	8007696 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
    break;
 800742c:	e138      	b.n	80076a0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007436:	2b20      	cmp	r3, #32
 8007438:	d10a      	bne.n	8007450 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	e128      	b.n	80076a2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d03e      	beq.n	80074d6 <USBD_StdEPReq+0xe2>
 8007458:	2b03      	cmp	r3, #3
 800745a:	d002      	beq.n	8007462 <USBD_StdEPReq+0x6e>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d070      	beq.n	8007542 <USBD_StdEPReq+0x14e>
 8007460:	e113      	b.n	800768a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007468:	2b02      	cmp	r3, #2
 800746a:	d002      	beq.n	8007472 <USBD_StdEPReq+0x7e>
 800746c:	2b03      	cmp	r3, #3
 800746e:	d015      	beq.n	800749c <USBD_StdEPReq+0xa8>
 8007470:	e02b      	b.n	80074ca <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <USBD_StdEPReq+0x9e>
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d009      	beq.n	8007492 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f004 fad4 	bl	800ba30 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f004 fad0 	bl	800ba30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007490:	e020      	b.n	80074d4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fbc8 	bl	8007c2a <USBD_CtlError>
        break;
 800749a:	e01b      	b.n	80074d4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	885b      	ldrh	r3, [r3, #2]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10e      	bne.n	80074c2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <USBD_StdEPReq+0xce>
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d008      	beq.n	80074c2 <USBD_StdEPReq+0xce>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	88db      	ldrh	r3, [r3, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f004 fab7 	bl	800ba30 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fc7a 	bl	8007dbc <USBD_CtlSendStatus>

        break;
 80074c8:	e004      	b.n	80074d4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fbac 	bl	8007c2a <USBD_CtlError>
        break;
 80074d2:	bf00      	nop
      }
      break;
 80074d4:	e0de      	b.n	8007694 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d002      	beq.n	80074e6 <USBD_StdEPReq+0xf2>
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d015      	beq.n	8007510 <USBD_StdEPReq+0x11c>
 80074e4:	e026      	b.n	8007534 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00c      	beq.n	8007506 <USBD_StdEPReq+0x112>
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b80      	cmp	r3, #128	; 0x80
 80074f0:	d009      	beq.n	8007506 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f004 fa9a 	bl	800ba30 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f004 fa96 	bl	800ba30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007504:	e01c      	b.n	8007540 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb8e 	bl	8007c2a <USBD_CtlError>
        break;
 800750e:	e017      	b.n	8007540 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	885b      	ldrh	r3, [r3, #2]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d112      	bne.n	800753e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f004 faa1 	bl	800ba6e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc45 	bl	8007dbc <USBD_CtlSendStatus>
        }
        break;
 8007532:	e004      	b.n	800753e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fb77 	bl	8007c2a <USBD_CtlError>
        break;
 800753c:	e000      	b.n	8007540 <USBD_StdEPReq+0x14c>
        break;
 800753e:	bf00      	nop
      }
      break;
 8007540:	e0a8      	b.n	8007694 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007548:	2b02      	cmp	r3, #2
 800754a:	d002      	beq.n	8007552 <USBD_StdEPReq+0x15e>
 800754c:	2b03      	cmp	r3, #3
 800754e:	d031      	beq.n	80075b4 <USBD_StdEPReq+0x1c0>
 8007550:	e095      	b.n	800767e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <USBD_StdEPReq+0x174>
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b80      	cmp	r3, #128	; 0x80
 800755c:	d004      	beq.n	8007568 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb62 	bl	8007c2a <USBD_CtlError>
          break;
 8007566:	e08f      	b.n	8007688 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	da0b      	bge.n	8007588 <USBD_StdEPReq+0x194>
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	3310      	adds	r3, #16
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4413      	add	r3, r2
 8007584:	3304      	adds	r3, #4
 8007586:	e00a      	b.n	800759e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2202      	movs	r2, #2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fba7 	bl	8007d00 <USBD_CtlSendData>
          break;
 80075b2:	e069      	b.n	8007688 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80075b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da11      	bge.n	80075e0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 020f 	and.w	r2, r3, #15
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	3318      	adds	r3, #24
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d117      	bne.n	8007606 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb26 	bl	8007c2a <USBD_CtlError>
            break;
 80075de:	e053      	b.n	8007688 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	f003 020f 	and.w	r2, r3, #15
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fb13 	bl	8007c2a <USBD_CtlError>
            break;
 8007604:	e040      	b.n	8007688 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	da0b      	bge.n	8007626 <USBD_StdEPReq+0x232>
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	3310      	adds	r3, #16
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	3304      	adds	r3, #4
 8007624:	e00a      	b.n	800763c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	4413      	add	r3, r2
 800763c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <USBD_StdEPReq+0x256>
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	d103      	bne.n	8007652 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	e00e      	b.n	8007670 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f004 fa28 	bl	800baac <USBD_LL_IsStallEP>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2201      	movs	r2, #1
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e002      	b.n	8007670 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2202      	movs	r2, #2
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fb42 	bl	8007d00 <USBD_CtlSendData>
          break;
 800767c:	e004      	b.n	8007688 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fad2 	bl	8007c2a <USBD_CtlError>
        break;
 8007686:	bf00      	nop
      }
      break;
 8007688:	e004      	b.n	8007694 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 facc 	bl	8007c2a <USBD_CtlError>
      break;
 8007692:	bf00      	nop
    }
    break;
 8007694:	e004      	b.n	80076a0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fac6 	bl	8007c2a <USBD_CtlError>
    break;
 800769e:	bf00      	nop
  }

  return ret;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b0e      	cmp	r3, #14
 80076c2:	f200 80e5 	bhi.w	8007890 <USBD_GetDescriptor+0x1e4>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBD_GetDescriptor+0x20>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	08007721 	.word	0x08007721
 80076d0:	08007739 	.word	0x08007739
 80076d4:	08007779 	.word	0x08007779
 80076d8:	08007891 	.word	0x08007891
 80076dc:	08007891 	.word	0x08007891
 80076e0:	0800783d 	.word	0x0800783d
 80076e4:	08007863 	.word	0x08007863
 80076e8:	08007891 	.word	0x08007891
 80076ec:	08007891 	.word	0x08007891
 80076f0:	08007891 	.word	0x08007891
 80076f4:	08007891 	.word	0x08007891
 80076f8:	08007891 	.word	0x08007891
 80076fc:	08007891 	.word	0x08007891
 8007700:	08007891 	.word	0x08007891
 8007704:	08007709 	.word	0x08007709
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 010a 	add.w	r1, r7, #10
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
    break;
 800771e:	e0bc      	b.n	800789a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	7c12      	ldrb	r2, [r2, #16]
 800772c:	f107 010a 	add.w	r1, r7, #10
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
    break;
 8007736:	e0b0      	b.n	800789a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7c1b      	ldrb	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10d      	bne.n	800775c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f107 020a 	add.w	r2, r7, #10
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	2202      	movs	r2, #2
 8007758:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800775a:	e09e      	b.n	800789a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	f107 020a 	add.w	r2, r7, #10
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	2202      	movs	r2, #2
 8007774:	701a      	strb	r2, [r3, #0]
    break;
 8007776:	e090      	b.n	800789a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b05      	cmp	r3, #5
 8007780:	d856      	bhi.n	8007830 <USBD_GetDescriptor+0x184>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <USBD_GetDescriptor+0xdc>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077a1 	.word	0x080077a1
 800778c:	080077b9 	.word	0x080077b9
 8007790:	080077d1 	.word	0x080077d1
 8007794:	080077e9 	.word	0x080077e9
 8007798:	08007801 	.word	0x08007801
 800779c:	08007819 	.word	0x08007819
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 010a 	add.w	r1, r7, #10
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
      break;
 80077b6:	e040      	b.n	800783a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 010a 	add.w	r1, r7, #10
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
      break;
 80077ce:	e034      	b.n	800783a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 010a 	add.w	r1, r7, #10
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
      break;
 80077e6:	e028      	b.n	800783a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 010a 	add.w	r1, r7, #10
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
      break;
 80077fe:	e01c      	b.n	800783a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 010a 	add.w	r1, r7, #10
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
      break;
 8007816:	e010      	b.n	800783a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 010a 	add.w	r1, r7, #10
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
      break;
 800782e:	e004      	b.n	800783a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9f9 	bl	8007c2a <USBD_CtlError>
      return;
 8007838:	e04b      	b.n	80078d2 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800783a:	e02e      	b.n	800789a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c1b      	ldrb	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	f107 020a 	add.w	r2, r7, #10
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
 8007854:	60f8      	str	r0, [r7, #12]
      break;
 8007856:	e020      	b.n	800789a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9e5 	bl	8007c2a <USBD_CtlError>
      return;
 8007860:	e037      	b.n	80078d2 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c1b      	ldrb	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10d      	bne.n	8007886 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	f107 020a 	add.w	r2, r7, #10
 8007876:	4610      	mov	r0, r2
 8007878:	4798      	blx	r3
 800787a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	2207      	movs	r2, #7
 8007882:	701a      	strb	r2, [r3, #0]
      break;
 8007884:	e009      	b.n	800789a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f9ce 	bl	8007c2a <USBD_CtlError>
      return;
 800788e:	e020      	b.n	80078d2 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9c9 	bl	8007c2a <USBD_CtlError>
    return;
 8007898:	e01b      	b.n	80078d2 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800789a:	897b      	ldrh	r3, [r7, #10]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d011      	beq.n	80078c4 <USBD_GetDescriptor+0x218>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	88db      	ldrh	r3, [r3, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00d      	beq.n	80078c4 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	88da      	ldrh	r2, [r3, #6]
 80078ac:	897b      	ldrh	r3, [r7, #10]
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bf28      	it	cs
 80078b2:	4613      	movcs	r3, r2
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80078b8:	897b      	ldrh	r3, [r7, #10]
 80078ba:	461a      	mov	r2, r3
 80078bc:	68f9      	ldr	r1, [r7, #12]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa1e 	bl	8007d00 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	88db      	ldrh	r3, [r3, #6]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa75 	bl	8007dbc <USBD_CtlSendStatus>
  }
}
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	889b      	ldrh	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d130      	bne.n	800794c <USBD_SetAddress+0x74>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	88db      	ldrh	r3, [r3, #6]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12c      	bne.n	800794c <USBD_SetAddress+0x74>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	2b7f      	cmp	r3, #127	; 0x7f
 80078f8:	d828      	bhi.n	800794c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800790c:	2b03      	cmp	r3, #3
 800790e:	d104      	bne.n	800791a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f989 	bl	8007c2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007918:	e01c      	b.n	8007954 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7bfa      	ldrb	r2, [r7, #15]
 800791e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f004 f8ec 	bl	800bb04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa45 	bl	8007dbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	e008      	b.n	8007954 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794a:	e003      	b.n	8007954 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f96b 	bl	8007c2a <USBD_CtlError>
  }
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	4b41      	ldr	r3, [pc, #260]	; (8007a74 <USBD_SetConfig+0x118>)
 800796e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007970:	4b40      	ldr	r3, [pc, #256]	; (8007a74 <USBD_SetConfig+0x118>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d904      	bls.n	8007982 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f955 	bl	8007c2a <USBD_CtlError>
 8007980:	e075      	b.n	8007a6e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007988:	2b02      	cmp	r3, #2
 800798a:	d002      	beq.n	8007992 <USBD_SetConfig+0x36>
 800798c:	2b03      	cmp	r3, #3
 800798e:	d023      	beq.n	80079d8 <USBD_SetConfig+0x7c>
 8007990:	e062      	b.n	8007a58 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007992:	4b38      	ldr	r3, [pc, #224]	; (8007a74 <USBD_SetConfig+0x118>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01a      	beq.n	80079d0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800799a:	4b36      	ldr	r3, [pc, #216]	; (8007a74 <USBD_SetConfig+0x118>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2203      	movs	r2, #3
 80079a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079ac:	4b31      	ldr	r3, [pc, #196]	; (8007a74 <USBD_SetConfig+0x118>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fa0d 	bl	8006dd2 <USBD_SetClassConfig>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d104      	bne.n	80079c8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f932 	bl	8007c2a <USBD_CtlError>
          return;
 80079c6:	e052      	b.n	8007a6e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f9f7 	bl	8007dbc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80079ce:	e04e      	b.n	8007a6e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f9f3 	bl	8007dbc <USBD_CtlSendStatus>
      break;
 80079d6:	e04a      	b.n	8007a6e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079d8:	4b26      	ldr	r3, [pc, #152]	; (8007a74 <USBD_SetConfig+0x118>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d112      	bne.n	8007a06 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80079e8:	4b22      	ldr	r3, [pc, #136]	; (8007a74 <USBD_SetConfig+0x118>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80079f2:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <USBD_SetConfig+0x118>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fa09 	bl	8006e10 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f9dc 	bl	8007dbc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007a04:	e033      	b.n	8007a6e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007a06:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <USBD_SetConfig+0x118>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d01d      	beq.n	8007a50 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff f9f7 	bl	8006e10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a22:	4b14      	ldr	r3, [pc, #80]	; (8007a74 <USBD_SetConfig+0x118>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a2c:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <USBD_SetConfig+0x118>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff f9cd 	bl	8006dd2 <USBD_SetClassConfig>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d104      	bne.n	8007a48 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f8f2 	bl	8007c2a <USBD_CtlError>
          return;
 8007a46:	e012      	b.n	8007a6e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9b7 	bl	8007dbc <USBD_CtlSendStatus>
      break;
 8007a4e:	e00e      	b.n	8007a6e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f9b3 	bl	8007dbc <USBD_CtlSendStatus>
      break;
 8007a56:	e00a      	b.n	8007a6e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8e5 	bl	8007c2a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <USBD_SetConfig+0x118>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff f9d2 	bl	8006e10 <USBD_ClrClassConfig>
      break;
 8007a6c:	bf00      	nop
    }
  }
}
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20000214 	.word	0x20000214

08007a78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	88db      	ldrh	r3, [r3, #6]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d004      	beq.n	8007a94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8cc 	bl	8007c2a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007a92:	e021      	b.n	8007ad8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	db17      	blt.n	8007ace <USBD_GetConfig+0x56>
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	dd02      	ble.n	8007aa8 <USBD_GetConfig+0x30>
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d00b      	beq.n	8007abe <USBD_GetConfig+0x46>
 8007aa6:	e012      	b.n	8007ace <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f922 	bl	8007d00 <USBD_CtlSendData>
      break;
 8007abc:	e00c      	b.n	8007ad8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f91a 	bl	8007d00 <USBD_CtlSendData>
      break;
 8007acc:	e004      	b.n	8007ad8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f8aa 	bl	8007c2a <USBD_CtlError>
      break;
 8007ad6:	bf00      	nop
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007af0:	3b01      	subs	r3, #1
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d81e      	bhi.n	8007b34 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	88db      	ldrh	r3, [r3, #6]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d004      	beq.n	8007b08 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f892 	bl	8007c2a <USBD_CtlError>
      break;
 8007b06:	e01a      	b.n	8007b3e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f043 0202 	orr.w	r2, r3, #2
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	330c      	adds	r3, #12
 8007b28:	2202      	movs	r2, #2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8e7 	bl	8007d00 <USBD_CtlSendData>
    break;
 8007b32:	e004      	b.n	8007b3e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f877 	bl	8007c2a <USBD_CtlError>
    break;
 8007b3c:	bf00      	nop
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	885b      	ldrh	r3, [r3, #2]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d106      	bne.n	8007b66 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f92b 	bl	8007dbc <USBD_CtlSendStatus>
  }

}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d80b      	bhi.n	8007b9c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d10c      	bne.n	8007ba6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f911 	bl	8007dbc <USBD_CtlSendStatus>
    }
    break;
 8007b9a:	e004      	b.n	8007ba6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f843 	bl	8007c2a <USBD_CtlError>
    break;
 8007ba4:	e000      	b.n	8007ba8 <USBD_ClrFeature+0x3a>
    break;
 8007ba6:	bf00      	nop
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781a      	ldrb	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	785a      	ldrb	r2, [r3, #1]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	3303      	adds	r3, #3
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4413      	add	r3, r2
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	3304      	adds	r3, #4
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	3305      	adds	r3, #5
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3306      	adds	r3, #6
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	3307      	adds	r3, #7
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	80da      	strh	r2, [r3, #6]

}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007c34:	2180      	movs	r1, #128	; 0x80
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f003 fefa 	bl	800ba30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f003 fef6 	bl	800ba30 <USBD_LL_StallEP>
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d032      	beq.n	8007cc8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 f834 	bl	8007cd0 <USBD_GetLen>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	75fa      	strb	r2, [r7, #23]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	7812      	ldrb	r2, [r2, #0]
 8007c86:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	75fa      	strb	r2, [r7, #23]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4413      	add	r3, r2
 8007c94:	2203      	movs	r2, #3
 8007c96:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c98:	e012      	b.n	8007cc0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	60fa      	str	r2, [r7, #12]
 8007ca0:	7dfa      	ldrb	r2, [r7, #23]
 8007ca2:	1c51      	adds	r1, r2, #1
 8007ca4:	75f9      	strb	r1, [r7, #23]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	440a      	add	r2, r1
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	75fa      	strb	r2, [r7, #23]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4413      	add	r3, r2
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e8      	bne.n	8007c9a <USBD_GetString+0x4e>
    }
  }
}
 8007cc8:	bf00      	nop
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007cdc:	e005      	b.n	8007cea <USBD_GetLen+0x1a>
    {
        len++;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1f5      	bne.n	8007cde <USBD_GetLen+0xe>
    }

    return len;
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d1c:	88fa      	ldrh	r2, [r7, #6]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007d22:	88fb      	ldrh	r3, [r7, #6]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	2100      	movs	r1, #0
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f003 ff0a 	bl	800bb42 <USBD_LL_Transmit>

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f003 fef8 	bl	800bb42 <USBD_LL_Transmit>

  return USBD_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f003 fefd 	bl	800bb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	4613      	mov	r3, r2
 8007da4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	2100      	movs	r1, #0
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f003 feeb 	bl	800bb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f003 feb5 	bl	800bb42 <USBD_LL_Transmit>

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2205      	movs	r2, #5
 8007dee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007df2:	2300      	movs	r3, #0
 8007df4:	2200      	movs	r2, #0
 8007df6:	2100      	movs	r1, #0
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f003 fec5 	bl	800bb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e0e:	f3ef 8305 	mrs	r3, IPSR
 8007e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e1e:	607b      	str	r3, [r7, #4]
  return(result);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <osKernelInitialize+0x32>
 8007e26:	4b11      	ldr	r3, [pc, #68]	; (8007e6c <osKernelInitialize+0x64>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d109      	bne.n	8007e42 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e32:	603b      	str	r3, [r7, #0]
  return(result);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007e3a:	f06f 0305 	mvn.w	r3, #5
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	e00c      	b.n	8007e5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e42:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <osKernelInitialize+0x64>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007e4a:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <osKernelInitialize+0x64>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000218 	.word	0x20000218

08007e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e76:	f3ef 8305 	mrs	r3, IPSR
 8007e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e82:	f3ef 8310 	mrs	r3, PRIMASK
 8007e86:	607b      	str	r3, [r7, #4]
  return(result);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <osKernelStart+0x32>
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <osKernelStart+0x64>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d109      	bne.n	8007eaa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e96:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <osKernelStart+0x3a>
    stat = osErrorISR;
 8007ea2:	f06f 0305 	mvn.w	r3, #5
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e00e      	b.n	8007ec8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <osKernelStart+0x64>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <osKernelStart+0x64>)
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007eb8:	f001 fc5e 	bl	8009778 <vTaskStartScheduler>
      stat = osOK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e002      	b.n	8007ec8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000218 	.word	0x20000218

08007ed8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10f      	bne.n	8007f0a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eea:	f3ef 8310 	mrs	r3, PRIMASK
 8007eee:	607b      	str	r3, [r7, #4]
  return(result);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <osKernelGetTickCount+0x32>
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <osKernelGetTickCount+0x4c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d109      	bne.n	8007f12 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007efe:	f3ef 8311 	mrs	r3, BASEPRI
 8007f02:	603b      	str	r3, [r7, #0]
  return(result);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8007f0a:	f001 fd59 	bl	80099c0 <xTaskGetTickCountFromISR>
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	e002      	b.n	8007f18 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8007f12:	f001 fd45 	bl	80099a0 <xTaskGetTickCount>
 8007f16:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007f18:	68fb      	ldr	r3, [r7, #12]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000218 	.word	0x20000218

08007f28 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8007f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b092      	sub	sp, #72	; 0x48
 8007f40:	af04      	add	r7, sp, #16
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f4c:	f3ef 8305 	mrs	r3, IPSR
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f040 8094 	bne.w	8008082 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5e:	623b      	str	r3, [r7, #32]
  return(result);
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 808d 	bne.w	8008082 <osThreadNew+0x146>
 8007f68:	4b48      	ldr	r3, [pc, #288]	; (800808c <osThreadNew+0x150>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d106      	bne.n	8007f7e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f70:	f3ef 8311 	mrs	r3, BASEPRI
 8007f74:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 8082 	bne.w	8008082 <osThreadNew+0x146>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d07e      	beq.n	8008082 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007f88:	2318      	movs	r3, #24
 8007f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007f90:	f107 031b 	add.w	r3, r7, #27
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d045      	beq.n	800802e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <osThreadNew+0x74>
        name = attr->name;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <osThreadNew+0x9a>
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	2b38      	cmp	r3, #56	; 0x38
 8007fc8:	d805      	bhi.n	8007fd6 <osThreadNew+0x9a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <osThreadNew+0x9e>
        return (NULL);
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e054      	b.n	8008084 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <osThreadNew+0xd4>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b5b      	cmp	r3, #91	; 0x5b
 8007ff8:	d90a      	bls.n	8008010 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d006      	beq.n	8008010 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <osThreadNew+0xd4>
        mem = 1;
 800800a:	2301      	movs	r3, #1
 800800c:	62bb      	str	r3, [r7, #40]	; 0x28
 800800e:	e010      	b.n	8008032 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10c      	bne.n	8008032 <osThreadNew+0xf6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d108      	bne.n	8008032 <osThreadNew+0xf6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <osThreadNew+0xf6>
          mem = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
 800802c:	e001      	b.n	8008032 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	2b01      	cmp	r3, #1
 8008036:	d110      	bne.n	800805a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008040:	9202      	str	r2, [sp, #8]
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f001 f940 	bl	80092d4 <xTaskCreateStatic>
 8008054:	4603      	mov	r3, r0
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e013      	b.n	8008082 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	b29a      	uxth	r2, r3
 8008064:	f107 0314 	add.w	r3, r7, #20
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f001 f98d 	bl	8009392 <xTaskCreate>
 8008078:	4603      	mov	r3, r0
 800807a:	2b01      	cmp	r3, #1
 800807c:	d001      	beq.n	8008082 <osThreadNew+0x146>
          hTask = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008082:	697b      	ldr	r3, [r7, #20]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3738      	adds	r7, #56	; 0x38
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000218 	.word	0x20000218

08008090 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008098:	f3ef 8305 	mrs	r3, IPSR
 800809c:	613b      	str	r3, [r7, #16]
  return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a4:	f3ef 8310 	mrs	r3, PRIMASK
 80080a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <osDelay+0x34>
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <osDelay+0x58>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d109      	bne.n	80080cc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080b8:	f3ef 8311 	mrs	r3, BASEPRI
 80080bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <osDelay+0x3c>
    stat = osErrorISR;
 80080c4:	f06f 0305 	mvn.w	r3, #5
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e007      	b.n	80080dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fb18 	bl	800970c <vTaskDelay>
    }
  }

  return (stat);
 80080dc:	697b      	ldr	r3, [r7, #20]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000218 	.word	0x20000218

080080ec <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f4:	f3ef 8305 	mrs	r3, IPSR
 80080f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80080fa:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008100:	f3ef 8310 	mrs	r3, PRIMASK
 8008104:	617b      	str	r3, [r7, #20]
  return(result);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <osDelayUntil+0x34>
 800810c:	4b10      	ldr	r3, [pc, #64]	; (8008150 <osDelayUntil+0x64>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d109      	bne.n	8008128 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008114:	f3ef 8311 	mrs	r3, BASEPRI
 8008118:	613b      	str	r3, [r7, #16]
  return(result);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8008120:	f06f 0305 	mvn.w	r3, #5
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	e00e      	b.n	8008146 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8008128:	2300      	movs	r3, #0
 800812a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800812c:	f001 fc38 	bl	80099a0 <xTaskGetTickCount>
 8008130:	4603      	mov	r3, r0
 8008132:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fa63 	bl	800960c <vTaskDelayUntil>
  }

  return (stat);
 8008146:	69fb      	ldr	r3, [r7, #28]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000218 	.word	0x20000218

08008154 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800815c:	2300      	movs	r3, #0
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008160:	f3ef 8305 	mrs	r3, IPSR
 8008164:	613b      	str	r3, [r7, #16]
  return(result);
 8008166:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008168:	2b00      	cmp	r3, #0
 800816a:	f040 8085 	bne.w	8008278 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816e:	f3ef 8310 	mrs	r3, PRIMASK
 8008172:	60fb      	str	r3, [r7, #12]
  return(result);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d17e      	bne.n	8008278 <osMutexNew+0x124>
 800817a:	4b42      	ldr	r3, [pc, #264]	; (8008284 <osMutexNew+0x130>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d105      	bne.n	800818e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008182:	f3ef 8311 	mrs	r3, BASEPRI
 8008186:	60bb      	str	r3, [r7, #8]
  return(result);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d174      	bne.n	8008278 <osMutexNew+0x124>
    if (attr != NULL) {
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	623b      	str	r3, [r7, #32]
 800819a:	e001      	b.n	80081a0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <osMutexNew+0x5c>
      rmtx = 1U;
 80081aa:	2301      	movs	r3, #1
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	e001      	b.n	80081b4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d15c      	bne.n	8008278 <osMutexNew+0x124>
      mem = -1;
 80081be:	f04f 33ff 	mov.w	r3, #4294967295
 80081c2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d015      	beq.n	80081f6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d006      	beq.n	80081e0 <osMutexNew+0x8c>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	2b4f      	cmp	r3, #79	; 0x4f
 80081d8:	d902      	bls.n	80081e0 <osMutexNew+0x8c>
          mem = 1;
 80081da:	2301      	movs	r3, #1
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	e00c      	b.n	80081fa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d108      	bne.n	80081fa <osMutexNew+0xa6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <osMutexNew+0xa6>
            mem = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61bb      	str	r3, [r7, #24]
 80081f4:	e001      	b.n	80081fa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d112      	bne.n	8008226 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	4619      	mov	r1, r3
 800820c:	2004      	movs	r0, #4
 800820e:	f000 fafb 	bl	8008808 <xQueueCreateMutexStatic>
 8008212:	6278      	str	r0, [r7, #36]	; 0x24
 8008214:	e016      	b.n	8008244 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	4619      	mov	r1, r3
 800821c:	2001      	movs	r0, #1
 800821e:	f000 faf3 	bl	8008808 <xQueueCreateMutexStatic>
 8008222:	6278      	str	r0, [r7, #36]	; 0x24
 8008224:	e00e      	b.n	8008244 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008232:	2004      	movs	r0, #4
 8008234:	f000 fad0 	bl	80087d8 <xQueueCreateMutex>
 8008238:	6278      	str	r0, [r7, #36]	; 0x24
 800823a:	e003      	b.n	8008244 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800823c:	2001      	movs	r0, #1
 800823e:	f000 facb 	bl	80087d8 <xQueueCreateMutex>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <osMutexNew+0x110>
        if (attr != NULL) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <osMutexNew+0x104>
          name = attr->name;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	617b      	str	r3, [r7, #20]
 8008256:	e001      	b.n	800825c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800825c:	6979      	ldr	r1, [r7, #20]
 800825e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008260:	f000 ffdc 	bl	800921c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d006      	beq.n	8008278 <osMutexNew+0x124>
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800827a:	4618      	mov	r0, r3
 800827c:	3728      	adds	r7, #40	; 0x28
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000218 	.word	0x20000218

08008288 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a6:	f3ef 8305 	mrs	r3, IPSR
 80082aa:	613b      	str	r3, [r7, #16]
  return(result);
 80082ac:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10f      	bne.n	80082d2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b2:	f3ef 8310 	mrs	r3, PRIMASK
 80082b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <osMutexAcquire+0x4a>
 80082be:	4b20      	ldr	r3, [pc, #128]	; (8008340 <osMutexAcquire+0xb8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d109      	bne.n	80082da <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082c6:	f3ef 8311 	mrs	r3, BASEPRI
 80082ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <osMutexAcquire+0x52>
    stat = osErrorISR;
 80082d2:	f06f 0305 	mvn.w	r3, #5
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e02c      	b.n	8008334 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80082e0:	f06f 0303 	mvn.w	r3, #3
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e025      	b.n	8008334 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d011      	beq.n	8008312 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	69b8      	ldr	r0, [r7, #24]
 80082f2:	f000 faa4 	bl	800883e <xQueueTakeMutexRecursive>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d01b      	beq.n	8008334 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008302:	f06f 0301 	mvn.w	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
 8008308:	e014      	b.n	8008334 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800830a:	f06f 0302 	mvn.w	r3, #2
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e010      	b.n	8008334 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	69b8      	ldr	r0, [r7, #24]
 8008316:	f000 fd49 	bl	8008dac <xQueueSemaphoreTake>
 800831a:	4603      	mov	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d009      	beq.n	8008334 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008326:	f06f 0301 	mvn.w	r3, #1
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e002      	b.n	8008334 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800832e:	f06f 0302 	mvn.w	r3, #2
 8008332:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008334:	69fb      	ldr	r3, [r7, #28]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3720      	adds	r7, #32
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000218 	.word	0x20000218

08008344 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a07      	ldr	r2, [pc, #28]	; (8008370 <vApplicationGetIdleTaskMemory+0x2c>)
 8008354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a06      	ldr	r2, [pc, #24]	; (8008374 <vApplicationGetIdleTaskMemory+0x30>)
 800835a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	601a      	str	r2, [r3, #0]
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	2000021c 	.word	0x2000021c
 8008374:	20000278 	.word	0x20000278

08008378 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a07      	ldr	r2, [pc, #28]	; (80083a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008388:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4a06      	ldr	r2, [pc, #24]	; (80083a8 <vApplicationGetTimerTaskMemory+0x30>)
 800838e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008396:	601a      	str	r2, [r3, #0]
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000478 	.word	0x20000478
 80083a8:	200004d4 	.word	0x200004d4

080083ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 0208 	add.w	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f103 0208 	add.w	r2, r3, #8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f103 0208 	add.w	r2, r3, #8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d103      	bne.n	800846e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e00c      	b.n	8008488 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3308      	adds	r3, #8
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e002      	b.n	800847c <vListInsert+0x2e>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	429a      	cmp	r2, r3
 8008486:	d2f6      	bcs.n	8008476 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	601a      	str	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6892      	ldr	r2, [r2, #8]
 80084d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6852      	ldr	r2, [r2, #4]
 80084e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d103      	bne.n	80084f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10b      	bne.n	8008540 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	b672      	cpsid	i
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	b662      	cpsie	i
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	e7fe      	b.n	800853e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008540:	f002 fba2 	bl	800ac88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854c:	68f9      	ldr	r1, [r7, #12]
 800854e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008570:	3b01      	subs	r3, #1
 8008572:	68f9      	ldr	r1, [r7, #12]
 8008574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	441a      	add	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	22ff      	movs	r2, #255	; 0xff
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	22ff      	movs	r2, #255	; 0xff
 800858c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d114      	bne.n	80085c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d01a      	beq.n	80085d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3310      	adds	r3, #16
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 fb8e 	bl	8009cc4 <xTaskRemoveFromEventList>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d012      	beq.n	80085d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085ae:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <xQueueGenericReset+0xd0>)
 80085b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	e009      	b.n	80085d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3310      	adds	r3, #16
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fef1 	bl	80083ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3324      	adds	r3, #36	; 0x24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff feec 	bl	80083ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085d4:	f002 fb8a 	bl	800acec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085d8:	2301      	movs	r3, #1
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08e      	sub	sp, #56	; 0x38
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <xQueueGenericCreateStatic+0x2c>
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	b672      	cpsid	i
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	b662      	cpsie	i
 8008610:	62bb      	str	r3, [r7, #40]	; 0x28
 8008612:	e7fe      	b.n	8008612 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <xQueueGenericCreateStatic+0x4a>
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	b672      	cpsid	i
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	b662      	cpsie	i
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
 8008630:	e7fe      	b.n	8008630 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <xQueueGenericCreateStatic+0x56>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <xQueueGenericCreateStatic+0x5a>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <xQueueGenericCreateStatic+0x5c>
 8008642:	2300      	movs	r3, #0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10b      	bne.n	8008660 <xQueueGenericCreateStatic+0x78>
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	b672      	cpsid	i
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	b662      	cpsie	i
 800865c:	623b      	str	r3, [r7, #32]
 800865e:	e7fe      	b.n	800865e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <xQueueGenericCreateStatic+0x84>
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <xQueueGenericCreateStatic+0x88>
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <xQueueGenericCreateStatic+0x8a>
 8008670:	2300      	movs	r3, #0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <xQueueGenericCreateStatic+0xa6>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	b672      	cpsid	i
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	b662      	cpsie	i
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e7fe      	b.n	800868c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800868e:	2350      	movs	r3, #80	; 0x50
 8008690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b50      	cmp	r3, #80	; 0x50
 8008696:	d00b      	beq.n	80086b0 <xQueueGenericCreateStatic+0xc8>
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	61bb      	str	r3, [r7, #24]
 80086ae:	e7fe      	b.n	80086ae <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f844 	bl	800875e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086d8:	4618      	mov	r0, r3
 80086da:	3730      	adds	r7, #48	; 0x30
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08a      	sub	sp, #40	; 0x28
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <xQueueGenericCreate+0x2c>
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	b672      	cpsid	i
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	b662      	cpsie	i
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	e7fe      	b.n	800870a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	e004      	b.n	8008722 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	3350      	adds	r3, #80	; 0x50
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fbd0 	bl	800aecc <pvPortMalloc>
 800872c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00f      	beq.n	8008754 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	3350      	adds	r3, #80	; 0x50
 8008738:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008742:	79fa      	ldrb	r2, [r7, #7]
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f805 	bl	800875e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008754:	69bb      	ldr	r3, [r7, #24]
	}
 8008756:	4618      	mov	r0, r3
 8008758:	3720      	adds	r7, #32
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	e002      	b.n	8008780 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800878c:	2101      	movs	r1, #1
 800878e:	69b8      	ldr	r0, [r7, #24]
 8008790:	f7ff fec0 	bl	8008514 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80087c4:	2300      	movs	r3, #0
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f86e 	bl	80088ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80087e2:	2301      	movs	r3, #1
 80087e4:	617b      	str	r3, [r7, #20]
 80087e6:	2300      	movs	r3, #0
 80087e8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6939      	ldr	r1, [r7, #16]
 80087f0:	6978      	ldr	r0, [r7, #20]
 80087f2:	f7ff ff75 	bl	80086e0 <xQueueGenericCreate>
 80087f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff ffd3 	bl	80087a4 <prvInitialiseMutex>

		return pxNewQueue;
 80087fe:	68fb      	ldr	r3, [r7, #12]
	}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af02      	add	r7, sp, #8
 800880e:	4603      	mov	r3, r0
 8008810:	6039      	str	r1, [r7, #0]
 8008812:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008814:	2301      	movs	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	6939      	ldr	r1, [r7, #16]
 8008826:	6978      	ldr	r0, [r7, #20]
 8008828:	f7ff fede 	bl	80085e8 <xQueueGenericCreateStatic>
 800882c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff ffb8 	bl	80087a4 <prvInitialiseMutex>

		return pxNewQueue;
 8008834:	68fb      	ldr	r3, [r7, #12]
	}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b087      	sub	sp, #28
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <xQueueTakeMutexRecursive+0x2c>
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	b672      	cpsid	i
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	b662      	cpsie	i
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	e7fe      	b.n	8008868 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	685c      	ldr	r4, [r3, #4]
 800886e:	f001 fbed 	bl	800a04c <xTaskGetCurrentTaskHandle>
 8008872:	4603      	mov	r3, r0
 8008874:	429c      	cmp	r4, r3
 8008876:	d107      	bne.n	8008888 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008882:	2301      	movs	r3, #1
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	e00c      	b.n	80088a2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6938      	ldr	r0, [r7, #16]
 800888c:	f000 fa8e 	bl	8008dac <xQueueSemaphoreTake>
 8008890:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d004      	beq.n	80088a2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80088a2:	697b      	ldr	r3, [r7, #20]
	}
 80088a4:	4618      	mov	r0, r3
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd90      	pop	{r4, r7, pc}

080088ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08e      	sub	sp, #56	; 0x38
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088ba:	2300      	movs	r3, #0
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <xQueueGenericSend+0x34>
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	b672      	cpsid	i
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	b662      	cpsie	i
 80088dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80088de:	e7fe      	b.n	80088de <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d103      	bne.n	80088ee <xQueueGenericSend+0x42>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <xQueueGenericSend+0x46>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xQueueGenericSend+0x48>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <xQueueGenericSend+0x64>
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	b672      	cpsid	i
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	b662      	cpsie	i
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
 800890e:	e7fe      	b.n	800890e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b02      	cmp	r3, #2
 8008914:	d103      	bne.n	800891e <xQueueGenericSend+0x72>
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891a:	2b01      	cmp	r3, #1
 800891c:	d101      	bne.n	8008922 <xQueueGenericSend+0x76>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <xQueueGenericSend+0x78>
 8008922:	2300      	movs	r3, #0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10b      	bne.n	8008940 <xQueueGenericSend+0x94>
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	b672      	cpsid	i
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	b662      	cpsie	i
 800893c:	623b      	str	r3, [r7, #32]
 800893e:	e7fe      	b.n	800893e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008940:	f001 fb94 	bl	800a06c <xTaskGetSchedulerState>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <xQueueGenericSend+0xa4>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <xQueueGenericSend+0xa8>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <xQueueGenericSend+0xaa>
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <xQueueGenericSend+0xc6>
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e7fe      	b.n	8008970 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008972:	f002 f989 	bl	800ac88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897e:	429a      	cmp	r2, r3
 8008980:	d302      	bcc.n	8008988 <xQueueGenericSend+0xdc>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b02      	cmp	r3, #2
 8008986:	d129      	bne.n	80089dc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800898e:	f000 fb35 	bl	8008ffc <prvCopyDataToQueue>
 8008992:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	d010      	beq.n	80089be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800899c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899e:	3324      	adds	r3, #36	; 0x24
 80089a0:	4618      	mov	r0, r3
 80089a2:	f001 f98f 	bl	8009cc4 <xTaskRemoveFromEventList>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089ac:	4b3f      	ldr	r3, [pc, #252]	; (8008aac <xQueueGenericSend+0x200>)
 80089ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	e00a      	b.n	80089d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089c4:	4b39      	ldr	r3, [pc, #228]	; (8008aac <xQueueGenericSend+0x200>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089d4:	f002 f98a 	bl	800acec <vPortExitCritical>
				return pdPASS;
 80089d8:	2301      	movs	r3, #1
 80089da:	e063      	b.n	8008aa4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089e2:	f002 f983 	bl	800acec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e05c      	b.n	8008aa4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089f0:	f107 0314 	add.w	r3, r7, #20
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 f9c9 	bl	8009d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089fe:	f002 f975 	bl	800acec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a02:	f000 ff21 	bl	8009848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a06:	f002 f93f 	bl	800ac88 <vPortEnterCritical>
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d103      	bne.n	8008a20 <xQueueGenericSend+0x174>
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d103      	bne.n	8008a36 <xQueueGenericSend+0x18a>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a36:	f002 f959 	bl	800acec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a3a:	1d3a      	adds	r2, r7, #4
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 f9b8 	bl	8009db8 <xTaskCheckForTimeOut>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d124      	bne.n	8008a98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a50:	f000 fbcc 	bl	80091ec <prvIsQueueFull>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d018      	beq.n	8008a8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f8dc 	bl	8009c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a6a:	f000 fb57 	bl	800911c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a6e:	f000 fef9 	bl	8009864 <xTaskResumeAll>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f47f af7c 	bne.w	8008972 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a7a:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <xQueueGenericSend+0x200>)
 8008a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	e772      	b.n	8008972 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8e:	f000 fb45 	bl	800911c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a92:	f000 fee7 	bl	8009864 <xTaskResumeAll>
 8008a96:	e76c      	b.n	8008972 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a9a:	f000 fb3f 	bl	800911c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a9e:	f000 fee1 	bl	8009864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008aa2:	2300      	movs	r3, #0
		}
	}
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3738      	adds	r7, #56	; 0x38
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08e      	sub	sp, #56	; 0x38
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <xQueueGenericSendFromISR+0x30>
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	b672      	cpsid	i
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	b662      	cpsie	i
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ade:	e7fe      	b.n	8008ade <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d103      	bne.n	8008aee <xQueueGenericSendFromISR+0x3e>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <xQueueGenericSendFromISR+0x42>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <xQueueGenericSendFromISR+0x44>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10b      	bne.n	8008b10 <xQueueGenericSendFromISR+0x60>
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	b672      	cpsid	i
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	b662      	cpsie	i
 8008b0c:	623b      	str	r3, [r7, #32]
 8008b0e:	e7fe      	b.n	8008b0e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d103      	bne.n	8008b1e <xQueueGenericSendFromISR+0x6e>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <xQueueGenericSendFromISR+0x72>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <xQueueGenericSendFromISR+0x74>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10b      	bne.n	8008b40 <xQueueGenericSendFromISR+0x90>
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	b672      	cpsid	i
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	b662      	cpsie	i
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	e7fe      	b.n	8008b3e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b40:	f002 f982 	bl	800ae48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b44:	f3ef 8211 	mrs	r2, BASEPRI
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	61ba      	str	r2, [r7, #24]
 8008b5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d302      	bcc.n	8008b76 <xQueueGenericSendFromISR+0xc6>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d12c      	bne.n	8008bd0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	68b9      	ldr	r1, [r7, #8]
 8008b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b86:	f000 fa39 	bl	8008ffc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d112      	bne.n	8008bba <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d016      	beq.n	8008bca <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	3324      	adds	r3, #36	; 0x24
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f001 f88f 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00e      	beq.n	8008bca <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	e007      	b.n	8008bca <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	b25a      	sxtb	r2, r3
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008bce:	e001      	b.n	8008bd4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3738      	adds	r7, #56	; 0x38
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08c      	sub	sp, #48	; 0x30
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <xQueueReceive+0x32>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	b672      	cpsid	i
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	b662      	cpsie	i
 8008c16:	623b      	str	r3, [r7, #32]
 8008c18:	e7fe      	b.n	8008c18 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <xQueueReceive+0x40>
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <xQueueReceive+0x44>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <xQueueReceive+0x46>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <xQueueReceive+0x62>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	b672      	cpsid	i
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	b662      	cpsie	i
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e7fe      	b.n	8008c48 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c4a:	f001 fa0f 	bl	800a06c <xTaskGetSchedulerState>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <xQueueReceive+0x72>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <xQueueReceive+0x76>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueReceive+0x78>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10b      	bne.n	8008c7c <xQueueReceive+0x94>
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	b672      	cpsid	i
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	b662      	cpsie	i
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e7fe      	b.n	8008c7a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c7c:	f002 f804 	bl	800ac88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01f      	beq.n	8008ccc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c8c:	68b9      	ldr	r1, [r7, #8]
 8008c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c90:	f000 fa1e 	bl	80090d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	1e5a      	subs	r2, r3, #1
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00f      	beq.n	8008cc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	3310      	adds	r3, #16
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 f80b 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d007      	beq.n	8008cc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cb4:	4b3c      	ldr	r3, [pc, #240]	; (8008da8 <xQueueReceive+0x1c0>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cc4:	f002 f812 	bl	800acec <vPortExitCritical>
				return pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e069      	b.n	8008da0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cd2:	f002 f80b 	bl	800acec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e062      	b.n	8008da0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ce0:	f107 0310 	add.w	r3, r7, #16
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f851 	bl	8009d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cee:	f001 fffd 	bl	800acec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cf2:	f000 fda9 	bl	8009848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cf6:	f001 ffc7 	bl	800ac88 <vPortEnterCritical>
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d00:	b25b      	sxtb	r3, r3
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d103      	bne.n	8008d10 <xQueueReceive+0x128>
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d103      	bne.n	8008d26 <xQueueReceive+0x13e>
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d26:	f001 ffe1 	bl	800acec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d2a:	1d3a      	adds	r2, r7, #4
 8008d2c:	f107 0310 	add.w	r3, r7, #16
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f840 	bl	8009db8 <xTaskCheckForTimeOut>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d123      	bne.n	8008d86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d40:	f000 fa3e 	bl	80091c0 <prvIsQueueEmpty>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d017      	beq.n	8008d7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	3324      	adds	r3, #36	; 0x24
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 ff64 	bl	8009c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5a:	f000 f9df 	bl	800911c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d5e:	f000 fd81 	bl	8009864 <xTaskResumeAll>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d189      	bne.n	8008c7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d68:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <xQueueReceive+0x1c0>)
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	e780      	b.n	8008c7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d7c:	f000 f9ce 	bl	800911c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d80:	f000 fd70 	bl	8009864 <xTaskResumeAll>
 8008d84:	e77a      	b.n	8008c7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d88:	f000 f9c8 	bl	800911c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d8c:	f000 fd6a 	bl	8009864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d92:	f000 fa15 	bl	80091c0 <prvIsQueueEmpty>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f43f af6f 	beq.w	8008c7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3730      	adds	r7, #48	; 0x30
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08e      	sub	sp, #56	; 0x38
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <xQueueSemaphoreTake+0x34>
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	b672      	cpsid	i
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	b662      	cpsie	i
 8008ddc:	623b      	str	r3, [r7, #32]
 8008dde:	e7fe      	b.n	8008dde <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <xQueueSemaphoreTake+0x54>
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	b672      	cpsid	i
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	b662      	cpsie	i
 8008dfc:	61fb      	str	r3, [r7, #28]
 8008dfe:	e7fe      	b.n	8008dfe <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e00:	f001 f934 	bl	800a06c <xTaskGetSchedulerState>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <xQueueSemaphoreTake+0x64>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <xQueueSemaphoreTake+0x68>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <xQueueSemaphoreTake+0x6a>
 8008e14:	2300      	movs	r3, #0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <xQueueSemaphoreTake+0x86>
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	b672      	cpsid	i
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	b662      	cpsie	i
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	e7fe      	b.n	8008e30 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e32:	f001 ff29 	bl	800ac88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d024      	beq.n	8008e8c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	1e5a      	subs	r2, r3, #1
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008e52:	f001 fa8f 	bl	800a374 <pvTaskIncrementMutexHeldCount>
 8008e56:	4602      	mov	r2, r0
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00f      	beq.n	8008e84 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	3310      	adds	r3, #16
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 ff2b 	bl	8009cc4 <xTaskRemoveFromEventList>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d007      	beq.n	8008e84 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e74:	4b54      	ldr	r3, [pc, #336]	; (8008fc8 <xQueueSemaphoreTake+0x21c>)
 8008e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e84:	f001 ff32 	bl	800acec <vPortExitCritical>
				return pdPASS;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e098      	b.n	8008fbe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d112      	bne.n	8008eb8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <xQueueSemaphoreTake+0x104>
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	b672      	cpsid	i
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	b662      	cpsie	i
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	e7fe      	b.n	8008eae <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008eb0:	f001 ff1c 	bl	800acec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e082      	b.n	8008fbe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ebe:	f107 030c 	add.w	r3, r7, #12
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 ff62 	bl	8009d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ecc:	f001 ff0e 	bl	800acec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ed0:	f000 fcba 	bl	8009848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ed4:	f001 fed8 	bl	800ac88 <vPortEnterCritical>
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee4:	d103      	bne.n	8008eee <xQueueSemaphoreTake+0x142>
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ef4:	b25b      	sxtb	r3, r3
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d103      	bne.n	8008f04 <xQueueSemaphoreTake+0x158>
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f04:	f001 fef2 	bl	800acec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f08:	463a      	mov	r2, r7
 8008f0a:	f107 030c 	add.w	r3, r7, #12
 8008f0e:	4611      	mov	r1, r2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 ff51 	bl	8009db8 <xTaskCheckForTimeOut>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d132      	bne.n	8008f82 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f1e:	f000 f94f 	bl	80091c0 <prvIsQueueEmpty>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d026      	beq.n	8008f76 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008f30:	f001 feaa 	bl	800ac88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 f8b5 	bl	800a0a8 <xTaskPriorityInherit>
 8008f3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f40:	f001 fed4 	bl	800acec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	3324      	adds	r3, #36	; 0x24
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fe67 	bl	8009c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f54:	f000 f8e2 	bl	800911c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f58:	f000 fc84 	bl	8009864 <xTaskResumeAll>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f47f af67 	bne.w	8008e32 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008f64:	4b18      	ldr	r3, [pc, #96]	; (8008fc8 <xQueueSemaphoreTake+0x21c>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	e75d      	b.n	8008e32 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f78:	f000 f8d0 	bl	800911c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f7c:	f000 fc72 	bl	8009864 <xTaskResumeAll>
 8008f80:	e757      	b.n	8008e32 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f84:	f000 f8ca 	bl	800911c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f88:	f000 fc6c 	bl	8009864 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f8e:	f000 f917 	bl	80091c0 <prvIsQueueEmpty>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f43f af4c 	beq.w	8008e32 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00d      	beq.n	8008fbc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008fa0:	f001 fe72 	bl	800ac88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fa6:	f000 f811 	bl	8008fcc <prvGetDisinheritPriorityAfterTimeout>
 8008faa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f956 	bl	800a264 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008fb8:	f001 fe98 	bl	800acec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3738      	adds	r7, #56	; 0x38
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e001      	b.n	8008fee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008fee:	68fb      	ldr	r3, [r7, #12]
	}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10d      	bne.n	8009036 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d14d      	bne.n	80090be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	f001 f8ac 	bl	800a184 <xTaskPriorityDisinherit>
 800902c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	605a      	str	r2, [r3, #4]
 8009034:	e043      	b.n	80090be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d119      	bne.n	8009070 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6898      	ldr	r0, [r3, #8]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	461a      	mov	r2, r3
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	f002 fe8e 	bl	800bd68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	441a      	add	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	429a      	cmp	r2, r3
 8009064:	d32b      	bcc.n	80090be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	609a      	str	r2, [r3, #8]
 800906e:	e026      	b.n	80090be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68d8      	ldr	r0, [r3, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	461a      	mov	r2, r3
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	f002 fe74 	bl	800bd68 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	425b      	negs	r3, r3
 800908a:	441a      	add	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d207      	bcs.n	80090ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a4:	425b      	negs	r3, r3
 80090a6:	441a      	add	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d105      	bne.n	80090be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80090c6:	697b      	ldr	r3, [r7, #20]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d018      	beq.n	8009114 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	441a      	add	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d303      	bcc.n	8009104 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68d9      	ldr	r1, [r3, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910c:	461a      	mov	r2, r3
 800910e:	6838      	ldr	r0, [r7, #0]
 8009110:	f002 fe2a 	bl	800bd68 <memcpy>
	}
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009124:	f001 fdb0 	bl	800ac88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800912e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009130:	e011      	b.n	8009156 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	d012      	beq.n	8009160 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3324      	adds	r3, #36	; 0x24
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fdc0 	bl	8009cc4 <xTaskRemoveFromEventList>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800914a:	f000 fe99 	bl	8009e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	3b01      	subs	r3, #1
 8009152:	b2db      	uxtb	r3, r3
 8009154:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800915a:	2b00      	cmp	r3, #0
 800915c:	dce9      	bgt.n	8009132 <prvUnlockQueue+0x16>
 800915e:	e000      	b.n	8009162 <prvUnlockQueue+0x46>
					break;
 8009160:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	22ff      	movs	r2, #255	; 0xff
 8009166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800916a:	f001 fdbf 	bl	800acec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800916e:	f001 fd8b 	bl	800ac88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009178:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800917a:	e011      	b.n	80091a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d012      	beq.n	80091aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3310      	adds	r3, #16
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fd9b 	bl	8009cc4 <xTaskRemoveFromEventList>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009194:	f000 fe74 	bl	8009e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	3b01      	subs	r3, #1
 800919c:	b2db      	uxtb	r3, r3
 800919e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dce9      	bgt.n	800917c <prvUnlockQueue+0x60>
 80091a8:	e000      	b.n	80091ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	22ff      	movs	r2, #255	; 0xff
 80091b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091b4:	f001 fd9a 	bl	800acec <vPortExitCritical>
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091c8:	f001 fd5e 	bl	800ac88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e001      	b.n	80091de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091de:	f001 fd85 	bl	800acec <vPortExitCritical>

	return xReturn;
 80091e2:	68fb      	ldr	r3, [r7, #12]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091f4:	f001 fd48 	bl	800ac88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009200:	429a      	cmp	r2, r3
 8009202:	d102      	bne.n	800920a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009204:	2301      	movs	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	e001      	b.n	800920e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800920a:	2300      	movs	r3, #0
 800920c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800920e:	f001 fd6d 	bl	800acec <vPortExitCritical>

	return xReturn;
 8009212:	68fb      	ldr	r3, [r7, #12]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e014      	b.n	8009256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800922c:	4a0e      	ldr	r2, [pc, #56]	; (8009268 <vQueueAddToRegistry+0x4c>)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009238:	490b      	ldr	r1, [pc, #44]	; (8009268 <vQueueAddToRegistry+0x4c>)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009242:	4a09      	ldr	r2, [pc, #36]	; (8009268 <vQueueAddToRegistry+0x4c>)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4413      	add	r3, r2
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800924e:	e005      	b.n	800925c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b07      	cmp	r3, #7
 800925a:	d9e7      	bls.n	800922c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800925c:	bf00      	nop
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	20006570 	.word	0x20006570

0800926c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800927c:	f001 fd04 	bl	800ac88 <vPortEnterCritical>
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009286:	b25b      	sxtb	r3, r3
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d103      	bne.n	8009296 <vQueueWaitForMessageRestricted+0x2a>
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800929c:	b25b      	sxtb	r3, r3
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d103      	bne.n	80092ac <vQueueWaitForMessageRestricted+0x40>
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ac:	f001 fd1e 	bl	800acec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d106      	bne.n	80092c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	3324      	adds	r3, #36	; 0x24
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fcd3 	bl	8009c6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092c6:	6978      	ldr	r0, [r7, #20]
 80092c8:	f7ff ff28 	bl	800911c <prvUnlockQueue>
	}
 80092cc:	bf00      	nop
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08e      	sub	sp, #56	; 0x38
 80092d8:	af04      	add	r7, sp, #16
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10b      	bne.n	8009300 <xTaskCreateStatic+0x2c>
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	b672      	cpsid	i
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	b662      	cpsie	i
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	e7fe      	b.n	80092fe <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <xTaskCreateStatic+0x4a>
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	b672      	cpsid	i
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	b662      	cpsie	i
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	e7fe      	b.n	800931c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800931e:	235c      	movs	r3, #92	; 0x5c
 8009320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b5c      	cmp	r3, #92	; 0x5c
 8009326:	d00b      	beq.n	8009340 <xTaskCreateStatic+0x6c>
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	b672      	cpsid	i
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	b662      	cpsie	i
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	e7fe      	b.n	800933e <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	2b00      	cmp	r3, #0
 8009344:	d01e      	beq.n	8009384 <xTaskCreateStatic+0xb0>
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01b      	beq.n	8009384 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009354:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	2202      	movs	r2, #2
 800935a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800935e:	2300      	movs	r3, #0
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	9302      	str	r3, [sp, #8]
 8009366:	f107 0314 	add.w	r3, r7, #20
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f850 	bl	800941c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800937c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800937e:	f000 f8d5 	bl	800952c <prvAddNewTaskToReadyList>
 8009382:	e001      	b.n	8009388 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009388:	697b      	ldr	r3, [r7, #20]
	}
 800938a:	4618      	mov	r0, r3
 800938c:	3728      	adds	r7, #40	; 0x28
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009392:	b580      	push	{r7, lr}
 8009394:	b08c      	sub	sp, #48	; 0x30
 8009396:	af04      	add	r7, sp, #16
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	603b      	str	r3, [r7, #0]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 fd90 	bl	800aecc <pvPortMalloc>
 80093ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00e      	beq.n	80093d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80093b4:	205c      	movs	r0, #92	; 0x5c
 80093b6:	f001 fd89 	bl	800aecc <pvPortMalloc>
 80093ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
 80093c8:	e005      	b.n	80093d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093ca:	6978      	ldr	r0, [r7, #20]
 80093cc:	f001 fe46 	bl	800b05c <vPortFree>
 80093d0:	e001      	b.n	80093d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d017      	beq.n	800940c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093e4:	88fa      	ldrh	r2, [r7, #6]
 80093e6:	2300      	movs	r3, #0
 80093e8:	9303      	str	r3, [sp, #12]
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	9302      	str	r3, [sp, #8]
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 f80e 	bl	800941c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009400:	69f8      	ldr	r0, [r7, #28]
 8009402:	f000 f893 	bl	800952c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009406:	2301      	movs	r3, #1
 8009408:	61bb      	str	r3, [r7, #24]
 800940a:	e002      	b.n	8009412 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009412:	69bb      	ldr	r3, [r7, #24]
	}
 8009414:	4618      	mov	r0, r3
 8009416:	3720      	adds	r7, #32
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	461a      	mov	r2, r3
 8009434:	21a5      	movs	r1, #165	; 0xa5
 8009436:	f002 fca2 	bl	800bd7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009444:	440b      	add	r3, r1
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f023 0307 	bic.w	r3, r3, #7
 8009452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <prvInitialiseNewTask+0x5a>
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	b672      	cpsid	i
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	b662      	cpsie	i
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	e7fe      	b.n	8009474 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009476:	2300      	movs	r3, #0
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	e012      	b.n	80094a2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	7819      	ldrb	r1, [r3, #0]
 8009484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	4413      	add	r3, r2
 800948a:	3334      	adds	r3, #52	; 0x34
 800948c:	460a      	mov	r2, r1
 800948e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	3301      	adds	r3, #1
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	2b0f      	cmp	r3, #15
 80094a6:	d9e9      	bls.n	800947c <prvInitialiseNewTask+0x60>
 80094a8:	e000      	b.n	80094ac <prvInitialiseNewTask+0x90>
		{
			break;
 80094aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	2b37      	cmp	r3, #55	; 0x37
 80094b8:	d901      	bls.n	80094be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094ba:	2337      	movs	r3, #55	; 0x37
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	2200      	movs	r2, #0
 80094ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	3304      	adds	r3, #4
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe ff89 	bl	80083ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	3318      	adds	r3, #24
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe ff84 	bl	80083ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	2200      	movs	r2, #0
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	68f9      	ldr	r1, [r7, #12]
 800950c:	69b8      	ldr	r0, [r7, #24]
 800950e:	f001 fab1 	bl	800aa74 <pxPortInitialiseStack>
 8009512:	4602      	mov	r2, r0
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009524:	bf00      	nop
 8009526:	3720      	adds	r7, #32
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009534:	f001 fba8 	bl	800ac88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009538:	4b2d      	ldr	r3, [pc, #180]	; (80095f0 <prvAddNewTaskToReadyList+0xc4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3301      	adds	r3, #1
 800953e:	4a2c      	ldr	r2, [pc, #176]	; (80095f0 <prvAddNewTaskToReadyList+0xc4>)
 8009540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009542:	4b2c      	ldr	r3, [pc, #176]	; (80095f4 <prvAddNewTaskToReadyList+0xc8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d109      	bne.n	800955e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800954a:	4a2a      	ldr	r2, [pc, #168]	; (80095f4 <prvAddNewTaskToReadyList+0xc8>)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009550:	4b27      	ldr	r3, [pc, #156]	; (80095f0 <prvAddNewTaskToReadyList+0xc4>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d110      	bne.n	800957a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009558:	f000 fcb6 	bl	8009ec8 <prvInitialiseTaskLists>
 800955c:	e00d      	b.n	800957a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800955e:	4b26      	ldr	r3, [pc, #152]	; (80095f8 <prvAddNewTaskToReadyList+0xcc>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009566:	4b23      	ldr	r3, [pc, #140]	; (80095f4 <prvAddNewTaskToReadyList+0xc8>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	429a      	cmp	r2, r3
 8009572:	d802      	bhi.n	800957a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009574:	4a1f      	ldr	r2, [pc, #124]	; (80095f4 <prvAddNewTaskToReadyList+0xc8>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800957a:	4b20      	ldr	r3, [pc, #128]	; (80095fc <prvAddNewTaskToReadyList+0xd0>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <prvAddNewTaskToReadyList+0xd0>)
 8009582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009584:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <prvAddNewTaskToReadyList+0xd0>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009590:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <prvAddNewTaskToReadyList+0xd4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d903      	bls.n	80095a0 <prvAddNewTaskToReadyList+0x74>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	4a18      	ldr	r2, [pc, #96]	; (8009600 <prvAddNewTaskToReadyList+0xd4>)
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4a15      	ldr	r2, [pc, #84]	; (8009604 <prvAddNewTaskToReadyList+0xd8>)
 80095ae:	441a      	add	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f7fe ff25 	bl	8008406 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095bc:	f001 fb96 	bl	800acec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <prvAddNewTaskToReadyList+0xcc>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00e      	beq.n	80095e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <prvAddNewTaskToReadyList+0xc8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d207      	bcs.n	80095e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <prvAddNewTaskToReadyList+0xdc>)
 80095d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000da8 	.word	0x20000da8
 80095f4:	200008d4 	.word	0x200008d4
 80095f8:	20000db4 	.word	0x20000db4
 80095fc:	20000dc4 	.word	0x20000dc4
 8009600:	20000db0 	.word	0x20000db0
 8009604:	200008d8 	.word	0x200008d8
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08a      	sub	sp, #40	; 0x28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009616:	2300      	movs	r3, #0
 8009618:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <vTaskDelayUntil+0x2c>
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	b672      	cpsid	i
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	b662      	cpsie	i
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	e7fe      	b.n	8009636 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10b      	bne.n	8009656 <vTaskDelayUntil+0x4a>
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	b672      	cpsid	i
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	b662      	cpsie	i
 8009652:	613b      	str	r3, [r7, #16]
 8009654:	e7fe      	b.n	8009654 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8009656:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <vTaskDelayUntil+0xf4>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <vTaskDelayUntil+0x6a>
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	b672      	cpsid	i
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	b662      	cpsie	i
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	e7fe      	b.n	8009674 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8009676:	f000 f8e7 	bl	8009848 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800967a:	4b22      	ldr	r3, [pc, #136]	; (8009704 <vTaskDelayUntil+0xf8>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	4413      	add	r3, r2
 8009688:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6a3a      	ldr	r2, [r7, #32]
 8009690:	429a      	cmp	r2, r3
 8009692:	d20b      	bcs.n	80096ac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	429a      	cmp	r2, r3
 800969c:	d211      	bcs.n	80096c2 <vTaskDelayUntil+0xb6>
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d90d      	bls.n	80096c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
 80096aa:	e00a      	b.n	80096c2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69fa      	ldr	r2, [r7, #28]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d303      	bcc.n	80096be <vTaskDelayUntil+0xb2>
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d901      	bls.n	80096c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80096be:	2301      	movs	r3, #1
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fe60 	bl	800a39c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80096dc:	f000 f8c2 	bl	8009864 <xTaskResumeAll>
 80096e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d107      	bne.n	80096f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <vTaskDelayUntil+0xfc>)
 80096ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096f8:	bf00      	nop
 80096fa:	3728      	adds	r7, #40	; 0x28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	20000dd0 	.word	0x20000dd0
 8009704:	20000dac 	.word	0x20000dac
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d018      	beq.n	8009750 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800971e:	4b14      	ldr	r3, [pc, #80]	; (8009770 <vTaskDelay+0x64>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00b      	beq.n	800973e <vTaskDelay+0x32>
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	b672      	cpsid	i
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	b662      	cpsie	i
 800973a:	60bb      	str	r3, [r7, #8]
 800973c:	e7fe      	b.n	800973c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800973e:	f000 f883 	bl	8009848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009742:	2100      	movs	r1, #0
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fe29 	bl	800a39c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800974a:	f000 f88b 	bl	8009864 <xTaskResumeAll>
 800974e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d107      	bne.n	8009766 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009756:	4b07      	ldr	r3, [pc, #28]	; (8009774 <vTaskDelay+0x68>)
 8009758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009766:	bf00      	nop
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000dd0 	.word	0x20000dd0
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	; 0x28
 800977c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009786:	463a      	mov	r2, r7
 8009788:	1d39      	adds	r1, r7, #4
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fdd8 	bl	8008344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	9202      	str	r2, [sp, #8]
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	2300      	movs	r3, #0
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	2300      	movs	r3, #0
 80097a4:	460a      	mov	r2, r1
 80097a6:	4922      	ldr	r1, [pc, #136]	; (8009830 <vTaskStartScheduler+0xb8>)
 80097a8:	4822      	ldr	r0, [pc, #136]	; (8009834 <vTaskStartScheduler+0xbc>)
 80097aa:	f7ff fd93 	bl	80092d4 <xTaskCreateStatic>
 80097ae:	4602      	mov	r2, r0
 80097b0:	4b21      	ldr	r3, [pc, #132]	; (8009838 <vTaskStartScheduler+0xc0>)
 80097b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097b4:	4b20      	ldr	r3, [pc, #128]	; (8009838 <vTaskStartScheduler+0xc0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097bc:	2301      	movs	r3, #1
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	e001      	b.n	80097c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d102      	bne.n	80097d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097cc:	f000 fe3a 	bl	800a444 <xTimerCreateTimerTask>
 80097d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d117      	bne.n	8009808 <vTaskStartScheduler+0x90>
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	b672      	cpsid	i
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	b662      	cpsie	i
 80097ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <vTaskStartScheduler+0xc4>)
 80097f0:	f04f 32ff 	mov.w	r2, #4294967295
 80097f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <vTaskStartScheduler+0xc8>)
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80097fc:	4b11      	ldr	r3, [pc, #68]	; (8009844 <vTaskStartScheduler+0xcc>)
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009802:	f001 f9c5 	bl	800ab90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009806:	e00f      	b.n	8009828 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d10b      	bne.n	8009828 <vTaskStartScheduler+0xb0>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	b672      	cpsid	i
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	b662      	cpsie	i
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e7fe      	b.n	8009826 <vTaskStartScheduler+0xae>
}
 8009828:	bf00      	nop
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	0800d108 	.word	0x0800d108
 8009834:	08009e99 	.word	0x08009e99
 8009838:	20000dcc 	.word	0x20000dcc
 800983c:	20000dc8 	.word	0x20000dc8
 8009840:	20000db4 	.word	0x20000db4
 8009844:	20000dac 	.word	0x20000dac

08009848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800984c:	4b04      	ldr	r3, [pc, #16]	; (8009860 <vTaskSuspendAll+0x18>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	4a03      	ldr	r2, [pc, #12]	; (8009860 <vTaskSuspendAll+0x18>)
 8009854:	6013      	str	r3, [r2, #0]
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20000dd0 	.word	0x20000dd0

08009864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009872:	4b42      	ldr	r3, [pc, #264]	; (800997c <xTaskResumeAll+0x118>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <xTaskResumeAll+0x2e>
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	b672      	cpsid	i
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	b662      	cpsie	i
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	e7fe      	b.n	8009890 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009892:	f001 f9f9 	bl	800ac88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009896:	4b39      	ldr	r3, [pc, #228]	; (800997c <xTaskResumeAll+0x118>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	4a37      	ldr	r2, [pc, #220]	; (800997c <xTaskResumeAll+0x118>)
 800989e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a0:	4b36      	ldr	r3, [pc, #216]	; (800997c <xTaskResumeAll+0x118>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d162      	bne.n	800996e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098a8:	4b35      	ldr	r3, [pc, #212]	; (8009980 <xTaskResumeAll+0x11c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d05e      	beq.n	800996e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098b0:	e02f      	b.n	8009912 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80098b2:	4b34      	ldr	r3, [pc, #208]	; (8009984 <xTaskResumeAll+0x120>)
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3318      	adds	r3, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fdfe 	bl	80084c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fdf9 	bl	80084c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	4b2d      	ldr	r3, [pc, #180]	; (8009988 <xTaskResumeAll+0x124>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d903      	bls.n	80098e2 <xTaskResumeAll+0x7e>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098de:	4a2a      	ldr	r2, [pc, #168]	; (8009988 <xTaskResumeAll+0x124>)
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4a27      	ldr	r2, [pc, #156]	; (800998c <xTaskResumeAll+0x128>)
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3304      	adds	r3, #4
 80098f6:	4619      	mov	r1, r3
 80098f8:	4610      	mov	r0, r2
 80098fa:	f7fe fd84 	bl	8008406 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	4b23      	ldr	r3, [pc, #140]	; (8009990 <xTaskResumeAll+0x12c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	429a      	cmp	r2, r3
 800990a:	d302      	bcc.n	8009912 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800990c:	4b21      	ldr	r3, [pc, #132]	; (8009994 <xTaskResumeAll+0x130>)
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009912:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <xTaskResumeAll+0x120>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1cb      	bne.n	80098b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009920:	f000 fb6e 	bl	800a000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009924:	4b1c      	ldr	r3, [pc, #112]	; (8009998 <xTaskResumeAll+0x134>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d010      	beq.n	8009952 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009930:	f000 f858 	bl	80099e4 <xTaskIncrementTick>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d002      	beq.n	8009940 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800993a:	4b16      	ldr	r3, [pc, #88]	; (8009994 <xTaskResumeAll+0x130>)
 800993c:	2201      	movs	r2, #1
 800993e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	3b01      	subs	r3, #1
 8009944:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f1      	bne.n	8009930 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800994c:	4b12      	ldr	r3, [pc, #72]	; (8009998 <xTaskResumeAll+0x134>)
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009952:	4b10      	ldr	r3, [pc, #64]	; (8009994 <xTaskResumeAll+0x130>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800995a:	2301      	movs	r3, #1
 800995c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800995e:	4b0f      	ldr	r3, [pc, #60]	; (800999c <xTaskResumeAll+0x138>)
 8009960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800996e:	f001 f9bd 	bl	800acec <vPortExitCritical>

	return xAlreadyYielded;
 8009972:	68bb      	ldr	r3, [r7, #8]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000dd0 	.word	0x20000dd0
 8009980:	20000da8 	.word	0x20000da8
 8009984:	20000d68 	.word	0x20000d68
 8009988:	20000db0 	.word	0x20000db0
 800998c:	200008d8 	.word	0x200008d8
 8009990:	200008d4 	.word	0x200008d4
 8009994:	20000dbc 	.word	0x20000dbc
 8009998:	20000db8 	.word	0x20000db8
 800999c:	e000ed04 	.word	0xe000ed04

080099a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099a6:	4b05      	ldr	r3, [pc, #20]	; (80099bc <xTaskGetTickCount+0x1c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80099ac:	687b      	ldr	r3, [r7, #4]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20000dac 	.word	0x20000dac

080099c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099c6:	f001 fa3f 	bl	800ae48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80099ca:	2300      	movs	r3, #0
 80099cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <xTaskGetTickCountFromISR+0x20>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099d4:	683b      	ldr	r3, [r7, #0]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000dac 	.word	0x20000dac

080099e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ee:	4b52      	ldr	r3, [pc, #328]	; (8009b38 <xTaskIncrementTick+0x154>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f040 808f 	bne.w	8009b16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099f8:	4b50      	ldr	r3, [pc, #320]	; (8009b3c <xTaskIncrementTick+0x158>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3301      	adds	r3, #1
 80099fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a00:	4a4e      	ldr	r2, [pc, #312]	; (8009b3c <xTaskIncrementTick+0x158>)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d121      	bne.n	8009a50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a0c:	4b4c      	ldr	r3, [pc, #304]	; (8009b40 <xTaskIncrementTick+0x15c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <xTaskIncrementTick+0x4a>
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	b672      	cpsid	i
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	b662      	cpsie	i
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	e7fe      	b.n	8009a2c <xTaskIncrementTick+0x48>
 8009a2e:	4b44      	ldr	r3, [pc, #272]	; (8009b40 <xTaskIncrementTick+0x15c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	4b43      	ldr	r3, [pc, #268]	; (8009b44 <xTaskIncrementTick+0x160>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a41      	ldr	r2, [pc, #260]	; (8009b40 <xTaskIncrementTick+0x15c>)
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	4a41      	ldr	r2, [pc, #260]	; (8009b44 <xTaskIncrementTick+0x160>)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	4b41      	ldr	r3, [pc, #260]	; (8009b48 <xTaskIncrementTick+0x164>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3301      	adds	r3, #1
 8009a48:	4a3f      	ldr	r2, [pc, #252]	; (8009b48 <xTaskIncrementTick+0x164>)
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	f000 fad8 	bl	800a000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a50:	4b3e      	ldr	r3, [pc, #248]	; (8009b4c <xTaskIncrementTick+0x168>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d34e      	bcc.n	8009af8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a5a:	4b39      	ldr	r3, [pc, #228]	; (8009b40 <xTaskIncrementTick+0x15c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <xTaskIncrementTick+0x84>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e000      	b.n	8009a6a <xTaskIncrementTick+0x86>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6e:	4b37      	ldr	r3, [pc, #220]	; (8009b4c <xTaskIncrementTick+0x168>)
 8009a70:	f04f 32ff 	mov.w	r2, #4294967295
 8009a74:	601a      	str	r2, [r3, #0]
					break;
 8009a76:	e03f      	b.n	8009af8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a78:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <xTaskIncrementTick+0x15c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d203      	bcs.n	8009a98 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a90:	4a2e      	ldr	r2, [pc, #184]	; (8009b4c <xTaskIncrementTick+0x168>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
						break;
 8009a96:	e02f      	b.n	8009af8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fd0f 	bl	80084c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	3318      	adds	r3, #24
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe fd06 	bl	80084c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab8:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <xTaskIncrementTick+0x16c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d903      	bls.n	8009ac8 <xTaskIncrementTick+0xe4>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	4a22      	ldr	r2, [pc, #136]	; (8009b50 <xTaskIncrementTick+0x16c>)
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4a1f      	ldr	r2, [pc, #124]	; (8009b54 <xTaskIncrementTick+0x170>)
 8009ad6:	441a      	add	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe fc91 	bl	8008406 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae8:	4b1b      	ldr	r3, [pc, #108]	; (8009b58 <xTaskIncrementTick+0x174>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d3b3      	bcc.n	8009a5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009af6:	e7b0      	b.n	8009a5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009af8:	4b17      	ldr	r3, [pc, #92]	; (8009b58 <xTaskIncrementTick+0x174>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afe:	4915      	ldr	r1, [pc, #84]	; (8009b54 <xTaskIncrementTick+0x170>)
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	440b      	add	r3, r1
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d907      	bls.n	8009b20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009b10:	2301      	movs	r3, #1
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e004      	b.n	8009b20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b16:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <xTaskIncrementTick+0x178>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	4a0f      	ldr	r2, [pc, #60]	; (8009b5c <xTaskIncrementTick+0x178>)
 8009b1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b20:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <xTaskIncrementTick+0x17c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b2c:	697b      	ldr	r3, [r7, #20]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000dd0 	.word	0x20000dd0
 8009b3c:	20000dac 	.word	0x20000dac
 8009b40:	20000d60 	.word	0x20000d60
 8009b44:	20000d64 	.word	0x20000d64
 8009b48:	20000dc0 	.word	0x20000dc0
 8009b4c:	20000dc8 	.word	0x20000dc8
 8009b50:	20000db0 	.word	0x20000db0
 8009b54:	200008d8 	.word	0x200008d8
 8009b58:	200008d4 	.word	0x200008d4
 8009b5c:	20000db8 	.word	0x20000db8
 8009b60:	20000dbc 	.word	0x20000dbc

08009b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b6a:	4b28      	ldr	r3, [pc, #160]	; (8009c0c <vTaskSwitchContext+0xa8>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b72:	4b27      	ldr	r3, [pc, #156]	; (8009c10 <vTaskSwitchContext+0xac>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b78:	e042      	b.n	8009c00 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009b7a:	4b25      	ldr	r3, [pc, #148]	; (8009c10 <vTaskSwitchContext+0xac>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009b80:	4b24      	ldr	r3, [pc, #144]	; (8009c14 <vTaskSwitchContext+0xb0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	e011      	b.n	8009bac <vTaskSwitchContext+0x48>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <vTaskSwitchContext+0x42>
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	b672      	cpsid	i
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	b662      	cpsie	i
 8009ba2:	607b      	str	r3, [r7, #4]
 8009ba4:	e7fe      	b.n	8009ba4 <vTaskSwitchContext+0x40>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	491a      	ldr	r1, [pc, #104]	; (8009c18 <vTaskSwitchContext+0xb4>)
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0e3      	beq.n	8009b88 <vTaskSwitchContext+0x24>
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4a13      	ldr	r2, [pc, #76]	; (8009c18 <vTaskSwitchContext+0xb4>)
 8009bcc:	4413      	add	r3, r2
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	3308      	adds	r3, #8
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d104      	bne.n	8009bf0 <vTaskSwitchContext+0x8c>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	605a      	str	r2, [r3, #4]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <vTaskSwitchContext+0xb8>)
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	4a06      	ldr	r2, [pc, #24]	; (8009c14 <vTaskSwitchContext+0xb0>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6013      	str	r3, [r2, #0]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	20000dd0 	.word	0x20000dd0
 8009c10:	20000dbc 	.word	0x20000dbc
 8009c14:	20000db0 	.word	0x20000db0
 8009c18:	200008d8 	.word	0x200008d8
 8009c1c:	200008d4 	.word	0x200008d4

08009c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10b      	bne.n	8009c48 <vTaskPlaceOnEventList+0x28>
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	b672      	cpsid	i
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	b662      	cpsie	i
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	e7fe      	b.n	8009c46 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c48:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <vTaskPlaceOnEventList+0x48>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3318      	adds	r3, #24
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7fe fbfc 	bl	800844e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c56:	2101      	movs	r1, #1
 8009c58:	6838      	ldr	r0, [r7, #0]
 8009c5a:	f000 fb9f 	bl	800a39c <prvAddCurrentTaskToDelayedList>
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	200008d4 	.word	0x200008d4

08009c6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10b      	bne.n	8009c96 <vTaskPlaceOnEventListRestricted+0x2a>
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	b672      	cpsid	i
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	b662      	cpsie	i
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e7fe      	b.n	8009c94 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3318      	adds	r3, #24
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7fe fbb1 	bl	8008406 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009caa:	f04f 33ff 	mov.w	r3, #4294967295
 8009cae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cb0:	6879      	ldr	r1, [r7, #4]
 8009cb2:	68b8      	ldr	r0, [r7, #8]
 8009cb4:	f000 fb72 	bl	800a39c <prvAddCurrentTaskToDelayedList>
	}
 8009cb8:	bf00      	nop
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	200008d4 	.word	0x200008d4

08009cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10b      	bne.n	8009cf2 <xTaskRemoveFromEventList+0x2e>
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	b672      	cpsid	i
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	b662      	cpsie	i
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	3318      	adds	r3, #24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fbe2 	bl	80084c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cfc:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <xTaskRemoveFromEventList+0xb0>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d11d      	bne.n	8009d40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fbd9 	bl	80084c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d12:	4b19      	ldr	r3, [pc, #100]	; (8009d78 <xTaskRemoveFromEventList+0xb4>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d903      	bls.n	8009d22 <xTaskRemoveFromEventList+0x5e>
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4a16      	ldr	r2, [pc, #88]	; (8009d78 <xTaskRemoveFromEventList+0xb4>)
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4a13      	ldr	r2, [pc, #76]	; (8009d7c <xTaskRemoveFromEventList+0xb8>)
 8009d30:	441a      	add	r2, r3
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f7fe fb64 	bl	8008406 <vListInsertEnd>
 8009d3e:	e005      	b.n	8009d4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	3318      	adds	r3, #24
 8009d44:	4619      	mov	r1, r3
 8009d46:	480e      	ldr	r0, [pc, #56]	; (8009d80 <xTaskRemoveFromEventList+0xbc>)
 8009d48:	f7fe fb5d 	bl	8008406 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <xTaskRemoveFromEventList+0xc0>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d905      	bls.n	8009d66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d5e:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <xTaskRemoveFromEventList+0xc4>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	e001      	b.n	8009d6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009d6a:	697b      	ldr	r3, [r7, #20]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20000dd0 	.word	0x20000dd0
 8009d78:	20000db0 	.word	0x20000db0
 8009d7c:	200008d8 	.word	0x200008d8
 8009d80:	20000d68 	.word	0x20000d68
 8009d84:	200008d4 	.word	0x200008d4
 8009d88:	20000dbc 	.word	0x20000dbc

08009d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d94:	4b06      	ldr	r3, [pc, #24]	; (8009db0 <vTaskInternalSetTimeOutState+0x24>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d9c:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <vTaskInternalSetTimeOutState+0x28>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	605a      	str	r2, [r3, #4]
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	20000dc0 	.word	0x20000dc0
 8009db4:	20000dac 	.word	0x20000dac

08009db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10b      	bne.n	8009de0 <xTaskCheckForTimeOut+0x28>
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	b672      	cpsid	i
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	b662      	cpsie	i
 8009ddc:	613b      	str	r3, [r7, #16]
 8009dde:	e7fe      	b.n	8009dde <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <xTaskCheckForTimeOut+0x46>
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	b672      	cpsid	i
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	b662      	cpsie	i
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e7fe      	b.n	8009dfc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009dfe:	f000 ff43 	bl	800ac88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e02:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <xTaskCheckForTimeOut+0xc0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1a:	d102      	bne.n	8009e22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61fb      	str	r3, [r7, #28]
 8009e20:	e023      	b.n	8009e6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <xTaskCheckForTimeOut+0xc4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d007      	beq.n	8009e3e <xTaskCheckForTimeOut+0x86>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d302      	bcc.n	8009e3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	e015      	b.n	8009e6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d20b      	bcs.n	8009e60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff ff99 	bl	8009d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	e004      	b.n	8009e6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e66:	2301      	movs	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e6a:	f000 ff3f 	bl	800acec <vPortExitCritical>

	return xReturn;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3720      	adds	r7, #32
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000dac 	.word	0x20000dac
 8009e7c:	20000dc0 	.word	0x20000dc0

08009e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e84:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <vTaskMissedYield+0x14>)
 8009e86:	2201      	movs	r2, #1
 8009e88:	601a      	str	r2, [r3, #0]
}
 8009e8a:	bf00      	nop
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	20000dbc 	.word	0x20000dbc

08009e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ea0:	f000 f852 	bl	8009f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <prvIdleTask+0x28>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d9f9      	bls.n	8009ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <prvIdleTask+0x2c>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ebc:	e7f0      	b.n	8009ea0 <prvIdleTask+0x8>
 8009ebe:	bf00      	nop
 8009ec0:	200008d8 	.word	0x200008d8
 8009ec4:	e000ed04 	.word	0xe000ed04

08009ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ece:	2300      	movs	r3, #0
 8009ed0:	607b      	str	r3, [r7, #4]
 8009ed2:	e00c      	b.n	8009eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4a12      	ldr	r2, [pc, #72]	; (8009f28 <prvInitialiseTaskLists+0x60>)
 8009ee0:	4413      	add	r3, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fa62 	bl	80083ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3301      	adds	r3, #1
 8009eec:	607b      	str	r3, [r7, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b37      	cmp	r3, #55	; 0x37
 8009ef2:	d9ef      	bls.n	8009ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ef4:	480d      	ldr	r0, [pc, #52]	; (8009f2c <prvInitialiseTaskLists+0x64>)
 8009ef6:	f7fe fa59 	bl	80083ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009efa:	480d      	ldr	r0, [pc, #52]	; (8009f30 <prvInitialiseTaskLists+0x68>)
 8009efc:	f7fe fa56 	bl	80083ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f00:	480c      	ldr	r0, [pc, #48]	; (8009f34 <prvInitialiseTaskLists+0x6c>)
 8009f02:	f7fe fa53 	bl	80083ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f06:	480c      	ldr	r0, [pc, #48]	; (8009f38 <prvInitialiseTaskLists+0x70>)
 8009f08:	f7fe fa50 	bl	80083ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f0c:	480b      	ldr	r0, [pc, #44]	; (8009f3c <prvInitialiseTaskLists+0x74>)
 8009f0e:	f7fe fa4d 	bl	80083ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f12:	4b0b      	ldr	r3, [pc, #44]	; (8009f40 <prvInitialiseTaskLists+0x78>)
 8009f14:	4a05      	ldr	r2, [pc, #20]	; (8009f2c <prvInitialiseTaskLists+0x64>)
 8009f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <prvInitialiseTaskLists+0x7c>)
 8009f1a:	4a05      	ldr	r2, [pc, #20]	; (8009f30 <prvInitialiseTaskLists+0x68>)
 8009f1c:	601a      	str	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200008d8 	.word	0x200008d8
 8009f2c:	20000d38 	.word	0x20000d38
 8009f30:	20000d4c 	.word	0x20000d4c
 8009f34:	20000d68 	.word	0x20000d68
 8009f38:	20000d7c 	.word	0x20000d7c
 8009f3c:	20000d94 	.word	0x20000d94
 8009f40:	20000d60 	.word	0x20000d60
 8009f44:	20000d64 	.word	0x20000d64

08009f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f4e:	e019      	b.n	8009f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f50:	f000 fe9a 	bl	800ac88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009f54:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <prvCheckTasksWaitingTermination+0x4c>)
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe faad 	bl	80084c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f66:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <prvCheckTasksWaitingTermination+0x50>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	4a0a      	ldr	r2, [pc, #40]	; (8009f98 <prvCheckTasksWaitingTermination+0x50>)
 8009f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f70:	4b0a      	ldr	r3, [pc, #40]	; (8009f9c <prvCheckTasksWaitingTermination+0x54>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <prvCheckTasksWaitingTermination+0x54>)
 8009f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f7a:	f000 feb7 	bl	800acec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f80e 	bl	8009fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <prvCheckTasksWaitingTermination+0x54>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e1      	bne.n	8009f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000d7c 	.word	0x20000d7c
 8009f98:	20000da8 	.word	0x20000da8
 8009f9c:	20000d90 	.word	0x20000d90

08009fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d108      	bne.n	8009fc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 f850 	bl	800b05c <vPortFree>
				vPortFree( pxTCB );
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 f84d 	bl	800b05c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fc2:	e019      	b.n	8009ff8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d103      	bne.n	8009fd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f001 f844 	bl	800b05c <vPortFree>
	}
 8009fd4:	e010      	b.n	8009ff8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d00b      	beq.n	8009ff8 <prvDeleteTCB+0x58>
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	e7fe      	b.n	8009ff6 <prvDeleteTCB+0x56>
	}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <prvResetNextTaskUnblockTime+0x44>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <prvResetNextTaskUnblockTime+0x14>
 800a010:	2301      	movs	r3, #1
 800a012:	e000      	b.n	800a016 <prvResetNextTaskUnblockTime+0x16>
 800a014:	2300      	movs	r3, #0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a01a:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <prvResetNextTaskUnblockTime+0x48>)
 800a01c:	f04f 32ff 	mov.w	r2, #4294967295
 800a020:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a022:	e008      	b.n	800a036 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <prvResetNextTaskUnblockTime+0x44>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	4a05      	ldr	r2, [pc, #20]	; (800a048 <prvResetNextTaskUnblockTime+0x48>)
 800a034:	6013      	str	r3, [r2, #0]
}
 800a036:	bf00      	nop
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000d60 	.word	0x20000d60
 800a048:	20000dc8 	.word	0x20000dc8

0800a04c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <xTaskGetCurrentTaskHandle+0x1c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a058:	687b      	ldr	r3, [r7, #4]
	}
 800a05a:	4618      	mov	r0, r3
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	200008d4 	.word	0x200008d4

0800a06c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a072:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <xTaskGetSchedulerState+0x34>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a07a:	2301      	movs	r3, #1
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	e008      	b.n	800a092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a080:	4b08      	ldr	r3, [pc, #32]	; (800a0a4 <xTaskGetSchedulerState+0x38>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a088:	2302      	movs	r3, #2
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	e001      	b.n	800a092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a08e:	2300      	movs	r3, #0
 800a090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a092:	687b      	ldr	r3, [r7, #4]
	}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	20000db4 	.word	0x20000db4
 800a0a4:	20000dd0 	.word	0x20000dd0

0800a0a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d056      	beq.n	800a16c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c2:	4b2d      	ldr	r3, [pc, #180]	; (800a178 <xTaskPriorityInherit+0xd0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d246      	bcs.n	800a15a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	db06      	blt.n	800a0e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0d4:	4b28      	ldr	r3, [pc, #160]	; (800a178 <xTaskPriorityInherit+0xd0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6959      	ldr	r1, [r3, #20]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4a22      	ldr	r2, [pc, #136]	; (800a17c <xTaskPriorityInherit+0xd4>)
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	d101      	bne.n	800a0fe <xTaskPriorityInherit+0x56>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <xTaskPriorityInherit+0x58>
 800a0fe:	2300      	movs	r3, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d022      	beq.n	800a14a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	3304      	adds	r3, #4
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe f9d9 	bl	80084c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a10e:	4b1a      	ldr	r3, [pc, #104]	; (800a178 <xTaskPriorityInherit+0xd0>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11c:	4b18      	ldr	r3, [pc, #96]	; (800a180 <xTaskPriorityInherit+0xd8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <xTaskPriorityInherit+0x84>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4a15      	ldr	r2, [pc, #84]	; (800a180 <xTaskPriorityInherit+0xd8>)
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4a10      	ldr	r2, [pc, #64]	; (800a17c <xTaskPriorityInherit+0xd4>)
 800a13a:	441a      	add	r2, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f7fe f95f 	bl	8008406 <vListInsertEnd>
 800a148:	e004      	b.n	800a154 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <xTaskPriorityInherit+0xd0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e008      	b.n	800a16c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a15e:	4b06      	ldr	r3, [pc, #24]	; (800a178 <xTaskPriorityInherit+0xd0>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	429a      	cmp	r2, r3
 800a166:	d201      	bcs.n	800a16c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a168:	2301      	movs	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a16c:	68fb      	ldr	r3, [r7, #12]
	}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	200008d4 	.word	0x200008d4
 800a17c:	200008d8 	.word	0x200008d8
 800a180:	20000db0 	.word	0x20000db0

0800a184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d058      	beq.n	800a24c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a19a:	4b2f      	ldr	r3, [pc, #188]	; (800a258 <xTaskPriorityDisinherit+0xd4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d00b      	beq.n	800a1bc <xTaskPriorityDisinherit+0x38>
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	b672      	cpsid	i
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	b662      	cpsie	i
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	e7fe      	b.n	800a1ba <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10b      	bne.n	800a1dc <xTaskPriorityDisinherit+0x58>
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	b672      	cpsid	i
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	b662      	cpsie	i
 800a1d8:	60bb      	str	r3, [r7, #8]
 800a1da:	e7fe      	b.n	800a1da <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e0:	1e5a      	subs	r2, r3, #1
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d02c      	beq.n	800a24c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d128      	bne.n	800a24c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe f95e 	bl	80084c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21c:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <xTaskPriorityDisinherit+0xd8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d903      	bls.n	800a22c <xTaskPriorityDisinherit+0xa8>
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	4a0c      	ldr	r2, [pc, #48]	; (800a25c <xTaskPriorityDisinherit+0xd8>)
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4a09      	ldr	r2, [pc, #36]	; (800a260 <xTaskPriorityDisinherit+0xdc>)
 800a23a:	441a      	add	r2, r3
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7fe f8df 	bl	8008406 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a248:	2301      	movs	r3, #1
 800a24a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a24c:	697b      	ldr	r3, [r7, #20]
	}
 800a24e:	4618      	mov	r0, r3
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	200008d4 	.word	0x200008d4
 800a25c:	20000db0 	.word	0x20000db0
 800a260:	200008d8 	.word	0x200008d8

0800a264 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a272:	2301      	movs	r3, #1
 800a274:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d071      	beq.n	800a360 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10b      	bne.n	800a29c <vTaskPriorityDisinheritAfterTimeout+0x38>
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	b672      	cpsid	i
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	b662      	cpsie	i
 800a298:	60fb      	str	r3, [r7, #12]
 800a29a:	e7fe      	b.n	800a29a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d902      	bls.n	800a2ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	61fb      	str	r3, [r7, #28]
 800a2aa:	e002      	b.n	800a2b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d051      	beq.n	800a360 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d14c      	bne.n	800a360 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a2c6:	4b28      	ldr	r3, [pc, #160]	; (800a368 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d10b      	bne.n	800a2e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	b672      	cpsid	i
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	b662      	cpsie	i
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	e7fe      	b.n	800a2e6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	69fa      	ldr	r2, [r7, #28]
 800a2f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db04      	blt.n	800a306 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	6959      	ldr	r1, [r3, #20]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4a15      	ldr	r2, [pc, #84]	; (800a36c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a316:	4413      	add	r3, r2
 800a318:	4299      	cmp	r1, r3
 800a31a:	d101      	bne.n	800a320 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800a320:	2300      	movs	r3, #0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d01c      	beq.n	800a360 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	3304      	adds	r3, #4
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe f8c8 	bl	80084c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a334:	4b0e      	ldr	r3, [pc, #56]	; (800a370 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d903      	bls.n	800a344 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a0b      	ldr	r2, [pc, #44]	; (800a370 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4a06      	ldr	r2, [pc, #24]	; (800a36c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a352:	441a      	add	r2, r3
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	3304      	adds	r3, #4
 800a358:	4619      	mov	r1, r3
 800a35a:	4610      	mov	r0, r2
 800a35c:	f7fe f853 	bl	8008406 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a360:	bf00      	nop
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200008d4 	.word	0x200008d4
 800a36c:	200008d8 	.word	0x200008d8
 800a370:	20000db0 	.word	0x20000db0

0800a374 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <pvTaskIncrementMutexHeldCount+0x24>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d004      	beq.n	800a38a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a380:	4b05      	ldr	r3, [pc, #20]	; (800a398 <pvTaskIncrementMutexHeldCount+0x24>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a386:	3201      	adds	r2, #1
 800a388:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a38a:	4b03      	ldr	r3, [pc, #12]	; (800a398 <pvTaskIncrementMutexHeldCount+0x24>)
 800a38c:	681b      	ldr	r3, [r3, #0]
	}
 800a38e:	4618      	mov	r0, r3
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	200008d4 	.word	0x200008d4

0800a39c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a3a6:	4b21      	ldr	r3, [pc, #132]	; (800a42c <prvAddCurrentTaskToDelayedList+0x90>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3ac:	4b20      	ldr	r3, [pc, #128]	; (800a430 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe f884 	bl	80084c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3be:	d10a      	bne.n	800a3d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c6:	4b1a      	ldr	r3, [pc, #104]	; (800a430 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4819      	ldr	r0, [pc, #100]	; (800a434 <prvAddCurrentTaskToDelayedList+0x98>)
 800a3d0:	f7fe f819 	bl	8008406 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3d4:	e026      	b.n	800a424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4413      	add	r3, r2
 800a3dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d209      	bcs.n	800a402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7fe f827 	bl	800844e <vListInsert>
}
 800a400:	e010      	b.n	800a424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a402:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <prvAddCurrentTaskToDelayedList+0x94>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f7fe f81d 	bl	800844e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a414:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d202      	bcs.n	800a424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a41e:	4a08      	ldr	r2, [pc, #32]	; (800a440 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	6013      	str	r3, [r2, #0]
}
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000dac 	.word	0x20000dac
 800a430:	200008d4 	.word	0x200008d4
 800a434:	20000d94 	.word	0x20000d94
 800a438:	20000d64 	.word	0x20000d64
 800a43c:	20000d60 	.word	0x20000d60
 800a440:	20000dc8 	.word	0x20000dc8

0800a444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08a      	sub	sp, #40	; 0x28
 800a448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a44e:	f000 fad1 	bl	800a9f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a452:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xTimerCreateTimerTask+0x84>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d021      	beq.n	800a49e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a462:	1d3a      	adds	r2, r7, #4
 800a464:	f107 0108 	add.w	r1, r7, #8
 800a468:	f107 030c 	add.w	r3, r7, #12
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fd ff83 	bl	8008378 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	9202      	str	r2, [sp, #8]
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	2302      	movs	r3, #2
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	2300      	movs	r3, #0
 800a482:	460a      	mov	r2, r1
 800a484:	4911      	ldr	r1, [pc, #68]	; (800a4cc <xTimerCreateTimerTask+0x88>)
 800a486:	4812      	ldr	r0, [pc, #72]	; (800a4d0 <xTimerCreateTimerTask+0x8c>)
 800a488:	f7fe ff24 	bl	80092d4 <xTaskCreateStatic>
 800a48c:	4602      	mov	r2, r0
 800a48e:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <xTimerCreateTimerTask+0x90>)
 800a490:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a492:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <xTimerCreateTimerTask+0x90>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a49a:	2301      	movs	r3, #1
 800a49c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10b      	bne.n	800a4bc <xTimerCreateTimerTask+0x78>
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	b672      	cpsid	i
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	b662      	cpsie	i
 800a4b8:	613b      	str	r3, [r7, #16]
 800a4ba:	e7fe      	b.n	800a4ba <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a4bc:	697b      	ldr	r3, [r7, #20]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000e04 	.word	0x20000e04
 800a4cc:	0800d110 	.word	0x0800d110
 800a4d0:	0800a5f9 	.word	0x0800a5f9
 800a4d4:	20000e08 	.word	0x20000e08

0800a4d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <xTimerGenericCommand+0x30>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	b672      	cpsid	i
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	b662      	cpsie	i
 800a504:	623b      	str	r3, [r7, #32]
 800a506:	e7fe      	b.n	800a506 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a508:	4b19      	ldr	r3, [pc, #100]	; (800a570 <xTimerGenericCommand+0x98>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d02a      	beq.n	800a566 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b05      	cmp	r3, #5
 800a520:	dc18      	bgt.n	800a554 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a522:	f7ff fda3 	bl	800a06c <xTaskGetSchedulerState>
 800a526:	4603      	mov	r3, r0
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d109      	bne.n	800a540 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a52c:	4b10      	ldr	r3, [pc, #64]	; (800a570 <xTimerGenericCommand+0x98>)
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	f107 0110 	add.w	r1, r7, #16
 800a534:	2300      	movs	r3, #0
 800a536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a538:	f7fe f9b8 	bl	80088ac <xQueueGenericSend>
 800a53c:	6278      	str	r0, [r7, #36]	; 0x24
 800a53e:	e012      	b.n	800a566 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a540:	4b0b      	ldr	r3, [pc, #44]	; (800a570 <xTimerGenericCommand+0x98>)
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	f107 0110 	add.w	r1, r7, #16
 800a548:	2300      	movs	r3, #0
 800a54a:	2200      	movs	r2, #0
 800a54c:	f7fe f9ae 	bl	80088ac <xQueueGenericSend>
 800a550:	6278      	str	r0, [r7, #36]	; 0x24
 800a552:	e008      	b.n	800a566 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a554:	4b06      	ldr	r3, [pc, #24]	; (800a570 <xTimerGenericCommand+0x98>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	f107 0110 	add.w	r1, r7, #16
 800a55c:	2300      	movs	r3, #0
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	f7fe faa6 	bl	8008ab0 <xQueueGenericSendFromISR>
 800a564:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3728      	adds	r7, #40	; 0x28
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20000e04 	.word	0x20000e04

0800a574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af02      	add	r7, sp, #8
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a57e:	4b1d      	ldr	r3, [pc, #116]	; (800a5f4 <prvProcessExpiredTimer+0x80>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fd ff97 	bl	80084c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d123      	bne.n	800a5e2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	18d1      	adds	r1, r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	6978      	ldr	r0, [r7, #20]
 800a5a8:	f000 f8ca 	bl	800a740 <prvInsertTimerInActiveList>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d017      	beq.n	800a5e2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	6978      	ldr	r0, [r7, #20]
 800a5be:	f7ff ff8b 	bl	800a4d8 <xTimerGenericCommand>
 800a5c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10b      	bne.n	800a5e2 <prvProcessExpiredTimer+0x6e>
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	b672      	cpsid	i
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	b662      	cpsie	i
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	e7fe      	b.n	800a5e0 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	6978      	ldr	r0, [r7, #20]
 800a5e8:	4798      	blx	r3
}
 800a5ea:	bf00      	nop
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20000dfc 	.word	0x20000dfc

0800a5f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a600:	f107 0308 	add.w	r3, r7, #8
 800a604:	4618      	mov	r0, r3
 800a606:	f000 f857 	bl	800a6b8 <prvGetNextExpireTime>
 800a60a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4619      	mov	r1, r3
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 f803 	bl	800a61c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a616:	f000 f8d5 	bl	800a7c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a61a:	e7f1      	b.n	800a600 <prvTimerTask+0x8>

0800a61c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a626:	f7ff f90f 	bl	8009848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a62a:	f107 0308 	add.w	r3, r7, #8
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f866 	bl	800a700 <prvSampleTimeNow>
 800a634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d130      	bne.n	800a69e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <prvProcessTimerOrBlockTask+0x3c>
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	429a      	cmp	r2, r3
 800a648:	d806      	bhi.n	800a658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a64a:	f7ff f90b 	bl	8009864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a64e:	68f9      	ldr	r1, [r7, #12]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff ff8f 	bl	800a574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a656:	e024      	b.n	800a6a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a65e:	4b13      	ldr	r3, [pc, #76]	; (800a6ac <prvProcessTimerOrBlockTask+0x90>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	bf0c      	ite	eq
 800a668:	2301      	moveq	r3, #1
 800a66a:	2300      	movne	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a670:	4b0f      	ldr	r3, [pc, #60]	; (800a6b0 <prvProcessTimerOrBlockTask+0x94>)
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4619      	mov	r1, r3
 800a67e:	f7fe fdf5 	bl	800926c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a682:	f7ff f8ef 	bl	8009864 <xTaskResumeAll>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10a      	bne.n	800a6a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <prvProcessTimerOrBlockTask+0x98>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	f3bf 8f6f 	isb	sy
}
 800a69c:	e001      	b.n	800a6a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a69e:	f7ff f8e1 	bl	8009864 <xTaskResumeAll>
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000e00 	.word	0x20000e00
 800a6b0:	20000e04 	.word	0x20000e04
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6c0:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <prvGetNextExpireTime+0x44>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	bf0c      	ite	eq
 800a6ca:	2301      	moveq	r3, #1
 800a6cc:	2300      	movne	r3, #0
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6de:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <prvGetNextExpireTime+0x44>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e001      	b.n	800a6ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	20000dfc 	.word	0x20000dfc

0800a700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a708:	f7ff f94a 	bl	80099a0 <xTaskGetTickCount>
 800a70c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a70e:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <prvSampleTimeNow+0x3c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	429a      	cmp	r2, r3
 800a716:	d205      	bcs.n	800a724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a718:	f000 f90a 	bl	800a930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	e002      	b.n	800a72a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a72a:	4a04      	ldr	r2, [pc, #16]	; (800a73c <prvSampleTimeNow+0x3c>)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a730:	68fb      	ldr	r3, [r7, #12]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000e0c 	.word	0x20000e0c

0800a740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	429a      	cmp	r2, r3
 800a764:	d812      	bhi.n	800a78c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	1ad2      	subs	r2, r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	429a      	cmp	r2, r3
 800a772:	d302      	bcc.n	800a77a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a774:	2301      	movs	r3, #1
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	e01b      	b.n	800a7b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a77a:	4b10      	ldr	r3, [pc, #64]	; (800a7bc <prvInsertTimerInActiveList+0x7c>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3304      	adds	r3, #4
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7fd fe62 	bl	800844e <vListInsert>
 800a78a:	e012      	b.n	800a7b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d206      	bcs.n	800a7a2 <prvInsertTimerInActiveList+0x62>
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d302      	bcc.n	800a7a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	e007      	b.n	800a7b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7a2:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <prvInsertTimerInActiveList+0x80>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f7fd fe4e 	bl	800844e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7b2:	697b      	ldr	r3, [r7, #20]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	20000e00 	.word	0x20000e00
 800a7c0:	20000dfc 	.word	0x20000dfc

0800a7c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08e      	sub	sp, #56	; 0x38
 800a7c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7ca:	e09f      	b.n	800a90c <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	da19      	bge.n	800a806 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7d2:	1d3b      	adds	r3, r7, #4
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10b      	bne.n	800a7f6 <prvProcessReceivedCommands+0x32>
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	b672      	cpsid	i
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	b662      	cpsie	i
 800a7f2:	61fb      	str	r3, [r7, #28]
 800a7f4:	e7fe      	b.n	800a7f4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fc:	6850      	ldr	r0, [r2, #4]
 800a7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a800:	6892      	ldr	r2, [r2, #8]
 800a802:	4611      	mov	r1, r2
 800a804:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	db7e      	blt.n	800a90a <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	3304      	adds	r3, #4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd fe4f 	bl	80084c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a822:	463b      	mov	r3, r7
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff ff6b 	bl	800a700 <prvSampleTimeNow>
 800a82a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d86c      	bhi.n	800a90c <prvProcessReceivedCommands+0x148>
 800a832:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <prvProcessReceivedCommands+0x74>)
 800a834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a838:	0800a861 	.word	0x0800a861
 800a83c:	0800a861 	.word	0x0800a861
 800a840:	0800a861 	.word	0x0800a861
 800a844:	0800a90d 	.word	0x0800a90d
 800a848:	0800a8bf 	.word	0x0800a8bf
 800a84c:	0800a8f9 	.word	0x0800a8f9
 800a850:	0800a861 	.word	0x0800a861
 800a854:	0800a861 	.word	0x0800a861
 800a858:	0800a90d 	.word	0x0800a90d
 800a85c:	0800a8bf 	.word	0x0800a8bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	18d1      	adds	r1, r2, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86e:	f7ff ff67 	bl	800a740 <prvInsertTimerInActiveList>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d049      	beq.n	800a90c <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d141      	bne.n	800a90c <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	441a      	add	r2, r3
 800a890:	2300      	movs	r3, #0
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	2100      	movs	r1, #0
 800a898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89a:	f7ff fe1d 	bl	800a4d8 <xTimerGenericCommand>
 800a89e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d132      	bne.n	800a90c <prvProcessReceivedCommands+0x148>
 800a8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8aa:	b672      	cpsid	i
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	b662      	cpsie	i
 800a8ba:	61bb      	str	r3, [r7, #24]
 800a8bc:	e7fe      	b.n	800a8bc <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10b      	bne.n	800a8e4 <prvProcessReceivedCommands+0x120>
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	b672      	cpsid	i
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	b662      	cpsie	i
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	e7fe      	b.n	800a8e2 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	699a      	ldr	r2, [r3, #24]
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	18d1      	adds	r1, r2, r3
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8f2:	f7ff ff25 	bl	800a740 <prvInsertTimerInActiveList>
					break;
 800a8f6:	e009      	b.n	800a90c <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d104      	bne.n	800a90c <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 800a902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a904:	f000 fbaa 	bl	800b05c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a908:	e000      	b.n	800a90c <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a90a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <prvProcessReceivedCommands+0x168>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	1d39      	adds	r1, r7, #4
 800a912:	2200      	movs	r2, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe f967 	bl	8008be8 <xQueueReceive>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f47f af55 	bne.w	800a7cc <prvProcessReceivedCommands+0x8>
	}
}
 800a922:	bf00      	nop
 800a924:	3730      	adds	r7, #48	; 0x30
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000e04 	.word	0x20000e04

0800a930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a936:	e046      	b.n	800a9c6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a938:	4b2c      	ldr	r3, [pc, #176]	; (800a9ec <prvSwitchTimerLists+0xbc>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a942:	4b2a      	ldr	r3, [pc, #168]	; (800a9ec <prvSwitchTimerLists+0xbc>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3304      	adds	r3, #4
 800a950:	4618      	mov	r0, r3
 800a952:	f7fd fdb5 	bl	80084c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d12f      	bne.n	800a9c6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4413      	add	r3, r2
 800a96e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	d90e      	bls.n	800a996 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <prvSwitchTimerLists+0xbc>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3304      	adds	r3, #4
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	f7fd fd5d 	bl	800844e <vListInsert>
 800a994:	e017      	b.n	800a9c6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a996:	2300      	movs	r3, #0
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	2300      	movs	r3, #0
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	2100      	movs	r1, #0
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7ff fd99 	bl	800a4d8 <xTimerGenericCommand>
 800a9a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10b      	bne.n	800a9c6 <prvSwitchTimerLists+0x96>
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	b672      	cpsid	i
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	b662      	cpsie	i
 800a9c2:	603b      	str	r3, [r7, #0]
 800a9c4:	e7fe      	b.n	800a9c4 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <prvSwitchTimerLists+0xbc>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1b3      	bne.n	800a938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <prvSwitchTimerLists+0xbc>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9d6:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <prvSwitchTimerLists+0xc0>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <prvSwitchTimerLists+0xbc>)
 800a9dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9de:	4a04      	ldr	r2, [pc, #16]	; (800a9f0 <prvSwitchTimerLists+0xc0>)
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	6013      	str	r3, [r2, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20000dfc 	.word	0x20000dfc
 800a9f0:	20000e00 	.word	0x20000e00

0800a9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9fa:	f000 f945 	bl	800ac88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9fe:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d120      	bne.n	800aa48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa06:	4814      	ldr	r0, [pc, #80]	; (800aa58 <prvCheckForValidListAndQueue+0x64>)
 800aa08:	f7fd fcd0 	bl	80083ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa0c:	4813      	ldr	r0, [pc, #76]	; (800aa5c <prvCheckForValidListAndQueue+0x68>)
 800aa0e:	f7fd fccd 	bl	80083ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa12:	4b13      	ldr	r3, [pc, #76]	; (800aa60 <prvCheckForValidListAndQueue+0x6c>)
 800aa14:	4a10      	ldr	r2, [pc, #64]	; (800aa58 <prvCheckForValidListAndQueue+0x64>)
 800aa16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa18:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <prvCheckForValidListAndQueue+0x70>)
 800aa1a:	4a10      	ldr	r2, [pc, #64]	; (800aa5c <prvCheckForValidListAndQueue+0x68>)
 800aa1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa1e:	2300      	movs	r3, #0
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <prvCheckForValidListAndQueue+0x74>)
 800aa24:	4a11      	ldr	r2, [pc, #68]	; (800aa6c <prvCheckForValidListAndQueue+0x78>)
 800aa26:	2110      	movs	r1, #16
 800aa28:	200a      	movs	r0, #10
 800aa2a:	f7fd fddd 	bl	80085e8 <xQueueGenericCreateStatic>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	4b08      	ldr	r3, [pc, #32]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa34:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <prvCheckForValidListAndQueue+0x60>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	490b      	ldr	r1, [pc, #44]	; (800aa70 <prvCheckForValidListAndQueue+0x7c>)
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fbea 	bl	800921c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa48:	f000 f950 	bl	800acec <vPortExitCritical>
}
 800aa4c:	bf00      	nop
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000e04 	.word	0x20000e04
 800aa58:	20000dd4 	.word	0x20000dd4
 800aa5c:	20000de8 	.word	0x20000de8
 800aa60:	20000dfc 	.word	0x20000dfc
 800aa64:	20000e00 	.word	0x20000e00
 800aa68:	20000eb0 	.word	0x20000eb0
 800aa6c:	20000e10 	.word	0x20000e10
 800aa70:	0800d118 	.word	0x0800d118

0800aa74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3b04      	subs	r3, #4
 800aa84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3b04      	subs	r3, #4
 800aa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	f023 0201 	bic.w	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3b04      	subs	r3, #4
 800aaa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aaa4:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <pxPortInitialiseStack+0x64>)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3b14      	subs	r3, #20
 800aaae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3b04      	subs	r3, #4
 800aaba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f06f 0202 	mvn.w	r2, #2
 800aac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	3b20      	subs	r3, #32
 800aac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaca:	68fb      	ldr	r3, [r7, #12]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	0800aadd 	.word	0x0800aadd

0800aadc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aae6:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <prvTaskExitError+0x58>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d00b      	beq.n	800ab08 <prvTaskExitError+0x2c>
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	b672      	cpsid	i
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	b662      	cpsie	i
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	e7fe      	b.n	800ab06 <prvTaskExitError+0x2a>
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	b672      	cpsid	i
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	b662      	cpsie	i
 800ab1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab1e:	bf00      	nop
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0fc      	beq.n	800ab20 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000118 	.word	0x20000118
	...

0800ab40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <pxCurrentTCBConst2>)
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	6808      	ldr	r0, [r1, #0]
 800ab46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4a:	f380 8809 	msr	PSP, r0
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f04f 0000 	mov.w	r0, #0
 800ab56:	f380 8811 	msr	BASEPRI, r0
 800ab5a:	4770      	bx	lr
 800ab5c:	f3af 8000 	nop.w

0800ab60 <pxCurrentTCBConst2>:
 800ab60:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop

0800ab68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab68:	4808      	ldr	r0, [pc, #32]	; (800ab8c <prvPortStartFirstTask+0x24>)
 800ab6a:	6800      	ldr	r0, [r0, #0]
 800ab6c:	6800      	ldr	r0, [r0, #0]
 800ab6e:	f380 8808 	msr	MSP, r0
 800ab72:	f04f 0000 	mov.w	r0, #0
 800ab76:	f380 8814 	msr	CONTROL, r0
 800ab7a:	b662      	cpsie	i
 800ab7c:	b661      	cpsie	f
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	df00      	svc	0
 800ab88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab8a:	bf00      	nop
 800ab8c:	e000ed08 	.word	0xe000ed08

0800ab90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab96:	4b36      	ldr	r3, [pc, #216]	; (800ac70 <xPortStartScheduler+0xe0>)
 800ab98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	22ff      	movs	r2, #255	; 0xff
 800aba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	4b2e      	ldr	r3, [pc, #184]	; (800ac74 <xPortStartScheduler+0xe4>)
 800abbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <xPortStartScheduler+0xe8>)
 800abc0:	2207      	movs	r2, #7
 800abc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abc4:	e009      	b.n	800abda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800abc6:	4b2c      	ldr	r3, [pc, #176]	; (800ac78 <xPortStartScheduler+0xe8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3b01      	subs	r3, #1
 800abcc:	4a2a      	ldr	r2, [pc, #168]	; (800ac78 <xPortStartScheduler+0xe8>)
 800abce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abda:	78fb      	ldrb	r3, [r7, #3]
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe2:	2b80      	cmp	r3, #128	; 0x80
 800abe4:	d0ef      	beq.n	800abc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abe6:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <xPortStartScheduler+0xe8>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f1c3 0307 	rsb	r3, r3, #7
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d00b      	beq.n	800ac0a <xPortStartScheduler+0x7a>
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	b672      	cpsid	i
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	b662      	cpsie	i
 800ac06:	60bb      	str	r3, [r7, #8]
 800ac08:	e7fe      	b.n	800ac08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac0a:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <xPortStartScheduler+0xe8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	021b      	lsls	r3, r3, #8
 800ac10:	4a19      	ldr	r2, [pc, #100]	; (800ac78 <xPortStartScheduler+0xe8>)
 800ac12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac14:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <xPortStartScheduler+0xe8>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac1c:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <xPortStartScheduler+0xe8>)
 800ac1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac28:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <xPortStartScheduler+0xec>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <xPortStartScheduler+0xec>)
 800ac2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac34:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <xPortStartScheduler+0xec>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <xPortStartScheduler+0xec>)
 800ac3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac40:	f000 f8d4 	bl	800adec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac44:	4b0e      	ldr	r3, [pc, #56]	; (800ac80 <xPortStartScheduler+0xf0>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac4a:	f000 f8f3 	bl	800ae34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <xPortStartScheduler+0xf4>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a0c      	ldr	r2, [pc, #48]	; (800ac84 <xPortStartScheduler+0xf4>)
 800ac54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac5a:	f7ff ff85 	bl	800ab68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac5e:	f7fe ff81 	bl	8009b64 <vTaskSwitchContext>
	prvTaskExitError();
 800ac62:	f7ff ff3b 	bl	800aadc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	e000e400 	.word	0xe000e400
 800ac74:	20000f00 	.word	0x20000f00
 800ac78:	20000f04 	.word	0x20000f04
 800ac7c:	e000ed20 	.word	0xe000ed20
 800ac80:	20000118 	.word	0x20000118
 800ac84:	e000ef34 	.word	0xe000ef34

0800ac88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	b672      	cpsid	i
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	b662      	cpsie	i
 800aca2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <vPortEnterCritical+0x5c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3301      	adds	r3, #1
 800acaa:	4a0e      	ldr	r2, [pc, #56]	; (800ace4 <vPortEnterCritical+0x5c>)
 800acac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acae:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <vPortEnterCritical+0x5c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d110      	bne.n	800acd8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acb6:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <vPortEnterCritical+0x60>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <vPortEnterCritical+0x50>
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	b672      	cpsid	i
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	b662      	cpsie	i
 800acd4:	603b      	str	r3, [r7, #0]
 800acd6:	e7fe      	b.n	800acd6 <vPortEnterCritical+0x4e>
	}
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	20000118 	.word	0x20000118
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <vPortExitCritical+0x50>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10b      	bne.n	800ad12 <vPortExitCritical+0x26>
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	b672      	cpsid	i
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	b662      	cpsie	i
 800ad0e:	607b      	str	r3, [r7, #4]
 800ad10:	e7fe      	b.n	800ad10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ad12:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <vPortExitCritical+0x50>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	4a08      	ldr	r2, [pc, #32]	; (800ad3c <vPortExitCritical+0x50>)
 800ad1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad1c:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <vPortExitCritical+0x50>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d104      	bne.n	800ad2e <vPortExitCritical+0x42>
 800ad24:	2300      	movs	r3, #0
 800ad26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000118 	.word	0x20000118

0800ad40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad40:	f3ef 8009 	mrs	r0, PSP
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	4b15      	ldr	r3, [pc, #84]	; (800ada0 <pxCurrentTCBConst>)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	f01e 0f10 	tst.w	lr, #16
 800ad50:	bf08      	it	eq
 800ad52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5a:	6010      	str	r0, [r2, #0]
 800ad5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad64:	b672      	cpsid	i
 800ad66:	f380 8811 	msr	BASEPRI, r0
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	b662      	cpsie	i
 800ad74:	f7fe fef6 	bl	8009b64 <vTaskSwitchContext>
 800ad78:	f04f 0000 	mov.w	r0, #0
 800ad7c:	f380 8811 	msr	BASEPRI, r0
 800ad80:	bc09      	pop	{r0, r3}
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	f01e 0f10 	tst.w	lr, #16
 800ad8e:	bf08      	it	eq
 800ad90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad94:	f380 8809 	msr	PSP, r0
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop

0800ada0 <pxCurrentTCBConst>:
 800ada0:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop

0800ada8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	b672      	cpsid	i
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	b662      	cpsie	i
 800adc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800adc4:	f7fe fe0e 	bl	80099e4 <xTaskIncrementTick>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adce:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <SysTick_Handler+0x40>)
 800add0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	2300      	movs	r3, #0
 800add8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ade0:	bf00      	nop
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <vPortSetupTimerInterrupt+0x34>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adf6:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <vPortSetupTimerInterrupt+0x38>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adfc:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <vPortSetupTimerInterrupt+0x3c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0a      	ldr	r2, [pc, #40]	; (800ae2c <vPortSetupTimerInterrupt+0x40>)
 800ae02:	fba2 2303 	umull	r2, r3, r2, r3
 800ae06:	099b      	lsrs	r3, r3, #6
 800ae08:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <vPortSetupTimerInterrupt+0x44>)
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae0e:	4b04      	ldr	r3, [pc, #16]	; (800ae20 <vPortSetupTimerInterrupt+0x34>)
 800ae10:	2207      	movs	r2, #7
 800ae12:	601a      	str	r2, [r3, #0]
}
 800ae14:	bf00      	nop
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	e000e010 	.word	0xe000e010
 800ae24:	e000e018 	.word	0xe000e018
 800ae28:	20000000 	.word	0x20000000
 800ae2c:	10624dd3 	.word	0x10624dd3
 800ae30:	e000e014 	.word	0xe000e014

0800ae34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae44 <vPortEnableVFP+0x10>
 800ae38:	6801      	ldr	r1, [r0, #0]
 800ae3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae3e:	6001      	str	r1, [r0, #0]
 800ae40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae42:	bf00      	nop
 800ae44:	e000ed88 	.word	0xe000ed88

0800ae48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae4e:	f3ef 8305 	mrs	r3, IPSR
 800ae52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b0f      	cmp	r3, #15
 800ae58:	d915      	bls.n	800ae86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae5a:	4a18      	ldr	r2, [pc, #96]	; (800aebc <vPortValidateInterruptPriority+0x74>)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4413      	add	r3, r2
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae64:	4b16      	ldr	r3, [pc, #88]	; (800aec0 <vPortValidateInterruptPriority+0x78>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	7afa      	ldrb	r2, [r7, #11]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d20b      	bcs.n	800ae86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	b672      	cpsid	i
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	b662      	cpsie	i
 800ae82:	607b      	str	r3, [r7, #4]
 800ae84:	e7fe      	b.n	800ae84 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae86:	4b0f      	ldr	r3, [pc, #60]	; (800aec4 <vPortValidateInterruptPriority+0x7c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae8e:	4b0e      	ldr	r3, [pc, #56]	; (800aec8 <vPortValidateInterruptPriority+0x80>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d90b      	bls.n	800aeae <vPortValidateInterruptPriority+0x66>
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	b672      	cpsid	i
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	b662      	cpsie	i
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	e7fe      	b.n	800aeac <vPortValidateInterruptPriority+0x64>
	}
 800aeae:	bf00      	nop
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	e000e3f0 	.word	0xe000e3f0
 800aec0:	20000f00 	.word	0x20000f00
 800aec4:	e000ed0c 	.word	0xe000ed0c
 800aec8:	20000f04 	.word	0x20000f04

0800aecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aed4:	2300      	movs	r3, #0
 800aed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aed8:	f7fe fcb6 	bl	8009848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aedc:	4b5a      	ldr	r3, [pc, #360]	; (800b048 <pvPortMalloc+0x17c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aee4:	f000 f916 	bl	800b114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aee8:	4b58      	ldr	r3, [pc, #352]	; (800b04c <pvPortMalloc+0x180>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4013      	ands	r3, r2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f040 8090 	bne.w	800b016 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01e      	beq.n	800af3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aefc:	2208      	movs	r2, #8
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4413      	add	r3, r2
 800af02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d015      	beq.n	800af3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	3308      	adds	r3, #8
 800af16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <pvPortMalloc+0x6e>
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	b672      	cpsid	i
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	b662      	cpsie	i
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e7fe      	b.n	800af38 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d06a      	beq.n	800b016 <pvPortMalloc+0x14a>
 800af40:	4b43      	ldr	r3, [pc, #268]	; (800b050 <pvPortMalloc+0x184>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	429a      	cmp	r2, r3
 800af48:	d865      	bhi.n	800b016 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af4a:	4b42      	ldr	r3, [pc, #264]	; (800b054 <pvPortMalloc+0x188>)
 800af4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af4e:	4b41      	ldr	r3, [pc, #260]	; (800b054 <pvPortMalloc+0x188>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af54:	e004      	b.n	800af60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	429a      	cmp	r2, r3
 800af68:	d903      	bls.n	800af72 <pvPortMalloc+0xa6>
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f1      	bne.n	800af56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af72:	4b35      	ldr	r3, [pc, #212]	; (800b048 <pvPortMalloc+0x17c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af78:	429a      	cmp	r2, r3
 800af7a:	d04c      	beq.n	800b016 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2208      	movs	r2, #8
 800af82:	4413      	add	r3, r2
 800af84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	1ad2      	subs	r2, r2, r3
 800af96:	2308      	movs	r3, #8
 800af98:	005b      	lsls	r3, r3, #1
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d920      	bls.n	800afe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4413      	add	r3, r2
 800afa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <pvPortMalloc+0xfc>
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	b672      	cpsid	i
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	b662      	cpsie	i
 800afc4:	613b      	str	r3, [r7, #16]
 800afc6:	e7fe      	b.n	800afc6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	1ad2      	subs	r2, r2, r3
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afda:	69b8      	ldr	r0, [r7, #24]
 800afdc:	f000 f8fc 	bl	800b1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afe0:	4b1b      	ldr	r3, [pc, #108]	; (800b050 <pvPortMalloc+0x184>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	4a19      	ldr	r2, [pc, #100]	; (800b050 <pvPortMalloc+0x184>)
 800afec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afee:	4b18      	ldr	r3, [pc, #96]	; (800b050 <pvPortMalloc+0x184>)
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	4b19      	ldr	r3, [pc, #100]	; (800b058 <pvPortMalloc+0x18c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d203      	bcs.n	800b002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800affa:	4b15      	ldr	r3, [pc, #84]	; (800b050 <pvPortMalloc+0x184>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a16      	ldr	r2, [pc, #88]	; (800b058 <pvPortMalloc+0x18c>)
 800b000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b11      	ldr	r3, [pc, #68]	; (800b04c <pvPortMalloc+0x180>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	431a      	orrs	r2, r3
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b016:	f7fe fc25 	bl	8009864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <pvPortMalloc+0x170>
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	b672      	cpsid	i
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	b662      	cpsie	i
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	e7fe      	b.n	800b03a <pvPortMalloc+0x16e>
	return pvReturn;
 800b03c:	69fb      	ldr	r3, [r7, #28]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3728      	adds	r7, #40	; 0x28
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20004b10 	.word	0x20004b10
 800b04c:	20004b1c 	.word	0x20004b1c
 800b050:	20004b14 	.word	0x20004b14
 800b054:	20004b08 	.word	0x20004b08
 800b058:	20004b18 	.word	0x20004b18

0800b05c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d04a      	beq.n	800b104 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b06e:	2308      	movs	r3, #8
 800b070:	425b      	negs	r3, r3
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	4413      	add	r3, r2
 800b076:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	4b22      	ldr	r3, [pc, #136]	; (800b10c <vPortFree+0xb0>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4013      	ands	r3, r2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10b      	bne.n	800b0a2 <vPortFree+0x46>
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	b672      	cpsid	i
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	b662      	cpsie	i
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	e7fe      	b.n	800b0a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00b      	beq.n	800b0c2 <vPortFree+0x66>
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	b672      	cpsid	i
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	b662      	cpsie	i
 800b0be:	60bb      	str	r3, [r7, #8]
 800b0c0:	e7fe      	b.n	800b0c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <vPortFree+0xb0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d019      	beq.n	800b104 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d115      	bne.n	800b104 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <vPortFree+0xb0>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	43db      	mvns	r3, r3
 800b0e2:	401a      	ands	r2, r3
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0e8:	f7fe fbae 	bl	8009848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <vPortFree+0xb4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	4a06      	ldr	r2, [pc, #24]	; (800b110 <vPortFree+0xb4>)
 800b0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0fa:	6938      	ldr	r0, [r7, #16]
 800b0fc:	f000 f86c 	bl	800b1d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b100:	f7fe fbb0 	bl	8009864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20004b1c 	.word	0x20004b1c
 800b110:	20004b14 	.word	0x20004b14

0800b114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <prvHeapInit+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3307      	adds	r3, #7
 800b132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0307 	bic.w	r3, r3, #7
 800b13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <prvHeapInit+0xac>)
 800b144:	4413      	add	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b14c:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <prvHeapInit+0xb0>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <prvHeapInit+0xb0>)
 800b154:	2200      	movs	r2, #0
 800b156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b160:	2208      	movs	r2, #8
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <prvHeapInit+0xb4>)
 800b174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <prvHeapInit+0xb4>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b17e:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <prvHeapInit+0xb4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b194:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvHeapInit+0xb4>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvHeapInit+0xb8>)
 800b1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a09      	ldr	r2, [pc, #36]	; (800b1d0 <prvHeapInit+0xbc>)
 800b1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1ac:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <prvHeapInit+0xc0>)
 800b1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20000f08 	.word	0x20000f08
 800b1c4:	20004b08 	.word	0x20004b08
 800b1c8:	20004b10 	.word	0x20004b10
 800b1cc:	20004b18 	.word	0x20004b18
 800b1d0:	20004b14 	.word	0x20004b14
 800b1d4:	20004b1c 	.word	0x20004b1c

0800b1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1e0:	4b28      	ldr	r3, [pc, #160]	; (800b284 <prvInsertBlockIntoFreeList+0xac>)
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e002      	b.n	800b1ec <prvInsertBlockIntoFreeList+0x14>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d8f7      	bhi.n	800b1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	4413      	add	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d108      	bne.n	800b21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	441a      	add	r2, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d118      	bne.n	800b260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d00d      	beq.n	800b256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	441a      	add	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e008      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e003      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d002      	beq.n	800b276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20004b08 	.word	0x20004b08
 800b288:	20004b10 	.word	0x20004b10

0800b28c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b290:	2200      	movs	r2, #0
 800b292:	4912      	ldr	r1, [pc, #72]	; (800b2dc <MX_USB_DEVICE_Init+0x50>)
 800b294:	4812      	ldr	r0, [pc, #72]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b296:	f7fb fd40 	bl	8006d1a <USBD_Init>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2a0:	f7f5 ffe0 	bl	8001264 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b2a4:	490f      	ldr	r1, [pc, #60]	; (800b2e4 <MX_USB_DEVICE_Init+0x58>)
 800b2a6:	480e      	ldr	r0, [pc, #56]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b2a8:	f7fb fd62 	bl	8006d70 <USBD_RegisterClass>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2b2:	f7f5 ffd7 	bl	8001264 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b2b6:	490c      	ldr	r1, [pc, #48]	; (800b2e8 <MX_USB_DEVICE_Init+0x5c>)
 800b2b8:	4809      	ldr	r0, [pc, #36]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b2ba:	f7fb fcbf 	bl	8006c3c <USBD_CDC_RegisterInterface>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b2c4:	f7f5 ffce 	bl	8001264 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <MX_USB_DEVICE_Init+0x54>)
 800b2ca:	f7fb fd6b 	bl	8006da4 <USBD_Start>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b2d4:	f7f5 ffc6 	bl	8001264 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b2d8:	bf00      	nop
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	2000012c 	.word	0x2000012c
 800b2e0:	200065b0 	.word	0x200065b0
 800b2e4:	20000014 	.word	0x20000014
 800b2e8:	2000011c 	.word	0x2000011c

0800b2ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4905      	ldr	r1, [pc, #20]	; (800b308 <CDC_Init_FS+0x1c>)
 800b2f4:	4805      	ldr	r0, [pc, #20]	; (800b30c <CDC_Init_FS+0x20>)
 800b2f6:	f7fb fcb8 	bl	8006c6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2fa:	4905      	ldr	r1, [pc, #20]	; (800b310 <CDC_Init_FS+0x24>)
 800b2fc:	4803      	ldr	r0, [pc, #12]	; (800b30c <CDC_Init_FS+0x20>)
 800b2fe:	f7fb fcce 	bl	8006c9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b302:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b304:	4618      	mov	r0, r3
 800b306:	bd80      	pop	{r7, pc}
 800b308:	2000704c 	.word	0x2000704c
 800b30c:	200065b0 	.word	0x200065b0
 800b310:	2000684c 	.word	0x2000684c

0800b314 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b314:	b480      	push	{r7}
 800b316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b318:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
 800b330:	4613      	mov	r3, r2
 800b332:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	2b23      	cmp	r3, #35	; 0x23
 800b338:	d84a      	bhi.n	800b3d0 <CDC_Control_FS+0xac>
 800b33a:	a201      	add	r2, pc, #4	; (adr r2, 800b340 <CDC_Control_FS+0x1c>)
 800b33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b340:	0800b3d1 	.word	0x0800b3d1
 800b344:	0800b3d1 	.word	0x0800b3d1
 800b348:	0800b3d1 	.word	0x0800b3d1
 800b34c:	0800b3d1 	.word	0x0800b3d1
 800b350:	0800b3d1 	.word	0x0800b3d1
 800b354:	0800b3d1 	.word	0x0800b3d1
 800b358:	0800b3d1 	.word	0x0800b3d1
 800b35c:	0800b3d1 	.word	0x0800b3d1
 800b360:	0800b3d1 	.word	0x0800b3d1
 800b364:	0800b3d1 	.word	0x0800b3d1
 800b368:	0800b3d1 	.word	0x0800b3d1
 800b36c:	0800b3d1 	.word	0x0800b3d1
 800b370:	0800b3d1 	.word	0x0800b3d1
 800b374:	0800b3d1 	.word	0x0800b3d1
 800b378:	0800b3d1 	.word	0x0800b3d1
 800b37c:	0800b3d1 	.word	0x0800b3d1
 800b380:	0800b3d1 	.word	0x0800b3d1
 800b384:	0800b3d1 	.word	0x0800b3d1
 800b388:	0800b3d1 	.word	0x0800b3d1
 800b38c:	0800b3d1 	.word	0x0800b3d1
 800b390:	0800b3d1 	.word	0x0800b3d1
 800b394:	0800b3d1 	.word	0x0800b3d1
 800b398:	0800b3d1 	.word	0x0800b3d1
 800b39c:	0800b3d1 	.word	0x0800b3d1
 800b3a0:	0800b3d1 	.word	0x0800b3d1
 800b3a4:	0800b3d1 	.word	0x0800b3d1
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d1 	.word	0x0800b3d1
 800b3b0:	0800b3d1 	.word	0x0800b3d1
 800b3b4:	0800b3d1 	.word	0x0800b3d1
 800b3b8:	0800b3d1 	.word	0x0800b3d1
 800b3bc:	0800b3d1 	.word	0x0800b3d1
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3d1 	.word	0x0800b3d1
 800b3c8:	0800b3d1 	.word	0x0800b3d1
 800b3cc:	0800b3d1 	.word	0x0800b3d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b3d0:	bf00      	nop
  }

  return (USBD_OK);
 800b3d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	4805      	ldr	r0, [pc, #20]	; (800b404 <CDC_Receive_FS+0x24>)
 800b3ee:	f7fb fc56 	bl	8006c9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b3f2:	4804      	ldr	r0, [pc, #16]	; (800b404 <CDC_Receive_FS+0x24>)
 800b3f4:	f7fb fc67 	bl	8006cc6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	200065b0 	.word	0x200065b0

0800b408 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	6039      	str	r1, [r7, #0]
 800b412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2212      	movs	r2, #18
 800b418:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b41a:	4b03      	ldr	r3, [pc, #12]	; (800b428 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	2000014c 	.word	0x2000014c

0800b42c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	6039      	str	r1, [r7, #0]
 800b436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2204      	movs	r2, #4
 800b43c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	2000016c 	.word	0x2000016c

0800b450 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d105      	bne.n	800b46e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	4907      	ldr	r1, [pc, #28]	; (800b484 <USBD_FS_ProductStrDescriptor+0x34>)
 800b466:	4808      	ldr	r0, [pc, #32]	; (800b488 <USBD_FS_ProductStrDescriptor+0x38>)
 800b468:	f7fc fbf0 	bl	8007c4c <USBD_GetString>
 800b46c:	e004      	b.n	800b478 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	4904      	ldr	r1, [pc, #16]	; (800b484 <USBD_FS_ProductStrDescriptor+0x34>)
 800b472:	4805      	ldr	r0, [pc, #20]	; (800b488 <USBD_FS_ProductStrDescriptor+0x38>)
 800b474:	f7fc fbea 	bl	8007c4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b478:	4b02      	ldr	r3, [pc, #8]	; (800b484 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	2000784c 	.word	0x2000784c
 800b488:	0800d120 	.word	0x0800d120

0800b48c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	6039      	str	r1, [r7, #0]
 800b496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	4904      	ldr	r1, [pc, #16]	; (800b4ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b49c:	4804      	ldr	r0, [pc, #16]	; (800b4b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b49e:	f7fc fbd5 	bl	8007c4c <USBD_GetString>
  return USBD_StrDesc;
 800b4a2:	4b02      	ldr	r3, [pc, #8]	; (800b4ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	2000784c 	.word	0x2000784c
 800b4b0:	0800d138 	.word	0x0800d138

0800b4b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	6039      	str	r1, [r7, #0]
 800b4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	221a      	movs	r2, #26
 800b4c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4c6:	f000 f855 	bl	800b574 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4ca:	4b02      	ldr	r3, [pc, #8]	; (800b4d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20000170 	.word	0x20000170

0800b4d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d105      	bne.n	800b4f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4907      	ldr	r1, [pc, #28]	; (800b50c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4ee:	4808      	ldr	r0, [pc, #32]	; (800b510 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4f0:	f7fc fbac 	bl	8007c4c <USBD_GetString>
 800b4f4:	e004      	b.n	800b500 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4904      	ldr	r1, [pc, #16]	; (800b50c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4fa:	4805      	ldr	r0, [pc, #20]	; (800b510 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4fc:	f7fc fba6 	bl	8007c4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	2000784c 	.word	0x2000784c
 800b510:	0800d14c 	.word	0x0800d14c

0800b514 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d105      	bne.n	800b532 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	4907      	ldr	r1, [pc, #28]	; (800b548 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b52a:	4808      	ldr	r0, [pc, #32]	; (800b54c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b52c:	f7fc fb8e 	bl	8007c4c <USBD_GetString>
 800b530:	e004      	b.n	800b53c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	4904      	ldr	r1, [pc, #16]	; (800b548 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b536:	4805      	ldr	r0, [pc, #20]	; (800b54c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b538:	f7fc fb88 	bl	8007c4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b53c:	4b02      	ldr	r3, [pc, #8]	; (800b548 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	2000784c 	.word	0x2000784c
 800b54c:	0800d158 	.word	0x0800d158

0800b550 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	6039      	str	r1, [r7, #0]
 800b55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	220c      	movs	r2, #12
 800b560:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b562:	4b03      	ldr	r3, [pc, #12]	; (800b570 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr
 800b570:	20000160 	.word	0x20000160

0800b574 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <Get_SerialNum+0x44>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b580:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <Get_SerialNum+0x48>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b586:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <Get_SerialNum+0x4c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b59a:	2208      	movs	r2, #8
 800b59c:	4909      	ldr	r1, [pc, #36]	; (800b5c4 <Get_SerialNum+0x50>)
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 f814 	bl	800b5cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5a4:	2204      	movs	r2, #4
 800b5a6:	4908      	ldr	r1, [pc, #32]	; (800b5c8 <Get_SerialNum+0x54>)
 800b5a8:	68b8      	ldr	r0, [r7, #8]
 800b5aa:	f000 f80f 	bl	800b5cc <IntToUnicode>
  }
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	1ff0f420 	.word	0x1ff0f420
 800b5bc:	1ff0f424 	.word	0x1ff0f424
 800b5c0:	1ff0f428 	.word	0x1ff0f428
 800b5c4:	20000172 	.word	0x20000172
 800b5c8:	20000182 	.word	0x20000182

0800b5cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	75fb      	strb	r3, [r7, #23]
 800b5e2:	e027      	b.n	800b634 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	0f1b      	lsrs	r3, r3, #28
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d80b      	bhi.n	800b604 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	0f1b      	lsrs	r3, r3, #28
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3230      	adds	r2, #48	; 0x30
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	e00a      	b.n	800b61a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	0f1b      	lsrs	r3, r3, #28
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	4619      	mov	r1, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	440b      	add	r3, r1
 800b614:	3237      	adds	r2, #55	; 0x37
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	3301      	adds	r3, #1
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	4413      	add	r3, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	3301      	adds	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
 800b634:	7dfa      	ldrb	r2, [r7, #23]
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d3d3      	bcc.n	800b5e4 <IntToUnicode+0x18>
  }
}
 800b63c:	bf00      	nop
 800b63e:	371c      	adds	r7, #28
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	609a      	str	r2, [r3, #8]
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b668:	d13c      	bne.n	800b6e4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b66a:	4b20      	ldr	r3, [pc, #128]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66e:	4a1f      	ldr	r2, [pc, #124]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b670:	f043 0301 	orr.w	r3, r3, #1
 800b674:	6313      	str	r3, [r2, #48]	; 0x30
 800b676:	4b1d      	ldr	r3, [pc, #116]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b682:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b688:	2302      	movs	r3, #2
 800b68a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b690:	2303      	movs	r3, #3
 800b692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b694:	230a      	movs	r3, #10
 800b696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b698:	f107 0314 	add.w	r3, r7, #20
 800b69c:	4619      	mov	r1, r3
 800b69e:	4814      	ldr	r0, [pc, #80]	; (800b6f0 <HAL_PCD_MspInit+0xa8>)
 800b6a0:	f7f6 faa8 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6a4:	4b11      	ldr	r3, [pc, #68]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a8:	4a10      	ldr	r2, [pc, #64]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ae:	6353      	str	r3, [r2, #52]	; 0x34
 800b6b0:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c0:	4a0a      	ldr	r2, [pc, #40]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6c6:	6453      	str	r3, [r2, #68]	; 0x44
 800b6c8:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6d0:	60bb      	str	r3, [r7, #8]
 800b6d2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2105      	movs	r1, #5
 800b6d8:	2043      	movs	r0, #67	; 0x43
 800b6da:	f7f6 fa61 	bl	8001ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6de:	2043      	movs	r0, #67	; 0x43
 800b6e0:	f7f6 fa7a 	bl	8001bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6e4:	bf00      	nop
 800b6e6:	3728      	adds	r7, #40	; 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	40023800 	.word	0x40023800
 800b6f0:	40020000 	.word	0x40020000

0800b6f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fb fb93 	bl	8006e36 <USBD_LL_SetupStage>
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800b72a:	78fa      	ldrb	r2, [r7, #3]
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	4613      	mov	r3, r2
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	1a9b      	subs	r3, r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	4619      	mov	r1, r3
 800b742:	f7fb fbc3 	bl	8006ecc <USBD_LL_DataOutStage>
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800b760:	78fa      	ldrb	r2, [r7, #3]
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	4613      	mov	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	1a9b      	subs	r3, r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	3348      	adds	r3, #72	; 0x48
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	4619      	mov	r1, r3
 800b776:	f7fb fc1a 	bl	8006fae <USBD_LL_DataInStage>
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b790:	4618      	mov	r0, r3
 800b792:	f7fb fd28 	bl	80071e6 <USBD_LL_SOF>
}
 800b796:	bf00      	nop
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d102      	bne.n	800b7b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
 800b7b6:	e008      	b.n	800b7ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d102      	bne.n	800b7c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	73fb      	strb	r3, [r7, #15]
 800b7c4:	e001      	b.n	800b7ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b7c6:	f7f5 fd4d 	bl	8001264 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b7d0:	7bfa      	ldrb	r2, [r7, #15]
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fb fcd0 	bl	800717a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fb fc89 	bl	80070f8 <USBD_LL_Reset>
}
 800b7e6:	bf00      	nop
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fb fccb 	bl	800719a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	6812      	ldr	r2, [r2, #0]
 800b812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b816:	f043 0301 	orr.w	r3, r3, #1
 800b81a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d005      	beq.n	800b830 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b824:	4b04      	ldr	r3, [pc, #16]	; (800b838 <HAL_PCD_SuspendCallback+0x48>)
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	4a03      	ldr	r2, [pc, #12]	; (800b838 <HAL_PCD_SuspendCallback+0x48>)
 800b82a:	f043 0306 	orr.w	r3, r3, #6
 800b82e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	e000ed00 	.word	0xe000ed00

0800b83c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fb fcba 	bl	80071c4 <USBD_LL_Resume>
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	460b      	mov	r3, r1
 800b862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b86a:	78fa      	ldrb	r2, [r7, #3]
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fb fce0 	bl	8007234 <USBD_LL_IsoOUTIncomplete>
}
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b88e:	78fa      	ldrb	r2, [r7, #3]
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7fb fcc1 	bl	800721a <USBD_LL_IsoINIncomplete>
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fb fccd 	bl	800724e <USBD_LL_DevConnected>
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fb fcca 	bl	8007264 <USBD_LL_DevDisconnected>
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d13c      	bne.n	800b962 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8e8:	4a20      	ldr	r2, [pc, #128]	; (800b96c <USBD_LL_Init+0x94>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1e      	ldr	r2, [pc, #120]	; (800b96c <USBD_LL_Init+0x94>)
 800b8f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8f8:	4b1c      	ldr	r3, [pc, #112]	; (800b96c <USBD_LL_Init+0x94>)
 800b8fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b900:	4b1a      	ldr	r3, [pc, #104]	; (800b96c <USBD_LL_Init+0x94>)
 800b902:	2206      	movs	r2, #6
 800b904:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b906:	4b19      	ldr	r3, [pc, #100]	; (800b96c <USBD_LL_Init+0x94>)
 800b908:	2202      	movs	r2, #2
 800b90a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b90c:	4b17      	ldr	r3, [pc, #92]	; (800b96c <USBD_LL_Init+0x94>)
 800b90e:	2200      	movs	r2, #0
 800b910:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b912:	4b16      	ldr	r3, [pc, #88]	; (800b96c <USBD_LL_Init+0x94>)
 800b914:	2202      	movs	r2, #2
 800b916:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b918:	4b14      	ldr	r3, [pc, #80]	; (800b96c <USBD_LL_Init+0x94>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b91e:	4b13      	ldr	r3, [pc, #76]	; (800b96c <USBD_LL_Init+0x94>)
 800b920:	2200      	movs	r2, #0
 800b922:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b924:	4b11      	ldr	r3, [pc, #68]	; (800b96c <USBD_LL_Init+0x94>)
 800b926:	2200      	movs	r2, #0
 800b928:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b92a:	4b10      	ldr	r3, [pc, #64]	; (800b96c <USBD_LL_Init+0x94>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b930:	4b0e      	ldr	r3, [pc, #56]	; (800b96c <USBD_LL_Init+0x94>)
 800b932:	2200      	movs	r2, #0
 800b934:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b936:	480d      	ldr	r0, [pc, #52]	; (800b96c <USBD_LL_Init+0x94>)
 800b938:	f7f6 fb06 	bl	8001f48 <HAL_PCD_Init>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b942:	f7f5 fc8f 	bl	8001264 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b946:	2180      	movs	r1, #128	; 0x80
 800b948:	4808      	ldr	r0, [pc, #32]	; (800b96c <USBD_LL_Init+0x94>)
 800b94a:	f7f7 fc86 	bl	800325a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b94e:	2240      	movs	r2, #64	; 0x40
 800b950:	2100      	movs	r1, #0
 800b952:	4806      	ldr	r0, [pc, #24]	; (800b96c <USBD_LL_Init+0x94>)
 800b954:	f7f7 fc3a 	bl	80031cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b958:	2280      	movs	r2, #128	; 0x80
 800b95a:	2101      	movs	r1, #1
 800b95c:	4803      	ldr	r0, [pc, #12]	; (800b96c <USBD_LL_Init+0x94>)
 800b95e:	f7f7 fc35 	bl	80031cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20007a4c 	.word	0x20007a4c

0800b970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b986:	4618      	mov	r0, r3
 800b988:	f7f6 fbf6 	bl	8002178 <HAL_PCD_Start>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	4618      	mov	r0, r3
 800b994:	f000 f982 	bl	800bc9c <USBD_Get_USB_Status>
 800b998:	4603      	mov	r3, r0
 800b99a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	70fb      	strb	r3, [r7, #3]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70bb      	strb	r3, [r7, #2]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b9ce:	78bb      	ldrb	r3, [r7, #2]
 800b9d0:	883a      	ldrh	r2, [r7, #0]
 800b9d2:	78f9      	ldrb	r1, [r7, #3]
 800b9d4:	f7f6 ffeb 	bl	80029ae <HAL_PCD_EP_Open>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 f95c 	bl	800bc9c <USBD_Get_USB_Status>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba0c:	78fa      	ldrb	r2, [r7, #3]
 800ba0e:	4611      	mov	r1, r2
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7f7 f834 	bl	8002a7e <HAL_PCD_EP_Close>
 800ba16:	4603      	mov	r3, r0
 800ba18:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 f93d 	bl	800bc9c <USBD_Get_USB_Status>
 800ba22:	4603      	mov	r3, r0
 800ba24:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba4a:	78fa      	ldrb	r2, [r7, #3]
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7f7 f90c 	bl	8002c6c <HAL_PCD_EP_SetStall>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 f91e 	bl	800bc9c <USBD_Get_USB_Status>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ba88:	78fa      	ldrb	r2, [r7, #3]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7f7 f951 	bl	8002d34 <HAL_PCD_EP_ClrStall>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 f8ff 	bl	800bc9c <USBD_Get_USB_Status>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800baa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800babe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da0b      	bge.n	800bae0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bac8:	78fb      	ldrb	r3, [r7, #3]
 800baca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	4613      	mov	r3, r2
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	440b      	add	r3, r1
 800bada:	333e      	adds	r3, #62	; 0x3e
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	e00b      	b.n	800baf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	4613      	mov	r3, r2
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	1a9b      	subs	r3, r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	440b      	add	r3, r1
 800baf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb1e:	78fa      	ldrb	r2, [r7, #3]
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7f6 ff1e 	bl	8002964 <HAL_PCD_SetAddress>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 f8b4 	bl	800bc9c <USBD_Get_USB_Status>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b086      	sub	sp, #24
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	607a      	str	r2, [r7, #4]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	460b      	mov	r3, r1
 800bb50:	72fb      	strb	r3, [r7, #11]
 800bb52:	4613      	mov	r3, r2
 800bb54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bb64:	893b      	ldrh	r3, [r7, #8]
 800bb66:	7af9      	ldrb	r1, [r7, #11]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	f7f7 f835 	bl	8002bd8 <HAL_PCD_EP_Transmit>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f000 f891 	bl	800bc9c <USBD_Get_USB_Status>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bb7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	461a      	mov	r2, r3
 800bb94:	460b      	mov	r3, r1
 800bb96:	72fb      	strb	r3, [r7, #11]
 800bb98:	4613      	mov	r3, r2
 800bb9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bbaa:	893b      	ldrh	r3, [r7, #8]
 800bbac:	7af9      	ldrb	r1, [r7, #11]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	f7f6 ffaf 	bl	8002b12 <HAL_PCD_EP_Receive>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 f86e 	bl	800bc9c <USBD_Get_USB_Status>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bbc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbe0:	78fa      	ldrb	r2, [r7, #3]
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7f6 ffdf 	bl	8002ba8 <HAL_PCD_EP_GetRxCount>
 800bbea:	4603      	mov	r3, r0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <HAL_PCDEx_LPM_Callback+0x18>
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d01f      	beq.n	800bc4a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800bc0a:	e03b      	b.n	800bc84 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a1b      	ldr	r3, [r3, #32]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d007      	beq.n	800bc24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc14:	f000 f83c 	bl	800bc90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc18:	4b1c      	ldr	r3, [pc, #112]	; (800bc8c <HAL_PCDEx_LPM_Callback+0x98>)
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	4a1b      	ldr	r2, [pc, #108]	; (800bc8c <HAL_PCDEx_LPM_Callback+0x98>)
 800bc1e:	f023 0306 	bic.w	r3, r3, #6
 800bc22:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	6812      	ldr	r2, [r2, #0]
 800bc32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc36:	f023 0301 	bic.w	r3, r3, #1
 800bc3a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fb fabe 	bl	80071c4 <USBD_LL_Resume>
    break;
 800bc48:	e01c      	b.n	800bc84 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	6812      	ldr	r2, [r2, #0]
 800bc58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc5c:	f043 0301 	orr.w	r3, r3, #1
 800bc60:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fb fa96 	bl	800719a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d005      	beq.n	800bc82 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc76:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <HAL_PCDEx_LPM_Callback+0x98>)
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	4a04      	ldr	r2, [pc, #16]	; (800bc8c <HAL_PCDEx_LPM_Callback+0x98>)
 800bc7c:	f043 0306 	orr.w	r3, r3, #6
 800bc80:	6113      	str	r3, [r2, #16]
    break;   
 800bc82:	bf00      	nop
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	e000ed00 	.word	0xe000ed00

0800bc90 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bc94:	f7f5 f9dc 	bl	8001050 <SystemClock_Config>
}
 800bc98:	bf00      	nop
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d817      	bhi.n	800bce0 <USBD_Get_USB_Status+0x44>
 800bcb0:	a201      	add	r2, pc, #4	; (adr r2, 800bcb8 <USBD_Get_USB_Status+0x1c>)
 800bcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb6:	bf00      	nop
 800bcb8:	0800bcc9 	.word	0x0800bcc9
 800bcbc:	0800bccf 	.word	0x0800bccf
 800bcc0:	0800bcd5 	.word	0x0800bcd5
 800bcc4:	0800bcdb 	.word	0x0800bcdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]
    break;
 800bccc:	e00b      	b.n	800bce6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcce:	2302      	movs	r3, #2
 800bcd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd2:	e008      	b.n	800bce6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd8:	e005      	b.n	800bce6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcde:	e002      	b.n	800bce6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bce0:	2302      	movs	r3, #2
 800bce2:	73fb      	strb	r3, [r7, #15]
    break;
 800bce4:	bf00      	nop
  }
  return usb_status;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <__errno>:
 800bcf4:	4b01      	ldr	r3, [pc, #4]	; (800bcfc <__errno+0x8>)
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	2000018c 	.word	0x2000018c

0800bd00 <__libc_init_array>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	4e0d      	ldr	r6, [pc, #52]	; (800bd38 <__libc_init_array+0x38>)
 800bd04:	4c0d      	ldr	r4, [pc, #52]	; (800bd3c <__libc_init_array+0x3c>)
 800bd06:	1ba4      	subs	r4, r4, r6
 800bd08:	10a4      	asrs	r4, r4, #2
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	42a5      	cmp	r5, r4
 800bd0e:	d109      	bne.n	800bd24 <__libc_init_array+0x24>
 800bd10:	4e0b      	ldr	r6, [pc, #44]	; (800bd40 <__libc_init_array+0x40>)
 800bd12:	4c0c      	ldr	r4, [pc, #48]	; (800bd44 <__libc_init_array+0x44>)
 800bd14:	f001 f9c6 	bl	800d0a4 <_init>
 800bd18:	1ba4      	subs	r4, r4, r6
 800bd1a:	10a4      	asrs	r4, r4, #2
 800bd1c:	2500      	movs	r5, #0
 800bd1e:	42a5      	cmp	r5, r4
 800bd20:	d105      	bne.n	800bd2e <__libc_init_array+0x2e>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd28:	4798      	blx	r3
 800bd2a:	3501      	adds	r5, #1
 800bd2c:	e7ee      	b.n	800bd0c <__libc_init_array+0xc>
 800bd2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd32:	4798      	blx	r3
 800bd34:	3501      	adds	r5, #1
 800bd36:	e7f2      	b.n	800bd1e <__libc_init_array+0x1e>
 800bd38:	0800d1d0 	.word	0x0800d1d0
 800bd3c:	0800d1d0 	.word	0x0800d1d0
 800bd40:	0800d1d0 	.word	0x0800d1d0
 800bd44:	0800d1d4 	.word	0x0800d1d4

0800bd48 <malloc>:
 800bd48:	4b02      	ldr	r3, [pc, #8]	; (800bd54 <malloc+0xc>)
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	6818      	ldr	r0, [r3, #0]
 800bd4e:	f000 b86d 	b.w	800be2c <_malloc_r>
 800bd52:	bf00      	nop
 800bd54:	2000018c 	.word	0x2000018c

0800bd58 <free>:
 800bd58:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <free+0xc>)
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	f000 b817 	b.w	800bd90 <_free_r>
 800bd62:	bf00      	nop
 800bd64:	2000018c 	.word	0x2000018c

0800bd68 <memcpy>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	1e43      	subs	r3, r0, #1
 800bd6c:	440a      	add	r2, r1
 800bd6e:	4291      	cmp	r1, r2
 800bd70:	d100      	bne.n	800bd74 <memcpy+0xc>
 800bd72:	bd10      	pop	{r4, pc}
 800bd74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd7c:	e7f7      	b.n	800bd6e <memcpy+0x6>

0800bd7e <memset>:
 800bd7e:	4402      	add	r2, r0
 800bd80:	4603      	mov	r3, r0
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d100      	bne.n	800bd88 <memset+0xa>
 800bd86:	4770      	bx	lr
 800bd88:	f803 1b01 	strb.w	r1, [r3], #1
 800bd8c:	e7f9      	b.n	800bd82 <memset+0x4>
	...

0800bd90 <_free_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4605      	mov	r5, r0
 800bd94:	2900      	cmp	r1, #0
 800bd96:	d045      	beq.n	800be24 <_free_r+0x94>
 800bd98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd9c:	1f0c      	subs	r4, r1, #4
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bfb8      	it	lt
 800bda2:	18e4      	addlt	r4, r4, r3
 800bda4:	f000 f8ac 	bl	800bf00 <__malloc_lock>
 800bda8:	4a1f      	ldr	r2, [pc, #124]	; (800be28 <_free_r+0x98>)
 800bdaa:	6813      	ldr	r3, [r2, #0]
 800bdac:	4610      	mov	r0, r2
 800bdae:	b933      	cbnz	r3, 800bdbe <_free_r+0x2e>
 800bdb0:	6063      	str	r3, [r4, #4]
 800bdb2:	6014      	str	r4, [r2, #0]
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdba:	f000 b8a2 	b.w	800bf02 <__malloc_unlock>
 800bdbe:	42a3      	cmp	r3, r4
 800bdc0:	d90c      	bls.n	800bddc <_free_r+0x4c>
 800bdc2:	6821      	ldr	r1, [r4, #0]
 800bdc4:	1862      	adds	r2, r4, r1
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bf04      	itt	eq
 800bdca:	681a      	ldreq	r2, [r3, #0]
 800bdcc:	685b      	ldreq	r3, [r3, #4]
 800bdce:	6063      	str	r3, [r4, #4]
 800bdd0:	bf04      	itt	eq
 800bdd2:	1852      	addeq	r2, r2, r1
 800bdd4:	6022      	streq	r2, [r4, #0]
 800bdd6:	6004      	str	r4, [r0, #0]
 800bdd8:	e7ec      	b.n	800bdb4 <_free_r+0x24>
 800bdda:	4613      	mov	r3, r2
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	b10a      	cbz	r2, 800bde4 <_free_r+0x54>
 800bde0:	42a2      	cmp	r2, r4
 800bde2:	d9fa      	bls.n	800bdda <_free_r+0x4a>
 800bde4:	6819      	ldr	r1, [r3, #0]
 800bde6:	1858      	adds	r0, r3, r1
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d10b      	bne.n	800be04 <_free_r+0x74>
 800bdec:	6820      	ldr	r0, [r4, #0]
 800bdee:	4401      	add	r1, r0
 800bdf0:	1858      	adds	r0, r3, r1
 800bdf2:	4282      	cmp	r2, r0
 800bdf4:	6019      	str	r1, [r3, #0]
 800bdf6:	d1dd      	bne.n	800bdb4 <_free_r+0x24>
 800bdf8:	6810      	ldr	r0, [r2, #0]
 800bdfa:	6852      	ldr	r2, [r2, #4]
 800bdfc:	605a      	str	r2, [r3, #4]
 800bdfe:	4401      	add	r1, r0
 800be00:	6019      	str	r1, [r3, #0]
 800be02:	e7d7      	b.n	800bdb4 <_free_r+0x24>
 800be04:	d902      	bls.n	800be0c <_free_r+0x7c>
 800be06:	230c      	movs	r3, #12
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	e7d3      	b.n	800bdb4 <_free_r+0x24>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	1821      	adds	r1, r4, r0
 800be10:	428a      	cmp	r2, r1
 800be12:	bf04      	itt	eq
 800be14:	6811      	ldreq	r1, [r2, #0]
 800be16:	6852      	ldreq	r2, [r2, #4]
 800be18:	6062      	str	r2, [r4, #4]
 800be1a:	bf04      	itt	eq
 800be1c:	1809      	addeq	r1, r1, r0
 800be1e:	6021      	streq	r1, [r4, #0]
 800be20:	605c      	str	r4, [r3, #4]
 800be22:	e7c7      	b.n	800bdb4 <_free_r+0x24>
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	20004b20 	.word	0x20004b20

0800be2c <_malloc_r>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	1ccd      	adds	r5, r1, #3
 800be30:	f025 0503 	bic.w	r5, r5, #3
 800be34:	3508      	adds	r5, #8
 800be36:	2d0c      	cmp	r5, #12
 800be38:	bf38      	it	cc
 800be3a:	250c      	movcc	r5, #12
 800be3c:	2d00      	cmp	r5, #0
 800be3e:	4606      	mov	r6, r0
 800be40:	db01      	blt.n	800be46 <_malloc_r+0x1a>
 800be42:	42a9      	cmp	r1, r5
 800be44:	d903      	bls.n	800be4e <_malloc_r+0x22>
 800be46:	230c      	movs	r3, #12
 800be48:	6033      	str	r3, [r6, #0]
 800be4a:	2000      	movs	r0, #0
 800be4c:	bd70      	pop	{r4, r5, r6, pc}
 800be4e:	f000 f857 	bl	800bf00 <__malloc_lock>
 800be52:	4a21      	ldr	r2, [pc, #132]	; (800bed8 <_malloc_r+0xac>)
 800be54:	6814      	ldr	r4, [r2, #0]
 800be56:	4621      	mov	r1, r4
 800be58:	b991      	cbnz	r1, 800be80 <_malloc_r+0x54>
 800be5a:	4c20      	ldr	r4, [pc, #128]	; (800bedc <_malloc_r+0xb0>)
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	b91b      	cbnz	r3, 800be68 <_malloc_r+0x3c>
 800be60:	4630      	mov	r0, r6
 800be62:	f000 f83d 	bl	800bee0 <_sbrk_r>
 800be66:	6020      	str	r0, [r4, #0]
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f838 	bl	800bee0 <_sbrk_r>
 800be70:	1c43      	adds	r3, r0, #1
 800be72:	d124      	bne.n	800bebe <_malloc_r+0x92>
 800be74:	230c      	movs	r3, #12
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 f842 	bl	800bf02 <__malloc_unlock>
 800be7e:	e7e4      	b.n	800be4a <_malloc_r+0x1e>
 800be80:	680b      	ldr	r3, [r1, #0]
 800be82:	1b5b      	subs	r3, r3, r5
 800be84:	d418      	bmi.n	800beb8 <_malloc_r+0x8c>
 800be86:	2b0b      	cmp	r3, #11
 800be88:	d90f      	bls.n	800beaa <_malloc_r+0x7e>
 800be8a:	600b      	str	r3, [r1, #0]
 800be8c:	50cd      	str	r5, [r1, r3]
 800be8e:	18cc      	adds	r4, r1, r3
 800be90:	4630      	mov	r0, r6
 800be92:	f000 f836 	bl	800bf02 <__malloc_unlock>
 800be96:	f104 000b 	add.w	r0, r4, #11
 800be9a:	1d23      	adds	r3, r4, #4
 800be9c:	f020 0007 	bic.w	r0, r0, #7
 800bea0:	1ac3      	subs	r3, r0, r3
 800bea2:	d0d3      	beq.n	800be4c <_malloc_r+0x20>
 800bea4:	425a      	negs	r2, r3
 800bea6:	50e2      	str	r2, [r4, r3]
 800bea8:	e7d0      	b.n	800be4c <_malloc_r+0x20>
 800beaa:	428c      	cmp	r4, r1
 800beac:	684b      	ldr	r3, [r1, #4]
 800beae:	bf16      	itet	ne
 800beb0:	6063      	strne	r3, [r4, #4]
 800beb2:	6013      	streq	r3, [r2, #0]
 800beb4:	460c      	movne	r4, r1
 800beb6:	e7eb      	b.n	800be90 <_malloc_r+0x64>
 800beb8:	460c      	mov	r4, r1
 800beba:	6849      	ldr	r1, [r1, #4]
 800bebc:	e7cc      	b.n	800be58 <_malloc_r+0x2c>
 800bebe:	1cc4      	adds	r4, r0, #3
 800bec0:	f024 0403 	bic.w	r4, r4, #3
 800bec4:	42a0      	cmp	r0, r4
 800bec6:	d005      	beq.n	800bed4 <_malloc_r+0xa8>
 800bec8:	1a21      	subs	r1, r4, r0
 800beca:	4630      	mov	r0, r6
 800becc:	f000 f808 	bl	800bee0 <_sbrk_r>
 800bed0:	3001      	adds	r0, #1
 800bed2:	d0cf      	beq.n	800be74 <_malloc_r+0x48>
 800bed4:	6025      	str	r5, [r4, #0]
 800bed6:	e7db      	b.n	800be90 <_malloc_r+0x64>
 800bed8:	20004b20 	.word	0x20004b20
 800bedc:	20004b24 	.word	0x20004b24

0800bee0 <_sbrk_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4c06      	ldr	r4, [pc, #24]	; (800befc <_sbrk_r+0x1c>)
 800bee4:	2300      	movs	r3, #0
 800bee6:	4605      	mov	r5, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	6023      	str	r3, [r4, #0]
 800beec:	f7f5 fab4 	bl	8001458 <_sbrk>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_sbrk_r+0x1a>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	b103      	cbz	r3, 800befa <_sbrk_r+0x1a>
 800bef8:	602b      	str	r3, [r5, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	20007e50 	.word	0x20007e50

0800bf00 <__malloc_lock>:
 800bf00:	4770      	bx	lr

0800bf02 <__malloc_unlock>:
 800bf02:	4770      	bx	lr

0800bf04 <fmax>:
 800bf04:	b508      	push	{r3, lr}
 800bf06:	ed2d 8b04 	vpush	{d8-d9}
 800bf0a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf0e:	eef0 8a60 	vmov.f32	s17, s1
 800bf12:	eeb0 9a41 	vmov.f32	s18, s2
 800bf16:	eef0 9a61 	vmov.f32	s19, s3
 800bf1a:	f000 f841 	bl	800bfa0 <__fpclassifyd>
 800bf1e:	b168      	cbz	r0, 800bf3c <fmax+0x38>
 800bf20:	eeb0 0a49 	vmov.f32	s0, s18
 800bf24:	eef0 0a69 	vmov.f32	s1, s19
 800bf28:	f000 f83a 	bl	800bfa0 <__fpclassifyd>
 800bf2c:	b150      	cbz	r0, 800bf44 <fmax+0x40>
 800bf2e:	ec53 2b19 	vmov	r2, r3, d9
 800bf32:	ec51 0b18 	vmov	r0, r1, d8
 800bf36:	f7f4 fdb7 	bl	8000aa8 <__aeabi_dcmpgt>
 800bf3a:	b918      	cbnz	r0, 800bf44 <fmax+0x40>
 800bf3c:	eeb0 8a49 	vmov.f32	s16, s18
 800bf40:	eef0 8a69 	vmov.f32	s17, s19
 800bf44:	eeb0 0a48 	vmov.f32	s0, s16
 800bf48:	eef0 0a68 	vmov.f32	s1, s17
 800bf4c:	ecbd 8b04 	vpop	{d8-d9}
 800bf50:	bd08      	pop	{r3, pc}

0800bf52 <fmin>:
 800bf52:	b508      	push	{r3, lr}
 800bf54:	ed2d 8b04 	vpush	{d8-d9}
 800bf58:	eeb0 8a40 	vmov.f32	s16, s0
 800bf5c:	eef0 8a60 	vmov.f32	s17, s1
 800bf60:	eeb0 9a41 	vmov.f32	s18, s2
 800bf64:	eef0 9a61 	vmov.f32	s19, s3
 800bf68:	f000 f81a 	bl	800bfa0 <__fpclassifyd>
 800bf6c:	b168      	cbz	r0, 800bf8a <fmin+0x38>
 800bf6e:	eeb0 0a49 	vmov.f32	s0, s18
 800bf72:	eef0 0a69 	vmov.f32	s1, s19
 800bf76:	f000 f813 	bl	800bfa0 <__fpclassifyd>
 800bf7a:	b150      	cbz	r0, 800bf92 <fmin+0x40>
 800bf7c:	ec53 2b19 	vmov	r2, r3, d9
 800bf80:	ec51 0b18 	vmov	r0, r1, d8
 800bf84:	f7f4 fd72 	bl	8000a6c <__aeabi_dcmplt>
 800bf88:	b918      	cbnz	r0, 800bf92 <fmin+0x40>
 800bf8a:	eeb0 8a49 	vmov.f32	s16, s18
 800bf8e:	eef0 8a69 	vmov.f32	s17, s19
 800bf92:	eeb0 0a48 	vmov.f32	s0, s16
 800bf96:	eef0 0a68 	vmov.f32	s1, s17
 800bf9a:	ecbd 8b04 	vpop	{d8-d9}
 800bf9e:	bd08      	pop	{r3, pc}

0800bfa0 <__fpclassifyd>:
 800bfa0:	ec51 0b10 	vmov	r0, r1, d0
 800bfa4:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	460b      	mov	r3, r1
 800bfac:	d01b      	beq.n	800bfe6 <__fpclassifyd+0x46>
 800bfae:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800bfb2:	490f      	ldr	r1, [pc, #60]	; (800bff0 <__fpclassifyd+0x50>)
 800bfb4:	428c      	cmp	r4, r1
 800bfb6:	d910      	bls.n	800bfda <__fpclassifyd+0x3a>
 800bfb8:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800bfbc:	490c      	ldr	r1, [pc, #48]	; (800bff0 <__fpclassifyd+0x50>)
 800bfbe:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bfc2:	428b      	cmp	r3, r1
 800bfc4:	d909      	bls.n	800bfda <__fpclassifyd+0x3a>
 800bfc6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800bfca:	d308      	bcc.n	800bfde <__fpclassifyd+0x3e>
 800bfcc:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <__fpclassifyd+0x54>)
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d107      	bne.n	800bfe2 <__fpclassifyd+0x42>
 800bfd2:	fab0 f080 	clz	r0, r0
 800bfd6:	0940      	lsrs	r0, r0, #5
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	2004      	movs	r0, #4
 800bfdc:	e7fc      	b.n	800bfd8 <__fpclassifyd+0x38>
 800bfde:	2003      	movs	r0, #3
 800bfe0:	e7fa      	b.n	800bfd8 <__fpclassifyd+0x38>
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	e7f8      	b.n	800bfd8 <__fpclassifyd+0x38>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d1e6      	bne.n	800bfb8 <__fpclassifyd+0x18>
 800bfea:	2002      	movs	r0, #2
 800bfec:	e7f4      	b.n	800bfd8 <__fpclassifyd+0x38>
 800bfee:	bf00      	nop
 800bff0:	7fdfffff 	.word	0x7fdfffff
 800bff4:	7ff00000 	.word	0x7ff00000

0800bff8 <pow>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	ed2d 8b04 	vpush	{d8-d9}
 800c000:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c2d4 <pow+0x2dc>
 800c004:	b08d      	sub	sp, #52	; 0x34
 800c006:	ec57 6b10 	vmov	r6, r7, d0
 800c00a:	ec55 4b11 	vmov	r4, r5, d1
 800c00e:	f000 f963 	bl	800c2d8 <__ieee754_pow>
 800c012:	f999 3000 	ldrsb.w	r3, [r9]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	3301      	adds	r3, #1
 800c01a:	eeb0 8a40 	vmov.f32	s16, s0
 800c01e:	eef0 8a60 	vmov.f32	s17, s1
 800c022:	46c8      	mov	r8, r9
 800c024:	d05f      	beq.n	800c0e6 <pow+0xee>
 800c026:	4622      	mov	r2, r4
 800c028:	462b      	mov	r3, r5
 800c02a:	4620      	mov	r0, r4
 800c02c:	4629      	mov	r1, r5
 800c02e:	f7f4 fd45 	bl	8000abc <__aeabi_dcmpun>
 800c032:	4683      	mov	fp, r0
 800c034:	2800      	cmp	r0, #0
 800c036:	d156      	bne.n	800c0e6 <pow+0xee>
 800c038:	4632      	mov	r2, r6
 800c03a:	463b      	mov	r3, r7
 800c03c:	4630      	mov	r0, r6
 800c03e:	4639      	mov	r1, r7
 800c040:	f7f4 fd3c 	bl	8000abc <__aeabi_dcmpun>
 800c044:	9001      	str	r0, [sp, #4]
 800c046:	b1e8      	cbz	r0, 800c084 <pow+0x8c>
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	4620      	mov	r0, r4
 800c04e:	4629      	mov	r1, r5
 800c050:	f7f4 fd02 	bl	8000a58 <__aeabi_dcmpeq>
 800c054:	2800      	cmp	r0, #0
 800c056:	d046      	beq.n	800c0e6 <pow+0xee>
 800c058:	2301      	movs	r3, #1
 800c05a:	9302      	str	r3, [sp, #8]
 800c05c:	4b96      	ldr	r3, [pc, #600]	; (800c2b8 <pow+0x2c0>)
 800c05e:	9303      	str	r3, [sp, #12]
 800c060:	4b96      	ldr	r3, [pc, #600]	; (800c2bc <pow+0x2c4>)
 800c062:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c066:	2200      	movs	r2, #0
 800c068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c06c:	9b00      	ldr	r3, [sp, #0]
 800c06e:	2b02      	cmp	r3, #2
 800c070:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c074:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c078:	d033      	beq.n	800c0e2 <pow+0xea>
 800c07a:	a802      	add	r0, sp, #8
 800c07c:	f000 fefb 	bl	800ce76 <matherr>
 800c080:	bb48      	cbnz	r0, 800c0d6 <pow+0xde>
 800c082:	e05d      	b.n	800c140 <pow+0x148>
 800c084:	f04f 0a00 	mov.w	sl, #0
 800c088:	f04f 0b00 	mov.w	fp, #0
 800c08c:	4652      	mov	r2, sl
 800c08e:	465b      	mov	r3, fp
 800c090:	4630      	mov	r0, r6
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 fce0 	bl	8000a58 <__aeabi_dcmpeq>
 800c098:	ec4b ab19 	vmov	d9, sl, fp
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d054      	beq.n	800c14a <pow+0x152>
 800c0a0:	4652      	mov	r2, sl
 800c0a2:	465b      	mov	r3, fp
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	f7f4 fcd6 	bl	8000a58 <__aeabi_dcmpeq>
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	b318      	cbz	r0, 800c0f8 <pow+0x100>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	9302      	str	r3, [sp, #8]
 800c0b4:	4b80      	ldr	r3, [pc, #512]	; (800c2b8 <pow+0x2c0>)
 800c0b6:	9303      	str	r3, [sp, #12]
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800c0bc:	9b00      	ldr	r3, [sp, #0]
 800c0be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c0c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c0c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d0d5      	beq.n	800c07a <pow+0x82>
 800c0ce:	4b7b      	ldr	r3, [pc, #492]	; (800c2bc <pow+0x2c4>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d8:	b11b      	cbz	r3, 800c0e2 <pow+0xea>
 800c0da:	f7ff fe0b 	bl	800bcf4 <__errno>
 800c0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	ed9d 8b08 	vldr	d8, [sp, #32]
 800c0e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c0ea:	eef0 0a68 	vmov.f32	s1, s17
 800c0ee:	b00d      	add	sp, #52	; 0x34
 800c0f0:	ecbd 8b04 	vpop	{d8-d9}
 800c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f8:	ec45 4b10 	vmov	d0, r4, r5
 800c0fc:	f000 feb3 	bl	800ce66 <finite>
 800c100:	2800      	cmp	r0, #0
 800c102:	d0f0      	beq.n	800c0e6 <pow+0xee>
 800c104:	4652      	mov	r2, sl
 800c106:	465b      	mov	r3, fp
 800c108:	4620      	mov	r0, r4
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 fcae 	bl	8000a6c <__aeabi_dcmplt>
 800c110:	2800      	cmp	r0, #0
 800c112:	d0e8      	beq.n	800c0e6 <pow+0xee>
 800c114:	2301      	movs	r3, #1
 800c116:	9302      	str	r3, [sp, #8]
 800c118:	4b67      	ldr	r3, [pc, #412]	; (800c2b8 <pow+0x2c0>)
 800c11a:	9303      	str	r3, [sp, #12]
 800c11c:	f999 3000 	ldrsb.w	r3, [r9]
 800c120:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c124:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c128:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c12c:	b913      	cbnz	r3, 800c134 <pow+0x13c>
 800c12e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c132:	e7a2      	b.n	800c07a <pow+0x82>
 800c134:	4962      	ldr	r1, [pc, #392]	; (800c2c0 <pow+0x2c8>)
 800c136:	2000      	movs	r0, #0
 800c138:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d19c      	bne.n	800c07a <pow+0x82>
 800c140:	f7ff fdd8 	bl	800bcf4 <__errno>
 800c144:	2321      	movs	r3, #33	; 0x21
 800c146:	6003      	str	r3, [r0, #0]
 800c148:	e7c5      	b.n	800c0d6 <pow+0xde>
 800c14a:	eeb0 0a48 	vmov.f32	s0, s16
 800c14e:	eef0 0a68 	vmov.f32	s1, s17
 800c152:	f000 fe88 	bl	800ce66 <finite>
 800c156:	9000      	str	r0, [sp, #0]
 800c158:	2800      	cmp	r0, #0
 800c15a:	f040 8081 	bne.w	800c260 <pow+0x268>
 800c15e:	ec47 6b10 	vmov	d0, r6, r7
 800c162:	f000 fe80 	bl	800ce66 <finite>
 800c166:	2800      	cmp	r0, #0
 800c168:	d07a      	beq.n	800c260 <pow+0x268>
 800c16a:	ec45 4b10 	vmov	d0, r4, r5
 800c16e:	f000 fe7a 	bl	800ce66 <finite>
 800c172:	2800      	cmp	r0, #0
 800c174:	d074      	beq.n	800c260 <pow+0x268>
 800c176:	ec53 2b18 	vmov	r2, r3, d8
 800c17a:	ee18 0a10 	vmov	r0, s16
 800c17e:	4619      	mov	r1, r3
 800c180:	f7f4 fc9c 	bl	8000abc <__aeabi_dcmpun>
 800c184:	f999 9000 	ldrsb.w	r9, [r9]
 800c188:	4b4b      	ldr	r3, [pc, #300]	; (800c2b8 <pow+0x2c0>)
 800c18a:	b1b0      	cbz	r0, 800c1ba <pow+0x1c2>
 800c18c:	2201      	movs	r2, #1
 800c18e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c192:	9b00      	ldr	r3, [sp, #0]
 800c194:	930a      	str	r3, [sp, #40]	; 0x28
 800c196:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c19a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c19e:	f1b9 0f00 	cmp.w	r9, #0
 800c1a2:	d0c4      	beq.n	800c12e <pow+0x136>
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	465b      	mov	r3, fp
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	4659      	mov	r1, fp
 800c1ac:	f7f4 fb16 	bl	80007dc <__aeabi_ddiv>
 800c1b0:	f1b9 0f02 	cmp.w	r9, #2
 800c1b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1b8:	e7c1      	b.n	800c13e <pow+0x146>
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1c0:	900a      	str	r0, [sp, #40]	; 0x28
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	4b3e      	ldr	r3, [pc, #248]	; (800c2c4 <pow+0x2cc>)
 800c1ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c1ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c1d2:	f7f4 f9d9 	bl	8000588 <__aeabi_dmul>
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	460d      	mov	r5, r1
 800c1da:	f1b9 0f00 	cmp.w	r9, #0
 800c1de:	d124      	bne.n	800c22a <pow+0x232>
 800c1e0:	4b39      	ldr	r3, [pc, #228]	; (800c2c8 <pow+0x2d0>)
 800c1e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c1e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	4652      	mov	r2, sl
 800c1ee:	465b      	mov	r3, fp
 800c1f0:	4639      	mov	r1, r7
 800c1f2:	f7f4 fc3b 	bl	8000a6c <__aeabi_dcmplt>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d056      	beq.n	800c2a8 <pow+0x2b0>
 800c1fa:	ec45 4b10 	vmov	d0, r4, r5
 800c1fe:	f000 fe47 	bl	800ce90 <rint>
 800c202:	4622      	mov	r2, r4
 800c204:	462b      	mov	r3, r5
 800c206:	ec51 0b10 	vmov	r0, r1, d0
 800c20a:	f7f4 fc25 	bl	8000a58 <__aeabi_dcmpeq>
 800c20e:	b920      	cbnz	r0, 800c21a <pow+0x222>
 800c210:	4b2e      	ldr	r3, [pc, #184]	; (800c2cc <pow+0x2d4>)
 800c212:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c216:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c21a:	f998 3000 	ldrsb.w	r3, [r8]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d142      	bne.n	800c2a8 <pow+0x2b0>
 800c222:	f7ff fd67 	bl	800bcf4 <__errno>
 800c226:	2322      	movs	r3, #34	; 0x22
 800c228:	e78d      	b.n	800c146 <pow+0x14e>
 800c22a:	4b29      	ldr	r3, [pc, #164]	; (800c2d0 <pow+0x2d8>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c232:	4630      	mov	r0, r6
 800c234:	4652      	mov	r2, sl
 800c236:	465b      	mov	r3, fp
 800c238:	4639      	mov	r1, r7
 800c23a:	f7f4 fc17 	bl	8000a6c <__aeabi_dcmplt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d0eb      	beq.n	800c21a <pow+0x222>
 800c242:	ec45 4b10 	vmov	d0, r4, r5
 800c246:	f000 fe23 	bl	800ce90 <rint>
 800c24a:	4622      	mov	r2, r4
 800c24c:	462b      	mov	r3, r5
 800c24e:	ec51 0b10 	vmov	r0, r1, d0
 800c252:	f7f4 fc01 	bl	8000a58 <__aeabi_dcmpeq>
 800c256:	2800      	cmp	r0, #0
 800c258:	d1df      	bne.n	800c21a <pow+0x222>
 800c25a:	2200      	movs	r2, #0
 800c25c:	4b18      	ldr	r3, [pc, #96]	; (800c2c0 <pow+0x2c8>)
 800c25e:	e7da      	b.n	800c216 <pow+0x21e>
 800c260:	2200      	movs	r2, #0
 800c262:	2300      	movs	r3, #0
 800c264:	ec51 0b18 	vmov	r0, r1, d8
 800c268:	f7f4 fbf6 	bl	8000a58 <__aeabi_dcmpeq>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	f43f af3a 	beq.w	800c0e6 <pow+0xee>
 800c272:	ec47 6b10 	vmov	d0, r6, r7
 800c276:	f000 fdf6 	bl	800ce66 <finite>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	f43f af33 	beq.w	800c0e6 <pow+0xee>
 800c280:	ec45 4b10 	vmov	d0, r4, r5
 800c284:	f000 fdef 	bl	800ce66 <finite>
 800c288:	2800      	cmp	r0, #0
 800c28a:	f43f af2c 	beq.w	800c0e6 <pow+0xee>
 800c28e:	2304      	movs	r3, #4
 800c290:	9302      	str	r3, [sp, #8]
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <pow+0x2c0>)
 800c294:	9303      	str	r3, [sp, #12]
 800c296:	2300      	movs	r3, #0
 800c298:	930a      	str	r3, [sp, #40]	; 0x28
 800c29a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c29e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c2a2:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c2a6:	e7b8      	b.n	800c21a <pow+0x222>
 800c2a8:	a802      	add	r0, sp, #8
 800c2aa:	f000 fde4 	bl	800ce76 <matherr>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f47f af11 	bne.w	800c0d6 <pow+0xde>
 800c2b4:	e7b5      	b.n	800c222 <pow+0x22a>
 800c2b6:	bf00      	nop
 800c2b8:	0800d180 	.word	0x0800d180
 800c2bc:	3ff00000 	.word	0x3ff00000
 800c2c0:	fff00000 	.word	0xfff00000
 800c2c4:	3fe00000 	.word	0x3fe00000
 800c2c8:	47efffff 	.word	0x47efffff
 800c2cc:	c7efffff 	.word	0xc7efffff
 800c2d0:	7ff00000 	.word	0x7ff00000
 800c2d4:	200001f0 	.word	0x200001f0

0800c2d8 <__ieee754_pow>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	b091      	sub	sp, #68	; 0x44
 800c2de:	ed8d 1b00 	vstr	d1, [sp]
 800c2e2:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c2e6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c2ea:	ea58 0302 	orrs.w	r3, r8, r2
 800c2ee:	ec57 6b10 	vmov	r6, r7, d0
 800c2f2:	f000 84be 	beq.w	800cc72 <__ieee754_pow+0x99a>
 800c2f6:	4b7a      	ldr	r3, [pc, #488]	; (800c4e0 <__ieee754_pow+0x208>)
 800c2f8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	463d      	mov	r5, r7
 800c300:	ee10 aa10 	vmov	sl, s0
 800c304:	dc09      	bgt.n	800c31a <__ieee754_pow+0x42>
 800c306:	d103      	bne.n	800c310 <__ieee754_pow+0x38>
 800c308:	b93e      	cbnz	r6, 800c31a <__ieee754_pow+0x42>
 800c30a:	45a0      	cmp	r8, r4
 800c30c:	dc0d      	bgt.n	800c32a <__ieee754_pow+0x52>
 800c30e:	e001      	b.n	800c314 <__ieee754_pow+0x3c>
 800c310:	4598      	cmp	r8, r3
 800c312:	dc02      	bgt.n	800c31a <__ieee754_pow+0x42>
 800c314:	4598      	cmp	r8, r3
 800c316:	d10e      	bne.n	800c336 <__ieee754_pow+0x5e>
 800c318:	b16a      	cbz	r2, 800c336 <__ieee754_pow+0x5e>
 800c31a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c31e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c322:	ea54 030a 	orrs.w	r3, r4, sl
 800c326:	f000 84a4 	beq.w	800cc72 <__ieee754_pow+0x99a>
 800c32a:	486e      	ldr	r0, [pc, #440]	; (800c4e4 <__ieee754_pow+0x20c>)
 800c32c:	b011      	add	sp, #68	; 0x44
 800c32e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c332:	f000 bda5 	b.w	800ce80 <nan>
 800c336:	2d00      	cmp	r5, #0
 800c338:	da53      	bge.n	800c3e2 <__ieee754_pow+0x10a>
 800c33a:	4b6b      	ldr	r3, [pc, #428]	; (800c4e8 <__ieee754_pow+0x210>)
 800c33c:	4598      	cmp	r8, r3
 800c33e:	dc4d      	bgt.n	800c3dc <__ieee754_pow+0x104>
 800c340:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c344:	4598      	cmp	r8, r3
 800c346:	dd4c      	ble.n	800c3e2 <__ieee754_pow+0x10a>
 800c348:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c34c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c350:	2b14      	cmp	r3, #20
 800c352:	dd26      	ble.n	800c3a2 <__ieee754_pow+0xca>
 800c354:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c358:	fa22 f103 	lsr.w	r1, r2, r3
 800c35c:	fa01 f303 	lsl.w	r3, r1, r3
 800c360:	4293      	cmp	r3, r2
 800c362:	d13e      	bne.n	800c3e2 <__ieee754_pow+0x10a>
 800c364:	f001 0101 	and.w	r1, r1, #1
 800c368:	f1c1 0b02 	rsb	fp, r1, #2
 800c36c:	2a00      	cmp	r2, #0
 800c36e:	d15b      	bne.n	800c428 <__ieee754_pow+0x150>
 800c370:	4b5b      	ldr	r3, [pc, #364]	; (800c4e0 <__ieee754_pow+0x208>)
 800c372:	4598      	cmp	r8, r3
 800c374:	d124      	bne.n	800c3c0 <__ieee754_pow+0xe8>
 800c376:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c37a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c37e:	ea53 030a 	orrs.w	r3, r3, sl
 800c382:	f000 8476 	beq.w	800cc72 <__ieee754_pow+0x99a>
 800c386:	4b59      	ldr	r3, [pc, #356]	; (800c4ec <__ieee754_pow+0x214>)
 800c388:	429c      	cmp	r4, r3
 800c38a:	dd2d      	ble.n	800c3e8 <__ieee754_pow+0x110>
 800c38c:	f1b9 0f00 	cmp.w	r9, #0
 800c390:	f280 8473 	bge.w	800cc7a <__ieee754_pow+0x9a2>
 800c394:	2000      	movs	r0, #0
 800c396:	2100      	movs	r1, #0
 800c398:	ec41 0b10 	vmov	d0, r0, r1
 800c39c:	b011      	add	sp, #68	; 0x44
 800c39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	d13e      	bne.n	800c424 <__ieee754_pow+0x14c>
 800c3a6:	f1c3 0314 	rsb	r3, r3, #20
 800c3aa:	fa48 f103 	asr.w	r1, r8, r3
 800c3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c3b2:	4543      	cmp	r3, r8
 800c3b4:	f040 8469 	bne.w	800cc8a <__ieee754_pow+0x9b2>
 800c3b8:	f001 0101 	and.w	r1, r1, #1
 800c3bc:	f1c1 0b02 	rsb	fp, r1, #2
 800c3c0:	4b4b      	ldr	r3, [pc, #300]	; (800c4f0 <__ieee754_pow+0x218>)
 800c3c2:	4598      	cmp	r8, r3
 800c3c4:	d118      	bne.n	800c3f8 <__ieee754_pow+0x120>
 800c3c6:	f1b9 0f00 	cmp.w	r9, #0
 800c3ca:	f280 845a 	bge.w	800cc82 <__ieee754_pow+0x9aa>
 800c3ce:	4948      	ldr	r1, [pc, #288]	; (800c4f0 <__ieee754_pow+0x218>)
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	463b      	mov	r3, r7
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f7f4 fa01 	bl	80007dc <__aeabi_ddiv>
 800c3da:	e7dd      	b.n	800c398 <__ieee754_pow+0xc0>
 800c3dc:	f04f 0b02 	mov.w	fp, #2
 800c3e0:	e7c4      	b.n	800c36c <__ieee754_pow+0x94>
 800c3e2:	f04f 0b00 	mov.w	fp, #0
 800c3e6:	e7c1      	b.n	800c36c <__ieee754_pow+0x94>
 800c3e8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ec:	dad2      	bge.n	800c394 <__ieee754_pow+0xbc>
 800c3ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c3f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c3f6:	e7cf      	b.n	800c398 <__ieee754_pow+0xc0>
 800c3f8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c3fc:	d106      	bne.n	800c40c <__ieee754_pow+0x134>
 800c3fe:	4632      	mov	r2, r6
 800c400:	463b      	mov	r3, r7
 800c402:	4610      	mov	r0, r2
 800c404:	4619      	mov	r1, r3
 800c406:	f7f4 f8bf 	bl	8000588 <__aeabi_dmul>
 800c40a:	e7c5      	b.n	800c398 <__ieee754_pow+0xc0>
 800c40c:	4b39      	ldr	r3, [pc, #228]	; (800c4f4 <__ieee754_pow+0x21c>)
 800c40e:	4599      	cmp	r9, r3
 800c410:	d10a      	bne.n	800c428 <__ieee754_pow+0x150>
 800c412:	2d00      	cmp	r5, #0
 800c414:	db08      	blt.n	800c428 <__ieee754_pow+0x150>
 800c416:	ec47 6b10 	vmov	d0, r6, r7
 800c41a:	b011      	add	sp, #68	; 0x44
 800c41c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	f000 bc68 	b.w	800ccf4 <__ieee754_sqrt>
 800c424:	f04f 0b00 	mov.w	fp, #0
 800c428:	ec47 6b10 	vmov	d0, r6, r7
 800c42c:	f000 fd12 	bl	800ce54 <fabs>
 800c430:	ec51 0b10 	vmov	r0, r1, d0
 800c434:	f1ba 0f00 	cmp.w	sl, #0
 800c438:	d127      	bne.n	800c48a <__ieee754_pow+0x1b2>
 800c43a:	b124      	cbz	r4, 800c446 <__ieee754_pow+0x16e>
 800c43c:	4b2c      	ldr	r3, [pc, #176]	; (800c4f0 <__ieee754_pow+0x218>)
 800c43e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c442:	429a      	cmp	r2, r3
 800c444:	d121      	bne.n	800c48a <__ieee754_pow+0x1b2>
 800c446:	f1b9 0f00 	cmp.w	r9, #0
 800c44a:	da05      	bge.n	800c458 <__ieee754_pow+0x180>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	2000      	movs	r0, #0
 800c452:	4927      	ldr	r1, [pc, #156]	; (800c4f0 <__ieee754_pow+0x218>)
 800c454:	f7f4 f9c2 	bl	80007dc <__aeabi_ddiv>
 800c458:	2d00      	cmp	r5, #0
 800c45a:	da9d      	bge.n	800c398 <__ieee754_pow+0xc0>
 800c45c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c460:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c464:	ea54 030b 	orrs.w	r3, r4, fp
 800c468:	d108      	bne.n	800c47c <__ieee754_pow+0x1a4>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4610      	mov	r0, r2
 800c470:	4619      	mov	r1, r3
 800c472:	f7f3 fed1 	bl	8000218 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	e7ac      	b.n	800c3d6 <__ieee754_pow+0xfe>
 800c47c:	f1bb 0f01 	cmp.w	fp, #1
 800c480:	d18a      	bne.n	800c398 <__ieee754_pow+0xc0>
 800c482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c486:	4619      	mov	r1, r3
 800c488:	e786      	b.n	800c398 <__ieee754_pow+0xc0>
 800c48a:	0fed      	lsrs	r5, r5, #31
 800c48c:	1e6b      	subs	r3, r5, #1
 800c48e:	930d      	str	r3, [sp, #52]	; 0x34
 800c490:	ea5b 0303 	orrs.w	r3, fp, r3
 800c494:	d102      	bne.n	800c49c <__ieee754_pow+0x1c4>
 800c496:	4632      	mov	r2, r6
 800c498:	463b      	mov	r3, r7
 800c49a:	e7e8      	b.n	800c46e <__ieee754_pow+0x196>
 800c49c:	4b16      	ldr	r3, [pc, #88]	; (800c4f8 <__ieee754_pow+0x220>)
 800c49e:	4598      	cmp	r8, r3
 800c4a0:	f340 80fe 	ble.w	800c6a0 <__ieee754_pow+0x3c8>
 800c4a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c4a8:	4598      	cmp	r8, r3
 800c4aa:	dd0a      	ble.n	800c4c2 <__ieee754_pow+0x1ea>
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <__ieee754_pow+0x214>)
 800c4ae:	429c      	cmp	r4, r3
 800c4b0:	dc0d      	bgt.n	800c4ce <__ieee754_pow+0x1f6>
 800c4b2:	f1b9 0f00 	cmp.w	r9, #0
 800c4b6:	f6bf af6d 	bge.w	800c394 <__ieee754_pow+0xbc>
 800c4ba:	a307      	add	r3, pc, #28	; (adr r3, 800c4d8 <__ieee754_pow+0x200>)
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	e79f      	b.n	800c402 <__ieee754_pow+0x12a>
 800c4c2:	4b0e      	ldr	r3, [pc, #56]	; (800c4fc <__ieee754_pow+0x224>)
 800c4c4:	429c      	cmp	r4, r3
 800c4c6:	ddf4      	ble.n	800c4b2 <__ieee754_pow+0x1da>
 800c4c8:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <__ieee754_pow+0x218>)
 800c4ca:	429c      	cmp	r4, r3
 800c4cc:	dd18      	ble.n	800c500 <__ieee754_pow+0x228>
 800c4ce:	f1b9 0f00 	cmp.w	r9, #0
 800c4d2:	dcf2      	bgt.n	800c4ba <__ieee754_pow+0x1e2>
 800c4d4:	e75e      	b.n	800c394 <__ieee754_pow+0xbc>
 800c4d6:	bf00      	nop
 800c4d8:	8800759c 	.word	0x8800759c
 800c4dc:	7e37e43c 	.word	0x7e37e43c
 800c4e0:	7ff00000 	.word	0x7ff00000
 800c4e4:	0800d183 	.word	0x0800d183
 800c4e8:	433fffff 	.word	0x433fffff
 800c4ec:	3fefffff 	.word	0x3fefffff
 800c4f0:	3ff00000 	.word	0x3ff00000
 800c4f4:	3fe00000 	.word	0x3fe00000
 800c4f8:	41e00000 	.word	0x41e00000
 800c4fc:	3feffffe 	.word	0x3feffffe
 800c500:	2200      	movs	r2, #0
 800c502:	4b63      	ldr	r3, [pc, #396]	; (800c690 <__ieee754_pow+0x3b8>)
 800c504:	f7f3 fe88 	bl	8000218 <__aeabi_dsub>
 800c508:	a355      	add	r3, pc, #340	; (adr r3, 800c660 <__ieee754_pow+0x388>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	4604      	mov	r4, r0
 800c510:	460d      	mov	r5, r1
 800c512:	f7f4 f839 	bl	8000588 <__aeabi_dmul>
 800c516:	a354      	add	r3, pc, #336	; (adr r3, 800c668 <__ieee754_pow+0x390>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	4606      	mov	r6, r0
 800c51e:	460f      	mov	r7, r1
 800c520:	4620      	mov	r0, r4
 800c522:	4629      	mov	r1, r5
 800c524:	f7f4 f830 	bl	8000588 <__aeabi_dmul>
 800c528:	2200      	movs	r2, #0
 800c52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c52e:	4b59      	ldr	r3, [pc, #356]	; (800c694 <__ieee754_pow+0x3bc>)
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f4 f828 	bl	8000588 <__aeabi_dmul>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	a14c      	add	r1, pc, #304	; (adr r1, 800c670 <__ieee754_pow+0x398>)
 800c53e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c542:	f7f3 fe69 	bl	8000218 <__aeabi_dsub>
 800c546:	4622      	mov	r2, r4
 800c548:	462b      	mov	r3, r5
 800c54a:	f7f4 f81d 	bl	8000588 <__aeabi_dmul>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	2000      	movs	r0, #0
 800c554:	4950      	ldr	r1, [pc, #320]	; (800c698 <__ieee754_pow+0x3c0>)
 800c556:	f7f3 fe5f 	bl	8000218 <__aeabi_dsub>
 800c55a:	4622      	mov	r2, r4
 800c55c:	462b      	mov	r3, r5
 800c55e:	4680      	mov	r8, r0
 800c560:	4689      	mov	r9, r1
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	f7f4 f80f 	bl	8000588 <__aeabi_dmul>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4640      	mov	r0, r8
 800c570:	4649      	mov	r1, r9
 800c572:	f7f4 f809 	bl	8000588 <__aeabi_dmul>
 800c576:	a340      	add	r3, pc, #256	; (adr r3, 800c678 <__ieee754_pow+0x3a0>)
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	f7f4 f804 	bl	8000588 <__aeabi_dmul>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c588:	f7f3 fe46 	bl	8000218 <__aeabi_dsub>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4604      	mov	r4, r0
 800c592:	460d      	mov	r5, r1
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
 800c598:	f7f3 fe40 	bl	800021c <__adddf3>
 800c59c:	2000      	movs	r0, #0
 800c59e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5a2:	4632      	mov	r2, r6
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	f7f3 fe37 	bl	8000218 <__aeabi_dsub>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	f7f3 fe31 	bl	8000218 <__aeabi_dsub>
 800c5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5b8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	f040 81eb 	bne.w	800c99c <__ieee754_pow+0x6c4>
 800c5c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c680 <__ieee754_pow+0x3a8>
 800c5ca:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c5ce:	2400      	movs	r4, #0
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c5dc:	f7f3 fe1c 	bl	8000218 <__aeabi_dsub>
 800c5e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5e4:	f7f3 ffd0 	bl	8000588 <__aeabi_dmul>
 800c5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ec:	4680      	mov	r8, r0
 800c5ee:	4689      	mov	r9, r1
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	f7f3 ffc8 	bl	8000588 <__aeabi_dmul>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4640      	mov	r0, r8
 800c5fe:	4649      	mov	r1, r9
 800c600:	f7f3 fe0c 	bl	800021c <__adddf3>
 800c604:	4622      	mov	r2, r4
 800c606:	462b      	mov	r3, r5
 800c608:	4680      	mov	r8, r0
 800c60a:	4689      	mov	r9, r1
 800c60c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c610:	f7f3 ffba 	bl	8000588 <__aeabi_dmul>
 800c614:	460b      	mov	r3, r1
 800c616:	4604      	mov	r4, r0
 800c618:	460d      	mov	r5, r1
 800c61a:	4602      	mov	r2, r0
 800c61c:	4649      	mov	r1, r9
 800c61e:	4640      	mov	r0, r8
 800c620:	e9cd 4500 	strd	r4, r5, [sp]
 800c624:	f7f3 fdfa 	bl	800021c <__adddf3>
 800c628:	4b1c      	ldr	r3, [pc, #112]	; (800c69c <__ieee754_pow+0x3c4>)
 800c62a:	4299      	cmp	r1, r3
 800c62c:	4606      	mov	r6, r0
 800c62e:	460f      	mov	r7, r1
 800c630:	468b      	mov	fp, r1
 800c632:	f340 82f7 	ble.w	800cc24 <__ieee754_pow+0x94c>
 800c636:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c63a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c63e:	4303      	orrs	r3, r0
 800c640:	f000 81ea 	beq.w	800ca18 <__ieee754_pow+0x740>
 800c644:	a310      	add	r3, pc, #64	; (adr r3, 800c688 <__ieee754_pow+0x3b0>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c64e:	f7f3 ff9b 	bl	8000588 <__aeabi_dmul>
 800c652:	a30d      	add	r3, pc, #52	; (adr r3, 800c688 <__ieee754_pow+0x3b0>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	e6d5      	b.n	800c406 <__ieee754_pow+0x12e>
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w
 800c660:	60000000 	.word	0x60000000
 800c664:	3ff71547 	.word	0x3ff71547
 800c668:	f85ddf44 	.word	0xf85ddf44
 800c66c:	3e54ae0b 	.word	0x3e54ae0b
 800c670:	55555555 	.word	0x55555555
 800c674:	3fd55555 	.word	0x3fd55555
 800c678:	652b82fe 	.word	0x652b82fe
 800c67c:	3ff71547 	.word	0x3ff71547
 800c680:	00000000 	.word	0x00000000
 800c684:	bff00000 	.word	0xbff00000
 800c688:	8800759c 	.word	0x8800759c
 800c68c:	7e37e43c 	.word	0x7e37e43c
 800c690:	3ff00000 	.word	0x3ff00000
 800c694:	3fd00000 	.word	0x3fd00000
 800c698:	3fe00000 	.word	0x3fe00000
 800c69c:	408fffff 	.word	0x408fffff
 800c6a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	da05      	bge.n	800c6b6 <__ieee754_pow+0x3de>
 800c6aa:	4bd3      	ldr	r3, [pc, #844]	; (800c9f8 <__ieee754_pow+0x720>)
 800c6ac:	f7f3 ff6c 	bl	8000588 <__aeabi_dmul>
 800c6b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	1523      	asrs	r3, r4, #20
 800c6b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6bc:	4413      	add	r3, r2
 800c6be:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c0:	4bce      	ldr	r3, [pc, #824]	; (800c9fc <__ieee754_pow+0x724>)
 800c6c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c6c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c6ca:	429c      	cmp	r4, r3
 800c6cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c6d0:	dd08      	ble.n	800c6e4 <__ieee754_pow+0x40c>
 800c6d2:	4bcb      	ldr	r3, [pc, #812]	; (800ca00 <__ieee754_pow+0x728>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	f340 815e 	ble.w	800c996 <__ieee754_pow+0x6be>
 800c6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6dc:	3301      	adds	r3, #1
 800c6de:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c6e4:	f04f 0a00 	mov.w	sl, #0
 800c6e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c6ec:	930c      	str	r3, [sp, #48]	; 0x30
 800c6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6f0:	4bc4      	ldr	r3, [pc, #784]	; (800ca04 <__ieee754_pow+0x72c>)
 800c6f2:	4413      	add	r3, r2
 800c6f4:	ed93 7b00 	vldr	d7, [r3]
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	ec53 2b17 	vmov	r2, r3, d7
 800c6fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c702:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c706:	f7f3 fd87 	bl	8000218 <__aeabi_dsub>
 800c70a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c716:	f7f3 fd81 	bl	800021c <__adddf3>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	2000      	movs	r0, #0
 800c720:	49b9      	ldr	r1, [pc, #740]	; (800ca08 <__ieee754_pow+0x730>)
 800c722:	f7f4 f85b 	bl	80007dc <__aeabi_ddiv>
 800c726:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4630      	mov	r0, r6
 800c730:	4639      	mov	r1, r7
 800c732:	f7f3 ff29 	bl	8000588 <__aeabi_dmul>
 800c736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c73a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c73e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c742:	2300      	movs	r3, #0
 800c744:	9302      	str	r3, [sp, #8]
 800c746:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c74a:	106d      	asrs	r5, r5, #1
 800c74c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c750:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c754:	2200      	movs	r2, #0
 800c756:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c75a:	4640      	mov	r0, r8
 800c75c:	4649      	mov	r1, r9
 800c75e:	4614      	mov	r4, r2
 800c760:	461d      	mov	r5, r3
 800c762:	f7f3 ff11 	bl	8000588 <__aeabi_dmul>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4630      	mov	r0, r6
 800c76c:	4639      	mov	r1, r7
 800c76e:	f7f3 fd53 	bl	8000218 <__aeabi_dsub>
 800c772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c776:	4606      	mov	r6, r0
 800c778:	460f      	mov	r7, r1
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f3 fd4b 	bl	8000218 <__aeabi_dsub>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c78a:	f7f3 fd45 	bl	8000218 <__aeabi_dsub>
 800c78e:	4642      	mov	r2, r8
 800c790:	464b      	mov	r3, r9
 800c792:	f7f3 fef9 	bl	8000588 <__aeabi_dmul>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	4630      	mov	r0, r6
 800c79c:	4639      	mov	r1, r7
 800c79e:	f7f3 fd3b 	bl	8000218 <__aeabi_dsub>
 800c7a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c7a6:	f7f3 feef 	bl	8000588 <__aeabi_dmul>
 800c7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	f7f3 fee7 	bl	8000588 <__aeabi_dmul>
 800c7ba:	a37b      	add	r3, pc, #492	; (adr r3, 800c9a8 <__ieee754_pow+0x6d0>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	f7f3 fee0 	bl	8000588 <__aeabi_dmul>
 800c7c8:	a379      	add	r3, pc, #484	; (adr r3, 800c9b0 <__ieee754_pow+0x6d8>)
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	f7f3 fd25 	bl	800021c <__adddf3>
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	f7f3 fed7 	bl	8000588 <__aeabi_dmul>
 800c7da:	a377      	add	r3, pc, #476	; (adr r3, 800c9b8 <__ieee754_pow+0x6e0>)
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f7f3 fd1c 	bl	800021c <__adddf3>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	462b      	mov	r3, r5
 800c7e8:	f7f3 fece 	bl	8000588 <__aeabi_dmul>
 800c7ec:	a374      	add	r3, pc, #464	; (adr r3, 800c9c0 <__ieee754_pow+0x6e8>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	f7f3 fd13 	bl	800021c <__adddf3>
 800c7f6:	4622      	mov	r2, r4
 800c7f8:	462b      	mov	r3, r5
 800c7fa:	f7f3 fec5 	bl	8000588 <__aeabi_dmul>
 800c7fe:	a372      	add	r3, pc, #456	; (adr r3, 800c9c8 <__ieee754_pow+0x6f0>)
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	f7f3 fd0a 	bl	800021c <__adddf3>
 800c808:	4622      	mov	r2, r4
 800c80a:	462b      	mov	r3, r5
 800c80c:	f7f3 febc 	bl	8000588 <__aeabi_dmul>
 800c810:	a36f      	add	r3, pc, #444	; (adr r3, 800c9d0 <__ieee754_pow+0x6f8>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7f3 fd01 	bl	800021c <__adddf3>
 800c81a:	4622      	mov	r2, r4
 800c81c:	4606      	mov	r6, r0
 800c81e:	460f      	mov	r7, r1
 800c820:	462b      	mov	r3, r5
 800c822:	4620      	mov	r0, r4
 800c824:	4629      	mov	r1, r5
 800c826:	f7f3 feaf 	bl	8000588 <__aeabi_dmul>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	4630      	mov	r0, r6
 800c830:	4639      	mov	r1, r7
 800c832:	f7f3 fea9 	bl	8000588 <__aeabi_dmul>
 800c836:	4642      	mov	r2, r8
 800c838:	4604      	mov	r4, r0
 800c83a:	460d      	mov	r5, r1
 800c83c:	464b      	mov	r3, r9
 800c83e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c842:	f7f3 fceb 	bl	800021c <__adddf3>
 800c846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c84a:	f7f3 fe9d 	bl	8000588 <__aeabi_dmul>
 800c84e:	4622      	mov	r2, r4
 800c850:	462b      	mov	r3, r5
 800c852:	f7f3 fce3 	bl	800021c <__adddf3>
 800c856:	4642      	mov	r2, r8
 800c858:	4606      	mov	r6, r0
 800c85a:	460f      	mov	r7, r1
 800c85c:	464b      	mov	r3, r9
 800c85e:	4640      	mov	r0, r8
 800c860:	4649      	mov	r1, r9
 800c862:	f7f3 fe91 	bl	8000588 <__aeabi_dmul>
 800c866:	2200      	movs	r2, #0
 800c868:	4b68      	ldr	r3, [pc, #416]	; (800ca0c <__ieee754_pow+0x734>)
 800c86a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c86e:	f7f3 fcd5 	bl	800021c <__adddf3>
 800c872:	4632      	mov	r2, r6
 800c874:	463b      	mov	r3, r7
 800c876:	f7f3 fcd1 	bl	800021c <__adddf3>
 800c87a:	9802      	ldr	r0, [sp, #8]
 800c87c:	460d      	mov	r5, r1
 800c87e:	4604      	mov	r4, r0
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	4640      	mov	r0, r8
 800c886:	4649      	mov	r1, r9
 800c888:	f7f3 fe7e 	bl	8000588 <__aeabi_dmul>
 800c88c:	2200      	movs	r2, #0
 800c88e:	4680      	mov	r8, r0
 800c890:	4689      	mov	r9, r1
 800c892:	4b5e      	ldr	r3, [pc, #376]	; (800ca0c <__ieee754_pow+0x734>)
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f7f3 fcbe 	bl	8000218 <__aeabi_dsub>
 800c89c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c8a0:	f7f3 fcba 	bl	8000218 <__aeabi_dsub>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	f7f3 fcb4 	bl	8000218 <__aeabi_dsub>
 800c8b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8b4:	f7f3 fe68 	bl	8000588 <__aeabi_dmul>
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	462b      	mov	r3, r5
 800c8c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8c4:	f7f3 fe60 	bl	8000588 <__aeabi_dmul>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	f7f3 fca4 	bl	800021c <__adddf3>
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	460f      	mov	r7, r1
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4640      	mov	r0, r8
 800c8de:	4649      	mov	r1, r9
 800c8e0:	f7f3 fc9c 	bl	800021c <__adddf3>
 800c8e4:	9802      	ldr	r0, [sp, #8]
 800c8e6:	a33c      	add	r3, pc, #240	; (adr r3, 800c9d8 <__ieee754_pow+0x700>)
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	460d      	mov	r5, r1
 800c8f0:	f7f3 fe4a 	bl	8000588 <__aeabi_dmul>
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	f7f3 fc8a 	bl	8000218 <__aeabi_dsub>
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4630      	mov	r0, r6
 800c90a:	4639      	mov	r1, r7
 800c90c:	f7f3 fc84 	bl	8000218 <__aeabi_dsub>
 800c910:	a333      	add	r3, pc, #204	; (adr r3, 800c9e0 <__ieee754_pow+0x708>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7f3 fe37 	bl	8000588 <__aeabi_dmul>
 800c91a:	a333      	add	r3, pc, #204	; (adr r3, 800c9e8 <__ieee754_pow+0x710>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	4606      	mov	r6, r0
 800c922:	460f      	mov	r7, r1
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fe2e 	bl	8000588 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4630      	mov	r0, r6
 800c932:	4639      	mov	r1, r7
 800c934:	f7f3 fc72 	bl	800021c <__adddf3>
 800c938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c93a:	4b35      	ldr	r3, [pc, #212]	; (800ca10 <__ieee754_pow+0x738>)
 800c93c:	4413      	add	r3, r2
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f7f3 fc6b 	bl	800021c <__adddf3>
 800c946:	4604      	mov	r4, r0
 800c948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c94a:	460d      	mov	r5, r1
 800c94c:	f7f3 fdb2 	bl	80004b4 <__aeabi_i2d>
 800c950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c952:	4b30      	ldr	r3, [pc, #192]	; (800ca14 <__ieee754_pow+0x73c>)
 800c954:	4413      	add	r3, r2
 800c956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c95a:	4606      	mov	r6, r0
 800c95c:	460f      	mov	r7, r1
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c966:	f7f3 fc59 	bl	800021c <__adddf3>
 800c96a:	4642      	mov	r2, r8
 800c96c:	464b      	mov	r3, r9
 800c96e:	f7f3 fc55 	bl	800021c <__adddf3>
 800c972:	4632      	mov	r2, r6
 800c974:	463b      	mov	r3, r7
 800c976:	f7f3 fc51 	bl	800021c <__adddf3>
 800c97a:	9802      	ldr	r0, [sp, #8]
 800c97c:	4632      	mov	r2, r6
 800c97e:	463b      	mov	r3, r7
 800c980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c984:	f7f3 fc48 	bl	8000218 <__aeabi_dsub>
 800c988:	4642      	mov	r2, r8
 800c98a:	464b      	mov	r3, r9
 800c98c:	f7f3 fc44 	bl	8000218 <__aeabi_dsub>
 800c990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c994:	e607      	b.n	800c5a6 <__ieee754_pow+0x2ce>
 800c996:	f04f 0a01 	mov.w	sl, #1
 800c99a:	e6a5      	b.n	800c6e8 <__ieee754_pow+0x410>
 800c99c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c9f0 <__ieee754_pow+0x718>
 800c9a0:	e613      	b.n	800c5ca <__ieee754_pow+0x2f2>
 800c9a2:	bf00      	nop
 800c9a4:	f3af 8000 	nop.w
 800c9a8:	4a454eef 	.word	0x4a454eef
 800c9ac:	3fca7e28 	.word	0x3fca7e28
 800c9b0:	93c9db65 	.word	0x93c9db65
 800c9b4:	3fcd864a 	.word	0x3fcd864a
 800c9b8:	a91d4101 	.word	0xa91d4101
 800c9bc:	3fd17460 	.word	0x3fd17460
 800c9c0:	518f264d 	.word	0x518f264d
 800c9c4:	3fd55555 	.word	0x3fd55555
 800c9c8:	db6fabff 	.word	0xdb6fabff
 800c9cc:	3fdb6db6 	.word	0x3fdb6db6
 800c9d0:	33333303 	.word	0x33333303
 800c9d4:	3fe33333 	.word	0x3fe33333
 800c9d8:	e0000000 	.word	0xe0000000
 800c9dc:	3feec709 	.word	0x3feec709
 800c9e0:	dc3a03fd 	.word	0xdc3a03fd
 800c9e4:	3feec709 	.word	0x3feec709
 800c9e8:	145b01f5 	.word	0x145b01f5
 800c9ec:	be3e2fe0 	.word	0xbe3e2fe0
 800c9f0:	00000000 	.word	0x00000000
 800c9f4:	3ff00000 	.word	0x3ff00000
 800c9f8:	43400000 	.word	0x43400000
 800c9fc:	0003988e 	.word	0x0003988e
 800ca00:	000bb679 	.word	0x000bb679
 800ca04:	0800d188 	.word	0x0800d188
 800ca08:	3ff00000 	.word	0x3ff00000
 800ca0c:	40080000 	.word	0x40080000
 800ca10:	0800d1a8 	.word	0x0800d1a8
 800ca14:	0800d198 	.word	0x0800d198
 800ca18:	a3b4      	add	r3, pc, #720	; (adr r3, 800ccec <__ieee754_pow+0xa14>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	4640      	mov	r0, r8
 800ca20:	4649      	mov	r1, r9
 800ca22:	f7f3 fbfb 	bl	800021c <__adddf3>
 800ca26:	4622      	mov	r2, r4
 800ca28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f3 fbf1 	bl	8000218 <__aeabi_dsub>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca3e:	f7f4 f833 	bl	8000aa8 <__aeabi_dcmpgt>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	f47f adfe 	bne.w	800c644 <__ieee754_pow+0x36c>
 800ca48:	4aa3      	ldr	r2, [pc, #652]	; (800ccd8 <__ieee754_pow+0xa00>)
 800ca4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	f340 810a 	ble.w	800cc68 <__ieee754_pow+0x990>
 800ca54:	151b      	asrs	r3, r3, #20
 800ca56:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ca5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ca5e:	fa4a f303 	asr.w	r3, sl, r3
 800ca62:	445b      	add	r3, fp
 800ca64:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ca68:	4e9c      	ldr	r6, [pc, #624]	; (800ccdc <__ieee754_pow+0xa04>)
 800ca6a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca6e:	4116      	asrs	r6, r2
 800ca70:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ca74:	2000      	movs	r0, #0
 800ca76:	ea23 0106 	bic.w	r1, r3, r6
 800ca7a:	f1c2 0214 	rsb	r2, r2, #20
 800ca7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ca82:	fa4a fa02 	asr.w	sl, sl, r2
 800ca86:	f1bb 0f00 	cmp.w	fp, #0
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	bfb8      	it	lt
 800ca94:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca98:	f7f3 fbbe 	bl	8000218 <__aeabi_dsub>
 800ca9c:	e9cd 0100 	strd	r0, r1, [sp]
 800caa0:	4642      	mov	r2, r8
 800caa2:	464b      	mov	r3, r9
 800caa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caa8:	f7f3 fbb8 	bl	800021c <__adddf3>
 800caac:	2000      	movs	r0, #0
 800caae:	a378      	add	r3, pc, #480	; (adr r3, 800cc90 <__ieee754_pow+0x9b8>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	f7f3 fd66 	bl	8000588 <__aeabi_dmul>
 800cabc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	4620      	mov	r0, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f3 fba6 	bl	8000218 <__aeabi_dsub>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4640      	mov	r0, r8
 800cad2:	4649      	mov	r1, r9
 800cad4:	f7f3 fba0 	bl	8000218 <__aeabi_dsub>
 800cad8:	a36f      	add	r3, pc, #444	; (adr r3, 800cc98 <__ieee754_pow+0x9c0>)
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f7f3 fd53 	bl	8000588 <__aeabi_dmul>
 800cae2:	a36f      	add	r3, pc, #444	; (adr r3, 800cca0 <__ieee754_pow+0x9c8>)
 800cae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae8:	4680      	mov	r8, r0
 800caea:	4689      	mov	r9, r1
 800caec:	4620      	mov	r0, r4
 800caee:	4629      	mov	r1, r5
 800caf0:	f7f3 fd4a 	bl	8000588 <__aeabi_dmul>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4640      	mov	r0, r8
 800cafa:	4649      	mov	r1, r9
 800cafc:	f7f3 fb8e 	bl	800021c <__adddf3>
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 fb86 	bl	800021c <__adddf3>
 800cb10:	4632      	mov	r2, r6
 800cb12:	463b      	mov	r3, r7
 800cb14:	4680      	mov	r8, r0
 800cb16:	4689      	mov	r9, r1
 800cb18:	f7f3 fb7e 	bl	8000218 <__aeabi_dsub>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4620      	mov	r0, r4
 800cb22:	4629      	mov	r1, r5
 800cb24:	f7f3 fb78 	bl	8000218 <__aeabi_dsub>
 800cb28:	4642      	mov	r2, r8
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	464b      	mov	r3, r9
 800cb30:	4640      	mov	r0, r8
 800cb32:	4649      	mov	r1, r9
 800cb34:	f7f3 fd28 	bl	8000588 <__aeabi_dmul>
 800cb38:	a35b      	add	r3, pc, #364	; (adr r3, 800cca8 <__ieee754_pow+0x9d0>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	f7f3 fd21 	bl	8000588 <__aeabi_dmul>
 800cb46:	a35a      	add	r3, pc, #360	; (adr r3, 800ccb0 <__ieee754_pow+0x9d8>)
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	f7f3 fb64 	bl	8000218 <__aeabi_dsub>
 800cb50:	4622      	mov	r2, r4
 800cb52:	462b      	mov	r3, r5
 800cb54:	f7f3 fd18 	bl	8000588 <__aeabi_dmul>
 800cb58:	a357      	add	r3, pc, #348	; (adr r3, 800ccb8 <__ieee754_pow+0x9e0>)
 800cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5e:	f7f3 fb5d 	bl	800021c <__adddf3>
 800cb62:	4622      	mov	r2, r4
 800cb64:	462b      	mov	r3, r5
 800cb66:	f7f3 fd0f 	bl	8000588 <__aeabi_dmul>
 800cb6a:	a355      	add	r3, pc, #340	; (adr r3, 800ccc0 <__ieee754_pow+0x9e8>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fb52 	bl	8000218 <__aeabi_dsub>
 800cb74:	4622      	mov	r2, r4
 800cb76:	462b      	mov	r3, r5
 800cb78:	f7f3 fd06 	bl	8000588 <__aeabi_dmul>
 800cb7c:	a352      	add	r3, pc, #328	; (adr r3, 800ccc8 <__ieee754_pow+0x9f0>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	f7f3 fb4b 	bl	800021c <__adddf3>
 800cb86:	4622      	mov	r2, r4
 800cb88:	462b      	mov	r3, r5
 800cb8a:	f7f3 fcfd 	bl	8000588 <__aeabi_dmul>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	460b      	mov	r3, r1
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	f7f3 fb3f 	bl	8000218 <__aeabi_dsub>
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	4640      	mov	r0, r8
 800cba4:	4649      	mov	r1, r9
 800cba6:	f7f3 fcef 	bl	8000588 <__aeabi_dmul>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	e9cd 0100 	strd	r0, r1, [sp]
 800cbb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 fb2e 	bl	8000218 <__aeabi_dsub>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc4:	f7f3 fe0a 	bl	80007dc <__aeabi_ddiv>
 800cbc8:	4632      	mov	r2, r6
 800cbca:	4604      	mov	r4, r0
 800cbcc:	460d      	mov	r5, r1
 800cbce:	463b      	mov	r3, r7
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	f7f3 fcd8 	bl	8000588 <__aeabi_dmul>
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	f7f3 fb1e 	bl	800021c <__adddf3>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7f3 fb16 	bl	8000218 <__aeabi_dsub>
 800cbec:	4642      	mov	r2, r8
 800cbee:	464b      	mov	r3, r9
 800cbf0:	f7f3 fb12 	bl	8000218 <__aeabi_dsub>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	4939      	ldr	r1, [pc, #228]	; (800cce0 <__ieee754_pow+0xa08>)
 800cbfc:	f7f3 fb0c 	bl	8000218 <__aeabi_dsub>
 800cc00:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800cc04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	da2f      	bge.n	800cc6e <__ieee754_pow+0x996>
 800cc0e:	4650      	mov	r0, sl
 800cc10:	ec43 2b10 	vmov	d0, r2, r3
 800cc14:	f000 f9c0 	bl	800cf98 <scalbn>
 800cc18:	ec51 0b10 	vmov	r0, r1, d0
 800cc1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc20:	f7ff bbf1 	b.w	800c406 <__ieee754_pow+0x12e>
 800cc24:	4b2f      	ldr	r3, [pc, #188]	; (800cce4 <__ieee754_pow+0xa0c>)
 800cc26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cc2a:	429e      	cmp	r6, r3
 800cc2c:	f77f af0c 	ble.w	800ca48 <__ieee754_pow+0x770>
 800cc30:	4b2d      	ldr	r3, [pc, #180]	; (800cce8 <__ieee754_pow+0xa10>)
 800cc32:	440b      	add	r3, r1
 800cc34:	4303      	orrs	r3, r0
 800cc36:	d00b      	beq.n	800cc50 <__ieee754_pow+0x978>
 800cc38:	a325      	add	r3, pc, #148	; (adr r3, 800ccd0 <__ieee754_pow+0x9f8>)
 800cc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc42:	f7f3 fca1 	bl	8000588 <__aeabi_dmul>
 800cc46:	a322      	add	r3, pc, #136	; (adr r3, 800ccd0 <__ieee754_pow+0x9f8>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7ff bbdb 	b.w	800c406 <__ieee754_pow+0x12e>
 800cc50:	4622      	mov	r2, r4
 800cc52:	462b      	mov	r3, r5
 800cc54:	f7f3 fae0 	bl	8000218 <__aeabi_dsub>
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	f7f3 ff1a 	bl	8000a94 <__aeabi_dcmpge>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	f43f aef1 	beq.w	800ca48 <__ieee754_pow+0x770>
 800cc66:	e7e7      	b.n	800cc38 <__ieee754_pow+0x960>
 800cc68:	f04f 0a00 	mov.w	sl, #0
 800cc6c:	e718      	b.n	800caa0 <__ieee754_pow+0x7c8>
 800cc6e:	4621      	mov	r1, r4
 800cc70:	e7d4      	b.n	800cc1c <__ieee754_pow+0x944>
 800cc72:	2000      	movs	r0, #0
 800cc74:	491a      	ldr	r1, [pc, #104]	; (800cce0 <__ieee754_pow+0xa08>)
 800cc76:	f7ff bb8f 	b.w	800c398 <__ieee754_pow+0xc0>
 800cc7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc7e:	f7ff bb8b 	b.w	800c398 <__ieee754_pow+0xc0>
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7ff bb87 	b.w	800c398 <__ieee754_pow+0xc0>
 800cc8a:	4693      	mov	fp, r2
 800cc8c:	f7ff bb98 	b.w	800c3c0 <__ieee754_pow+0xe8>
 800cc90:	00000000 	.word	0x00000000
 800cc94:	3fe62e43 	.word	0x3fe62e43
 800cc98:	fefa39ef 	.word	0xfefa39ef
 800cc9c:	3fe62e42 	.word	0x3fe62e42
 800cca0:	0ca86c39 	.word	0x0ca86c39
 800cca4:	be205c61 	.word	0xbe205c61
 800cca8:	72bea4d0 	.word	0x72bea4d0
 800ccac:	3e663769 	.word	0x3e663769
 800ccb0:	c5d26bf1 	.word	0xc5d26bf1
 800ccb4:	3ebbbd41 	.word	0x3ebbbd41
 800ccb8:	af25de2c 	.word	0xaf25de2c
 800ccbc:	3f11566a 	.word	0x3f11566a
 800ccc0:	16bebd93 	.word	0x16bebd93
 800ccc4:	3f66c16c 	.word	0x3f66c16c
 800ccc8:	5555553e 	.word	0x5555553e
 800cccc:	3fc55555 	.word	0x3fc55555
 800ccd0:	c2f8f359 	.word	0xc2f8f359
 800ccd4:	01a56e1f 	.word	0x01a56e1f
 800ccd8:	3fe00000 	.word	0x3fe00000
 800ccdc:	000fffff 	.word	0x000fffff
 800cce0:	3ff00000 	.word	0x3ff00000
 800cce4:	4090cbff 	.word	0x4090cbff
 800cce8:	3f6f3400 	.word	0x3f6f3400
 800ccec:	652b82fe 	.word	0x652b82fe
 800ccf0:	3c971547 	.word	0x3c971547

0800ccf4 <__ieee754_sqrt>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	4955      	ldr	r1, [pc, #340]	; (800ce50 <__ieee754_sqrt+0x15c>)
 800ccfa:	ec55 4b10 	vmov	r4, r5, d0
 800ccfe:	43a9      	bics	r1, r5
 800cd00:	462b      	mov	r3, r5
 800cd02:	462a      	mov	r2, r5
 800cd04:	d112      	bne.n	800cd2c <__ieee754_sqrt+0x38>
 800cd06:	ee10 2a10 	vmov	r2, s0
 800cd0a:	ee10 0a10 	vmov	r0, s0
 800cd0e:	4629      	mov	r1, r5
 800cd10:	f7f3 fc3a 	bl	8000588 <__aeabi_dmul>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4620      	mov	r0, r4
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7f3 fa7e 	bl	800021c <__adddf3>
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	ec45 4b10 	vmov	d0, r4, r5
 800cd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2c:	2d00      	cmp	r5, #0
 800cd2e:	ee10 0a10 	vmov	r0, s0
 800cd32:	4621      	mov	r1, r4
 800cd34:	dc0f      	bgt.n	800cd56 <__ieee754_sqrt+0x62>
 800cd36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd3a:	4330      	orrs	r0, r6
 800cd3c:	d0f2      	beq.n	800cd24 <__ieee754_sqrt+0x30>
 800cd3e:	b155      	cbz	r5, 800cd56 <__ieee754_sqrt+0x62>
 800cd40:	ee10 2a10 	vmov	r2, s0
 800cd44:	4620      	mov	r0, r4
 800cd46:	4629      	mov	r1, r5
 800cd48:	f7f3 fa66 	bl	8000218 <__aeabi_dsub>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	f7f3 fd44 	bl	80007dc <__aeabi_ddiv>
 800cd54:	e7e4      	b.n	800cd20 <__ieee754_sqrt+0x2c>
 800cd56:	151b      	asrs	r3, r3, #20
 800cd58:	d073      	beq.n	800ce42 <__ieee754_sqrt+0x14e>
 800cd5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd5e:	07dd      	lsls	r5, r3, #31
 800cd60:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cd64:	bf48      	it	mi
 800cd66:	0fc8      	lsrmi	r0, r1, #31
 800cd68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cd6c:	bf44      	itt	mi
 800cd6e:	0049      	lslmi	r1, r1, #1
 800cd70:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800cd74:	2500      	movs	r5, #0
 800cd76:	1058      	asrs	r0, r3, #1
 800cd78:	0fcb      	lsrs	r3, r1, #31
 800cd7a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cd7e:	0049      	lsls	r1, r1, #1
 800cd80:	2316      	movs	r3, #22
 800cd82:	462c      	mov	r4, r5
 800cd84:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cd88:	19a7      	adds	r7, r4, r6
 800cd8a:	4297      	cmp	r7, r2
 800cd8c:	bfde      	ittt	le
 800cd8e:	19bc      	addle	r4, r7, r6
 800cd90:	1bd2      	suble	r2, r2, r7
 800cd92:	19ad      	addle	r5, r5, r6
 800cd94:	0fcf      	lsrs	r7, r1, #31
 800cd96:	3b01      	subs	r3, #1
 800cd98:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800cd9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cda0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cda4:	d1f0      	bne.n	800cd88 <__ieee754_sqrt+0x94>
 800cda6:	f04f 0c20 	mov.w	ip, #32
 800cdaa:	469e      	mov	lr, r3
 800cdac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cdb0:	42a2      	cmp	r2, r4
 800cdb2:	eb06 070e 	add.w	r7, r6, lr
 800cdb6:	dc02      	bgt.n	800cdbe <__ieee754_sqrt+0xca>
 800cdb8:	d112      	bne.n	800cde0 <__ieee754_sqrt+0xec>
 800cdba:	428f      	cmp	r7, r1
 800cdbc:	d810      	bhi.n	800cde0 <__ieee754_sqrt+0xec>
 800cdbe:	2f00      	cmp	r7, #0
 800cdc0:	eb07 0e06 	add.w	lr, r7, r6
 800cdc4:	da42      	bge.n	800ce4c <__ieee754_sqrt+0x158>
 800cdc6:	f1be 0f00 	cmp.w	lr, #0
 800cdca:	db3f      	blt.n	800ce4c <__ieee754_sqrt+0x158>
 800cdcc:	f104 0801 	add.w	r8, r4, #1
 800cdd0:	1b12      	subs	r2, r2, r4
 800cdd2:	428f      	cmp	r7, r1
 800cdd4:	bf88      	it	hi
 800cdd6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cdda:	1bc9      	subs	r1, r1, r7
 800cddc:	4433      	add	r3, r6
 800cdde:	4644      	mov	r4, r8
 800cde0:	0052      	lsls	r2, r2, #1
 800cde2:	f1bc 0c01 	subs.w	ip, ip, #1
 800cde6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800cdea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cdee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cdf2:	d1dd      	bne.n	800cdb0 <__ieee754_sqrt+0xbc>
 800cdf4:	430a      	orrs	r2, r1
 800cdf6:	d006      	beq.n	800ce06 <__ieee754_sqrt+0x112>
 800cdf8:	1c5c      	adds	r4, r3, #1
 800cdfa:	bf13      	iteet	ne
 800cdfc:	3301      	addne	r3, #1
 800cdfe:	3501      	addeq	r5, #1
 800ce00:	4663      	moveq	r3, ip
 800ce02:	f023 0301 	bicne.w	r3, r3, #1
 800ce06:	106a      	asrs	r2, r5, #1
 800ce08:	085b      	lsrs	r3, r3, #1
 800ce0a:	07e9      	lsls	r1, r5, #31
 800ce0c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ce10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ce14:	bf48      	it	mi
 800ce16:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ce1a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ce1e:	461c      	mov	r4, r3
 800ce20:	e780      	b.n	800cd24 <__ieee754_sqrt+0x30>
 800ce22:	0aca      	lsrs	r2, r1, #11
 800ce24:	3815      	subs	r0, #21
 800ce26:	0549      	lsls	r1, r1, #21
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	d0fa      	beq.n	800ce22 <__ieee754_sqrt+0x12e>
 800ce2c:	02d6      	lsls	r6, r2, #11
 800ce2e:	d50a      	bpl.n	800ce46 <__ieee754_sqrt+0x152>
 800ce30:	f1c3 0420 	rsb	r4, r3, #32
 800ce34:	fa21 f404 	lsr.w	r4, r1, r4
 800ce38:	1e5d      	subs	r5, r3, #1
 800ce3a:	4099      	lsls	r1, r3
 800ce3c:	4322      	orrs	r2, r4
 800ce3e:	1b43      	subs	r3, r0, r5
 800ce40:	e78b      	b.n	800cd5a <__ieee754_sqrt+0x66>
 800ce42:	4618      	mov	r0, r3
 800ce44:	e7f0      	b.n	800ce28 <__ieee754_sqrt+0x134>
 800ce46:	0052      	lsls	r2, r2, #1
 800ce48:	3301      	adds	r3, #1
 800ce4a:	e7ef      	b.n	800ce2c <__ieee754_sqrt+0x138>
 800ce4c:	46a0      	mov	r8, r4
 800ce4e:	e7bf      	b.n	800cdd0 <__ieee754_sqrt+0xdc>
 800ce50:	7ff00000 	.word	0x7ff00000

0800ce54 <fabs>:
 800ce54:	ec51 0b10 	vmov	r0, r1, d0
 800ce58:	ee10 2a10 	vmov	r2, s0
 800ce5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce60:	ec43 2b10 	vmov	d0, r2, r3
 800ce64:	4770      	bx	lr

0800ce66 <finite>:
 800ce66:	ee10 3a90 	vmov	r3, s1
 800ce6a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ce6e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce72:	0fc0      	lsrs	r0, r0, #31
 800ce74:	4770      	bx	lr

0800ce76 <matherr>:
 800ce76:	2000      	movs	r0, #0
 800ce78:	4770      	bx	lr
 800ce7a:	0000      	movs	r0, r0
 800ce7c:	0000      	movs	r0, r0
	...

0800ce80 <nan>:
 800ce80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce88 <nan+0x8>
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	00000000 	.word	0x00000000
 800ce8c:	7ff80000 	.word	0x7ff80000

0800ce90 <rint>:
 800ce90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce92:	ec51 0b10 	vmov	r0, r1, d0
 800ce96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce9a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ce9e:	2e13      	cmp	r6, #19
 800cea0:	460b      	mov	r3, r1
 800cea2:	ee10 4a10 	vmov	r4, s0
 800cea6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ceaa:	dc56      	bgt.n	800cf5a <rint+0xca>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	da2b      	bge.n	800cf08 <rint+0x78>
 800ceb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ceb4:	4302      	orrs	r2, r0
 800ceb6:	d023      	beq.n	800cf00 <rint+0x70>
 800ceb8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cebc:	4302      	orrs	r2, r0
 800cebe:	4254      	negs	r4, r2
 800cec0:	4314      	orrs	r4, r2
 800cec2:	0c4b      	lsrs	r3, r1, #17
 800cec4:	0b24      	lsrs	r4, r4, #12
 800cec6:	045b      	lsls	r3, r3, #17
 800cec8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cecc:	ea44 0103 	orr.w	r1, r4, r3
 800ced0:	460b      	mov	r3, r1
 800ced2:	492f      	ldr	r1, [pc, #188]	; (800cf90 <rint+0x100>)
 800ced4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ced8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800cedc:	4602      	mov	r2, r0
 800cede:	4639      	mov	r1, r7
 800cee0:	4630      	mov	r0, r6
 800cee2:	f7f3 f99b 	bl	800021c <__adddf3>
 800cee6:	e9cd 0100 	strd	r0, r1, [sp]
 800ceea:	463b      	mov	r3, r7
 800ceec:	4632      	mov	r2, r6
 800ceee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef2:	f7f3 f991 	bl	8000218 <__aeabi_dsub>
 800cef6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cefa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cefe:	4639      	mov	r1, r7
 800cf00:	ec41 0b10 	vmov	d0, r0, r1
 800cf04:	b003      	add	sp, #12
 800cf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf08:	4a22      	ldr	r2, [pc, #136]	; (800cf94 <rint+0x104>)
 800cf0a:	4132      	asrs	r2, r6
 800cf0c:	ea01 0702 	and.w	r7, r1, r2
 800cf10:	4307      	orrs	r7, r0
 800cf12:	d0f5      	beq.n	800cf00 <rint+0x70>
 800cf14:	0852      	lsrs	r2, r2, #1
 800cf16:	4011      	ands	r1, r2
 800cf18:	430c      	orrs	r4, r1
 800cf1a:	d00b      	beq.n	800cf34 <rint+0xa4>
 800cf1c:	ea23 0202 	bic.w	r2, r3, r2
 800cf20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cf24:	2e13      	cmp	r6, #19
 800cf26:	fa43 f306 	asr.w	r3, r3, r6
 800cf2a:	bf0c      	ite	eq
 800cf2c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cf30:	2400      	movne	r4, #0
 800cf32:	4313      	orrs	r3, r2
 800cf34:	4916      	ldr	r1, [pc, #88]	; (800cf90 <rint+0x100>)
 800cf36:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf40:	4620      	mov	r0, r4
 800cf42:	4629      	mov	r1, r5
 800cf44:	f7f3 f96a 	bl	800021c <__adddf3>
 800cf48:	e9cd 0100 	strd	r0, r1, [sp]
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	462b      	mov	r3, r5
 800cf50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf54:	f7f3 f960 	bl	8000218 <__aeabi_dsub>
 800cf58:	e7d2      	b.n	800cf00 <rint+0x70>
 800cf5a:	2e33      	cmp	r6, #51	; 0x33
 800cf5c:	dd07      	ble.n	800cf6e <rint+0xde>
 800cf5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf62:	d1cd      	bne.n	800cf00 <rint+0x70>
 800cf64:	ee10 2a10 	vmov	r2, s0
 800cf68:	f7f3 f958 	bl	800021c <__adddf3>
 800cf6c:	e7c8      	b.n	800cf00 <rint+0x70>
 800cf6e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800cf72:	f04f 32ff 	mov.w	r2, #4294967295
 800cf76:	40f2      	lsrs	r2, r6
 800cf78:	4210      	tst	r0, r2
 800cf7a:	d0c1      	beq.n	800cf00 <rint+0x70>
 800cf7c:	0852      	lsrs	r2, r2, #1
 800cf7e:	4210      	tst	r0, r2
 800cf80:	bf1f      	itttt	ne
 800cf82:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cf86:	ea20 0202 	bicne.w	r2, r0, r2
 800cf8a:	4134      	asrne	r4, r6
 800cf8c:	4314      	orrne	r4, r2
 800cf8e:	e7d1      	b.n	800cf34 <rint+0xa4>
 800cf90:	0800d1b8 	.word	0x0800d1b8
 800cf94:	000fffff 	.word	0x000fffff

0800cf98 <scalbn>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	ec55 4b10 	vmov	r4, r5, d0
 800cf9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	b9aa      	cbnz	r2, 800cfd4 <scalbn+0x3c>
 800cfa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cfac:	4323      	orrs	r3, r4
 800cfae:	d03b      	beq.n	800d028 <scalbn+0x90>
 800cfb0:	4b31      	ldr	r3, [pc, #196]	; (800d078 <scalbn+0xe0>)
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	ee10 0a10 	vmov	r0, s0
 800cfba:	f7f3 fae5 	bl	8000588 <__aeabi_dmul>
 800cfbe:	4b2f      	ldr	r3, [pc, #188]	; (800d07c <scalbn+0xe4>)
 800cfc0:	429e      	cmp	r6, r3
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	da12      	bge.n	800cfee <scalbn+0x56>
 800cfc8:	a327      	add	r3, pc, #156	; (adr r3, 800d068 <scalbn+0xd0>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 fadb 	bl	8000588 <__aeabi_dmul>
 800cfd2:	e009      	b.n	800cfe8 <scalbn+0x50>
 800cfd4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cfd8:	428a      	cmp	r2, r1
 800cfda:	d10c      	bne.n	800cff6 <scalbn+0x5e>
 800cfdc:	ee10 2a10 	vmov	r2, s0
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 f91a 	bl	800021c <__adddf3>
 800cfe8:	4604      	mov	r4, r0
 800cfea:	460d      	mov	r5, r1
 800cfec:	e01c      	b.n	800d028 <scalbn+0x90>
 800cfee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cff2:	460b      	mov	r3, r1
 800cff4:	3a36      	subs	r2, #54	; 0x36
 800cff6:	4432      	add	r2, r6
 800cff8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cffc:	428a      	cmp	r2, r1
 800cffe:	dd0b      	ble.n	800d018 <scalbn+0x80>
 800d000:	ec45 4b11 	vmov	d1, r4, r5
 800d004:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d070 <scalbn+0xd8>
 800d008:	f000 f83c 	bl	800d084 <copysign>
 800d00c:	a318      	add	r3, pc, #96	; (adr r3, 800d070 <scalbn+0xd8>)
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	ec51 0b10 	vmov	r0, r1, d0
 800d016:	e7da      	b.n	800cfce <scalbn+0x36>
 800d018:	2a00      	cmp	r2, #0
 800d01a:	dd08      	ble.n	800d02e <scalbn+0x96>
 800d01c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d020:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d024:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d028:	ec45 4b10 	vmov	d0, r4, r5
 800d02c:	bd70      	pop	{r4, r5, r6, pc}
 800d02e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d032:	da0d      	bge.n	800d050 <scalbn+0xb8>
 800d034:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d038:	429e      	cmp	r6, r3
 800d03a:	ec45 4b11 	vmov	d1, r4, r5
 800d03e:	dce1      	bgt.n	800d004 <scalbn+0x6c>
 800d040:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d068 <scalbn+0xd0>
 800d044:	f000 f81e 	bl	800d084 <copysign>
 800d048:	a307      	add	r3, pc, #28	; (adr r3, 800d068 <scalbn+0xd0>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	e7e0      	b.n	800d012 <scalbn+0x7a>
 800d050:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d054:	3236      	adds	r2, #54	; 0x36
 800d056:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d05a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d05e:	4620      	mov	r0, r4
 800d060:	4629      	mov	r1, r5
 800d062:	2200      	movs	r2, #0
 800d064:	4b06      	ldr	r3, [pc, #24]	; (800d080 <scalbn+0xe8>)
 800d066:	e7b2      	b.n	800cfce <scalbn+0x36>
 800d068:	c2f8f359 	.word	0xc2f8f359
 800d06c:	01a56e1f 	.word	0x01a56e1f
 800d070:	8800759c 	.word	0x8800759c
 800d074:	7e37e43c 	.word	0x7e37e43c
 800d078:	43500000 	.word	0x43500000
 800d07c:	ffff3cb0 	.word	0xffff3cb0
 800d080:	3c900000 	.word	0x3c900000

0800d084 <copysign>:
 800d084:	ec51 0b10 	vmov	r0, r1, d0
 800d088:	ee11 0a90 	vmov	r0, s3
 800d08c:	ee10 2a10 	vmov	r2, s0
 800d090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d094:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d098:	ea41 0300 	orr.w	r3, r1, r0
 800d09c:	ec43 2b10 	vmov	d0, r2, r3
 800d0a0:	4770      	bx	lr
	...

0800d0a4 <_init>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	bf00      	nop
 800d0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0aa:	bc08      	pop	{r3}
 800d0ac:	469e      	mov	lr, r3
 800d0ae:	4770      	bx	lr

0800d0b0 <_fini>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr
