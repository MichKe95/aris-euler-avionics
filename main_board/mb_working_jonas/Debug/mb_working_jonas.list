
mb_working_jonas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dffc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800e1d0  0800e1d0  0001e1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2d8  0800e2d8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2d8  0800e2d8  0001e2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2e0  0800e2e0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2e0  0800e2e0  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2e4  0800e2e4  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c60  200001f4  0800e4dc  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20007e54  0800e4dc  00027e54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ee2  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ec2  00000000  00000000  00049106  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ab0  00000000  00000000  0004dfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001878  00000000  00000000  0004fa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007c9b  00000000  00000000  000512f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019b94  00000000  00000000  00058f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3222  00000000  00000000  00072b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074c8  00000000  00000000  00165dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e1b4 	.word	0x0800e1b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800e1b4 	.word	0x0800e1b4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0a8      	sub	sp, #160	; 0xa0
 8000ecc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 fdea 	bl	8002aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8bd 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 f985 	bl	80011e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eda:	f000 f945 	bl	8001168 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8000ede:	f008 f81d 	bl	8008f1c <osKernelInitialize>

  /* Create the mutex(es) */
  /* definition and creation of sb_1_mutex */
  const osMutexAttr_t sb_1_mutex_attributes = {
 8000ee2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <main+0x134>)
 8000ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000ef6:	4b42      	ldr	r3, [pc, #264]	; (8001000 <main+0x138>)
 8000ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000efc:	2350      	movs	r3, #80	; 0x50
 8000efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    .name = "sb_1_mutex",
    .cb_mem = &myMutex01ControlBlock,
    .cb_size = sizeof(myMutex01ControlBlock),
  };
  sb_1_mutexHandle = osMutexNew(&sb_1_mutex_attributes);
 8000f02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 f9ae 	bl	8009268 <osMutexNew>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <main+0x13c>)
 8000f10:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000f12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f16:	2224      	movs	r2, #36	; 0x24
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00b ffb7 	bl	800ce8e <memset>
 8000f20:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x140>)
 8000f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f2a:	2318      	movs	r3, #24
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f34:	461a      	mov	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	4834      	ldr	r0, [pc, #208]	; (800100c <main+0x144>)
 8000f3a:	f008 f889 	bl	8009050 <osThreadNew>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <main+0x148>)
 8000f42:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_state_est */
  const osThreadAttr_t task_state_est_attributes = {
 8000f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f48:	2224      	movs	r2, #36	; 0x24
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00b ff9e 	bl	800ce8e <memset>
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <main+0x14c>)
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f56:	4b30      	ldr	r3, [pc, #192]	; (8001018 <main+0x150>)
 8000f58:	653b      	str	r3, [r7, #80]	; 0x50
 8000f5a:	235c      	movs	r3, #92	; 0x5c
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <main+0x154>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f68:	2308      	movs	r3, #8
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60
    .stack_size = sizeof(task_sfBuffer),
    .cb_mem = &task_sfControlBlock,
    .cb_size = sizeof(task_sfControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8000f6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f70:	461a      	mov	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <main+0x158>)
 8000f76:	f008 f86b 	bl	8009050 <osThreadNew>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <main+0x15c>)
 8000f7e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_controller */
  const osThreadAttr_t task_controller_attributes = {
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00b ff80 	bl	800ce8e <memset>
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <main+0x160>)
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <main+0x164>)
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f96:	235c      	movs	r3, #92	; 0x5c
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <main+0x168>)
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    .stack_size = sizeof(task_controllerBuffer),
    .cb_mem = &task_controllerControlBlock,
    .cb_size = sizeof(task_controllerControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	461a      	mov	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4820      	ldr	r0, [pc, #128]	; (8001034 <main+0x16c>)
 8000fb2:	f008 f84d 	bl	8009050 <osThreadNew>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <main+0x170>)
 8000fba:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_sens_read */
  const osThreadAttr_t task_sens_read_attributes = {
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2224      	movs	r2, #36	; 0x24
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00b ff63 	bl	800ce8e <memset>
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <main+0x174>)
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <main+0x178>)
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	235c      	movs	r3, #92	; 0x5c
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <main+0x17c>)
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	2308      	movs	r3, #8
 8000fe0:	61bb      	str	r3, [r7, #24]
    .stack_size = sizeof(task_sensor_reaBuffer),
    .cb_mem = &task_sensor_reaControlBlock,
    .cb_size = sizeof(task_sensor_reaControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4817      	ldr	r0, [pc, #92]	; (8001048 <main+0x180>)
 8000fea:	f008 f831 	bl	8009050 <osThreadNew>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <main+0x184>)
 8000ff2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ff4:	f007 ffc6 	bl	8008f84 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <main+0x130>
 8000ffa:	bf00      	nop
 8000ffc:	0800e1d0 	.word	0x0800e1d0
 8001000:	20004b28 	.word	0x20004b28
 8001004:	20006524 	.word	0x20006524
 8001008:	0800e1dc 	.word	0x0800e1dc
 800100c:	0800122d 	.word	0x0800122d
 8001010:	20004b78 	.word	0x20004b78
 8001014:	0800e1e8 	.word	0x0800e1e8
 8001018:	200053a0 	.word	0x200053a0
 800101c:	20004b80 	.word	0x20004b80
 8001020:	08001879 	.word	0x08001879
 8001024:	20005380 	.word	0x20005380
 8001028:	0800e1f8 	.word	0x0800e1f8
 800102c:	20005bfc 	.word	0x20005bfc
 8001030:	20005d24 	.word	0x20005d24
 8001034:	08001521 	.word	0x08001521
 8001038:	20006528 	.word	0x20006528
 800103c:	0800e208 	.word	0x0800e208
 8001040:	20005cc8 	.word	0x20005cc8
 8001044:	200053fc 	.word	0x200053fc
 8001048:	0800181d 	.word	0x0800181d
 800104c:	20004b7c 	.word	0x20004b7c

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0b4      	sub	sp, #208	; 0xd0
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00b ff15 	bl	800ce8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2284      	movs	r2, #132	; 0x84
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f00b ff06 	bl	800ce8e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <SystemClock_Config+0x110>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a36      	ldr	r2, [pc, #216]	; (8001160 <SystemClock_Config+0x110>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <SystemClock_Config+0x110>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <SystemClock_Config+0x114>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a2:	4a30      	ldr	r2, [pc, #192]	; (8001164 <SystemClock_Config+0x114>)
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <SystemClock_Config+0x114>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010d8:	23a8      	movs	r3, #168	; 0xa8
 80010da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 f972 	bl	80043d8 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010fa:	f000 f8b3 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001120:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fbc6 	bl	80048b8 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001132:	f000 f897 	bl	8001264 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001136:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800113a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fdc8 	bl	8004cdc <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001152:	f000 f887 	bl	8001264 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	37d0      	adds	r7, #208	; 0xd0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_SPI1_Init+0x74>)
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <MX_SPI1_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_SPI1_Init+0x74>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x74>)
 8001182:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x74>)
 8001196:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800119a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_SPI1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x74>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_SPI1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0x74>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_SPI1_Init+0x74>)
 80011c8:	f004 f93e 	bl	8005448 <HAL_SPI_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 f847 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005c58 	.word	0x20005c58
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_GPIO_Init+0x44>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <MX_GPIO_Init+0x44>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_GPIO_Init+0x44>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_GPIO_Init+0x44>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <MX_GPIO_Init+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_GPIO_Init+0x44>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001234:	f00b f8b2 	bl	800c39c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f007 ffb3 	bl	80091a4 <osDelay>
 800123e:	e7fb      	b.n	8001238 <StartDefaultTask+0xc>

08001240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001252:	f001 fc35 	bl	8002ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210f      	movs	r1, #15
 80012ae:	f06f 0001 	mvn.w	r0, #1
 80012b2:	f001 fcff 	bl	8002cb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_SPI_MspInit+0x7c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d128      	bne.n	8001338 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x80>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_SPI_MspInit+0x80>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_SPI_MspInit+0x80>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_SPI_MspInit+0x80>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001316:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001328:	2305      	movs	r3, #5
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_SPI_MspInit+0x84>)
 8001334:	f001 fce8 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	2019      	movs	r0, #25
 8001362:	f001 fca7 	bl	8002cb4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001366:	2019      	movs	r0, #25
 8001368:	f001 fcc0 	bl	8002cec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_InitTick+0xa0>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <HAL_InitTick+0xa0>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6453      	str	r3, [r2, #68]	; 0x44
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_InitTick+0xa0>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001384:	f107 0210 	add.w	r2, r7, #16
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fc72 	bl	8004c78 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001394:	f003 fc5c 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 8001398:	4603      	mov	r3, r0
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <HAL_InitTick+0xa4>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	3b01      	subs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_InitTick+0xa8>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_InitTick+0xac>)
 80013b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_InitTick+0xa8>)
 80013b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_InitTick+0xa8>)
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_InitTick+0xa8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_InitTick+0xa8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <HAL_InitTick+0xa8>)
 80013ce:	f004 fd7d 	bl	8005ecc <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d104      	bne.n	80013e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <HAL_InitTick+0xa8>)
 80013da:	f004 fdad 	bl	8005f38 <HAL_TIM_Base_Start_IT>
 80013de:	4603      	mov	r3, r0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	2000652c 	.word	0x2000652c
 80013f8:	40010000 	.word	0x40010000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001436:	f004 fda9 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000652c 	.word	0x2000652c

08001444 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <OTG_FS_IRQHandler+0x10>)
 800144a:	f001 ff41 	bl	80032d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20007a4c 	.word	0x20007a4c

08001458 <_sbrk>:
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x50>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x16>
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <_sbrk+0x50>)
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <_sbrk+0x54>)
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <_sbrk+0x50>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <_sbrk+0x50>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	466a      	mov	r2, sp
 800147e:	4293      	cmp	r3, r2
 8001480:	d907      	bls.n	8001492 <_sbrk+0x3a>
 8001482:	f00b fcbf 	bl	800ce04 <__errno>
 8001486:	4602      	mov	r2, r0
 8001488:	230c      	movs	r3, #12
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e006      	b.n	80014a0 <_sbrk+0x48>
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <_sbrk+0x50>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <_sbrk+0x50>)
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000210 	.word	0x20000210
 80014ac:	20007e58 	.word	0x20007e58

080014b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <SystemInit+0x5c>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <SystemInit+0x5c>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x60>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <SystemInit+0x60>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <SystemInit+0x60>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <SystemInit+0x60>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <SystemInit+0x60>)
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <SystemInit+0x64>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <SystemInit+0x60>)
 80014e4:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <SystemInit+0x68>)
 80014e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <SystemInit+0x60>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <SystemInit+0x60>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x60>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SystemInit+0x5c>)
 80014fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001500:	609a      	str	r2, [r3, #8]
#endif
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	40023800 	.word	0x40023800
 8001514:	fef6ffff 	.word	0xfef6ffff
 8001518:	24003010 	.word	0x24003010
 800151c:	00000000 	.word	0x00000000

08001520 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001526:	af00      	add	r7, sp, #0
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001536:	461a      	mov	r2, r3
 8001538:	2100      	movs	r1, #0
 800153a:	f00b fca8 	bl	800ce8e <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	461a      	mov	r2, r3
 8001554:	2300      	movs	r3, #0
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	6053      	str	r3, [r2, #4]
 800155a:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800158c:	f007 fd2e 	bl	8008fec <osKernelGetTickCount>
 8001590:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8001594:	f007 fd52 	bl	800903c <osKernelGetTickFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <vTaskController+0x1d8>)
 800159c:	fba3 2302 	umull	r2, r3, r3, r2
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80015a6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80015aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015ae:	4413      	add	r3, r2
 80015b0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 80015b4:	f107 021c 	add.w	r2, r7, #28
 80015b8:	f107 0110 	add.w	r1, r7, #16
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4618      	mov	r0, r3
 80015c2:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 80015c6:	f000 f899 	bl	80016fc <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb1 7a67 	vneg.f32	s14, s15
 80015ea:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80015fa:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	edd3 6a02 	vldr	s13, [r3, #8]
 800160e:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8001612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 800161a:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8001626:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800162a:	f7fe ff55 	bl	80004d8 <__aeabi_f2d>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	ed9f 1b29 	vldr	d1, [pc, #164]	; 80016d8 <vTaskController+0x1b8>
 8001636:	ec44 3b10 	vmov	d0, r3, r4
 800163a:	f00b fd12 	bl	800d062 <fmin>
 800163e:	eeb0 7a40 	vmov.f32	s14, s0
 8001642:	eef0 7a60 	vmov.f32	s15, s1
 8001646:	eeb0 1a47 	vmov.f32	s2, s14
 800164a:	eef0 1a67 	vmov.f32	s3, s15
 800164e:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80016e0 <vTaskController+0x1c0>
 8001652:	f00b fcdf 	bl	800d014 <fmax>
 8001656:	ec54 3b10 	vmov	r3, r4, d0
 800165a:	4618      	mov	r0, r3
 800165c:	4621      	mov	r1, r4
 800165e:	f7ff fa63 	bl	8000b28 <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 8001668:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001674:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167c:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	ee17 0a90 	vmov	r0, s15
 8001688:	f7fe ff26 	bl	80004d8 <__aeabi_f2d>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80016e8 <vTaskController+0x1c8>
 8001694:	ec44 3b10 	vmov	d0, r3, r4
 8001698:	f00b fce3 	bl	800d062 <fmin>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	eef0 7a60 	vmov.f32	s15, s1
 80016a4:	eeb0 1a47 	vmov.f32	s2, s14
 80016a8:	eef0 1a67 	vmov.f32	s3, s15
 80016ac:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80016f0 <vTaskController+0x1d0>
 80016b0:	f00b fcb0 	bl	800d014 <fmax>
 80016b4:	ec54 3b10 	vmov	r3, r4, d0
 80016b8:	4618      	mov	r0, r3
 80016ba:	4621      	mov	r1, r4
 80016bc:	f7ff fa34 	bl	8000b28 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 80016c6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80016ca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		/* Sleep */
		osDelayUntil(tick_count);
 80016ce:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80016d2:	f007 fd95 	bl	8009200 <osDelayUntil>
		tick_count += tick_update;
 80016d6:	e766      	b.n	80015a6 <vTaskController+0x86>
 80016d8:	00000000 	.word	0x00000000
 80016dc:	3ff00000 	.word	0x3ff00000
	...
 80016ec:	40240000 	.word	0x40240000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	c0240000 	.word	0xc0240000
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	ed87 0a03 	vstr	s0, [r7, #12]
 8001706:	60b8      	str	r0, [r7, #8]
 8001708:	6079      	str	r1, [r7, #4]
 800170a:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e07b      	b.n	800180e <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7fe fede 	bl	80004d8 <__aeabi_f2d>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f1c3 031d 	rsb	r3, r3, #29
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fec4 	bl	80004b4 <__aeabi_i2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ec43 2b11 	vmov	d1, r2, r3
 8001734:	ec45 4b10 	vmov	d0, r4, r5
 8001738:	f00b fce6 	bl	800d108 <pow>
 800173c:	ec54 3b10 	vmov	r3, r4, d0
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	f7ff f9d0 	bl	8000ae8 <__aeabi_d2uiz>
 8001748:	4603      	mov	r3, r0
 800174a:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	ed93 7a00 	vldr	s14, [r3]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	edd3 6a00 	vldr	s13, [r3]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3308      	adds	r3, #8
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	edd3 6a00 	vldr	s13, [r3]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3308      	adds	r3, #8
 80017d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d6:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	edd3 6a00 	vldr	s13, [r3]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b1d      	cmp	r3, #29
 8001812:	dd80      	ble.n	8001716 <CalcPolynomial+0x1a>
	}

}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}

0800181c <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001824:	f007 fbe2 	bl	8008fec <osKernelGetTickCount>
 8001828:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800182a:	f007 fc07 	bl	800903c <osKernelGetTickFreq>
 800182e:	4602      	mov	r2, r0
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <vTaskSensRead+0x4c>)
 8001832:	fba3 2302 	umull	r2, r3, r3, r2
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */
		if(osMutexAcquire(sb_1_mutexHandle, SB1_MUTEX_TIMEOUT) == osOK) {
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <vTaskSensRead+0x50>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	211e      	movs	r1, #30
 8001848:	4618      	mov	r0, r3
 800184a:	f007 fda7 	bl	800939c <osMutexAcquire>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <vTaskSensRead+0x44>
			HAL_SPI_Receive(&hspi1, (uint8_t*) &sb1_baro, sizeof(sb1_baro), SB1_SPI_TIMEOUT);
 8001854:	231e      	movs	r3, #30
 8001856:	220c      	movs	r2, #12
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <vTaskSensRead+0x54>)
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <vTaskSensRead+0x58>)
 800185c:	f003 fe86 	bl	800556c <HAL_SPI_Receive>
		}
		osDelayUntil(tick_count);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f007 fccd 	bl	8009200 <osDelayUntil>
		tick_count += tick_update;
 8001866:	e7e8      	b.n	800183a <vTaskSensRead+0x1e>
 8001868:	10624dd3 	.word	0x10624dd3
 800186c:	20006524 	.word	0x20006524
 8001870:	20005cbc 	.word	0x20005cbc
 8001874:	20005c58 	.word	0x20005c58

08001878 <vTaskStateEst>:
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]);

void vTaskStateEst(void *argument) {
 8001878:	b580      	push	{r7, lr}
 800187a:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 800187e:	af00      	add	r7, sp, #0
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Variables */
	/* Fixed Variables */
	float Ad[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001884:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001888:	2224      	movs	r2, #36	; 0x24
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f00b fafe 	bl	800ce8e <memset>
	float Ad_T[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001892:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f00b faf7 	bl	800ce8e <memset>
	float Bd[NUMBER_STATES][NUMBER_INPUTS] = { 0 };
 80018a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
	float Gd[NUMBER_STATES][NUMBER_NOISE] = { 0 };
 80018ac:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
	float Gd_T[NUMBER_NOISE][NUMBER_STATES] = { 0 };
 80018b8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
	float H[NUMBER_SENSOR][NUMBER_STATES] = { 0 };
 80018c4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80018c8:	4618      	mov	r0, r3
 80018ca:	2324      	movs	r3, #36	; 0x24
 80018cc:	461a      	mov	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	f00b fadd 	bl	800ce8e <memset>
	float H_T[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 80018d4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018d8:	4618      	mov	r0, r3
 80018da:	2324      	movs	r3, #36	; 0x24
 80018dc:	461a      	mov	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	f00b fad5 	bl	800ce8e <memset>
	float Q[NUMBER_NOISE][NUMBER_NOISE] = { 0 };
 80018e4:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
	float R[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80018ee:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80018f2:	4618      	mov	r0, r3
 80018f4:	2324      	movs	r3, #36	; 0x24
 80018f6:	461a      	mov	r2, r3
 80018f8:	2100      	movs	r1, #0
 80018fa:	f00b fac8 	bl	800ce8e <memset>
	float u[NUMBER_INPUTS] = { 0 };
 80018fe:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
	/* State Variables */
	float x_priori[NUMBER_STATES] = { 0 };
 8001908:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800190c:	461a      	mov	r2, r3
 800190e:	2300      	movs	r3, #0
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	6053      	str	r3, [r2, #4]
 8001914:	6093      	str	r3, [r2, #8]
	float x_est[NUMBER_STATES] = { 0 };
 8001916:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800191a:	461a      	mov	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	6053      	str	r3, [r2, #4]
 8001922:	6093      	str	r3, [r2, #8]
	float P_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001924:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001928:	4618      	mov	r0, r3
 800192a:	2324      	movs	r3, #36	; 0x24
 800192c:	461a      	mov	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	f00b faad 	bl	800ce8e <memset>
	float P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001934:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001938:	4618      	mov	r0, r3
 800193a:	2324      	movs	r3, #36	; 0x24
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	f00b faa5 	bl	800ce8e <memset>
	float State_Inovation[NUMBER_SENSOR] = { 0 };
 8001944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001948:	461a      	mov	r2, r3
 800194a:	2300      	movs	r3, #0
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	6053      	str	r3, [r2, #4]
 8001950:	6093      	str	r3, [r2, #8]
	float Cov_Inovation[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001952:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001956:	4618      	mov	r0, r3
 8001958:	2324      	movs	r3, #36	; 0x24
 800195a:	461a      	mov	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	f00b fa96 	bl	800ce8e <memset>
	float Cov_Inovation_Inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001962:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001966:	4618      	mov	r0, r3
 8001968:	2324      	movs	r3, #36	; 0x24
 800196a:	461a      	mov	r2, r3
 800196c:	2100      	movs	r1, #0
 800196e:	f00b fa8e 	bl	800ce8e <memset>
	float K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8001972:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001976:	4618      	mov	r0, r3
 8001978:	2324      	movs	r3, #36	; 0x24
 800197a:	461a      	mov	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	f00b fa86 	bl	800ce8e <memset>
	/* Placeholder Variables */
	float Placeholder_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8001982:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001986:	4618      	mov	r0, r3
 8001988:	2324      	movs	r3, #36	; 0x24
 800198a:	461a      	mov	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	f00b fa7e 	bl	800ce8e <memset>
	float Placeholder_est[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8001992:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001996:	4618      	mov	r0, r3
 8001998:	2324      	movs	r3, #36	; 0x24
 800199a:	461a      	mov	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f00b fa76 	bl	800ce8e <memset>
	float Placeholder_K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 80019a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a6:	4618      	mov	r0, r3
 80019a8:	2324      	movs	r3, #36	; 0x24
 80019aa:	461a      	mov	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f00b fa6e 	bl	800ce8e <memset>
	float Placeholder_P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4618      	mov	r0, r3
 80019b8:	2324      	movs	r3, #36	; 0x24
 80019ba:	461a      	mov	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	f00b fa66 	bl	800ce8e <memset>


	float measurements[NUMBER_SENSOR] = { 0 };
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	461a      	mov	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	6053      	str	r3, [r2, #4]
 80019ce:	6093      	str	r3, [r2, #8]

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80019d0:	f007 fb0c 	bl	8008fec <osKernelGetTickCount>
 80019d4:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 80019d8:	f007 fb30 	bl	800903c <osKernelGetTickFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4bd9      	ldr	r3, [pc, #868]	; (8001d44 <vTaskStateEst+0x4cc>)
 80019e0:	fba3 2302 	umull	r2, r3, r3, r2
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
	for (;;) {
		tick_count += tick_update;
 80019ea:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80019ee:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80019f2:	4413      	add	r3, r2
 80019f4:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4

		/* Prediction Step */
		/* Calculation of x_priori */
		memset(x_priori, 0, NUMBER_STATES*sizeof(x_priori[0]));
 80019f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80019fc:	220c      	movs	r2, #12
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00b fa44 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001a0c:	e071      	b.n	8001af2 <vTaskStateEst+0x27a>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001a14:	e02f      	b.n	8001a76 <vTaskStateEst+0x1fe>
				x_priori[j] += Ad[j][i] * x_est[i];
 8001a16:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001a1a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3ba0      	subs	r3, #160	; 0xa0
 8001a40:	edd3 6a00 	vldr	s13, [r3]
 8001a44:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001a48:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001a60:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 8001a6c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001a70:	3301      	adds	r3, #1
 8001a72:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001a76:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	ddcb      	ble.n	8001a16 <vTaskStateEst+0x19e>
			}
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001a84:	e02c      	b.n	8001ae0 <vTaskStateEst+0x268>
				x_priori[j] += Bd[j][k] * u[k];
 8001a86:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001a8a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	ed93 7a00 	vldr	s14, [r3]
 8001a96:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8001a9a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3bd0      	subs	r3, #208	; 0xd0
 8001aaa:	edd3 6a00 	vldr	s13, [r3]
 8001aae:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001ab2:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001aca:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8001ad6:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001ada:	3301      	adds	r3, #1
 8001adc:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001ae0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	ddce      	ble.n	8001a86 <vTaskStateEst+0x20e>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001ae8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001aec:	3301      	adds	r3, #1
 8001aee:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001af2:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	dd89      	ble.n	8001a0e <vTaskStateEst+0x196>
			}
		}

		/* Calculation of P_priori */
		/* Ad * P_est_prior * Ad_T */
		memset(Placeholder_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_priori[0][0]));
 8001afa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001afe:	2224      	movs	r2, #36	; 0x24
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00b f9c3 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001b0e:	e05b      	b.n	8001bc8 <vTaskStateEst+0x350>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001b16:	e04e      	b.n	8001bb6 <vTaskStateEst+0x33e>
				for(int k = 0; k < NUMBER_STATES; k++){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001b1e:	e041      	b.n	8001ba4 <vTaskStateEst+0x32c>
					Placeholder_priori[j][i] +=  Ad[j][k] * P_est[k][i];
 8001b20:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001b24:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001b52:	4413      	add	r3, r2
 8001b54:	3ba0      	subs	r3, #160	; 0xa0
 8001b56:	edd3 6a00 	vldr	s13, [r3]
 8001b5a:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001b5e:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001b82:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001b9a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001ba4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	ddb9      	ble.n	8001b20 <vTaskStateEst+0x2a8>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001bac:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001bb6:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	ddac      	ble.n	8001b18 <vTaskStateEst+0x2a0>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001bbe:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001bc8:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	dd9f      	ble.n	8001b10 <vTaskStateEst+0x298>
				}
			}
		}
		memset(P_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(P_priori[0][0]));
 8001bd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bd4:	2224      	movs	r2, #36	; 0x24
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00b f958 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001be4:	e05b      	b.n	8001c9e <vTaskStateEst+0x426>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8001bec:	e04e      	b.n	8001c8c <vTaskStateEst+0x414>
				for(int k = 0; k < NUMBER_STATES; k++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001bf4:	e041      	b.n	8001c7a <vTaskStateEst+0x402>
					P_priori[j][i] +=  Placeholder_priori[j][k] * Ad_T[k][i];
 8001bf6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001bfa:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001c16:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	edd3 6a00 	vldr	s13, [r3]
 8001c2e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001c44:	4413      	add	r3, r2
 8001c46:	3bc4      	subs	r3, #196	; 0xc4
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c54:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001c58:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001c70:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001c74:	3301      	adds	r3, #1
 8001c76:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001c7a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	ddb9      	ble.n	8001bf6 <vTaskStateEst+0x37e>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001c82:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001c86:	3301      	adds	r3, #1
 8001c88:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8001c8c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	ddac      	ble.n	8001bee <vTaskStateEst+0x376>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001c94:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8001c9e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	dd9f      	ble.n	8001be6 <vTaskStateEst+0x36e>
		/* If Q is dimension 1, very easy -> do later */

		/* Update Step */
		/* state_inov = measurement - H * x_priori */
		/* H*P_priori */
		memset(State_Inovation, 0, NUMBER_SENSOR*sizeof(State_Inovation[0]));
 8001ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001caa:	220c      	movs	r2, #12
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00b f8ed 	bl	800ce8e <memset>
		memset(Placeholder_est, 0, NUMBER_SENSOR*NUMBER_STATES*sizeof(Placeholder_est[0][0]));
 8001cb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cb8:	2224      	movs	r2, #36	; 0x24
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00b f8e6 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8001cc8:	e094      	b.n	8001df4 <vTaskStateEst+0x57c>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8001cd0:	e086      	b.n	8001de0 <vTaskStateEst+0x568>
				State_Inovation[j] += measurements[j] - H[j][i]*x_priori[i];
 8001cd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001cd6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	f107 0208 	add.w	r2, r7, #8
 8001ce6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	edd3 6a00 	vldr	s13, [r3]
 8001cf2:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8001cf6:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	ed93 6a00 	vldr	s12, [r3]
 8001d0e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001d12:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d2e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8001d40:	e045      	b.n	8001dce <vTaskStateEst+0x556>
 8001d42:	bf00      	nop
 8001d44:	10624dd3 	.word	0x10624dd3
 8001d48:	3dcccccd 	.word	0x3dcccccd
					Placeholder_est[j][i] += H[j][k] * P_priori[k][i];
 8001d4c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001d50:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8001d6c:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	edd3 6a00 	vldr	s13, [r3]
 8001d84:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001d88:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001dac:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001dc4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8001dce:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	ddba      	ble.n	8001d4c <vTaskStateEst+0x4d4>
			for(int i = 0; i < NUMBER_STATES; i++){
 8001dd6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8001de0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	f77f af74 	ble.w	8001cd2 <vTaskStateEst+0x45a>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8001dea:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001dee:	3301      	adds	r3, #1
 8001df0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8001df4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	f77f af66 	ble.w	8001cca <vTaskStateEst+0x452>
		}

		/* CHECK AGAIN STARTING HERE */

		/* S = H*P*H_T + R */
		memset(Cov_Inovation, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(Cov_Inovation[0][0]));
 8001dfe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e02:	2224      	movs	r2, #36	; 0x24
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00b f841 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8001e12:	e086      	b.n	8001f22 <vTaskStateEst+0x6aa>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8001e1a:	e079      	b.n	8001f10 <vTaskStateEst+0x698>
				for(int k = 0; k < NUMBER_STATES; k++){
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8001e22:	e040      	b.n	8001ea6 <vTaskStateEst+0x62e>
					Cov_Inovation[j][i] += Placeholder_est[j][k] * H_T[k][i];
 8001e24:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001e28:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001e44:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	edd3 6a00 	vldr	s13, [r3]
 8001e5c:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8001e60:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e80:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001e84:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001e9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8001ea6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	ddba      	ble.n	8001e24 <vTaskStateEst+0x5ac>
				}
				Cov_Inovation[j][i] += R[j][i];
 8001eae:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001eb2:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	ed93 7a00 	vldr	s14, [r3]
 8001eca:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001ece:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eea:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001eee:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8001f06:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8001f10:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	dd81      	ble.n	8001e1c <vTaskStateEst+0x5a4>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8001f18:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8001f22:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	f77f af74 	ble.w	8001e14 <vTaskStateEst+0x59c>
			}
		}

		/* Calculate Pseudoinverse of Cov_Inovation */
		pinv(LAMBDA, Cov_Inovation, Cov_Inovation_Inv);
 8001f2c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001f30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 8001d48 <vTaskStateEst+0x4d0>
 8001f3c:	f000 fa24 	bl	8002388 <pinv>

		/* K  = P_priori * H_T * Cov_Inovation_Inv */
		memset(Placeholder_K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(Placeholder_K[0][0]));
 8001f40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f44:	2224      	movs	r2, #36	; 0x24
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00a ffa0 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8001f54:	e05a      	b.n	800200c <vTaskStateEst+0x794>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001f5c:	e04d      	b.n	8001ffa <vTaskStateEst+0x782>
				for(int k = 0; k < NUMBER_STATES; k++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001f64:	e040      	b.n	8001fe8 <vTaskStateEst+0x770>
					Placeholder_K[j][i] += P_priori[j][k] * H_T[k][i];
 8001f66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f6a:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001f86:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	edd3 6a00 	vldr	s13, [r3]
 8001f9e:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8001fa2:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001fc6:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8001fde:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001fe8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	ddba      	ble.n	8001f66 <vTaskStateEst+0x6ee>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8001ff0:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001ffa:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	ddad      	ble.n	8001f5e <vTaskStateEst+0x6e6>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002002:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002006:	3301      	adds	r3, #1
 8002008:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800200c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002010:	2b02      	cmp	r3, #2
 8002012:	dda0      	ble.n	8001f56 <vTaskStateEst+0x6de>
				}
			}
		}
		memset(K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(K[0][0]));
 8002014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002018:	2224      	movs	r2, #36	; 0x24
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00a ff36 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002028:	e05a      	b.n	80020e0 <vTaskStateEst+0x868>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002030:	e04d      	b.n	80020ce <vTaskStateEst+0x856>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002038:	e040      	b.n	80020bc <vTaskStateEst+0x844>
					K[j][i] += Placeholder_K[j][k] * Cov_Inovation_Inv[k][i];
 800203a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800203e:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800205a:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	edd3 6a00 	vldr	s13, [r3]
 8002072:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002076:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002096:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800209a:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 80020b2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80020b6:	3301      	adds	r3, #1
 80020b8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80020bc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	ddba      	ble.n	800203a <vTaskStateEst+0x7c2>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80020c4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80020c8:	3301      	adds	r3, #1
 80020ca:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80020ce:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	ddad      	ble.n	8002032 <vTaskStateEst+0x7ba>
		for(int j = 0; j < NUMBER_STATES; j++){
 80020d6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80020da:	3301      	adds	r3, #1
 80020dc:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80020e0:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	dda0      	ble.n	800202a <vTaskStateEst+0x7b2>
				}
			}
		}

		/* x_est = x_priori + K*measurements */
		memset(x_est, 0, NUMBER_STATES*sizeof(x_est[0]));
 80020e8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80020ec:	220c      	movs	r2, #12
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00a fecc 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80020fc:	e045      	b.n	800218a <vTaskStateEst+0x912>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002104:	e038      	b.n	8002178 <vTaskStateEst+0x900>
				x_est[j] += x_priori[j] + K[j][i]*State_Inovation[i];
 8002106:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800210a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800211a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	edd3 6a00 	vldr	s13, [r3]
 8002126:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800212a:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	ed93 6a00 	vldr	s12, [r3]
 8002142:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002146:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002162:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 800216e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002172:	3301      	adds	r3, #1
 8002174:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002178:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800217c:	2b02      	cmp	r3, #2
 800217e:	ddc2      	ble.n	8002106 <vTaskStateEst+0x88e>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002180:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002184:	3301      	adds	r3, #1
 8002186:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800218a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800218e:	2b02      	cmp	r3, #2
 8002190:	ddb5      	ble.n	80020fe <vTaskStateEst+0x886>
			}
		}


		/* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
		memset(Placeholder_P_est, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_P_est[0][0]));
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f00a fe77 	bl	800ce8e <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80021a6:	e080      	b.n	80022aa <vTaskStateEst+0xa32>
			for(int i = 0; i < NUMBER_STATES; i++){
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80021ae:	e073      	b.n	8002298 <vTaskStateEst+0xa20>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80021b6:	e040      	b.n	800223a <vTaskStateEst+0x9c2>
					Placeholder_P_est[j][i] -= K[j][k] * H[k][i];
 80021b8:	f107 0114 	add.w	r1, r7, #20
 80021bc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	ed93 7a00 	vldr	s14, [r3]
 80021d4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80021d8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	edd3 6a00 	vldr	s13, [r3]
 80021f0:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80021f4:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002214:	f107 0114 	add.w	r1, r7, #20
 8002218:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002230:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002234:	3301      	adds	r3, #1
 8002236:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800223a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800223e:	2b02      	cmp	r3, #2
 8002240:	ddba      	ble.n	80021b8 <vTaskStateEst+0x940>
				}
				if(j == i){
 8002242:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002246:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800224a:	429a      	cmp	r2, r3
 800224c:	d11f      	bne.n	800228e <vTaskStateEst+0xa16>
					Placeholder_P_est[j][i] += 1;
 800224e:	f107 0114 	add.w	r1, r7, #20
 8002252:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800226e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002272:	f107 0114 	add.w	r1, r7, #20
 8002276:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 800228e:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002292:	3301      	adds	r3, #1
 8002294:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002298:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800229c:	2b02      	cmp	r3, #2
 800229e:	dd87      	ble.n	80021b0 <vTaskStateEst+0x938>
		for(int j = 0; j < NUMBER_STATES; j++){
 80022a0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80022aa:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	f77f af7a 	ble.w	80021a8 <vTaskStateEst+0x930>
				}
			}
		}
		for(int j = 0; j < NUMBER_STATES; j++){
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80022ba:	e05a      	b.n	8002372 <vTaskStateEst+0xafa>
			for(int i = 0; i < NUMBER_STATES; i++){
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80022c2:	e04d      	b.n	8002360 <vTaskStateEst+0xae8>
				for(int k = 0; k < NUMBER_STATES; k++){
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80022ca:	e040      	b.n	800234e <vTaskStateEst+0xad6>
					P_est[j][i] += Placeholder_P_est[j][k] * P_priori[k][i];
 80022cc:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80022d0:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	ed93 7a00 	vldr	s14, [r3]
 80022e8:	f107 0114 	add.w	r1, r7, #20
 80022ec:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	edd3 6a00 	vldr	s13, [r3]
 8002304:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002308:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002328:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800232c:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002344:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002348:	3301      	adds	r3, #1
 800234a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800234e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002352:	2b02      	cmp	r3, #2
 8002354:	ddba      	ble.n	80022cc <vTaskStateEst+0xa54>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002356:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800235a:	3301      	adds	r3, #1
 800235c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8002360:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8002364:	2b02      	cmp	r3, #2
 8002366:	ddad      	ble.n	80022c4 <vTaskStateEst+0xa4c>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002368:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800236c:	3301      	adds	r3, #1
 800236e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8002372:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8002376:	2b02      	cmp	r3, #2
 8002378:	dda0      	ble.n	80022bc <vTaskStateEst+0xa44>
		/* OUTPUT IS x_est */




		osDelayUntil(tick_count);
 800237a:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 800237e:	f006 ff3f 	bl	8009200 <osDelayUntil>
		tick_count += tick_update;
 8002382:	f7ff bb32 	b.w	80019ea <vTaskStateEst+0x172>
 8002386:	bf00      	nop

08002388 <pinv>:
	Gd = G_init;


}

void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]){
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a6      	sub	sp, #152	; 0x98
 800238c:	af00      	add	r7, sp, #0
 800238e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002392:	60b8      	str	r0, [r7, #8]
 8002394:	6079      	str	r1, [r7, #4]

	/* More Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8002396:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800239a:	2224      	movs	r2, #36	; 0x24
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f00a fd75 	bl	800ce8e <memset>
	float Matrix_to_inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80023a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a8:	2224      	movs	r2, #36	; 0x24
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f00a fd6e 	bl	800ce8e <memset>
	float First_Inverse[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f00a fd67 	bl	800ce8e <memset>


	for(int j = 0; j < NUMBER_SENSOR; j++){
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80023c6:	e08b      	b.n	80024e0 <pinv+0x158>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ce:	e07d      	b.n	80024cc <pinv+0x144>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023d6:	e070      	b.n	80024ba <pinv+0x132>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 80023d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80023ee:	4413      	add	r3, r2
 80023f0:	3b60      	subs	r3, #96	; 0x60
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	441a      	add	r2, r3
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	edd3 6a00 	vldr	s13, [r3]
 8002414:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800242a:	4413      	add	r3, r2
 800242c:	3b3c      	subs	r3, #60	; 0x3c
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002450:	4413      	add	r3, r2
 8002452:	3b60      	subs	r3, #96	; 0x60
 8002454:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 8002458:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800245c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002460:	429a      	cmp	r2, r3
 8002462:	d125      	bne.n	80024b0 <pinv+0x128>
					Matrix_to_inv[j][i] += lambda * lambda;
 8002464:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800247a:	4413      	add	r3, r2
 800247c:	3b60      	subs	r3, #96	; 0x60
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	edd7 6a03 	vldr	s13, [r7, #12]
 8002486:	edd7 7a03 	vldr	s15, [r7, #12]
 800248a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80024a8:	4413      	add	r3, r2
 80024aa:	3b60      	subs	r3, #96	; 0x60
 80024ac:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 80024b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b4:	3301      	adds	r3, #1
 80024b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024be:	2b02      	cmp	r3, #2
 80024c0:	dd8a      	ble.n	80023d8 <pinv+0x50>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80024c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	f77f af7d 	ble.w	80023d0 <pinv+0x48>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80024d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024da:	3301      	adds	r3, #1
 80024dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	f77f af6f 	ble.w	80023c8 <pinv+0x40>
				}
			}
		}
	}

	cofactor(Matrix_to_inv, First_Inverse, NUMBER_SENSOR);
 80024ea:	f107 0214 	add.w	r2, r7, #20
 80024ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024f2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f93d 	bl	8002778 <cofactor>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002504:	e05e      	b.n	80025c4 <pinv+0x23c>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800250c:	e051      	b.n	80025b2 <pinv+0x22a>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002514:	e044      	b.n	80025a0 <pinv+0x218>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 8002516:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	461a      	mov	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	441a      	add	r2, r3
 8002528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800254a:	4413      	add	r3, r2
 800254c:	3b3c      	subs	r3, #60	; 0x3c
 800254e:	edd3 6a00 	vldr	s13, [r3]
 8002552:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002568:	4413      	add	r3, r2
 800256a:	3b84      	subs	r3, #132	; 0x84
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002574:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	441a      	add	r2, r3
 8002586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 8002596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259a:	3301      	adds	r3, #1
 800259c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	ddb6      	ble.n	8002516 <pinv+0x18e>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 80025a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ac:	3301      	adds	r3, #1
 80025ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	dda9      	ble.n	800250e <pinv+0x186>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 80025ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025be:	3301      	adds	r3, #1
 80025c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	dd9c      	ble.n	8002506 <pinv+0x17e>
			}
		}
	}


}
 80025cc:	bf00      	nop
 80025ce:	3798      	adds	r7, #152	; 0x98
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	ed2d 8b02 	vpush	{d8}
 80025da:	b092      	sub	sp, #72	; 0x48
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	ed87 0a00 	vstr	s0, [r7]
	float s = 1, det = 0, b[NUMBER_SENSOR][NUMBER_SENSOR];
 80025e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
	int i, j, m, n, c;
	if (size == 1)
 80025f0:	edd7 7a00 	vldr	s15, [r7]
 80025f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025f8:	eef4 7a47 	vcmp.f32	s15, s14
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d102      	bne.n	8002608 <determinant+0x34>
	{
		return (a[0][0]);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e0ab      	b.n	8002760 <determinant+0x18c>
	}
	else
	{
		det = 0;
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	643b      	str	r3, [r7, #64]	; 0x40
		for (c = 0; c < size; c++)
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	e097      	b.n	8002744 <determinant+0x170>
		{
			m = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
			n = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
			for (i = 0;i < size; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002620:	e05a      	b.n	80026d8 <determinant+0x104>
			{
				for (j = 0 ;j < size; j++)
 8002622:	2300      	movs	r3, #0
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
 8002626:	e048      	b.n	80026ba <determinant+0xe6>
				{
					b[i][j] = 0;
 8002628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800263a:	4413      	add	r3, r2
 800263c:	3b40      	subs	r3, #64	; 0x40
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d034      	beq.n	80026b4 <determinant+0xe0>
 800264a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	429a      	cmp	r2, r3
 8002650:	d030      	beq.n	80026b4 <determinant+0xe0>
					{
						b[m][n] = a[i][j];
 8002652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	441a      	add	r2, r3
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800267c:	4413      	add	r3, r2
 800267e:	3b40      	subs	r3, #64	; 0x40
 8002680:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800268c:	edd7 7a00 	vldr	s15, [r7]
 8002690:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002694:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d503      	bpl.n	80026aa <determinant+0xd6>
							n++;
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	3301      	adds	r3, #1
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
 80026a8:	e004      	b.n	80026b4 <determinant+0xe0>
						else
						{
							n = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
							m++;
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	3301      	adds	r3, #1
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
				for (j = 0 ;j < size; j++)
 80026b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b6:	3301      	adds	r3, #1
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c4:	ed97 7a00 	vldr	s14, [r7]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	dcaa      	bgt.n	8002628 <determinant+0x54>
			for (i = 0;i < size; i++)
 80026d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d4:	3301      	adds	r3, #1
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e2:	ed97 7a00 	vldr	s14, [r7]
 80026e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	dc98      	bgt.n	8002622 <determinant+0x4e>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, size - 1));
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	ed93 8a00 	vldr	s16, [r3]
 80026fc:	edd7 7a00 	vldr	s15, [r7]
 8002700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5f 	bl	80025d4 <determinant>
 8002716:	eef0 7a40 	vmov.f32	s15, s0
 800271a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800271e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800272a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			s = -1 * s;
 8002732:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002736:	eef1 7a67 	vneg.f32	s15, s15
 800273a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		for (c = 0; c < size; c++)
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	3301      	adds	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274e:	ed97 7a00 	vldr	s14, [r7]
 8002752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	f73f af5b 	bgt.w	8002614 <determinant+0x40>
		}
	}

	return (det);
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	ee07 3a90 	vmov	s15, r3
}
 8002764:	eeb0 0a67 	vmov.f32	s0, s15
 8002768:	3748      	adds	r7, #72	; 0x48
 800276a:	46bd      	mov	sp, r7
 800276c:	ecbd 8b02 	vpop	{d8}
 8002770:	bd80      	pop	{r7, pc}
 8002772:	0000      	movs	r0, r0
 8002774:	0000      	movs	r0, r0
	...

08002778 <cofactor>:

void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8002778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277a:	b09d      	sub	sp, #116	; 0x74
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	ed87 0a01 	vstr	s0, [r7, #4]
	float b[NUMBER_SENSOR][NUMBER_SENSOR], fac[NUMBER_SENSOR][NUMBER_SENSOR];
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 8002786:	2300      	movs	r3, #0
 8002788:	66bb      	str	r3, [r7, #104]	; 0x68
 800278a:	e0b3      	b.n	80028f4 <cofactor+0x17c>
	{
		for (p = 0;p < size; p++)
 800278c:	2300      	movs	r3, #0
 800278e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002790:	e0a0      	b.n	80028d4 <cofactor+0x15c>
		{
			m = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	667b      	str	r3, [r7, #100]	; 0x64
			n = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	663b      	str	r3, [r7, #96]	; 0x60
			for (i = 0;i < size; i++)
 800279a:	2300      	movs	r3, #0
 800279c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279e:	e04d      	b.n	800283c <cofactor+0xc4>
			{
				for (j = 0;j < size; j++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80027a4:	e03b      	b.n	800281e <cofactor+0xa6>
				{
					if (i != q && j != p)
 80027a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d034      	beq.n	8002818 <cofactor+0xa0>
 80027ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d030      	beq.n	8002818 <cofactor+0xa0>
					{
						b[m][n] = num[i][j];
 80027b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	441a      	add	r2, r3
 80027c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80027e0:	4413      	add	r3, r2
 80027e2:	3b3c      	subs	r3, #60	; 0x3c
 80027e4:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 80027e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	d503      	bpl.n	800280e <cofactor+0x96>
							n++;
 8002806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002808:	3301      	adds	r3, #1
 800280a:	663b      	str	r3, [r7, #96]	; 0x60
 800280c:	e004      	b.n	8002818 <cofactor+0xa0>
						else
						{
							n = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	663b      	str	r3, [r7, #96]	; 0x60
							m++;
 8002812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002814:	3301      	adds	r3, #1
 8002816:	667b      	str	r3, [r7, #100]	; 0x64
				for (j = 0;j < size; j++)
 8002818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281a:	3301      	adds	r3, #1
 800281c:	65bb      	str	r3, [r7, #88]	; 0x58
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002828:	ed97 7a01 	vldr	s14, [r7, #4]
 800282c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	dcb7      	bgt.n	80027a6 <cofactor+0x2e>
			for (i = 0;i < size; i++)
 8002836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002838:	3301      	adds	r3, #1
 800283a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800283c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002846:	ed97 7a01 	vldr	s14, [r7, #4]
 800284a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	dca5      	bgt.n	80027a0 <cofactor+0x28>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, size - 1);
 8002854:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	4413      	add	r3, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fe2a 	bl	80004b4 <__aeabi_i2d>
 8002860:	4603      	mov	r3, r0
 8002862:	460c      	mov	r4, r1
 8002864:	ec44 3b11 	vmov	d1, r3, r4
 8002868:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8002928 <cofactor+0x1b0>
 800286c:	f00a fc4c 	bl	800d108 <pow>
 8002870:	ec56 5b10 	vmov	r5, r6, d0
 8002874:	edd7 7a01 	vldr	s15, [r7, #4]
 8002878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800287c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002880:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002884:	eeb0 0a67 	vmov.f32	s0, s15
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fea3 	bl	80025d4 <determinant>
 800288e:	ee10 3a10 	vmov	r3, s0
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe20 	bl	80004d8 <__aeabi_f2d>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	461a      	mov	r2, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	4628      	mov	r0, r5
 80028a2:	4631      	mov	r1, r6
 80028a4:	f7fd fe70 	bl	8000588 <__aeabi_dmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	4618      	mov	r0, r3
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fe f93a 	bl	8000b28 <__aeabi_d2f>
 80028b4:	4601      	mov	r1, r0
 80028b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80028c8:	4413      	add	r3, r2
 80028ca:	3b60      	subs	r3, #96	; 0x60
 80028cc:	6019      	str	r1, [r3, #0]
		for (p = 0;p < size; p++)
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	3301      	adds	r3, #1
 80028d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028de:	ed97 7a01 	vldr	s14, [r7, #4]
 80028e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	f73f af52 	bgt.w	8002792 <cofactor+0x1a>
	for (q = 0;q < size; q++)
 80028ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f0:	3301      	adds	r3, #1
 80028f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	f73f af3f 	bgt.w	800278c <cofactor+0x14>
		}
	}
	transpose(inverse, num, fac, size);
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	ed97 0a01 	vldr	s0, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f000 f808 	bl	8002930 <transpose>
}
 8002920:	bf00      	nop
 8002922:	3774      	adds	r7, #116	; 0x74
 8002924:	46bd      	mov	sp, r7
 8002926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002928:	00000000 	.word	0x00000000
 800292c:	bff00000 	.word	0xbff00000

08002930 <transpose>:
/*Finding transpose of matrix*/
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	; 0x40
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	ed87 0a00 	vstr	s0, [r7]
	int i, j;
	float b[NUMBER_SENSOR][NUMBER_SENSOR], d;

	for (i = 0;i < size; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	e02c      	b.n	80029a0 <transpose+0x70>
	{
		for (j = 0;j < size; j++)
 8002946:	2300      	movs	r3, #0
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
 800294a:	e01a      	b.n	8002982 <transpose+0x52>
		{
			b[i][j] = fac[j][i];
 800294c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	441a      	add	r2, r3
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002976:	4413      	add	r3, r2
 8002978:	3b30      	subs	r3, #48	; 0x30
 800297a:	6019      	str	r1, [r3, #0]
		for (j = 0;j < size; j++)
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	3301      	adds	r3, #1
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298c:	ed97 7a00 	vldr	s14, [r7]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	dcd8      	bgt.n	800294c <transpose+0x1c>
	for (i = 0;i < size; i++)
 800299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299c:	3301      	adds	r3, #1
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029aa:	ed97 7a00 	vldr	s14, [r7]
 80029ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	dcc6      	bgt.n	8002946 <transpose+0x16>
		}
	}
	d = determinant(num, size);
 80029b8:	ed97 0a00 	vldr	s0, [r7]
 80029bc:	68b8      	ldr	r0, [r7, #8]
 80029be:	f7ff fe09 	bl	80025d4 <determinant>
 80029c2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	for (i = 0;i < size; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ca:	e032      	b.n	8002a32 <transpose+0x102>
	{
		for (j = 0;j < size; j++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d0:	e020      	b.n	8002a14 <transpose+0xe4>
		{
			inverse[i][j] = b[i][j] / d;
 80029d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80029e4:	4413      	add	r3, r2
 80029e6:	3b30      	subs	r3, #48	; 0x30
 80029e8:	edd3 6a00 	vldr	s13, [r3]
 80029ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	441a      	add	r2, r3
 80029fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	3301      	adds	r3, #1
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1e:	ed97 7a00 	vldr	s14, [r7]
 8002a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	dcd2      	bgt.n	80029d2 <transpose+0xa2>
	for (i = 0;i < size; i++)
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2e:	3301      	adds	r3, #1
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3c:	ed97 7a00 	vldr	s14, [r7]
 8002a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	dcc0      	bgt.n	80029cc <transpose+0x9c>
		}
	}
}
 8002a4a:	bf00      	nop
 8002a4c:	3740      	adds	r7, #64	; 0x40
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a5a:	e003      	b.n	8002a64 <LoopCopyDataInit>

08002a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a62:	3104      	adds	r1, #4

08002a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a64:	480b      	ldr	r0, [pc, #44]	; (8002a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a6c:	d3f6      	bcc.n	8002a5c <CopyDataInit>
  ldr  r2, =_sbss
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a70:	e002      	b.n	8002a78 <LoopFillZerobss>

08002a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a74:	f842 3b04 	str.w	r3, [r2], #4

08002a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a7c:	d3f9      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a7e:	f7fe fd17 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a82:	f00a f9c5 	bl	800ce10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a86:	f7fe fa1f 	bl	8000ec8 <main>
  bx  lr    
 8002a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a8c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a90:	0800e2e8 	.word	0x0800e2e8
  ldr  r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a98:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002a9c:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8002aa0:	20007e54 	.word	0x20007e54

08002aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC_IRQHandler>

08002aa6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f000 f8f7 	bl	8002c9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fe fc4b 	bl	800134c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002ab6:	f7fe fbdd 	bl	8001274 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x20>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x24>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_IncTick+0x24>)
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	2000656c 	.word	0x2000656c

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	2000656c 	.word	0x2000656c

08002b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff ffee 	bl	8002ae8 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d005      	beq.n	8002b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_Delay+0x40>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b26:	bf00      	nop
 8002b28:	f7ff ffde 	bl	8002ae8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d8f7      	bhi.n	8002b28 <HAL_Delay+0x28>
  {
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000004 	.word	0x20000004

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <__NVIC_SetPriorityGrouping+0x40>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <__NVIC_SetPriorityGrouping+0x40>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00
 8002b88:	05fa0000 	.word	0x05fa0000

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	; (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff4c 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc6:	f7ff ff61 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002cca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f7ff ffb1 	bl	8002c38 <NVIC_EncodePriority>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff80 	bl	8002be4 <__NVIC_SetPriority>
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff54 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e175      	b.n	8003014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	f040 8164 	bne.w	800300e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x4e>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	d123      	bne.n	8002d9e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	69b9      	ldr	r1, [r7, #24]
 8002d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0203 	and.w	r2, r3, #3
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d00b      	beq.n	8002df2 <HAL_GPIO_Init+0xea>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de6:	2b11      	cmp	r3, #17
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b12      	cmp	r3, #18
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80be 	beq.w	800300e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b65      	ldr	r3, [pc, #404]	; (8003028 <HAL_GPIO_Init+0x320>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a64      	ldr	r2, [pc, #400]	; (8003028 <HAL_GPIO_Init+0x320>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_GPIO_Init+0x320>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eaa:	4a60      	ldr	r2, [pc, #384]	; (800302c <HAL_GPIO_Init+0x324>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a57      	ldr	r2, [pc, #348]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d037      	beq.n	8002f46 <HAL_GPIO_Init+0x23e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a56      	ldr	r2, [pc, #344]	; (8003034 <HAL_GPIO_Init+0x32c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_GPIO_Init+0x23a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a55      	ldr	r2, [pc, #340]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <HAL_GPIO_Init+0x236>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a54      	ldr	r2, [pc, #336]	; (800303c <HAL_GPIO_Init+0x334>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d025      	beq.n	8002f3a <HAL_GPIO_Init+0x232>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a53      	ldr	r2, [pc, #332]	; (8003040 <HAL_GPIO_Init+0x338>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_GPIO_Init+0x22e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_GPIO_Init+0x33c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x22a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a51      	ldr	r2, [pc, #324]	; (8003048 <HAL_GPIO_Init+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a50      	ldr	r2, [pc, #320]	; (800304c <HAL_GPIO_Init+0x344>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4f      	ldr	r2, [pc, #316]	; (8003050 <HAL_GPIO_Init+0x348>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4e      	ldr	r2, [pc, #312]	; (8003054 <HAL_GPIO_Init+0x34c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x21a>
 8002f1e:	2309      	movs	r3, #9
 8002f20:	e012      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f22:	230a      	movs	r3, #10
 8002f24:	e010      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00e      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00c      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00a      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f32:	2305      	movs	r3, #5
 8002f34:	e008      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e004      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x240>
 8002f46:	2300      	movs	r3, #0
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f002 0203 	and.w	r2, r2, #3
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4093      	lsls	r3, r2
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f58:	4934      	ldr	r1, [pc, #208]	; (800302c <HAL_GPIO_Init+0x324>)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f66:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8a:	4a33      	ldr	r2, [pc, #204]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_GPIO_Init+0x350>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	f67f ae86 	bls.w	8002d28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800301c:	bf00      	nop
 800301e:	3724      	adds	r7, #36	; 0x24
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40021c00 	.word	0x40021c00
 8003050:	40022000 	.word	0x40022000
 8003054:	40022400 	.word	0x40022400
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800305c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305e:	b08f      	sub	sp, #60	; 0x3c
 8003060:	af0a      	add	r7, sp, #40	; 0x28
 8003062:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e10a      	b.n	8003284 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f009 fb68 	bl	800c758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f003 fa8a 	bl	80065ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	687e      	ldr	r6, [r7, #4]
 80030a2:	466d      	mov	r5, sp
 80030a4:	f106 0410 	add.w	r4, r6, #16
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b8:	1d33      	adds	r3, r6, #4
 80030ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f003 f96b 	bl	8006398 <USB_CoreInit>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d7      	b.n	8003284 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fa78 	bl	80065d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e04a      	b.n	800317c <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	333d      	adds	r3, #61	; 0x3d
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	333c      	adds	r3, #60	; 0x3c
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	b298      	uxth	r0, r3
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3342      	adds	r3, #66	; 0x42
 8003122:	4602      	mov	r2, r0
 8003124:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	333f      	adds	r3, #63	; 0x3f
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	3344      	adds	r3, #68	; 0x44
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3348      	adds	r3, #72	; 0x48
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3350      	adds	r3, #80	; 0x50
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	3301      	adds	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d3af      	bcc.n	80030e6 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e044      	b.n	8003216 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	3301      	adds	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d3b5      	bcc.n	800318c <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	687e      	ldr	r6, [r7, #4]
 8003228:	466d      	mov	r5, sp
 800322a:	f106 0410 	add.w	r4, r6, #16
 800322e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003236:	e894 0003 	ldmia.w	r4, {r0, r1}
 800323a:	e885 0003 	stmia.w	r5, {r0, r1}
 800323e:	1d33      	adds	r3, r6, #4
 8003240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	f003 f9ee 	bl	8006624 <USB_DevInit>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e014      	b.n	8003284 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 f88c 	bl	8004390 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f004 f9ad 	bl	80075dc <USB_DevDisconnect>

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800328c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_Start+0x16>
 800329e:	2302      	movs	r3, #2
 80032a0:	e012      	b.n	80032c8 <HAL_PCD_Start+0x3c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 f97c 	bl	80075ac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 f967 	bl	800658c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b08d      	sub	sp, #52	; 0x34
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f004 fa21 	bl	8007732 <USB_GetMode>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 83bd 	bne.w	8003a72 <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 f985 	bl	800760c <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 83b3 	beq.w	8003a70 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 f97c 	bl	800760c <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d107      	bne.n	800332e <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 0202 	and.w	r2, r2, #2
 800332c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f004 f96a 	bl	800760c <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003342:	d17b      	bne.n	800343c <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 f970 	bl	8007632 <USB_ReadDevAllOutEpInterrupt>
 8003352:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003354:	e06f      	b.n	8003436 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d064      	beq.n	800342a <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f004 f995 	bl	800769a <USB_ReadDevOutEPInterrupt>
 8003370:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	461a      	mov	r2, r3
 800338a:	2301      	movs	r3, #1
 800338c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800338e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fe3d 	bl	8004010 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 ff3c 	bl	8004220 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	2308      	movs	r3, #8
 80033b8:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	461a      	mov	r2, r3
 80033d2:	2310      	movs	r3, #16
 80033d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033f2:	461a      	mov	r2, r3
 80033f4:	2101      	movs	r1, #1
 80033f6:	f004 f9e1 	bl	80077bc <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003406:	461a      	mov	r2, r3
 8003408:	2320      	movs	r3, #32
 800340a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003428:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	3301      	adds	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d18c      	bne.n	8003356 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f004 f8e3 	bl	800760c <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003450:	f040 80c4 	bne.w	80035dc <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 f904 	bl	8007666 <USB_ReadDevAllInEpInterrupt>
 800345e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003464:	e0b6      	b.n	80035d4 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80ab 	beq.w	80035c8 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f004 f92a 	bl	80076d6 <USB_ReadDevInEPInterrupt>
 8003482:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d05b      	beq.n	8003546 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2201      	movs	r2, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69f9      	ldr	r1, [r7, #28]
 80034aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ae:	4013      	ands	r3, r2
 80034b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d11b      	bne.n	8003504 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3348      	adds	r3, #72	; 0x48
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4403      	add	r3, r0
 80034ec:	3344      	adds	r3, #68	; 0x44
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4419      	add	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4403      	add	r3, r0
 8003500:	3348      	adds	r3, #72	; 0x48
 8003502:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f009 f9a7 	bl	800c85e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d116      	bne.n	8003546 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d113      	bne.n	8003546 <HAL_PCD_IRQHandler+0x276>
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3350      	adds	r3, #80	; 0x50
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800353e:	461a      	mov	r2, r3
 8003540:	2101      	movs	r1, #1
 8003542:	f004 f93b 	bl	80077bc <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	461a      	mov	r2, r3
 800355e:	2308      	movs	r3, #8
 8003560:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003578:	461a      	mov	r2, r3
 800357a:	2310      	movs	r3, #16
 800357c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	461a      	mov	r2, r3
 8003596:	2340      	movs	r3, #64	; 0x40
 8003598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b0:	461a      	mov	r2, r3
 80035b2:	2302      	movs	r3, #2
 80035b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fc96 	bl	8003ef4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	3301      	adds	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f47f af45 	bne.w	8003466 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f004 f813 	bl	800760c <USB_ReadInterrupts>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f0:	d122      	bne.n	8003638 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800360c:	2b01      	cmp	r3, #1
 800360e:	d108      	bne.n	8003622 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003618:	2100      	movs	r1, #0
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f009 fb72 	bl	800cd04 <HAL_PCDEx_LPM_Callback>
 8003620:	e002      	b.n	8003628 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f009 f992 	bl	800c94c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 ffe5 	bl	800760c <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d112      	bne.n	8003674 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d102      	bne.n	8003664 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f009 f94e 	bl	800c900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003672:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f003 ffc7 	bl	800760c <USB_ReadInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003688:	d121      	bne.n	80036ce <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003698:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d111      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036be:	2101      	movs	r1, #1
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f009 fb1f 	bl	800cd04 <HAL_PCDEx_LPM_Callback>
 80036c6:	e002      	b.n	80036ce <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f009 f919 	bl	800c900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f003 ff9a 	bl	800760c <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	f040 80a7 	bne.w	8003834 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2110      	movs	r1, #16
 8003700:	4618      	mov	r0, r3
 8003702:	f003 f90b 	bl	800691c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003706:	2300      	movs	r3, #0
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370a:	e036      	b.n	800377a <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003718:	461a      	mov	r2, r3
 800371a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800371e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003730:	0151      	lsls	r1, r2, #5
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	440a      	add	r2, r1
 8003736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800373e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374c:	461a      	mov	r2, r3
 800374e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003752:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003764:	0151      	lsls	r1, r2, #5
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	440a      	add	r2, r1
 800376a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800376e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003772:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	3301      	adds	r3, #1
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003780:	429a      	cmp	r2, r3
 8003782:	d3c3      	bcc.n	800370c <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003792:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003796:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b0:	f043 030b 	orr.w	r3, r3, #11
 80037b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c6:	f043 030b 	orr.w	r3, r3, #11
 80037ca:	6453      	str	r3, [r2, #68]	; 0x44
 80037cc:	e015      	b.n	80037fa <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	4619      	mov	r1, r3
 80037de:	f242 032b 	movw	r3, #8235	; 0x202b
 80037e2:	4313      	orrs	r3, r2
 80037e4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f4:	f043 030b 	orr.w	r3, r3, #11
 80037f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003808:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800380c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800381e:	461a      	mov	r2, r3
 8003820:	f003 ffcc 	bl	80077bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f003 fee7 	bl	800760c <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003848:	d12a      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f003 ff7e 	bl	8007750 <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f003 f8c0 	bl	80069de <USB_GetDevSpeed>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e002      	b.n	8003872 <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2203      	movs	r2, #3
 8003870:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681c      	ldr	r4, [r3, #0]
 8003876:	f001 f9df 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 800387a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	4620      	mov	r0, r4
 8003886:	f002 fddf 	bl	8006448 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f009 f80f 	bl	800c8ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800389e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f003 feb1 	bl	800760c <USB_ReadInterrupts>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d161      	bne.n	8003978 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0210 	bic.w	r2, r2, #16
 80038c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 020f 	and.w	r2, r3, #15
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	3304      	adds	r3, #4
 80038e2:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	0c5b      	lsrs	r3, r3, #17
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d124      	bne.n	800393a <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d035      	beq.n	8003968 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6a38      	ldr	r0, [r7, #32]
 8003910:	f003 fd29 	bl	8007366 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003932:	441a      	add	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	619a      	str	r2, [r3, #24]
 8003938:	e016      	b.n	8003968 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	0c5b      	lsrs	r3, r3, #17
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	2b06      	cmp	r3, #6
 8003944:	d110      	bne.n	8003968 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800394c:	2208      	movs	r2, #8
 800394e:	4619      	mov	r1, r3
 8003950:	6a38      	ldr	r0, [r7, #32]
 8003952:	f003 fd08 	bl	8007366 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003962:	441a      	add	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0210 	orr.w	r2, r2, #16
 8003976:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fe45 	bl	800760c <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d10a      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f008 ff80 	bl	800c892 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 0208 	and.w	r2, r2, #8
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fe30 	bl	800760c <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b6:	d10d      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f008 ffe4 	bl	800c98c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fe17 	bl	800760c <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039e8:	d10d      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f008 ffb9 	bl	800c968 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fdfe 	bl	800760c <USB_ReadInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1a:	d10a      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f008 ffc7 	bl	800c9b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fde8 	bl	800760c <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d115      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f008 ffb7 	bl	800c9cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	e000      	b.n	8003a72 <HAL_PCD_IRQHandler+0x7a2>
      return;
 8003a70:	bf00      	nop
    }
  }
}
 8003a72:	3734      	adds	r7, #52	; 0x34
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_PCD_SetAddress+0x1a>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e013      	b.n	8003aba <HAL_PCD_SetAddress+0x42>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 fd58 	bl	8007560 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	4608      	mov	r0, r1
 8003acc:	4611      	mov	r1, r2
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	70fb      	strb	r3, [r7, #3]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	803b      	strh	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	da0f      	bge.n	8003b08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	3338      	adds	r3, #56	; 0x38
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	705a      	strb	r2, [r3, #1]
 8003b06:	e00f      	b.n	8003b28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	f003 020f 	and.w	r2, r3, #15
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3304      	adds	r3, #4
 8003b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b34:	883a      	ldrh	r2, [r7, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	78ba      	ldrb	r2, [r7, #2]
 8003b3e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d102      	bne.n	8003b5e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_EP_Open+0xaa>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e00e      	b.n	8003b8a <HAL_PCD_EP_Open+0xc8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 ff54 	bl	8006a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b88:	7afb      	ldrb	r3, [r7, #11]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	da0f      	bge.n	8003bc6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	f003 020f 	and.w	r2, r3, #15
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	3338      	adds	r3, #56	; 0x38
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3304      	adds	r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	705a      	strb	r2, [r3, #1]
 8003bc4:	e00f      	b.n	8003be6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_PCD_EP_Close+0x6e>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e00e      	b.n	8003c1e <HAL_PCD_EP_Close+0x8c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 ff92 	bl	8006b38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	460b      	mov	r3, r1
 8003c34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	f003 f9e7 	bl	800706c <USB_EP0StartXfer>
 8003c9e:	e008      	b.n	8003cb2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6979      	ldr	r1, [r7, #20]
 8003cae:	f002 ffc7 	bl	8006c40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	f003 020f 	and.w	r2, r3, #15
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	3338      	adds	r3, #56	; 0x38
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2c:	7afb      	ldrb	r3, [r7, #11]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6979      	ldr	r1, [r7, #20]
 8003d5e:	f003 f985 	bl	800706c <USB_EP0StartXfer>
 8003d62:	e008      	b.n	8003d76 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	f002 ff65 	bl	8006c40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	f003 020f 	and.w	r2, r3, #15
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d901      	bls.n	8003d9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e050      	b.n	8003e40 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da0f      	bge.n	8003dc6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3338      	adds	r3, #56	; 0x38
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	705a      	strb	r2, [r3, #1]
 8003dc4:	e00d      	b.n	8003de2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_PCD_EP_SetStall+0x82>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e01e      	b.n	8003e40 <HAL_PCD_EP_SetStall+0xc0>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f003 fad1 	bl	80073b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	b2d9      	uxtb	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e30:	461a      	mov	r2, r3
 8003e32:	f003 fcc3 	bl	80077bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 020f 	and.w	r2, r3, #15
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d901      	bls.n	8003e66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e042      	b.n	8003eec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da0f      	bge.n	8003e8e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	3338      	adds	r3, #56	; 0x38
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	705a      	strb	r2, [r3, #1]
 8003e8c:	e00f      	b.n	8003eae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 020f 	and.w	r2, r3, #15
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_PCD_EP_ClrStall+0x86>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e00e      	b.n	8003eec <HAL_PCD_EP_ClrStall+0xa4>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 fad9 	bl	8007494 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	; 0x28
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	3338      	adds	r3, #56	; 0x38
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d901      	bls.n	8003f2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e06c      	b.n	8004006 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d902      	bls.n	8003f48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3303      	adds	r3, #3
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f50:	e02b      	b.n	8003faa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3303      	adds	r3, #3
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68d9      	ldr	r1, [r3, #12]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f003 f9b5 	bl	80072fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d809      	bhi.n	8003fd4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d203      	bcs.n	8003fd4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1be      	bne.n	8003f52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d811      	bhi.n	8004004 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004000:	4013      	ands	r3, r2
 8004002:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	333c      	adds	r3, #60	; 0x3c
 8004028:	3304      	adds	r3, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b01      	cmp	r3, #1
 8004044:	f040 80b3 	bne.w	80041ae <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a70      	ldr	r2, [pc, #448]	; (8004218 <PCD_EP_OutXfrComplete_int+0x208>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d90e      	bls.n	8004078 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f008 fbc3 	bl	800c804 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004088:	461a      	mov	r2, r3
 800408a:	2101      	movs	r1, #1
 800408c:	f003 fb96 	bl	80077bc <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	2308      	movs	r3, #8
 80040a0:	6093      	str	r3, [r2, #8]
 80040a2:	e0b3      	b.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	2320      	movs	r3, #32
 80040be:	6093      	str	r3, [r2, #8]
 80040c0:	e0a4      	b.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f040 809f 	bne.w	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a51      	ldr	r2, [pc, #324]	; (8004218 <PCD_EP_OutXfrComplete_int+0x208>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d90f      	bls.n	80040f6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	e08a      	b.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004108:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	0159      	lsls	r1, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	440b      	add	r3, r1
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800411c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004130:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4419      	add	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4403      	add	r3, r0
 800416a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800416e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f008 fb56 	bl	800c828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d144      	bne.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d138      	bne.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041a4:	461a      	mov	r2, r3
 80041a6:	2101      	movs	r1, #1
 80041a8:	f003 fb08 	bl	80077bc <USB_EP0_OutStart>
 80041ac:	e02e      	b.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a1a      	ldr	r2, [pc, #104]	; (800421c <PCD_EP_OutXfrComplete_int+0x20c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d124      	bne.n	8004200 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	461a      	mov	r2, r3
 80041ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d2:	6093      	str	r3, [r2, #8]
 80041d4:	e01a      	b.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	2320      	movs	r3, #32
 80041f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f008 fb15 	bl	800c828 <HAL_PCD_DataOutStageCallback>
 80041fe:	e005      	b.n	800420c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f008 fb0e 	bl	800c828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	4f54300a 	.word	0x4f54300a
 800421c:	4f54310a 	.word	0x4f54310a

08004220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	333c      	adds	r3, #60	; 0x3c
 8004238:	3304      	adds	r3, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d113      	bne.n	800427e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d922      	bls.n	80042a4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01d      	beq.n	80042a4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	461a      	mov	r2, r3
 8004276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	e012      	b.n	80042a4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <PCD_EP_OutSetupPacket_int+0xbc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10e      	bne.n	80042a4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f008 faad 	bl	800c804 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <PCD_EP_OutSetupPacket_int+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d90c      	bls.n	80042cc <PCD_EP_OutSetupPacket_int+0xac>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042c4:	461a      	mov	r2, r3
 80042c6:	2101      	movs	r1, #1
 80042c8:	f003 fa78 	bl	80077bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	4f54300a 	.word	0x4f54300a
 80042dc:	4f54310a 	.word	0x4f54310a

080042e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
 80042ec:	4613      	mov	r3, r2
 80042ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042fe:	883b      	ldrh	r3, [r7, #0]
 8004300:	0419      	lsls	r1, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	430a      	orrs	r2, r1
 800430a:	629a      	str	r2, [r3, #40]	; 0x28
 800430c:	e028      	b.n	8004360 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e00d      	b.n	800433e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	3340      	adds	r3, #64	; 0x40
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	3301      	adds	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	3b01      	subs	r3, #1
 8004344:	429a      	cmp	r2, r3
 8004346:	d3ec      	bcc.n	8004322 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004348:	883b      	ldrh	r3, [r7, #0]
 800434a:	0418      	lsls	r0, r3, #16
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	3b01      	subs	r3, #1
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	4302      	orrs	r2, r0
 8004358:	3340      	adds	r3, #64	; 0x40
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	10000003 	.word	0x10000003

080043d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80043e0:	2300      	movs	r3, #0
 80043e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e25c      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8087 	beq.w	800450a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043fc:	4b96      	ldr	r3, [pc, #600]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b04      	cmp	r3, #4
 8004406:	d00c      	beq.n	8004422 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004408:	4b93      	ldr	r3, [pc, #588]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d112      	bne.n	800443a <HAL_RCC_OscConfig+0x62>
 8004414:	4b90      	ldr	r3, [pc, #576]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004420:	d10b      	bne.n	800443a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004422:	4b8d      	ldr	r3, [pc, #564]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06c      	beq.n	8004508 <HAL_RCC_OscConfig+0x130>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d168      	bne.n	8004508 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e236      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x7a>
 8004444:	4b84      	ldr	r3, [pc, #528]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a83      	ldr	r2, [pc, #524]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e02e      	b.n	80044b0 <HAL_RCC_OscConfig+0xd8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x9c>
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b7c      	ldr	r3, [pc, #496]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7b      	ldr	r2, [pc, #492]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800446c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e01d      	b.n	80044b0 <HAL_RCC_OscConfig+0xd8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0xc0>
 800447e:	4b76      	ldr	r3, [pc, #472]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a75      	ldr	r2, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b73      	ldr	r3, [pc, #460]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a72      	ldr	r2, [pc, #456]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0xd8>
 8004498:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a6b      	ldr	r2, [pc, #428]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe fb16 	bl	8002ae8 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fe fb12 	bl	8002ae8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b64      	cmp	r3, #100	; 0x64
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1ea      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b61      	ldr	r3, [pc, #388]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0xe8>
 80044de:	e014      	b.n	800450a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fe fb02 	bl	8002ae8 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fe fafe 	bl	8002ae8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e1d6      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	4b57      	ldr	r3, [pc, #348]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x110>
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d069      	beq.n	80045ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004516:	4b50      	ldr	r3, [pc, #320]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11c      	bne.n	8004568 <HAL_RCC_OscConfig+0x190>
 800452e:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_RCC_OscConfig+0x17a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e1aa      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	493d      	ldr	r1, [pc, #244]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	e040      	b.n	80045ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d023      	beq.n	80045b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fe fab4 	bl	8002ae8 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fe fab0 	bl	8002ae8 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e188      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	4b30      	ldr	r3, [pc, #192]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4929      	ldr	r1, [pc, #164]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
 80045b6:	e018      	b.n	80045ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe fa90 	bl	8002ae8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fe fa8c 	bl	8002ae8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e164      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d038      	beq.n	8004668 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d019      	beq.n	8004632 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004602:	4a15      	ldr	r2, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe fa6d 	bl	8002ae8 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004612:	f7fe fa69 	bl	8002ae8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e141      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x23a>
 8004630:	e01a      	b.n	8004668 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_RCC_OscConfig+0x280>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fe fa53 	bl	8002ae8 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004646:	f7fe fa4f 	bl	8002ae8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d903      	bls.n	800465c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e127      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
 8004658:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b94      	ldr	r3, [pc, #592]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ee      	bne.n	8004646 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a4 	beq.w	80047be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b8e      	ldr	r3, [pc, #568]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a8a      	ldr	r2, [pc, #552]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469e:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d118      	bne.n	80046dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046aa:	4b82      	ldr	r3, [pc, #520]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a81      	ldr	r2, [pc, #516]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fe fa17 	bl	8002ae8 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046be:	f7fe fa13 	bl	8002ae8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b64      	cmp	r3, #100	; 0x64
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e0eb      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d0:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <HAL_RCC_OscConfig+0x4dc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x31a>
 80046e4:	4b72      	ldr	r3, [pc, #456]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	4a71      	ldr	r2, [pc, #452]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6713      	str	r3, [r2, #112]	; 0x70
 80046f0:	e02d      	b.n	800474e <HAL_RCC_OscConfig+0x376>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x33c>
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a6c      	ldr	r2, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
 8004706:	4b6a      	ldr	r3, [pc, #424]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
 8004712:	e01c      	b.n	800474e <HAL_RCC_OscConfig+0x376>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b05      	cmp	r3, #5
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x35e>
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a63      	ldr	r2, [pc, #396]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a60      	ldr	r2, [pc, #384]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	e00b      	b.n	800474e <HAL_RCC_OscConfig+0x376>
 8004736:	4b5e      	ldr	r3, [pc, #376]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a5d      	ldr	r2, [pc, #372]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a5a      	ldr	r2, [pc, #360]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d015      	beq.n	8004782 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fe f9c7 	bl	8002ae8 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fe f9c3 	bl	8002ae8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e099      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	4b4e      	ldr	r3, [pc, #312]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ee      	beq.n	800475e <HAL_RCC_OscConfig+0x386>
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fe f9b1 	bl	8002ae8 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fe f9ad 	bl	8002ae8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e083      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ee      	bne.n	800478a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b2:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a3e      	ldr	r2, [pc, #248]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80047b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d06f      	beq.n	80048a6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d067      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d149      	bne.n	800486e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a34      	ldr	r2, [pc, #208]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 80047e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fe f97f 	bl	8002ae8 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fe f97b 	bl	8002ae8 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e053      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	019b      	lsls	r3, r3, #6
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	4313      	orrs	r3, r2
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004838:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fe f94f 	bl	8002ae8 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484e:	f7fe f94b 	bl	8002ae8 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e023      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x476>
 800486c:	e01b      	b.n	80048a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fe f935 	bl	8002ae8 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fe f931 	bl	8002ae8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e009      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCC_OscConfig+0x4d8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x4aa>
 80048a0:	e001      	b.n	80048a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000

080048b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0ce      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b69      	ldr	r3, [pc, #420]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d910      	bls.n	8004900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 020f 	bic.w	r2, r3, #15
 80048e6:	4964      	ldr	r1, [pc, #400]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b62      	ldr	r3, [pc, #392]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0b6      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004918:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4a57      	ldr	r2, [pc, #348]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004930:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a51      	ldr	r2, [pc, #324]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800493a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	494c      	ldr	r1, [pc, #304]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d040      	beq.n	80049dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b46      	ldr	r3, [pc, #280]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d115      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07d      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b40      	ldr	r3, [pc, #256]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e071      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e069      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4935      	ldr	r1, [pc, #212]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fe f89c 	bl	8002ae8 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fe f898 	bl	8002ae8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e051      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d210      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 020f 	bic.w	r2, r3, #15
 80049f2:	4921      	ldr	r1, [pc, #132]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e030      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4915      	ldr	r1, [pc, #84]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	490d      	ldr	r1, [pc, #52]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a4a:	f000 f81d 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a4e:	4601      	mov	r1, r0
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5c:	5cd3      	ldrb	r3, [r2, r3]
 8004a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_RCC_ClockConfig+0x1cc>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a66:	2000      	movs	r0, #0
 8004a68:	f7fc fc70 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023c00 	.word	0x40023c00
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	0800e278 	.word	0x0800e278
 8004a84:	20000000 	.word	0x20000000

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	2300      	movs	r3, #0
 8004a98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d007      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x32>
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x38>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 80b4 	bne.w	8004c1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ab6:	60bb      	str	r3, [r7, #8]
       break;
 8004ab8:	e0b3      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aba:	4b5e      	ldr	r3, [pc, #376]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004abc:	60bb      	str	r3, [r7, #8]
      break;
 8004abe:	e0b0      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac0:	4b5a      	ldr	r3, [pc, #360]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004aca:	4b58      	ldr	r3, [pc, #352]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04a      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad6:	4b55      	ldr	r3, [pc, #340]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	f04f 0400 	mov.w	r4, #0
 8004ae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	ea03 0501 	and.w	r5, r3, r1
 8004aec:	ea04 0602 	and.w	r6, r4, r2
 8004af0:	4629      	mov	r1, r5
 8004af2:	4632      	mov	r2, r6
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	0154      	lsls	r4, r2, #5
 8004afe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b02:	014b      	lsls	r3, r1, #5
 8004b04:	4619      	mov	r1, r3
 8004b06:	4622      	mov	r2, r4
 8004b08:	1b49      	subs	r1, r1, r5
 8004b0a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	f04f 0400 	mov.w	r4, #0
 8004b16:	0194      	lsls	r4, r2, #6
 8004b18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b1c:	018b      	lsls	r3, r1, #6
 8004b1e:	1a5b      	subs	r3, r3, r1
 8004b20:	eb64 0402 	sbc.w	r4, r4, r2
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	00e2      	lsls	r2, r4, #3
 8004b2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b32:	00d9      	lsls	r1, r3, #3
 8004b34:	460b      	mov	r3, r1
 8004b36:	4614      	mov	r4, r2
 8004b38:	195b      	adds	r3, r3, r5
 8004b3a:	eb44 0406 	adc.w	r4, r4, r6
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	0262      	lsls	r2, r4, #9
 8004b48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b4c:	0259      	lsls	r1, r3, #9
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4614      	mov	r4, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	4621      	mov	r1, r4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f04f 0400 	mov.w	r4, #0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	f7fc f832 	bl	8000bc8 <__aeabi_uldivmod>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e049      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6c:	4b2f      	ldr	r3, [pc, #188]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	f04f 0400 	mov.w	r4, #0
 8004b76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	ea03 0501 	and.w	r5, r3, r1
 8004b82:	ea04 0602 	and.w	r6, r4, r2
 8004b86:	4629      	mov	r1, r5
 8004b88:	4632      	mov	r2, r6
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	f04f 0400 	mov.w	r4, #0
 8004b92:	0154      	lsls	r4, r2, #5
 8004b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b98:	014b      	lsls	r3, r1, #5
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	1b49      	subs	r1, r1, r5
 8004ba0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	0194      	lsls	r4, r2, #6
 8004bae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bb2:	018b      	lsls	r3, r1, #6
 8004bb4:	1a5b      	subs	r3, r3, r1
 8004bb6:	eb64 0402 	sbc.w	r4, r4, r2
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	00e2      	lsls	r2, r4, #3
 8004bc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bc8:	00d9      	lsls	r1, r3, #3
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4614      	mov	r4, r2
 8004bce:	195b      	adds	r3, r3, r5
 8004bd0:	eb44 0406 	adc.w	r4, r4, r6
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	02a2      	lsls	r2, r4, #10
 8004bde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004be2:	0299      	lsls	r1, r3, #10
 8004be4:	460b      	mov	r3, r1
 8004be6:	4614      	mov	r4, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	4621      	mov	r1, r4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	f7fb ffe7 	bl	8000bc8 <__aeabi_uldivmod>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	60bb      	str	r3, [r7, #8]
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c1e:	60bb      	str	r3, [r7, #8]
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	68bb      	ldr	r3, [r7, #8]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	007a1200 	.word	0x007a1200

08004c38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000000 	.word	0x20000000

08004c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c54:	f7ff fff0 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8004c58:	4601      	mov	r1, r0
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0b5b      	lsrs	r3, r3, #13
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4a03      	ldr	r2, [pc, #12]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40023800 	.word	0x40023800
 8004c74:	0800e288 	.word	0x0800e288

08004c78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	220f      	movs	r2, #15
 8004c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0203 	and.w	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	08db      	lsrs	r3, r3, #3
 8004cb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <HAL_RCC_GetClockConfig+0x60>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40023c00 	.word	0x40023c00

08004cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d012      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d04:	4b69      	ldr	r3, [pc, #420]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a68      	ldr	r2, [pc, #416]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	4b66      	ldr	r3, [pc, #408]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	4964      	ldr	r1, [pc, #400]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d36:	4b5d      	ldr	r3, [pc, #372]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	4959      	ldr	r1, [pc, #356]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d54:	d101      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d56:	2301      	movs	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d017      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d72:	4b4e      	ldr	r3, [pc, #312]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	494a      	ldr	r1, [pc, #296]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d90:	d101      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 808b 	beq.w	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc0:	4b3a      	ldr	r3, [pc, #232]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	4a39      	ldr	r2, [pc, #228]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dca:	6413      	str	r3, [r2, #64]	; 0x40
 8004dcc:	4b37      	ldr	r3, [pc, #220]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dd8:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a34      	ldr	r2, [pc, #208]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fd fe80 	bl	8002ae8 <HAL_GetTick>
 8004de8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dec:	f7fd fe7c 	bl	8002ae8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e31e      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0a:	4b28      	ldr	r3, [pc, #160]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d035      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d02e      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e28:	4b20      	ldr	r3, [pc, #128]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a1a      	ldr	r2, [pc, #104]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d114      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fe44 	bl	8002ae8 <HAL_GetTick>
 8004e60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e62:	e00a      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7fd fe40 	bl	8002ae8 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e2e0      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0ee      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e92:	d111      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ea2:	400b      	ands	r3, r1
 8004ea4:	4901      	ldr	r1, [pc, #4]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	0ffffcff 	.word	0x0ffffcff
 8004eb8:	4bac      	ldr	r3, [pc, #688]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4aab      	ldr	r2, [pc, #684]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ec2:	6093      	str	r3, [r2, #8]
 8004ec4:	4ba9      	ldr	r3, [pc, #676]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed0:	49a6      	ldr	r1, [pc, #664]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ee2:	4ba2      	ldr	r3, [pc, #648]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee8:	4aa0      	ldr	r2, [pc, #640]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ef2:	4b9e      	ldr	r3, [pc, #632]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	499b      	ldr	r1, [pc, #620]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f10:	4b96      	ldr	r3, [pc, #600]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1e:	4993      	ldr	r1, [pc, #588]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f32:	4b8e      	ldr	r3, [pc, #568]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f40:	498a      	ldr	r1, [pc, #552]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f54:	4b85      	ldr	r3, [pc, #532]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f62:	4982      	ldr	r1, [pc, #520]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f76:	4b7d      	ldr	r3, [pc, #500]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4979      	ldr	r1, [pc, #484]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f98:	4b74      	ldr	r3, [pc, #464]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f023 0203 	bic.w	r2, r3, #3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	4971      	ldr	r1, [pc, #452]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fba:	4b6c      	ldr	r3, [pc, #432]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f023 020c 	bic.w	r2, r3, #12
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	4968      	ldr	r1, [pc, #416]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fdc:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	4960      	ldr	r1, [pc, #384]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ffe:	4b5b      	ldr	r3, [pc, #364]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	4957      	ldr	r1, [pc, #348]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005020:	4b52      	ldr	r3, [pc, #328]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	494f      	ldr	r1, [pc, #316]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005042:	4b4a      	ldr	r3, [pc, #296]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	4946      	ldr	r1, [pc, #280]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	493e      	ldr	r1, [pc, #248]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005086:	4b39      	ldr	r3, [pc, #228]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005094:	4935      	ldr	r1, [pc, #212]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b6:	492d      	ldr	r1, [pc, #180]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050ca:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d8:	4924      	ldr	r1, [pc, #144]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e8:	d101      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050ea:	2301      	movs	r3, #1
 80050ec:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050fa:	4b1c      	ldr	r3, [pc, #112]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005100:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005108:	4918      	ldr	r1, [pc, #96]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512c:	490f      	ldr	r1, [pc, #60]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d005      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005142:	f040 80d8 	bne.w	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005152:	f7fd fcc9 	bl	8002ae8 <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005158:	e00a      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800515a:	f7fd fcc5 	bl	8002ae8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	; 0x64
 8005166:	d903      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e167      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800516c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005170:	4bad      	ldr	r3, [pc, #692]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ee      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d021      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11d      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005190:	4ba5      	ldr	r3, [pc, #660]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800519e:	4ba2      	ldr	r3, [pc, #648]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a4:	0e1b      	lsrs	r3, r3, #24
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	019a      	lsls	r2, r3, #6
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	071b      	lsls	r3, r3, #28
 80051c4:	4998      	ldr	r1, [pc, #608]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02e      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f6:	d129      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051f8:	4b8b      	ldr	r3, [pc, #556]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80051fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005206:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	0f1b      	lsrs	r3, r3, #28
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	019a      	lsls	r2, r3, #6
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	431a      	orrs	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	071b      	lsls	r3, r3, #28
 800522c:	497e      	ldr	r1, [pc, #504]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005234:	4b7c      	ldr	r3, [pc, #496]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	f023 021f 	bic.w	r2, r3, #31
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	3b01      	subs	r3, #1
 8005244:	4978      	ldr	r1, [pc, #480]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01d      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005258:	4b73      	ldr	r3, [pc, #460]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	0e1b      	lsrs	r3, r3, #24
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005266:	4b70      	ldr	r3, [pc, #448]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	0f1b      	lsrs	r3, r3, #28
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	019a      	lsls	r2, r3, #6
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	431a      	orrs	r2, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	431a      	orrs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	071b      	lsls	r3, r3, #28
 800528c:	4966      	ldr	r1, [pc, #408]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d011      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	019a      	lsls	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	061b      	lsls	r3, r3, #24
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	071b      	lsls	r3, r3, #28
 80052bc:	495a      	ldr	r1, [pc, #360]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052c4:	4b58      	ldr	r3, [pc, #352]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a57      	ldr	r2, [pc, #348]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80052ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7fd fc0a 	bl	8002ae8 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052d8:	f7fd fc06 	bl	8002ae8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0a8      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052ea:	4b4f      	ldr	r3, [pc, #316]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	f040 809e 	bne.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a49      	ldr	r2, [pc, #292]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fd fbed 	bl	8002ae8 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005310:	e008      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005312:	f7fd fbe9 	bl	8002ae8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b64      	cmp	r3, #100	; 0x64
 800531e:	d901      	bls.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e08b      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005324:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005330:	d0ef      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800534e:	2b00      	cmp	r3, #0
 8005350:	d02e      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d12a      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	0f1b      	lsrs	r3, r3, #28
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	019a      	lsls	r2, r3, #6
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	4926      	ldr	r1, [pc, #152]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	3b01      	subs	r3, #1
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	491f      	ldr	r1, [pc, #124]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d022      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c4:	d11d      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	0e1b      	lsrs	r3, r3, #24
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	0f1b      	lsrs	r3, r3, #28
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	019a      	lsls	r2, r3, #6
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	431a      	orrs	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	061b      	lsls	r3, r3, #24
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	071b      	lsls	r3, r3, #28
 80053fa:	490b      	ldr	r1, [pc, #44]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540e:	f7fd fb6b 	bl	8002ae8 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005414:	e00a      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005416:	f7fd fb67 	bl	8002ae8 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	; 0x64
 8005422:	d903      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e009      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005428:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005438:	d1ed      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800

08005448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e084      	b.n	8005564 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fb ff25 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005490:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800549a:	d902      	bls.n	80054a2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	e002      	b.n	80054a8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054b0:	d007      	beq.n	80054c2 <HAL_SPI_Init+0x7a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054d2:	d903      	bls.n	80054dc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
 80054da:	e002      	b.n	80054e2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	ea42 0103 	orr.w	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0204 	and.w	r2, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	ea42 0103 	orr.w	r1, r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005552:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005588:	d112      	bne.n	80055b0 <HAL_SPI_Receive+0x44>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10e      	bne.n	80055b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2204      	movs	r2, #4
 8005596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f908 	bl	80057bc <HAL_SPI_TransmitReceive>
 80055ac:	4603      	mov	r3, r0
 80055ae:	e101      	b.n	80057b4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_SPI_Receive+0x52>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e0fa      	b.n	80057b4 <HAL_SPI_Receive+0x248>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c6:	f7fd fa8f 	bl	8002ae8 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d002      	beq.n	80055de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055dc:	e0e1      	b.n	80057a2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_SPI_Receive+0x7e>
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ee:	e0d8      	b.n	80057a2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2204      	movs	r2, #4
 80055f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800563a:	d908      	bls.n	800564e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	e007      	b.n	800565e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800565c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d107      	bne.n	8005678 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005676:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d007      	beq.n	8005696 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800569e:	d867      	bhi.n	8005770 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056a0:	e030      	b.n	8005704 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d117      	bne.n	80056e0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f103 020c 	add.w	r2, r3, #12
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056de:	e011      	b.n	8005704 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e0:	f7fd fa02 	bl	8002ae8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d803      	bhi.n	80056f8 <HAL_SPI_Receive+0x18c>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Receive+0x192>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005702:	e04e      	b.n	80057a2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1c8      	bne.n	80056a2 <HAL_SPI_Receive+0x136>
 8005710:	e034      	b.n	800577c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d115      	bne.n	800574c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	b292      	uxth	r2, r2
 800572c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	1c9a      	adds	r2, r3, #2
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800574a:	e011      	b.n	8005770 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800574c:	f7fd f9cc 	bl	8002ae8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d803      	bhi.n	8005764 <HAL_SPI_Receive+0x1f8>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d102      	bne.n	800576a <HAL_SPI_Receive+0x1fe>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800576e:	e018      	b.n	80057a2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ca      	bne.n	8005712 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fb05 	bl	8005d90 <SPI_EndRxTransaction>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
 800579e:	e000      	b.n	80057a2 <HAL_SPI_Receive+0x236>
  }

error :
 80057a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057ca:	2301      	movs	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x26>
 80057de:	2302      	movs	r3, #2
 80057e0:	e1fb      	b.n	8005bda <HAL_SPI_TransmitReceive+0x41e>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ea:	f7fd f97d 	bl	8002ae8 <HAL_GetTick>
 80057ee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057fe:	887b      	ldrh	r3, [r7, #2]
 8005800:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005802:	887b      	ldrh	r3, [r7, #2]
 8005804:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005806:	7efb      	ldrb	r3, [r7, #27]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d00e      	beq.n	800582a <HAL_SPI_TransmitReceive+0x6e>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005812:	d106      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x66>
 800581c:	7efb      	ldrb	r3, [r7, #27]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d003      	beq.n	800582a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005828:	e1cd      	b.n	8005bc6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_SPI_TransmitReceive+0x80>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_SPI_TransmitReceive+0x80>
 8005836:	887b      	ldrh	r3, [r7, #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005842:	e1c0      	b.n	8005bc6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b04      	cmp	r3, #4
 800584e:	d003      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2205      	movs	r2, #5
 8005854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	887a      	ldrh	r2, [r7, #2]
 800587e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	887a      	ldrh	r2, [r7, #2]
 8005884:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800589a:	d802      	bhi.n	80058a2 <HAL_SPI_TransmitReceive+0xe6>
 800589c:	8a3b      	ldrh	r3, [r7, #16]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d908      	bls.n	80058b4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	e007      	b.n	80058c4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d007      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ea:	d97c      	bls.n	80059e6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_SPI_TransmitReceive+0x13e>
 80058f4:	8a7b      	ldrh	r3, [r7, #18]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d169      	bne.n	80059ce <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	1c9a      	adds	r2, r3, #2
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591e:	e056      	b.n	80059ce <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d11b      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x1aa>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d016      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x1aa>
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	2b01      	cmp	r3, #1
 800593c:	d113      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	881a      	ldrh	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d11c      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x1f2>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d016      	beq.n	80059ae <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	b292      	uxth	r2, r2
 800598c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ae:	f7fd f89b 	bl	8002ae8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d807      	bhi.n	80059ce <HAL_SPI_TransmitReceive+0x212>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d003      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059cc:	e0fb      	b.n	8005bc6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1a3      	bne.n	8005920 <HAL_SPI_TransmitReceive+0x164>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d19d      	bne.n	8005920 <HAL_SPI_TransmitReceive+0x164>
 80059e4:	e0df      	b.n	8005ba6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x23a>
 80059ee:	8a7b      	ldrh	r3, [r7, #18]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	f040 80cb 	bne.w	8005b8c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d912      	bls.n	8005a26 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	881a      	ldrh	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b02      	subs	r3, #2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a24:	e0b2      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	7812      	ldrb	r2, [r2, #0]
 8005a32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4c:	e09e      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d134      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x30a>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02f      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x30a>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d12c      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d912      	bls.n	8005a9c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	881a      	ldrh	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	1c9a      	adds	r2, r3, #2
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b02      	subs	r3, #2
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9a:	e012      	b.n	8005ac2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	7812      	ldrb	r2, [r2, #0]
 8005aa8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d148      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x3aa>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d042      	beq.n	8005b66 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d923      	bls.n	8005b34 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	b292      	uxth	r2, r2
 8005af8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	1c9a      	adds	r2, r3, #2
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b02      	subs	r3, #2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d81f      	bhi.n	8005b62 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e016      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f103 020c 	add.w	r2, r3, #12
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b62:	2301      	movs	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b66:	f7fc ffbf 	bl	8002ae8 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d803      	bhi.n	8005b7e <HAL_SPI_TransmitReceive+0x3c2>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d102      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x3c8>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b8a:	e01c      	b.n	8005bc6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f47f af5b 	bne.w	8005a4e <HAL_SPI_TransmitReceive+0x292>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f47f af54 	bne.w	8005a4e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f948 	bl	8005e40 <SPI_EndRxTxTransaction>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	661a      	str	r2, [r3, #96]	; 0x60
 8005bc2:	e000      	b.n	8005bc6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005bc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf2:	e04c      	b.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d048      	beq.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005bfc:	f7fc ff74 	bl	8002ae8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d902      	bls.n	8005c12 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d13d      	bne.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2a:	d111      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c34:	d004      	beq.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d107      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c58:	d10f      	bne.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e00f      	b.n	8005cae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4013      	ands	r3, r2
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1a3      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cc4:	e057      	b.n	8005d76 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ccc:	d106      	bne.n	8005cdc <SPI_WaitFifoStateUntilTimeout+0x26>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d103      	bne.n	8005cdc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d048      	beq.n	8005d76 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ce4:	f7fc ff00 	bl	8002ae8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d902      	bls.n	8005cfa <SPI_WaitFifoStateUntilTimeout+0x44>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d13d      	bne.n	8005d76 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d12:	d111      	bne.n	8005d38 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1c:	d004      	beq.n	8005d28 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d26:	d107      	bne.n	8005d38 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d40:	d10f      	bne.n	8005d62 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e008      	b.n	8005d88 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d19f      	bne.n	8005cc6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da4:	d111      	bne.n	8005dca <SPI_EndRxTransaction+0x3a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dae:	d004      	beq.n	8005dba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d107      	bne.n	8005dca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff ff04 	bl	8005be2 <SPI_WaitFlagStateUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e023      	b.n	8005e38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df8:	d11d      	bne.n	8005e36 <SPI_EndRxTransaction+0xa6>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e02:	d004      	beq.n	8005e0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0c:	d113      	bne.n	8005e36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ff4b 	bl	8005cb6 <SPI_WaitFifoStateUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e000      	b.n	8005e38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff ff2c 	bl	8005cb6 <SPI_WaitFifoStateUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e027      	b.n	8005ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff feaf 	bl	8005be2 <SPI_WaitFlagStateUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e014      	b.n	8005ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff ff05 	bl	8005cb6 <SPI_WaitFifoStateUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e000      	b.n	8005ec4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e01d      	b.n	8005f1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f815 	bl	8005f22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f000 f986 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <HAL_TIM_Base_Start_IT+0x50>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d00b      	beq.n	8005f7a <HAL_TIM_Base_Start_IT+0x42>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f68:	d007      	beq.n	8005f7a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	00010007 	.word	0x00010007

08005f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0202 	mvn.w	r2, #2
 8005fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f905 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8f7 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f908 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d122      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d11b      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0204 	mvn.w	r2, #4
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f8db 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8cd 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8de 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b08      	cmp	r3, #8
 8006048:	d122      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0208 	mvn.w	r2, #8
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2204      	movs	r2, #4
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8b1 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8a3 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f8b4 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2208      	movs	r2, #8
 80060ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f887 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f879 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f88a 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10e      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb f898 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f91a 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	d10e      	bne.n	800616a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d107      	bne.n	800616a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f90d 	bl	8006384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d10e      	bne.n	8006196 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d107      	bne.n	8006196 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800618e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f838 	bl	8006206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d10e      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d107      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f06f 0220 	mvn.w	r2, #32
 80061ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f8cd 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a40      	ldr	r2, [pc, #256]	; (8006330 <TIM_Base_SetConfig+0x114>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3d      	ldr	r2, [pc, #244]	; (8006334 <TIM_Base_SetConfig+0x118>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3c      	ldr	r2, [pc, #240]	; (8006338 <TIM_Base_SetConfig+0x11c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a3b      	ldr	r2, [pc, #236]	; (800633c <TIM_Base_SetConfig+0x120>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a3a      	ldr	r2, [pc, #232]	; (8006340 <TIM_Base_SetConfig+0x124>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2f      	ldr	r2, [pc, #188]	; (8006330 <TIM_Base_SetConfig+0x114>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d027      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2c      	ldr	r2, [pc, #176]	; (8006334 <TIM_Base_SetConfig+0x118>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d023      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2b      	ldr	r2, [pc, #172]	; (8006338 <TIM_Base_SetConfig+0x11c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2a      	ldr	r2, [pc, #168]	; (800633c <TIM_Base_SetConfig+0x120>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a29      	ldr	r2, [pc, #164]	; (8006340 <TIM_Base_SetConfig+0x124>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d017      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a28      	ldr	r2, [pc, #160]	; (8006344 <TIM_Base_SetConfig+0x128>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <TIM_Base_SetConfig+0x12c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a26      	ldr	r2, [pc, #152]	; (800634c <TIM_Base_SetConfig+0x130>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a25      	ldr	r2, [pc, #148]	; (8006350 <TIM_Base_SetConfig+0x134>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a24      	ldr	r2, [pc, #144]	; (8006354 <TIM_Base_SetConfig+0x138>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a23      	ldr	r2, [pc, #140]	; (8006358 <TIM_Base_SetConfig+0x13c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <TIM_Base_SetConfig+0x114>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0xf8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a0c      	ldr	r2, [pc, #48]	; (8006340 <TIM_Base_SetConfig+0x124>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	40014400 	.word	0x40014400
 800634c:	40014800 	.word	0x40014800
 8006350:	40001800 	.word	0x40001800
 8006354:	40001c00 	.word	0x40001c00
 8006358:	40002000 	.word	0x40002000

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006398:	b084      	sub	sp, #16
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	f107 001c 	add.w	r0, r7, #28
 80063a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d120      	bne.n	80063f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	4b20      	ldr	r3, [pc, #128]	; (8006444 <USB_CoreInit+0xac>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d105      	bne.n	80063e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fa46 	bl	8007878 <USB_CoreReset>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e010      	b.n	8006414 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fa3a 	bl	8007878 <USB_CoreReset>
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10b      	bne.n	8006432 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f043 0206 	orr.w	r2, r3, #6
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800643e:	b004      	add	sp, #16
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	ffbdffbf 	.word	0xffbdffbf

08006448 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d165      	bne.n	8006528 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4a41      	ldr	r2, [pc, #260]	; (8006564 <USB_SetTurnaroundTime+0x11c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d906      	bls.n	8006472 <USB_SetTurnaroundTime+0x2a>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4a40      	ldr	r2, [pc, #256]	; (8006568 <USB_SetTurnaroundTime+0x120>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d802      	bhi.n	8006472 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800646c:	230f      	movs	r3, #15
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e062      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4a3c      	ldr	r2, [pc, #240]	; (8006568 <USB_SetTurnaroundTime+0x120>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d906      	bls.n	8006488 <USB_SetTurnaroundTime+0x40>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	4a3b      	ldr	r2, [pc, #236]	; (800656c <USB_SetTurnaroundTime+0x124>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d802      	bhi.n	8006488 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006482:	230e      	movs	r3, #14
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e057      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4a38      	ldr	r2, [pc, #224]	; (800656c <USB_SetTurnaroundTime+0x124>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d906      	bls.n	800649e <USB_SetTurnaroundTime+0x56>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4a37      	ldr	r2, [pc, #220]	; (8006570 <USB_SetTurnaroundTime+0x128>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d802      	bhi.n	800649e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006498:	230d      	movs	r3, #13
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e04c      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a33      	ldr	r2, [pc, #204]	; (8006570 <USB_SetTurnaroundTime+0x128>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d906      	bls.n	80064b4 <USB_SetTurnaroundTime+0x6c>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4a32      	ldr	r2, [pc, #200]	; (8006574 <USB_SetTurnaroundTime+0x12c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d802      	bhi.n	80064b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064ae:	230c      	movs	r3, #12
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e041      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a2f      	ldr	r2, [pc, #188]	; (8006574 <USB_SetTurnaroundTime+0x12c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d906      	bls.n	80064ca <USB_SetTurnaroundTime+0x82>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <USB_SetTurnaroundTime+0x130>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d802      	bhi.n	80064ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064c4:	230b      	movs	r3, #11
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e036      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a2a      	ldr	r2, [pc, #168]	; (8006578 <USB_SetTurnaroundTime+0x130>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d906      	bls.n	80064e0 <USB_SetTurnaroundTime+0x98>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4a29      	ldr	r2, [pc, #164]	; (800657c <USB_SetTurnaroundTime+0x134>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d802      	bhi.n	80064e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064da:	230a      	movs	r3, #10
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e02b      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a26      	ldr	r2, [pc, #152]	; (800657c <USB_SetTurnaroundTime+0x134>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d906      	bls.n	80064f6 <USB_SetTurnaroundTime+0xae>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a25      	ldr	r2, [pc, #148]	; (8006580 <USB_SetTurnaroundTime+0x138>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d802      	bhi.n	80064f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064f0:	2309      	movs	r3, #9
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e020      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a21      	ldr	r2, [pc, #132]	; (8006580 <USB_SetTurnaroundTime+0x138>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d906      	bls.n	800650c <USB_SetTurnaroundTime+0xc4>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a20      	ldr	r2, [pc, #128]	; (8006584 <USB_SetTurnaroundTime+0x13c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d802      	bhi.n	800650c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006506:	2308      	movs	r3, #8
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e015      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a1d      	ldr	r2, [pc, #116]	; (8006584 <USB_SetTurnaroundTime+0x13c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d906      	bls.n	8006522 <USB_SetTurnaroundTime+0xda>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <USB_SetTurnaroundTime+0x140>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d802      	bhi.n	8006522 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800651c:	2307      	movs	r3, #7
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e00a      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006522:	2306      	movs	r3, #6
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e007      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800652e:	2309      	movs	r3, #9
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e001      	b.n	8006538 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006534:	2309      	movs	r3, #9
 8006536:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	029b      	lsls	r3, r3, #10
 800654c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	00d8acbf 	.word	0x00d8acbf
 8006568:	00e4e1bf 	.word	0x00e4e1bf
 800656c:	00f423ff 	.word	0x00f423ff
 8006570:	0106737f 	.word	0x0106737f
 8006574:	011a499f 	.word	0x011a499f
 8006578:	01312cff 	.word	0x01312cff
 800657c:	014ca43f 	.word	0x014ca43f
 8006580:	016e35ff 	.word	0x016e35ff
 8006584:	01a6ab1f 	.word	0x01a6ab1f
 8006588:	01e847ff 	.word	0x01e847ff

0800658c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f043 0201 	orr.w	r2, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0201 	bic.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d106      	bne.n	80065fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	e00b      	b.n	8006614 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	e001      	b.n	8006614 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e003      	b.n	800661c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006614:	2032      	movs	r0, #50	; 0x32
 8006616:	f7fc fa73 	bl	8002b00 <HAL_Delay>

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006624:	b084      	sub	sp, #16
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e009      	b.n	8006658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	3340      	adds	r3, #64	; 0x40
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	2200      	movs	r2, #0
 8006650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3301      	adds	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b0e      	cmp	r3, #14
 800665c:	d9f2      	bls.n	8006644 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d112      	bne.n	800668a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e005      	b.n	8006696 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800669c:	461a      	mov	r2, r3
 800669e:	2300      	movs	r3, #0
 80066a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	4619      	mov	r1, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	461a      	mov	r2, r3
 80066b2:	680b      	ldr	r3, [r1, #0]
 80066b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10c      	bne.n	80066d6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066c2:	2100      	movs	r1, #0
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f971 	bl	80069ac <USB_SetDevSpeed>
 80066ca:	e018      	b.n	80066fe <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066cc:	2101      	movs	r1, #1
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f96c 	bl	80069ac <USB_SetDevSpeed>
 80066d4:	e013      	b.n	80066fe <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d10c      	bne.n	80066f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066e2:	2100      	movs	r1, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f961 	bl	80069ac <USB_SetDevSpeed>
 80066ea:	e008      	b.n	80066fe <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066ec:	2101      	movs	r1, #1
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f95c 	bl	80069ac <USB_SetDevSpeed>
 80066f4:	e003      	b.n	80066fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066f6:	2103      	movs	r1, #3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f957 	bl	80069ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066fe:	2110      	movs	r1, #16
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f90b 	bl	800691c <USB_FlushTxFifo>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f929 	bl	8006968 <USB_FlushRxFifo>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006726:	461a      	mov	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	461a      	mov	r2, r3
 8006740:	2300      	movs	r3, #0
 8006742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	e043      	b.n	80067d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006760:	d118      	bne.n	8006794 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	461a      	mov	r2, r3
 8006776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e013      	b.n	80067a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	461a      	mov	r2, r3
 800678c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e008      	b.n	80067a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	461a      	mov	r2, r3
 80067a2:	2300      	movs	r3, #0
 80067a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3301      	adds	r3, #1
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d3b7      	bcc.n	800674a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e043      	b.n	8006868 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f6:	d118      	bne.n	800682a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e013      	b.n	800683c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e008      	b.n	800683c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	461a      	mov	r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	2300      	movs	r3, #0
 800684c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3301      	adds	r3, #1
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d3b7      	bcc.n	80067e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006882:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2b01      	cmp	r3, #1
 8006888:	d110      	bne.n	80068ac <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006890:	461a      	mov	r2, r3
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <USB_DevInit+0x2e8>)
 8006894:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	4619      	mov	r1, r3
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <USB_DevInit+0x2ec>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f043 0210 	orr.w	r2, r3, #16
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699a      	ldr	r2, [r3, #24]
 80068d0:	4b10      	ldr	r3, [pc, #64]	; (8006914 <USB_DevInit+0x2f0>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f043 0208 	orr.w	r2, r3, #8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d105      	bne.n	80068fc <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	4b08      	ldr	r3, [pc, #32]	; (8006918 <USB_DevInit+0x2f4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006908:	b004      	add	sp, #16
 800690a:	4770      	bx	lr
 800690c:	00800100 	.word	0x00800100
 8006910:	00010003 	.word	0x00010003
 8006914:	803c3800 	.word	0x803c3800
 8006918:	40000004 	.word	0x40000004

0800691c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	f043 0220 	orr.w	r2, r3, #32
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <USB_FlushTxFifo+0x48>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d901      	bls.n	8006948 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e006      	b.n	8006956 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b20      	cmp	r3, #32
 8006952:	d0f0      	beq.n	8006936 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	00030d40 	.word	0x00030d40

08006968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2210      	movs	r2, #16
 8006978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <USB_FlushRxFifo+0x40>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d901      	bls.n	800698c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e006      	b.n	800699a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d0f0      	beq.n	800697a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	00030d40 	.word	0x00030d40

080069ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069cc:	4313      	orrs	r3, r2
 80069ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069de:	b480      	push	{r7}
 80069e0:	b087      	sub	sp, #28
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0306 	and.w	r3, r3, #6
 80069f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 80069fe:	2300      	movs	r3, #0
 8006a00:	75fb      	strb	r3, [r7, #23]
 8006a02:	e00a      	b.n	8006a1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d002      	beq.n	8006a10 <USB_GetDevSpeed+0x32>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d102      	bne.n	8006a16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	75fb      	strb	r3, [r7, #23]
 8006a14:	e001      	b.n	8006a1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d139      	bne.n	8006ab8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	2101      	movs	r1, #1
 8006a56:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a62:	4313      	orrs	r3, r2
 8006a64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d153      	bne.n	8006b24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	78db      	ldrb	r3, [r3, #3]
 8006a96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	059b      	lsls	r3, r3, #22
 8006a9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0159      	lsls	r1, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4b20      	ldr	r3, [pc, #128]	; (8006b34 <USB_ActivateEndpoint+0x10c>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	600b      	str	r3, [r1, #0]
 8006ab6:	e035      	b.n	8006b24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	68f9      	ldr	r1, [r7, #12]
 8006ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d119      	bne.n	8006b24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	0159      	lsls	r1, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	440b      	add	r3, r1
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <USB_ActivateEndpoint+0x10c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	10008000 	.word	0x10008000

08006b38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d135      	bne.n	8006bc0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	2101      	movs	r1, #1
 8006b66:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b74:	4013      	ands	r3, r2
 8006b76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	2101      	movs	r1, #1
 8006b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b98:	4013      	ands	r3, r2
 8006b9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	0159      	lsls	r1, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <USB_DeactivateEndpoint+0x100>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
 8006bbe:	e034      	b.n	8006c2a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be0:	4013      	ands	r3, r2
 8006be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4013      	ands	r3, r2
 8006c06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	4619      	mov	r1, r3
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <USB_DeactivateEndpoint+0x104>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	ec337800 	.word	0xec337800
 8006c3c:	eff37800 	.word	0xeff37800

08006c40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	f040 812d 	bne.w	8006ebc <USB_EPStartXfer+0x27c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d132      	bne.n	8006cd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	0159      	lsls	r1, r3, #5
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	440b      	add	r3, r1
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	4619      	mov	r1, r3
 8006c86:	4b8a      	ldr	r3, [pc, #552]	; (8006eb0 <USB_EPStartXfer+0x270>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	0159      	lsls	r1, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4b7a      	ldr	r3, [pc, #488]	; (8006eb4 <USB_EPStartXfer+0x274>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	610b      	str	r3, [r1, #16]
 8006cce:	e074      	b.n	8006dba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	0159      	lsls	r1, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	440b      	add	r3, r1
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cea:	4619      	mov	r1, r3
 8006cec:	4b71      	ldr	r3, [pc, #452]	; (8006eb4 <USB_EPStartXfer+0x274>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	0159      	lsls	r1, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4b68      	ldr	r3, [pc, #416]	; (8006eb0 <USB_EPStartXfer+0x270>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6959      	ldr	r1, [r3, #20]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	440b      	add	r3, r1
 8006d2c:	1e59      	subs	r1, r3, #1
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d36:	04d9      	lsls	r1, r3, #19
 8006d38:	4b5f      	ldr	r3, [pc, #380]	; (8006eb8 <USB_EPStartXfer+0x278>)
 8006d3a:	400b      	ands	r3, r1
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	0148      	lsls	r0, r1, #5
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	4401      	add	r1, r0
 8006d44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d62:	69b9      	ldr	r1, [r7, #24]
 8006d64:	0148      	lsls	r0, r1, #5
 8006d66:	69f9      	ldr	r1, [r7, #28]
 8006d68:	4401      	add	r1, r0
 8006d6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d11f      	bne.n	8006dba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10e      	bne.n	8006dde <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d022      	beq.n	8006e0e <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	6153      	str	r3, [r2, #20]
 8006ddc:	e017      	b.n	8006e0e <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78db      	ldrb	r3, [r3, #3]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d013      	beq.n	8006e0e <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	2101      	movs	r1, #1
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	78db      	ldrb	r3, [r3, #3]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d128      	bne.n	8006e68 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d110      	bne.n	8006e48 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e00f      	b.n	8006e68 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e66:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e86:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	78db      	ldrb	r3, [r3, #3]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 80e1 	bne.w	8007054 <USB_EPStartXfer+0x414>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	68d9      	ldr	r1, [r3, #12]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	b298      	uxth	r0, r3
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fa28 	bl	80072fc <USB_WritePacket>
 8006eac:	e0d2      	b.n	8007054 <USB_EPStartXfer+0x414>
 8006eae:	bf00      	nop
 8006eb0:	e007ffff 	.word	0xe007ffff
 8006eb4:	fff80000 	.word	0xfff80000
 8006eb8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	0159      	lsls	r1, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	440b      	add	r3, r1
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4b61      	ldr	r3, [pc, #388]	; (8007060 <USB_EPStartXfer+0x420>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	0159      	lsls	r1, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	440b      	add	r3, r1
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4b5a      	ldr	r3, [pc, #360]	; (8007064 <USB_EPStartXfer+0x424>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d123      	bne.n	8006f50 <USB_EPStartXfer+0x310>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1e:	69b9      	ldr	r1, [r7, #24]
 8006f20:	0148      	lsls	r0, r1, #5
 8006f22:	69f9      	ldr	r1, [r7, #28]
 8006f24:	4401      	add	r1, r0
 8006f26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f4c:	6113      	str	r3, [r2, #16]
 8006f4e:	e033      	b.n	8006fb8 <USB_EPStartXfer+0x378>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4413      	add	r3, r2
 8006f5a:	1e5a      	subs	r2, r3, #1
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	8afb      	ldrh	r3, [r7, #22]
 8006f76:	04d9      	lsls	r1, r3, #19
 8006f78:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <USB_EPStartXfer+0x428>)
 8006f7a:	400b      	ands	r3, r1
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	0148      	lsls	r0, r1, #5
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	4401      	add	r1, r0
 8006f84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	8af9      	ldrh	r1, [r7, #22]
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa8:	69b9      	ldr	r1, [r7, #24]
 8006faa:	0148      	lsls	r0, r1, #5
 8006fac:	69f9      	ldr	r1, [r7, #28]
 8006fae:	4401      	add	r1, r0
 8006fb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10d      	bne.n	8006fda <USB_EPStartXfer+0x39a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USB_EPStartXfer+0x39a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	68d9      	ldr	r1, [r3, #12]
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd6:	460a      	mov	r2, r1
 8006fd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d128      	bne.n	8007034 <USB_EPStartXfer+0x3f4>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d110      	bne.n	8007014 <USB_EPStartXfer+0x3d4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00f      	b.n	8007034 <USB_EPStartXfer+0x3f4>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007032:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800704e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	fff80000 	.word	0xfff80000
 8007064:	e007ffff 	.word	0xe007ffff
 8007068:	1ff80000 	.word	0x1ff80000

0800706c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b01      	cmp	r3, #1
 800708a:	f040 80bd 	bne.w	8007208 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d132      	bne.n	80070fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	0159      	lsls	r1, r3, #5
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	440b      	add	r3, r1
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	4619      	mov	r1, r3
 80070b2:	4b90      	ldr	r3, [pc, #576]	; (80072f4 <USB_EP0StartXfer+0x288>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	0159      	lsls	r1, r3, #5
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	440b      	add	r3, r1
 80070ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f2:	4619      	mov	r1, r3
 80070f4:	4b80      	ldr	r3, [pc, #512]	; (80072f8 <USB_EP0StartXfer+0x28c>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	610b      	str	r3, [r1, #16]
 80070fa:	e04e      	b.n	800719a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	0159      	lsls	r1, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	440b      	add	r3, r1
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	4619      	mov	r1, r3
 8007118:	4b77      	ldr	r3, [pc, #476]	; (80072f8 <USB_EP0StartXfer+0x28c>)
 800711a:	4013      	ands	r3, r2
 800711c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	0159      	lsls	r1, r3, #5
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	440b      	add	r3, r1
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	4619      	mov	r1, r3
 800713a:	4b6e      	ldr	r3, [pc, #440]	; (80072f4 <USB_EP0StartXfer+0x288>)
 800713c:	4013      	ands	r3, r2
 800713e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	695a      	ldr	r2, [r3, #20]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d903      	bls.n	8007154 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718a:	6939      	ldr	r1, [r7, #16]
 800718c:	0148      	lsls	r0, r1, #5
 800718e:	6979      	ldr	r1, [r7, #20]
 8007190:	4401      	add	r1, r0
 8007192:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007196:	4313      	orrs	r3, r2
 8007198:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d10e      	bne.n	80071be <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01e      	beq.n	80071e6 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	6153      	str	r3, [r2, #20]
 80071bc:	e013      	b.n	80071e6 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00f      	beq.n	80071e6 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	2101      	movs	r1, #1
 80071d8:	fa01 f303 	lsl.w	r3, r1, r3
 80071dc:	6979      	ldr	r1, [r7, #20]
 80071de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e2:	4313      	orrs	r3, r2
 80071e4:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e06d      	b.n	80072e4 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	691a      	ldr	r2, [r3, #16]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	0159      	lsls	r1, r3, #5
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	440b      	add	r3, r1
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	4619      	mov	r1, r3
 8007224:	4b34      	ldr	r3, [pc, #208]	; (80072f8 <USB_EP0StartXfer+0x28c>)
 8007226:	4013      	ands	r3, r2
 8007228:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	0159      	lsls	r1, r3, #5
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	440b      	add	r3, r1
 8007240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007244:	4619      	mov	r1, r3
 8007246:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <USB_EP0StartXfer+0x288>)
 8007248:	4013      	ands	r3, r2
 800724a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800727a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007292:	6939      	ldr	r1, [r7, #16]
 8007294:	0148      	lsls	r0, r1, #5
 8007296:	6979      	ldr	r1, [r7, #20]
 8007298:	4401      	add	r1, r0
 800729a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800729e:	4313      	orrs	r3, r2
 80072a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10d      	bne.n	80072c4 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	68d9      	ldr	r1, [r3, #12]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	460a      	mov	r2, r1
 80072c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	e007ffff 	.word	0xe007ffff
 80072f8:	fff80000 	.word	0xfff80000

080072fc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4611      	mov	r1, r2
 8007308:	461a      	mov	r2, r3
 800730a:	460b      	mov	r3, r1
 800730c:	71fb      	strb	r3, [r7, #7]
 800730e:	4613      	mov	r3, r2
 8007310:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800731a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11a      	bne.n	8007358 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007322:	88bb      	ldrh	r3, [r7, #4]
 8007324:	3303      	adds	r3, #3
 8007326:	089b      	lsrs	r3, r3, #2
 8007328:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800732a:	2300      	movs	r3, #0
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e00f      	b.n	8007350 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	031a      	lsls	r2, r3, #12
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	4413      	add	r3, r2
 8007338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733c:	461a      	mov	r2, r3
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3304      	adds	r3, #4
 8007348:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	3301      	adds	r3, #1
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	d3eb      	bcc.n	8007330 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3724      	adds	r7, #36	; 0x24
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007366:	b480      	push	{r7}
 8007368:	b089      	sub	sp, #36	; 0x24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	3303      	adds	r3, #3
 8007380:	089b      	lsrs	r3, r3, #2
 8007382:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	61bb      	str	r3, [r7, #24]
 8007388:	e00b      	b.n	80073a2 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	601a      	str	r2, [r3, #0]
    pDest++;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3304      	adds	r3, #4
 800739a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	3301      	adds	r3, #1
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d3ef      	bcc.n	800738a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80073aa:	69fb      	ldr	r3, [r7, #28]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3724      	adds	r7, #36	; 0x24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d12c      	bne.n	800742e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	db12      	blt.n	800740c <USB_EPSetStall+0x54>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00f      	beq.n	800740c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	0151      	lsls	r1, r2, #5
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	440a      	add	r2, r1
 8007402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800740a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e02b      	b.n	8007486 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	db12      	blt.n	8007466 <USB_EPSetStall+0xae>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00f      	beq.n	8007466 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007464:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007484:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d128      	bne.n	8007502 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	78db      	ldrb	r3, [r3, #3]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d003      	beq.n	80074e0 <USB_EPClearStall+0x4c>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d138      	bne.n	8007552 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e027      	b.n	8007552 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007520:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	78db      	ldrb	r3, [r3, #3]
 8007526:	2b03      	cmp	r3, #3
 8007528:	d003      	beq.n	8007532 <USB_EPClearStall+0x9e>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d10f      	bne.n	8007552 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007550:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800757e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007582:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007594:	68f9      	ldr	r1, [r7, #12]
 8007596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759a:	4313      	orrs	r3, r2
 800759c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c6:	f023 0302 	bic.w	r3, r3, #2
 80075ca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80075cc:	2003      	movs	r0, #3
 80075ce:	f7fb fa97 	bl	8002b00 <HAL_Delay>

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f6:	f043 0302 	orr.w	r3, r3, #2
 80075fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80075fc:	2003      	movs	r0, #3
 80075fe:	f7fb fa7f 	bl	8002b00 <HAL_Delay>

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4013      	ands	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	0c1b      	lsrs	r3, r3, #16
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	4013      	ands	r3, r2
 8007688:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	b29b      	uxth	r3, r3
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	4013      	ands	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076c8:	68bb      	ldr	r3, [r7, #8]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b087      	sub	sp, #28
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	fa22 f303 	lsr.w	r3, r2, r3
 8007706:	01db      	lsls	r3, r3, #7
 8007708:	b2db      	uxtb	r3, r3
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4013      	ands	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007724:	68bb      	ldr	r3, [r7, #8]
}
 8007726:	4618      	mov	r0, r3
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0301 	and.w	r3, r3, #1
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	4619      	mov	r1, r3
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <USB_ActivateSetup+0x68>)
 800776e:	4013      	ands	r3, r2
 8007770:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0306 	and.w	r3, r3, #6
 800777e:	2b04      	cmp	r3, #4
 8007780:	d109      	bne.n	8007796 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007790:	f043 0303 	orr.w	r3, r3, #3
 8007794:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	fffff800 	.word	0xfffff800

080077bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	460b      	mov	r3, r1
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	333c      	adds	r3, #60	; 0x3c
 80077d2:	3304      	adds	r3, #4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4a26      	ldr	r2, [pc, #152]	; (8007874 <USB_EP0_OutStart+0xb8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d90a      	bls.n	80077f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f0:	d101      	bne.n	80077f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e037      	b.n	8007866 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fc:	461a      	mov	r2, r3
 80077fe:	2300      	movs	r3, #0
 8007800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007824:	f043 0318 	orr.w	r3, r3, #24
 8007828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007838:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800783c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d10f      	bne.n	8007864 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	4f54300a 	.word	0x4f54300a

08007878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <USB_CoreReset+0x64>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d901      	bls.n	8007896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e01b      	b.n	80078ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	daf2      	bge.n	8007884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f043 0201 	orr.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <USB_CoreReset+0x64>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d901      	bls.n	80078c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e006      	b.n	80078ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d0f0      	beq.n	80078ae <USB_CoreReset+0x36>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	00030d40 	.word	0x00030d40

080078e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7c1b      	ldrb	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d115      	bne.n	8007924 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078fc:	2202      	movs	r2, #2
 80078fe:	2181      	movs	r1, #129	; 0x81
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f005 f8d8 	bl	800cab6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800790c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007910:	2202      	movs	r2, #2
 8007912:	2101      	movs	r1, #1
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f005 f8ce 	bl	800cab6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007922:	e012      	b.n	800794a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007924:	2340      	movs	r3, #64	; 0x40
 8007926:	2202      	movs	r2, #2
 8007928:	2181      	movs	r1, #129	; 0x81
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f005 f8c3 	bl	800cab6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007936:	2340      	movs	r3, #64	; 0x40
 8007938:	2202      	movs	r2, #2
 800793a:	2101      	movs	r1, #1
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f005 f8ba 	bl	800cab6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800794a:	2308      	movs	r3, #8
 800794c:	2203      	movs	r2, #3
 800794e:	2182      	movs	r1, #130	; 0x82
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f005 f8b0 	bl	800cab6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800795c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007960:	f005 fa7a 	bl	800ce58 <malloc>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007978:	2301      	movs	r3, #1
 800797a:	73fb      	strb	r3, [r7, #15]
 800797c:	e026      	b.n	80079cc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007984:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	7c1b      	ldrb	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d109      	bne.n	80079bc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079b2:	2101      	movs	r1, #1
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f005 f96f 	bl	800cc98 <USBD_LL_PrepareReceive>
 80079ba:	e007      	b.n	80079cc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079c2:	2340      	movs	r3, #64	; 0x40
 80079c4:	2101      	movs	r1, #1
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f005 f966 	bl	800cc98 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079e6:	2181      	movs	r1, #129	; 0x81
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f005 f88a 	bl	800cb02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079f4:	2101      	movs	r1, #1
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f005 f883 	bl	800cb02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a04:	2182      	movs	r1, #130	; 0x82
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f005 f87b 	bl	800cb02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f005 fa1b 	bl	800ce68 <free>
    pdev->pClassData = NULL;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d039      	beq.n	8007ae2 <USBD_CDC_Setup+0x9e>
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d17c      	bne.n	8007b6c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d029      	beq.n	8007ace <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b25b      	sxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	da11      	bge.n	8007aa8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007a90:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	88d2      	ldrh	r2, [r2, #6]
 8007a96:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a98:	6939      	ldr	r1, [r7, #16]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f9b7 	bl	8008e14 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007aa6:	e068      	b.n	8007b7a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	785a      	ldrb	r2, [r3, #1]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007abe:	6939      	ldr	r1, [r7, #16]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f9d2 	bl	8008e70 <USBD_CtlPrepareRx>
    break;
 8007acc:	e055      	b.n	8007b7a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	7850      	ldrb	r0, [r2, #1]
 8007ada:	2200      	movs	r2, #0
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4798      	blx	r3
    break;
 8007ae0:	e04b      	b.n	8007b7a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b0a      	cmp	r3, #10
 8007ae8:	d017      	beq.n	8007b1a <USBD_CDC_Setup+0xd6>
 8007aea:	2b0b      	cmp	r3, #11
 8007aec:	d029      	beq.n	8007b42 <USBD_CDC_Setup+0xfe>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d133      	bne.n	8007b5a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d107      	bne.n	8007b0c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007afc:	f107 030c 	add.w	r3, r7, #12
 8007b00:	2202      	movs	r2, #2
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f985 	bl	8008e14 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007b0a:	e02e      	b.n	8007b6a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 f915 	bl	8008d3e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007b14:	2302      	movs	r3, #2
 8007b16:	75fb      	strb	r3, [r7, #23]
      break;
 8007b18:	e027      	b.n	8007b6a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d107      	bne.n	8007b34 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007b24:	f107 030f 	add.w	r3, r7, #15
 8007b28:	2201      	movs	r2, #1
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f971 	bl	8008e14 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007b32:	e01a      	b.n	8007b6a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f901 	bl	8008d3e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b40:	e013      	b.n	8007b6a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d00d      	beq.n	8007b68 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 f8f5 	bl	8008d3e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007b54:	2302      	movs	r3, #2
 8007b56:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b58:	e006      	b.n	8007b68 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f8ee 	bl	8008d3e <USBD_CtlError>
      ret = USBD_FAIL;
 8007b62:	2302      	movs	r3, #2
 8007b64:	75fb      	strb	r3, [r7, #23]
      break;
 8007b66:	e000      	b.n	8007b6a <USBD_CDC_Setup+0x126>
      break;
 8007b68:	bf00      	nop
    }
    break;
 8007b6a:	e006      	b.n	8007b7a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 f8e5 	bl	8008d3e <USBD_CtlError>
    ret = USBD_FAIL;
 8007b74:	2302      	movs	r3, #2
 8007b76:	75fb      	strb	r3, [r7, #23]
    break;
 8007b78:	bf00      	nop
  }

  return ret;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b96:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007b9e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d03a      	beq.n	8007c20 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	331c      	adds	r3, #28
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d029      	beq.n	8007c14 <USBD_CDC_DataIn+0x90>
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	331c      	adds	r3, #28
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	78f9      	ldrb	r1, [r7, #3]
 8007bd4:	68b8      	ldr	r0, [r7, #8]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	00db      	lsls	r3, r3, #3
 8007bda:	1a5b      	subs	r3, r3, r1
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4403      	add	r3, r0
 8007be0:	3344      	adds	r3, #68	; 0x44
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007be8:	fb03 f301 	mul.w	r3, r3, r1
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d110      	bne.n	8007c14 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	331c      	adds	r3, #28
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007c06:	78f9      	ldrb	r1, [r7, #3]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f005 f820 	bl	800cc52 <USBD_LL_Transmit>
 8007c12:	e003      	b.n	8007c1c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e000      	b.n	8007c22 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c20:	2302      	movs	r3, #2
  }
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f005 f84b 	bl	800ccde <USBD_LL_GetRxDataSize>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00d      	beq.n	8007c76 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4798      	blx	r3

    return USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e000      	b.n	8007c78 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c76:	2302      	movs	r3, #2
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c8e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d015      	beq.n	8007cc6 <USBD_CDC_EP0_RxReady+0x46>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ca0:	2bff      	cmp	r3, #255	; 0xff
 8007ca2:	d010      	beq.n	8007cc6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007cb2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cba:	b292      	uxth	r2, r2
 8007cbc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	22ff      	movs	r2, #255	; 0xff
 8007cc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2243      	movs	r2, #67	; 0x43
 8007cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cde:	4b03      	ldr	r3, [pc, #12]	; (8007cec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000090 	.word	0x20000090

08007cf0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2243      	movs	r2, #67	; 0x43
 8007cfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	2000004c 	.word	0x2000004c

08007d10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2243      	movs	r2, #67	; 0x43
 8007d1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	200000d4 	.word	0x200000d4

08007d30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220a      	movs	r2, #10
 8007d3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	20000008 	.word	0x20000008

08007d50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d92:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d9c:	88fa      	ldrh	r2, [r7, #6]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007dc2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d017      	beq.n	8007e24 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7c1b      	ldrb	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e06:	2101      	movs	r1, #1
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f004 ff45 	bl	800cc98 <USBD_LL_PrepareReceive>
 8007e0e:	e007      	b.n	8007e20 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	2101      	movs	r1, #1
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f004 ff3c 	bl	800cc98 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e000      	b.n	8007e26 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e24:	2302      	movs	r3, #2
  }
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e42:	2302      	movs	r3, #2
 8007e44:	e01a      	b.n	8007e7c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	79fa      	ldrb	r2, [r7, #7]
 8007e72:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f004 fdb7 	bl	800c9e8 <USBD_LL_Init>

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
 8007ea4:	e001      	b.n	8007eaa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f004 fddd 	bl	800ca80 <USBD_LL_Start>

  return USBD_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00c      	beq.n	8007f1a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 feb1 	bl	8008cc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d00c      	beq.n	8007fa0 <USBD_LL_SetupStage+0x56>
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d302      	bcc.n	8007f90 <USBD_LL_SetupStage+0x46>
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d010      	beq.n	8007fb0 <USBD_LL_SetupStage+0x66>
 8007f8e:	e017      	b.n	8007fc0 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa05 	bl	80083a8 <USBD_StdDevReq>
    break;
 8007f9e:	e01a      	b.n	8007fd6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fa67 	bl	800847c <USBD_StdItfReq>
    break;
 8007fae:	e012      	b.n	8007fd6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 faa5 	bl	8008508 <USBD_StdEPReq>
    break;
 8007fbe:	e00a      	b.n	8007fd6 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f004 fdb6 	bl	800cb40 <USBD_LL_StallEP>
    break;
 8007fd4:	bf00      	nop
  }

  return USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007fee:	7afb      	ldrb	r3, [r7, #11]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d14b      	bne.n	800808c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007ffa:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008002:	2b03      	cmp	r3, #3
 8008004:	d134      	bne.n	8008070 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	429a      	cmp	r2, r3
 8008010:	d919      	bls.n	8008046 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	1ad2      	subs	r2, r2, r3
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008028:	429a      	cmp	r2, r3
 800802a:	d203      	bcs.n	8008034 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008030:	b29b      	uxth	r3, r3
 8008032:	e002      	b.n	800803a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008038:	b29b      	uxth	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 ff34 	bl	8008eac <USBD_CtlContinueRx>
 8008044:	e038      	b.n	80080b8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008058:	2b03      	cmp	r3, #3
 800805a:	d105      	bne.n	8008068 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 ff31 	bl	8008ed0 <USBD_CtlSendStatus>
 800806e:	e023      	b.n	80080b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008076:	2b05      	cmp	r3, #5
 8008078:	d11e      	bne.n	80080b8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008082:	2100      	movs	r1, #0
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f004 fd5b 	bl	800cb40 <USBD_LL_StallEP>
 800808a:	e015      	b.n	80080b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d108      	bne.n	80080b4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	7afa      	ldrb	r2, [r7, #11]
 80080ac:	4611      	mov	r1, r2
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	4798      	blx	r3
 80080b2:	e001      	b.n	80080b8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080b4:	2302      	movs	r3, #2
 80080b6:	e000      	b.n	80080ba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	460b      	mov	r3, r1
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d17f      	bne.n	80081d6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3314      	adds	r3, #20
 80080da:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d15c      	bne.n	80081a0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d915      	bls.n	800811e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	b29b      	uxth	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fe9e 	bl	8008e4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008110:	2300      	movs	r3, #0
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f004 fdbe 	bl	800cc98 <USBD_LL_PrepareReceive>
 800811c:	e04e      	b.n	80081bc <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	6912      	ldr	r2, [r2, #16]
 8008126:	fbb3 f1f2 	udiv	r1, r3, r2
 800812a:	fb02 f201 	mul.w	r2, r2, r1
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11c      	bne.n	800816e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d316      	bcc.n	800816e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800814a:	429a      	cmp	r2, r3
 800814c:	d20f      	bcs.n	800816e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fe7a 	bl	8008e4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f004 fd96 	bl	800cc98 <USBD_LL_PrepareReceive>
 800816c:	e026      	b.n	80081bc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008180:	2b03      	cmp	r3, #3
 8008182:	d105      	bne.n	8008190 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008190:	2180      	movs	r1, #128	; 0x80
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f004 fcd4 	bl	800cb40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 feac 	bl	8008ef6 <USBD_CtlReceiveStatus>
 800819e:	e00d      	b.n	80081bc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d004      	beq.n	80081b4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80081b4:	2180      	movs	r1, #128	; 0x80
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f004 fcc2 	bl	800cb40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d11d      	bne.n	8008202 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff fe82 	bl	8007ed0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80081d4:	e015      	b.n	8008202 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d108      	bne.n	80081fe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	7afa      	ldrb	r2, [r7, #11]
 80081f6:	4611      	mov	r1, r2
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	4798      	blx	r3
 80081fc:	e001      	b.n	8008202 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081fe:	2302      	movs	r3, #2
 8008200:	e000      	b.n	8008204 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008214:	2340      	movs	r3, #64	; 0x40
 8008216:	2200      	movs	r2, #0
 8008218:	2100      	movs	r1, #0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f004 fc4b 	bl	800cab6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2240      	movs	r2, #64	; 0x40
 800822c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008230:	2340      	movs	r3, #64	; 0x40
 8008232:	2200      	movs	r2, #0
 8008234:	2180      	movs	r1, #128	; 0x80
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f004 fc3d 	bl	800cab6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2240      	movs	r2, #64	; 0x40
 8008246:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6852      	ldr	r2, [r2, #4]
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	4611      	mov	r1, r2
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
  }

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008308:	2b03      	cmp	r3, #3
 800830a:	d10b      	bne.n	8008324 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6852      	ldr	r2, [r2, #4]
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	4611      	mov	r1, r2
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d004      	beq.n	80083cc <USBD_StdDevReq+0x24>
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d002      	beq.n	80083cc <USBD_StdDevReq+0x24>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d008      	beq.n	80083dc <USBD_StdDevReq+0x34>
 80083ca:	e04c      	b.n	8008466 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
    break;
 80083da:	e049      	b.n	8008470 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	785b      	ldrb	r3, [r3, #1]
 80083e0:	2b09      	cmp	r3, #9
 80083e2:	d83a      	bhi.n	800845a <USBD_StdDevReq+0xb2>
 80083e4:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <USBD_StdDevReq+0x44>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	0800843d 	.word	0x0800843d
 80083f0:	08008451 	.word	0x08008451
 80083f4:	0800845b 	.word	0x0800845b
 80083f8:	08008447 	.word	0x08008447
 80083fc:	0800845b 	.word	0x0800845b
 8008400:	0800841f 	.word	0x0800841f
 8008404:	08008415 	.word	0x08008415
 8008408:	0800845b 	.word	0x0800845b
 800840c:	08008433 	.word	0x08008433
 8008410:	08008429 	.word	0x08008429
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f9d2 	bl	80087c0 <USBD_GetDescriptor>
      break;
 800841c:	e022      	b.n	8008464 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fae3 	bl	80089ec <USBD_SetAddress>
      break;
 8008426:	e01d      	b.n	8008464 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fb20 	bl	8008a70 <USBD_SetConfig>
      break;
 8008430:	e018      	b.n	8008464 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fba9 	bl	8008b8c <USBD_GetConfig>
      break;
 800843a:	e013      	b.n	8008464 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fbd8 	bl	8008bf4 <USBD_GetStatus>
      break;
 8008444:	e00e      	b.n	8008464 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc06 	bl	8008c5a <USBD_SetFeature>
      break;
 800844e:	e009      	b.n	8008464 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fc15 	bl	8008c82 <USBD_ClrFeature>
      break;
 8008458:	e004      	b.n	8008464 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc6e 	bl	8008d3e <USBD_CtlError>
      break;
 8008462:	bf00      	nop
    }
    break;
 8008464:	e004      	b.n	8008470 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fc68 	bl	8008d3e <USBD_CtlError>
    break;
 800846e:	bf00      	nop
  }

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop

0800847c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008492:	2b20      	cmp	r3, #32
 8008494:	d003      	beq.n	800849e <USBD_StdItfReq+0x22>
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d001      	beq.n	800849e <USBD_StdItfReq+0x22>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d12a      	bne.n	80084f4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084a4:	3b01      	subs	r3, #1
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d81d      	bhi.n	80084e6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	889b      	ldrh	r3, [r3, #4]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d813      	bhi.n	80084dc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d110      	bne.n	80084f0 <USBD_StdItfReq+0x74>
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10d      	bne.n	80084f0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fcfb 	bl	8008ed0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80084da:	e009      	b.n	80084f0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fc2d 	bl	8008d3e <USBD_CtlError>
      break;
 80084e4:	e004      	b.n	80084f0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fc28 	bl	8008d3e <USBD_CtlError>
      break;
 80084ee:	e000      	b.n	80084f2 <USBD_StdItfReq+0x76>
      break;
 80084f0:	bf00      	nop
    }
    break;
 80084f2:	e004      	b.n	80084fe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc21 	bl	8008d3e <USBD_CtlError>
    break;
 80084fc:	bf00      	nop
  }

  return USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	889b      	ldrh	r3, [r3, #4]
 800851a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008524:	2b20      	cmp	r3, #32
 8008526:	d004      	beq.n	8008532 <USBD_StdEPReq+0x2a>
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	d002      	beq.n	8008532 <USBD_StdEPReq+0x2a>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <USBD_StdEPReq+0x3a>
 8008530:	e13b      	b.n	80087aa <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
    break;
 8008540:	e138      	b.n	80087b4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800854a:	2b20      	cmp	r3, #32
 800854c:	d10a      	bne.n	8008564 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	e128      	b.n	80087b6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d03e      	beq.n	80085ea <USBD_StdEPReq+0xe2>
 800856c:	2b03      	cmp	r3, #3
 800856e:	d002      	beq.n	8008576 <USBD_StdEPReq+0x6e>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d070      	beq.n	8008656 <USBD_StdEPReq+0x14e>
 8008574:	e113      	b.n	800879e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800857c:	2b02      	cmp	r3, #2
 800857e:	d002      	beq.n	8008586 <USBD_StdEPReq+0x7e>
 8008580:	2b03      	cmp	r3, #3
 8008582:	d015      	beq.n	80085b0 <USBD_StdEPReq+0xa8>
 8008584:	e02b      	b.n	80085de <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <USBD_StdEPReq+0x9e>
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	2b80      	cmp	r3, #128	; 0x80
 8008590:	d009      	beq.n	80085a6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f004 fad2 	bl	800cb40 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800859c:	2180      	movs	r1, #128	; 0x80
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f004 face 	bl	800cb40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085a4:	e020      	b.n	80085e8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fbc8 	bl	8008d3e <USBD_CtlError>
        break;
 80085ae:	e01b      	b.n	80085e8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	885b      	ldrh	r3, [r3, #2]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10e      	bne.n	80085d6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <USBD_StdEPReq+0xce>
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b80      	cmp	r3, #128	; 0x80
 80085c2:	d008      	beq.n	80085d6 <USBD_StdEPReq+0xce>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	88db      	ldrh	r3, [r3, #6]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f004 fab5 	bl	800cb40 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fc7a 	bl	8008ed0 <USBD_CtlSendStatus>

        break;
 80085dc:	e004      	b.n	80085e8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fbac 	bl	8008d3e <USBD_CtlError>
        break;
 80085e6:	bf00      	nop
      }
      break;
 80085e8:	e0de      	b.n	80087a8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d002      	beq.n	80085fa <USBD_StdEPReq+0xf2>
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d015      	beq.n	8008624 <USBD_StdEPReq+0x11c>
 80085f8:	e026      	b.n	8008648 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <USBD_StdEPReq+0x112>
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d009      	beq.n	800861a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f004 fa98 	bl	800cb40 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008610:	2180      	movs	r1, #128	; 0x80
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f004 fa94 	bl	800cb40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008618:	e01c      	b.n	8008654 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fb8e 	bl	8008d3e <USBD_CtlError>
        break;
 8008622:	e017      	b.n	8008654 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	885b      	ldrh	r3, [r3, #2]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d112      	bne.n	8008652 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f004 fa9f 	bl	800cb7e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fc45 	bl	8008ed0 <USBD_CtlSendStatus>
        }
        break;
 8008646:	e004      	b.n	8008652 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fb77 	bl	8008d3e <USBD_CtlError>
        break;
 8008650:	e000      	b.n	8008654 <USBD_StdEPReq+0x14c>
        break;
 8008652:	bf00      	nop
      }
      break;
 8008654:	e0a8      	b.n	80087a8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800865c:	2b02      	cmp	r3, #2
 800865e:	d002      	beq.n	8008666 <USBD_StdEPReq+0x15e>
 8008660:	2b03      	cmp	r3, #3
 8008662:	d031      	beq.n	80086c8 <USBD_StdEPReq+0x1c0>
 8008664:	e095      	b.n	8008792 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <USBD_StdEPReq+0x174>
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d004      	beq.n	800867c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fb62 	bl	8008d3e <USBD_CtlError>
          break;
 800867a:	e08f      	b.n	800879c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800867c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	da0b      	bge.n	800869c <USBD_StdEPReq+0x194>
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	3310      	adds	r3, #16
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	3304      	adds	r3, #4
 800869a:	e00a      	b.n	80086b2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2202      	movs	r2, #2
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fba7 	bl	8008e14 <USBD_CtlSendData>
          break;
 80086c6:	e069      	b.n	800879c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80086c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da11      	bge.n	80086f4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	f003 020f 	and.w	r2, r3, #15
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	3318      	adds	r3, #24
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d117      	bne.n	800871a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fb26 	bl	8008d3e <USBD_CtlError>
            break;
 80086f2:	e053      	b.n	800879c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	f003 020f 	and.w	r2, r3, #15
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fb13 	bl	8008d3e <USBD_CtlError>
            break;
 8008718:	e040      	b.n	800879c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800871a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	da0b      	bge.n	800873a <USBD_StdEPReq+0x232>
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	3310      	adds	r3, #16
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	4413      	add	r3, r2
 8008736:	3304      	adds	r3, #4
 8008738:	e00a      	b.n	8008750 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	4413      	add	r3, r2
 8008750:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <USBD_StdEPReq+0x256>
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b80      	cmp	r3, #128	; 0x80
 800875c:	d103      	bne.n	8008766 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e00e      	b.n	8008784 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f004 fa26 	bl	800cbbc <USBD_LL_IsStallEP>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	e002      	b.n	8008784 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2202      	movs	r2, #2
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fb42 	bl	8008e14 <USBD_CtlSendData>
          break;
 8008790:	e004      	b.n	800879c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fad2 	bl	8008d3e <USBD_CtlError>
        break;
 800879a:	bf00      	nop
      }
      break;
 800879c:	e004      	b.n	80087a8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 facc 	bl	8008d3e <USBD_CtlError>
      break;
 80087a6:	bf00      	nop
    }
    break;
 80087a8:	e004      	b.n	80087b4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fac6 	bl	8008d3e <USBD_CtlError>
    break;
 80087b2:	bf00      	nop
  }

  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b0e      	cmp	r3, #14
 80087d6:	f200 80e5 	bhi.w	80089a4 <USBD_GetDescriptor+0x1e4>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <USBD_GetDescriptor+0x20>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008835 	.word	0x08008835
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	0800888d 	.word	0x0800888d
 80087ec:	080089a5 	.word	0x080089a5
 80087f0:	080089a5 	.word	0x080089a5
 80087f4:	08008951 	.word	0x08008951
 80087f8:	08008977 	.word	0x08008977
 80087fc:	080089a5 	.word	0x080089a5
 8008800:	080089a5 	.word	0x080089a5
 8008804:	080089a5 	.word	0x080089a5
 8008808:	080089a5 	.word	0x080089a5
 800880c:	080089a5 	.word	0x080089a5
 8008810:	080089a5 	.word	0x080089a5
 8008814:	080089a5 	.word	0x080089a5
 8008818:	0800881d 	.word	0x0800881d
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 010a 	add.w	r1, r7, #10
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
    break;
 8008832:	e0bc      	b.n	80089ae <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 010a 	add.w	r1, r7, #10
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
    break;
 800884a:	e0b0      	b.n	80089ae <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7c1b      	ldrb	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10d      	bne.n	8008870 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f107 020a 	add.w	r2, r7, #10
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800886e:	e09e      	b.n	80089ae <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	f107 020a 	add.w	r2, r7, #10
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	2202      	movs	r2, #2
 8008888:	701a      	strb	r2, [r3, #0]
    break;
 800888a:	e090      	b.n	80089ae <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b05      	cmp	r3, #5
 8008894:	d856      	bhi.n	8008944 <USBD_GetDescriptor+0x184>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <USBD_GetDescriptor+0xdc>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088cd 	.word	0x080088cd
 80088a4:	080088e5 	.word	0x080088e5
 80088a8:	080088fd 	.word	0x080088fd
 80088ac:	08008915 	.word	0x08008915
 80088b0:	0800892d 	.word	0x0800892d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	7c12      	ldrb	r2, [r2, #16]
 80088c0:	f107 010a 	add.w	r1, r7, #10
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	60f8      	str	r0, [r7, #12]
      break;
 80088ca:	e040      	b.n	800894e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 010a 	add.w	r1, r7, #10
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      break;
 80088e2:	e034      	b.n	800894e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	7c12      	ldrb	r2, [r2, #16]
 80088f0:	f107 010a 	add.w	r1, r7, #10
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
      break;
 80088fa:	e028      	b.n	800894e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 010a 	add.w	r1, r7, #10
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
      break;
 8008912:	e01c      	b.n	800894e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	f107 010a 	add.w	r1, r7, #10
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
      break;
 800892a:	e010      	b.n	800894e <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 010a 	add.w	r1, r7, #10
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
      break;
 8008942:	e004      	b.n	800894e <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9f9 	bl	8008d3e <USBD_CtlError>
      return;
 800894c:	e04b      	b.n	80089e6 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800894e:	e02e      	b.n	80089ae <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7c1b      	ldrb	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d109      	bne.n	800896c <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800895e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008960:	f107 020a 	add.w	r2, r7, #10
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	60f8      	str	r0, [r7, #12]
      break;
 800896a:	e020      	b.n	80089ae <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f9e5 	bl	8008d3e <USBD_CtlError>
      return;
 8008974:	e037      	b.n	80089e6 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7c1b      	ldrb	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10d      	bne.n	800899a <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	f107 020a 	add.w	r2, r7, #10
 800898a:	4610      	mov	r0, r2
 800898c:	4798      	blx	r3
 800898e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3301      	adds	r3, #1
 8008994:	2207      	movs	r2, #7
 8008996:	701a      	strb	r2, [r3, #0]
      break;
 8008998:	e009      	b.n	80089ae <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9ce 	bl	8008d3e <USBD_CtlError>
      return;
 80089a2:	e020      	b.n	80089e6 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f9c9 	bl	8008d3e <USBD_CtlError>
    return;
 80089ac:	e01b      	b.n	80089e6 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 80089ae:	897b      	ldrh	r3, [r7, #10]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d011      	beq.n	80089d8 <USBD_GetDescriptor+0x218>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	88db      	ldrh	r3, [r3, #6]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00d      	beq.n	80089d8 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	88da      	ldrh	r2, [r3, #6]
 80089c0:	897b      	ldrh	r3, [r7, #10]
 80089c2:	4293      	cmp	r3, r2
 80089c4:	bf28      	it	cs
 80089c6:	4613      	movcs	r3, r2
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80089cc:	897b      	ldrh	r3, [r7, #10]
 80089ce:	461a      	mov	r2, r3
 80089d0:	68f9      	ldr	r1, [r7, #12]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa1e 	bl	8008e14 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	88db      	ldrh	r3, [r3, #6]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa75 	bl	8008ed0 <USBD_CtlSendStatus>
  }
}
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	889b      	ldrh	r3, [r3, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d130      	bne.n	8008a60 <USBD_SetAddress+0x74>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	88db      	ldrh	r3, [r3, #6]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d12c      	bne.n	8008a60 <USBD_SetAddress+0x74>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	885b      	ldrh	r3, [r3, #2]
 8008a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a0c:	d828      	bhi.n	8008a60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	885b      	ldrh	r3, [r3, #2]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d104      	bne.n	8008a2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f989 	bl	8008d3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2c:	e01c      	b.n	8008a68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7bfa      	ldrb	r2, [r7, #15]
 8008a32:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f004 f8ea 	bl	800cc14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fa45 	bl	8008ed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a54:	e008      	b.n	8008a68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5e:	e003      	b.n	8008a68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f96b 	bl	8008d3e <USBD_CtlError>
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	4b41      	ldr	r3, [pc, #260]	; (8008b88 <USBD_SetConfig+0x118>)
 8008a82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a84:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <USBD_SetConfig+0x118>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d904      	bls.n	8008a96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f955 	bl	8008d3e <USBD_CtlError>
 8008a94:	e075      	b.n	8008b82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d002      	beq.n	8008aa6 <USBD_SetConfig+0x36>
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d023      	beq.n	8008aec <USBD_SetConfig+0x7c>
 8008aa4:	e062      	b.n	8008b6c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008aa6:	4b38      	ldr	r3, [pc, #224]	; (8008b88 <USBD_SetConfig+0x118>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01a      	beq.n	8008ae4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008aae:	4b36      	ldr	r3, [pc, #216]	; (8008b88 <USBD_SetConfig+0x118>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2203      	movs	r2, #3
 8008abc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ac0:	4b31      	ldr	r3, [pc, #196]	; (8008b88 <USBD_SetConfig+0x118>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff fa0d 	bl	8007ee6 <USBD_SetClassConfig>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d104      	bne.n	8008adc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f932 	bl	8008d3e <USBD_CtlError>
          return;
 8008ada:	e052      	b.n	8008b82 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f9f7 	bl	8008ed0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008ae2:	e04e      	b.n	8008b82 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f9f3 	bl	8008ed0 <USBD_CtlSendStatus>
      break;
 8008aea:	e04a      	b.n	8008b82 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008aec:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <USBD_SetConfig+0x118>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d112      	bne.n	8008b1a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008afc:	4b22      	ldr	r3, [pc, #136]	; (8008b88 <USBD_SetConfig+0x118>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b06:	4b20      	ldr	r3, [pc, #128]	; (8008b88 <USBD_SetConfig+0x118>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff fa09 	bl	8007f24 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9dc 	bl	8008ed0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008b18:	e033      	b.n	8008b82 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <USBD_SetConfig+0x118>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d01d      	beq.n	8008b64 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff f9f7 	bl	8007f24 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <USBD_SetConfig+0x118>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b40:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <USBD_SetConfig+0x118>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff f9cd 	bl	8007ee6 <USBD_SetClassConfig>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d104      	bne.n	8008b5c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8f2 	bl	8008d3e <USBD_CtlError>
          return;
 8008b5a:	e012      	b.n	8008b82 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9b7 	bl	8008ed0 <USBD_CtlSendStatus>
      break;
 8008b62:	e00e      	b.n	8008b82 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9b3 	bl	8008ed0 <USBD_CtlSendStatus>
      break;
 8008b6a:	e00a      	b.n	8008b82 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f8e5 	bl	8008d3e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <USBD_SetConfig+0x118>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff f9d2 	bl	8007f24 <USBD_ClrClassConfig>
      break;
 8008b80:	bf00      	nop
    }
  }
}
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000214 	.word	0x20000214

08008b8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88db      	ldrh	r3, [r3, #6]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d004      	beq.n	8008ba8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f8cc 	bl	8008d3e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008ba6:	e021      	b.n	8008bec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	db17      	blt.n	8008be2 <USBD_GetConfig+0x56>
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	dd02      	ble.n	8008bbc <USBD_GetConfig+0x30>
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d00b      	beq.n	8008bd2 <USBD_GetConfig+0x46>
 8008bba:	e012      	b.n	8008be2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f922 	bl	8008e14 <USBD_CtlSendData>
      break;
 8008bd0:	e00c      	b.n	8008bec <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f91a 	bl	8008e14 <USBD_CtlSendData>
      break;
 8008be0:	e004      	b.n	8008bec <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8aa 	bl	8008d3e <USBD_CtlError>
      break;
 8008bea:	bf00      	nop
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c04:	3b01      	subs	r3, #1
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d81e      	bhi.n	8008c48 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	88db      	ldrh	r3, [r3, #6]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d004      	beq.n	8008c1c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f892 	bl	8008d3e <USBD_CtlError>
      break;
 8008c1a:	e01a      	b.n	8008c52 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f043 0202 	orr.w	r2, r3, #2
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8e7 	bl	8008e14 <USBD_CtlSendData>
    break;
 8008c46:	e004      	b.n	8008c52 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f877 	bl	8008d3e <USBD_CtlError>
    break;
 8008c50:	bf00      	nop
  }
}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d106      	bne.n	8008c7a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f92b 	bl	8008ed0 <USBD_CtlSendStatus>
  }

}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d80b      	bhi.n	8008cb0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	885b      	ldrh	r3, [r3, #2]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10c      	bne.n	8008cba <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f911 	bl	8008ed0 <USBD_CtlSendStatus>
    }
    break;
 8008cae:	e004      	b.n	8008cba <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f843 	bl	8008d3e <USBD_CtlError>
    break;
 8008cb8:	e000      	b.n	8008cbc <USBD_ClrFeature+0x3a>
    break;
 8008cba:	bf00      	nop
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781a      	ldrb	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	785a      	ldrb	r2, [r3, #1]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	3302      	adds	r3, #2
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	3303      	adds	r3, #3
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	3305      	adds	r3, #5
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	4413      	add	r3, r2
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	3306      	adds	r3, #6
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	3307      	adds	r3, #7
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	80da      	strh	r2, [r3, #6]

}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008d48:	2180      	movs	r1, #128	; 0x80
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f003 fef8 	bl	800cb40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008d50:	2100      	movs	r1, #0
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f003 fef4 	bl	800cb40 <USBD_LL_StallEP>
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d032      	beq.n	8008ddc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 f834 	bl	8008de4 <USBD_GetLen>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	75fa      	strb	r2, [r7, #23]
 8008d90:	461a      	mov	r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4413      	add	r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	7812      	ldrb	r2, [r2, #0]
 8008d9a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	75fa      	strb	r2, [r7, #23]
 8008da2:	461a      	mov	r2, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4413      	add	r3, r2
 8008da8:	2203      	movs	r2, #3
 8008daa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008dac:	e012      	b.n	8008dd4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	60fa      	str	r2, [r7, #12]
 8008db4:	7dfa      	ldrb	r2, [r7, #23]
 8008db6:	1c51      	adds	r1, r2, #1
 8008db8:	75f9      	strb	r1, [r7, #23]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	440a      	add	r2, r1
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	75fa      	strb	r2, [r7, #23]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	4413      	add	r3, r2
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e8      	bne.n	8008dae <USBD_GetString+0x4e>
    }
  }
}
 8008ddc:	bf00      	nop
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008df0:	e005      	b.n	8008dfe <USBD_GetLen+0x1a>
    {
        len++;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	3301      	adds	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f5      	bne.n	8008df2 <USBD_GetLen+0xe>
    }

    return len;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2202      	movs	r2, #2
 8008e26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e30:	88fa      	ldrh	r2, [r7, #6]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f003 ff08 	bl	800cc52 <USBD_LL_Transmit>

  return USBD_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f003 fef6 	bl	800cc52 <USBD_LL_Transmit>

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2203      	movs	r2, #3
 8008e82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f003 fefb 	bl	800cc98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f003 fee9 	bl	800cc98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2204      	movs	r2, #4
 8008edc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f003 feb3 	bl	800cc52 <USBD_LL_Transmit>

  return USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2205      	movs	r2, #5
 8008f02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008f06:	2300      	movs	r3, #0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f003 fec3 	bl	800cc98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f22:	f3ef 8305 	mrs	r3, IPSR
 8008f26:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f32:	607b      	str	r3, [r7, #4]
  return(result);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <osKernelInitialize+0x32>
 8008f3a:	4b11      	ldr	r3, [pc, #68]	; (8008f80 <osKernelInitialize+0x64>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d109      	bne.n	8008f56 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f42:	f3ef 8311 	mrs	r3, BASEPRI
 8008f46:	603b      	str	r3, [r7, #0]
  return(result);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008f4e:	f06f 0305 	mvn.w	r3, #5
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e00c      	b.n	8008f70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f56:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <osKernelInitialize+0x64>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d105      	bne.n	8008f6a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008f5e:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <osKernelInitialize+0x64>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e002      	b.n	8008f70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008f70:	68fb      	ldr	r3, [r7, #12]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20000218 	.word	0x20000218

08008f84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f8a:	f3ef 8305 	mrs	r3, IPSR
 8008f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10f      	bne.n	8008fb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f96:	f3ef 8310 	mrs	r3, PRIMASK
 8008f9a:	607b      	str	r3, [r7, #4]
  return(result);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <osKernelStart+0x32>
 8008fa2:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <osKernelStart+0x64>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d109      	bne.n	8008fbe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008faa:	f3ef 8311 	mrs	r3, BASEPRI
 8008fae:	603b      	str	r3, [r7, #0]
  return(result);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <osKernelStart+0x3a>
    stat = osErrorISR;
 8008fb6:	f06f 0305 	mvn.w	r3, #5
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	e00e      	b.n	8008fdc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fbe:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <osKernelStart+0x64>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d107      	bne.n	8008fd6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008fc6:	4b08      	ldr	r3, [pc, #32]	; (8008fe8 <osKernelStart+0x64>)
 8008fc8:	2202      	movs	r2, #2
 8008fca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008fcc:	f001 fc5e 	bl	800a88c <vTaskStartScheduler>
      stat = osOK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e002      	b.n	8008fdc <osKernelStart+0x58>
    } else {
      stat = osError;
 8008fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000218 	.word	0x20000218

08008fec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff2:	f3ef 8305 	mrs	r3, IPSR
 8008ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10f      	bne.n	800901e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8009002:	607b      	str	r3, [r7, #4]
  return(result);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <osKernelGetTickCount+0x32>
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <osKernelGetTickCount+0x4c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d109      	bne.n	8009026 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009012:	f3ef 8311 	mrs	r3, BASEPRI
 8009016:	603b      	str	r3, [r7, #0]
  return(result);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800901e:	f001 fd59 	bl	800aad4 <xTaskGetTickCountFromISR>
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	e002      	b.n	800902c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009026:	f001 fd45 	bl	800aab4 <xTaskGetTickCount>
 800902a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800902c:	68fb      	ldr	r3, [r7, #12]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000218 	.word	0x20000218

0800903c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009044:	4618      	mov	r0, r3
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009050:	b580      	push	{r7, lr}
 8009052:	b092      	sub	sp, #72	; 0x48
 8009054:	af04      	add	r7, sp, #16
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009060:	f3ef 8305 	mrs	r3, IPSR
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009068:	2b00      	cmp	r3, #0
 800906a:	f040 8094 	bne.w	8009196 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906e:	f3ef 8310 	mrs	r3, PRIMASK
 8009072:	623b      	str	r3, [r7, #32]
  return(result);
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 808d 	bne.w	8009196 <osThreadNew+0x146>
 800907c:	4b48      	ldr	r3, [pc, #288]	; (80091a0 <osThreadNew+0x150>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d106      	bne.n	8009092 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009084:	f3ef 8311 	mrs	r3, BASEPRI
 8009088:	61fb      	str	r3, [r7, #28]
  return(result);
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f040 8082 	bne.w	8009196 <osThreadNew+0x146>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d07e      	beq.n	8009196 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009098:	2380      	movs	r3, #128	; 0x80
 800909a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800909c:	2318      	movs	r3, #24
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80090a0:	2300      	movs	r3, #0
 80090a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80090a4:	f107 031b 	add.w	r3, r7, #27
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80090aa:	f04f 33ff 	mov.w	r3, #4294967295
 80090ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d045      	beq.n	8009142 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <osThreadNew+0x74>
        name = attr->name;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d008      	beq.n	80090ea <osThreadNew+0x9a>
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	2b38      	cmp	r3, #56	; 0x38
 80090dc:	d805      	bhi.n	80090ea <osThreadNew+0x9a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <osThreadNew+0x9e>
        return (NULL);
 80090ea:	2300      	movs	r3, #0
 80090ec:	e054      	b.n	8009198 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	089b      	lsrs	r3, r3, #2
 80090fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00e      	beq.n	8009124 <osThreadNew+0xd4>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2b5b      	cmp	r3, #91	; 0x5b
 800910c:	d90a      	bls.n	8009124 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009112:	2b00      	cmp	r3, #0
 8009114:	d006      	beq.n	8009124 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <osThreadNew+0xd4>
        mem = 1;
 800911e:	2301      	movs	r3, #1
 8009120:	62bb      	str	r3, [r7, #40]	; 0x28
 8009122:	e010      	b.n	8009146 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10c      	bne.n	8009146 <osThreadNew+0xf6>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d108      	bne.n	8009146 <osThreadNew+0xf6>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <osThreadNew+0xf6>
          mem = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009140:	e001      	b.n	8009146 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	2b01      	cmp	r3, #1
 800914a:	d110      	bne.n	800916e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009154:	9202      	str	r2, [sp, #8]
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009160:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f001 f940 	bl	800a3e8 <xTaskCreateStatic>
 8009168:	4603      	mov	r3, r0
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e013      	b.n	8009196 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	2b00      	cmp	r3, #0
 8009172:	d110      	bne.n	8009196 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	b29a      	uxth	r2, r3
 8009178:	f107 0314 	add.w	r3, r7, #20
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f001 f98d 	bl	800a4a6 <xTaskCreate>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	d001      	beq.n	8009196 <osThreadNew+0x146>
          hTask = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009196:	697b      	ldr	r3, [r7, #20]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3738      	adds	r7, #56	; 0x38
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000218 	.word	0x20000218

080091a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ac:	f3ef 8305 	mrs	r3, IPSR
 80091b0:	613b      	str	r3, [r7, #16]
  return(result);
 80091b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10f      	bne.n	80091d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b8:	f3ef 8310 	mrs	r3, PRIMASK
 80091bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d109      	bne.n	80091d8 <osDelay+0x34>
 80091c4:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <osDelay+0x58>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d109      	bne.n	80091e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091cc:	f3ef 8311 	mrs	r3, BASEPRI
 80091d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <osDelay+0x3c>
    stat = osErrorISR;
 80091d8:	f06f 0305 	mvn.w	r3, #5
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e007      	b.n	80091f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fb18 	bl	800a820 <vTaskDelay>
    }
  }

  return (stat);
 80091f0:	697b      	ldr	r3, [r7, #20]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20000218 	.word	0x20000218

08009200 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009208:	f3ef 8305 	mrs	r3, IPSR
 800920c:	61bb      	str	r3, [r7, #24]
  return(result);
 800920e:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10f      	bne.n	8009234 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	617b      	str	r3, [r7, #20]
  return(result);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <osDelayUntil+0x34>
 8009220:	4b10      	ldr	r3, [pc, #64]	; (8009264 <osDelayUntil+0x64>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d109      	bne.n	800923c <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009228:	f3ef 8311 	mrs	r3, BASEPRI
 800922c:	613b      	str	r3, [r7, #16]
  return(result);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009234:	f06f 0305 	mvn.w	r3, #5
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	e00e      	b.n	800925a <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 800923c:	2300      	movs	r3, #0
 800923e:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8009240:	f001 fc38 	bl	800aab4 <xTaskGetTickCount>
 8009244:	4603      	mov	r3, r0
 8009246:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	1ad2      	subs	r2, r2, r3
 800924e:	f107 030c 	add.w	r3, r7, #12
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f001 fa63 	bl	800a720 <vTaskDelayUntil>
  }

  return (stat);
 800925a:	69fb      	ldr	r3, [r7, #28]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3720      	adds	r7, #32
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000218 	.word	0x20000218

08009268 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009274:	f3ef 8305 	mrs	r3, IPSR
 8009278:	613b      	str	r3, [r7, #16]
  return(result);
 800927a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8085 	bne.w	800938c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	60fb      	str	r3, [r7, #12]
  return(result);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d17e      	bne.n	800938c <osMutexNew+0x124>
 800928e:	4b42      	ldr	r3, [pc, #264]	; (8009398 <osMutexNew+0x130>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d105      	bne.n	80092a2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009296:	f3ef 8311 	mrs	r3, BASEPRI
 800929a:	60bb      	str	r3, [r7, #8]
  return(result);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d174      	bne.n	800938c <osMutexNew+0x124>
    if (attr != NULL) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	623b      	str	r3, [r7, #32]
 80092ae:	e001      	b.n	80092b4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <osMutexNew+0x5c>
      rmtx = 1U;
 80092be:	2301      	movs	r3, #1
 80092c0:	61fb      	str	r3, [r7, #28]
 80092c2:	e001      	b.n	80092c8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d15c      	bne.n	800938c <osMutexNew+0x124>
      mem = -1;
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295
 80092d6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d015      	beq.n	800930a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d006      	beq.n	80092f4 <osMutexNew+0x8c>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	2b4f      	cmp	r3, #79	; 0x4f
 80092ec:	d902      	bls.n	80092f4 <osMutexNew+0x8c>
          mem = 1;
 80092ee:	2301      	movs	r3, #1
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	e00c      	b.n	800930e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d108      	bne.n	800930e <osMutexNew+0xa6>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d104      	bne.n	800930e <osMutexNew+0xa6>
            mem = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	e001      	b.n	800930e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d112      	bne.n	800933a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	4619      	mov	r1, r3
 8009320:	2004      	movs	r0, #4
 8009322:	f000 fafb 	bl	800991c <xQueueCreateMutexStatic>
 8009326:	6278      	str	r0, [r7, #36]	; 0x24
 8009328:	e016      	b.n	8009358 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	4619      	mov	r1, r3
 8009330:	2001      	movs	r0, #1
 8009332:	f000 faf3 	bl	800991c <xQueueCreateMutexStatic>
 8009336:	6278      	str	r0, [r7, #36]	; 0x24
 8009338:	e00e      	b.n	8009358 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009346:	2004      	movs	r0, #4
 8009348:	f000 fad0 	bl	80098ec <xQueueCreateMutex>
 800934c:	6278      	str	r0, [r7, #36]	; 0x24
 800934e:	e003      	b.n	8009358 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009350:	2001      	movs	r0, #1
 8009352:	f000 facb 	bl	80098ec <xQueueCreateMutex>
 8009356:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <osMutexNew+0x110>
        if (attr != NULL) {
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <osMutexNew+0x104>
          name = attr->name;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e001      	b.n	8009370 <osMutexNew+0x108>
        } else {
          name = NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009370:	6979      	ldr	r1, [r7, #20]
 8009372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009374:	f000 ffdc 	bl	800a330 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2b00      	cmp	r3, #0
 800937c:	d006      	beq.n	800938c <osMutexNew+0x124>
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800938e:	4618      	mov	r0, r3
 8009390:	3728      	adds	r7, #40	; 0x28
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20000218 	.word	0x20000218

0800939c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f023 0301 	bic.w	r3, r3, #1
 80093ac:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ba:	f3ef 8305 	mrs	r3, IPSR
 80093be:	613b      	str	r3, [r7, #16]
  return(result);
 80093c0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10f      	bne.n	80093e6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c6:	f3ef 8310 	mrs	r3, PRIMASK
 80093ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <osMutexAcquire+0x4a>
 80093d2:	4b20      	ldr	r3, [pc, #128]	; (8009454 <osMutexAcquire+0xb8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d109      	bne.n	80093ee <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093da:	f3ef 8311 	mrs	r3, BASEPRI
 80093de:	60bb      	str	r3, [r7, #8]
  return(result);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <osMutexAcquire+0x52>
    stat = osErrorISR;
 80093e6:	f06f 0305 	mvn.w	r3, #5
 80093ea:	61fb      	str	r3, [r7, #28]
 80093ec:	e02c      	b.n	8009448 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80093f4:	f06f 0303 	mvn.w	r3, #3
 80093f8:	61fb      	str	r3, [r7, #28]
 80093fa:	e025      	b.n	8009448 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d011      	beq.n	8009426 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	69b8      	ldr	r0, [r7, #24]
 8009406:	f000 faa4 	bl	8009952 <xQueueTakeMutexRecursive>
 800940a:	4603      	mov	r3, r0
 800940c:	2b01      	cmp	r3, #1
 800940e:	d01b      	beq.n	8009448 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009416:	f06f 0301 	mvn.w	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	e014      	b.n	8009448 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800941e:	f06f 0302 	mvn.w	r3, #2
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	e010      	b.n	8009448 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	69b8      	ldr	r0, [r7, #24]
 800942a:	f000 fd49 	bl	8009ec0 <xQueueSemaphoreTake>
 800942e:	4603      	mov	r3, r0
 8009430:	2b01      	cmp	r3, #1
 8009432:	d009      	beq.n	8009448 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800943a:	f06f 0301 	mvn.w	r3, #1
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	e002      	b.n	8009448 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009442:	f06f 0302 	mvn.w	r3, #2
 8009446:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009448:	69fb      	ldr	r3, [r7, #28]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000218 	.word	0x20000218

08009458 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a07      	ldr	r2, [pc, #28]	; (8009484 <vApplicationGetIdleTaskMemory+0x2c>)
 8009468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4a06      	ldr	r2, [pc, #24]	; (8009488 <vApplicationGetIdleTaskMemory+0x30>)
 800946e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2280      	movs	r2, #128	; 0x80
 8009474:	601a      	str	r2, [r3, #0]
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	2000021c 	.word	0x2000021c
 8009488:	20000278 	.word	0x20000278

0800948c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4a07      	ldr	r2, [pc, #28]	; (80094b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800949c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	4a06      	ldr	r2, [pc, #24]	; (80094bc <vApplicationGetTimerTaskMemory+0x30>)
 80094a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094aa:	601a      	str	r2, [r3, #0]
}
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	20000478 	.word	0x20000478
 80094bc:	200004d4 	.word	0x200004d4

080094c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f103 0208 	add.w	r2, r3, #8
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f103 0208 	add.w	r2, r3, #8
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f103 0208 	add.w	r2, r3, #8
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800950e:	bf00      	nop
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009578:	d103      	bne.n	8009582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	e00c      	b.n	800959c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3308      	adds	r3, #8
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e002      	b.n	8009590 <vListInsert+0x2e>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	429a      	cmp	r2, r3
 800959a:	d2f6      	bcs.n	800958a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]
}
 80095c8:	bf00      	nop
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6892      	ldr	r2, [r2, #8]
 80095ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6852      	ldr	r2, [r2, #4]
 80095f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d103      	bne.n	8009608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689a      	ldr	r2, [r3, #8]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	b672      	cpsid	i
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	b662      	cpsie	i
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	e7fe      	b.n	8009652 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8009654:	f002 fba0 	bl	800bd98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009660:	68f9      	ldr	r1, [r7, #12]
 8009662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009664:	fb01 f303 	mul.w	r3, r1, r3
 8009668:	441a      	add	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009684:	3b01      	subs	r3, #1
 8009686:	68f9      	ldr	r1, [r7, #12]
 8009688:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800968a:	fb01 f303 	mul.w	r3, r1, r3
 800968e:	441a      	add	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	22ff      	movs	r2, #255	; 0xff
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	22ff      	movs	r2, #255	; 0xff
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d114      	bne.n	80096d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d01a      	beq.n	80096e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3310      	adds	r3, #16
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fb8e 	bl	800add8 <xTaskRemoveFromEventList>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d012      	beq.n	80096e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80096c2:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <xQueueGenericReset+0xd0>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	e009      	b.n	80096e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3310      	adds	r3, #16
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fef1 	bl	80094c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3324      	adds	r3, #36	; 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff feec 	bl	80094c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096e8:	f002 fb88 	bl	800bdfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096ec:	2301      	movs	r3, #1
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08e      	sub	sp, #56	; 0x38
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10b      	bne.n	8009728 <xQueueGenericCreateStatic+0x2c>
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	b672      	cpsid	i
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	b662      	cpsie	i
 8009724:	62bb      	str	r3, [r7, #40]	; 0x28
 8009726:	e7fe      	b.n	8009726 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10b      	bne.n	8009746 <xQueueGenericCreateStatic+0x4a>
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	b672      	cpsid	i
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	b662      	cpsie	i
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
 8009744:	e7fe      	b.n	8009744 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <xQueueGenericCreateStatic+0x56>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <xQueueGenericCreateStatic+0x5a>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <xQueueGenericCreateStatic+0x5c>
 8009756:	2300      	movs	r3, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <xQueueGenericCreateStatic+0x78>
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	b672      	cpsid	i
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	b662      	cpsie	i
 8009770:	623b      	str	r3, [r7, #32]
 8009772:	e7fe      	b.n	8009772 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <xQueueGenericCreateStatic+0x84>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <xQueueGenericCreateStatic+0x88>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <xQueueGenericCreateStatic+0x8a>
 8009784:	2300      	movs	r3, #0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10b      	bne.n	80097a2 <xQueueGenericCreateStatic+0xa6>
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	b672      	cpsid	i
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	b662      	cpsie	i
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	e7fe      	b.n	80097a0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80097a2:	2350      	movs	r3, #80	; 0x50
 80097a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b50      	cmp	r3, #80	; 0x50
 80097aa:	d00b      	beq.n	80097c4 <xQueueGenericCreateStatic+0xc8>
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	b672      	cpsid	i
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	b662      	cpsie	i
 80097c0:	61bb      	str	r3, [r7, #24]
 80097c2:	e7fe      	b.n	80097c2 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	4613      	mov	r3, r2
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f844 	bl	8009872 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3730      	adds	r7, #48	; 0x30
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08a      	sub	sp, #40	; 0x28
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10b      	bne.n	8009820 <xQueueGenericCreate+0x2c>
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	b672      	cpsid	i
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	b662      	cpsie	i
 800981c:	613b      	str	r3, [r7, #16]
 800981e:	e7fe      	b.n	800981e <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
 800982a:	e004      	b.n	8009836 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	3350      	adds	r3, #80	; 0x50
 800983a:	4618      	mov	r0, r3
 800983c:	f002 fbce 	bl	800bfdc <pvPortMalloc>
 8009840:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00f      	beq.n	8009868 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	3350      	adds	r3, #80	; 0x50
 800984c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009856:	79fa      	ldrb	r2, [r7, #7]
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4613      	mov	r3, r2
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f805 	bl	8009872 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009868:	69bb      	ldr	r3, [r7, #24]
	}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
 800987e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e002      	b.n	8009894 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098a0:	2101      	movs	r1, #1
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f7ff fec0 	bl	8009628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00e      	beq.n	80098e4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80098d8:	2300      	movs	r3, #0
 80098da:	2200      	movs	r2, #0
 80098dc:	2100      	movs	r1, #0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f86e 	bl	80099c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80098f6:	2301      	movs	r3, #1
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	2300      	movs	r3, #0
 80098fc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	461a      	mov	r2, r3
 8009902:	6939      	ldr	r1, [r7, #16]
 8009904:	6978      	ldr	r0, [r7, #20]
 8009906:	f7ff ff75 	bl	80097f4 <xQueueGenericCreate>
 800990a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f7ff ffd3 	bl	80098b8 <prvInitialiseMutex>

		return pxNewQueue;
 8009912:	68fb      	ldr	r3, [r7, #12]
	}
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af02      	add	r7, sp, #8
 8009922:	4603      	mov	r3, r0
 8009924:	6039      	str	r1, [r7, #0]
 8009926:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	2300      	movs	r3, #0
 800992e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	6939      	ldr	r1, [r7, #16]
 800993a:	6978      	ldr	r0, [r7, #20]
 800993c:	f7ff fede 	bl	80096fc <xQueueGenericCreateStatic>
 8009940:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff ffb8 	bl	80098b8 <prvInitialiseMutex>

		return pxNewQueue;
 8009948:	68fb      	ldr	r3, [r7, #12]
	}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009952:	b590      	push	{r4, r7, lr}
 8009954:	b087      	sub	sp, #28
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10b      	bne.n	800997e <xQueueTakeMutexRecursive+0x2c>
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	b672      	cpsid	i
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	b662      	cpsie	i
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	e7fe      	b.n	800997c <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	685c      	ldr	r4, [r3, #4]
 8009982:	f001 fbed 	bl	800b160 <xTaskGetCurrentTaskHandle>
 8009986:	4603      	mov	r3, r0
 8009988:	429c      	cmp	r4, r3
 800998a:	d107      	bne.n	800999c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009996:	2301      	movs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e00c      	b.n	80099b6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6938      	ldr	r0, [r7, #16]
 80099a0:	f000 fa8e 	bl	8009ec0 <xQueueSemaphoreTake>
 80099a4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80099b6:	697b      	ldr	r3, [r7, #20]
	}
 80099b8:	4618      	mov	r0, r3
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd90      	pop	{r4, r7, pc}

080099c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08e      	sub	sp, #56	; 0x38
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099ce:	2300      	movs	r3, #0
 80099d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10b      	bne.n	80099f4 <xQueueGenericSend+0x34>
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	b672      	cpsid	i
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	b662      	cpsie	i
 80099f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f2:	e7fe      	b.n	80099f2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <xQueueGenericSend+0x42>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <xQueueGenericSend+0x46>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <xQueueGenericSend+0x48>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10b      	bne.n	8009a24 <xQueueGenericSend+0x64>
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	b672      	cpsid	i
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	b662      	cpsie	i
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
 8009a22:	e7fe      	b.n	8009a22 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d103      	bne.n	8009a32 <xQueueGenericSend+0x72>
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <xQueueGenericSend+0x76>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <xQueueGenericSend+0x78>
 8009a36:	2300      	movs	r3, #0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10b      	bne.n	8009a54 <xQueueGenericSend+0x94>
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	b672      	cpsid	i
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	b662      	cpsie	i
 8009a50:	623b      	str	r3, [r7, #32]
 8009a52:	e7fe      	b.n	8009a52 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a54:	f001 fb94 	bl	800b180 <xTaskGetSchedulerState>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <xQueueGenericSend+0xa4>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <xQueueGenericSend+0xa8>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e000      	b.n	8009a6a <xQueueGenericSend+0xaa>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10b      	bne.n	8009a86 <xQueueGenericSend+0xc6>
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	b672      	cpsid	i
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	b662      	cpsie	i
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	e7fe      	b.n	8009a84 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a86:	f002 f987 	bl	800bd98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d302      	bcc.n	8009a9c <xQueueGenericSend+0xdc>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d129      	bne.n	8009af0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	68b9      	ldr	r1, [r7, #8]
 8009aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aa2:	f000 fb35 	bl	800a110 <prvCopyDataToQueue>
 8009aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d010      	beq.n	8009ad2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	3324      	adds	r3, #36	; 0x24
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 f98f 	bl	800add8 <xTaskRemoveFromEventList>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d013      	beq.n	8009ae8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ac0:	4b3f      	ldr	r3, [pc, #252]	; (8009bc0 <xQueueGenericSend+0x200>)
 8009ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	e00a      	b.n	8009ae8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ad8:	4b39      	ldr	r3, [pc, #228]	; (8009bc0 <xQueueGenericSend+0x200>)
 8009ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ae8:	f002 f988 	bl	800bdfc <vPortExitCritical>
				return pdPASS;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e063      	b.n	8009bb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d103      	bne.n	8009afe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009af6:	f002 f981 	bl	800bdfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	e05c      	b.n	8009bb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d106      	bne.n	8009b12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b04:	f107 0314 	add.w	r3, r7, #20
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 f9c9 	bl	800aea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b12:	f002 f973 	bl	800bdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b16:	f000 ff21 	bl	800a95c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b1a:	f002 f93d 	bl	800bd98 <vPortEnterCritical>
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b24:	b25b      	sxtb	r3, r3
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d103      	bne.n	8009b34 <xQueueGenericSend+0x174>
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b3a:	b25b      	sxtb	r3, r3
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d103      	bne.n	8009b4a <xQueueGenericSend+0x18a>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b4a:	f002 f957 	bl	800bdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b4e:	1d3a      	adds	r2, r7, #4
 8009b50:	f107 0314 	add.w	r3, r7, #20
 8009b54:	4611      	mov	r1, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 f9b8 	bl	800aecc <xTaskCheckForTimeOut>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d124      	bne.n	8009bac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b64:	f000 fbcc 	bl	800a300 <prvIsQueueFull>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d018      	beq.n	8009ba0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	3310      	adds	r3, #16
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 f8dc 	bl	800ad34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b7e:	f000 fb57 	bl	800a230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b82:	f000 fef9 	bl	800a978 <xTaskResumeAll>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f47f af7c 	bne.w	8009a86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <xQueueGenericSend+0x200>)
 8009b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	e772      	b.n	8009a86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ba2:	f000 fb45 	bl	800a230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ba6:	f000 fee7 	bl	800a978 <xTaskResumeAll>
 8009baa:	e76c      	b.n	8009a86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bae:	f000 fb3f 	bl	800a230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bb2:	f000 fee1 	bl	800a978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bb6:	2300      	movs	r3, #0
		}
	}
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3738      	adds	r7, #56	; 0x38
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08e      	sub	sp, #56	; 0x38
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <xQueueGenericSendFromISR+0x30>
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	b672      	cpsid	i
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	b662      	cpsie	i
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf2:	e7fe      	b.n	8009bf2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d103      	bne.n	8009c02 <xQueueGenericSendFromISR+0x3e>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <xQueueGenericSendFromISR+0x42>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <xQueueGenericSendFromISR+0x44>
 8009c06:	2300      	movs	r3, #0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10b      	bne.n	8009c24 <xQueueGenericSendFromISR+0x60>
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	b672      	cpsid	i
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	b662      	cpsie	i
 8009c20:	623b      	str	r3, [r7, #32]
 8009c22:	e7fe      	b.n	8009c22 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d103      	bne.n	8009c32 <xQueueGenericSendFromISR+0x6e>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <xQueueGenericSendFromISR+0x72>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <xQueueGenericSendFromISR+0x74>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10b      	bne.n	8009c54 <xQueueGenericSendFromISR+0x90>
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	b672      	cpsid	i
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	b662      	cpsie	i
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	e7fe      	b.n	8009c52 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c54:	f002 f980 	bl	800bf58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c58:	f3ef 8211 	mrs	r2, BASEPRI
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	b672      	cpsid	i
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	b662      	cpsie	i
 8009c70:	61ba      	str	r2, [r7, #24]
 8009c72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d302      	bcc.n	8009c8a <xQueueGenericSendFromISR+0xc6>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d12c      	bne.n	8009ce4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9a:	f000 fa39 	bl	800a110 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca6:	d112      	bne.n	8009cce <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d016      	beq.n	8009cde <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f001 f88f 	bl	800add8 <xTaskRemoveFromEventList>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00e      	beq.n	8009cde <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00b      	beq.n	8009cde <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	e007      	b.n	8009cde <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	b25a      	sxtb	r2, r3
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009ce2:	e001      	b.n	8009ce8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3738      	adds	r7, #56	; 0x38
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10b      	bne.n	8009d2e <xQueueReceive+0x32>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1a:	b672      	cpsid	i
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	b662      	cpsie	i
 8009d2a:	623b      	str	r3, [r7, #32]
 8009d2c:	e7fe      	b.n	8009d2c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <xQueueReceive+0x40>
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <xQueueReceive+0x44>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e000      	b.n	8009d42 <xQueueReceive+0x46>
 8009d40:	2300      	movs	r3, #0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10b      	bne.n	8009d5e <xQueueReceive+0x62>
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	b672      	cpsid	i
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	b662      	cpsie	i
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e7fe      	b.n	8009d5c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d5e:	f001 fa0f 	bl	800b180 <xTaskGetSchedulerState>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <xQueueReceive+0x72>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <xQueueReceive+0x76>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <xQueueReceive+0x78>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <xQueueReceive+0x94>
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	b672      	cpsid	i
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	b662      	cpsie	i
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	e7fe      	b.n	8009d8e <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d90:	f002 f802 	bl	800bd98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01f      	beq.n	8009de0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da4:	f000 fa1e 	bl	800a1e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	1e5a      	subs	r2, r3, #1
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00f      	beq.n	8009dd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	3310      	adds	r3, #16
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f80b 	bl	800add8 <xTaskRemoveFromEventList>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d007      	beq.n	8009dd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009dc8:	4b3c      	ldr	r3, [pc, #240]	; (8009ebc <xQueueReceive+0x1c0>)
 8009dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dd8:	f002 f810 	bl	800bdfc <vPortExitCritical>
				return pdPASS;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e069      	b.n	8009eb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d103      	bne.n	8009dee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009de6:	f002 f809 	bl	800bdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009dea:	2300      	movs	r3, #0
 8009dec:	e062      	b.n	8009eb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df4:	f107 0310 	add.w	r3, r7, #16
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 f851 	bl	800aea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e02:	f001 fffb 	bl	800bdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e06:	f000 fda9 	bl	800a95c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e0a:	f001 ffc5 	bl	800bd98 <vPortEnterCritical>
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1a:	d103      	bne.n	8009e24 <xQueueReceive+0x128>
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e2a:	b25b      	sxtb	r3, r3
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e30:	d103      	bne.n	8009e3a <xQueueReceive+0x13e>
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e3a:	f001 ffdf 	bl	800bdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e3e:	1d3a      	adds	r2, r7, #4
 8009e40:	f107 0310 	add.w	r3, r7, #16
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 f840 	bl	800aecc <xTaskCheckForTimeOut>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d123      	bne.n	8009e9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e54:	f000 fa3e 	bl	800a2d4 <prvIsQueueEmpty>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d017      	beq.n	8009e8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	3324      	adds	r3, #36	; 0x24
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 ff64 	bl	800ad34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e6e:	f000 f9df 	bl	800a230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e72:	f000 fd81 	bl	800a978 <xTaskResumeAll>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d189      	bne.n	8009d90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <xQueueReceive+0x1c0>)
 8009e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	e780      	b.n	8009d90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e90:	f000 f9ce 	bl	800a230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e94:	f000 fd70 	bl	800a978 <xTaskResumeAll>
 8009e98:	e77a      	b.n	8009d90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9c:	f000 f9c8 	bl	800a230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ea0:	f000 fd6a 	bl	800a978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea6:	f000 fa15 	bl	800a2d4 <prvIsQueueEmpty>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f43f af6f 	beq.w	8009d90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009eb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3730      	adds	r7, #48	; 0x30
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	e000ed04 	.word	0xe000ed04

08009ec0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08e      	sub	sp, #56	; 0x38
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10b      	bne.n	8009ef4 <xQueueSemaphoreTake+0x34>
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	b672      	cpsid	i
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	b662      	cpsie	i
 8009ef0:	623b      	str	r3, [r7, #32]
 8009ef2:	e7fe      	b.n	8009ef2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <xQueueSemaphoreTake+0x54>
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	b672      	cpsid	i
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	b662      	cpsie	i
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	e7fe      	b.n	8009f12 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f14:	f001 f934 	bl	800b180 <xTaskGetSchedulerState>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <xQueueSemaphoreTake+0x64>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <xQueueSemaphoreTake+0x68>
 8009f24:	2301      	movs	r3, #1
 8009f26:	e000      	b.n	8009f2a <xQueueSemaphoreTake+0x6a>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10b      	bne.n	8009f46 <xQueueSemaphoreTake+0x86>
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	b672      	cpsid	i
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	b662      	cpsie	i
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	e7fe      	b.n	8009f44 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f46:	f001 ff27 	bl	800bd98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d024      	beq.n	8009fa0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	1e5a      	subs	r2, r3, #1
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009f66:	f001 fa8f 	bl	800b488 <pvTaskIncrementMutexHeldCount>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00f      	beq.n	8009f98 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7a:	3310      	adds	r3, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 ff2b 	bl	800add8 <xTaskRemoveFromEventList>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d007      	beq.n	8009f98 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f88:	4b54      	ldr	r3, [pc, #336]	; (800a0dc <xQueueSemaphoreTake+0x21c>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f98:	f001 ff30 	bl	800bdfc <vPortExitCritical>
				return pdPASS;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e098      	b.n	800a0d2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d112      	bne.n	8009fcc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <xQueueSemaphoreTake+0x104>
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	b672      	cpsid	i
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	b662      	cpsie	i
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e7fe      	b.n	8009fc2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009fc4:	f001 ff1a 	bl	800bdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e082      	b.n	800a0d2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fd2:	f107 030c 	add.w	r3, r7, #12
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 ff62 	bl	800aea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fe0:	f001 ff0c 	bl	800bdfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fe4:	f000 fcba 	bl	800a95c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fe8:	f001 fed6 	bl	800bd98 <vPortEnterCritical>
 8009fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ff2:	b25b      	sxtb	r3, r3
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff8:	d103      	bne.n	800a002 <xQueueSemaphoreTake+0x142>
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a008:	b25b      	sxtb	r3, r3
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d103      	bne.n	800a018 <xQueueSemaphoreTake+0x158>
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a018:	f001 fef0 	bl	800bdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a01c:	463a      	mov	r2, r7
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f000 ff51 	bl	800aecc <xTaskCheckForTimeOut>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d132      	bne.n	800a096 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a032:	f000 f94f 	bl	800a2d4 <prvIsQueueEmpty>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d026      	beq.n	800a08a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d109      	bne.n	800a058 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a044:	f001 fea8 	bl	800bd98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f001 f8b5 	bl	800b1bc <xTaskPriorityInherit>
 800a052:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a054:	f001 fed2 	bl	800bdfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	3324      	adds	r3, #36	; 0x24
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fe67 	bl	800ad34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a068:	f000 f8e2 	bl	800a230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a06c:	f000 fc84 	bl	800a978 <xTaskResumeAll>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	f47f af67 	bne.w	8009f46 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a078:	4b18      	ldr	r3, [pc, #96]	; (800a0dc <xQueueSemaphoreTake+0x21c>)
 800a07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	e75d      	b.n	8009f46 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a08c:	f000 f8d0 	bl	800a230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a090:	f000 fc72 	bl	800a978 <xTaskResumeAll>
 800a094:	e757      	b.n	8009f46 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a098:	f000 f8ca 	bl	800a230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a09c:	f000 fc6c 	bl	800a978 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0a2:	f000 f917 	bl	800a2d4 <prvIsQueueEmpty>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f43f af4c 	beq.w	8009f46 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00d      	beq.n	800a0d0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a0b4:	f001 fe70 	bl	800bd98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0ba:	f000 f811 	bl	800a0e0 <prvGetDisinheritPriorityAfterTimeout>
 800a0be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 f956 	bl	800b378 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a0cc:	f001 fe96 	bl	800bdfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3738      	adds	r7, #56	; 0x38
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	e000ed04 	.word	0xe000ed04

0800a0e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d006      	beq.n	800a0fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	e001      	b.n	800a102 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a102:	68fb      	ldr	r3, [r7, #12]
	}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a124:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10d      	bne.n	800a14a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d14d      	bne.n	800a1d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 f8ac 	bl	800b298 <xTaskPriorityDisinherit>
 800a140:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	e043      	b.n	800a1d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d119      	bne.n	800a184 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6898      	ldr	r0, [r3, #8]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a158:	461a      	mov	r2, r3
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	f002 fe8c 	bl	800ce78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	441a      	add	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d32b      	bcc.n	800a1d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	609a      	str	r2, [r3, #8]
 800a182:	e026      	b.n	800a1d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68d8      	ldr	r0, [r3, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18c:	461a      	mov	r2, r3
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	f002 fe72 	bl	800ce78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19c:	425b      	negs	r3, r3
 800a19e:	441a      	add	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d207      	bcs.n	800a1c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b8:	425b      	negs	r3, r3
 800a1ba:	441a      	add	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d105      	bne.n	800a1d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1da:	697b      	ldr	r3, [r7, #20]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3718      	adds	r7, #24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d018      	beq.n	800a228 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	441a      	add	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68da      	ldr	r2, [r3, #12]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d303      	bcc.n	800a218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68d9      	ldr	r1, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a220:	461a      	mov	r2, r3
 800a222:	6838      	ldr	r0, [r7, #0]
 800a224:	f002 fe28 	bl	800ce78 <memcpy>
	}
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a238:	f001 fdae 	bl	800bd98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a242:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a244:	e011      	b.n	800a26a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d012      	beq.n	800a274 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3324      	adds	r3, #36	; 0x24
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fdc0 	bl	800add8 <xTaskRemoveFromEventList>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a25e:	f000 fe99 	bl	800af94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	3b01      	subs	r3, #1
 800a266:	b2db      	uxtb	r3, r3
 800a268:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dce9      	bgt.n	800a246 <prvUnlockQueue+0x16>
 800a272:	e000      	b.n	800a276 <prvUnlockQueue+0x46>
					break;
 800a274:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	22ff      	movs	r2, #255	; 0xff
 800a27a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a27e:	f001 fdbd 	bl	800bdfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a282:	f001 fd89 	bl	800bd98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a28c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a28e:	e011      	b.n	800a2b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d012      	beq.n	800a2be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3310      	adds	r3, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fd9b 	bl	800add8 <xTaskRemoveFromEventList>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2a8:	f000 fe74 	bl	800af94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dce9      	bgt.n	800a290 <prvUnlockQueue+0x60>
 800a2bc:	e000      	b.n	800a2c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	22ff      	movs	r2, #255	; 0xff
 800a2c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2c8:	f001 fd98 	bl	800bdfc <vPortExitCritical>
}
 800a2cc:	bf00      	nop
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2dc:	f001 fd5c 	bl	800bd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e001      	b.n	800a2f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2f2:	f001 fd83 	bl	800bdfc <vPortExitCritical>

	return xReturn;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a308:	f001 fd46 	bl	800bd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a314:	429a      	cmp	r2, r3
 800a316:	d102      	bne.n	800a31e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e001      	b.n	800a322 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a31e:	2300      	movs	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a322:	f001 fd6b 	bl	800bdfc <vPortExitCritical>

	return xReturn;
 800a326:	68fb      	ldr	r3, [r7, #12]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e014      	b.n	800a36a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a340:	4a0e      	ldr	r2, [pc, #56]	; (800a37c <vQueueAddToRegistry+0x4c>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a34c:	490b      	ldr	r1, [pc, #44]	; (800a37c <vQueueAddToRegistry+0x4c>)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a356:	4a09      	ldr	r2, [pc, #36]	; (800a37c <vQueueAddToRegistry+0x4c>)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a362:	e005      	b.n	800a370 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b07      	cmp	r3, #7
 800a36e:	d9e7      	bls.n	800a340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a370:	bf00      	nop
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20006570 	.word	0x20006570

0800a380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a390:	f001 fd02 	bl	800bd98 <vPortEnterCritical>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a0:	d103      	bne.n	800a3aa <vQueueWaitForMessageRestricted+0x2a>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3b0:	b25b      	sxtb	r3, r3
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b6:	d103      	bne.n	800a3c0 <vQueueWaitForMessageRestricted+0x40>
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3c0:	f001 fd1c 	bl	800bdfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d106      	bne.n	800a3da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	3324      	adds	r3, #36	; 0x24
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fcd3 	bl	800ad80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3da:	6978      	ldr	r0, [r7, #20]
 800a3dc:	f7ff ff28 	bl	800a230 <prvUnlockQueue>
	}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08e      	sub	sp, #56	; 0x38
 800a3ec:	af04      	add	r7, sp, #16
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <xTaskCreateStatic+0x2c>
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	b672      	cpsid	i
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	b662      	cpsie	i
 800a410:	623b      	str	r3, [r7, #32]
 800a412:	e7fe      	b.n	800a412 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <xTaskCreateStatic+0x4a>
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	b672      	cpsid	i
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	b662      	cpsie	i
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	e7fe      	b.n	800a430 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a432:	235c      	movs	r3, #92	; 0x5c
 800a434:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b5c      	cmp	r3, #92	; 0x5c
 800a43a:	d00b      	beq.n	800a454 <xTaskCreateStatic+0x6c>
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	b672      	cpsid	i
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	b662      	cpsie	i
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	e7fe      	b.n	800a452 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	2b00      	cmp	r3, #0
 800a458:	d01e      	beq.n	800a498 <xTaskCreateStatic+0xb0>
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01b      	beq.n	800a498 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a468:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	2202      	movs	r2, #2
 800a46e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a472:	2300      	movs	r3, #0
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	9302      	str	r3, [sp, #8]
 800a47a:	f107 0314 	add.w	r3, r7, #20
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f850 	bl	800a530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a492:	f000 f8d5 	bl	800a640 <prvAddNewTaskToReadyList>
 800a496:	e001      	b.n	800a49c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a49c:	697b      	ldr	r3, [r7, #20]
	}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3728      	adds	r7, #40	; 0x28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b08c      	sub	sp, #48	; 0x30
 800a4aa:	af04      	add	r7, sp, #16
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	603b      	str	r3, [r7, #0]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 fd8e 	bl	800bfdc <pvPortMalloc>
 800a4c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00e      	beq.n	800a4e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a4c8:	205c      	movs	r0, #92	; 0x5c
 800a4ca:	f001 fd87 	bl	800bfdc <pvPortMalloc>
 800a4ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	631a      	str	r2, [r3, #48]	; 0x30
 800a4dc:	e005      	b.n	800a4ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4de:	6978      	ldr	r0, [r7, #20]
 800a4e0:	f001 fe44 	bl	800c16c <vPortFree>
 800a4e4:	e001      	b.n	800a4ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d017      	beq.n	800a520 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4f8:	88fa      	ldrh	r2, [r7, #6]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9303      	str	r3, [sp, #12]
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	9302      	str	r3, [sp, #8]
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68b9      	ldr	r1, [r7, #8]
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 f80e 	bl	800a530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a514:	69f8      	ldr	r0, [r7, #28]
 800a516:	f000 f893 	bl	800a640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a51a:	2301      	movs	r3, #1
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	e002      	b.n	800a526 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a520:	f04f 33ff 	mov.w	r3, #4294967295
 800a524:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a526:	69bb      	ldr	r3, [r7, #24]
	}
 800a528:	4618      	mov	r0, r3
 800a52a:	3720      	adds	r7, #32
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	461a      	mov	r2, r3
 800a548:	21a5      	movs	r1, #165	; 0xa5
 800a54a:	f002 fca0 	bl	800ce8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a558:	440b      	add	r3, r1
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f023 0307 	bic.w	r3, r3, #7
 800a566:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <prvInitialiseNewTask+0x5a>
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	b672      	cpsid	i
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	b662      	cpsie	i
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	e7fe      	b.n	800a588 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a58a:	2300      	movs	r3, #0
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	e012      	b.n	800a5b6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	7819      	ldrb	r1, [r3, #0]
 800a598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	4413      	add	r3, r2
 800a59e:	3334      	adds	r3, #52	; 0x34
 800a5a0:	460a      	mov	r2, r1
 800a5a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d006      	beq.n	800a5be <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	2b0f      	cmp	r3, #15
 800a5ba:	d9e9      	bls.n	800a590 <prvInitialiseNewTask+0x60>
 800a5bc:	e000      	b.n	800a5c0 <prvInitialiseNewTask+0x90>
		{
			break;
 800a5be:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	2b37      	cmp	r3, #55	; 0x37
 800a5cc:	d901      	bls.n	800a5d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5ce:	2337      	movs	r3, #55	; 0x37
 800a5d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe ff89 	bl	8009500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	3318      	adds	r3, #24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe ff84 	bl	8009500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a60c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	2200      	movs	r2, #0
 800a612:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	69b8      	ldr	r0, [r7, #24]
 800a622:	f001 fab1 	bl	800bb88 <pxPortInitialiseStack>
 800a626:	4602      	mov	r2, r0
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a636:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a638:	bf00      	nop
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a648:	f001 fba6 	bl	800bd98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a64c:	4b2d      	ldr	r3, [pc, #180]	; (800a704 <prvAddNewTaskToReadyList+0xc4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3301      	adds	r3, #1
 800a652:	4a2c      	ldr	r2, [pc, #176]	; (800a704 <prvAddNewTaskToReadyList+0xc4>)
 800a654:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a656:	4b2c      	ldr	r3, [pc, #176]	; (800a708 <prvAddNewTaskToReadyList+0xc8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d109      	bne.n	800a672 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a65e:	4a2a      	ldr	r2, [pc, #168]	; (800a708 <prvAddNewTaskToReadyList+0xc8>)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a664:	4b27      	ldr	r3, [pc, #156]	; (800a704 <prvAddNewTaskToReadyList+0xc4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d110      	bne.n	800a68e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a66c:	f000 fcb6 	bl	800afdc <prvInitialiseTaskLists>
 800a670:	e00d      	b.n	800a68e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a672:	4b26      	ldr	r3, [pc, #152]	; (800a70c <prvAddNewTaskToReadyList+0xcc>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d109      	bne.n	800a68e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a67a:	4b23      	ldr	r3, [pc, #140]	; (800a708 <prvAddNewTaskToReadyList+0xc8>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	429a      	cmp	r2, r3
 800a686:	d802      	bhi.n	800a68e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a688:	4a1f      	ldr	r2, [pc, #124]	; (800a708 <prvAddNewTaskToReadyList+0xc8>)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a68e:	4b20      	ldr	r3, [pc, #128]	; (800a710 <prvAddNewTaskToReadyList+0xd0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3301      	adds	r3, #1
 800a694:	4a1e      	ldr	r2, [pc, #120]	; (800a710 <prvAddNewTaskToReadyList+0xd0>)
 800a696:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a698:	4b1d      	ldr	r3, [pc, #116]	; (800a710 <prvAddNewTaskToReadyList+0xd0>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	4b1b      	ldr	r3, [pc, #108]	; (800a714 <prvAddNewTaskToReadyList+0xd4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d903      	bls.n	800a6b4 <prvAddNewTaskToReadyList+0x74>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b0:	4a18      	ldr	r2, [pc, #96]	; (800a714 <prvAddNewTaskToReadyList+0xd4>)
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4a15      	ldr	r2, [pc, #84]	; (800a718 <prvAddNewTaskToReadyList+0xd8>)
 800a6c2:	441a      	add	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	f7fe ff25 	bl	800951a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6d0:	f001 fb94 	bl	800bdfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6d4:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <prvAddNewTaskToReadyList+0xcc>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00e      	beq.n	800a6fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6dc:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <prvAddNewTaskToReadyList+0xc8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d207      	bcs.n	800a6fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6ea:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <prvAddNewTaskToReadyList+0xdc>)
 800a6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000da8 	.word	0x20000da8
 800a708:	200008d4 	.word	0x200008d4
 800a70c:	20000db4 	.word	0x20000db4
 800a710:	20000dc4 	.word	0x20000dc4
 800a714:	20000db0 	.word	0x20000db0
 800a718:	200008d8 	.word	0x200008d8
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10b      	bne.n	800a74c <vTaskDelayUntil+0x2c>
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	b672      	cpsid	i
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	b662      	cpsie	i
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e7fe      	b.n	800a74a <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10b      	bne.n	800a76a <vTaskDelayUntil+0x4a>
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	b672      	cpsid	i
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	b662      	cpsie	i
 800a766:	613b      	str	r3, [r7, #16]
 800a768:	e7fe      	b.n	800a768 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800a76a:	4b2a      	ldr	r3, [pc, #168]	; (800a814 <vTaskDelayUntil+0xf4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <vTaskDelayUntil+0x6a>
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	b672      	cpsid	i
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	b662      	cpsie	i
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	e7fe      	b.n	800a788 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800a78a:	f000 f8e7 	bl	800a95c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a78e:	4b22      	ldr	r3, [pc, #136]	; (800a818 <vTaskDelayUntil+0xf8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	4413      	add	r3, r2
 800a79c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6a3a      	ldr	r2, [r7, #32]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d20b      	bcs.n	800a7c0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d211      	bcs.n	800a7d6 <vTaskDelayUntil+0xb6>
 800a7b2:	69fa      	ldr	r2, [r7, #28]
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d90d      	bls.n	800a7d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a7be:	e00a      	b.n	800a7d6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d303      	bcc.n	800a7d2 <vTaskDelayUntil+0xb2>
 800a7ca:	69fa      	ldr	r2, [r7, #28]
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d901      	bls.n	800a7d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d006      	beq.n	800a7f0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fe60 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a7f0:	f000 f8c2 	bl	800a978 <xTaskResumeAll>
 800a7f4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d107      	bne.n	800a80c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800a7fc:	4b07      	ldr	r3, [pc, #28]	; (800a81c <vTaskDelayUntil+0xfc>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a80c:	bf00      	nop
 800a80e:	3728      	adds	r7, #40	; 0x28
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20000dd0 	.word	0x20000dd0
 800a818:	20000dac 	.word	0x20000dac
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d018      	beq.n	800a864 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <vTaskDelay+0x64>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00b      	beq.n	800a852 <vTaskDelay+0x32>
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	b672      	cpsid	i
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	b662      	cpsie	i
 800a84e:	60bb      	str	r3, [r7, #8]
 800a850:	e7fe      	b.n	800a850 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a852:	f000 f883 	bl	800a95c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a856:	2100      	movs	r1, #0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fe29 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a85e:	f000 f88b 	bl	800a978 <xTaskResumeAll>
 800a862:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d107      	bne.n	800a87a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a86a:	4b07      	ldr	r3, [pc, #28]	; (800a888 <vTaskDelay+0x68>)
 800a86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20000dd0 	.word	0x20000dd0
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	; 0x28
 800a890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a89a:	463a      	mov	r2, r7
 800a89c:	1d39      	adds	r1, r7, #4
 800a89e:	f107 0308 	add.w	r3, r7, #8
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fdd8 	bl	8009458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	9202      	str	r2, [sp, #8]
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	460a      	mov	r2, r1
 800a8ba:	4922      	ldr	r1, [pc, #136]	; (800a944 <vTaskStartScheduler+0xb8>)
 800a8bc:	4822      	ldr	r0, [pc, #136]	; (800a948 <vTaskStartScheduler+0xbc>)
 800a8be:	f7ff fd93 	bl	800a3e8 <xTaskCreateStatic>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b21      	ldr	r3, [pc, #132]	; (800a94c <vTaskStartScheduler+0xc0>)
 800a8c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8c8:	4b20      	ldr	r3, [pc, #128]	; (800a94c <vTaskStartScheduler+0xc0>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	e001      	b.n	800a8da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d102      	bne.n	800a8e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8e0:	f000 fe3a 	bl	800b558 <xTimerCreateTimerTask>
 800a8e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d117      	bne.n	800a91c <vTaskStartScheduler+0x90>
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	b672      	cpsid	i
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	b662      	cpsie	i
 800a900:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a902:	4b13      	ldr	r3, [pc, #76]	; (800a950 <vTaskStartScheduler+0xc4>)
 800a904:	f04f 32ff 	mov.w	r2, #4294967295
 800a908:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a90a:	4b12      	ldr	r3, [pc, #72]	; (800a954 <vTaskStartScheduler+0xc8>)
 800a90c:	2201      	movs	r2, #1
 800a90e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a910:	4b11      	ldr	r3, [pc, #68]	; (800a958 <vTaskStartScheduler+0xcc>)
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a916:	f001 f9c3 	bl	800bca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a91a:	e00f      	b.n	800a93c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a922:	d10b      	bne.n	800a93c <vTaskStartScheduler+0xb0>
 800a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a928:	b672      	cpsid	i
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	b662      	cpsie	i
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e7fe      	b.n	800a93a <vTaskStartScheduler+0xae>
}
 800a93c:	bf00      	nop
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	0800e218 	.word	0x0800e218
 800a948:	0800afad 	.word	0x0800afad
 800a94c:	20000dcc 	.word	0x20000dcc
 800a950:	20000dc8 	.word	0x20000dc8
 800a954:	20000db4 	.word	0x20000db4
 800a958:	20000dac 	.word	0x20000dac

0800a95c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <vTaskSuspendAll+0x18>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	4a03      	ldr	r2, [pc, #12]	; (800a974 <vTaskSuspendAll+0x18>)
 800a968:	6013      	str	r3, [r2, #0]
}
 800a96a:	bf00      	nop
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	20000dd0 	.word	0x20000dd0

0800a978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a982:	2300      	movs	r3, #0
 800a984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a986:	4b42      	ldr	r3, [pc, #264]	; (800aa90 <xTaskResumeAll+0x118>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10b      	bne.n	800a9a6 <xTaskResumeAll+0x2e>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	b672      	cpsid	i
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	b662      	cpsie	i
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	e7fe      	b.n	800a9a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9a6:	f001 f9f7 	bl	800bd98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9aa:	4b39      	ldr	r3, [pc, #228]	; (800aa90 <xTaskResumeAll+0x118>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	4a37      	ldr	r2, [pc, #220]	; (800aa90 <xTaskResumeAll+0x118>)
 800a9b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b4:	4b36      	ldr	r3, [pc, #216]	; (800aa90 <xTaskResumeAll+0x118>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d162      	bne.n	800aa82 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9bc:	4b35      	ldr	r3, [pc, #212]	; (800aa94 <xTaskResumeAll+0x11c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d05e      	beq.n	800aa82 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9c4:	e02f      	b.n	800aa26 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a9c6:	4b34      	ldr	r3, [pc, #208]	; (800aa98 <xTaskResumeAll+0x120>)
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3318      	adds	r3, #24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe fdfe 	bl	80095d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe fdf9 	bl	80095d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e6:	4b2d      	ldr	r3, [pc, #180]	; (800aa9c <xTaskResumeAll+0x124>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d903      	bls.n	800a9f6 <xTaskResumeAll+0x7e>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	4a2a      	ldr	r2, [pc, #168]	; (800aa9c <xTaskResumeAll+0x124>)
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4a27      	ldr	r2, [pc, #156]	; (800aaa0 <xTaskResumeAll+0x128>)
 800aa04:	441a      	add	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	f7fe fd84 	bl	800951a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa16:	4b23      	ldr	r3, [pc, #140]	; (800aaa4 <xTaskResumeAll+0x12c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d302      	bcc.n	800aa26 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aa20:	4b21      	ldr	r3, [pc, #132]	; (800aaa8 <xTaskResumeAll+0x130>)
 800aa22:	2201      	movs	r2, #1
 800aa24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa26:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <xTaskResumeAll+0x120>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1cb      	bne.n	800a9c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa34:	f000 fb6e 	bl	800b114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa38:	4b1c      	ldr	r3, [pc, #112]	; (800aaac <xTaskResumeAll+0x134>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d010      	beq.n	800aa66 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa44:	f000 f858 	bl	800aaf8 <xTaskIncrementTick>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aa4e:	4b16      	ldr	r3, [pc, #88]	; (800aaa8 <xTaskResumeAll+0x130>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f1      	bne.n	800aa44 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800aa60:	4b12      	ldr	r3, [pc, #72]	; (800aaac <xTaskResumeAll+0x134>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa66:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <xTaskResumeAll+0x130>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa72:	4b0f      	ldr	r3, [pc, #60]	; (800aab0 <xTaskResumeAll+0x138>)
 800aa74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa82:	f001 f9bb 	bl	800bdfc <vPortExitCritical>

	return xAlreadyYielded;
 800aa86:	68bb      	ldr	r3, [r7, #8]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20000dd0 	.word	0x20000dd0
 800aa94:	20000da8 	.word	0x20000da8
 800aa98:	20000d68 	.word	0x20000d68
 800aa9c:	20000db0 	.word	0x20000db0
 800aaa0:	200008d8 	.word	0x200008d8
 800aaa4:	200008d4 	.word	0x200008d4
 800aaa8:	20000dbc 	.word	0x20000dbc
 800aaac:	20000db8 	.word	0x20000db8
 800aab0:	e000ed04 	.word	0xe000ed04

0800aab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aaba:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <xTaskGetTickCount+0x1c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aac0:	687b      	ldr	r3, [r7, #4]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20000dac 	.word	0x20000dac

0800aad4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aada:	f001 fa3d 	bl	800bf58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aade:	2300      	movs	r3, #0
 800aae0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aae2:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <xTaskGetTickCountFromISR+0x20>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aae8:	683b      	ldr	r3, [r7, #0]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000dac 	.word	0x20000dac

0800aaf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aafe:	2300      	movs	r3, #0
 800ab00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab02:	4b52      	ldr	r3, [pc, #328]	; (800ac4c <xTaskIncrementTick+0x154>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f040 808f 	bne.w	800ac2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab0c:	4b50      	ldr	r3, [pc, #320]	; (800ac50 <xTaskIncrementTick+0x158>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3301      	adds	r3, #1
 800ab12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab14:	4a4e      	ldr	r2, [pc, #312]	; (800ac50 <xTaskIncrementTick+0x158>)
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d121      	bne.n	800ab64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab20:	4b4c      	ldr	r3, [pc, #304]	; (800ac54 <xTaskIncrementTick+0x15c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00b      	beq.n	800ab42 <xTaskIncrementTick+0x4a>
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	b672      	cpsid	i
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	b662      	cpsie	i
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	e7fe      	b.n	800ab40 <xTaskIncrementTick+0x48>
 800ab42:	4b44      	ldr	r3, [pc, #272]	; (800ac54 <xTaskIncrementTick+0x15c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	4b43      	ldr	r3, [pc, #268]	; (800ac58 <xTaskIncrementTick+0x160>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a41      	ldr	r2, [pc, #260]	; (800ac54 <xTaskIncrementTick+0x15c>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	4a41      	ldr	r2, [pc, #260]	; (800ac58 <xTaskIncrementTick+0x160>)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	4b41      	ldr	r3, [pc, #260]	; (800ac5c <xTaskIncrementTick+0x164>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	4a3f      	ldr	r2, [pc, #252]	; (800ac5c <xTaskIncrementTick+0x164>)
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	f000 fad8 	bl	800b114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab64:	4b3e      	ldr	r3, [pc, #248]	; (800ac60 <xTaskIncrementTick+0x168>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d34e      	bcc.n	800ac0c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab6e:	4b39      	ldr	r3, [pc, #228]	; (800ac54 <xTaskIncrementTick+0x15c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <xTaskIncrementTick+0x84>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e000      	b.n	800ab7e <xTaskIncrementTick+0x86>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d004      	beq.n	800ab8c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab82:	4b37      	ldr	r3, [pc, #220]	; (800ac60 <xTaskIncrementTick+0x168>)
 800ab84:	f04f 32ff 	mov.w	r2, #4294967295
 800ab88:	601a      	str	r2, [r3, #0]
					break;
 800ab8a:	e03f      	b.n	800ac0c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab8c:	4b31      	ldr	r3, [pc, #196]	; (800ac54 <xTaskIncrementTick+0x15c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d203      	bcs.n	800abac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aba4:	4a2e      	ldr	r2, [pc, #184]	; (800ac60 <xTaskIncrementTick+0x168>)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6013      	str	r3, [r2, #0]
						break;
 800abaa:	e02f      	b.n	800ac0c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	3304      	adds	r3, #4
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe fd0f 	bl	80095d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	3318      	adds	r3, #24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fd06 	bl	80095d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abcc:	4b25      	ldr	r3, [pc, #148]	; (800ac64 <xTaskIncrementTick+0x16c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d903      	bls.n	800abdc <xTaskIncrementTick+0xe4>
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	4a22      	ldr	r2, [pc, #136]	; (800ac64 <xTaskIncrementTick+0x16c>)
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4a1f      	ldr	r2, [pc, #124]	; (800ac68 <xTaskIncrementTick+0x170>)
 800abea:	441a      	add	r2, r3
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	3304      	adds	r3, #4
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	f7fe fc91 	bl	800951a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfc:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <xTaskIncrementTick+0x174>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d3b3      	bcc.n	800ab6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ac06:	2301      	movs	r3, #1
 800ac08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac0a:	e7b0      	b.n	800ab6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac0c:	4b17      	ldr	r3, [pc, #92]	; (800ac6c <xTaskIncrementTick+0x174>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	4915      	ldr	r1, [pc, #84]	; (800ac68 <xTaskIncrementTick+0x170>)
 800ac14:	4613      	mov	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	440b      	add	r3, r1
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d907      	bls.n	800ac34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac24:	2301      	movs	r3, #1
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	e004      	b.n	800ac34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac2a:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <xTaskIncrementTick+0x178>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	4a0f      	ldr	r2, [pc, #60]	; (800ac70 <xTaskIncrementTick+0x178>)
 800ac32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac34:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <xTaskIncrementTick+0x17c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac40:	697b      	ldr	r3, [r7, #20]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000dd0 	.word	0x20000dd0
 800ac50:	20000dac 	.word	0x20000dac
 800ac54:	20000d60 	.word	0x20000d60
 800ac58:	20000d64 	.word	0x20000d64
 800ac5c:	20000dc0 	.word	0x20000dc0
 800ac60:	20000dc8 	.word	0x20000dc8
 800ac64:	20000db0 	.word	0x20000db0
 800ac68:	200008d8 	.word	0x200008d8
 800ac6c:	200008d4 	.word	0x200008d4
 800ac70:	20000db8 	.word	0x20000db8
 800ac74:	20000dbc 	.word	0x20000dbc

0800ac78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac7e:	4b28      	ldr	r3, [pc, #160]	; (800ad20 <vTaskSwitchContext+0xa8>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac86:	4b27      	ldr	r3, [pc, #156]	; (800ad24 <vTaskSwitchContext+0xac>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac8c:	e042      	b.n	800ad14 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ac8e:	4b25      	ldr	r3, [pc, #148]	; (800ad24 <vTaskSwitchContext+0xac>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ac94:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <vTaskSwitchContext+0xb0>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e011      	b.n	800acc0 <vTaskSwitchContext+0x48>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10b      	bne.n	800acba <vTaskSwitchContext+0x42>
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	b672      	cpsid	i
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	b662      	cpsie	i
 800acb6:	607b      	str	r3, [r7, #4]
 800acb8:	e7fe      	b.n	800acb8 <vTaskSwitchContext+0x40>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	491a      	ldr	r1, [pc, #104]	; (800ad2c <vTaskSwitchContext+0xb4>)
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0e3      	beq.n	800ac9c <vTaskSwitchContext+0x24>
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <vTaskSwitchContext+0xb4>)
 800ace0:	4413      	add	r3, r2
 800ace2:	60bb      	str	r3, [r7, #8]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	3308      	adds	r3, #8
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d104      	bne.n	800ad04 <vTaskSwitchContext+0x8c>
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	605a      	str	r2, [r3, #4]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <vTaskSwitchContext+0xb8>)
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	4a06      	ldr	r2, [pc, #24]	; (800ad28 <vTaskSwitchContext+0xb0>)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6013      	str	r3, [r2, #0]
}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20000dd0 	.word	0x20000dd0
 800ad24:	20000dbc 	.word	0x20000dbc
 800ad28:	20000db0 	.word	0x20000db0
 800ad2c:	200008d8 	.word	0x200008d8
 800ad30:	200008d4 	.word	0x200008d4

0800ad34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10b      	bne.n	800ad5c <vTaskPlaceOnEventList+0x28>
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	b672      	cpsid	i
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	b662      	cpsie	i
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e7fe      	b.n	800ad5a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad5c:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <vTaskPlaceOnEventList+0x48>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3318      	adds	r3, #24
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7fe fbfc 	bl	8009562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	6838      	ldr	r0, [r7, #0]
 800ad6e:	f000 fb9f 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
}
 800ad72:	bf00      	nop
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	200008d4 	.word	0x200008d4

0800ad80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10b      	bne.n	800adaa <vTaskPlaceOnEventListRestricted+0x2a>
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	b672      	cpsid	i
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	b662      	cpsie	i
 800ada6:	617b      	str	r3, [r7, #20]
 800ada8:	e7fe      	b.n	800ada8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adaa:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <vTaskPlaceOnEventListRestricted+0x54>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3318      	adds	r3, #24
 800adb0:	4619      	mov	r1, r3
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7fe fbb1 	bl	800951a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800adbe:	f04f 33ff 	mov.w	r3, #4294967295
 800adc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800adc4:	6879      	ldr	r1, [r7, #4]
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f000 fb72 	bl	800b4b0 <prvAddCurrentTaskToDelayedList>
	}
 800adcc:	bf00      	nop
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200008d4 	.word	0x200008d4

0800add8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10b      	bne.n	800ae06 <xTaskRemoveFromEventList+0x2e>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	b672      	cpsid	i
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	b662      	cpsie	i
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	e7fe      	b.n	800ae04 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	3318      	adds	r3, #24
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fbe2 	bl	80095d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae10:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <xTaskRemoveFromEventList+0xb0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11d      	bne.n	800ae54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fbd9 	bl	80095d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae26:	4b19      	ldr	r3, [pc, #100]	; (800ae8c <xTaskRemoveFromEventList+0xb4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d903      	bls.n	800ae36 <xTaskRemoveFromEventList+0x5e>
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	4a16      	ldr	r2, [pc, #88]	; (800ae8c <xTaskRemoveFromEventList+0xb4>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4a13      	ldr	r2, [pc, #76]	; (800ae90 <xTaskRemoveFromEventList+0xb8>)
 800ae44:	441a      	add	r2, r3
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7fe fb64 	bl	800951a <vListInsertEnd>
 800ae52:	e005      	b.n	800ae60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	3318      	adds	r3, #24
 800ae58:	4619      	mov	r1, r3
 800ae5a:	480e      	ldr	r0, [pc, #56]	; (800ae94 <xTaskRemoveFromEventList+0xbc>)
 800ae5c:	f7fe fb5d 	bl	800951a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae64:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <xTaskRemoveFromEventList+0xc0>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d905      	bls.n	800ae7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae72:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <xTaskRemoveFromEventList+0xc4>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	e001      	b.n	800ae7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ae7e:	697b      	ldr	r3, [r7, #20]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20000dd0 	.word	0x20000dd0
 800ae8c:	20000db0 	.word	0x20000db0
 800ae90:	200008d8 	.word	0x200008d8
 800ae94:	20000d68 	.word	0x20000d68
 800ae98:	200008d4 	.word	0x200008d4
 800ae9c:	20000dbc 	.word	0x20000dbc

0800aea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aea8:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <vTaskInternalSetTimeOutState+0x24>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <vTaskInternalSetTimeOutState+0x28>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	605a      	str	r2, [r3, #4]
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20000dc0 	.word	0x20000dc0
 800aec8:	20000dac 	.word	0x20000dac

0800aecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10b      	bne.n	800aef4 <xTaskCheckForTimeOut+0x28>
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	b672      	cpsid	i
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	b662      	cpsie	i
 800aef0:	613b      	str	r3, [r7, #16]
 800aef2:	e7fe      	b.n	800aef2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10b      	bne.n	800af12 <xTaskCheckForTimeOut+0x46>
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	b672      	cpsid	i
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	b662      	cpsie	i
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e7fe      	b.n	800af10 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800af12:	f000 ff41 	bl	800bd98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af16:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <xTaskCheckForTimeOut+0xc0>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2e:	d102      	bne.n	800af36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	e023      	b.n	800af7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <xTaskCheckForTimeOut+0xc4>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d007      	beq.n	800af52 <xTaskCheckForTimeOut+0x86>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d302      	bcc.n	800af52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	61fb      	str	r3, [r7, #28]
 800af50:	e015      	b.n	800af7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d20b      	bcs.n	800af74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	1ad2      	subs	r2, r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ff99 	bl	800aea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af6e:	2300      	movs	r3, #0
 800af70:	61fb      	str	r3, [r7, #28]
 800af72:	e004      	b.n	800af7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af7a:	2301      	movs	r3, #1
 800af7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af7e:	f000 ff3d 	bl	800bdfc <vPortExitCritical>

	return xReturn;
 800af82:	69fb      	ldr	r3, [r7, #28]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	20000dac 	.word	0x20000dac
 800af90:	20000dc0 	.word	0x20000dc0

0800af94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af94:	b480      	push	{r7}
 800af96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af98:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <vTaskMissedYield+0x14>)
 800af9a:	2201      	movs	r2, #1
 800af9c:	601a      	str	r2, [r3, #0]
}
 800af9e:	bf00      	nop
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	20000dbc 	.word	0x20000dbc

0800afac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afb4:	f000 f852 	bl	800b05c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afb8:	4b06      	ldr	r3, [pc, #24]	; (800afd4 <prvIdleTask+0x28>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d9f9      	bls.n	800afb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <prvIdleTask+0x2c>)
 800afc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc6:	601a      	str	r2, [r3, #0]
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afd0:	e7f0      	b.n	800afb4 <prvIdleTask+0x8>
 800afd2:	bf00      	nop
 800afd4:	200008d8 	.word	0x200008d8
 800afd8:	e000ed04 	.word	0xe000ed04

0800afdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afe2:	2300      	movs	r3, #0
 800afe4:	607b      	str	r3, [r7, #4]
 800afe6:	e00c      	b.n	800b002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4a12      	ldr	r2, [pc, #72]	; (800b03c <prvInitialiseTaskLists+0x60>)
 800aff4:	4413      	add	r3, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fa62 	bl	80094c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3301      	adds	r3, #1
 800b000:	607b      	str	r3, [r7, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b37      	cmp	r3, #55	; 0x37
 800b006:	d9ef      	bls.n	800afe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b008:	480d      	ldr	r0, [pc, #52]	; (800b040 <prvInitialiseTaskLists+0x64>)
 800b00a:	f7fe fa59 	bl	80094c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b00e:	480d      	ldr	r0, [pc, #52]	; (800b044 <prvInitialiseTaskLists+0x68>)
 800b010:	f7fe fa56 	bl	80094c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b014:	480c      	ldr	r0, [pc, #48]	; (800b048 <prvInitialiseTaskLists+0x6c>)
 800b016:	f7fe fa53 	bl	80094c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b01a:	480c      	ldr	r0, [pc, #48]	; (800b04c <prvInitialiseTaskLists+0x70>)
 800b01c:	f7fe fa50 	bl	80094c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b020:	480b      	ldr	r0, [pc, #44]	; (800b050 <prvInitialiseTaskLists+0x74>)
 800b022:	f7fe fa4d 	bl	80094c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b026:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <prvInitialiseTaskLists+0x78>)
 800b028:	4a05      	ldr	r2, [pc, #20]	; (800b040 <prvInitialiseTaskLists+0x64>)
 800b02a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b02c:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <prvInitialiseTaskLists+0x7c>)
 800b02e:	4a05      	ldr	r2, [pc, #20]	; (800b044 <prvInitialiseTaskLists+0x68>)
 800b030:	601a      	str	r2, [r3, #0]
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	200008d8 	.word	0x200008d8
 800b040:	20000d38 	.word	0x20000d38
 800b044:	20000d4c 	.word	0x20000d4c
 800b048:	20000d68 	.word	0x20000d68
 800b04c:	20000d7c 	.word	0x20000d7c
 800b050:	20000d94 	.word	0x20000d94
 800b054:	20000d60 	.word	0x20000d60
 800b058:	20000d64 	.word	0x20000d64

0800b05c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b062:	e019      	b.n	800b098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b064:	f000 fe98 	bl	800bd98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b068:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <prvCheckTasksWaitingTermination+0x4c>)
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3304      	adds	r3, #4
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe faad 	bl	80095d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b07a:	4b0c      	ldr	r3, [pc, #48]	; (800b0ac <prvCheckTasksWaitingTermination+0x50>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3b01      	subs	r3, #1
 800b080:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <prvCheckTasksWaitingTermination+0x50>)
 800b082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <prvCheckTasksWaitingTermination+0x54>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3b01      	subs	r3, #1
 800b08a:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <prvCheckTasksWaitingTermination+0x54>)
 800b08c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b08e:	f000 feb5 	bl	800bdfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f80e 	bl	800b0b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <prvCheckTasksWaitingTermination+0x54>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1e1      	bne.n	800b064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b0a0:	bf00      	nop
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20000d7c 	.word	0x20000d7c
 800b0ac:	20000da8 	.word	0x20000da8
 800b0b0:	20000d90 	.word	0x20000d90

0800b0b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d108      	bne.n	800b0d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 f84e 	bl	800c16c <vPortFree>
				vPortFree( pxTCB );
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 f84b 	bl	800c16c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0d6:	e019      	b.n	800b10c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d103      	bne.n	800b0ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 f842 	bl	800c16c <vPortFree>
	}
 800b0e8:	e010      	b.n	800b10c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d00b      	beq.n	800b10c <prvDeleteTCB+0x58>
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	b672      	cpsid	i
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	b662      	cpsie	i
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	e7fe      	b.n	800b10a <prvDeleteTCB+0x56>
	}
 800b10c:	bf00      	nop
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b11a:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <prvResetNextTaskUnblockTime+0x44>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <prvResetNextTaskUnblockTime+0x14>
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <prvResetNextTaskUnblockTime+0x16>
 800b128:	2300      	movs	r3, #0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <prvResetNextTaskUnblockTime+0x48>)
 800b130:	f04f 32ff 	mov.w	r2, #4294967295
 800b134:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b136:	e008      	b.n	800b14a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b138:	4b07      	ldr	r3, [pc, #28]	; (800b158 <prvResetNextTaskUnblockTime+0x44>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4a05      	ldr	r2, [pc, #20]	; (800b15c <prvResetNextTaskUnblockTime+0x48>)
 800b148:	6013      	str	r3, [r2, #0]
}
 800b14a:	bf00      	nop
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000d60 	.word	0x20000d60
 800b15c:	20000dc8 	.word	0x20000dc8

0800b160 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <xTaskGetCurrentTaskHandle+0x1c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b16c:	687b      	ldr	r3, [r7, #4]
	}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	200008d4 	.word	0x200008d4

0800b180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b186:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <xTaskGetSchedulerState+0x34>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b18e:	2301      	movs	r3, #1
 800b190:	607b      	str	r3, [r7, #4]
 800b192:	e008      	b.n	800b1a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b194:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <xTaskGetSchedulerState+0x38>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b19c:	2302      	movs	r3, #2
 800b19e:	607b      	str	r3, [r7, #4]
 800b1a0:	e001      	b.n	800b1a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1a6:	687b      	ldr	r3, [r7, #4]
	}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	20000db4 	.word	0x20000db4
 800b1b8:	20000dd0 	.word	0x20000dd0

0800b1bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d056      	beq.n	800b280 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	4b2d      	ldr	r3, [pc, #180]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d246      	bcs.n	800b26e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	db06      	blt.n	800b1f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1e8:	4b28      	ldr	r3, [pc, #160]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6959      	ldr	r1, [r3, #20]
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fe:	4613      	mov	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4413      	add	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4a22      	ldr	r2, [pc, #136]	; (800b290 <xTaskPriorityInherit+0xd4>)
 800b208:	4413      	add	r3, r2
 800b20a:	4299      	cmp	r1, r3
 800b20c:	d101      	bne.n	800b212 <xTaskPriorityInherit+0x56>
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <xTaskPriorityInherit+0x58>
 800b212:	2300      	movs	r3, #0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d022      	beq.n	800b25e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fe f9d9 	bl	80095d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b222:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b230:	4b18      	ldr	r3, [pc, #96]	; (800b294 <xTaskPriorityInherit+0xd8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d903      	bls.n	800b240 <xTaskPriorityInherit+0x84>
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a15      	ldr	r2, [pc, #84]	; (800b294 <xTaskPriorityInherit+0xd8>)
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4a10      	ldr	r2, [pc, #64]	; (800b290 <xTaskPriorityInherit+0xd4>)
 800b24e:	441a      	add	r2, r3
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3304      	adds	r3, #4
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe f95f 	bl	800951a <vListInsertEnd>
 800b25c:	e004      	b.n	800b268 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b25e:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e008      	b.n	800b280 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b272:	4b06      	ldr	r3, [pc, #24]	; (800b28c <xTaskPriorityInherit+0xd0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	429a      	cmp	r2, r3
 800b27a:	d201      	bcs.n	800b280 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b27c:	2301      	movs	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b280:	68fb      	ldr	r3, [r7, #12]
	}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	200008d4 	.word	0x200008d4
 800b290:	200008d8 	.word	0x200008d8
 800b294:	20000db0 	.word	0x20000db0

0800b298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d058      	beq.n	800b360 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2ae:	4b2f      	ldr	r3, [pc, #188]	; (800b36c <xTaskPriorityDisinherit+0xd4>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d00b      	beq.n	800b2d0 <xTaskPriorityDisinherit+0x38>
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	b672      	cpsid	i
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	b662      	cpsie	i
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	e7fe      	b.n	800b2ce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10b      	bne.n	800b2f0 <xTaskPriorityDisinherit+0x58>
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	b672      	cpsid	i
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	b662      	cpsie	i
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	e7fe      	b.n	800b2ee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b302:	429a      	cmp	r2, r3
 800b304:	d02c      	beq.n	800b360 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d128      	bne.n	800b360 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	3304      	adds	r3, #4
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe f95e 	bl	80095d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b330:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <xTaskPriorityDisinherit+0xd8>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d903      	bls.n	800b340 <xTaskPriorityDisinherit+0xa8>
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	4a0c      	ldr	r2, [pc, #48]	; (800b370 <xTaskPriorityDisinherit+0xd8>)
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b344:	4613      	mov	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4a09      	ldr	r2, [pc, #36]	; (800b374 <xTaskPriorityDisinherit+0xdc>)
 800b34e:	441a      	add	r2, r3
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	3304      	adds	r3, #4
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f7fe f8df 	bl	800951a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b360:	697b      	ldr	r3, [r7, #20]
	}
 800b362:	4618      	mov	r0, r3
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	200008d4 	.word	0x200008d4
 800b370:	20000db0 	.word	0x20000db0
 800b374:	200008d8 	.word	0x200008d8

0800b378 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b386:	2301      	movs	r3, #1
 800b388:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d071      	beq.n	800b474 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10b      	bne.n	800b3b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	b672      	cpsid	i
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	b662      	cpsie	i
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	e7fe      	b.n	800b3ae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d902      	bls.n	800b3c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	61fb      	str	r3, [r7, #28]
 800b3be:	e002      	b.n	800b3c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d051      	beq.n	800b474 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d14c      	bne.n	800b474 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b3da:	4b28      	ldr	r3, [pc, #160]	; (800b47c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d10b      	bne.n	800b3fc <vTaskPriorityDisinheritAfterTimeout+0x84>
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	b672      	cpsid	i
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	b662      	cpsie	i
 800b3f8:	60bb      	str	r3, [r7, #8]
 800b3fa:	e7fe      	b.n	800b3fa <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	db04      	blt.n	800b41a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	6959      	ldr	r1, [r3, #20]
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4a15      	ldr	r2, [pc, #84]	; (800b480 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b42a:	4413      	add	r3, r2
 800b42c:	4299      	cmp	r1, r3
 800b42e:	d101      	bne.n	800b434 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800b430:	2301      	movs	r3, #1
 800b432:	e000      	b.n	800b436 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800b434:	2300      	movs	r3, #0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d01c      	beq.n	800b474 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe f8c8 	bl	80095d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d903      	bls.n	800b458 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a0b      	ldr	r2, [pc, #44]	; (800b484 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4a06      	ldr	r2, [pc, #24]	; (800b480 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b466:	441a      	add	r2, r3
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f7fe f853 	bl	800951a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b474:	bf00      	nop
 800b476:	3720      	adds	r7, #32
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	200008d4 	.word	0x200008d4
 800b480:	200008d8 	.word	0x200008d8
 800b484:	20000db0 	.word	0x20000db0

0800b488 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b48c:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <pvTaskIncrementMutexHeldCount+0x24>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d004      	beq.n	800b49e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b494:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <pvTaskIncrementMutexHeldCount+0x24>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b49a:	3201      	adds	r2, #1
 800b49c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b49e:	4b03      	ldr	r3, [pc, #12]	; (800b4ac <pvTaskIncrementMutexHeldCount+0x24>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
	}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	200008d4 	.word	0x200008d4

0800b4b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4ba:	4b21      	ldr	r3, [pc, #132]	; (800b540 <prvAddCurrentTaskToDelayedList+0x90>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4c0:	4b20      	ldr	r3, [pc, #128]	; (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe f884 	bl	80095d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d2:	d10a      	bne.n	800b4ea <prvAddCurrentTaskToDelayedList+0x3a>
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4da:	4b1a      	ldr	r3, [pc, #104]	; (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4819      	ldr	r0, [pc, #100]	; (800b548 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4e4:	f7fe f819 	bl	800951a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4e8:	e026      	b.n	800b538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4f2:	4b14      	ldr	r3, [pc, #80]	; (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d209      	bcs.n	800b516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b502:	4b12      	ldr	r3, [pc, #72]	; (800b54c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b0f      	ldr	r3, [pc, #60]	; (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3304      	adds	r3, #4
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	f7fe f827 	bl	8009562 <vListInsert>
}
 800b514:	e010      	b.n	800b538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b516:	4b0e      	ldr	r3, [pc, #56]	; (800b550 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <prvAddCurrentTaskToDelayedList+0x94>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3304      	adds	r3, #4
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7fe f81d 	bl	8009562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d202      	bcs.n	800b538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b532:	4a08      	ldr	r2, [pc, #32]	; (800b554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	6013      	str	r3, [r2, #0]
}
 800b538:	bf00      	nop
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	20000dac 	.word	0x20000dac
 800b544:	200008d4 	.word	0x200008d4
 800b548:	20000d94 	.word	0x20000d94
 800b54c:	20000d64 	.word	0x20000d64
 800b550:	20000d60 	.word	0x20000d60
 800b554:	20000dc8 	.word	0x20000dc8

0800b558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b562:	f000 fad1 	bl	800bb08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b566:	4b1d      	ldr	r3, [pc, #116]	; (800b5dc <xTimerCreateTimerTask+0x84>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d021      	beq.n	800b5b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b576:	1d3a      	adds	r2, r7, #4
 800b578:	f107 0108 	add.w	r1, r7, #8
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	4618      	mov	r0, r3
 800b582:	f7fd ff83 	bl	800948c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	9202      	str	r2, [sp, #8]
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	2302      	movs	r3, #2
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	2300      	movs	r3, #0
 800b596:	460a      	mov	r2, r1
 800b598:	4911      	ldr	r1, [pc, #68]	; (800b5e0 <xTimerCreateTimerTask+0x88>)
 800b59a:	4812      	ldr	r0, [pc, #72]	; (800b5e4 <xTimerCreateTimerTask+0x8c>)
 800b59c:	f7fe ff24 	bl	800a3e8 <xTaskCreateStatic>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <xTimerCreateTimerTask+0x90>)
 800b5a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b5a6:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <xTimerCreateTimerTask+0x90>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <xTimerCreateTimerTask+0x78>
 800b5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5bc:	b672      	cpsid	i
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	b662      	cpsie	i
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	e7fe      	b.n	800b5ce <xTimerCreateTimerTask+0x76>
	return xReturn;
 800b5d0:	697b      	ldr	r3, [r7, #20]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20000e04 	.word	0x20000e04
 800b5e0:	0800e220 	.word	0x0800e220
 800b5e4:	0800b70d 	.word	0x0800b70d
 800b5e8:	20000e08 	.word	0x20000e08

0800b5ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10b      	bne.n	800b61c <xTimerGenericCommand+0x30>
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	b672      	cpsid	i
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	b662      	cpsie	i
 800b618:	623b      	str	r3, [r7, #32]
 800b61a:	e7fe      	b.n	800b61a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b61c:	4b19      	ldr	r3, [pc, #100]	; (800b684 <xTimerGenericCommand+0x98>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d02a      	beq.n	800b67a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b05      	cmp	r3, #5
 800b634:	dc18      	bgt.n	800b668 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b636:	f7ff fda3 	bl	800b180 <xTaskGetSchedulerState>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d109      	bne.n	800b654 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b640:	4b10      	ldr	r3, [pc, #64]	; (800b684 <xTimerGenericCommand+0x98>)
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	f107 0110 	add.w	r1, r7, #16
 800b648:	2300      	movs	r3, #0
 800b64a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b64c:	f7fe f9b8 	bl	80099c0 <xQueueGenericSend>
 800b650:	6278      	str	r0, [r7, #36]	; 0x24
 800b652:	e012      	b.n	800b67a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b654:	4b0b      	ldr	r3, [pc, #44]	; (800b684 <xTimerGenericCommand+0x98>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	f107 0110 	add.w	r1, r7, #16
 800b65c:	2300      	movs	r3, #0
 800b65e:	2200      	movs	r2, #0
 800b660:	f7fe f9ae 	bl	80099c0 <xQueueGenericSend>
 800b664:	6278      	str	r0, [r7, #36]	; 0x24
 800b666:	e008      	b.n	800b67a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b668:	4b06      	ldr	r3, [pc, #24]	; (800b684 <xTimerGenericCommand+0x98>)
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	f107 0110 	add.w	r1, r7, #16
 800b670:	2300      	movs	r3, #0
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	f7fe faa6 	bl	8009bc4 <xQueueGenericSendFromISR>
 800b678:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3728      	adds	r7, #40	; 0x28
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	20000e04 	.word	0x20000e04

0800b688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b692:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <prvProcessExpiredTimer+0x80>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fd ff97 	bl	80095d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d123      	bne.n	800b6f6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	699a      	ldr	r2, [r3, #24]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	18d1      	adds	r1, r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	683a      	ldr	r2, [r7, #0]
 800b6ba:	6978      	ldr	r0, [r7, #20]
 800b6bc:	f000 f8ca 	bl	800b854 <prvInsertTimerInActiveList>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d017      	beq.n	800b6f6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6978      	ldr	r0, [r7, #20]
 800b6d2:	f7ff ff8b 	bl	800b5ec <xTimerGenericCommand>
 800b6d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10b      	bne.n	800b6f6 <prvProcessExpiredTimer+0x6e>
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	b672      	cpsid	i
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	b662      	cpsie	i
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	e7fe      	b.n	800b6f4 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	6978      	ldr	r0, [r7, #20]
 800b6fc:	4798      	blx	r3
}
 800b6fe:	bf00      	nop
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000dfc 	.word	0x20000dfc

0800b70c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b714:	f107 0308 	add.w	r3, r7, #8
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 f857 	bl	800b7cc <prvGetNextExpireTime>
 800b71e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4619      	mov	r1, r3
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f000 f803 	bl	800b730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b72a:	f000 f8d5 	bl	800b8d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b72e:	e7f1      	b.n	800b714 <prvTimerTask+0x8>

0800b730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b73a:	f7ff f90f 	bl	800a95c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b73e:	f107 0308 	add.w	r3, r7, #8
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f866 	bl	800b814 <prvSampleTimeNow>
 800b748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d130      	bne.n	800b7b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <prvProcessTimerOrBlockTask+0x3c>
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d806      	bhi.n	800b76c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b75e:	f7ff f90b 	bl	800a978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff ff8f 	bl	800b688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b76a:	e024      	b.n	800b7b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d008      	beq.n	800b784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b772:	4b13      	ldr	r3, [pc, #76]	; (800b7c0 <prvProcessTimerOrBlockTask+0x90>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	bf0c      	ite	eq
 800b77c:	2301      	moveq	r3, #1
 800b77e:	2300      	movne	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <prvProcessTimerOrBlockTask+0x94>)
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4619      	mov	r1, r3
 800b792:	f7fe fdf5 	bl	800a380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b796:	f7ff f8ef 	bl	800a978 <xTaskResumeAll>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7a0:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <prvProcessTimerOrBlockTask+0x98>)
 800b7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
}
 800b7b0:	e001      	b.n	800b7b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7b2:	f7ff f8e1 	bl	800a978 <xTaskResumeAll>
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20000e00 	.word	0x20000e00
 800b7c4:	20000e04 	.word	0x20000e04
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <prvGetNextExpireTime+0x44>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bf0c      	ite	eq
 800b7de:	2301      	moveq	r3, #1
 800b7e0:	2300      	movne	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d105      	bne.n	800b7fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvGetNextExpireTime+0x44>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	e001      	b.n	800b802 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b802:	68fb      	ldr	r3, [r7, #12]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20000dfc 	.word	0x20000dfc

0800b814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b81c:	f7ff f94a 	bl	800aab4 <xTaskGetTickCount>
 800b820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <prvSampleTimeNow+0x3c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d205      	bcs.n	800b838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b82c:	f000 f90a 	bl	800ba44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	601a      	str	r2, [r3, #0]
 800b836:	e002      	b.n	800b83e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b83e:	4a04      	ldr	r2, [pc, #16]	; (800b850 <prvSampleTimeNow+0x3c>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b844:	68fb      	ldr	r3, [r7, #12]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000e0c 	.word	0x20000e0c

0800b854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d812      	bhi.n	800b8a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	429a      	cmp	r2, r3
 800b886:	d302      	bcc.n	800b88e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
 800b88c:	e01b      	b.n	800b8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b88e:	4b10      	ldr	r3, [pc, #64]	; (800b8d0 <prvInsertTimerInActiveList+0x7c>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3304      	adds	r3, #4
 800b896:	4619      	mov	r1, r3
 800b898:	4610      	mov	r0, r2
 800b89a:	f7fd fe62 	bl	8009562 <vListInsert>
 800b89e:	e012      	b.n	800b8c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d206      	bcs.n	800b8b6 <prvInsertTimerInActiveList+0x62>
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d302      	bcc.n	800b8b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	e007      	b.n	800b8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8b6:	4b07      	ldr	r3, [pc, #28]	; (800b8d4 <prvInsertTimerInActiveList+0x80>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	f7fd fe4e 	bl	8009562 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8c6:	697b      	ldr	r3, [r7, #20]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20000e00 	.word	0x20000e00
 800b8d4:	20000dfc 	.word	0x20000dfc

0800b8d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08e      	sub	sp, #56	; 0x38
 800b8dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8de:	e09f      	b.n	800ba20 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	da19      	bge.n	800b91a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8e6:	1d3b      	adds	r3, r7, #4
 800b8e8:	3304      	adds	r3, #4
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10b      	bne.n	800b90a <prvProcessReceivedCommands+0x32>
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	b672      	cpsid	i
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	b662      	cpsie	i
 800b906:	61fb      	str	r3, [r7, #28]
 800b908:	e7fe      	b.n	800b908 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b910:	6850      	ldr	r0, [r2, #4]
 800b912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b914:	6892      	ldr	r2, [r2, #8]
 800b916:	4611      	mov	r1, r2
 800b918:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	db7e      	blt.n	800ba1e <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	3304      	adds	r3, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7fd fe4f 	bl	80095d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b936:	463b      	mov	r3, r7
 800b938:	4618      	mov	r0, r3
 800b93a:	f7ff ff6b 	bl	800b814 <prvSampleTimeNow>
 800b93e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b09      	cmp	r3, #9
 800b944:	d86c      	bhi.n	800ba20 <prvProcessReceivedCommands+0x148>
 800b946:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <prvProcessReceivedCommands+0x74>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b975 	.word	0x0800b975
 800b950:	0800b975 	.word	0x0800b975
 800b954:	0800b975 	.word	0x0800b975
 800b958:	0800ba21 	.word	0x0800ba21
 800b95c:	0800b9d3 	.word	0x0800b9d3
 800b960:	0800ba0d 	.word	0x0800ba0d
 800b964:	0800b975 	.word	0x0800b975
 800b968:	0800b975 	.word	0x0800b975
 800b96c:	0800ba21 	.word	0x0800ba21
 800b970:	0800b9d3 	.word	0x0800b9d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	18d1      	adds	r1, r2, r3
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b982:	f7ff ff67 	bl	800b854 <prvInsertTimerInActiveList>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d049      	beq.n	800ba20 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b992:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d141      	bne.n	800ba20 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	441a      	add	r2, r3
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9ae:	f7ff fe1d 	bl	800b5ec <xTimerGenericCommand>
 800b9b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d132      	bne.n	800ba20 <prvProcessReceivedCommands+0x148>
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	b672      	cpsid	i
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	b662      	cpsie	i
 800b9ce:	61bb      	str	r3, [r7, #24]
 800b9d0:	e7fe      	b.n	800b9d0 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10b      	bne.n	800b9f8 <prvProcessReceivedCommands+0x120>
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	b672      	cpsid	i
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	b662      	cpsie	i
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e7fe      	b.n	800b9f6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	699a      	ldr	r2, [r3, #24]
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	18d1      	adds	r1, r2, r3
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba06:	f7ff ff25 	bl	800b854 <prvInsertTimerInActiveList>
					break;
 800ba0a:	e009      	b.n	800ba20 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d104      	bne.n	800ba20 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 800ba16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba18:	f000 fba8 	bl	800c16c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba1c:	e000      	b.n	800ba20 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba1e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba20:	4b07      	ldr	r3, [pc, #28]	; (800ba40 <prvProcessReceivedCommands+0x168>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	1d39      	adds	r1, r7, #4
 800ba26:	2200      	movs	r2, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe f967 	bl	8009cfc <xQueueReceive>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f47f af55 	bne.w	800b8e0 <prvProcessReceivedCommands+0x8>
	}
}
 800ba36:	bf00      	nop
 800ba38:	3730      	adds	r7, #48	; 0x30
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20000e04 	.word	0x20000e04

0800ba44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba4a:	e046      	b.n	800bada <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba4c:	4b2c      	ldr	r3, [pc, #176]	; (800bb00 <prvSwitchTimerLists+0xbc>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba56:	4b2a      	ldr	r3, [pc, #168]	; (800bb00 <prvSwitchTimerLists+0xbc>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	3304      	adds	r3, #4
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fd fdb5 	bl	80095d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d12f      	bne.n	800bada <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4413      	add	r3, r2
 800ba82:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d90e      	bls.n	800baaa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba98:	4b19      	ldr	r3, [pc, #100]	; (800bb00 <prvSwitchTimerLists+0xbc>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	4619      	mov	r1, r3
 800baa2:	4610      	mov	r0, r2
 800baa4:	f7fd fd5d 	bl	8009562 <vListInsert>
 800baa8:	e017      	b.n	800bada <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800baaa:	2300      	movs	r3, #0
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	2300      	movs	r3, #0
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	2100      	movs	r1, #0
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fd99 	bl	800b5ec <xTimerGenericCommand>
 800baba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10b      	bne.n	800bada <prvSwitchTimerLists+0x96>
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	b672      	cpsid	i
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	b662      	cpsie	i
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	e7fe      	b.n	800bad8 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <prvSwitchTimerLists+0xbc>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1b3      	bne.n	800ba4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bae4:	4b06      	ldr	r3, [pc, #24]	; (800bb00 <prvSwitchTimerLists+0xbc>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <prvSwitchTimerLists+0xc0>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a04      	ldr	r2, [pc, #16]	; (800bb00 <prvSwitchTimerLists+0xbc>)
 800baf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800baf2:	4a04      	ldr	r2, [pc, #16]	; (800bb04 <prvSwitchTimerLists+0xc0>)
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	6013      	str	r3, [r2, #0]
}
 800baf8:	bf00      	nop
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20000dfc 	.word	0x20000dfc
 800bb04:	20000e00 	.word	0x20000e00

0800bb08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb0e:	f000 f943 	bl	800bd98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <prvCheckForValidListAndQueue+0x60>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d120      	bne.n	800bb5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb1a:	4814      	ldr	r0, [pc, #80]	; (800bb6c <prvCheckForValidListAndQueue+0x64>)
 800bb1c:	f7fd fcd0 	bl	80094c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb20:	4813      	ldr	r0, [pc, #76]	; (800bb70 <prvCheckForValidListAndQueue+0x68>)
 800bb22:	f7fd fccd 	bl	80094c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb26:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <prvCheckForValidListAndQueue+0x6c>)
 800bb28:	4a10      	ldr	r2, [pc, #64]	; (800bb6c <prvCheckForValidListAndQueue+0x64>)
 800bb2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb2c:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <prvCheckForValidListAndQueue+0x70>)
 800bb2e:	4a10      	ldr	r2, [pc, #64]	; (800bb70 <prvCheckForValidListAndQueue+0x68>)
 800bb30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb32:	2300      	movs	r3, #0
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	4b11      	ldr	r3, [pc, #68]	; (800bb7c <prvCheckForValidListAndQueue+0x74>)
 800bb38:	4a11      	ldr	r2, [pc, #68]	; (800bb80 <prvCheckForValidListAndQueue+0x78>)
 800bb3a:	2110      	movs	r1, #16
 800bb3c:	200a      	movs	r0, #10
 800bb3e:	f7fd fddd 	bl	80096fc <xQueueGenericCreateStatic>
 800bb42:	4602      	mov	r2, r0
 800bb44:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <prvCheckForValidListAndQueue+0x60>)
 800bb46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb48:	4b07      	ldr	r3, [pc, #28]	; (800bb68 <prvCheckForValidListAndQueue+0x60>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb50:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <prvCheckForValidListAndQueue+0x60>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	490b      	ldr	r1, [pc, #44]	; (800bb84 <prvCheckForValidListAndQueue+0x7c>)
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fbea 	bl	800a330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb5c:	f000 f94e 	bl	800bdfc <vPortExitCritical>
}
 800bb60:	bf00      	nop
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000e04 	.word	0x20000e04
 800bb6c:	20000dd4 	.word	0x20000dd4
 800bb70:	20000de8 	.word	0x20000de8
 800bb74:	20000dfc 	.word	0x20000dfc
 800bb78:	20000e00 	.word	0x20000e00
 800bb7c:	20000eb0 	.word	0x20000eb0
 800bb80:	20000e10 	.word	0x20000e10
 800bb84:	0800e228 	.word	0x0800e228

0800bb88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3b04      	subs	r3, #4
 800bb98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3b04      	subs	r3, #4
 800bba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	f023 0201 	bic.w	r2, r3, #1
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3b04      	subs	r3, #4
 800bbb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbb8:	4a0c      	ldr	r2, [pc, #48]	; (800bbec <pxPortInitialiseStack+0x64>)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3b14      	subs	r3, #20
 800bbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3b04      	subs	r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f06f 0202 	mvn.w	r2, #2
 800bbd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3b20      	subs	r3, #32
 800bbdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbde:	68fb      	ldr	r3, [r7, #12]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	0800bbf1 	.word	0x0800bbf1

0800bbf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbfa:	4b13      	ldr	r3, [pc, #76]	; (800bc48 <prvTaskExitError+0x58>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc02:	d00b      	beq.n	800bc1c <prvTaskExitError+0x2c>
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	b672      	cpsid	i
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	b662      	cpsie	i
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	e7fe      	b.n	800bc1a <prvTaskExitError+0x2a>
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	b672      	cpsid	i
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	b662      	cpsie	i
 800bc30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc32:	bf00      	nop
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0fc      	beq.n	800bc34 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc3a:	bf00      	nop
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	20000118 	.word	0x20000118
 800bc4c:	00000000 	.word	0x00000000

0800bc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc50:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <pxCurrentTCBConst2>)
 800bc52:	6819      	ldr	r1, [r3, #0]
 800bc54:	6808      	ldr	r0, [r1, #0]
 800bc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5a:	f380 8809 	msr	PSP, r0
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f04f 0000 	mov.w	r0, #0
 800bc66:	f380 8811 	msr	BASEPRI, r0
 800bc6a:	4770      	bx	lr
 800bc6c:	f3af 8000 	nop.w

0800bc70 <pxCurrentTCBConst2>:
 800bc70:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop

0800bc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc78:	4808      	ldr	r0, [pc, #32]	; (800bc9c <prvPortStartFirstTask+0x24>)
 800bc7a:	6800      	ldr	r0, [r0, #0]
 800bc7c:	6800      	ldr	r0, [r0, #0]
 800bc7e:	f380 8808 	msr	MSP, r0
 800bc82:	f04f 0000 	mov.w	r0, #0
 800bc86:	f380 8814 	msr	CONTROL, r0
 800bc8a:	b662      	cpsie	i
 800bc8c:	b661      	cpsie	f
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	df00      	svc	0
 800bc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc9a:	bf00      	nop
 800bc9c:	e000ed08 	.word	0xe000ed08

0800bca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bca6:	4b36      	ldr	r3, [pc, #216]	; (800bd80 <xPortStartScheduler+0xe0>)
 800bca8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcc0:	78fb      	ldrb	r3, [r7, #3]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	4b2e      	ldr	r3, [pc, #184]	; (800bd84 <xPortStartScheduler+0xe4>)
 800bccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcce:	4b2e      	ldr	r3, [pc, #184]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bcd0:	2207      	movs	r2, #7
 800bcd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcd4:	e009      	b.n	800bcea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bcd6:	4b2c      	ldr	r3, [pc, #176]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	4a2a      	ldr	r2, [pc, #168]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bcde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b80      	cmp	r3, #128	; 0x80
 800bcf4:	d0ef      	beq.n	800bcd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcf6:	4b24      	ldr	r3, [pc, #144]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f1c3 0307 	rsb	r3, r3, #7
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d00b      	beq.n	800bd1a <xPortStartScheduler+0x7a>
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	b672      	cpsid	i
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	b662      	cpsie	i
 800bd16:	60bb      	str	r3, [r7, #8]
 800bd18:	e7fe      	b.n	800bd18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd1a:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	4a19      	ldr	r2, [pc, #100]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bd22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd24:	4b18      	ldr	r3, [pc, #96]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd2c:	4a16      	ldr	r2, [pc, #88]	; (800bd88 <xPortStartScheduler+0xe8>)
 800bd2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd38:	4b14      	ldr	r3, [pc, #80]	; (800bd8c <xPortStartScheduler+0xec>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a13      	ldr	r2, [pc, #76]	; (800bd8c <xPortStartScheduler+0xec>)
 800bd3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd44:	4b11      	ldr	r3, [pc, #68]	; (800bd8c <xPortStartScheduler+0xec>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <xPortStartScheduler+0xec>)
 800bd4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd50:	f000 f8d4 	bl	800befc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd54:	4b0e      	ldr	r3, [pc, #56]	; (800bd90 <xPortStartScheduler+0xf0>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd5a:	f000 f8f3 	bl	800bf44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	; (800bd94 <xPortStartScheduler+0xf4>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a0c      	ldr	r2, [pc, #48]	; (800bd94 <xPortStartScheduler+0xf4>)
 800bd64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd6a:	f7ff ff85 	bl	800bc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd6e:	f7fe ff83 	bl	800ac78 <vTaskSwitchContext>
	prvTaskExitError();
 800bd72:	f7ff ff3d 	bl	800bbf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	e000e400 	.word	0xe000e400
 800bd84:	20000f00 	.word	0x20000f00
 800bd88:	20000f04 	.word	0x20000f04
 800bd8c:	e000ed20 	.word	0xe000ed20
 800bd90:	20000118 	.word	0x20000118
 800bd94:	e000ef34 	.word	0xe000ef34

0800bd98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	b672      	cpsid	i
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	b662      	cpsie	i
 800bdb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <vPortEnterCritical+0x5c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	4a0e      	ldr	r2, [pc, #56]	; (800bdf4 <vPortEnterCritical+0x5c>)
 800bdbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <vPortEnterCritical+0x5c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d110      	bne.n	800bde8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdc6:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <vPortEnterCritical+0x60>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00b      	beq.n	800bde8 <vPortEnterCritical+0x50>
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	b672      	cpsid	i
 800bdd6:	f383 8811 	msr	BASEPRI, r3
 800bdda:	f3bf 8f6f 	isb	sy
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	b662      	cpsie	i
 800bde4:	603b      	str	r3, [r7, #0]
 800bde6:	e7fe      	b.n	800bde6 <vPortEnterCritical+0x4e>
	}
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	20000118 	.word	0x20000118
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be02:	4b12      	ldr	r3, [pc, #72]	; (800be4c <vPortExitCritical+0x50>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10b      	bne.n	800be22 <vPortExitCritical+0x26>
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	b672      	cpsid	i
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	b662      	cpsie	i
 800be1e:	607b      	str	r3, [r7, #4]
 800be20:	e7fe      	b.n	800be20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <vPortExitCritical+0x50>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3b01      	subs	r3, #1
 800be28:	4a08      	ldr	r2, [pc, #32]	; (800be4c <vPortExitCritical+0x50>)
 800be2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be2c:	4b07      	ldr	r3, [pc, #28]	; (800be4c <vPortExitCritical+0x50>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d104      	bne.n	800be3e <vPortExitCritical+0x42>
 800be34:	2300      	movs	r3, #0
 800be36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800be3e:	bf00      	nop
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20000118 	.word	0x20000118

0800be50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be50:	f3ef 8009 	mrs	r0, PSP
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <pxCurrentTCBConst>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	f01e 0f10 	tst.w	lr, #16
 800be60:	bf08      	it	eq
 800be62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6a:	6010      	str	r0, [r2, #0]
 800be6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be74:	b672      	cpsid	i
 800be76:	f380 8811 	msr	BASEPRI, r0
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	b662      	cpsie	i
 800be84:	f7fe fef8 	bl	800ac78 <vTaskSwitchContext>
 800be88:	f04f 0000 	mov.w	r0, #0
 800be8c:	f380 8811 	msr	BASEPRI, r0
 800be90:	bc09      	pop	{r0, r3}
 800be92:	6819      	ldr	r1, [r3, #0]
 800be94:	6808      	ldr	r0, [r1, #0]
 800be96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9a:	f01e 0f10 	tst.w	lr, #16
 800be9e:	bf08      	it	eq
 800bea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bea4:	f380 8809 	msr	PSP, r0
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop

0800beb0 <pxCurrentTCBConst>:
 800beb0:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop

0800beb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	b672      	cpsid	i
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	b662      	cpsie	i
 800bed2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bed4:	f7fe fe10 	bl	800aaf8 <xTaskIncrementTick>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bede:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <SysTick_Handler+0x40>)
 800bee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	2300      	movs	r3, #0
 800bee8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	e000ed04 	.word	0xe000ed04

0800befc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800befc:	b480      	push	{r7}
 800befe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf00:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <vPortSetupTimerInterrupt+0x34>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <vPortSetupTimerInterrupt+0x38>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <vPortSetupTimerInterrupt+0x3c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a0a      	ldr	r2, [pc, #40]	; (800bf3c <vPortSetupTimerInterrupt+0x40>)
 800bf12:	fba2 2303 	umull	r2, r3, r2, r3
 800bf16:	099b      	lsrs	r3, r3, #6
 800bf18:	4a09      	ldr	r2, [pc, #36]	; (800bf40 <vPortSetupTimerInterrupt+0x44>)
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf1e:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <vPortSetupTimerInterrupt+0x34>)
 800bf20:	2207      	movs	r2, #7
 800bf22:	601a      	str	r2, [r3, #0]
}
 800bf24:	bf00      	nop
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	e000e010 	.word	0xe000e010
 800bf34:	e000e018 	.word	0xe000e018
 800bf38:	20000000 	.word	0x20000000
 800bf3c:	10624dd3 	.word	0x10624dd3
 800bf40:	e000e014 	.word	0xe000e014

0800bf44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf54 <vPortEnableVFP+0x10>
 800bf48:	6801      	ldr	r1, [r0, #0]
 800bf4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf4e:	6001      	str	r1, [r0, #0]
 800bf50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf52:	bf00      	nop
 800bf54:	e000ed88 	.word	0xe000ed88

0800bf58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf5e:	f3ef 8305 	mrs	r3, IPSR
 800bf62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b0f      	cmp	r3, #15
 800bf68:	d915      	bls.n	800bf96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf6a:	4a18      	ldr	r2, [pc, #96]	; (800bfcc <vPortValidateInterruptPriority+0x74>)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4413      	add	r3, r2
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf74:	4b16      	ldr	r3, [pc, #88]	; (800bfd0 <vPortValidateInterruptPriority+0x78>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	7afa      	ldrb	r2, [r7, #11]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d20b      	bcs.n	800bf96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	b672      	cpsid	i
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	b662      	cpsie	i
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	e7fe      	b.n	800bf94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf96:	4b0f      	ldr	r3, [pc, #60]	; (800bfd4 <vPortValidateInterruptPriority+0x7c>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <vPortValidateInterruptPriority+0x80>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d90b      	bls.n	800bfbe <vPortValidateInterruptPriority+0x66>
 800bfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfaa:	b672      	cpsid	i
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	b662      	cpsie	i
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	e7fe      	b.n	800bfbc <vPortValidateInterruptPriority+0x64>
	}
 800bfbe:	bf00      	nop
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	e000e3f0 	.word	0xe000e3f0
 800bfd0:	20000f00 	.word	0x20000f00
 800bfd4:	e000ed0c 	.word	0xe000ed0c
 800bfd8:	20000f04 	.word	0x20000f04

0800bfdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b08a      	sub	sp, #40	; 0x28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfe8:	f7fe fcb8 	bl	800a95c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfec:	4b5a      	ldr	r3, [pc, #360]	; (800c158 <pvPortMalloc+0x17c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d101      	bne.n	800bff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bff4:	f000 f916 	bl	800c224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bff8:	4b58      	ldr	r3, [pc, #352]	; (800c15c <pvPortMalloc+0x180>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4013      	ands	r3, r2
 800c000:	2b00      	cmp	r3, #0
 800c002:	f040 8090 	bne.w	800c126 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d01e      	beq.n	800c04a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c00c:	2208      	movs	r2, #8
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4413      	add	r3, r2
 800c012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f003 0307 	and.w	r3, r3, #7
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d015      	beq.n	800c04a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f023 0307 	bic.w	r3, r3, #7
 800c024:	3308      	adds	r3, #8
 800c026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00b      	beq.n	800c04a <pvPortMalloc+0x6e>
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	b672      	cpsid	i
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	b662      	cpsie	i
 800c046:	617b      	str	r3, [r7, #20]
 800c048:	e7fe      	b.n	800c048 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d06a      	beq.n	800c126 <pvPortMalloc+0x14a>
 800c050:	4b43      	ldr	r3, [pc, #268]	; (800c160 <pvPortMalloc+0x184>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	429a      	cmp	r2, r3
 800c058:	d865      	bhi.n	800c126 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c05a:	4b42      	ldr	r3, [pc, #264]	; (800c164 <pvPortMalloc+0x188>)
 800c05c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c05e:	4b41      	ldr	r3, [pc, #260]	; (800c164 <pvPortMalloc+0x188>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c064:	e004      	b.n	800c070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	429a      	cmp	r2, r3
 800c078:	d903      	bls.n	800c082 <pvPortMalloc+0xa6>
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1f1      	bne.n	800c066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c082:	4b35      	ldr	r3, [pc, #212]	; (800c158 <pvPortMalloc+0x17c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c088:	429a      	cmp	r2, r3
 800c08a:	d04c      	beq.n	800c126 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2208      	movs	r2, #8
 800c092:	4413      	add	r3, r2
 800c094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	1ad2      	subs	r2, r2, r3
 800c0a6:	2308      	movs	r3, #8
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d920      	bls.n	800c0f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	f003 0307 	and.w	r3, r3, #7
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00b      	beq.n	800c0d8 <pvPortMalloc+0xfc>
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	b672      	cpsid	i
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	b662      	cpsie	i
 800c0d4:	613b      	str	r3, [r7, #16]
 800c0d6:	e7fe      	b.n	800c0d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0ea:	69b8      	ldr	r0, [r7, #24]
 800c0ec:	f000 f8fc 	bl	800c2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0f0:	4b1b      	ldr	r3, [pc, #108]	; (800c160 <pvPortMalloc+0x184>)
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	4a19      	ldr	r2, [pc, #100]	; (800c160 <pvPortMalloc+0x184>)
 800c0fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0fe:	4b18      	ldr	r3, [pc, #96]	; (800c160 <pvPortMalloc+0x184>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4b19      	ldr	r3, [pc, #100]	; (800c168 <pvPortMalloc+0x18c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d203      	bcs.n	800c112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c10a:	4b15      	ldr	r3, [pc, #84]	; (800c160 <pvPortMalloc+0x184>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a16      	ldr	r2, [pc, #88]	; (800c168 <pvPortMalloc+0x18c>)
 800c110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	4b11      	ldr	r3, [pc, #68]	; (800c15c <pvPortMalloc+0x180>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	431a      	orrs	r2, r3
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c126:	f7fe fc27 	bl	800a978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	f003 0307 	and.w	r3, r3, #7
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <pvPortMalloc+0x170>
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	b672      	cpsid	i
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	b662      	cpsie	i
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	e7fe      	b.n	800c14a <pvPortMalloc+0x16e>
	return pvReturn;
 800c14c:	69fb      	ldr	r3, [r7, #28]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3728      	adds	r7, #40	; 0x28
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20004b10 	.word	0x20004b10
 800c15c:	20004b1c 	.word	0x20004b1c
 800c160:	20004b14 	.word	0x20004b14
 800c164:	20004b08 	.word	0x20004b08
 800c168:	20004b18 	.word	0x20004b18

0800c16c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d04a      	beq.n	800c214 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c17e:	2308      	movs	r3, #8
 800c180:	425b      	negs	r3, r3
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	4413      	add	r3, r2
 800c186:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	4b22      	ldr	r3, [pc, #136]	; (800c21c <vPortFree+0xb0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4013      	ands	r3, r2
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10b      	bne.n	800c1b2 <vPortFree+0x46>
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	b672      	cpsid	i
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	b662      	cpsie	i
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	e7fe      	b.n	800c1b0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00b      	beq.n	800c1d2 <vPortFree+0x66>
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	b672      	cpsid	i
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	b662      	cpsie	i
 800c1ce:	60bb      	str	r3, [r7, #8]
 800c1d0:	e7fe      	b.n	800c1d0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	4b11      	ldr	r3, [pc, #68]	; (800c21c <vPortFree+0xb0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d019      	beq.n	800c214 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d115      	bne.n	800c214 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	4b0b      	ldr	r3, [pc, #44]	; (800c21c <vPortFree+0xb0>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	43db      	mvns	r3, r3
 800c1f2:	401a      	ands	r2, r3
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1f8:	f7fe fbb0 	bl	800a95c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <vPortFree+0xb4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4413      	add	r3, r2
 800c206:	4a06      	ldr	r2, [pc, #24]	; (800c220 <vPortFree+0xb4>)
 800c208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c20a:	6938      	ldr	r0, [r7, #16]
 800c20c:	f000 f86c 	bl	800c2e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c210:	f7fe fbb2 	bl	800a978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c214:	bf00      	nop
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20004b1c 	.word	0x20004b1c
 800c220:	20004b14 	.word	0x20004b14

0800c224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c22a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c230:	4b27      	ldr	r3, [pc, #156]	; (800c2d0 <prvHeapInit+0xac>)
 800c232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00c      	beq.n	800c258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3307      	adds	r3, #7
 800c242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f023 0307 	bic.w	r3, r3, #7
 800c24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	4a1f      	ldr	r2, [pc, #124]	; (800c2d0 <prvHeapInit+0xac>)
 800c254:	4413      	add	r3, r2
 800c256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c25c:	4a1d      	ldr	r2, [pc, #116]	; (800c2d4 <prvHeapInit+0xb0>)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c262:	4b1c      	ldr	r3, [pc, #112]	; (800c2d4 <prvHeapInit+0xb0>)
 800c264:	2200      	movs	r2, #0
 800c266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	4413      	add	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c270:	2208      	movs	r2, #8
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	1a9b      	subs	r3, r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0307 	bic.w	r3, r3, #7
 800c27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4a15      	ldr	r2, [pc, #84]	; (800c2d8 <prvHeapInit+0xb4>)
 800c284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c286:	4b14      	ldr	r3, [pc, #80]	; (800c2d8 <prvHeapInit+0xb4>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2200      	movs	r2, #0
 800c28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c28e:	4b12      	ldr	r3, [pc, #72]	; (800c2d8 <prvHeapInit+0xb4>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2a4:	4b0c      	ldr	r3, [pc, #48]	; (800c2d8 <prvHeapInit+0xb4>)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	4a0a      	ldr	r2, [pc, #40]	; (800c2dc <prvHeapInit+0xb8>)
 800c2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	4a09      	ldr	r2, [pc, #36]	; (800c2e0 <prvHeapInit+0xbc>)
 800c2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2bc:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <prvHeapInit+0xc0>)
 800c2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2c2:	601a      	str	r2, [r3, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	20000f08 	.word	0x20000f08
 800c2d4:	20004b08 	.word	0x20004b08
 800c2d8:	20004b10 	.word	0x20004b10
 800c2dc:	20004b18 	.word	0x20004b18
 800c2e0:	20004b14 	.word	0x20004b14
 800c2e4:	20004b1c 	.word	0x20004b1c

0800c2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2f0:	4b28      	ldr	r3, [pc, #160]	; (800c394 <prvInsertBlockIntoFreeList+0xac>)
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	e002      	b.n	800c2fc <prvInsertBlockIntoFreeList+0x14>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	429a      	cmp	r2, r3
 800c304:	d8f7      	bhi.n	800c2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	4413      	add	r3, r2
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	429a      	cmp	r2, r3
 800c316:	d108      	bne.n	800c32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	441a      	add	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	441a      	add	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d118      	bne.n	800c370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b15      	ldr	r3, [pc, #84]	; (800c398 <prvInsertBlockIntoFreeList+0xb0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d00d      	beq.n	800c366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	441a      	add	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	e008      	b.n	800c378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <prvInsertBlockIntoFreeList+0xb0>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	e003      	b.n	800c378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d002      	beq.n	800c386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c386:	bf00      	nop
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20004b08 	.word	0x20004b08
 800c398:	20004b10 	.word	0x20004b10

0800c39c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4912      	ldr	r1, [pc, #72]	; (800c3ec <MX_USB_DEVICE_Init+0x50>)
 800c3a4:	4812      	ldr	r0, [pc, #72]	; (800c3f0 <MX_USB_DEVICE_Init+0x54>)
 800c3a6:	f7fb fd42 	bl	8007e2e <USBD_Init>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3b0:	f7f4 ff58 	bl	8001264 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c3b4:	490f      	ldr	r1, [pc, #60]	; (800c3f4 <MX_USB_DEVICE_Init+0x58>)
 800c3b6:	480e      	ldr	r0, [pc, #56]	; (800c3f0 <MX_USB_DEVICE_Init+0x54>)
 800c3b8:	f7fb fd64 	bl	8007e84 <USBD_RegisterClass>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3c2:	f7f4 ff4f 	bl	8001264 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c3c6:	490c      	ldr	r1, [pc, #48]	; (800c3f8 <MX_USB_DEVICE_Init+0x5c>)
 800c3c8:	4809      	ldr	r0, [pc, #36]	; (800c3f0 <MX_USB_DEVICE_Init+0x54>)
 800c3ca:	f7fb fcc1 	bl	8007d50 <USBD_CDC_RegisterInterface>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3d4:	f7f4 ff46 	bl	8001264 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c3d8:	4805      	ldr	r0, [pc, #20]	; (800c3f0 <MX_USB_DEVICE_Init+0x54>)
 800c3da:	f7fb fd6d 	bl	8007eb8 <USBD_Start>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3e4:	f7f4 ff3e 	bl	8001264 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3e8:	bf00      	nop
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	2000012c 	.word	0x2000012c
 800c3f0:	200065b0 	.word	0x200065b0
 800c3f4:	20000014 	.word	0x20000014
 800c3f8:	2000011c 	.word	0x2000011c

0800c3fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c400:	2200      	movs	r2, #0
 800c402:	4905      	ldr	r1, [pc, #20]	; (800c418 <CDC_Init_FS+0x1c>)
 800c404:	4805      	ldr	r0, [pc, #20]	; (800c41c <CDC_Init_FS+0x20>)
 800c406:	f7fb fcba 	bl	8007d7e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c40a:	4905      	ldr	r1, [pc, #20]	; (800c420 <CDC_Init_FS+0x24>)
 800c40c:	4803      	ldr	r0, [pc, #12]	; (800c41c <CDC_Init_FS+0x20>)
 800c40e:	f7fb fcd0 	bl	8007db2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c414:	4618      	mov	r0, r3
 800c416:	bd80      	pop	{r7, pc}
 800c418:	2000704c 	.word	0x2000704c
 800c41c:	200065b0 	.word	0x200065b0
 800c420:	2000684c 	.word	0x2000684c

0800c424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c424:	b480      	push	{r7}
 800c426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
 800c440:	4613      	mov	r3, r2
 800c442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	2b23      	cmp	r3, #35	; 0x23
 800c448:	d84a      	bhi.n	800c4e0 <CDC_Control_FS+0xac>
 800c44a:	a201      	add	r2, pc, #4	; (adr r2, 800c450 <CDC_Control_FS+0x1c>)
 800c44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c450:	0800c4e1 	.word	0x0800c4e1
 800c454:	0800c4e1 	.word	0x0800c4e1
 800c458:	0800c4e1 	.word	0x0800c4e1
 800c45c:	0800c4e1 	.word	0x0800c4e1
 800c460:	0800c4e1 	.word	0x0800c4e1
 800c464:	0800c4e1 	.word	0x0800c4e1
 800c468:	0800c4e1 	.word	0x0800c4e1
 800c46c:	0800c4e1 	.word	0x0800c4e1
 800c470:	0800c4e1 	.word	0x0800c4e1
 800c474:	0800c4e1 	.word	0x0800c4e1
 800c478:	0800c4e1 	.word	0x0800c4e1
 800c47c:	0800c4e1 	.word	0x0800c4e1
 800c480:	0800c4e1 	.word	0x0800c4e1
 800c484:	0800c4e1 	.word	0x0800c4e1
 800c488:	0800c4e1 	.word	0x0800c4e1
 800c48c:	0800c4e1 	.word	0x0800c4e1
 800c490:	0800c4e1 	.word	0x0800c4e1
 800c494:	0800c4e1 	.word	0x0800c4e1
 800c498:	0800c4e1 	.word	0x0800c4e1
 800c49c:	0800c4e1 	.word	0x0800c4e1
 800c4a0:	0800c4e1 	.word	0x0800c4e1
 800c4a4:	0800c4e1 	.word	0x0800c4e1
 800c4a8:	0800c4e1 	.word	0x0800c4e1
 800c4ac:	0800c4e1 	.word	0x0800c4e1
 800c4b0:	0800c4e1 	.word	0x0800c4e1
 800c4b4:	0800c4e1 	.word	0x0800c4e1
 800c4b8:	0800c4e1 	.word	0x0800c4e1
 800c4bc:	0800c4e1 	.word	0x0800c4e1
 800c4c0:	0800c4e1 	.word	0x0800c4e1
 800c4c4:	0800c4e1 	.word	0x0800c4e1
 800c4c8:	0800c4e1 	.word	0x0800c4e1
 800c4cc:	0800c4e1 	.word	0x0800c4e1
 800c4d0:	0800c4e1 	.word	0x0800c4e1
 800c4d4:	0800c4e1 	.word	0x0800c4e1
 800c4d8:	0800c4e1 	.word	0x0800c4e1
 800c4dc:	0800c4e1 	.word	0x0800c4e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4e0:	bf00      	nop
  }

  return (USBD_OK);
 800c4e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c4fa:	6879      	ldr	r1, [r7, #4]
 800c4fc:	4805      	ldr	r0, [pc, #20]	; (800c514 <CDC_Receive_FS+0x24>)
 800c4fe:	f7fb fc58 	bl	8007db2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c502:	4804      	ldr	r0, [pc, #16]	; (800c514 <CDC_Receive_FS+0x24>)
 800c504:	f7fb fc69 	bl	8007dda <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c508:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	200065b0 	.word	0x200065b0

0800c518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2212      	movs	r2, #18
 800c528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	2000014c 	.word	0x2000014c

0800c53c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2204      	movs	r2, #4
 800c54c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c54e:	4b03      	ldr	r3, [pc, #12]	; (800c55c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	2000016c 	.word	0x2000016c

0800c560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4907      	ldr	r1, [pc, #28]	; (800c594 <USBD_FS_ProductStrDescriptor+0x34>)
 800c576:	4808      	ldr	r0, [pc, #32]	; (800c598 <USBD_FS_ProductStrDescriptor+0x38>)
 800c578:	f7fc fbf2 	bl	8008d60 <USBD_GetString>
 800c57c:	e004      	b.n	800c588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	4904      	ldr	r1, [pc, #16]	; (800c594 <USBD_FS_ProductStrDescriptor+0x34>)
 800c582:	4805      	ldr	r0, [pc, #20]	; (800c598 <USBD_FS_ProductStrDescriptor+0x38>)
 800c584:	f7fc fbec 	bl	8008d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	2000784c 	.word	0x2000784c
 800c598:	0800e230 	.word	0x0800e230

0800c59c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6039      	str	r1, [r7, #0]
 800c5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	4904      	ldr	r1, [pc, #16]	; (800c5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c5ac:	4804      	ldr	r0, [pc, #16]	; (800c5c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c5ae:	f7fc fbd7 	bl	8008d60 <USBD_GetString>
  return USBD_StrDesc;
 800c5b2:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	2000784c 	.word	0x2000784c
 800c5c0:	0800e248 	.word	0x0800e248

0800c5c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	221a      	movs	r2, #26
 800c5d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5d6:	f000 f855 	bl	800c684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c5da:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20000170 	.word	0x20000170

0800c5e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	6039      	str	r1, [r7, #0]
 800c5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d105      	bne.n	800c606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	4907      	ldr	r1, [pc, #28]	; (800c61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5fe:	4808      	ldr	r0, [pc, #32]	; (800c620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c600:	f7fc fbae 	bl	8008d60 <USBD_GetString>
 800c604:	e004      	b.n	800c610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4904      	ldr	r1, [pc, #16]	; (800c61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c60a:	4805      	ldr	r0, [pc, #20]	; (800c620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c60c:	f7fc fba8 	bl	8008d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c610:	4b02      	ldr	r3, [pc, #8]	; (800c61c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	2000784c 	.word	0x2000784c
 800c620:	0800e25c 	.word	0x0800e25c

0800c624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d105      	bne.n	800c642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	4907      	ldr	r1, [pc, #28]	; (800c658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c63a:	4808      	ldr	r0, [pc, #32]	; (800c65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c63c:	f7fc fb90 	bl	8008d60 <USBD_GetString>
 800c640:	e004      	b.n	800c64c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	4904      	ldr	r1, [pc, #16]	; (800c658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c646:	4805      	ldr	r0, [pc, #20]	; (800c65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c648:	f7fc fb8a 	bl	8008d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c64c:	4b02      	ldr	r3, [pc, #8]	; (800c658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	2000784c 	.word	0x2000784c
 800c65c:	0800e268 	.word	0x0800e268

0800c660 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	4603      	mov	r3, r0
 800c668:	6039      	str	r1, [r7, #0]
 800c66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	220c      	movs	r2, #12
 800c670:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c672:	4b03      	ldr	r3, [pc, #12]	; (800c680 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c674:	4618      	mov	r0, r3
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	20000160 	.word	0x20000160

0800c684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c68a:	4b0f      	ldr	r3, [pc, #60]	; (800c6c8 <Get_SerialNum+0x44>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c690:	4b0e      	ldr	r3, [pc, #56]	; (800c6cc <Get_SerialNum+0x48>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c696:	4b0e      	ldr	r3, [pc, #56]	; (800c6d0 <Get_SerialNum+0x4c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6aa:	2208      	movs	r2, #8
 800c6ac:	4909      	ldr	r1, [pc, #36]	; (800c6d4 <Get_SerialNum+0x50>)
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 f814 	bl	800c6dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6b4:	2204      	movs	r2, #4
 800c6b6:	4908      	ldr	r1, [pc, #32]	; (800c6d8 <Get_SerialNum+0x54>)
 800c6b8:	68b8      	ldr	r0, [r7, #8]
 800c6ba:	f000 f80f 	bl	800c6dc <IntToUnicode>
  }
}
 800c6be:	bf00      	nop
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	1ff0f420 	.word	0x1ff0f420
 800c6cc:	1ff0f424 	.word	0x1ff0f424
 800c6d0:	1ff0f428 	.word	0x1ff0f428
 800c6d4:	20000172 	.word	0x20000172
 800c6d8:	20000182 	.word	0x20000182

0800c6dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	75fb      	strb	r3, [r7, #23]
 800c6f2:	e027      	b.n	800c744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	0f1b      	lsrs	r3, r3, #28
 800c6f8:	2b09      	cmp	r3, #9
 800c6fa:	d80b      	bhi.n	800c714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	0f1b      	lsrs	r3, r3, #28
 800c700:	b2da      	uxtb	r2, r3
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	4619      	mov	r1, r3
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	440b      	add	r3, r1
 800c70c:	3230      	adds	r2, #48	; 0x30
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	e00a      	b.n	800c72a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	0f1b      	lsrs	r3, r3, #28
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	7dfb      	ldrb	r3, [r7, #23]
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	4619      	mov	r1, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	440b      	add	r3, r1
 800c724:	3237      	adds	r2, #55	; 0x37
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c730:	7dfb      	ldrb	r3, [r7, #23]
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	3301      	adds	r3, #1
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	3301      	adds	r3, #1
 800c742:	75fb      	strb	r3, [r7, #23]
 800c744:	7dfa      	ldrb	r2, [r7, #23]
 800c746:	79fb      	ldrb	r3, [r7, #7]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d3d3      	bcc.n	800c6f4 <IntToUnicode+0x18>
  }
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	; 0x28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c760:	f107 0314 	add.w	r3, r7, #20
 800c764:	2200      	movs	r2, #0
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	605a      	str	r2, [r3, #4]
 800c76a:	609a      	str	r2, [r3, #8]
 800c76c:	60da      	str	r2, [r3, #12]
 800c76e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c778:	d13c      	bne.n	800c7f4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c77a:	4b20      	ldr	r3, [pc, #128]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77e:	4a1f      	ldr	r2, [pc, #124]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c780:	f043 0301 	orr.w	r3, r3, #1
 800c784:	6313      	str	r3, [r2, #48]	; 0x30
 800c786:	4b1d      	ldr	r3, [pc, #116]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	613b      	str	r3, [r7, #16]
 800c790:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c792:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c798:	2302      	movs	r3, #2
 800c79a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7a4:	230a      	movs	r3, #10
 800c7a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7a8:	f107 0314 	add.w	r3, r7, #20
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4814      	ldr	r0, [pc, #80]	; (800c800 <HAL_PCD_MspInit+0xa8>)
 800c7b0:	f7f6 faaa 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7b4:	4b11      	ldr	r3, [pc, #68]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b8:	4a10      	ldr	r2, [pc, #64]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7be:	6353      	str	r3, [r2, #52]	; 0x34
 800c7c0:	4b0e      	ldr	r3, [pc, #56]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c8:	60fb      	str	r3, [r7, #12]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	4b0b      	ldr	r3, [pc, #44]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d0:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c7d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c7d6:	6453      	str	r3, [r2, #68]	; 0x44
 800c7d8:	4b08      	ldr	r3, [pc, #32]	; (800c7fc <HAL_PCD_MspInit+0xa4>)
 800c7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7e0:	60bb      	str	r3, [r7, #8]
 800c7e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2105      	movs	r1, #5
 800c7e8:	2043      	movs	r0, #67	; 0x43
 800c7ea:	f7f6 fa63 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c7ee:	2043      	movs	r0, #67	; 0x43
 800c7f0:	f7f6 fa7c 	bl	8002cec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c7f4:	bf00      	nop
 800c7f6:	3728      	adds	r7, #40	; 0x28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	40023800 	.word	0x40023800
 800c800:	40020000 	.word	0x40020000

0800c804 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c818:	4619      	mov	r1, r3
 800c81a:	4610      	mov	r0, r2
 800c81c:	f7fb fb95 	bl	8007f4a <USBD_LL_SetupStage>
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800c83a:	78fa      	ldrb	r2, [r7, #3]
 800c83c:	6879      	ldr	r1, [r7, #4]
 800c83e:	4613      	mov	r3, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	1a9b      	subs	r3, r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	440b      	add	r3, r1
 800c848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	78fb      	ldrb	r3, [r7, #3]
 800c850:	4619      	mov	r1, r3
 800c852:	f7fb fbc5 	bl	8007fe0 <USBD_LL_DataOutStage>
}
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b082      	sub	sp, #8
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800c870:	78fa      	ldrb	r2, [r7, #3]
 800c872:	6879      	ldr	r1, [r7, #4]
 800c874:	4613      	mov	r3, r2
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	1a9b      	subs	r3, r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	440b      	add	r3, r1
 800c87e:	3348      	adds	r3, #72	; 0x48
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	78fb      	ldrb	r3, [r7, #3]
 800c884:	4619      	mov	r1, r3
 800c886:	f7fb fc1c 	bl	80080c2 <USBD_LL_DataInStage>
}
 800c88a:	bf00      	nop
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fb fd2a 	bl	80082fa <USBD_LL_SOF>
}
 800c8a6:	bf00      	nop
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d102      	bne.n	800c8c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	73fb      	strb	r3, [r7, #15]
 800c8c6:	e008      	b.n	800c8da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d102      	bne.n	800c8d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	73fb      	strb	r3, [r7, #15]
 800c8d4:	e001      	b.n	800c8da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c8d6:	f7f4 fcc5 	bl	8001264 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c8e0:	7bfa      	ldrb	r2, [r7, #15]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fb fcd2 	bl	800828e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fb fc8b 	bl	800820c <USBD_LL_Reset>
}
 800c8f6:	bf00      	nop
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
	...

0800c900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fb fccd 	bl	80082ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	6812      	ldr	r2, [r2, #0]
 800c922:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c926:	f043 0301 	orr.w	r3, r3, #1
 800c92a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d005      	beq.n	800c940 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c934:	4b04      	ldr	r3, [pc, #16]	; (800c948 <HAL_PCD_SuspendCallback+0x48>)
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	4a03      	ldr	r2, [pc, #12]	; (800c948 <HAL_PCD_SuspendCallback+0x48>)
 800c93a:	f043 0306 	orr.w	r3, r3, #6
 800c93e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	e000ed00 	.word	0xe000ed00

0800c94c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fb fcbc 	bl	80082d8 <USBD_LL_Resume>
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c97a:	78fa      	ldrb	r2, [r7, #3]
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fb fce2 	bl	8008348 <USBD_LL_IsoOUTIncomplete>
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c99e:	78fa      	ldrb	r2, [r7, #3]
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fb fcc3 	bl	800832e <USBD_LL_IsoINIncomplete>
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fb fccf 	bl	8008362 <USBD_LL_DevConnected>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fb fccc 	bl	8008378 <USBD_LL_DevDisconnected>
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d13c      	bne.n	800ca72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c9f8:	4a20      	ldr	r2, [pc, #128]	; (800ca7c <USBD_LL_Init+0x94>)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a1e      	ldr	r2, [pc, #120]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ca08:	4b1c      	ldr	r3, [pc, #112]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ca0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ca10:	4b1a      	ldr	r3, [pc, #104]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca12:	2206      	movs	r2, #6
 800ca14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ca16:	4b19      	ldr	r3, [pc, #100]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca18:	2202      	movs	r2, #2
 800ca1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ca1c:	4b17      	ldr	r3, [pc, #92]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca22:	4b16      	ldr	r3, [pc, #88]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca24:	2202      	movs	r2, #2
 800ca26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca28:	4b14      	ldr	r3, [pc, #80]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ca34:	4b11      	ldr	r3, [pc, #68]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ca3a:	4b10      	ldr	r3, [pc, #64]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca40:	4b0e      	ldr	r3, [pc, #56]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ca46:	480d      	ldr	r0, [pc, #52]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca48:	f7f6 fb08 	bl	800305c <HAL_PCD_Init>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ca52:	f7f4 fc07 	bl	8001264 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ca56:	2180      	movs	r1, #128	; 0x80
 800ca58:	4808      	ldr	r0, [pc, #32]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca5a:	f7f7 fc88 	bl	800436e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca5e:	2240      	movs	r2, #64	; 0x40
 800ca60:	2100      	movs	r1, #0
 800ca62:	4806      	ldr	r0, [pc, #24]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca64:	f7f7 fc3c 	bl	80042e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca68:	2280      	movs	r2, #128	; 0x80
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	4803      	ldr	r0, [pc, #12]	; (800ca7c <USBD_LL_Init+0x94>)
 800ca6e:	f7f7 fc37 	bl	80042e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20007a4c 	.word	0x20007a4c

0800ca80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7f6 fbf8 	bl	800328c <HAL_PCD_Start>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 f982 	bl	800cdac <USBD_Get_USB_Status>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800caac:	7bbb      	ldrb	r3, [r7, #14]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	4608      	mov	r0, r1
 800cac0:	4611      	mov	r1, r2
 800cac2:	461a      	mov	r2, r3
 800cac4:	4603      	mov	r3, r0
 800cac6:	70fb      	strb	r3, [r7, #3]
 800cac8:	460b      	mov	r3, r1
 800caca:	70bb      	strb	r3, [r7, #2]
 800cacc:	4613      	mov	r3, r2
 800cace:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cade:	78bb      	ldrb	r3, [r7, #2]
 800cae0:	883a      	ldrh	r2, [r7, #0]
 800cae2:	78f9      	ldrb	r1, [r7, #3]
 800cae4:	f7f6 ffed 	bl	8003ac2 <HAL_PCD_EP_Open>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f95c 	bl	800cdac <USBD_Get_USB_Status>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cb1c:	78fa      	ldrb	r2, [r7, #3]
 800cb1e:	4611      	mov	r1, r2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7f7 f836 	bl	8003b92 <HAL_PCD_EP_Close>
 800cb26:	4603      	mov	r3, r0
 800cb28:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f93d 	bl	800cdac <USBD_Get_USB_Status>
 800cb32:	4603      	mov	r3, r0
 800cb34:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cb5a:	78fa      	ldrb	r2, [r7, #3]
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f7 f90e 	bl	8003d80 <HAL_PCD_EP_SetStall>
 800cb64:	4603      	mov	r3, r0
 800cb66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 f91e 	bl	800cdac <USBD_Get_USB_Status>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cb98:	78fa      	ldrb	r2, [r7, #3]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7f7 f953 	bl	8003e48 <HAL_PCD_EP_ClrStall>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 f8ff 	bl	800cdac <USBD_Get_USB_Status>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cbce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cbd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	da0b      	bge.n	800cbf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbde:	68f9      	ldr	r1, [r7, #12]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	440b      	add	r3, r1
 800cbea:	333e      	adds	r3, #62	; 0x3e
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	e00b      	b.n	800cc08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbf6:	68f9      	ldr	r1, [r7, #12]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	440b      	add	r3, r1
 800cc02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cc2e:	78fa      	ldrb	r2, [r7, #3]
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7f6 ff20 	bl	8003a78 <HAL_PCD_SetAddress>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc3c:	7bfb      	ldrb	r3, [r7, #15]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 f8b4 	bl	800cdac <USBD_Get_USB_Status>
 800cc44:	4603      	mov	r3, r0
 800cc46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800cc48:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b086      	sub	sp, #24
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	60f8      	str	r0, [r7, #12]
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	460b      	mov	r3, r1
 800cc60:	72fb      	strb	r3, [r7, #11]
 800cc62:	4613      	mov	r3, r2
 800cc64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800cc74:	893b      	ldrh	r3, [r7, #8]
 800cc76:	7af9      	ldrb	r1, [r7, #11]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	f7f7 f837 	bl	8003cec <HAL_PCD_EP_Transmit>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800cc82:	7dfb      	ldrb	r3, [r7, #23]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 f891 	bl	800cdac <USBD_Get_USB_Status>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800cc8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	461a      	mov	r2, r3
 800cca4:	460b      	mov	r3, r1
 800cca6:	72fb      	strb	r3, [r7, #11]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ccba:	893b      	ldrh	r3, [r7, #8]
 800ccbc:	7af9      	ldrb	r1, [r7, #11]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	f7f6 ffb1 	bl	8003c26 <HAL_PCD_EP_Receive>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 f86e 	bl	800cdac <USBD_Get_USB_Status>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800ccd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	460b      	mov	r3, r1
 800cce8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ccf0:	78fa      	ldrb	r2, [r7, #3]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f6 ffe1 	bl	8003cbc <HAL_PCD_EP_GetRxCount>
 800ccfa:	4603      	mov	r3, r0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <HAL_PCDEx_LPM_Callback+0x18>
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d01f      	beq.n	800cd5a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800cd1a:	e03b      	b.n	800cd94 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a1b      	ldr	r3, [r3, #32]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d007      	beq.n	800cd34 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cd24:	f000 f83c 	bl	800cda0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd28:	4b1c      	ldr	r3, [pc, #112]	; (800cd9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cd2e:	f023 0306 	bic.w	r3, r3, #6
 800cd32:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	6812      	ldr	r2, [r2, #0]
 800cd42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd46:	f023 0301 	bic.w	r3, r3, #1
 800cd4a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fb fac0 	bl	80082d8 <USBD_LL_Resume>
    break;
 800cd58:	e01c      	b.n	800cd94 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd6c:	f043 0301 	orr.w	r3, r3, #1
 800cd70:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fb fa98 	bl	80082ae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	4a04      	ldr	r2, [pc, #16]	; (800cd9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cd8c:	f043 0306 	orr.w	r3, r3, #6
 800cd90:	6113      	str	r3, [r2, #16]
    break;   
 800cd92:	bf00      	nop
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	e000ed00 	.word	0xe000ed00

0800cda0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cda4:	f7f4 f954 	bl	8001050 <SystemClock_Config>
}
 800cda8:	bf00      	nop
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d817      	bhi.n	800cdf0 <USBD_Get_USB_Status+0x44>
 800cdc0:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <USBD_Get_USB_Status+0x1c>)
 800cdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc6:	bf00      	nop
 800cdc8:	0800cdd9 	.word	0x0800cdd9
 800cdcc:	0800cddf 	.word	0x0800cddf
 800cdd0:	0800cde5 	.word	0x0800cde5
 800cdd4:	0800cdeb 	.word	0x0800cdeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
    break;
 800cddc:	e00b      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdde:	2302      	movs	r3, #2
 800cde0:	73fb      	strb	r3, [r7, #15]
    break;
 800cde2:	e008      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cde4:	2301      	movs	r3, #1
 800cde6:	73fb      	strb	r3, [r7, #15]
    break;
 800cde8:	e005      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdea:	2302      	movs	r3, #2
 800cdec:	73fb      	strb	r3, [r7, #15]
    break;
 800cdee:	e002      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf4:	bf00      	nop
  }
  return usb_status;
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <__errno>:
 800ce04:	4b01      	ldr	r3, [pc, #4]	; (800ce0c <__errno+0x8>)
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	2000018c 	.word	0x2000018c

0800ce10 <__libc_init_array>:
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	4e0d      	ldr	r6, [pc, #52]	; (800ce48 <__libc_init_array+0x38>)
 800ce14:	4c0d      	ldr	r4, [pc, #52]	; (800ce4c <__libc_init_array+0x3c>)
 800ce16:	1ba4      	subs	r4, r4, r6
 800ce18:	10a4      	asrs	r4, r4, #2
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	42a5      	cmp	r5, r4
 800ce1e:	d109      	bne.n	800ce34 <__libc_init_array+0x24>
 800ce20:	4e0b      	ldr	r6, [pc, #44]	; (800ce50 <__libc_init_array+0x40>)
 800ce22:	4c0c      	ldr	r4, [pc, #48]	; (800ce54 <__libc_init_array+0x44>)
 800ce24:	f001 f9c6 	bl	800e1b4 <_init>
 800ce28:	1ba4      	subs	r4, r4, r6
 800ce2a:	10a4      	asrs	r4, r4, #2
 800ce2c:	2500      	movs	r5, #0
 800ce2e:	42a5      	cmp	r5, r4
 800ce30:	d105      	bne.n	800ce3e <__libc_init_array+0x2e>
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce38:	4798      	blx	r3
 800ce3a:	3501      	adds	r5, #1
 800ce3c:	e7ee      	b.n	800ce1c <__libc_init_array+0xc>
 800ce3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce42:	4798      	blx	r3
 800ce44:	3501      	adds	r5, #1
 800ce46:	e7f2      	b.n	800ce2e <__libc_init_array+0x1e>
 800ce48:	0800e2e0 	.word	0x0800e2e0
 800ce4c:	0800e2e0 	.word	0x0800e2e0
 800ce50:	0800e2e0 	.word	0x0800e2e0
 800ce54:	0800e2e4 	.word	0x0800e2e4

0800ce58 <malloc>:
 800ce58:	4b02      	ldr	r3, [pc, #8]	; (800ce64 <malloc+0xc>)
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	6818      	ldr	r0, [r3, #0]
 800ce5e:	f000 b86d 	b.w	800cf3c <_malloc_r>
 800ce62:	bf00      	nop
 800ce64:	2000018c 	.word	0x2000018c

0800ce68 <free>:
 800ce68:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <free+0xc>)
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	f000 b817 	b.w	800cea0 <_free_r>
 800ce72:	bf00      	nop
 800ce74:	2000018c 	.word	0x2000018c

0800ce78 <memcpy>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	1e43      	subs	r3, r0, #1
 800ce7c:	440a      	add	r2, r1
 800ce7e:	4291      	cmp	r1, r2
 800ce80:	d100      	bne.n	800ce84 <memcpy+0xc>
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8c:	e7f7      	b.n	800ce7e <memcpy+0x6>

0800ce8e <memset>:
 800ce8e:	4402      	add	r2, r0
 800ce90:	4603      	mov	r3, r0
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d100      	bne.n	800ce98 <memset+0xa>
 800ce96:	4770      	bx	lr
 800ce98:	f803 1b01 	strb.w	r1, [r3], #1
 800ce9c:	e7f9      	b.n	800ce92 <memset+0x4>
	...

0800cea0 <_free_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4605      	mov	r5, r0
 800cea4:	2900      	cmp	r1, #0
 800cea6:	d045      	beq.n	800cf34 <_free_r+0x94>
 800cea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceac:	1f0c      	subs	r4, r1, #4
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	bfb8      	it	lt
 800ceb2:	18e4      	addlt	r4, r4, r3
 800ceb4:	f000 f8ac 	bl	800d010 <__malloc_lock>
 800ceb8:	4a1f      	ldr	r2, [pc, #124]	; (800cf38 <_free_r+0x98>)
 800ceba:	6813      	ldr	r3, [r2, #0]
 800cebc:	4610      	mov	r0, r2
 800cebe:	b933      	cbnz	r3, 800cece <_free_r+0x2e>
 800cec0:	6063      	str	r3, [r4, #4]
 800cec2:	6014      	str	r4, [r2, #0]
 800cec4:	4628      	mov	r0, r5
 800cec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceca:	f000 b8a2 	b.w	800d012 <__malloc_unlock>
 800cece:	42a3      	cmp	r3, r4
 800ced0:	d90c      	bls.n	800ceec <_free_r+0x4c>
 800ced2:	6821      	ldr	r1, [r4, #0]
 800ced4:	1862      	adds	r2, r4, r1
 800ced6:	4293      	cmp	r3, r2
 800ced8:	bf04      	itt	eq
 800ceda:	681a      	ldreq	r2, [r3, #0]
 800cedc:	685b      	ldreq	r3, [r3, #4]
 800cede:	6063      	str	r3, [r4, #4]
 800cee0:	bf04      	itt	eq
 800cee2:	1852      	addeq	r2, r2, r1
 800cee4:	6022      	streq	r2, [r4, #0]
 800cee6:	6004      	str	r4, [r0, #0]
 800cee8:	e7ec      	b.n	800cec4 <_free_r+0x24>
 800ceea:	4613      	mov	r3, r2
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	b10a      	cbz	r2, 800cef4 <_free_r+0x54>
 800cef0:	42a2      	cmp	r2, r4
 800cef2:	d9fa      	bls.n	800ceea <_free_r+0x4a>
 800cef4:	6819      	ldr	r1, [r3, #0]
 800cef6:	1858      	adds	r0, r3, r1
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d10b      	bne.n	800cf14 <_free_r+0x74>
 800cefc:	6820      	ldr	r0, [r4, #0]
 800cefe:	4401      	add	r1, r0
 800cf00:	1858      	adds	r0, r3, r1
 800cf02:	4282      	cmp	r2, r0
 800cf04:	6019      	str	r1, [r3, #0]
 800cf06:	d1dd      	bne.n	800cec4 <_free_r+0x24>
 800cf08:	6810      	ldr	r0, [r2, #0]
 800cf0a:	6852      	ldr	r2, [r2, #4]
 800cf0c:	605a      	str	r2, [r3, #4]
 800cf0e:	4401      	add	r1, r0
 800cf10:	6019      	str	r1, [r3, #0]
 800cf12:	e7d7      	b.n	800cec4 <_free_r+0x24>
 800cf14:	d902      	bls.n	800cf1c <_free_r+0x7c>
 800cf16:	230c      	movs	r3, #12
 800cf18:	602b      	str	r3, [r5, #0]
 800cf1a:	e7d3      	b.n	800cec4 <_free_r+0x24>
 800cf1c:	6820      	ldr	r0, [r4, #0]
 800cf1e:	1821      	adds	r1, r4, r0
 800cf20:	428a      	cmp	r2, r1
 800cf22:	bf04      	itt	eq
 800cf24:	6811      	ldreq	r1, [r2, #0]
 800cf26:	6852      	ldreq	r2, [r2, #4]
 800cf28:	6062      	str	r2, [r4, #4]
 800cf2a:	bf04      	itt	eq
 800cf2c:	1809      	addeq	r1, r1, r0
 800cf2e:	6021      	streq	r1, [r4, #0]
 800cf30:	605c      	str	r4, [r3, #4]
 800cf32:	e7c7      	b.n	800cec4 <_free_r+0x24>
 800cf34:	bd38      	pop	{r3, r4, r5, pc}
 800cf36:	bf00      	nop
 800cf38:	20004b20 	.word	0x20004b20

0800cf3c <_malloc_r>:
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	1ccd      	adds	r5, r1, #3
 800cf40:	f025 0503 	bic.w	r5, r5, #3
 800cf44:	3508      	adds	r5, #8
 800cf46:	2d0c      	cmp	r5, #12
 800cf48:	bf38      	it	cc
 800cf4a:	250c      	movcc	r5, #12
 800cf4c:	2d00      	cmp	r5, #0
 800cf4e:	4606      	mov	r6, r0
 800cf50:	db01      	blt.n	800cf56 <_malloc_r+0x1a>
 800cf52:	42a9      	cmp	r1, r5
 800cf54:	d903      	bls.n	800cf5e <_malloc_r+0x22>
 800cf56:	230c      	movs	r3, #12
 800cf58:	6033      	str	r3, [r6, #0]
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	bd70      	pop	{r4, r5, r6, pc}
 800cf5e:	f000 f857 	bl	800d010 <__malloc_lock>
 800cf62:	4a21      	ldr	r2, [pc, #132]	; (800cfe8 <_malloc_r+0xac>)
 800cf64:	6814      	ldr	r4, [r2, #0]
 800cf66:	4621      	mov	r1, r4
 800cf68:	b991      	cbnz	r1, 800cf90 <_malloc_r+0x54>
 800cf6a:	4c20      	ldr	r4, [pc, #128]	; (800cfec <_malloc_r+0xb0>)
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	b91b      	cbnz	r3, 800cf78 <_malloc_r+0x3c>
 800cf70:	4630      	mov	r0, r6
 800cf72:	f000 f83d 	bl	800cff0 <_sbrk_r>
 800cf76:	6020      	str	r0, [r4, #0]
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f000 f838 	bl	800cff0 <_sbrk_r>
 800cf80:	1c43      	adds	r3, r0, #1
 800cf82:	d124      	bne.n	800cfce <_malloc_r+0x92>
 800cf84:	230c      	movs	r3, #12
 800cf86:	6033      	str	r3, [r6, #0]
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f000 f842 	bl	800d012 <__malloc_unlock>
 800cf8e:	e7e4      	b.n	800cf5a <_malloc_r+0x1e>
 800cf90:	680b      	ldr	r3, [r1, #0]
 800cf92:	1b5b      	subs	r3, r3, r5
 800cf94:	d418      	bmi.n	800cfc8 <_malloc_r+0x8c>
 800cf96:	2b0b      	cmp	r3, #11
 800cf98:	d90f      	bls.n	800cfba <_malloc_r+0x7e>
 800cf9a:	600b      	str	r3, [r1, #0]
 800cf9c:	50cd      	str	r5, [r1, r3]
 800cf9e:	18cc      	adds	r4, r1, r3
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f000 f836 	bl	800d012 <__malloc_unlock>
 800cfa6:	f104 000b 	add.w	r0, r4, #11
 800cfaa:	1d23      	adds	r3, r4, #4
 800cfac:	f020 0007 	bic.w	r0, r0, #7
 800cfb0:	1ac3      	subs	r3, r0, r3
 800cfb2:	d0d3      	beq.n	800cf5c <_malloc_r+0x20>
 800cfb4:	425a      	negs	r2, r3
 800cfb6:	50e2      	str	r2, [r4, r3]
 800cfb8:	e7d0      	b.n	800cf5c <_malloc_r+0x20>
 800cfba:	428c      	cmp	r4, r1
 800cfbc:	684b      	ldr	r3, [r1, #4]
 800cfbe:	bf16      	itet	ne
 800cfc0:	6063      	strne	r3, [r4, #4]
 800cfc2:	6013      	streq	r3, [r2, #0]
 800cfc4:	460c      	movne	r4, r1
 800cfc6:	e7eb      	b.n	800cfa0 <_malloc_r+0x64>
 800cfc8:	460c      	mov	r4, r1
 800cfca:	6849      	ldr	r1, [r1, #4]
 800cfcc:	e7cc      	b.n	800cf68 <_malloc_r+0x2c>
 800cfce:	1cc4      	adds	r4, r0, #3
 800cfd0:	f024 0403 	bic.w	r4, r4, #3
 800cfd4:	42a0      	cmp	r0, r4
 800cfd6:	d005      	beq.n	800cfe4 <_malloc_r+0xa8>
 800cfd8:	1a21      	subs	r1, r4, r0
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f000 f808 	bl	800cff0 <_sbrk_r>
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	d0cf      	beq.n	800cf84 <_malloc_r+0x48>
 800cfe4:	6025      	str	r5, [r4, #0]
 800cfe6:	e7db      	b.n	800cfa0 <_malloc_r+0x64>
 800cfe8:	20004b20 	.word	0x20004b20
 800cfec:	20004b24 	.word	0x20004b24

0800cff0 <_sbrk_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4c06      	ldr	r4, [pc, #24]	; (800d00c <_sbrk_r+0x1c>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4605      	mov	r5, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	6023      	str	r3, [r4, #0]
 800cffc:	f7f4 fa2c 	bl	8001458 <_sbrk>
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d102      	bne.n	800d00a <_sbrk_r+0x1a>
 800d004:	6823      	ldr	r3, [r4, #0]
 800d006:	b103      	cbz	r3, 800d00a <_sbrk_r+0x1a>
 800d008:	602b      	str	r3, [r5, #0]
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20007e50 	.word	0x20007e50

0800d010 <__malloc_lock>:
 800d010:	4770      	bx	lr

0800d012 <__malloc_unlock>:
 800d012:	4770      	bx	lr

0800d014 <fmax>:
 800d014:	b508      	push	{r3, lr}
 800d016:	ed2d 8b04 	vpush	{d8-d9}
 800d01a:	eeb0 8a40 	vmov.f32	s16, s0
 800d01e:	eef0 8a60 	vmov.f32	s17, s1
 800d022:	eeb0 9a41 	vmov.f32	s18, s2
 800d026:	eef0 9a61 	vmov.f32	s19, s3
 800d02a:	f000 f841 	bl	800d0b0 <__fpclassifyd>
 800d02e:	b168      	cbz	r0, 800d04c <fmax+0x38>
 800d030:	eeb0 0a49 	vmov.f32	s0, s18
 800d034:	eef0 0a69 	vmov.f32	s1, s19
 800d038:	f000 f83a 	bl	800d0b0 <__fpclassifyd>
 800d03c:	b150      	cbz	r0, 800d054 <fmax+0x40>
 800d03e:	ec53 2b19 	vmov	r2, r3, d9
 800d042:	ec51 0b18 	vmov	r0, r1, d8
 800d046:	f7f3 fd2f 	bl	8000aa8 <__aeabi_dcmpgt>
 800d04a:	b918      	cbnz	r0, 800d054 <fmax+0x40>
 800d04c:	eeb0 8a49 	vmov.f32	s16, s18
 800d050:	eef0 8a69 	vmov.f32	s17, s19
 800d054:	eeb0 0a48 	vmov.f32	s0, s16
 800d058:	eef0 0a68 	vmov.f32	s1, s17
 800d05c:	ecbd 8b04 	vpop	{d8-d9}
 800d060:	bd08      	pop	{r3, pc}

0800d062 <fmin>:
 800d062:	b508      	push	{r3, lr}
 800d064:	ed2d 8b04 	vpush	{d8-d9}
 800d068:	eeb0 8a40 	vmov.f32	s16, s0
 800d06c:	eef0 8a60 	vmov.f32	s17, s1
 800d070:	eeb0 9a41 	vmov.f32	s18, s2
 800d074:	eef0 9a61 	vmov.f32	s19, s3
 800d078:	f000 f81a 	bl	800d0b0 <__fpclassifyd>
 800d07c:	b168      	cbz	r0, 800d09a <fmin+0x38>
 800d07e:	eeb0 0a49 	vmov.f32	s0, s18
 800d082:	eef0 0a69 	vmov.f32	s1, s19
 800d086:	f000 f813 	bl	800d0b0 <__fpclassifyd>
 800d08a:	b150      	cbz	r0, 800d0a2 <fmin+0x40>
 800d08c:	ec53 2b19 	vmov	r2, r3, d9
 800d090:	ec51 0b18 	vmov	r0, r1, d8
 800d094:	f7f3 fcea 	bl	8000a6c <__aeabi_dcmplt>
 800d098:	b918      	cbnz	r0, 800d0a2 <fmin+0x40>
 800d09a:	eeb0 8a49 	vmov.f32	s16, s18
 800d09e:	eef0 8a69 	vmov.f32	s17, s19
 800d0a2:	eeb0 0a48 	vmov.f32	s0, s16
 800d0a6:	eef0 0a68 	vmov.f32	s1, s17
 800d0aa:	ecbd 8b04 	vpop	{d8-d9}
 800d0ae:	bd08      	pop	{r3, pc}

0800d0b0 <__fpclassifyd>:
 800d0b0:	ec51 0b10 	vmov	r0, r1, d0
 800d0b4:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 800d0b8:	b510      	push	{r4, lr}
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	d01b      	beq.n	800d0f6 <__fpclassifyd+0x46>
 800d0be:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800d0c2:	490f      	ldr	r1, [pc, #60]	; (800d100 <__fpclassifyd+0x50>)
 800d0c4:	428c      	cmp	r4, r1
 800d0c6:	d910      	bls.n	800d0ea <__fpclassifyd+0x3a>
 800d0c8:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800d0cc:	490c      	ldr	r1, [pc, #48]	; (800d100 <__fpclassifyd+0x50>)
 800d0ce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d0d2:	428b      	cmp	r3, r1
 800d0d4:	d909      	bls.n	800d0ea <__fpclassifyd+0x3a>
 800d0d6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d0da:	d308      	bcc.n	800d0ee <__fpclassifyd+0x3e>
 800d0dc:	4b09      	ldr	r3, [pc, #36]	; (800d104 <__fpclassifyd+0x54>)
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d107      	bne.n	800d0f2 <__fpclassifyd+0x42>
 800d0e2:	fab0 f080 	clz	r0, r0
 800d0e6:	0940      	lsrs	r0, r0, #5
 800d0e8:	bd10      	pop	{r4, pc}
 800d0ea:	2004      	movs	r0, #4
 800d0ec:	e7fc      	b.n	800d0e8 <__fpclassifyd+0x38>
 800d0ee:	2003      	movs	r0, #3
 800d0f0:	e7fa      	b.n	800d0e8 <__fpclassifyd+0x38>
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	e7f8      	b.n	800d0e8 <__fpclassifyd+0x38>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d1e6      	bne.n	800d0c8 <__fpclassifyd+0x18>
 800d0fa:	2002      	movs	r0, #2
 800d0fc:	e7f4      	b.n	800d0e8 <__fpclassifyd+0x38>
 800d0fe:	bf00      	nop
 800d100:	7fdfffff 	.word	0x7fdfffff
 800d104:	7ff00000 	.word	0x7ff00000

0800d108 <pow>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	ed2d 8b04 	vpush	{d8-d9}
 800d110:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d3e4 <pow+0x2dc>
 800d114:	b08d      	sub	sp, #52	; 0x34
 800d116:	ec57 6b10 	vmov	r6, r7, d0
 800d11a:	ec55 4b11 	vmov	r4, r5, d1
 800d11e:	f000 f963 	bl	800d3e8 <__ieee754_pow>
 800d122:	f999 3000 	ldrsb.w	r3, [r9]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	3301      	adds	r3, #1
 800d12a:	eeb0 8a40 	vmov.f32	s16, s0
 800d12e:	eef0 8a60 	vmov.f32	s17, s1
 800d132:	46c8      	mov	r8, r9
 800d134:	d05f      	beq.n	800d1f6 <pow+0xee>
 800d136:	4622      	mov	r2, r4
 800d138:	462b      	mov	r3, r5
 800d13a:	4620      	mov	r0, r4
 800d13c:	4629      	mov	r1, r5
 800d13e:	f7f3 fcbd 	bl	8000abc <__aeabi_dcmpun>
 800d142:	4683      	mov	fp, r0
 800d144:	2800      	cmp	r0, #0
 800d146:	d156      	bne.n	800d1f6 <pow+0xee>
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	4630      	mov	r0, r6
 800d14e:	4639      	mov	r1, r7
 800d150:	f7f3 fcb4 	bl	8000abc <__aeabi_dcmpun>
 800d154:	9001      	str	r0, [sp, #4]
 800d156:	b1e8      	cbz	r0, 800d194 <pow+0x8c>
 800d158:	2200      	movs	r2, #0
 800d15a:	2300      	movs	r3, #0
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fc7a 	bl	8000a58 <__aeabi_dcmpeq>
 800d164:	2800      	cmp	r0, #0
 800d166:	d046      	beq.n	800d1f6 <pow+0xee>
 800d168:	2301      	movs	r3, #1
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	4b96      	ldr	r3, [pc, #600]	; (800d3c8 <pow+0x2c0>)
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	4b96      	ldr	r3, [pc, #600]	; (800d3cc <pow+0x2c4>)
 800d172:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d176:	2200      	movs	r2, #0
 800d178:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d17c:	9b00      	ldr	r3, [sp, #0]
 800d17e:	2b02      	cmp	r3, #2
 800d180:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d184:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d188:	d033      	beq.n	800d1f2 <pow+0xea>
 800d18a:	a802      	add	r0, sp, #8
 800d18c:	f000 fefb 	bl	800df86 <matherr>
 800d190:	bb48      	cbnz	r0, 800d1e6 <pow+0xde>
 800d192:	e05d      	b.n	800d250 <pow+0x148>
 800d194:	f04f 0a00 	mov.w	sl, #0
 800d198:	f04f 0b00 	mov.w	fp, #0
 800d19c:	4652      	mov	r2, sl
 800d19e:	465b      	mov	r3, fp
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	f7f3 fc58 	bl	8000a58 <__aeabi_dcmpeq>
 800d1a8:	ec4b ab19 	vmov	d9, sl, fp
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d054      	beq.n	800d25a <pow+0x152>
 800d1b0:	4652      	mov	r2, sl
 800d1b2:	465b      	mov	r3, fp
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	f7f3 fc4e 	bl	8000a58 <__aeabi_dcmpeq>
 800d1bc:	4680      	mov	r8, r0
 800d1be:	b318      	cbz	r0, 800d208 <pow+0x100>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	9302      	str	r3, [sp, #8]
 800d1c4:	4b80      	ldr	r3, [pc, #512]	; (800d3c8 <pow+0x2c0>)
 800d1c6:	9303      	str	r3, [sp, #12]
 800d1c8:	9b01      	ldr	r3, [sp, #4]
 800d1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d1d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d1d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0d5      	beq.n	800d18a <pow+0x82>
 800d1de:	4b7b      	ldr	r3, [pc, #492]	; (800d3cc <pow+0x2c4>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e8:	b11b      	cbz	r3, 800d1f2 <pow+0xea>
 800d1ea:	f7ff fe0b 	bl	800ce04 <__errno>
 800d1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f0:	6003      	str	r3, [r0, #0]
 800d1f2:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d1f6:	eeb0 0a48 	vmov.f32	s0, s16
 800d1fa:	eef0 0a68 	vmov.f32	s1, s17
 800d1fe:	b00d      	add	sp, #52	; 0x34
 800d200:	ecbd 8b04 	vpop	{d8-d9}
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	ec45 4b10 	vmov	d0, r4, r5
 800d20c:	f000 feb3 	bl	800df76 <finite>
 800d210:	2800      	cmp	r0, #0
 800d212:	d0f0      	beq.n	800d1f6 <pow+0xee>
 800d214:	4652      	mov	r2, sl
 800d216:	465b      	mov	r3, fp
 800d218:	4620      	mov	r0, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	f7f3 fc26 	bl	8000a6c <__aeabi_dcmplt>
 800d220:	2800      	cmp	r0, #0
 800d222:	d0e8      	beq.n	800d1f6 <pow+0xee>
 800d224:	2301      	movs	r3, #1
 800d226:	9302      	str	r3, [sp, #8]
 800d228:	4b67      	ldr	r3, [pc, #412]	; (800d3c8 <pow+0x2c0>)
 800d22a:	9303      	str	r3, [sp, #12]
 800d22c:	f999 3000 	ldrsb.w	r3, [r9]
 800d230:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d234:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d238:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d23c:	b913      	cbnz	r3, 800d244 <pow+0x13c>
 800d23e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d242:	e7a2      	b.n	800d18a <pow+0x82>
 800d244:	4962      	ldr	r1, [pc, #392]	; (800d3d0 <pow+0x2c8>)
 800d246:	2000      	movs	r0, #0
 800d248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d19c      	bne.n	800d18a <pow+0x82>
 800d250:	f7ff fdd8 	bl	800ce04 <__errno>
 800d254:	2321      	movs	r3, #33	; 0x21
 800d256:	6003      	str	r3, [r0, #0]
 800d258:	e7c5      	b.n	800d1e6 <pow+0xde>
 800d25a:	eeb0 0a48 	vmov.f32	s0, s16
 800d25e:	eef0 0a68 	vmov.f32	s1, s17
 800d262:	f000 fe88 	bl	800df76 <finite>
 800d266:	9000      	str	r0, [sp, #0]
 800d268:	2800      	cmp	r0, #0
 800d26a:	f040 8081 	bne.w	800d370 <pow+0x268>
 800d26e:	ec47 6b10 	vmov	d0, r6, r7
 800d272:	f000 fe80 	bl	800df76 <finite>
 800d276:	2800      	cmp	r0, #0
 800d278:	d07a      	beq.n	800d370 <pow+0x268>
 800d27a:	ec45 4b10 	vmov	d0, r4, r5
 800d27e:	f000 fe7a 	bl	800df76 <finite>
 800d282:	2800      	cmp	r0, #0
 800d284:	d074      	beq.n	800d370 <pow+0x268>
 800d286:	ec53 2b18 	vmov	r2, r3, d8
 800d28a:	ee18 0a10 	vmov	r0, s16
 800d28e:	4619      	mov	r1, r3
 800d290:	f7f3 fc14 	bl	8000abc <__aeabi_dcmpun>
 800d294:	f999 9000 	ldrsb.w	r9, [r9]
 800d298:	4b4b      	ldr	r3, [pc, #300]	; (800d3c8 <pow+0x2c0>)
 800d29a:	b1b0      	cbz	r0, 800d2ca <pow+0x1c2>
 800d29c:	2201      	movs	r2, #1
 800d29e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2a2:	9b00      	ldr	r3, [sp, #0]
 800d2a4:	930a      	str	r3, [sp, #40]	; 0x28
 800d2a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d2aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d2ae:	f1b9 0f00 	cmp.w	r9, #0
 800d2b2:	d0c4      	beq.n	800d23e <pow+0x136>
 800d2b4:	4652      	mov	r2, sl
 800d2b6:	465b      	mov	r3, fp
 800d2b8:	4650      	mov	r0, sl
 800d2ba:	4659      	mov	r1, fp
 800d2bc:	f7f3 fa8e 	bl	80007dc <__aeabi_ddiv>
 800d2c0:	f1b9 0f02 	cmp.w	r9, #2
 800d2c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2c8:	e7c1      	b.n	800d24e <pow+0x146>
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2d0:	900a      	str	r0, [sp, #40]	; 0x28
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4b3e      	ldr	r3, [pc, #248]	; (800d3d4 <pow+0x2cc>)
 800d2da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d2de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d2e2:	f7f3 f951 	bl	8000588 <__aeabi_dmul>
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	f1b9 0f00 	cmp.w	r9, #0
 800d2ee:	d124      	bne.n	800d33a <pow+0x232>
 800d2f0:	4b39      	ldr	r3, [pc, #228]	; (800d3d8 <pow+0x2d0>)
 800d2f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d2f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	4652      	mov	r2, sl
 800d2fe:	465b      	mov	r3, fp
 800d300:	4639      	mov	r1, r7
 800d302:	f7f3 fbb3 	bl	8000a6c <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	d056      	beq.n	800d3b8 <pow+0x2b0>
 800d30a:	ec45 4b10 	vmov	d0, r4, r5
 800d30e:	f000 fe47 	bl	800dfa0 <rint>
 800d312:	4622      	mov	r2, r4
 800d314:	462b      	mov	r3, r5
 800d316:	ec51 0b10 	vmov	r0, r1, d0
 800d31a:	f7f3 fb9d 	bl	8000a58 <__aeabi_dcmpeq>
 800d31e:	b920      	cbnz	r0, 800d32a <pow+0x222>
 800d320:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <pow+0x2d4>)
 800d322:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d326:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d32a:	f998 3000 	ldrsb.w	r3, [r8]
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d142      	bne.n	800d3b8 <pow+0x2b0>
 800d332:	f7ff fd67 	bl	800ce04 <__errno>
 800d336:	2322      	movs	r3, #34	; 0x22
 800d338:	e78d      	b.n	800d256 <pow+0x14e>
 800d33a:	4b29      	ldr	r3, [pc, #164]	; (800d3e0 <pow+0x2d8>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d342:	4630      	mov	r0, r6
 800d344:	4652      	mov	r2, sl
 800d346:	465b      	mov	r3, fp
 800d348:	4639      	mov	r1, r7
 800d34a:	f7f3 fb8f 	bl	8000a6c <__aeabi_dcmplt>
 800d34e:	2800      	cmp	r0, #0
 800d350:	d0eb      	beq.n	800d32a <pow+0x222>
 800d352:	ec45 4b10 	vmov	d0, r4, r5
 800d356:	f000 fe23 	bl	800dfa0 <rint>
 800d35a:	4622      	mov	r2, r4
 800d35c:	462b      	mov	r3, r5
 800d35e:	ec51 0b10 	vmov	r0, r1, d0
 800d362:	f7f3 fb79 	bl	8000a58 <__aeabi_dcmpeq>
 800d366:	2800      	cmp	r0, #0
 800d368:	d1df      	bne.n	800d32a <pow+0x222>
 800d36a:	2200      	movs	r2, #0
 800d36c:	4b18      	ldr	r3, [pc, #96]	; (800d3d0 <pow+0x2c8>)
 800d36e:	e7da      	b.n	800d326 <pow+0x21e>
 800d370:	2200      	movs	r2, #0
 800d372:	2300      	movs	r3, #0
 800d374:	ec51 0b18 	vmov	r0, r1, d8
 800d378:	f7f3 fb6e 	bl	8000a58 <__aeabi_dcmpeq>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f43f af3a 	beq.w	800d1f6 <pow+0xee>
 800d382:	ec47 6b10 	vmov	d0, r6, r7
 800d386:	f000 fdf6 	bl	800df76 <finite>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f43f af33 	beq.w	800d1f6 <pow+0xee>
 800d390:	ec45 4b10 	vmov	d0, r4, r5
 800d394:	f000 fdef 	bl	800df76 <finite>
 800d398:	2800      	cmp	r0, #0
 800d39a:	f43f af2c 	beq.w	800d1f6 <pow+0xee>
 800d39e:	2304      	movs	r3, #4
 800d3a0:	9302      	str	r3, [sp, #8]
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <pow+0x2c0>)
 800d3a4:	9303      	str	r3, [sp, #12]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d3aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d3ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d3b2:	ed8d 9b08 	vstr	d9, [sp, #32]
 800d3b6:	e7b8      	b.n	800d32a <pow+0x222>
 800d3b8:	a802      	add	r0, sp, #8
 800d3ba:	f000 fde4 	bl	800df86 <matherr>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f47f af11 	bne.w	800d1e6 <pow+0xde>
 800d3c4:	e7b5      	b.n	800d332 <pow+0x22a>
 800d3c6:	bf00      	nop
 800d3c8:	0800e290 	.word	0x0800e290
 800d3cc:	3ff00000 	.word	0x3ff00000
 800d3d0:	fff00000 	.word	0xfff00000
 800d3d4:	3fe00000 	.word	0x3fe00000
 800d3d8:	47efffff 	.word	0x47efffff
 800d3dc:	c7efffff 	.word	0xc7efffff
 800d3e0:	7ff00000 	.word	0x7ff00000
 800d3e4:	200001f0 	.word	0x200001f0

0800d3e8 <__ieee754_pow>:
 800d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	b091      	sub	sp, #68	; 0x44
 800d3ee:	ed8d 1b00 	vstr	d1, [sp]
 800d3f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d3f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d3fa:	ea58 0302 	orrs.w	r3, r8, r2
 800d3fe:	ec57 6b10 	vmov	r6, r7, d0
 800d402:	f000 84be 	beq.w	800dd82 <__ieee754_pow+0x99a>
 800d406:	4b7a      	ldr	r3, [pc, #488]	; (800d5f0 <__ieee754_pow+0x208>)
 800d408:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d40c:	429c      	cmp	r4, r3
 800d40e:	463d      	mov	r5, r7
 800d410:	ee10 aa10 	vmov	sl, s0
 800d414:	dc09      	bgt.n	800d42a <__ieee754_pow+0x42>
 800d416:	d103      	bne.n	800d420 <__ieee754_pow+0x38>
 800d418:	b93e      	cbnz	r6, 800d42a <__ieee754_pow+0x42>
 800d41a:	45a0      	cmp	r8, r4
 800d41c:	dc0d      	bgt.n	800d43a <__ieee754_pow+0x52>
 800d41e:	e001      	b.n	800d424 <__ieee754_pow+0x3c>
 800d420:	4598      	cmp	r8, r3
 800d422:	dc02      	bgt.n	800d42a <__ieee754_pow+0x42>
 800d424:	4598      	cmp	r8, r3
 800d426:	d10e      	bne.n	800d446 <__ieee754_pow+0x5e>
 800d428:	b16a      	cbz	r2, 800d446 <__ieee754_pow+0x5e>
 800d42a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d42e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d432:	ea54 030a 	orrs.w	r3, r4, sl
 800d436:	f000 84a4 	beq.w	800dd82 <__ieee754_pow+0x99a>
 800d43a:	486e      	ldr	r0, [pc, #440]	; (800d5f4 <__ieee754_pow+0x20c>)
 800d43c:	b011      	add	sp, #68	; 0x44
 800d43e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d442:	f000 bda5 	b.w	800df90 <nan>
 800d446:	2d00      	cmp	r5, #0
 800d448:	da53      	bge.n	800d4f2 <__ieee754_pow+0x10a>
 800d44a:	4b6b      	ldr	r3, [pc, #428]	; (800d5f8 <__ieee754_pow+0x210>)
 800d44c:	4598      	cmp	r8, r3
 800d44e:	dc4d      	bgt.n	800d4ec <__ieee754_pow+0x104>
 800d450:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d454:	4598      	cmp	r8, r3
 800d456:	dd4c      	ble.n	800d4f2 <__ieee754_pow+0x10a>
 800d458:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d45c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d460:	2b14      	cmp	r3, #20
 800d462:	dd26      	ble.n	800d4b2 <__ieee754_pow+0xca>
 800d464:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d468:	fa22 f103 	lsr.w	r1, r2, r3
 800d46c:	fa01 f303 	lsl.w	r3, r1, r3
 800d470:	4293      	cmp	r3, r2
 800d472:	d13e      	bne.n	800d4f2 <__ieee754_pow+0x10a>
 800d474:	f001 0101 	and.w	r1, r1, #1
 800d478:	f1c1 0b02 	rsb	fp, r1, #2
 800d47c:	2a00      	cmp	r2, #0
 800d47e:	d15b      	bne.n	800d538 <__ieee754_pow+0x150>
 800d480:	4b5b      	ldr	r3, [pc, #364]	; (800d5f0 <__ieee754_pow+0x208>)
 800d482:	4598      	cmp	r8, r3
 800d484:	d124      	bne.n	800d4d0 <__ieee754_pow+0xe8>
 800d486:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d48a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d48e:	ea53 030a 	orrs.w	r3, r3, sl
 800d492:	f000 8476 	beq.w	800dd82 <__ieee754_pow+0x99a>
 800d496:	4b59      	ldr	r3, [pc, #356]	; (800d5fc <__ieee754_pow+0x214>)
 800d498:	429c      	cmp	r4, r3
 800d49a:	dd2d      	ble.n	800d4f8 <__ieee754_pow+0x110>
 800d49c:	f1b9 0f00 	cmp.w	r9, #0
 800d4a0:	f280 8473 	bge.w	800dd8a <__ieee754_pow+0x9a2>
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	ec41 0b10 	vmov	d0, r0, r1
 800d4ac:	b011      	add	sp, #68	; 0x44
 800d4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b2:	2a00      	cmp	r2, #0
 800d4b4:	d13e      	bne.n	800d534 <__ieee754_pow+0x14c>
 800d4b6:	f1c3 0314 	rsb	r3, r3, #20
 800d4ba:	fa48 f103 	asr.w	r1, r8, r3
 800d4be:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c2:	4543      	cmp	r3, r8
 800d4c4:	f040 8469 	bne.w	800dd9a <__ieee754_pow+0x9b2>
 800d4c8:	f001 0101 	and.w	r1, r1, #1
 800d4cc:	f1c1 0b02 	rsb	fp, r1, #2
 800d4d0:	4b4b      	ldr	r3, [pc, #300]	; (800d600 <__ieee754_pow+0x218>)
 800d4d2:	4598      	cmp	r8, r3
 800d4d4:	d118      	bne.n	800d508 <__ieee754_pow+0x120>
 800d4d6:	f1b9 0f00 	cmp.w	r9, #0
 800d4da:	f280 845a 	bge.w	800dd92 <__ieee754_pow+0x9aa>
 800d4de:	4948      	ldr	r1, [pc, #288]	; (800d600 <__ieee754_pow+0x218>)
 800d4e0:	4632      	mov	r2, r6
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	f7f3 f979 	bl	80007dc <__aeabi_ddiv>
 800d4ea:	e7dd      	b.n	800d4a8 <__ieee754_pow+0xc0>
 800d4ec:	f04f 0b02 	mov.w	fp, #2
 800d4f0:	e7c4      	b.n	800d47c <__ieee754_pow+0x94>
 800d4f2:	f04f 0b00 	mov.w	fp, #0
 800d4f6:	e7c1      	b.n	800d47c <__ieee754_pow+0x94>
 800d4f8:	f1b9 0f00 	cmp.w	r9, #0
 800d4fc:	dad2      	bge.n	800d4a4 <__ieee754_pow+0xbc>
 800d4fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d502:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d506:	e7cf      	b.n	800d4a8 <__ieee754_pow+0xc0>
 800d508:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d50c:	d106      	bne.n	800d51c <__ieee754_pow+0x134>
 800d50e:	4632      	mov	r2, r6
 800d510:	463b      	mov	r3, r7
 800d512:	4610      	mov	r0, r2
 800d514:	4619      	mov	r1, r3
 800d516:	f7f3 f837 	bl	8000588 <__aeabi_dmul>
 800d51a:	e7c5      	b.n	800d4a8 <__ieee754_pow+0xc0>
 800d51c:	4b39      	ldr	r3, [pc, #228]	; (800d604 <__ieee754_pow+0x21c>)
 800d51e:	4599      	cmp	r9, r3
 800d520:	d10a      	bne.n	800d538 <__ieee754_pow+0x150>
 800d522:	2d00      	cmp	r5, #0
 800d524:	db08      	blt.n	800d538 <__ieee754_pow+0x150>
 800d526:	ec47 6b10 	vmov	d0, r6, r7
 800d52a:	b011      	add	sp, #68	; 0x44
 800d52c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	f000 bc68 	b.w	800de04 <__ieee754_sqrt>
 800d534:	f04f 0b00 	mov.w	fp, #0
 800d538:	ec47 6b10 	vmov	d0, r6, r7
 800d53c:	f000 fd12 	bl	800df64 <fabs>
 800d540:	ec51 0b10 	vmov	r0, r1, d0
 800d544:	f1ba 0f00 	cmp.w	sl, #0
 800d548:	d127      	bne.n	800d59a <__ieee754_pow+0x1b2>
 800d54a:	b124      	cbz	r4, 800d556 <__ieee754_pow+0x16e>
 800d54c:	4b2c      	ldr	r3, [pc, #176]	; (800d600 <__ieee754_pow+0x218>)
 800d54e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d552:	429a      	cmp	r2, r3
 800d554:	d121      	bne.n	800d59a <__ieee754_pow+0x1b2>
 800d556:	f1b9 0f00 	cmp.w	r9, #0
 800d55a:	da05      	bge.n	800d568 <__ieee754_pow+0x180>
 800d55c:	4602      	mov	r2, r0
 800d55e:	460b      	mov	r3, r1
 800d560:	2000      	movs	r0, #0
 800d562:	4927      	ldr	r1, [pc, #156]	; (800d600 <__ieee754_pow+0x218>)
 800d564:	f7f3 f93a 	bl	80007dc <__aeabi_ddiv>
 800d568:	2d00      	cmp	r5, #0
 800d56a:	da9d      	bge.n	800d4a8 <__ieee754_pow+0xc0>
 800d56c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d570:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d574:	ea54 030b 	orrs.w	r3, r4, fp
 800d578:	d108      	bne.n	800d58c <__ieee754_pow+0x1a4>
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4610      	mov	r0, r2
 800d580:	4619      	mov	r1, r3
 800d582:	f7f2 fe49 	bl	8000218 <__aeabi_dsub>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	e7ac      	b.n	800d4e6 <__ieee754_pow+0xfe>
 800d58c:	f1bb 0f01 	cmp.w	fp, #1
 800d590:	d18a      	bne.n	800d4a8 <__ieee754_pow+0xc0>
 800d592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d596:	4619      	mov	r1, r3
 800d598:	e786      	b.n	800d4a8 <__ieee754_pow+0xc0>
 800d59a:	0fed      	lsrs	r5, r5, #31
 800d59c:	1e6b      	subs	r3, r5, #1
 800d59e:	930d      	str	r3, [sp, #52]	; 0x34
 800d5a0:	ea5b 0303 	orrs.w	r3, fp, r3
 800d5a4:	d102      	bne.n	800d5ac <__ieee754_pow+0x1c4>
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	e7e8      	b.n	800d57e <__ieee754_pow+0x196>
 800d5ac:	4b16      	ldr	r3, [pc, #88]	; (800d608 <__ieee754_pow+0x220>)
 800d5ae:	4598      	cmp	r8, r3
 800d5b0:	f340 80fe 	ble.w	800d7b0 <__ieee754_pow+0x3c8>
 800d5b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d5b8:	4598      	cmp	r8, r3
 800d5ba:	dd0a      	ble.n	800d5d2 <__ieee754_pow+0x1ea>
 800d5bc:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <__ieee754_pow+0x214>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	dc0d      	bgt.n	800d5de <__ieee754_pow+0x1f6>
 800d5c2:	f1b9 0f00 	cmp.w	r9, #0
 800d5c6:	f6bf af6d 	bge.w	800d4a4 <__ieee754_pow+0xbc>
 800d5ca:	a307      	add	r3, pc, #28	; (adr r3, 800d5e8 <__ieee754_pow+0x200>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	e79f      	b.n	800d512 <__ieee754_pow+0x12a>
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	; (800d60c <__ieee754_pow+0x224>)
 800d5d4:	429c      	cmp	r4, r3
 800d5d6:	ddf4      	ble.n	800d5c2 <__ieee754_pow+0x1da>
 800d5d8:	4b09      	ldr	r3, [pc, #36]	; (800d600 <__ieee754_pow+0x218>)
 800d5da:	429c      	cmp	r4, r3
 800d5dc:	dd18      	ble.n	800d610 <__ieee754_pow+0x228>
 800d5de:	f1b9 0f00 	cmp.w	r9, #0
 800d5e2:	dcf2      	bgt.n	800d5ca <__ieee754_pow+0x1e2>
 800d5e4:	e75e      	b.n	800d4a4 <__ieee754_pow+0xbc>
 800d5e6:	bf00      	nop
 800d5e8:	8800759c 	.word	0x8800759c
 800d5ec:	7e37e43c 	.word	0x7e37e43c
 800d5f0:	7ff00000 	.word	0x7ff00000
 800d5f4:	0800e293 	.word	0x0800e293
 800d5f8:	433fffff 	.word	0x433fffff
 800d5fc:	3fefffff 	.word	0x3fefffff
 800d600:	3ff00000 	.word	0x3ff00000
 800d604:	3fe00000 	.word	0x3fe00000
 800d608:	41e00000 	.word	0x41e00000
 800d60c:	3feffffe 	.word	0x3feffffe
 800d610:	2200      	movs	r2, #0
 800d612:	4b63      	ldr	r3, [pc, #396]	; (800d7a0 <__ieee754_pow+0x3b8>)
 800d614:	f7f2 fe00 	bl	8000218 <__aeabi_dsub>
 800d618:	a355      	add	r3, pc, #340	; (adr r3, 800d770 <__ieee754_pow+0x388>)
 800d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61e:	4604      	mov	r4, r0
 800d620:	460d      	mov	r5, r1
 800d622:	f7f2 ffb1 	bl	8000588 <__aeabi_dmul>
 800d626:	a354      	add	r3, pc, #336	; (adr r3, 800d778 <__ieee754_pow+0x390>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	4606      	mov	r6, r0
 800d62e:	460f      	mov	r7, r1
 800d630:	4620      	mov	r0, r4
 800d632:	4629      	mov	r1, r5
 800d634:	f7f2 ffa8 	bl	8000588 <__aeabi_dmul>
 800d638:	2200      	movs	r2, #0
 800d63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d63e:	4b59      	ldr	r3, [pc, #356]	; (800d7a4 <__ieee754_pow+0x3bc>)
 800d640:	4620      	mov	r0, r4
 800d642:	4629      	mov	r1, r5
 800d644:	f7f2 ffa0 	bl	8000588 <__aeabi_dmul>
 800d648:	4602      	mov	r2, r0
 800d64a:	460b      	mov	r3, r1
 800d64c:	a14c      	add	r1, pc, #304	; (adr r1, 800d780 <__ieee754_pow+0x398>)
 800d64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d652:	f7f2 fde1 	bl	8000218 <__aeabi_dsub>
 800d656:	4622      	mov	r2, r4
 800d658:	462b      	mov	r3, r5
 800d65a:	f7f2 ff95 	bl	8000588 <__aeabi_dmul>
 800d65e:	4602      	mov	r2, r0
 800d660:	460b      	mov	r3, r1
 800d662:	2000      	movs	r0, #0
 800d664:	4950      	ldr	r1, [pc, #320]	; (800d7a8 <__ieee754_pow+0x3c0>)
 800d666:	f7f2 fdd7 	bl	8000218 <__aeabi_dsub>
 800d66a:	4622      	mov	r2, r4
 800d66c:	462b      	mov	r3, r5
 800d66e:	4680      	mov	r8, r0
 800d670:	4689      	mov	r9, r1
 800d672:	4620      	mov	r0, r4
 800d674:	4629      	mov	r1, r5
 800d676:	f7f2 ff87 	bl	8000588 <__aeabi_dmul>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	4640      	mov	r0, r8
 800d680:	4649      	mov	r1, r9
 800d682:	f7f2 ff81 	bl	8000588 <__aeabi_dmul>
 800d686:	a340      	add	r3, pc, #256	; (adr r3, 800d788 <__ieee754_pow+0x3a0>)
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	f7f2 ff7c 	bl	8000588 <__aeabi_dmul>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d698:	f7f2 fdbe 	bl	8000218 <__aeabi_dsub>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	4639      	mov	r1, r7
 800d6a8:	f7f2 fdb8 	bl	800021c <__adddf3>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6b2:	4632      	mov	r2, r6
 800d6b4:	463b      	mov	r3, r7
 800d6b6:	f7f2 fdaf 	bl	8000218 <__aeabi_dsub>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	4620      	mov	r0, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7f2 fda9 	bl	8000218 <__aeabi_dsub>
 800d6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6c8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460f      	mov	r7, r1
 800d6d2:	f040 81eb 	bne.w	800daac <__ieee754_pow+0x6c4>
 800d6d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d790 <__ieee754_pow+0x3a8>
 800d6da:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d6de:	2400      	movs	r4, #0
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6ec:	f7f2 fd94 	bl	8000218 <__aeabi_dsub>
 800d6f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6f4:	f7f2 ff48 	bl	8000588 <__aeabi_dmul>
 800d6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6fc:	4680      	mov	r8, r0
 800d6fe:	4689      	mov	r9, r1
 800d700:	4630      	mov	r0, r6
 800d702:	4639      	mov	r1, r7
 800d704:	f7f2 ff40 	bl	8000588 <__aeabi_dmul>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4640      	mov	r0, r8
 800d70e:	4649      	mov	r1, r9
 800d710:	f7f2 fd84 	bl	800021c <__adddf3>
 800d714:	4622      	mov	r2, r4
 800d716:	462b      	mov	r3, r5
 800d718:	4680      	mov	r8, r0
 800d71a:	4689      	mov	r9, r1
 800d71c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d720:	f7f2 ff32 	bl	8000588 <__aeabi_dmul>
 800d724:	460b      	mov	r3, r1
 800d726:	4604      	mov	r4, r0
 800d728:	460d      	mov	r5, r1
 800d72a:	4602      	mov	r2, r0
 800d72c:	4649      	mov	r1, r9
 800d72e:	4640      	mov	r0, r8
 800d730:	e9cd 4500 	strd	r4, r5, [sp]
 800d734:	f7f2 fd72 	bl	800021c <__adddf3>
 800d738:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <__ieee754_pow+0x3c4>)
 800d73a:	4299      	cmp	r1, r3
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	468b      	mov	fp, r1
 800d742:	f340 82f7 	ble.w	800dd34 <__ieee754_pow+0x94c>
 800d746:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d74a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d74e:	4303      	orrs	r3, r0
 800d750:	f000 81ea 	beq.w	800db28 <__ieee754_pow+0x740>
 800d754:	a310      	add	r3, pc, #64	; (adr r3, 800d798 <__ieee754_pow+0x3b0>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d75e:	f7f2 ff13 	bl	8000588 <__aeabi_dmul>
 800d762:	a30d      	add	r3, pc, #52	; (adr r3, 800d798 <__ieee754_pow+0x3b0>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	e6d5      	b.n	800d516 <__ieee754_pow+0x12e>
 800d76a:	bf00      	nop
 800d76c:	f3af 8000 	nop.w
 800d770:	60000000 	.word	0x60000000
 800d774:	3ff71547 	.word	0x3ff71547
 800d778:	f85ddf44 	.word	0xf85ddf44
 800d77c:	3e54ae0b 	.word	0x3e54ae0b
 800d780:	55555555 	.word	0x55555555
 800d784:	3fd55555 	.word	0x3fd55555
 800d788:	652b82fe 	.word	0x652b82fe
 800d78c:	3ff71547 	.word	0x3ff71547
 800d790:	00000000 	.word	0x00000000
 800d794:	bff00000 	.word	0xbff00000
 800d798:	8800759c 	.word	0x8800759c
 800d79c:	7e37e43c 	.word	0x7e37e43c
 800d7a0:	3ff00000 	.word	0x3ff00000
 800d7a4:	3fd00000 	.word	0x3fd00000
 800d7a8:	3fe00000 	.word	0x3fe00000
 800d7ac:	408fffff 	.word	0x408fffff
 800d7b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	da05      	bge.n	800d7c6 <__ieee754_pow+0x3de>
 800d7ba:	4bd3      	ldr	r3, [pc, #844]	; (800db08 <__ieee754_pow+0x720>)
 800d7bc:	f7f2 fee4 	bl	8000588 <__aeabi_dmul>
 800d7c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	1523      	asrs	r3, r4, #20
 800d7c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7cc:	4413      	add	r3, r2
 800d7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d0:	4bce      	ldr	r3, [pc, #824]	; (800db0c <__ieee754_pow+0x724>)
 800d7d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d7d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d7da:	429c      	cmp	r4, r3
 800d7dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7e0:	dd08      	ble.n	800d7f4 <__ieee754_pow+0x40c>
 800d7e2:	4bcb      	ldr	r3, [pc, #812]	; (800db10 <__ieee754_pow+0x728>)
 800d7e4:	429c      	cmp	r4, r3
 800d7e6:	f340 815e 	ble.w	800daa6 <__ieee754_pow+0x6be>
 800d7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d7f4:	f04f 0a00 	mov.w	sl, #0
 800d7f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d7fc:	930c      	str	r3, [sp, #48]	; 0x30
 800d7fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d800:	4bc4      	ldr	r3, [pc, #784]	; (800db14 <__ieee754_pow+0x72c>)
 800d802:	4413      	add	r3, r2
 800d804:	ed93 7b00 	vldr	d7, [r3]
 800d808:	4629      	mov	r1, r5
 800d80a:	ec53 2b17 	vmov	r2, r3, d7
 800d80e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d812:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d816:	f7f2 fcff 	bl	8000218 <__aeabi_dsub>
 800d81a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d81e:	4606      	mov	r6, r0
 800d820:	460f      	mov	r7, r1
 800d822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d826:	f7f2 fcf9 	bl	800021c <__adddf3>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	2000      	movs	r0, #0
 800d830:	49b9      	ldr	r1, [pc, #740]	; (800db18 <__ieee754_pow+0x730>)
 800d832:	f7f2 ffd3 	bl	80007dc <__aeabi_ddiv>
 800d836:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d83a:	4602      	mov	r2, r0
 800d83c:	460b      	mov	r3, r1
 800d83e:	4630      	mov	r0, r6
 800d840:	4639      	mov	r1, r7
 800d842:	f7f2 fea1 	bl	8000588 <__aeabi_dmul>
 800d846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d84a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d84e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d852:	2300      	movs	r3, #0
 800d854:	9302      	str	r3, [sp, #8]
 800d856:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d85a:	106d      	asrs	r5, r5, #1
 800d85c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d860:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d864:	2200      	movs	r2, #0
 800d866:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d86a:	4640      	mov	r0, r8
 800d86c:	4649      	mov	r1, r9
 800d86e:	4614      	mov	r4, r2
 800d870:	461d      	mov	r5, r3
 800d872:	f7f2 fe89 	bl	8000588 <__aeabi_dmul>
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	4630      	mov	r0, r6
 800d87c:	4639      	mov	r1, r7
 800d87e:	f7f2 fccb 	bl	8000218 <__aeabi_dsub>
 800d882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d886:	4606      	mov	r6, r0
 800d888:	460f      	mov	r7, r1
 800d88a:	4620      	mov	r0, r4
 800d88c:	4629      	mov	r1, r5
 800d88e:	f7f2 fcc3 	bl	8000218 <__aeabi_dsub>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d89a:	f7f2 fcbd 	bl	8000218 <__aeabi_dsub>
 800d89e:	4642      	mov	r2, r8
 800d8a0:	464b      	mov	r3, r9
 800d8a2:	f7f2 fe71 	bl	8000588 <__aeabi_dmul>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	f7f2 fcb3 	bl	8000218 <__aeabi_dsub>
 800d8b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d8b6:	f7f2 fe67 	bl	8000588 <__aeabi_dmul>
 800d8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	f7f2 fe5f 	bl	8000588 <__aeabi_dmul>
 800d8ca:	a37b      	add	r3, pc, #492	; (adr r3, 800dab8 <__ieee754_pow+0x6d0>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	460d      	mov	r5, r1
 800d8d4:	f7f2 fe58 	bl	8000588 <__aeabi_dmul>
 800d8d8:	a379      	add	r3, pc, #484	; (adr r3, 800dac0 <__ieee754_pow+0x6d8>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fc9d 	bl	800021c <__adddf3>
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	f7f2 fe4f 	bl	8000588 <__aeabi_dmul>
 800d8ea:	a377      	add	r3, pc, #476	; (adr r3, 800dac8 <__ieee754_pow+0x6e0>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fc94 	bl	800021c <__adddf3>
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	f7f2 fe46 	bl	8000588 <__aeabi_dmul>
 800d8fc:	a374      	add	r3, pc, #464	; (adr r3, 800dad0 <__ieee754_pow+0x6e8>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f7f2 fc8b 	bl	800021c <__adddf3>
 800d906:	4622      	mov	r2, r4
 800d908:	462b      	mov	r3, r5
 800d90a:	f7f2 fe3d 	bl	8000588 <__aeabi_dmul>
 800d90e:	a372      	add	r3, pc, #456	; (adr r3, 800dad8 <__ieee754_pow+0x6f0>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	f7f2 fc82 	bl	800021c <__adddf3>
 800d918:	4622      	mov	r2, r4
 800d91a:	462b      	mov	r3, r5
 800d91c:	f7f2 fe34 	bl	8000588 <__aeabi_dmul>
 800d920:	a36f      	add	r3, pc, #444	; (adr r3, 800dae0 <__ieee754_pow+0x6f8>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	f7f2 fc79 	bl	800021c <__adddf3>
 800d92a:	4622      	mov	r2, r4
 800d92c:	4606      	mov	r6, r0
 800d92e:	460f      	mov	r7, r1
 800d930:	462b      	mov	r3, r5
 800d932:	4620      	mov	r0, r4
 800d934:	4629      	mov	r1, r5
 800d936:	f7f2 fe27 	bl	8000588 <__aeabi_dmul>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4630      	mov	r0, r6
 800d940:	4639      	mov	r1, r7
 800d942:	f7f2 fe21 	bl	8000588 <__aeabi_dmul>
 800d946:	4642      	mov	r2, r8
 800d948:	4604      	mov	r4, r0
 800d94a:	460d      	mov	r5, r1
 800d94c:	464b      	mov	r3, r9
 800d94e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d952:	f7f2 fc63 	bl	800021c <__adddf3>
 800d956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d95a:	f7f2 fe15 	bl	8000588 <__aeabi_dmul>
 800d95e:	4622      	mov	r2, r4
 800d960:	462b      	mov	r3, r5
 800d962:	f7f2 fc5b 	bl	800021c <__adddf3>
 800d966:	4642      	mov	r2, r8
 800d968:	4606      	mov	r6, r0
 800d96a:	460f      	mov	r7, r1
 800d96c:	464b      	mov	r3, r9
 800d96e:	4640      	mov	r0, r8
 800d970:	4649      	mov	r1, r9
 800d972:	f7f2 fe09 	bl	8000588 <__aeabi_dmul>
 800d976:	2200      	movs	r2, #0
 800d978:	4b68      	ldr	r3, [pc, #416]	; (800db1c <__ieee754_pow+0x734>)
 800d97a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d97e:	f7f2 fc4d 	bl	800021c <__adddf3>
 800d982:	4632      	mov	r2, r6
 800d984:	463b      	mov	r3, r7
 800d986:	f7f2 fc49 	bl	800021c <__adddf3>
 800d98a:	9802      	ldr	r0, [sp, #8]
 800d98c:	460d      	mov	r5, r1
 800d98e:	4604      	mov	r4, r0
 800d990:	4602      	mov	r2, r0
 800d992:	460b      	mov	r3, r1
 800d994:	4640      	mov	r0, r8
 800d996:	4649      	mov	r1, r9
 800d998:	f7f2 fdf6 	bl	8000588 <__aeabi_dmul>
 800d99c:	2200      	movs	r2, #0
 800d99e:	4680      	mov	r8, r0
 800d9a0:	4689      	mov	r9, r1
 800d9a2:	4b5e      	ldr	r3, [pc, #376]	; (800db1c <__ieee754_pow+0x734>)
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	f7f2 fc36 	bl	8000218 <__aeabi_dsub>
 800d9ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d9b0:	f7f2 fc32 	bl	8000218 <__aeabi_dsub>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	4639      	mov	r1, r7
 800d9bc:	f7f2 fc2c 	bl	8000218 <__aeabi_dsub>
 800d9c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9c4:	f7f2 fde0 	bl	8000588 <__aeabi_dmul>
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	462b      	mov	r3, r5
 800d9d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9d4:	f7f2 fdd8 	bl	8000588 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4639      	mov	r1, r7
 800d9e0:	f7f2 fc1c 	bl	800021c <__adddf3>
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	460f      	mov	r7, r1
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7f2 fc14 	bl	800021c <__adddf3>
 800d9f4:	9802      	ldr	r0, [sp, #8]
 800d9f6:	a33c      	add	r3, pc, #240	; (adr r3, 800dae8 <__ieee754_pow+0x700>)
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	f7f2 fdc2 	bl	8000588 <__aeabi_dmul>
 800da04:	4642      	mov	r2, r8
 800da06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da0a:	464b      	mov	r3, r9
 800da0c:	4620      	mov	r0, r4
 800da0e:	4629      	mov	r1, r5
 800da10:	f7f2 fc02 	bl	8000218 <__aeabi_dsub>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4630      	mov	r0, r6
 800da1a:	4639      	mov	r1, r7
 800da1c:	f7f2 fbfc 	bl	8000218 <__aeabi_dsub>
 800da20:	a333      	add	r3, pc, #204	; (adr r3, 800daf0 <__ieee754_pow+0x708>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	f7f2 fdaf 	bl	8000588 <__aeabi_dmul>
 800da2a:	a333      	add	r3, pc, #204	; (adr r3, 800daf8 <__ieee754_pow+0x710>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	4606      	mov	r6, r0
 800da32:	460f      	mov	r7, r1
 800da34:	4620      	mov	r0, r4
 800da36:	4629      	mov	r1, r5
 800da38:	f7f2 fda6 	bl	8000588 <__aeabi_dmul>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	4630      	mov	r0, r6
 800da42:	4639      	mov	r1, r7
 800da44:	f7f2 fbea 	bl	800021c <__adddf3>
 800da48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da4a:	4b35      	ldr	r3, [pc, #212]	; (800db20 <__ieee754_pow+0x738>)
 800da4c:	4413      	add	r3, r2
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	f7f2 fbe3 	bl	800021c <__adddf3>
 800da56:	4604      	mov	r4, r0
 800da58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da5a:	460d      	mov	r5, r1
 800da5c:	f7f2 fd2a 	bl	80004b4 <__aeabi_i2d>
 800da60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da62:	4b30      	ldr	r3, [pc, #192]	; (800db24 <__ieee754_pow+0x73c>)
 800da64:	4413      	add	r3, r2
 800da66:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	4622      	mov	r2, r4
 800da70:	462b      	mov	r3, r5
 800da72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da76:	f7f2 fbd1 	bl	800021c <__adddf3>
 800da7a:	4642      	mov	r2, r8
 800da7c:	464b      	mov	r3, r9
 800da7e:	f7f2 fbcd 	bl	800021c <__adddf3>
 800da82:	4632      	mov	r2, r6
 800da84:	463b      	mov	r3, r7
 800da86:	f7f2 fbc9 	bl	800021c <__adddf3>
 800da8a:	9802      	ldr	r0, [sp, #8]
 800da8c:	4632      	mov	r2, r6
 800da8e:	463b      	mov	r3, r7
 800da90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da94:	f7f2 fbc0 	bl	8000218 <__aeabi_dsub>
 800da98:	4642      	mov	r2, r8
 800da9a:	464b      	mov	r3, r9
 800da9c:	f7f2 fbbc 	bl	8000218 <__aeabi_dsub>
 800daa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800daa4:	e607      	b.n	800d6b6 <__ieee754_pow+0x2ce>
 800daa6:	f04f 0a01 	mov.w	sl, #1
 800daaa:	e6a5      	b.n	800d7f8 <__ieee754_pow+0x410>
 800daac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800db00 <__ieee754_pow+0x718>
 800dab0:	e613      	b.n	800d6da <__ieee754_pow+0x2f2>
 800dab2:	bf00      	nop
 800dab4:	f3af 8000 	nop.w
 800dab8:	4a454eef 	.word	0x4a454eef
 800dabc:	3fca7e28 	.word	0x3fca7e28
 800dac0:	93c9db65 	.word	0x93c9db65
 800dac4:	3fcd864a 	.word	0x3fcd864a
 800dac8:	a91d4101 	.word	0xa91d4101
 800dacc:	3fd17460 	.word	0x3fd17460
 800dad0:	518f264d 	.word	0x518f264d
 800dad4:	3fd55555 	.word	0x3fd55555
 800dad8:	db6fabff 	.word	0xdb6fabff
 800dadc:	3fdb6db6 	.word	0x3fdb6db6
 800dae0:	33333303 	.word	0x33333303
 800dae4:	3fe33333 	.word	0x3fe33333
 800dae8:	e0000000 	.word	0xe0000000
 800daec:	3feec709 	.word	0x3feec709
 800daf0:	dc3a03fd 	.word	0xdc3a03fd
 800daf4:	3feec709 	.word	0x3feec709
 800daf8:	145b01f5 	.word	0x145b01f5
 800dafc:	be3e2fe0 	.word	0xbe3e2fe0
 800db00:	00000000 	.word	0x00000000
 800db04:	3ff00000 	.word	0x3ff00000
 800db08:	43400000 	.word	0x43400000
 800db0c:	0003988e 	.word	0x0003988e
 800db10:	000bb679 	.word	0x000bb679
 800db14:	0800e298 	.word	0x0800e298
 800db18:	3ff00000 	.word	0x3ff00000
 800db1c:	40080000 	.word	0x40080000
 800db20:	0800e2b8 	.word	0x0800e2b8
 800db24:	0800e2a8 	.word	0x0800e2a8
 800db28:	a3b4      	add	r3, pc, #720	; (adr r3, 800ddfc <__ieee754_pow+0xa14>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	4640      	mov	r0, r8
 800db30:	4649      	mov	r1, r9
 800db32:	f7f2 fb73 	bl	800021c <__adddf3>
 800db36:	4622      	mov	r2, r4
 800db38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db3c:	462b      	mov	r3, r5
 800db3e:	4630      	mov	r0, r6
 800db40:	4639      	mov	r1, r7
 800db42:	f7f2 fb69 	bl	8000218 <__aeabi_dsub>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db4e:	f7f2 ffab 	bl	8000aa8 <__aeabi_dcmpgt>
 800db52:	2800      	cmp	r0, #0
 800db54:	f47f adfe 	bne.w	800d754 <__ieee754_pow+0x36c>
 800db58:	4aa3      	ldr	r2, [pc, #652]	; (800dde8 <__ieee754_pow+0xa00>)
 800db5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db5e:	4293      	cmp	r3, r2
 800db60:	f340 810a 	ble.w	800dd78 <__ieee754_pow+0x990>
 800db64:	151b      	asrs	r3, r3, #20
 800db66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800db6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800db6e:	fa4a f303 	asr.w	r3, sl, r3
 800db72:	445b      	add	r3, fp
 800db74:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800db78:	4e9c      	ldr	r6, [pc, #624]	; (800ddec <__ieee754_pow+0xa04>)
 800db7a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800db7e:	4116      	asrs	r6, r2
 800db80:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800db84:	2000      	movs	r0, #0
 800db86:	ea23 0106 	bic.w	r1, r3, r6
 800db8a:	f1c2 0214 	rsb	r2, r2, #20
 800db8e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800db92:	fa4a fa02 	asr.w	sl, sl, r2
 800db96:	f1bb 0f00 	cmp.w	fp, #0
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	4620      	mov	r0, r4
 800dba0:	4629      	mov	r1, r5
 800dba2:	bfb8      	it	lt
 800dba4:	f1ca 0a00 	rsblt	sl, sl, #0
 800dba8:	f7f2 fb36 	bl	8000218 <__aeabi_dsub>
 800dbac:	e9cd 0100 	strd	r0, r1, [sp]
 800dbb0:	4642      	mov	r2, r8
 800dbb2:	464b      	mov	r3, r9
 800dbb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbb8:	f7f2 fb30 	bl	800021c <__adddf3>
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	a378      	add	r3, pc, #480	; (adr r3, 800dda0 <__ieee754_pow+0x9b8>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	f7f2 fcde 	bl	8000588 <__aeabi_dmul>
 800dbcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	460f      	mov	r7, r1
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	f7f2 fb1e 	bl	8000218 <__aeabi_dsub>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	f7f2 fb18 	bl	8000218 <__aeabi_dsub>
 800dbe8:	a36f      	add	r3, pc, #444	; (adr r3, 800dda8 <__ieee754_pow+0x9c0>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fccb 	bl	8000588 <__aeabi_dmul>
 800dbf2:	a36f      	add	r3, pc, #444	; (adr r3, 800ddb0 <__ieee754_pow+0x9c8>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	4680      	mov	r8, r0
 800dbfa:	4689      	mov	r9, r1
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 fcc2 	bl	8000588 <__aeabi_dmul>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	4640      	mov	r0, r8
 800dc0a:	4649      	mov	r1, r9
 800dc0c:	f7f2 fb06 	bl	800021c <__adddf3>
 800dc10:	4604      	mov	r4, r0
 800dc12:	460d      	mov	r5, r1
 800dc14:	4602      	mov	r2, r0
 800dc16:	460b      	mov	r3, r1
 800dc18:	4630      	mov	r0, r6
 800dc1a:	4639      	mov	r1, r7
 800dc1c:	f7f2 fafe 	bl	800021c <__adddf3>
 800dc20:	4632      	mov	r2, r6
 800dc22:	463b      	mov	r3, r7
 800dc24:	4680      	mov	r8, r0
 800dc26:	4689      	mov	r9, r1
 800dc28:	f7f2 faf6 	bl	8000218 <__aeabi_dsub>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	4620      	mov	r0, r4
 800dc32:	4629      	mov	r1, r5
 800dc34:	f7f2 faf0 	bl	8000218 <__aeabi_dsub>
 800dc38:	4642      	mov	r2, r8
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	460f      	mov	r7, r1
 800dc3e:	464b      	mov	r3, r9
 800dc40:	4640      	mov	r0, r8
 800dc42:	4649      	mov	r1, r9
 800dc44:	f7f2 fca0 	bl	8000588 <__aeabi_dmul>
 800dc48:	a35b      	add	r3, pc, #364	; (adr r3, 800ddb8 <__ieee754_pow+0x9d0>)
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	4604      	mov	r4, r0
 800dc50:	460d      	mov	r5, r1
 800dc52:	f7f2 fc99 	bl	8000588 <__aeabi_dmul>
 800dc56:	a35a      	add	r3, pc, #360	; (adr r3, 800ddc0 <__ieee754_pow+0x9d8>)
 800dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5c:	f7f2 fadc 	bl	8000218 <__aeabi_dsub>
 800dc60:	4622      	mov	r2, r4
 800dc62:	462b      	mov	r3, r5
 800dc64:	f7f2 fc90 	bl	8000588 <__aeabi_dmul>
 800dc68:	a357      	add	r3, pc, #348	; (adr r3, 800ddc8 <__ieee754_pow+0x9e0>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	f7f2 fad5 	bl	800021c <__adddf3>
 800dc72:	4622      	mov	r2, r4
 800dc74:	462b      	mov	r3, r5
 800dc76:	f7f2 fc87 	bl	8000588 <__aeabi_dmul>
 800dc7a:	a355      	add	r3, pc, #340	; (adr r3, 800ddd0 <__ieee754_pow+0x9e8>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 faca 	bl	8000218 <__aeabi_dsub>
 800dc84:	4622      	mov	r2, r4
 800dc86:	462b      	mov	r3, r5
 800dc88:	f7f2 fc7e 	bl	8000588 <__aeabi_dmul>
 800dc8c:	a352      	add	r3, pc, #328	; (adr r3, 800ddd8 <__ieee754_pow+0x9f0>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fac3 	bl	800021c <__adddf3>
 800dc96:	4622      	mov	r2, r4
 800dc98:	462b      	mov	r3, r5
 800dc9a:	f7f2 fc75 	bl	8000588 <__aeabi_dmul>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	4640      	mov	r0, r8
 800dca4:	4649      	mov	r1, r9
 800dca6:	f7f2 fab7 	bl	8000218 <__aeabi_dsub>
 800dcaa:	4604      	mov	r4, r0
 800dcac:	460d      	mov	r5, r1
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4640      	mov	r0, r8
 800dcb4:	4649      	mov	r1, r9
 800dcb6:	f7f2 fc67 	bl	8000588 <__aeabi_dmul>
 800dcba:	2200      	movs	r2, #0
 800dcbc:	e9cd 0100 	strd	r0, r1, [sp]
 800dcc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 faa6 	bl	8000218 <__aeabi_dsub>
 800dccc:	4602      	mov	r2, r0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcd4:	f7f2 fd82 	bl	80007dc <__aeabi_ddiv>
 800dcd8:	4632      	mov	r2, r6
 800dcda:	4604      	mov	r4, r0
 800dcdc:	460d      	mov	r5, r1
 800dcde:	463b      	mov	r3, r7
 800dce0:	4640      	mov	r0, r8
 800dce2:	4649      	mov	r1, r9
 800dce4:	f7f2 fc50 	bl	8000588 <__aeabi_dmul>
 800dce8:	4632      	mov	r2, r6
 800dcea:	463b      	mov	r3, r7
 800dcec:	f7f2 fa96 	bl	800021c <__adddf3>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	f7f2 fa8e 	bl	8000218 <__aeabi_dsub>
 800dcfc:	4642      	mov	r2, r8
 800dcfe:	464b      	mov	r3, r9
 800dd00:	f7f2 fa8a 	bl	8000218 <__aeabi_dsub>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	2000      	movs	r0, #0
 800dd0a:	4939      	ldr	r1, [pc, #228]	; (800ddf0 <__ieee754_pow+0xa08>)
 800dd0c:	f7f2 fa84 	bl	8000218 <__aeabi_dsub>
 800dd10:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800dd14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	da2f      	bge.n	800dd7e <__ieee754_pow+0x996>
 800dd1e:	4650      	mov	r0, sl
 800dd20:	ec43 2b10 	vmov	d0, r2, r3
 800dd24:	f000 f9c0 	bl	800e0a8 <scalbn>
 800dd28:	ec51 0b10 	vmov	r0, r1, d0
 800dd2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd30:	f7ff bbf1 	b.w	800d516 <__ieee754_pow+0x12e>
 800dd34:	4b2f      	ldr	r3, [pc, #188]	; (800ddf4 <__ieee754_pow+0xa0c>)
 800dd36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd3a:	429e      	cmp	r6, r3
 800dd3c:	f77f af0c 	ble.w	800db58 <__ieee754_pow+0x770>
 800dd40:	4b2d      	ldr	r3, [pc, #180]	; (800ddf8 <__ieee754_pow+0xa10>)
 800dd42:	440b      	add	r3, r1
 800dd44:	4303      	orrs	r3, r0
 800dd46:	d00b      	beq.n	800dd60 <__ieee754_pow+0x978>
 800dd48:	a325      	add	r3, pc, #148	; (adr r3, 800dde0 <__ieee754_pow+0x9f8>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd52:	f7f2 fc19 	bl	8000588 <__aeabi_dmul>
 800dd56:	a322      	add	r3, pc, #136	; (adr r3, 800dde0 <__ieee754_pow+0x9f8>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7ff bbdb 	b.w	800d516 <__ieee754_pow+0x12e>
 800dd60:	4622      	mov	r2, r4
 800dd62:	462b      	mov	r3, r5
 800dd64:	f7f2 fa58 	bl	8000218 <__aeabi_dsub>
 800dd68:	4642      	mov	r2, r8
 800dd6a:	464b      	mov	r3, r9
 800dd6c:	f7f2 fe92 	bl	8000a94 <__aeabi_dcmpge>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	f43f aef1 	beq.w	800db58 <__ieee754_pow+0x770>
 800dd76:	e7e7      	b.n	800dd48 <__ieee754_pow+0x960>
 800dd78:	f04f 0a00 	mov.w	sl, #0
 800dd7c:	e718      	b.n	800dbb0 <__ieee754_pow+0x7c8>
 800dd7e:	4621      	mov	r1, r4
 800dd80:	e7d4      	b.n	800dd2c <__ieee754_pow+0x944>
 800dd82:	2000      	movs	r0, #0
 800dd84:	491a      	ldr	r1, [pc, #104]	; (800ddf0 <__ieee754_pow+0xa08>)
 800dd86:	f7ff bb8f 	b.w	800d4a8 <__ieee754_pow+0xc0>
 800dd8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd8e:	f7ff bb8b 	b.w	800d4a8 <__ieee754_pow+0xc0>
 800dd92:	4630      	mov	r0, r6
 800dd94:	4639      	mov	r1, r7
 800dd96:	f7ff bb87 	b.w	800d4a8 <__ieee754_pow+0xc0>
 800dd9a:	4693      	mov	fp, r2
 800dd9c:	f7ff bb98 	b.w	800d4d0 <__ieee754_pow+0xe8>
 800dda0:	00000000 	.word	0x00000000
 800dda4:	3fe62e43 	.word	0x3fe62e43
 800dda8:	fefa39ef 	.word	0xfefa39ef
 800ddac:	3fe62e42 	.word	0x3fe62e42
 800ddb0:	0ca86c39 	.word	0x0ca86c39
 800ddb4:	be205c61 	.word	0xbe205c61
 800ddb8:	72bea4d0 	.word	0x72bea4d0
 800ddbc:	3e663769 	.word	0x3e663769
 800ddc0:	c5d26bf1 	.word	0xc5d26bf1
 800ddc4:	3ebbbd41 	.word	0x3ebbbd41
 800ddc8:	af25de2c 	.word	0xaf25de2c
 800ddcc:	3f11566a 	.word	0x3f11566a
 800ddd0:	16bebd93 	.word	0x16bebd93
 800ddd4:	3f66c16c 	.word	0x3f66c16c
 800ddd8:	5555553e 	.word	0x5555553e
 800dddc:	3fc55555 	.word	0x3fc55555
 800dde0:	c2f8f359 	.word	0xc2f8f359
 800dde4:	01a56e1f 	.word	0x01a56e1f
 800dde8:	3fe00000 	.word	0x3fe00000
 800ddec:	000fffff 	.word	0x000fffff
 800ddf0:	3ff00000 	.word	0x3ff00000
 800ddf4:	4090cbff 	.word	0x4090cbff
 800ddf8:	3f6f3400 	.word	0x3f6f3400
 800ddfc:	652b82fe 	.word	0x652b82fe
 800de00:	3c971547 	.word	0x3c971547

0800de04 <__ieee754_sqrt>:
 800de04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de08:	4955      	ldr	r1, [pc, #340]	; (800df60 <__ieee754_sqrt+0x15c>)
 800de0a:	ec55 4b10 	vmov	r4, r5, d0
 800de0e:	43a9      	bics	r1, r5
 800de10:	462b      	mov	r3, r5
 800de12:	462a      	mov	r2, r5
 800de14:	d112      	bne.n	800de3c <__ieee754_sqrt+0x38>
 800de16:	ee10 2a10 	vmov	r2, s0
 800de1a:	ee10 0a10 	vmov	r0, s0
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 fbb2 	bl	8000588 <__aeabi_dmul>
 800de24:	4602      	mov	r2, r0
 800de26:	460b      	mov	r3, r1
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	f7f2 f9f6 	bl	800021c <__adddf3>
 800de30:	4604      	mov	r4, r0
 800de32:	460d      	mov	r5, r1
 800de34:	ec45 4b10 	vmov	d0, r4, r5
 800de38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de3c:	2d00      	cmp	r5, #0
 800de3e:	ee10 0a10 	vmov	r0, s0
 800de42:	4621      	mov	r1, r4
 800de44:	dc0f      	bgt.n	800de66 <__ieee754_sqrt+0x62>
 800de46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de4a:	4330      	orrs	r0, r6
 800de4c:	d0f2      	beq.n	800de34 <__ieee754_sqrt+0x30>
 800de4e:	b155      	cbz	r5, 800de66 <__ieee754_sqrt+0x62>
 800de50:	ee10 2a10 	vmov	r2, s0
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 f9de 	bl	8000218 <__aeabi_dsub>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	f7f2 fcbc 	bl	80007dc <__aeabi_ddiv>
 800de64:	e7e4      	b.n	800de30 <__ieee754_sqrt+0x2c>
 800de66:	151b      	asrs	r3, r3, #20
 800de68:	d073      	beq.n	800df52 <__ieee754_sqrt+0x14e>
 800de6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800de6e:	07dd      	lsls	r5, r3, #31
 800de70:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800de74:	bf48      	it	mi
 800de76:	0fc8      	lsrmi	r0, r1, #31
 800de78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800de7c:	bf44      	itt	mi
 800de7e:	0049      	lslmi	r1, r1, #1
 800de80:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800de84:	2500      	movs	r5, #0
 800de86:	1058      	asrs	r0, r3, #1
 800de88:	0fcb      	lsrs	r3, r1, #31
 800de8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800de8e:	0049      	lsls	r1, r1, #1
 800de90:	2316      	movs	r3, #22
 800de92:	462c      	mov	r4, r5
 800de94:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800de98:	19a7      	adds	r7, r4, r6
 800de9a:	4297      	cmp	r7, r2
 800de9c:	bfde      	ittt	le
 800de9e:	19bc      	addle	r4, r7, r6
 800dea0:	1bd2      	suble	r2, r2, r7
 800dea2:	19ad      	addle	r5, r5, r6
 800dea4:	0fcf      	lsrs	r7, r1, #31
 800dea6:	3b01      	subs	r3, #1
 800dea8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800deac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800deb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800deb4:	d1f0      	bne.n	800de98 <__ieee754_sqrt+0x94>
 800deb6:	f04f 0c20 	mov.w	ip, #32
 800deba:	469e      	mov	lr, r3
 800debc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dec0:	42a2      	cmp	r2, r4
 800dec2:	eb06 070e 	add.w	r7, r6, lr
 800dec6:	dc02      	bgt.n	800dece <__ieee754_sqrt+0xca>
 800dec8:	d112      	bne.n	800def0 <__ieee754_sqrt+0xec>
 800deca:	428f      	cmp	r7, r1
 800decc:	d810      	bhi.n	800def0 <__ieee754_sqrt+0xec>
 800dece:	2f00      	cmp	r7, #0
 800ded0:	eb07 0e06 	add.w	lr, r7, r6
 800ded4:	da42      	bge.n	800df5c <__ieee754_sqrt+0x158>
 800ded6:	f1be 0f00 	cmp.w	lr, #0
 800deda:	db3f      	blt.n	800df5c <__ieee754_sqrt+0x158>
 800dedc:	f104 0801 	add.w	r8, r4, #1
 800dee0:	1b12      	subs	r2, r2, r4
 800dee2:	428f      	cmp	r7, r1
 800dee4:	bf88      	it	hi
 800dee6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800deea:	1bc9      	subs	r1, r1, r7
 800deec:	4433      	add	r3, r6
 800deee:	4644      	mov	r4, r8
 800def0:	0052      	lsls	r2, r2, #1
 800def2:	f1bc 0c01 	subs.w	ip, ip, #1
 800def6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800defa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800defe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800df02:	d1dd      	bne.n	800dec0 <__ieee754_sqrt+0xbc>
 800df04:	430a      	orrs	r2, r1
 800df06:	d006      	beq.n	800df16 <__ieee754_sqrt+0x112>
 800df08:	1c5c      	adds	r4, r3, #1
 800df0a:	bf13      	iteet	ne
 800df0c:	3301      	addne	r3, #1
 800df0e:	3501      	addeq	r5, #1
 800df10:	4663      	moveq	r3, ip
 800df12:	f023 0301 	bicne.w	r3, r3, #1
 800df16:	106a      	asrs	r2, r5, #1
 800df18:	085b      	lsrs	r3, r3, #1
 800df1a:	07e9      	lsls	r1, r5, #31
 800df1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800df20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800df24:	bf48      	it	mi
 800df26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800df2a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800df2e:	461c      	mov	r4, r3
 800df30:	e780      	b.n	800de34 <__ieee754_sqrt+0x30>
 800df32:	0aca      	lsrs	r2, r1, #11
 800df34:	3815      	subs	r0, #21
 800df36:	0549      	lsls	r1, r1, #21
 800df38:	2a00      	cmp	r2, #0
 800df3a:	d0fa      	beq.n	800df32 <__ieee754_sqrt+0x12e>
 800df3c:	02d6      	lsls	r6, r2, #11
 800df3e:	d50a      	bpl.n	800df56 <__ieee754_sqrt+0x152>
 800df40:	f1c3 0420 	rsb	r4, r3, #32
 800df44:	fa21 f404 	lsr.w	r4, r1, r4
 800df48:	1e5d      	subs	r5, r3, #1
 800df4a:	4099      	lsls	r1, r3
 800df4c:	4322      	orrs	r2, r4
 800df4e:	1b43      	subs	r3, r0, r5
 800df50:	e78b      	b.n	800de6a <__ieee754_sqrt+0x66>
 800df52:	4618      	mov	r0, r3
 800df54:	e7f0      	b.n	800df38 <__ieee754_sqrt+0x134>
 800df56:	0052      	lsls	r2, r2, #1
 800df58:	3301      	adds	r3, #1
 800df5a:	e7ef      	b.n	800df3c <__ieee754_sqrt+0x138>
 800df5c:	46a0      	mov	r8, r4
 800df5e:	e7bf      	b.n	800dee0 <__ieee754_sqrt+0xdc>
 800df60:	7ff00000 	.word	0x7ff00000

0800df64 <fabs>:
 800df64:	ec51 0b10 	vmov	r0, r1, d0
 800df68:	ee10 2a10 	vmov	r2, s0
 800df6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df70:	ec43 2b10 	vmov	d0, r2, r3
 800df74:	4770      	bx	lr

0800df76 <finite>:
 800df76:	ee10 3a90 	vmov	r3, s1
 800df7a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800df7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800df82:	0fc0      	lsrs	r0, r0, #31
 800df84:	4770      	bx	lr

0800df86 <matherr>:
 800df86:	2000      	movs	r0, #0
 800df88:	4770      	bx	lr
 800df8a:	0000      	movs	r0, r0
 800df8c:	0000      	movs	r0, r0
	...

0800df90 <nan>:
 800df90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df98 <nan+0x8>
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	00000000 	.word	0x00000000
 800df9c:	7ff80000 	.word	0x7ff80000

0800dfa0 <rint>:
 800dfa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfa2:	ec51 0b10 	vmov	r0, r1, d0
 800dfa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dfae:	2e13      	cmp	r6, #19
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	ee10 4a10 	vmov	r4, s0
 800dfb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dfba:	dc56      	bgt.n	800e06a <rint+0xca>
 800dfbc:	2e00      	cmp	r6, #0
 800dfbe:	da2b      	bge.n	800e018 <rint+0x78>
 800dfc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dfc4:	4302      	orrs	r2, r0
 800dfc6:	d023      	beq.n	800e010 <rint+0x70>
 800dfc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dfcc:	4302      	orrs	r2, r0
 800dfce:	4254      	negs	r4, r2
 800dfd0:	4314      	orrs	r4, r2
 800dfd2:	0c4b      	lsrs	r3, r1, #17
 800dfd4:	0b24      	lsrs	r4, r4, #12
 800dfd6:	045b      	lsls	r3, r3, #17
 800dfd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800dfdc:	ea44 0103 	orr.w	r1, r4, r3
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	492f      	ldr	r1, [pc, #188]	; (800e0a0 <rint+0x100>)
 800dfe4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800dfe8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800dfec:	4602      	mov	r2, r0
 800dfee:	4639      	mov	r1, r7
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7f2 f913 	bl	800021c <__adddf3>
 800dff6:	e9cd 0100 	strd	r0, r1, [sp]
 800dffa:	463b      	mov	r3, r7
 800dffc:	4632      	mov	r2, r6
 800dffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e002:	f7f2 f909 	bl	8000218 <__aeabi_dsub>
 800e006:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e00a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e00e:	4639      	mov	r1, r7
 800e010:	ec41 0b10 	vmov	d0, r0, r1
 800e014:	b003      	add	sp, #12
 800e016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e018:	4a22      	ldr	r2, [pc, #136]	; (800e0a4 <rint+0x104>)
 800e01a:	4132      	asrs	r2, r6
 800e01c:	ea01 0702 	and.w	r7, r1, r2
 800e020:	4307      	orrs	r7, r0
 800e022:	d0f5      	beq.n	800e010 <rint+0x70>
 800e024:	0852      	lsrs	r2, r2, #1
 800e026:	4011      	ands	r1, r2
 800e028:	430c      	orrs	r4, r1
 800e02a:	d00b      	beq.n	800e044 <rint+0xa4>
 800e02c:	ea23 0202 	bic.w	r2, r3, r2
 800e030:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e034:	2e13      	cmp	r6, #19
 800e036:	fa43 f306 	asr.w	r3, r3, r6
 800e03a:	bf0c      	ite	eq
 800e03c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e040:	2400      	movne	r4, #0
 800e042:	4313      	orrs	r3, r2
 800e044:	4916      	ldr	r1, [pc, #88]	; (800e0a0 <rint+0x100>)
 800e046:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e04a:	4622      	mov	r2, r4
 800e04c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e050:	4620      	mov	r0, r4
 800e052:	4629      	mov	r1, r5
 800e054:	f7f2 f8e2 	bl	800021c <__adddf3>
 800e058:	e9cd 0100 	strd	r0, r1, [sp]
 800e05c:	4622      	mov	r2, r4
 800e05e:	462b      	mov	r3, r5
 800e060:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e064:	f7f2 f8d8 	bl	8000218 <__aeabi_dsub>
 800e068:	e7d2      	b.n	800e010 <rint+0x70>
 800e06a:	2e33      	cmp	r6, #51	; 0x33
 800e06c:	dd07      	ble.n	800e07e <rint+0xde>
 800e06e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e072:	d1cd      	bne.n	800e010 <rint+0x70>
 800e074:	ee10 2a10 	vmov	r2, s0
 800e078:	f7f2 f8d0 	bl	800021c <__adddf3>
 800e07c:	e7c8      	b.n	800e010 <rint+0x70>
 800e07e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800e082:	f04f 32ff 	mov.w	r2, #4294967295
 800e086:	40f2      	lsrs	r2, r6
 800e088:	4210      	tst	r0, r2
 800e08a:	d0c1      	beq.n	800e010 <rint+0x70>
 800e08c:	0852      	lsrs	r2, r2, #1
 800e08e:	4210      	tst	r0, r2
 800e090:	bf1f      	itttt	ne
 800e092:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e096:	ea20 0202 	bicne.w	r2, r0, r2
 800e09a:	4134      	asrne	r4, r6
 800e09c:	4314      	orrne	r4, r2
 800e09e:	e7d1      	b.n	800e044 <rint+0xa4>
 800e0a0:	0800e2c8 	.word	0x0800e2c8
 800e0a4:	000fffff 	.word	0x000fffff

0800e0a8 <scalbn>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	ec55 4b10 	vmov	r4, r5, d0
 800e0ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	b9aa      	cbnz	r2, 800e0e4 <scalbn+0x3c>
 800e0b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0bc:	4323      	orrs	r3, r4
 800e0be:	d03b      	beq.n	800e138 <scalbn+0x90>
 800e0c0:	4b31      	ldr	r3, [pc, #196]	; (800e188 <scalbn+0xe0>)
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	ee10 0a10 	vmov	r0, s0
 800e0ca:	f7f2 fa5d 	bl	8000588 <__aeabi_dmul>
 800e0ce:	4b2f      	ldr	r3, [pc, #188]	; (800e18c <scalbn+0xe4>)
 800e0d0:	429e      	cmp	r6, r3
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	da12      	bge.n	800e0fe <scalbn+0x56>
 800e0d8:	a327      	add	r3, pc, #156	; (adr r3, 800e178 <scalbn+0xd0>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f7f2 fa53 	bl	8000588 <__aeabi_dmul>
 800e0e2:	e009      	b.n	800e0f8 <scalbn+0x50>
 800e0e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e0e8:	428a      	cmp	r2, r1
 800e0ea:	d10c      	bne.n	800e106 <scalbn+0x5e>
 800e0ec:	ee10 2a10 	vmov	r2, s0
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	4629      	mov	r1, r5
 800e0f4:	f7f2 f892 	bl	800021c <__adddf3>
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	460d      	mov	r5, r1
 800e0fc:	e01c      	b.n	800e138 <scalbn+0x90>
 800e0fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e102:	460b      	mov	r3, r1
 800e104:	3a36      	subs	r2, #54	; 0x36
 800e106:	4432      	add	r2, r6
 800e108:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e10c:	428a      	cmp	r2, r1
 800e10e:	dd0b      	ble.n	800e128 <scalbn+0x80>
 800e110:	ec45 4b11 	vmov	d1, r4, r5
 800e114:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e180 <scalbn+0xd8>
 800e118:	f000 f83c 	bl	800e194 <copysign>
 800e11c:	a318      	add	r3, pc, #96	; (adr r3, 800e180 <scalbn+0xd8>)
 800e11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e122:	ec51 0b10 	vmov	r0, r1, d0
 800e126:	e7da      	b.n	800e0de <scalbn+0x36>
 800e128:	2a00      	cmp	r2, #0
 800e12a:	dd08      	ble.n	800e13e <scalbn+0x96>
 800e12c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e130:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e134:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e138:	ec45 4b10 	vmov	d0, r4, r5
 800e13c:	bd70      	pop	{r4, r5, r6, pc}
 800e13e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e142:	da0d      	bge.n	800e160 <scalbn+0xb8>
 800e144:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e148:	429e      	cmp	r6, r3
 800e14a:	ec45 4b11 	vmov	d1, r4, r5
 800e14e:	dce1      	bgt.n	800e114 <scalbn+0x6c>
 800e150:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e178 <scalbn+0xd0>
 800e154:	f000 f81e 	bl	800e194 <copysign>
 800e158:	a307      	add	r3, pc, #28	; (adr r3, 800e178 <scalbn+0xd0>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	e7e0      	b.n	800e122 <scalbn+0x7a>
 800e160:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e164:	3236      	adds	r2, #54	; 0x36
 800e166:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e16a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e16e:	4620      	mov	r0, r4
 800e170:	4629      	mov	r1, r5
 800e172:	2200      	movs	r2, #0
 800e174:	4b06      	ldr	r3, [pc, #24]	; (800e190 <scalbn+0xe8>)
 800e176:	e7b2      	b.n	800e0de <scalbn+0x36>
 800e178:	c2f8f359 	.word	0xc2f8f359
 800e17c:	01a56e1f 	.word	0x01a56e1f
 800e180:	8800759c 	.word	0x8800759c
 800e184:	7e37e43c 	.word	0x7e37e43c
 800e188:	43500000 	.word	0x43500000
 800e18c:	ffff3cb0 	.word	0xffff3cb0
 800e190:	3c900000 	.word	0x3c900000

0800e194 <copysign>:
 800e194:	ec51 0b10 	vmov	r0, r1, d0
 800e198:	ee11 0a90 	vmov	r0, s3
 800e19c:	ee10 2a10 	vmov	r2, s0
 800e1a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e1a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e1a8:	ea41 0300 	orr.w	r3, r1, r0
 800e1ac:	ec43 2b10 	vmov	d0, r2, r3
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <_init>:
 800e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b6:	bf00      	nop
 800e1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ba:	bc08      	pop	{r3}
 800e1bc:	469e      	mov	lr, r3
 800e1be:	4770      	bx	lr

0800e1c0 <_fini>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	bf00      	nop
 800e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c6:	bc08      	pop	{r3}
 800e1c8:	469e      	mov	lr, r3
 800e1ca:	4770      	bx	lr
