
mb_working_jonas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b76c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800b940  0800b940  0001b940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba38  0800ba38  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba40  0800ba40  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba40  0800ba40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba44  0800ba44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ba48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b80  200001f4  0800bc3c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20007d74  0800bc3c  00027d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d4f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000489a  00000000  00000000  00044f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  00049810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  0004b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007275  00000000  00000000  0004c718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001798c  00000000  00000000  0005398d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0c1b  00000000  00000000  0006b319  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bf34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a54  00000000  00000000  0015bfb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b924 	.word	0x0800b924

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800b924 	.word	0x0800b924

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_uldivmod>:
 8000b28:	b953      	cbnz	r3, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2a:	b94a      	cbnz	r2, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bf08      	it	eq
 8000b30:	2800      	cmpeq	r0, #0
 8000b32:	bf1c      	itt	ne
 8000b34:	f04f 31ff 	movne.w	r1, #4294967295
 8000b38:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3c:	f000 b972 	b.w	8000e24 <__aeabi_idiv0>
 8000b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b48:	f000 f806 	bl	8000b58 <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <__udivmoddi4>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	9e08      	ldr	r6, [sp, #32]
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4688      	mov	r8, r1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d14b      	bne.n	8000bfe <__udivmoddi4+0xa6>
 8000b66:	428a      	cmp	r2, r1
 8000b68:	4615      	mov	r5, r2
 8000b6a:	d967      	bls.n	8000c3c <__udivmoddi4+0xe4>
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b14a      	cbz	r2, 8000b86 <__udivmoddi4+0x2e>
 8000b72:	f1c2 0720 	rsb	r7, r2, #32
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b7e:	4095      	lsls	r5, r2
 8000b80:	ea47 0803 	orr.w	r8, r7, r3
 8000b84:	4094      	lsls	r4, r2
 8000b86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8a:	0c23      	lsrs	r3, r4, #16
 8000b8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b90:	fa1f fc85 	uxth.w	ip, r5
 8000b94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x60>
 8000ba4:	18eb      	adds	r3, r5, r3
 8000ba6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000baa:	f080 811b 	bcs.w	8000de4 <__udivmoddi4+0x28c>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 8118 	bls.w	8000de4 <__udivmoddi4+0x28c>
 8000bb4:	3f02      	subs	r7, #2
 8000bb6:	442b      	add	r3, r5
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x8c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	f080 8107 	bcs.w	8000de8 <__udivmoddi4+0x290>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	f240 8104 	bls.w	8000de8 <__udivmoddi4+0x290>
 8000be0:	3802      	subs	r0, #2
 8000be2:	442c      	add	r4, r5
 8000be4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000be8:	eba4 040c 	sub.w	r4, r4, ip
 8000bec:	2700      	movs	r7, #0
 8000bee:	b11e      	cbz	r6, 8000bf8 <__udivmoddi4+0xa0>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xbe>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	f000 80eb 	beq.w	8000dde <__udivmoddi4+0x286>
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c0e:	4638      	mov	r0, r7
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f783 	clz	r7, r3
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d147      	bne.n	8000cae <__udivmoddi4+0x156>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd0>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80fa 	bhi.w	8000e1c <__udivmoddi4+0x2c4>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4698      	mov	r8, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa0>
 8000c36:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xe8>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 808f 	bne.w	8000d68 <__udivmoddi4+0x210>
 8000c4a:	1b49      	subs	r1, r1, r5
 8000c4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c50:	fa1f f885 	uxth.w	r8, r5
 8000c54:	2701      	movs	r7, #1
 8000c56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c64:	fb08 f10c 	mul.w	r1, r8, ip
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x124>
 8000c6c:	18eb      	adds	r3, r5, r3
 8000c6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x122>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	f200 80cd 	bhi.w	8000e14 <__udivmoddi4+0x2bc>
 8000c7a:	4684      	mov	ip, r0
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	b2a3      	uxth	r3, r4
 8000c80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c8c:	fb08 f800 	mul.w	r8, r8, r0
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x14c>
 8000c94:	192c      	adds	r4, r5, r4
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x14a>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f200 80b6 	bhi.w	8000e0e <__udivmoddi4+0x2b6>
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	eba4 0408 	sub.w	r4, r4, r8
 8000ca8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cac:	e79f      	b.n	8000bee <__udivmoddi4+0x96>
 8000cae:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb2:	40bb      	lsls	r3, r7
 8000cb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ccc:	4325      	orrs	r5, r4
 8000cce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd2:	0c2c      	lsrs	r4, r5, #16
 8000cd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cd8:	fa1f fa8e 	uxth.w	sl, lr
 8000cdc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cea:	fa00 f107 	lsl.w	r1, r0, r7
 8000cee:	d90b      	bls.n	8000d08 <__udivmoddi4+0x1b0>
 8000cf0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf8:	f080 8087 	bcs.w	8000e0a <__udivmoddi4+0x2b2>
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	f240 8084 	bls.w	8000e0a <__udivmoddi4+0x2b2>
 8000d02:	f1a9 0902 	sub.w	r9, r9, #2
 8000d06:	4473      	add	r3, lr
 8000d08:	1b1b      	subs	r3, r3, r4
 8000d0a:	b2ad      	uxth	r5, r5
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d1c:	45a2      	cmp	sl, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x1da>
 8000d20:	eb1e 0404 	adds.w	r4, lr, r4
 8000d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d28:	d26b      	bcs.n	8000e02 <__udivmoddi4+0x2aa>
 8000d2a:	45a2      	cmp	sl, r4
 8000d2c:	d969      	bls.n	8000e02 <__udivmoddi4+0x2aa>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4474      	add	r4, lr
 8000d32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d36:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3a:	eba4 040a 	sub.w	r4, r4, sl
 8000d3e:	454c      	cmp	r4, r9
 8000d40:	46c2      	mov	sl, r8
 8000d42:	464b      	mov	r3, r9
 8000d44:	d354      	bcc.n	8000df0 <__udivmoddi4+0x298>
 8000d46:	d051      	beq.n	8000dec <__udivmoddi4+0x294>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d069      	beq.n	8000e20 <__udivmoddi4+0x2c8>
 8000d4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d50:	eb64 0403 	sbc.w	r4, r4, r3
 8000d54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	40fc      	lsrs	r4, r7
 8000d5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d60:	e9c6 5400 	strd	r5, r4, [r6]
 8000d64:	2700      	movs	r7, #0
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000d68:	f1c2 0320 	rsb	r3, r2, #32
 8000d6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d70:	4095      	lsls	r5, r2
 8000d72:	fa01 f002 	lsl.w	r0, r1, r2
 8000d76:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7e:	4338      	orrs	r0, r7
 8000d80:	0c01      	lsrs	r1, r0, #16
 8000d82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d86:	fa1f f885 	uxth.w	r8, r5
 8000d8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb07 f308 	mul.w	r3, r7, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x256>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da4:	d22f      	bcs.n	8000e06 <__udivmoddi4+0x2ae>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d92d      	bls.n	8000e06 <__udivmoddi4+0x2ae>
 8000daa:	3f02      	subs	r7, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1acb      	subs	r3, r1, r3
 8000db0:	b281      	uxth	r1, r0
 8000db2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbe:	fb00 f308 	mul.w	r3, r0, r8
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x27e>
 8000dc6:	1869      	adds	r1, r5, r1
 8000dc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dcc:	d217      	bcs.n	8000dfe <__udivmoddi4+0x2a6>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d915      	bls.n	8000dfe <__udivmoddi4+0x2a6>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4429      	add	r1, r5
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ddc:	e73b      	b.n	8000c56 <__udivmoddi4+0xfe>
 8000dde:	4637      	mov	r7, r6
 8000de0:	4630      	mov	r0, r6
 8000de2:	e709      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000de4:	4607      	mov	r7, r0
 8000de6:	e6e7      	b.n	8000bb8 <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fb      	b.n	8000be4 <__udivmoddi4+0x8c>
 8000dec:	4541      	cmp	r1, r8
 8000dee:	d2ab      	bcs.n	8000d48 <__udivmoddi4+0x1f0>
 8000df0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df4:	eb69 020e 	sbc.w	r2, r9, lr
 8000df8:	3801      	subs	r0, #1
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	e7a4      	b.n	8000d48 <__udivmoddi4+0x1f0>
 8000dfe:	4660      	mov	r0, ip
 8000e00:	e7e9      	b.n	8000dd6 <__udivmoddi4+0x27e>
 8000e02:	4618      	mov	r0, r3
 8000e04:	e795      	b.n	8000d32 <__udivmoddi4+0x1da>
 8000e06:	4667      	mov	r7, ip
 8000e08:	e7d1      	b.n	8000dae <__udivmoddi4+0x256>
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	e77c      	b.n	8000d08 <__udivmoddi4+0x1b0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	442c      	add	r4, r5
 8000e12:	e747      	b.n	8000ca4 <__udivmoddi4+0x14c>
 8000e14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e18:	442b      	add	r3, r5
 8000e1a:	e72f      	b.n	8000c7c <__udivmoddi4+0x124>
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xda>
 8000e20:	4637      	mov	r7, r6
 8000e22:	e6e9      	b.n	8000bf8 <__udivmoddi4+0xa0>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0a4      	sub	sp, #144	; 0x90
 8000e2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2e:	f000 fbaa 	bl	8001586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 f89f 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 f929 	bl	800108c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000e3a:	f008 fedf 	bl	8009bfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8000e3e:	f006 f89b 	bl	8006f78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000e42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e46:	2224      	movs	r2, #36	; 0x24
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f009 fc4f 	bl	800a6ee <memset>
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <main+0x104>)
 8000e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e5a:	2318      	movs	r3, #24
 8000e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e64:	461a      	mov	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	4831      	ldr	r0, [pc, #196]	; (8000f30 <main+0x108>)
 8000e6a:	f006 f91f 	bl	80070ac <osThreadNew>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <main+0x10c>)
 8000e72:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_state_est */
  const osThreadAttr_t task_state_est_attributes = {
 8000e74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e78:	2224      	movs	r2, #36	; 0x24
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 fc36 	bl	800a6ee <memset>
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <main+0x110>)
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <main+0x114>)
 8000e88:	653b      	str	r3, [r7, #80]	; 0x50
 8000e8a:	235c      	movs	r3, #92	; 0x5c
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <main+0x118>)
 8000e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e98:	2308      	movs	r3, #8
 8000e9a:	663b      	str	r3, [r7, #96]	; 0x60
    .stack_size = sizeof(task_sfBuffer),
    .cb_mem = &task_sfControlBlock,
    .cb_size = sizeof(task_sfControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8000e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4827      	ldr	r0, [pc, #156]	; (8000f44 <main+0x11c>)
 8000ea6:	f006 f901 	bl	80070ac <osThreadNew>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <main+0x120>)
 8000eae:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_controller */
  const osThreadAttr_t task_controller_attributes = {
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	2224      	movs	r2, #36	; 0x24
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f009 fc18 	bl	800a6ee <memset>
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <main+0x124>)
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <main+0x128>)
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ec6:	235c      	movs	r3, #92	; 0x5c
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <main+0x12c>)
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    .stack_size = sizeof(task_controllerBuffer),
    .cb_mem = &task_controllerControlBlock,
    .cb_size = sizeof(task_controllerControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	461a      	mov	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	481d      	ldr	r0, [pc, #116]	; (8000f58 <main+0x130>)
 8000ee2:	f006 f8e3 	bl	80070ac <osThreadNew>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <main+0x134>)
 8000eea:	601a      	str	r2, [r3, #0]

  /* definition and creation of task_sens_read */
  const osThreadAttr_t task_sens_read_attributes = {
 8000eec:	463b      	mov	r3, r7
 8000eee:	2224      	movs	r2, #36	; 0x24
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f009 fbfb 	bl	800a6ee <memset>
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <main+0x138>)
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <main+0x13c>)
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	235c      	movs	r3, #92	; 0x5c
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <main+0x140>)
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	2308      	movs	r3, #8
 8000f10:	61bb      	str	r3, [r7, #24]
    .stack_size = sizeof(task_sensor_reaBuffer),
    .cb_mem = &task_sensor_reaControlBlock,
    .cb_size = sizeof(task_sensor_reaControlBlock),
    .priority = (osPriority_t) osPriorityLow,
  };
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8000f12:	463b      	mov	r3, r7
 8000f14:	461a      	mov	r2, r3
 8000f16:	2100      	movs	r1, #0
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <main+0x144>)
 8000f1a:	f006 f8c7 	bl	80070ac <osThreadNew>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <main+0x148>)
 8000f22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f24:	f006 f85c 	bl	8006fe0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x100>
 8000f2a:	bf00      	nop
 8000f2c:	0800b940 	.word	0x0800b940
 8000f30:	080010d5 	.word	0x080010d5
 8000f34:	20004b28 	.word	0x20004b28
 8000f38:	0800b94c 	.word	0x0800b94c
 8000f3c:	20005334 	.word	0x20005334
 8000f40:	20004b30 	.word	0x20004b30
 8000f44:	08001501 	.word	0x08001501
 8000f48:	20005330 	.word	0x20005330
 8000f4c:	0800b95c 	.word	0x0800b95c
 8000f50:	20005b90 	.word	0x20005b90
 8000f54:	20005c48 	.word	0x20005c48
 8000f58:	0800133d 	.word	0x0800133d
 8000f5c:	20006448 	.word	0x20006448
 8000f60:	0800b96c 	.word	0x0800b96c
 8000f64:	20005bec 	.word	0x20005bec
 8000f68:	20005390 	.word	0x20005390
 8000f6c:	080014cd 	.word	0x080014cd
 8000f70:	20004b2c 	.word	0x20004b2c

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0b4      	sub	sp, #208	; 0xd0
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f7e:	2230      	movs	r2, #48	; 0x30
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 fbb3 	bl	800a6ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2284      	movs	r2, #132	; 0x84
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f009 fba4 	bl	800a6ee <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <SystemClock_Config+0x110>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a36      	ldr	r2, [pc, #216]	; (8001084 <SystemClock_Config+0x110>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <SystemClock_Config+0x110>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <SystemClock_Config+0x114>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc6:	4a30      	ldr	r2, [pc, #192]	; (8001088 <SystemClock_Config+0x114>)
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <SystemClock_Config+0x114>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ffc:	23a8      	movs	r3, #168	; 0xa8
 8000ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001008:	2307      	movs	r3, #7
 800100a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 ff50 	bl	8002eb8 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800101e:	f000 f875 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001044:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001048:	2105      	movs	r1, #5
 800104a:	4618      	mov	r0, r3
 800104c:	f002 f9a4 	bl	8003398 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001056:	f000 f859 	bl	800110c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800105a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800105e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fba6 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001076:	f000 f849 	bl	800110c <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	37d0      	adds	r7, #208	; 0xd0
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_GPIO_Init+0x44>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <MX_GPIO_Init+0x44>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_GPIO_Init+0x44>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_GPIO_Init+0x44>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <MX_GPIO_Init+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_GPIO_Init+0x44>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80010dc:	f008 fd8e 	bl	8009bfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f006 f88d 	bl	8007200 <osDelay>
 80010e6:	e7fb      	b.n	80010e0 <StartDefaultTask+0xc>

080010e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010fa:	f000 fa51 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40010000 	.word	0x40010000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_MspInit+0x4c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_MspInit+0x4c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	210f      	movs	r1, #15
 8001156:	f06f 0001 	mvn.w	r0, #1
 800115a:	f000 fb1b 	bl	8001794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	2019      	movs	r0, #25
 8001182:	f000 fb07 	bl	8001794 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001186:	2019      	movs	r0, #25
 8001188:	f000 fb20 	bl	80017cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_InitTick+0xa0>)
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_InitTick+0xa0>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6453      	str	r3, [r2, #68]	; 0x44
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_InitTick+0xa0>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a4:	f107 0210 	add.w	r2, r7, #16
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fad2 	bl	8003758 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011b4:	f002 fabc 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 80011b8:	4603      	mov	r3, r0
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_InitTick+0xa4>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0c9b      	lsrs	r3, r3, #18
 80011c8:	3b01      	subs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_InitTick+0xa8>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_InitTick+0xac>)
 80011d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_InitTick+0xa8>)
 80011d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_InitTick+0xa8>)
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_InitTick+0xa8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_InitTick+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_InitTick+0xa8>)
 80011ee:	f002 fe9b 	bl	8003f28 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <HAL_InitTick+0xa8>)
 80011fa:	f002 fecb 	bl	8003f94 <HAL_TIM_Base_Start_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3730      	adds	r7, #48	; 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	431bde83 	.word	0x431bde83
 8001214:	2000644c 	.word	0x2000644c
 8001218:	40010000 	.word	0x40010000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001256:	f002 fec7 	bl	8003fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000644c 	.word	0x2000644c

08001264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <OTG_FS_IRQHandler+0x10>)
 800126a:	f000 fda1 	bl	8001db0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000796c 	.word	0x2000796c

08001278 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x50>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x16>
		heap_end = &end;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <_sbrk+0x50>)
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <_sbrk+0x54>)
 800128c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <_sbrk+0x50>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <_sbrk+0x50>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	466a      	mov	r2, sp
 800129e:	4293      	cmp	r3, r2
 80012a0:	d907      	bls.n	80012b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012a2:	f009 f9df 	bl	800a664 <__errno>
 80012a6:	4602      	mov	r2, r0
 80012a8:	230c      	movs	r3, #12
 80012aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	e006      	b.n	80012c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <_sbrk+0x50>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <_sbrk+0x50>)
 80012bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000210 	.word	0x20000210
 80012cc:	20007d78 	.word	0x20007d78

080012d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <SystemInit+0x5c>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <SystemInit+0x5c>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <SystemInit+0x60>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <SystemInit+0x60>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <SystemInit+0x60>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <SystemInit+0x60>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	490d      	ldr	r1, [pc, #52]	; (8001330 <SystemInit+0x60>)
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <SystemInit+0x64>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <SystemInit+0x60>)
 8001304:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <SystemInit+0x68>)
 8001306:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <SystemInit+0x60>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <SystemInit+0x60>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x60>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SystemInit+0x5c>)
 800131c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001320:	609a      	str	r2, [r3, #8]
#endif
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	40023800 	.word	0x40023800
 8001334:	fef6ffff 	.word	0xfef6ffff
 8001338:	24003010 	.word	0x24003010

0800133c <vTaskController>:


void CalcPolynomial(int32_t ref_height, int32_t *ref_vel, int32_t gains[], int32_t coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 800133c:	b580      	push	{r7, lr}
 800133e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001342:	af00      	add	r7, sp, #0
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	int32_t coeff[4][POLY_DEG] = { 0 };
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4618      	mov	r0, r3
 800134e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f009 f9ca 	bl	800a6ee <memset>

	/* State Estimation Values */
	int32_t sf_velocity = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	int32_t sf_height = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	/* Gain Values and Trajectory Values to increase speed */
	int32_t gains[3] = { 0 };
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	461a      	mov	r2, r3
 800136c:	2300      	movs	r3, #0
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	6053      	str	r3, [r2, #4]
 8001372:	6093      	str	r3, [r2, #8]
	int32_t ref_vel = 0;
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
	int32_t vel_error = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	int32_t control_input = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001388:	f005 fe5e 	bl	8007048 <osKernelGetTickCount>
 800138c:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8001390:	f005 fe82 	bl	8007098 <osKernelGetTickFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <vTaskController+0xa4>)
 8001398:	fba3 2302 	umull	r2, r3, r3, r2
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80013a2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80013a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013aa:	4413      	add	r3, r2
 80013ac:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	f107 0108 	add.w	r1, r7, #8
 80013bc:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80013c0:	f000 f810 	bl	80013e4 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Sleep */
		osDelayUntil(tick_count);
 80013d4:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80013d8:	f005 ff40 	bl	800725c <osDelayUntil>
		tick_count += tick_update;
 80013dc:	e7e1      	b.n	80013a2 <vTaskController+0x66>
 80013de:	bf00      	nop
 80013e0:	10624dd3 	.word	0x10624dd3

080013e4 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(int32_t ref_height, int32_t *ref_vel, int32_t gains[], int32_t coefficients[][POLY_DEG]){
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e05f      	b.n	80014bc <CalcPolynomial+0xd8>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff f859 	bl	80004b4 <__aeabi_i2d>
 8001402:	4604      	mov	r4, r0
 8001404:	460d      	mov	r5, r1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f1c3 031d 	rsb	r3, r3, #29
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f851 	bl	80004b4 <__aeabi_i2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	ec43 2b11 	vmov	d1, r2, r3
 800141a:	ec45 4b10 	vmov	d0, r4, r5
 800141e:	f009 fa29 	bl	800a874 <pow>
 8001422:	ec54 3b10 	vmov	r3, r4, d0
 8001426:	4618      	mov	r0, r3
 8001428:	4621      	mov	r1, r4
 800142a:	f7ff fb5d 	bl	8000ae8 <__aeabi_d2uiz>
 800142e:	4603      	mov	r3, r0
 8001430:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	461a      	mov	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	fb03 f302 	mul.w	r3, r3, r2
 8001448:	440b      	add	r3, r1
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	601a      	str	r2, [r3, #0]
		gains[1] += coefficients[1][i] * x_placeholder;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3304      	adds	r3, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3378      	adds	r3, #120	; 0x78
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001462:	461a      	mov	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	fb03 f302 	mul.w	r3, r3, r2
 800146a:	18ca      	adds	r2, r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3304      	adds	r3, #4
 8001470:	601a      	str	r2, [r3, #0]
		gains[2] += coefficients[2][i] * x_placeholder;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3308      	adds	r3, #8
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	33f0      	adds	r3, #240	; 0xf0
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	461a      	mov	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fb03 f302 	mul.w	r3, r3, r2
 800148c:	18ca      	adds	r2, r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3308      	adds	r3, #8
 8001492:	601a      	str	r2, [r3, #0]
		*ref_vel += coefficients[3][i] * x_placeholder;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	461a      	mov	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	fb03 f302 	mul.w	r3, r3, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	461a      	mov	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < POLY_DEG; ++i){
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b1d      	cmp	r3, #29
 80014c0:	dd9c      	ble.n	80013fc <CalcPolynomial+0x18>
	}

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014cc <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80014d4:	f005 fdb8 	bl	8007048 <osKernelGetTickCount>
 80014d8:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 80014da:	f005 fddd 	bl	8007098 <osKernelGetTickFreq>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <vTaskSensRead+0x30>)
 80014e2:	fba3 2302 	umull	r2, r3, r3, r2
 80014e6:	099b      	lsrs	r3, r3, #6
 80014e8:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f005 feb2 	bl	800725c <osDelayUntil>
		tick_count += tick_update;
 80014f8:	e7f7      	b.n	80014ea <vTaskSensRead+0x1e>
 80014fa:	bf00      	nop
 80014fc:	10624dd3 	.word	0x10624dd3

08001500 <vTaskStateEst>:
 *      Author: Jonas
 */

#include "tasks/task_state_est.h"

void vTaskStateEst(void *argument) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001508:	f005 fd9e 	bl	8007048 <osKernelGetTickCount>
 800150c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 800150e:	f005 fdc3 	bl	8007098 <osKernelGetTickFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <vTaskStateEst+0x30>)
 8001516:	fba3 2302 	umull	r2, r3, r3, r2
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	60bb      	str	r3, [r7, #8]
	for (;;) {
		tick_count += tick_update;
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
		/* TODO: Actual Stuff */

		osDelayUntil(tick_count);
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f005 fe98 	bl	800725c <osDelayUntil>
		tick_count += tick_update;
 800152c:	e7f7      	b.n	800151e <vTaskStateEst+0x1e>
 800152e:	bf00      	nop
 8001530:	10624dd3 	.word	0x10624dd3

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800156c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001538:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800153a:	e003      	b.n	8001544 <LoopCopyDataInit>

0800153c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800153e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001540:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001542:	3104      	adds	r1, #4

08001544 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001548:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800154a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800154c:	d3f6      	bcc.n	800153c <CopyDataInit>
  ldr  r2, =_sbss
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001550:	e002      	b.n	8001558 <LoopFillZerobss>

08001552 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001552:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001554:	f842 3b04 	str.w	r3, [r2], #4

08001558 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800155a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800155c:	d3f9      	bcc.n	8001552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155e:	f7ff feb7 	bl	80012d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001562:	f009 f885 	bl	800a670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fc5f 	bl	8000e28 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001570:	0800ba48 	.word	0x0800ba48
  ldr  r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001578:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 800157c:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001580:	20007d74 	.word	0x20007d74

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>

08001586 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 f8f7 	bl	800177e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fdeb 	bl	800116c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fdc1 	bl	800111c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000004 	.word	0x20000004
 80015c4:	2000648c 	.word	0x2000648c

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000648c 	.word	0x2000648c

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_Delay+0x40>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffde 	bl	80015c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000004 	.word	0x20000004

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <__NVIC_SetPriorityGrouping+0x40>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	4313      	orrs	r3, r2
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x40>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	05fa0000 	.word	0x05fa0000

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff4c 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff61 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffb1 	bl	8001718 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff80 	bl	80016c4 <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff54 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e175      	b.n	8001af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8164 	bne.w	8001aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x4e>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b12      	cmp	r3, #18
 8001834:	d123      	bne.n	800187e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	69b9      	ldr	r1, [r7, #24]
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0203 	and.w	r2, r3, #3
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d00b      	beq.n	80018d2 <HAL_GPIO_Init+0xea>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c6:	2b11      	cmp	r3, #17
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80be 	beq.w	8001aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a64      	ldr	r2, [pc, #400]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b62      	ldr	r3, [pc, #392]	; (8001b08 <HAL_GPIO_Init+0x320>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800198a:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_GPIO_Init+0x324>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_GPIO_Init+0x328>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d037      	beq.n	8001a26 <HAL_GPIO_Init+0x23e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x32c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d031      	beq.n	8001a22 <HAL_GPIO_Init+0x23a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a55      	ldr	r2, [pc, #340]	; (8001b18 <HAL_GPIO_Init+0x330>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x236>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a54      	ldr	r2, [pc, #336]	; (8001b1c <HAL_GPIO_Init+0x334>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d025      	beq.n	8001a1a <HAL_GPIO_Init+0x232>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_GPIO_Init+0x338>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_GPIO_Init+0x22e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_GPIO_Init+0x33c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x22a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x340>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a50      	ldr	r2, [pc, #320]	; (8001b2c <HAL_GPIO_Init+0x344>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <HAL_GPIO_Init+0x348>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <HAL_GPIO_Init+0x34c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019fe:	2309      	movs	r3, #9
 8001a00:	e012      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a02:	230a      	movs	r3, #10
 8001a04:	e010      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e00e      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00c      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a26:	2300      	movs	r3, #0
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a38:	4934      	ldr	r1, [pc, #208]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a94:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_GPIO_Init+0x350>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f ae86 	bls.w	8001808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	3724      	adds	r7, #36	; 0x24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40021c00 	.word	0x40021c00
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40022400 	.word	0x40022400
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	b08f      	sub	sp, #60	; 0x3c
 8001b40:	af0a      	add	r7, sp, #40	; 0x28
 8001b42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e10a      	b.n	8001d64 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f008 fa28 	bl	8009fb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fd48 	bl	800460a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	687e      	ldr	r6, [r7, #4]
 8001b82:	466d      	mov	r5, sp
 8001b84:	f106 0410 	add.w	r4, r6, #16
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b98:	1d33      	adds	r3, r6, #4
 8001b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f002 fc29 	bl	80043f4 <USB_CoreInit>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d7      	b.n	8001d64 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fd36 	bl	800462c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e04a      	b.n	8001c5c <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	333d      	adds	r3, #61	; 0x3d
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	333c      	adds	r3, #60	; 0x3c
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	b298      	uxth	r0, r3
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3342      	adds	r3, #66	; 0x42
 8001c02:	4602      	mov	r2, r0
 8001c04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	333f      	adds	r3, #63	; 0x3f
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3344      	adds	r3, #68	; 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3348      	adds	r3, #72	; 0x48
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3350      	adds	r3, #80	; 0x50
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3af      	bcc.n	8001bc6 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e044      	b.n	8001cf6 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3b5      	bcc.n	8001c6c <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	687e      	ldr	r6, [r7, #4]
 8001d08:	466d      	mov	r5, sp
 8001d0a:	f106 0410 	add.w	r4, r6, #16
 8001d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d1e:	1d33      	adds	r3, r6, #4
 8001d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f002 fcac 	bl	8004680 <USB_DevInit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e014      	b.n	8001d64 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f001 f88c 	bl	8002e70 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fc6b 	bl	8005638 <USB_DevDisconnect>

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_PCD_Start+0x16>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e012      	b.n	8001da8 <HAL_PCD_Start+0x3c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fc3a 	bl	8005608 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f002 fc25 	bl	80045e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b08d      	sub	sp, #52	; 0x34
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fcdf 	bl	800578e <USB_GetMode>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 83bd 	bne.w	8002552 <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fc43 	bl	8005668 <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 83b3 	beq.w	8002550 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fc3a 	bl	8005668 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f002 0202 	and.w	r2, r2, #2
 8001e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fc28 	bl	8005668 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e22:	d17b      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fc2e 	bl	800568e <USB_ReadDevAllOutEpInterrupt>
 8001e32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e34:	e06f      	b.n	8001f16 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d064      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fc53 	bl	80056f6 <USB_ReadDevOutEPInterrupt>
 8001e50:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00c      	beq.n	8001e76 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fe3d 	bl	8002af0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00c      	beq.n	8001e9a <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 ff3c 	bl	8002d00 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e94:	461a      	mov	r2, r3
 8001e96:	2308      	movs	r3, #8
 8001e98:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d015      	beq.n	8001eec <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d108      	bne.n	8001eda <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	f003 fc9f 	bl	8005818 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2320      	movs	r3, #32
 8001eea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f02:	461a      	mov	r2, r3
 8001f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d18c      	bne.n	8001e36 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fba1 	bl	8005668 <USB_ReadInterrupts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f30:	f040 80c4 	bne.w	80020bc <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fbc2 	bl	80056c2 <USB_ReadDevAllInEpInterrupt>
 8001f3e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f44:	e0b6      	b.n	80020b4 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80ab 	beq.w	80020a8 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fbe8 	bl	8005732 <USB_ReadDevInEPInterrupt>
 8001f62:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d05b      	beq.n	8002026 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	2201      	movs	r2, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69f9      	ldr	r1, [r7, #28]
 8001f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f8e:	4013      	ands	r3, r2
 8001f90:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d11b      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3348      	adds	r3, #72	; 0x48
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4403      	add	r3, r0
 8001fcc:	3344      	adds	r3, #68	; 0x44
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4419      	add	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4403      	add	r3, r0
 8001fe0:	3348      	adds	r3, #72	; 0x48
 8001fe2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f008 f867 	bl	800a0be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d116      	bne.n	8002026 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d113      	bne.n	8002026 <HAL_PCD_IRQHandler+0x276>
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3350      	adds	r3, #80	; 0x50
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d108      	bne.n	8002026 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800201e:	461a      	mov	r2, r3
 8002020:	2101      	movs	r1, #1
 8002022:	f003 fbf9 	bl	8005818 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	4413      	add	r3, r2
 8002038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203c:	461a      	mov	r2, r3
 800203e:	2308      	movs	r3, #8
 8002040:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002058:	461a      	mov	r2, r3
 800205a:	2310      	movs	r3, #16
 800205c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002074:	461a      	mov	r2, r3
 8002076:	2340      	movs	r3, #64	; 0x40
 8002078:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002090:	461a      	mov	r2, r3
 8002092:	2302      	movs	r3, #2
 8002094:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fc96 	bl	80029d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	3301      	adds	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f47f af45 	bne.w	8001f46 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fad1 	bl	8005668 <USB_ReadInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d0:	d122      	bne.n	8002118 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020f8:	2100      	movs	r1, #0
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f008 fa32 	bl	800a564 <HAL_PCDEx_LPM_Callback>
 8002100:	e002      	b.n	8002108 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f008 f852 	bl	800a1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 faa3 	bl	8005668 <USB_ReadInterrupts>
 8002122:	4603      	mov	r3, r0
 8002124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212c:	d112      	bne.n	8002154 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f008 f80e 	bl	800a160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002152:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fa85 	bl	8005668 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002168:	d121      	bne.n	80021ae <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002178:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d111      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	f003 020f 	and.w	r2, r3, #15
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800219e:	2101      	movs	r1, #1
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f008 f9df 	bl	800a564 <HAL_PCDEx_LPM_Callback>
 80021a6:	e002      	b.n	80021ae <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f007 ffd9 	bl	800a160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fa58 	bl	8005668 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	f040 80a7 	bne.w	8002314 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2110      	movs	r1, #16
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fbc9 	bl	8004978 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ea:	e036      	b.n	800225a <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f8:	461a      	mov	r2, r3
 80021fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002210:	0151      	lsls	r1, r2, #5
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	440a      	add	r2, r1
 8002216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800221a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800221e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222c:	461a      	mov	r2, r3
 800222e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002232:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002244:	0151      	lsls	r1, r2, #5
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	440a      	add	r2, r1
 800224a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800224e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002252:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	3301      	adds	r3, #1
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002260:	429a      	cmp	r2, r3
 8002262:	d3c3      	bcc.n	80021ec <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002272:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002276:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	2b00      	cmp	r3, #0
 800227e:	d016      	beq.n	80022ae <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002290:	f043 030b 	orr.w	r3, r3, #11
 8002294:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022a6:	f043 030b 	orr.w	r3, r3, #11
 80022aa:	6453      	str	r3, [r2, #68]	; 0x44
 80022ac:	e015      	b.n	80022da <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	4619      	mov	r1, r3
 80022be:	f242 032b 	movw	r3, #8235	; 0x202b
 80022c2:	4313      	orrs	r3, r2
 80022c4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d4:	f043 030b 	orr.w	r3, r3, #11
 80022d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022fe:	461a      	mov	r2, r3
 8002300:	f003 fa8a 	bl	8005818 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 f9a5 	bl	8005668 <USB_ReadInterrupts>
 800231e:	4603      	mov	r3, r0
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002328:	d12a      	bne.n	8002380 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fa3c 	bl	80057ac <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f002 fb7e 	bl	8004a3a <USB_GetDevSpeed>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	e002      	b.n	8002352 <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2203      	movs	r2, #3
 8002350:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681c      	ldr	r4, [r3, #0]
 8002356:	f001 f9df 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 800235a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	4620      	mov	r0, r4
 8002366:	f002 f89d 	bl	80044a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f007 fecf 	bl	800a10e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800237e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f96f 	bl	8005668 <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d161      	bne.n	8002458 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0210 	bic.w	r2, r2, #16
 80023a2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 020f 	and.w	r2, r3, #15
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	3304      	adds	r3, #4
 80023c2:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	0c5b      	lsrs	r3, r3, #17
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d124      	bne.n	800241a <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d035      	beq.n	8002448 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	6a38      	ldr	r0, [r7, #32]
 80023f0:	f002 ffe7 	bl	80053c2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002400:	441a      	add	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	619a      	str	r2, [r3, #24]
 8002418:	e016      	b.n	8002448 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	0c5b      	lsrs	r3, r3, #17
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	2b06      	cmp	r3, #6
 8002424:	d110      	bne.n	8002448 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800242c:	2208      	movs	r2, #8
 800242e:	4619      	mov	r1, r3
 8002430:	6a38      	ldr	r0, [r7, #32]
 8002432:	f002 ffc6 	bl	80053c2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0210 	orr.w	r2, r2, #16
 8002456:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f003 f903 	bl	8005668 <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d10a      	bne.n	8002482 <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f007 fe40 	bl	800a0f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695a      	ldr	r2, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f002 0208 	and.w	r2, r2, #8
 8002480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 f8ee 	bl	8005668 <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002496:	d10d      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f007 fea4 	bl	800a1ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 f8d5 	bl	8005668 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c8:	d10d      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f007 fe79 	bl	800a1c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f8bc 	bl	8005668 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d10a      	bne.n	8002512 <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f007 fe87 	bl	800a210 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 f8a6 	bl	8005668 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d115      	bne.n	8002552 <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f007 fe77 	bl	800a22c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e000      	b.n	8002552 <HAL_PCD_IRQHandler+0x7a2>
      return;
 8002550:	bf00      	nop
    }
  }
}
 8002552:	3734      	adds	r7, #52	; 0x34
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}

08002558 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_PCD_SetAddress+0x1a>
 800256e:	2302      	movs	r3, #2
 8002570:	e013      	b.n	800259a <HAL_PCD_SetAddress+0x42>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f003 f816 	bl	80055bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	4608      	mov	r0, r1
 80025ac:	4611      	mov	r1, r2
 80025ae:	461a      	mov	r2, r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	70fb      	strb	r3, [r7, #3]
 80025b4:	460b      	mov	r3, r1
 80025b6:	803b      	strh	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da0f      	bge.n	80025e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 020f 	and.w	r2, r3, #15
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	3338      	adds	r3, #56	; 0x38
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	705a      	strb	r2, [r3, #1]
 80025e6:	e00f      	b.n	8002608 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 020f 	and.w	r2, r3, #15
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	3304      	adds	r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002614:	883a      	ldrh	r2, [r7, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	78ba      	ldrb	r2, [r7, #2]
 800261e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002632:	78bb      	ldrb	r3, [r7, #2]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d102      	bne.n	800263e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_PCD_EP_Open+0xaa>
 8002648:	2302      	movs	r3, #2
 800264a:	e00e      	b.n	800266a <HAL_PCD_EP_Open+0xc8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68f9      	ldr	r1, [r7, #12]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fa12 	bl	8004a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002668:	7afb      	ldrb	r3, [r7, #11]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800267e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da0f      	bge.n	80026a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	3338      	adds	r3, #56	; 0x38
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	705a      	strb	r2, [r3, #1]
 80026a4:	e00f      	b.n	80026c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_PCD_EP_Close+0x6e>
 80026dc:	2302      	movs	r3, #2
 80026de:	e00e      	b.n	80026fe <HAL_PCD_EP_Close+0x8c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68f9      	ldr	r1, [r7, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fa50 	bl	8004b94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	460b      	mov	r3, r1
 8002714:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	b2da      	uxtb	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d102      	bne.n	8002762 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6979      	ldr	r1, [r7, #20]
 800277a:	f002 fca5 	bl	80050c8 <USB_EP0StartXfer>
 800277e:	e008      	b.n	8002792 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6979      	ldr	r1, [r7, #20]
 800278e:	f002 fa85 	bl	8004c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 020f 	and.w	r2, r3, #15
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	460b      	mov	r3, r1
 80027da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	3338      	adds	r3, #56	; 0x38
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2201      	movs	r2, #1
 800280a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	6979      	ldr	r1, [r7, #20]
 800283e:	f002 fc43 	bl	80050c8 <USB_EP0StartXfer>
 8002842:	e008      	b.n	8002856 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	f002 fa23 	bl	8004c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d901      	bls.n	800287e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e050      	b.n	8002920 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800287e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	da0f      	bge.n	80028a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3338      	adds	r3, #56	; 0x38
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
 80028a4:	e00d      	b.n	80028c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_PCD_EP_SetStall+0x82>
 80028de:	2302      	movs	r3, #2
 80028e0:	e01e      	b.n	8002920 <HAL_PCD_EP_SetStall+0xc0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fd8f 	bl	8005414 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	b2d9      	uxtb	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002910:	461a      	mov	r2, r3
 8002912:	f002 ff81 	bl	8005818 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	f003 020f 	and.w	r2, r3, #15
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d901      	bls.n	8002946 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e042      	b.n	80029cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	da0f      	bge.n	800296e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
 800296c:	e00f      	b.n	800298e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_PCD_EP_ClrStall+0x86>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e00e      	b.n	80029cc <HAL_PCD_EP_ClrStall+0xa4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fd97 	bl	80054f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3338      	adds	r3, #56	; 0x38
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d901      	bls.n	8002a0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e06c      	b.n	8002ae6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d902      	bls.n	8002a28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3303      	adds	r3, #3
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a30:	e02b      	b.n	8002a8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d902      	bls.n	8002a4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3303      	adds	r3, #3
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f002 fc73 	bl	8005358 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	441a      	add	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d809      	bhi.n	8002ab4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d203      	bcs.n	8002ab4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1be      	bne.n	8002a32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d811      	bhi.n	8002ae4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	6939      	ldr	r1, [r7, #16]
 8002adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	333c      	adds	r3, #60	; 0x3c
 8002b08:	3304      	adds	r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 80b3 	bne.w	8002c8e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d028      	beq.n	8002b84 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a70      	ldr	r2, [pc, #448]	; (8002cf8 <PCD_EP_OutXfrComplete_int+0x208>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d90e      	bls.n	8002b58 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b56:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f007 fa83 	bl	800a064 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	f002 fe54 	bl	8005818 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2308      	movs	r3, #8
 8002b80:	6093      	str	r3, [r2, #8]
 8002b82:	e0b3      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	e0a4      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 809f 	bne.w	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	; (8002cf8 <PCD_EP_OutXfrComplete_int+0x208>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d90f      	bls.n	8002bd6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd2:	6093      	str	r3, [r2, #8]
 8002bd4:	e08a      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002be8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	0159      	lsls	r1, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bfc:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4403      	add	r3, r0
 8002c0c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c10:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4403      	add	r3, r0
 8002c34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4419      	add	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4403      	add	r3, r0
 8002c4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c4e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f007 fa16 	bl	800a088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d144      	bne.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d138      	bne.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c84:	461a      	mov	r2, r3
 8002c86:	2101      	movs	r1, #1
 8002c88:	f002 fdc6 	bl	8005818 <USB_EP0_OutStart>
 8002c8c:	e02e      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <PCD_EP_OutXfrComplete_int+0x20c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d124      	bne.n	8002ce0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cac:	461a      	mov	r2, r3
 8002cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	e01a      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2320      	movs	r3, #32
 8002cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f007 f9d5 	bl	800a088 <HAL_PCD_DataOutStageCallback>
 8002cde:	e005      	b.n	8002cec <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f007 f9ce 	bl	800a088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	4f54300a 	.word	0x4f54300a
 8002cfc:	4f54310a 	.word	0x4f54310a

08002d00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	333c      	adds	r3, #60	; 0x3c
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d113      	bne.n	8002d5e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d922      	bls.n	8002d84 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01d      	beq.n	8002d84 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5a:	6093      	str	r3, [r2, #8]
 8002d5c:	e012      	b.n	8002d84 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <PCD_EP_OutSetupPacket_int+0xbc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10e      	bne.n	8002d84 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f007 f96d 	bl	800a064 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d90c      	bls.n	8002dac <PCD_EP_OutSetupPacket_int+0xac>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d108      	bne.n	8002dac <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002da4:	461a      	mov	r2, r3
 8002da6:	2101      	movs	r1, #1
 8002da8:	f002 fd36 	bl	8005818 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	4f54300a 	.word	0x4f54300a
 8002dbc:	4f54310a 	.word	0x4f54310a

08002dc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dde:	883b      	ldrh	r3, [r7, #0]
 8002de0:	0419      	lsls	r1, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
 8002dec:	e028      	b.n	8002e40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4413      	add	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e00d      	b.n	8002e1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3340      	adds	r3, #64	; 0x40
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4413      	add	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d3ec      	bcc.n	8002e02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e28:	883b      	ldrh	r3, [r7, #0]
 8002e2a:	0418      	lsls	r0, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4302      	orrs	r2, r0
 8002e38:	3340      	adds	r3, #64	; 0x40
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	10000003 	.word	0x10000003

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e25c      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8087 	beq.w	8002fea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002edc:	4b96      	ldr	r3, [pc, #600]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d00c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee8:	4b93      	ldr	r3, [pc, #588]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d112      	bne.n	8002f1a <HAL_RCC_OscConfig+0x62>
 8002ef4:	4b90      	ldr	r3, [pc, #576]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f00:	d10b      	bne.n	8002f1a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f02:	4b8d      	ldr	r3, [pc, #564]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d06c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x130>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d168      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e236      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x7a>
 8002f24:	4b84      	ldr	r3, [pc, #528]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a83      	ldr	r2, [pc, #524]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	e02e      	b.n	8002f90 <HAL_RCC_OscConfig+0xd8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x9c>
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7b      	ldr	r2, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xd8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a75      	ldr	r2, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a72      	ldr	r2, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xd8>
 8002f78:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6e      	ldr	r2, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6b      	ldr	r2, [pc, #428]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb16 	bl	80015c8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fb12 	bl	80015c8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1ea      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xe8>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fb02 	bl	80015c8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fafe 	bl	80015c8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1d6      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x110>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d069      	beq.n	80030ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff6:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x190>
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x17a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1aa      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	493d      	ldr	r1, [pc, #244]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e040      	b.n	80030ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d023      	beq.n	8003098 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a38      	ldr	r2, [pc, #224]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fab4 	bl	80015c8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003064:	f7fe fab0 	bl	80015c8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e188      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b30      	ldr	r3, [pc, #192]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4929      	ldr	r1, [pc, #164]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
 8003096:	e018      	b.n	80030ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fa90 	bl	80015c8 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ac:	f7fe fa8c 	bl	80015c8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e164      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d038      	beq.n	8003148 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	4a15      	ldr	r2, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fe fa6d 	bl	80015c8 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe fa69 	bl	80015c8 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e141      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x23a>
 8003110:	e01a      	b.n	8003148 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_RCC_OscConfig+0x280>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe fa53 	bl	80015c8 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe fa4f 	bl	80015c8 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d903      	bls.n	800313c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e127      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
 8003138:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b94      	ldr	r3, [pc, #592]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ee      	bne.n	8003126 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a4 	beq.w	800329e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b8e      	ldr	r3, [pc, #568]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b8b      	ldr	r3, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a8a      	ldr	r2, [pc, #552]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b88      	ldr	r3, [pc, #544]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d118      	bne.n	80031bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800318a:	4b82      	ldr	r3, [pc, #520]	; (8003394 <HAL_RCC_OscConfig+0x4dc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a81      	ldr	r2, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x4dc>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fe fa17 	bl	80015c8 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fe fa13 	bl	80015c8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	; 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0eb      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b0:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCC_OscConfig+0x4dc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x31a>
 80031c4:	4b72      	ldr	r3, [pc, #456]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a71      	ldr	r2, [pc, #452]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	e02d      	b.n	800322e <HAL_RCC_OscConfig+0x376>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x33c>
 80031da:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a6c      	ldr	r2, [pc, #432]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a69      	ldr	r2, [pc, #420]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
 80031f2:	e01c      	b.n	800322e <HAL_RCC_OscConfig+0x376>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x35e>
 80031fc:	4b64      	ldr	r3, [pc, #400]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a63      	ldr	r2, [pc, #396]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b61      	ldr	r3, [pc, #388]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a60      	ldr	r2, [pc, #384]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x376>
 8003216:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a5d      	ldr	r2, [pc, #372]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b5b      	ldr	r3, [pc, #364]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a5a      	ldr	r2, [pc, #360]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7fe f9c7 	bl	80015c8 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe f9c3 	bl	80015c8 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e099      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b4e      	ldr	r3, [pc, #312]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x386>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe f9b1 	bl	80015c8 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe f9ad 	bl	80015c8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e083      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b43      	ldr	r3, [pc, #268]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d06f      	beq.n	8003386 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d067      	beq.n	8003382 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d149      	bne.n	800334e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe f97f 	bl	80015c8 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fe f97b 	bl	80015c8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e053      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	019b      	lsls	r3, r3, #6
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	3b01      	subs	r3, #1
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	4313      	orrs	r3, r2
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003318:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe f94f 	bl	80015c8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe f94b 	bl	80015c8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e023      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x476>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe f935 	bl	80015c8 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe f931 	bl	80015c8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e009      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_OscConfig+0x4d8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x4aa>
 8003380:	e001      	b.n	8003386 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0ce      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d910      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 020f 	bic.w	r2, r3, #15
 80033c6:	4964      	ldr	r1, [pc, #400]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b6      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b52      	ldr	r3, [pc, #328]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a51      	ldr	r2, [pc, #324]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494c      	ldr	r1, [pc, #304]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d040      	beq.n	80034bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d115      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07d      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e071      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3c      	ldr	r3, [pc, #240]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e069      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348c:	f7fe f89c 	bl	80015c8 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fe f898 	bl	80015c8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e051      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d210      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	4921      	ldr	r1, [pc, #132]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e030      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4915      	ldr	r1, [pc, #84]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490d      	ldr	r1, [pc, #52]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f81d 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	fa21 f303 	lsr.w	r3, r1, r3
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_RCC_ClockConfig+0x1cc>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003546:	2000      	movs	r0, #0
 8003548:	f7fd fe10 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	0800b9dc 	.word	0x0800b9dc
 8003564:	20000000 	.word	0x20000000

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	2300      	movs	r3, #0
 8003578:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d007      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x32>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d008      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x38>
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 80b4 	bne.w	80036fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003594:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003596:	60bb      	str	r3, [r7, #8]
       break;
 8003598:	e0b3      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359a:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800359c:	60bb      	str	r3, [r7, #8]
      break;
 800359e:	e0b0      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035aa:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04a      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b6:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	f04f 0400 	mov.w	r4, #0
 80035c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	ea03 0501 	and.w	r5, r3, r1
 80035cc:	ea04 0602 	and.w	r6, r4, r2
 80035d0:	4629      	mov	r1, r5
 80035d2:	4632      	mov	r2, r6
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	f04f 0400 	mov.w	r4, #0
 80035dc:	0154      	lsls	r4, r2, #5
 80035de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035e2:	014b      	lsls	r3, r1, #5
 80035e4:	4619      	mov	r1, r3
 80035e6:	4622      	mov	r2, r4
 80035e8:	1b49      	subs	r1, r1, r5
 80035ea:	eb62 0206 	sbc.w	r2, r2, r6
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	f04f 0400 	mov.w	r4, #0
 80035f6:	0194      	lsls	r4, r2, #6
 80035f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035fc:	018b      	lsls	r3, r1, #6
 80035fe:	1a5b      	subs	r3, r3, r1
 8003600:	eb64 0402 	sbc.w	r4, r4, r2
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	00e2      	lsls	r2, r4, #3
 800360e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003612:	00d9      	lsls	r1, r3, #3
 8003614:	460b      	mov	r3, r1
 8003616:	4614      	mov	r4, r2
 8003618:	195b      	adds	r3, r3, r5
 800361a:	eb44 0406 	adc.w	r4, r4, r6
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	0262      	lsls	r2, r4, #9
 8003628:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800362c:	0259      	lsls	r1, r3, #9
 800362e:	460b      	mov	r3, r1
 8003630:	4614      	mov	r4, r2
 8003632:	4618      	mov	r0, r3
 8003634:	4621      	mov	r1, r4
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f04f 0400 	mov.w	r4, #0
 800363c:	461a      	mov	r2, r3
 800363e:	4623      	mov	r3, r4
 8003640:	f7fd fa72 	bl	8000b28 <__aeabi_uldivmod>
 8003644:	4603      	mov	r3, r0
 8003646:	460c      	mov	r4, r1
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e049      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	f240 11ff 	movw	r1, #511	; 0x1ff
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	ea03 0501 	and.w	r5, r3, r1
 8003662:	ea04 0602 	and.w	r6, r4, r2
 8003666:	4629      	mov	r1, r5
 8003668:	4632      	mov	r2, r6
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	f04f 0400 	mov.w	r4, #0
 8003672:	0154      	lsls	r4, r2, #5
 8003674:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003678:	014b      	lsls	r3, r1, #5
 800367a:	4619      	mov	r1, r3
 800367c:	4622      	mov	r2, r4
 800367e:	1b49      	subs	r1, r1, r5
 8003680:	eb62 0206 	sbc.w	r2, r2, r6
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	0194      	lsls	r4, r2, #6
 800368e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003692:	018b      	lsls	r3, r1, #6
 8003694:	1a5b      	subs	r3, r3, r1
 8003696:	eb64 0402 	sbc.w	r4, r4, r2
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	00e2      	lsls	r2, r4, #3
 80036a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036a8:	00d9      	lsls	r1, r3, #3
 80036aa:	460b      	mov	r3, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	195b      	adds	r3, r3, r5
 80036b0:	eb44 0406 	adc.w	r4, r4, r6
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	02a2      	lsls	r2, r4, #10
 80036be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036c2:	0299      	lsls	r1, r3, #10
 80036c4:	460b      	mov	r3, r1
 80036c6:	4614      	mov	r4, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	4621      	mov	r1, r4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f04f 0400 	mov.w	r4, #0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4623      	mov	r3, r4
 80036d6:	f7fd fa27 	bl	8000b28 <__aeabi_uldivmod>
 80036da:	4603      	mov	r3, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	3301      	adds	r3, #1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	60bb      	str	r3, [r7, #8]
      break;
 80036fa:	e002      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036fe:	60bb      	str	r3, [r7, #8]
      break;
 8003700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003702:	68bb      	ldr	r3, [r7, #8]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	00f42400 	.word	0x00f42400
 8003714:	007a1200 	.word	0x007a1200

08003718 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_GetHCLKFreq+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000000 	.word	0x20000000

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003734:	f7ff fff0 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003738:	4601      	mov	r1, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0b5b      	lsrs	r3, r3, #13
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	0800b9ec 	.word	0x0800b9ec

08003758 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	220f      	movs	r2, #15
 8003766:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_RCC_GetClockConfig+0x5c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0203 	and.w	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_GetClockConfig+0x5c>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCC_GetClockConfig+0x60>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 020f 	and.w	r2, r3, #15
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40023c00 	.word	0x40023c00

080037bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037e4:	4b69      	ldr	r3, [pc, #420]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a68      	ldr	r2, [pc, #416]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037ee:	6093      	str	r3, [r2, #8]
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	4964      	ldr	r1, [pc, #400]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	4959      	ldr	r1, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003836:	2301      	movs	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003842:	2301      	movs	r3, #1
 8003844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d017      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003852:	4b4e      	ldr	r3, [pc, #312]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	494a      	ldr	r1, [pc, #296]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 808b 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a39      	ldr	r2, [pc, #228]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fd fe80 	bl	80015c8 <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fd fe7c 	bl	80015c8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e31e      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d035      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	429a      	cmp	r2, r3
 8003906:	d02e      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d114      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fe44 	bl	80015c8 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fd fe40 	bl	80015c8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e2e0      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ee      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003972:	d111      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003982:	400b      	ands	r3, r1
 8003984:	4901      	ldr	r1, [pc, #4]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
 800398a:	e00b      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	0ffffcff 	.word	0x0ffffcff
 8003998:	4bac      	ldr	r3, [pc, #688]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4aab      	ldr	r2, [pc, #684]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800399e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	4ba9      	ldr	r3, [pc, #676]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	49a6      	ldr	r1, [pc, #664]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039c2:	4ba2      	ldr	r3, [pc, #648]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	4aa0      	ldr	r2, [pc, #640]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039d2:	4b9e      	ldr	r3, [pc, #632]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	499b      	ldr	r1, [pc, #620]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f0:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	4993      	ldr	r1, [pc, #588]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a12:	4b8e      	ldr	r3, [pc, #568]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a20:	498a      	ldr	r1, [pc, #552]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a34:	4b85      	ldr	r3, [pc, #532]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	4982      	ldr	r1, [pc, #520]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a56:	4b7d      	ldr	r3, [pc, #500]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4979      	ldr	r1, [pc, #484]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a78:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4971      	ldr	r1, [pc, #452]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a9a:	4b6c      	ldr	r3, [pc, #432]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f023 020c 	bic.w	r2, r3, #12
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	4968      	ldr	r1, [pc, #416]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003abc:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4960      	ldr	r1, [pc, #384]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ade:	4b5b      	ldr	r3, [pc, #364]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	4957      	ldr	r1, [pc, #348]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b00:	4b52      	ldr	r3, [pc, #328]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	494f      	ldr	r1, [pc, #316]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4946      	ldr	r1, [pc, #280]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b52:	493e      	ldr	r1, [pc, #248]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b66:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	4935      	ldr	r1, [pc, #212]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	492d      	ldr	r1, [pc, #180]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb8:	4924      	ldr	r1, [pc, #144]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be8:	4918      	ldr	r1, [pc, #96]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0c:	490f      	ldr	r1, [pc, #60]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d005      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c22:	f040 80d8 	bne.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c32:	f7fd fcc9 	bl	80015c8 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c3a:	f7fd fcc5 	bl	80015c8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d903      	bls.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e167      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003c4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c50:	4bad      	ldr	r3, [pc, #692]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ee      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d021      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11d      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c70:	4ba5      	ldr	r3, [pc, #660]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c7e:	4ba2      	ldr	r3, [pc, #648]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	019a      	lsls	r2, r3, #6
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	4998      	ldr	r1, [pc, #608]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02e      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd6:	d129      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cd8:	4b8b      	ldr	r3, [pc, #556]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ce6:	4b88      	ldr	r3, [pc, #544]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cec:	0f1b      	lsrs	r3, r3, #28
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	019a      	lsls	r2, r3, #6
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	071b      	lsls	r3, r3, #28
 8003d0c:	497e      	ldr	r1, [pc, #504]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d14:	4b7c      	ldr	r3, [pc, #496]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1a:	f023 021f 	bic.w	r2, r3, #31
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	3b01      	subs	r3, #1
 8003d24:	4978      	ldr	r1, [pc, #480]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01d      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d38:	4b73      	ldr	r3, [pc, #460]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3e:	0e1b      	lsrs	r3, r3, #24
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	0f1b      	lsrs	r3, r3, #28
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	019a      	lsls	r2, r3, #6
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	431a      	orrs	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	061b      	lsls	r3, r3, #24
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	071b      	lsls	r3, r3, #28
 8003d6c:	4966      	ldr	r1, [pc, #408]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d011      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	019a      	lsls	r2, r3, #6
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	061b      	lsls	r3, r3, #24
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	071b      	lsls	r3, r3, #28
 8003d9c:	495a      	ldr	r1, [pc, #360]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da4:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fd fc0a 	bl	80015c8 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003db8:	f7fd fc06 	bl	80015c8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0a8      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dca:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 809e 	bne.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a49      	ldr	r2, [pc, #292]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dea:	f7fd fbed 	bl	80015c8 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003df2:	f7fd fbe9 	bl	80015c8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b64      	cmp	r3, #100	; 0x64
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e08b      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e04:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d0ef      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02e      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12a      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	0f1b      	lsrs	r3, r3, #28
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	019a      	lsls	r2, r3, #6
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	041b      	lsls	r3, r3, #16
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	071b      	lsls	r3, r3, #28
 8003e6e:	4926      	ldr	r1, [pc, #152]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	491f      	ldr	r1, [pc, #124]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d022      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea4:	d11d      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	0e1b      	lsrs	r3, r3, #24
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	0f1b      	lsrs	r3, r3, #28
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	019a      	lsls	r2, r3, #6
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	490b      	ldr	r1, [pc, #44]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eee:	f7fd fb6b 	bl	80015c8 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ef6:	f7fd fb67 	bl	80015c8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d903      	bls.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e009      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003f08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d1ed      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e01d      	b.n	8003f76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f815 	bl	8003f7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 f986 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_TIM_Base_Start_IT+0x50>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x42>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d007      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	00010007 	.word	0x00010007

08003fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0202 	mvn.w	r2, #2
 8004014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f905 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8f7 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f908 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0204 	mvn.w	r2, #4
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8db 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8cd 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8de 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0208 	mvn.w	r2, #8
 80040bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2204      	movs	r2, #4
 80040c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8b1 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8a3 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8b4 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b10      	cmp	r3, #16
 80040f8:	d122      	bne.n	8004140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d11b      	bne.n	8004140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2208      	movs	r2, #8
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f887 	bl	800423a <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f879 	bl	8004226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f88a 	bl	800424e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0201 	mvn.w	r2, #1
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fc ffbe 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004184:	2b80      	cmp	r3, #128	; 0x80
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f91a 	bl	80043cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a6:	d10e      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d107      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f90d 	bl	80043e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d10e      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f838 	bl	8004262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0220 	mvn.w	r2, #32
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8cd 	bl	80043b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d00f      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <TIM_Base_SetConfig+0x118>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2f      	ldr	r2, [pc, #188]	; (800438c <TIM_Base_SetConfig+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d027      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <TIM_Base_SetConfig+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d023      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01f      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d017      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00f      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00b      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <TIM_Base_SetConfig+0x134>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <TIM_Base_SetConfig+0x138>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <TIM_Base_SetConfig+0x13c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <TIM_Base_SetConfig+0x114>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <TIM_Base_SetConfig+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800
 80043ac:	40001800 	.word	0x40001800
 80043b0:	40001c00 	.word	0x40001c00
 80043b4:	40002000 	.word	0x40002000

080043b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f4:	b084      	sub	sp, #16
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	f107 001c 	add.w	r0, r7, #28
 8004402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	d120      	bne.n	800444e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <USB_CoreInit+0xac>)
 800441e:	4013      	ands	r3, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 fa46 	bl	80058d4 <USB_CoreReset>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e010      	b.n	8004470 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f001 fa3a 	bl	80058d4 <USB_CoreReset>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10b      	bne.n	800448e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f043 0206 	orr.w	r2, r3, #6
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800449a:	b004      	add	sp, #16
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	ffbdffbf 	.word	0xffbdffbf

080044a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d165      	bne.n	8004584 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a41      	ldr	r2, [pc, #260]	; (80045c0 <USB_SetTurnaroundTime+0x11c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d906      	bls.n	80044ce <USB_SetTurnaroundTime+0x2a>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <USB_SetTurnaroundTime+0x120>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d802      	bhi.n	80044ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044c8:	230f      	movs	r3, #15
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e062      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <USB_SetTurnaroundTime+0x120>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d906      	bls.n	80044e4 <USB_SetTurnaroundTime+0x40>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <USB_SetTurnaroundTime+0x124>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d802      	bhi.n	80044e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044de:	230e      	movs	r3, #14
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e057      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a38      	ldr	r2, [pc, #224]	; (80045c8 <USB_SetTurnaroundTime+0x124>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d906      	bls.n	80044fa <USB_SetTurnaroundTime+0x56>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a37      	ldr	r2, [pc, #220]	; (80045cc <USB_SetTurnaroundTime+0x128>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d802      	bhi.n	80044fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044f4:	230d      	movs	r3, #13
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e04c      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a33      	ldr	r2, [pc, #204]	; (80045cc <USB_SetTurnaroundTime+0x128>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d906      	bls.n	8004510 <USB_SetTurnaroundTime+0x6c>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4a32      	ldr	r2, [pc, #200]	; (80045d0 <USB_SetTurnaroundTime+0x12c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d802      	bhi.n	8004510 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800450a:	230c      	movs	r3, #12
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e041      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <USB_SetTurnaroundTime+0x12c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d906      	bls.n	8004526 <USB_SetTurnaroundTime+0x82>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a2e      	ldr	r2, [pc, #184]	; (80045d4 <USB_SetTurnaroundTime+0x130>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d802      	bhi.n	8004526 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004520:	230b      	movs	r3, #11
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e036      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <USB_SetTurnaroundTime+0x130>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d906      	bls.n	800453c <USB_SetTurnaroundTime+0x98>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <USB_SetTurnaroundTime+0x134>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d802      	bhi.n	800453c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004536:	230a      	movs	r3, #10
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e02b      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <USB_SetTurnaroundTime+0x134>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d906      	bls.n	8004552 <USB_SetTurnaroundTime+0xae>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a25      	ldr	r2, [pc, #148]	; (80045dc <USB_SetTurnaroundTime+0x138>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d802      	bhi.n	8004552 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800454c:	2309      	movs	r3, #9
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e020      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a21      	ldr	r2, [pc, #132]	; (80045dc <USB_SetTurnaroundTime+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d906      	bls.n	8004568 <USB_SetTurnaroundTime+0xc4>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <USB_SetTurnaroundTime+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d802      	bhi.n	8004568 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004562:	2308      	movs	r3, #8
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e015      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <USB_SetTurnaroundTime+0x13c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d906      	bls.n	800457e <USB_SetTurnaroundTime+0xda>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <USB_SetTurnaroundTime+0x140>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d802      	bhi.n	800457e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004578:	2307      	movs	r3, #7
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e00a      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800457e:	2306      	movs	r3, #6
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e007      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800458a:	2309      	movs	r3, #9
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e001      	b.n	8004594 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004590:	2309      	movs	r3, #9
 8004592:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	029b      	lsls	r3, r3, #10
 80045a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	00d8acbf 	.word	0x00d8acbf
 80045c4:	00e4e1bf 	.word	0x00e4e1bf
 80045c8:	00f423ff 	.word	0x00f423ff
 80045cc:	0106737f 	.word	0x0106737f
 80045d0:	011a499f 	.word	0x011a499f
 80045d4:	01312cff 	.word	0x01312cff
 80045d8:	014ca43f 	.word	0x014ca43f
 80045dc:	016e35ff 	.word	0x016e35ff
 80045e0:	01a6ab1f 	.word	0x01a6ab1f
 80045e4:	01e847ff 	.word	0x01e847ff

080045e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d106      	bne.n	8004658 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e00b      	b.n	8004670 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	e001      	b.n	8004670 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e003      	b.n	8004678 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004670:	2032      	movs	r0, #50	; 0x32
 8004672:	f7fc ffb5 	bl	80015e0 <HAL_Delay>

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004680:	b084      	sub	sp, #16
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800468e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e009      	b.n	80046b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3340      	adds	r3, #64	; 0x40
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3301      	adds	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0e      	cmp	r3, #14
 80046b8:	d9f2      	bls.n	80046a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d112      	bne.n	80046e6 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e005      	b.n	80046f2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046f8:	461a      	mov	r2, r3
 80046fa:	2300      	movs	r3, #0
 80046fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004704:	4619      	mov	r1, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470c:	461a      	mov	r2, r3
 800470e:	680b      	ldr	r3, [r1, #0]
 8004710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10c      	bne.n	8004732 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800471e:	2100      	movs	r1, #0
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f971 	bl	8004a08 <USB_SetDevSpeed>
 8004726:	e018      	b.n	800475a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004728:	2101      	movs	r1, #1
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f96c 	bl	8004a08 <USB_SetDevSpeed>
 8004730:	e013      	b.n	800475a <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b03      	cmp	r3, #3
 8004736:	d10c      	bne.n	8004752 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800473e:	2100      	movs	r1, #0
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f961 	bl	8004a08 <USB_SetDevSpeed>
 8004746:	e008      	b.n	800475a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004748:	2101      	movs	r1, #1
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f95c 	bl	8004a08 <USB_SetDevSpeed>
 8004750:	e003      	b.n	800475a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004752:	2103      	movs	r1, #3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f957 	bl	8004a08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800475a:	2110      	movs	r1, #16
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f90b 	bl	8004978 <USB_FlushTxFifo>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f929 	bl	80049c4 <USB_FlushRxFifo>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	461a      	mov	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e043      	b.n	800482e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047bc:	d118      	bne.n	80047f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	461a      	mov	r2, r3
 80047d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e013      	b.n	8004802 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	461a      	mov	r2, r3
 80047e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e008      	b.n	8004802 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fc:	461a      	mov	r2, r3
 80047fe:	2300      	movs	r3, #0
 8004800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	2300      	movs	r3, #0
 8004812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	461a      	mov	r2, r3
 8004822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3301      	adds	r3, #1
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3b7      	bcc.n	80047a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	e043      	b.n	80048c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800484e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004852:	d118      	bne.n	8004886 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	461a      	mov	r2, r3
 8004868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e013      	b.n	8004898 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e008      	b.n	8004898 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	2300      	movs	r3, #0
 80048a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3301      	adds	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3b7      	bcc.n	800483c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048de:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d110      	bne.n	8004908 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <USB_DevInit+0x2e8>)
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	4619      	mov	r1, r3
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <USB_DevInit+0x2ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004914:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f043 0210 	orr.w	r2, r3, #16
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <USB_DevInit+0x2f0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d105      	bne.n	8004958 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <USB_DevInit+0x2f4>)
 8004952:	4313      	orrs	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004964:	b004      	add	sp, #16
 8004966:	4770      	bx	lr
 8004968:	00800100 	.word	0x00800100
 800496c:	00010003 	.word	0x00010003
 8004970:	803c3800 	.word	0x803c3800
 8004974:	40000004 	.word	0x40000004

08004978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	019b      	lsls	r3, r3, #6
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <USB_FlushTxFifo+0x48>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e006      	b.n	80049b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d0f0      	beq.n	8004992 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	00030d40 	.word	0x00030d40

080049c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2210      	movs	r2, #16
 80049d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a09      	ldr	r2, [pc, #36]	; (8004a04 <USB_FlushRxFifo+0x40>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d0f0      	beq.n	80049d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	00030d40 	.word	0x00030d40

08004a08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0306 	and.w	r3, r3, #6
 8004a52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]
 8004a5e:	e00a      	b.n	8004a76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d002      	beq.n	8004a6c <USB_GetDevSpeed+0x32>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b06      	cmp	r3, #6
 8004a6a:	d102      	bne.n	8004a72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	75fb      	strb	r3, [r7, #23]
 8004a70:	e001      	b.n	8004a76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d139      	bne.n	8004b14 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d153      	bne.n	8004b80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	78db      	ldrb	r3, [r3, #3]
 8004af2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004af4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	059b      	lsls	r3, r3, #22
 8004afa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0159      	lsls	r1, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	440b      	add	r3, r1
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <USB_ActivateEndpoint+0x10c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
 8004b12:	e035      	b.n	8004b80 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d119      	bne.n	8004b80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	78db      	ldrb	r3, [r3, #3]
 8004b66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	0159      	lsls	r1, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	440b      	add	r3, r1
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <USB_ActivateEndpoint+0x10c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	10008000 	.word	0x10008000

08004b94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d135      	bne.n	8004c1c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	0159      	lsls	r1, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	440b      	add	r3, r1
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	4619      	mov	r1, r3
 8004c14:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <USB_DeactivateEndpoint+0x100>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
 8004c1a:	e034      	b.n	8004c86 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	43db      	mvns	r3, r3
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c60:	4013      	ands	r3, r2
 8004c62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	0159      	lsls	r1, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	440b      	add	r3, r1
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <USB_DeactivateEndpoint+0x104>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	ec337800 	.word	0xec337800
 8004c98:	eff37800 	.word	0xeff37800

08004c9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 812d 	bne.w	8004f18 <USB_EPStartXfer+0x27c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d132      	bne.n	8004d2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	0159      	lsls	r1, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	440b      	add	r3, r1
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4b8a      	ldr	r3, [pc, #552]	; (8004f0c <USB_EPStartXfer+0x270>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	4619      	mov	r1, r3
 8004d24:	4b7a      	ldr	r3, [pc, #488]	; (8004f10 <USB_EPStartXfer+0x274>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	610b      	str	r3, [r1, #16]
 8004d2a:	e074      	b.n	8004e16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	0159      	lsls	r1, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	4619      	mov	r1, r3
 8004d48:	4b71      	ldr	r3, [pc, #452]	; (8004f10 <USB_EPStartXfer+0x274>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	0159      	lsls	r1, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	440b      	add	r3, r1
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <USB_EPStartXfer+0x270>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	440b      	add	r3, r1
 8004d88:	1e59      	subs	r1, r3, #1
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d92:	04d9      	lsls	r1, r3, #19
 8004d94:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <USB_EPStartXfer+0x278>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbe:	69b9      	ldr	r1, [r7, #24]
 8004dc0:	0148      	lsls	r0, r1, #5
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	4401      	add	r1, r0
 8004dc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	78db      	ldrb	r3, [r3, #3]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d11f      	bne.n	8004e16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004df4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d10e      	bne.n	8004e3a <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d022      	beq.n	8004e6a <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	6153      	str	r3, [r2, #20]
 8004e38:	e017      	b.n	8004e6a <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	78db      	ldrb	r3, [r3, #3]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d013      	beq.n	8004e6a <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00f      	beq.n	8004e6a <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e66:	4313      	orrs	r3, r2
 8004e68:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	78db      	ldrb	r3, [r3, #3]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d128      	bne.n	8004ec4 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d110      	bne.n	8004ea4 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00f      	b.n	8004ec4 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ee2:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	78db      	ldrb	r3, [r3, #3]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f040 80e1 	bne.w	80050b0 <USB_EPStartXfer+0x414>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	b298      	uxth	r0, r3
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fa28 	bl	8005358 <USB_WritePacket>
 8004f08:	e0d2      	b.n	80050b0 <USB_EPStartXfer+0x414>
 8004f0a:	bf00      	nop
 8004f0c:	e007ffff 	.word	0xe007ffff
 8004f10:	fff80000 	.word	0xfff80000
 8004f14:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	0159      	lsls	r1, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	440b      	add	r3, r1
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	4619      	mov	r1, r3
 8004f34:	4b61      	ldr	r3, [pc, #388]	; (80050bc <USB_EPStartXfer+0x420>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	0159      	lsls	r1, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	440b      	add	r3, r1
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	4619      	mov	r1, r3
 8004f56:	4b5a      	ldr	r3, [pc, #360]	; (80050c0 <USB_EPStartXfer+0x424>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d123      	bne.n	8004fac <USB_EPStartXfer+0x310>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7a:	69b9      	ldr	r1, [r7, #24]
 8004f7c:	0148      	lsls	r0, r1, #5
 8004f7e:	69f9      	ldr	r1, [r7, #28]
 8004f80:	4401      	add	r1, r0
 8004f82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f86:	4313      	orrs	r3, r2
 8004f88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa8:	6113      	str	r3, [r2, #16]
 8004faa:	e033      	b.n	8005014 <USB_EPStartXfer+0x378>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	8afb      	ldrh	r3, [r7, #22]
 8004fd2:	04d9      	lsls	r1, r3, #19
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <USB_EPStartXfer+0x428>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	69b9      	ldr	r1, [r7, #24]
 8004fda:	0148      	lsls	r0, r1, #5
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	4401      	add	r1, r0
 8004fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	8af9      	ldrh	r1, [r7, #22]
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005004:	69b9      	ldr	r1, [r7, #24]
 8005006:	0148      	lsls	r0, r1, #5
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	4401      	add	r1, r0
 800500c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005010:	4313      	orrs	r3, r2
 8005012:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10d      	bne.n	8005036 <USB_EPStartXfer+0x39a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <USB_EPStartXfer+0x39a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	460a      	mov	r2, r1
 8005034:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	78db      	ldrb	r3, [r3, #3]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d128      	bne.n	8005090 <USB_EPStartXfer+0x3f4>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d110      	bne.n	8005070 <USB_EPStartXfer+0x3d4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e00f      	b.n	8005090 <USB_EPStartXfer+0x3f4>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	fff80000 	.word	0xfff80000
 80050c0:	e007ffff 	.word	0xe007ffff
 80050c4:	1ff80000 	.word	0x1ff80000

080050c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	f040 80bd 	bne.w	8005264 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d132      	bne.n	8005158 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	0159      	lsls	r1, r3, #5
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	440b      	add	r3, r1
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	4619      	mov	r1, r3
 800510e:	4b90      	ldr	r3, [pc, #576]	; (8005350 <USB_EP0StartXfer+0x288>)
 8005110:	4013      	ands	r3, r2
 8005112:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005132:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	0159      	lsls	r1, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	440b      	add	r3, r1
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	4619      	mov	r1, r3
 8005150:	4b80      	ldr	r3, [pc, #512]	; (8005354 <USB_EP0StartXfer+0x28c>)
 8005152:	4013      	ands	r3, r2
 8005154:	610b      	str	r3, [r1, #16]
 8005156:	e04e      	b.n	80051f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	0159      	lsls	r1, r3, #5
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	440b      	add	r3, r1
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	4619      	mov	r1, r3
 8005174:	4b77      	ldr	r3, [pc, #476]	; (8005354 <USB_EP0StartXfer+0x28c>)
 8005176:	4013      	ands	r3, r2
 8005178:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	0159      	lsls	r1, r3, #5
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	440b      	add	r3, r1
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	4619      	mov	r1, r3
 8005196:	4b6e      	ldr	r3, [pc, #440]	; (8005350 <USB_EP0StartXfer+0x288>)
 8005198:	4013      	ands	r3, r2
 800519a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d903      	bls.n	80051b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	0148      	lsls	r0, r1, #5
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	4401      	add	r1, r0
 80051ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051f2:	4313      	orrs	r3, r2
 80051f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10e      	bne.n	800521a <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01e      	beq.n	8005242 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	461a      	mov	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	6153      	str	r3, [r2, #20]
 8005218:	e013      	b.n	8005242 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00f      	beq.n	8005242 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800523e:	4313      	orrs	r3, r2
 8005240:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e06d      	b.n	8005340 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	440b      	add	r3, r1
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	4619      	mov	r1, r3
 8005280:	4b34      	ldr	r3, [pc, #208]	; (8005354 <USB_EP0StartXfer+0x28c>)
 8005282:	4013      	ands	r3, r2
 8005284:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	0159      	lsls	r1, r3, #5
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	440b      	add	r3, r1
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	4619      	mov	r1, r3
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <USB_EP0StartXfer+0x288>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ee:	6939      	ldr	r1, [r7, #16]
 80052f0:	0148      	lsls	r0, r1, #5
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	4401      	add	r1, r0
 80052f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052fa:	4313      	orrs	r3, r2
 80052fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d10d      	bne.n	8005320 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	68d9      	ldr	r1, [r3, #12]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	460a      	mov	r2, r1
 800531e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800533e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e007ffff 	.word	0xe007ffff
 8005354:	fff80000 	.word	0xfff80000

08005358 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4611      	mov	r1, r2
 8005364:	461a      	mov	r2, r3
 8005366:	460b      	mov	r3, r1
 8005368:	71fb      	strb	r3, [r7, #7]
 800536a:	4613      	mov	r3, r2
 800536c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005376:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11a      	bne.n	80053b4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800537e:	88bb      	ldrh	r3, [r7, #4]
 8005380:	3303      	adds	r3, #3
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e00f      	b.n	80053ac <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	031a      	lsls	r2, r3, #12
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005398:	461a      	mov	r2, r3
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3304      	adds	r3, #4
 80053a4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	3301      	adds	r3, #1
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d3eb      	bcc.n	800538c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3724      	adds	r7, #36	; 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b089      	sub	sp, #36	; 0x24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	4613      	mov	r3, r2
 80053ce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	3303      	adds	r3, #3
 80053dc:	089b      	lsrs	r3, r3, #2
 80053de:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	e00b      	b.n	80053fe <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3304      	adds	r3, #4
 80053f6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	3301      	adds	r3, #1
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	429a      	cmp	r2, r3
 8005404:	d3ef      	bcc.n	80053e6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005406:	69fb      	ldr	r3, [r7, #28]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3724      	adds	r7, #36	; 0x24
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d12c      	bne.n	800548a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	db12      	blt.n	8005468 <USB_EPSetStall+0x54>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00f      	beq.n	8005468 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005466:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	e02b      	b.n	80054e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db12      	blt.n	80054c2 <USB_EPSetStall+0xae>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00f      	beq.n	80054c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d128      	bne.n	800555e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800552a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	78db      	ldrb	r3, [r3, #3]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d003      	beq.n	800553c <USB_EPClearStall+0x4c>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	78db      	ldrb	r3, [r3, #3]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d138      	bne.n	80055ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e027      	b.n	80055ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005578:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800557c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d003      	beq.n	800558e <USB_EPClearStall+0x9e>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	78db      	ldrb	r3, [r3, #3]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d10f      	bne.n	80055ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055f0:	68f9      	ldr	r1, [r7, #12]
 80055f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f6:	4313      	orrs	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005622:	f023 0302 	bic.w	r3, r3, #2
 8005626:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005628:	2003      	movs	r0, #3
 800562a:	f7fb ffd9 	bl	80015e0 <HAL_Delay>

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005658:	2003      	movs	r0, #3
 800565a:	f7fb ffc1 	bl	80015e0 <HAL_Delay>

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0c1b      	lsrs	r3, r3, #16
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	b29b      	uxth	r3, r3
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005724:	68bb      	ldr	r3, [r7, #8]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005732:	b480      	push	{r7}
 8005734:	b087      	sub	sp, #28
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	01db      	lsls	r3, r3, #7
 8005764:	b2db      	uxtb	r3, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4013      	ands	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005780:	68bb      	ldr	r3, [r7, #8]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0301 	and.w	r3, r3, #1
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	4619      	mov	r1, r3
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <USB_ActivateSetup+0x68>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0306 	and.w	r3, r3, #6
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d109      	bne.n	80057f2 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f043 0303 	orr.w	r3, r3, #3
 80057f0:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005804:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	fffff800 	.word	0xfffff800

08005818 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	460b      	mov	r3, r1
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	333c      	adds	r3, #60	; 0x3c
 800582e:	3304      	adds	r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <USB_EP0_OutStart+0xb8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d90a      	bls.n	8005852 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584c:	d101      	bne.n	8005852 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e037      	b.n	80058c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	461a      	mov	r2, r3
 800585a:	2300      	movs	r3, #0
 800585c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005880:	f043 0318 	orr.w	r3, r3, #24
 8005884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005894:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005898:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d10f      	bne.n	80058c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	4f54300a 	.word	0x4f54300a

080058d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a13      	ldr	r2, [pc, #76]	; (8005938 <USB_CoreReset+0x64>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e01b      	b.n	800592a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	daf2      	bge.n	80058e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f043 0201 	orr.w	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a09      	ldr	r2, [pc, #36]	; (8005938 <USB_CoreReset+0x64>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e006      	b.n	800592a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d0f0      	beq.n	800590a <USB_CoreReset+0x36>

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	00030d40 	.word	0x00030d40

0800593c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7c1b      	ldrb	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d115      	bne.n	8005980 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005958:	2202      	movs	r2, #2
 800595a:	2181      	movs	r1, #129	; 0x81
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f004 fcda 	bl	800a316 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596c:	2202      	movs	r2, #2
 800596e:	2101      	movs	r1, #1
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f004 fcd0 	bl	800a316 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800597e:	e012      	b.n	80059a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	2202      	movs	r2, #2
 8005984:	2181      	movs	r1, #129	; 0x81
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f004 fcc5 	bl	800a316 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	2202      	movs	r2, #2
 8005996:	2101      	movs	r1, #1
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f004 fcbc 	bl	800a316 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059a6:	2308      	movs	r3, #8
 80059a8:	2203      	movs	r2, #3
 80059aa:	2182      	movs	r1, #130	; 0x82
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f004 fcb2 	bl	800a316 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80059b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059bc:	f004 fe7c 	bl	800a6b8 <malloc>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e026      	b.n	8005a28 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80059e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7c1b      	ldrb	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a0e:	2101      	movs	r1, #1
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f004 fd71 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8005a16:	e007      	b.n	8005a28 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	2101      	movs	r1, #1
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f004 fd68 	bl	800a4f8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a42:	2181      	movs	r1, #129	; 0x81
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f004 fc8c 	bl	800a362 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a50:	2101      	movs	r1, #1
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f004 fc85 	bl	800a362 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a60:	2182      	movs	r1, #130	; 0x82
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f004 fc7d 	bl	800a362 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00e      	beq.n	8005a96 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f004 fe1d 	bl	800a6c8 <free>
    pdev->pClassData = NULL;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ab0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d039      	beq.n	8005b3e <USBD_CDC_Setup+0x9e>
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d17c      	bne.n	8005bc8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	88db      	ldrh	r3, [r3, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d029      	beq.n	8005b2a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da11      	bge.n	8005b04 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005aec:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	88d2      	ldrh	r2, [r2, #6]
 8005af2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005af4:	6939      	ldr	r1, [r7, #16]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	88db      	ldrh	r3, [r3, #6]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 f9b7 	bl	8006e70 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005b02:	e068      	b.n	8005bd6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	785a      	ldrb	r2, [r3, #1]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	88db      	ldrh	r3, [r3, #6]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b1a:	6939      	ldr	r1, [r7, #16]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	88db      	ldrh	r3, [r3, #6]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f001 f9d2 	bl	8006ecc <USBD_CtlPrepareRx>
    break;
 8005b28:	e055      	b.n	8005bd6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	7850      	ldrb	r0, [r2, #1]
 8005b36:	2200      	movs	r2, #0
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	4798      	blx	r3
    break;
 8005b3c:	e04b      	b.n	8005bd6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b0a      	cmp	r3, #10
 8005b44:	d017      	beq.n	8005b76 <USBD_CDC_Setup+0xd6>
 8005b46:	2b0b      	cmp	r3, #11
 8005b48:	d029      	beq.n	8005b9e <USBD_CDC_Setup+0xfe>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d133      	bne.n	8005bb6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d107      	bne.n	8005b68 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 f985 	bl	8006e70 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005b66:	e02e      	b.n	8005bc6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 f915 	bl	8006d9a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005b70:	2302      	movs	r3, #2
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	e027      	b.n	8005bc6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d107      	bne.n	8005b90 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005b80:	f107 030f 	add.w	r3, r7, #15
 8005b84:	2201      	movs	r2, #1
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 f971 	bl	8006e70 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005b8e:	e01a      	b.n	8005bc6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f901 	bl	8006d9a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9c:	e013      	b.n	8005bc6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d00d      	beq.n	8005bc4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f8f5 	bl	8006d9a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bb4:	e006      	b.n	8005bc4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f8ee 	bl	8006d9a <USBD_CtlError>
      ret = USBD_FAIL;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	e000      	b.n	8005bc6 <USBD_CDC_Setup+0x126>
      break;
 8005bc4:	bf00      	nop
    }
    break;
 8005bc6:	e006      	b.n	8005bd6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f8e5 	bl	8006d9a <USBD_CtlError>
    ret = USBD_FAIL;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	75fb      	strb	r3, [r7, #23]
    break;
 8005bd4:	bf00      	nop
  }

  return ret;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005bf2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005bfa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03a      	beq.n	8005c7c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	331c      	adds	r3, #28
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d029      	beq.n	8005c70 <USBD_CDC_DataIn+0x90>
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	331c      	adds	r3, #28
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	78f9      	ldrb	r1, [r7, #3]
 8005c30:	68b8      	ldr	r0, [r7, #8]
 8005c32:	460b      	mov	r3, r1
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4403      	add	r3, r0
 8005c3c:	3344      	adds	r3, #68	; 0x44
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c44:	fb03 f301 	mul.w	r3, r3, r1
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d110      	bne.n	8005c70 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	331c      	adds	r3, #28
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005c62:	78f9      	ldrb	r1, [r7, #3]
 8005c64:	2300      	movs	r3, #0
 8005c66:	2200      	movs	r2, #0
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f004 fc22 	bl	800a4b2 <USBD_LL_Transmit>
 8005c6e:	e003      	b.n	8005c78 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f004 fc4d 	bl	800a53e <USBD_LL_GetRxDataSize>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4798      	blx	r3

    return USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e000      	b.n	8005cd4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005cd2:	2302      	movs	r3, #2
  }
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cea:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d015      	beq.n	8005d22 <USBD_CDC_EP0_RxReady+0x46>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cfc:	2bff      	cmp	r3, #255	; 0xff
 8005cfe:	d010      	beq.n	8005d22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d16:	b292      	uxth	r2, r2
 8005d18:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2243      	movs	r2, #67	; 0x43
 8005d38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d3a:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000090 	.word	0x20000090

08005d4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2243      	movs	r2, #67	; 0x43
 8005d58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d5a:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	2000004c 	.word	0x2000004c

08005d6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2243      	movs	r2, #67	; 0x43
 8005d78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005d7a:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	200000d4 	.word	0x200000d4

08005d8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	220a      	movs	r2, #10
 8005d98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	20000008 	.word	0x20000008

08005dac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005db6:	2302      	movs	r3, #2
 8005db8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	4613      	mov	r3, r2
 8005de6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005dee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d017      	beq.n	8005e80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7c1b      	ldrb	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e62:	2101      	movs	r1, #1
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f004 fb47 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8005e6a:	e007      	b.n	8005e7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	2101      	movs	r1, #1
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f004 fb3e 	bl	800a4f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005e80:	2302      	movs	r3, #2
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	4613      	mov	r3, r2
 8005e96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e01a      	b.n	8005ed8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	79fa      	ldrb	r2, [r7, #7]
 8005ece:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f004 f9b9 	bl	800a248 <USBD_LL_Init>

  return USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e001      	b.n	8005f06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f02:	2302      	movs	r3, #2
 8005f04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f004 f9df 	bl	800a2e0 <USBD_LL_Start>

  return USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00c      	beq.n	8005f76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4611      	mov	r1, r2
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	4611      	mov	r1, r2
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	4798      	blx	r3
  return USBD_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 feb1 	bl	8006d20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d00c      	beq.n	8005ffc <USBD_LL_SetupStage+0x56>
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d302      	bcc.n	8005fec <USBD_LL_SetupStage+0x46>
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d010      	beq.n	800600c <USBD_LL_SetupStage+0x66>
 8005fea:	e017      	b.n	800601c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fa05 	bl	8006404 <USBD_StdDevReq>
    break;
 8005ffa:	e01a      	b.n	8006032 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa67 	bl	80064d8 <USBD_StdItfReq>
    break;
 800600a:	e012      	b.n	8006032 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 faa5 	bl	8006564 <USBD_StdEPReq>
    break;
 800601a:	e00a      	b.n	8006032 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006022:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006026:	b2db      	uxtb	r3, r3
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f004 f9b8 	bl	800a3a0 <USBD_LL_StallEP>
    break;
 8006030:	bf00      	nop
  }

  return USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	460b      	mov	r3, r1
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d14b      	bne.n	80060e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006056:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800605e:	2b03      	cmp	r3, #3
 8006060:	d134      	bne.n	80060cc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	429a      	cmp	r2, r3
 800606c:	d919      	bls.n	80060a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006084:	429a      	cmp	r2, r3
 8006086:	d203      	bcs.n	8006090 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800608c:	b29b      	uxth	r3, r3
 800608e:	e002      	b.n	8006096 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 ff34 	bl	8006f08 <USBD_CtlContinueRx>
 80060a0:	e038      	b.n	8006114 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d105      	bne.n	80060c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 ff31 	bl	8006f2c <USBD_CtlSendStatus>
 80060ca:	e023      	b.n	8006114 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	d11e      	bne.n	8006114 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80060de:	2100      	movs	r1, #0
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f004 f95d 	bl	800a3a0 <USBD_LL_StallEP>
 80060e6:	e015      	b.n	8006114 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d108      	bne.n	8006110 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	7afa      	ldrb	r2, [r7, #11]
 8006108:	4611      	mov	r1, r2
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	4798      	blx	r3
 800610e:	e001      	b.n	8006114 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006110:	2302      	movs	r3, #2
 8006112:	e000      	b.n	8006116 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	460b      	mov	r3, r1
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d17f      	bne.n	8006232 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3314      	adds	r3, #20
 8006136:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800613e:	2b02      	cmp	r3, #2
 8006140:	d15c      	bne.n	80061fc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	429a      	cmp	r2, r3
 800614c:	d915      	bls.n	800617a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	b29b      	uxth	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fe9e 	bl	8006ea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800616c:	2300      	movs	r3, #0
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f004 f9c0 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8006178:	e04e      	b.n	8006218 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	6912      	ldr	r2, [r2, #16]
 8006182:	fbb3 f1f2 	udiv	r1, r3, r2
 8006186:	fb02 f201 	mul.w	r2, r2, r1
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11c      	bne.n	80061ca <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006198:	429a      	cmp	r2, r3
 800619a:	d316      	bcc.n	80061ca <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d20f      	bcs.n	80061ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061aa:	2200      	movs	r2, #0
 80061ac:	2100      	movs	r1, #0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fe7a 	bl	8006ea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f004 f998 	bl	800a4f8 <USBD_LL_PrepareReceive>
 80061c8:	e026      	b.n	8006218 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d105      	bne.n	80061ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80061ec:	2180      	movs	r1, #128	; 0x80
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f004 f8d6 	bl	800a3a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 feac 	bl	8006f52 <USBD_CtlReceiveStatus>
 80061fa:	e00d      	b.n	8006218 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006202:	2b04      	cmp	r3, #4
 8006204:	d004      	beq.n	8006210 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f004 f8c4 	bl	800a3a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800621e:	2b01      	cmp	r3, #1
 8006220:	d11d      	bne.n	800625e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fe82 	bl	8005f2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006230:	e015      	b.n	800625e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006244:	2b03      	cmp	r3, #3
 8006246:	d108      	bne.n	800625a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	7afa      	ldrb	r2, [r7, #11]
 8006252:	4611      	mov	r1, r2
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	4798      	blx	r3
 8006258:	e001      	b.n	800625e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800625a:	2302      	movs	r3, #2
 800625c:	e000      	b.n	8006260 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006270:	2340      	movs	r3, #64	; 0x40
 8006272:	2200      	movs	r2, #0
 8006274:	2100      	movs	r1, #0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f004 f84d 	bl	800a316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	2200      	movs	r2, #0
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f004 f83f 	bl	800a316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6852      	ldr	r2, [r2, #4]
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	4611      	mov	r1, r2
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
  }

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	78fa      	ldrb	r2, [r7, #3]
 80062fa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2204      	movs	r2, #4
 8006322:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006364:	2b03      	cmp	r3, #3
 8006366:	d10b      	bne.n	8006380 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6852      	ldr	r2, [r2, #4]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	4611      	mov	r1, r2
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3

  return USBD_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641a:	2b20      	cmp	r3, #32
 800641c:	d004      	beq.n	8006428 <USBD_StdDevReq+0x24>
 800641e:	2b40      	cmp	r3, #64	; 0x40
 8006420:	d002      	beq.n	8006428 <USBD_StdDevReq+0x24>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <USBD_StdDevReq+0x34>
 8006426:	e04c      	b.n	80064c2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
    break;
 8006436:	e049      	b.n	80064cc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b09      	cmp	r3, #9
 800643e:	d83a      	bhi.n	80064b6 <USBD_StdDevReq+0xb2>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <USBD_StdDevReq+0x44>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	08006499 	.word	0x08006499
 800644c:	080064ad 	.word	0x080064ad
 8006450:	080064b7 	.word	0x080064b7
 8006454:	080064a3 	.word	0x080064a3
 8006458:	080064b7 	.word	0x080064b7
 800645c:	0800647b 	.word	0x0800647b
 8006460:	08006471 	.word	0x08006471
 8006464:	080064b7 	.word	0x080064b7
 8006468:	0800648f 	.word	0x0800648f
 800646c:	08006485 	.word	0x08006485
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9d2 	bl	800681c <USBD_GetDescriptor>
      break;
 8006478:	e022      	b.n	80064c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fae3 	bl	8006a48 <USBD_SetAddress>
      break;
 8006482:	e01d      	b.n	80064c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fb20 	bl	8006acc <USBD_SetConfig>
      break;
 800648c:	e018      	b.n	80064c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fba9 	bl	8006be8 <USBD_GetConfig>
      break;
 8006496:	e013      	b.n	80064c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fbd8 	bl	8006c50 <USBD_GetStatus>
      break;
 80064a0:	e00e      	b.n	80064c0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fc06 	bl	8006cb6 <USBD_SetFeature>
      break;
 80064aa:	e009      	b.n	80064c0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fc15 	bl	8006cde <USBD_ClrFeature>
      break;
 80064b4:	e004      	b.n	80064c0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fc6e 	bl	8006d9a <USBD_CtlError>
      break;
 80064be:	bf00      	nop
    }
    break;
 80064c0:	e004      	b.n	80064cc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fc68 	bl	8006d9a <USBD_CtlError>
    break;
 80064ca:	bf00      	nop
  }

  return ret;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d003      	beq.n	80064fa <USBD_StdItfReq+0x22>
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d001      	beq.n	80064fa <USBD_StdItfReq+0x22>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d12a      	bne.n	8006550 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006500:	3b01      	subs	r3, #1
 8006502:	2b02      	cmp	r3, #2
 8006504:	d81d      	bhi.n	8006542 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	889b      	ldrh	r3, [r3, #4]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d813      	bhi.n	8006538 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d110      	bne.n	800654c <USBD_StdItfReq+0x74>
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fcfb 	bl	8006f2c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006536:	e009      	b.n	800654c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fc2d 	bl	8006d9a <USBD_CtlError>
      break;
 8006540:	e004      	b.n	800654c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fc28 	bl	8006d9a <USBD_CtlError>
      break;
 800654a:	e000      	b.n	800654e <USBD_StdItfReq+0x76>
      break;
 800654c:	bf00      	nop
    }
    break;
 800654e:	e004      	b.n	800655a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fc21 	bl	8006d9a <USBD_CtlError>
    break;
 8006558:	bf00      	nop
  }

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	889b      	ldrh	r3, [r3, #4]
 8006576:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006580:	2b20      	cmp	r3, #32
 8006582:	d004      	beq.n	800658e <USBD_StdEPReq+0x2a>
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d002      	beq.n	800658e <USBD_StdEPReq+0x2a>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <USBD_StdEPReq+0x3a>
 800658c:	e13b      	b.n	8006806 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
    break;
 800659c:	e138      	b.n	8006810 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d10a      	bne.n	80065c0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]

      return ret;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	e128      	b.n	8006812 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d03e      	beq.n	8006646 <USBD_StdEPReq+0xe2>
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d002      	beq.n	80065d2 <USBD_StdEPReq+0x6e>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d070      	beq.n	80066b2 <USBD_StdEPReq+0x14e>
 80065d0:	e113      	b.n	80067fa <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d002      	beq.n	80065e2 <USBD_StdEPReq+0x7e>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d015      	beq.n	800660c <USBD_StdEPReq+0xa8>
 80065e0:	e02b      	b.n	800663a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00c      	beq.n	8006602 <USBD_StdEPReq+0x9e>
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d009      	beq.n	8006602 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f003 fed4 	bl	800a3a0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80065f8:	2180      	movs	r1, #128	; 0x80
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f003 fed0 	bl	800a3a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006600:	e020      	b.n	8006644 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fbc8 	bl	8006d9a <USBD_CtlError>
        break;
 800660a:	e01b      	b.n	8006644 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	885b      	ldrh	r3, [r3, #2]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <USBD_StdEPReq+0xce>
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d008      	beq.n	8006632 <USBD_StdEPReq+0xce>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f003 feb7 	bl	800a3a0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc7a 	bl	8006f2c <USBD_CtlSendStatus>

        break;
 8006638:	e004      	b.n	8006644 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fbac 	bl	8006d9a <USBD_CtlError>
        break;
 8006642:	bf00      	nop
      }
      break;
 8006644:	e0de      	b.n	8006804 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800664c:	2b02      	cmp	r3, #2
 800664e:	d002      	beq.n	8006656 <USBD_StdEPReq+0xf2>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d015      	beq.n	8006680 <USBD_StdEPReq+0x11c>
 8006654:	e026      	b.n	80066a4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00c      	beq.n	8006676 <USBD_StdEPReq+0x112>
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d009      	beq.n	8006676 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f003 fe9a 	bl	800a3a0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f003 fe96 	bl	800a3a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006674:	e01c      	b.n	80066b0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fb8e 	bl	8006d9a <USBD_CtlError>
        break;
 800667e:	e017      	b.n	80066b0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	885b      	ldrh	r3, [r3, #2]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d112      	bne.n	80066ae <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f003 fea1 	bl	800a3de <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc45 	bl	8006f2c <USBD_CtlSendStatus>
        }
        break;
 80066a2:	e004      	b.n	80066ae <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fb77 	bl	8006d9a <USBD_CtlError>
        break;
 80066ac:	e000      	b.n	80066b0 <USBD_StdEPReq+0x14c>
        break;
 80066ae:	bf00      	nop
      }
      break;
 80066b0:	e0a8      	b.n	8006804 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d002      	beq.n	80066c2 <USBD_StdEPReq+0x15e>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d031      	beq.n	8006724 <USBD_StdEPReq+0x1c0>
 80066c0:	e095      	b.n	80067ee <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <USBD_StdEPReq+0x174>
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d004      	beq.n	80066d8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fb62 	bl	8006d9a <USBD_CtlError>
          break;
 80066d6:	e08f      	b.n	80067f8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80066d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da0b      	bge.n	80066f8 <USBD_StdEPReq+0x194>
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	3310      	adds	r3, #16
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	3304      	adds	r3, #4
 80066f6:	e00a      	b.n	800670e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2202      	movs	r2, #2
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fba7 	bl	8006e70 <USBD_CtlSendData>
          break;
 8006722:	e069      	b.n	80067f8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da11      	bge.n	8006750 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	f003 020f 	and.w	r2, r3, #15
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	3318      	adds	r3, #24
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d117      	bne.n	8006776 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fb26 	bl	8006d9a <USBD_CtlError>
            break;
 800674e:	e053      	b.n	80067f8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	f003 020f 	and.w	r2, r3, #15
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb13 	bl	8006d9a <USBD_CtlError>
            break;
 8006774:	e040      	b.n	80067f8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800677a:	2b00      	cmp	r3, #0
 800677c:	da0b      	bge.n	8006796 <USBD_StdEPReq+0x232>
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	3310      	adds	r3, #16
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	3304      	adds	r3, #4
 8006794:	e00a      	b.n	80067ac <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <USBD_StdEPReq+0x256>
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d103      	bne.n	80067c2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e00e      	b.n	80067e0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f003 fe28 	bl	800a41c <USBD_LL_IsStallEP>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e002      	b.n	80067e0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2202      	movs	r2, #2
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb42 	bl	8006e70 <USBD_CtlSendData>
          break;
 80067ec:	e004      	b.n	80067f8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fad2 	bl	8006d9a <USBD_CtlError>
        break;
 80067f6:	bf00      	nop
      }
      break;
 80067f8:	e004      	b.n	8006804 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 facc 	bl	8006d9a <USBD_CtlError>
      break;
 8006802:	bf00      	nop
    }
    break;
 8006804:	e004      	b.n	8006810 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fac6 	bl	8006d9a <USBD_CtlError>
    break;
 800680e:	bf00      	nop
  }

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	2b0e      	cmp	r3, #14
 8006832:	f200 80e5 	bhi.w	8006a00 <USBD_GetDescriptor+0x1e4>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <USBD_GetDescriptor+0x20>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006891 	.word	0x08006891
 8006840:	080068a9 	.word	0x080068a9
 8006844:	080068e9 	.word	0x080068e9
 8006848:	08006a01 	.word	0x08006a01
 800684c:	08006a01 	.word	0x08006a01
 8006850:	080069ad 	.word	0x080069ad
 8006854:	080069d3 	.word	0x080069d3
 8006858:	08006a01 	.word	0x08006a01
 800685c:	08006a01 	.word	0x08006a01
 8006860:	08006a01 	.word	0x08006a01
 8006864:	08006a01 	.word	0x08006a01
 8006868:	08006a01 	.word	0x08006a01
 800686c:	08006a01 	.word	0x08006a01
 8006870:	08006a01 	.word	0x08006a01
 8006874:	08006879 	.word	0x08006879
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7c12      	ldrb	r2, [r2, #16]
 8006884:	f107 010a 	add.w	r1, r7, #10
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
    break;
 800688e:	e0bc      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 010a 	add.w	r1, r7, #10
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
    break;
 80068a6:	e0b0      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7c1b      	ldrb	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10d      	bne.n	80068cc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	f107 020a 	add.w	r2, r7, #10
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	2202      	movs	r2, #2
 80068c8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80068ca:	e09e      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	f107 020a 	add.w	r2, r7, #10
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3301      	adds	r3, #1
 80068e2:	2202      	movs	r2, #2
 80068e4:	701a      	strb	r2, [r3, #0]
    break;
 80068e6:	e090      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	885b      	ldrh	r3, [r3, #2]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d856      	bhi.n	80069a0 <USBD_GetDescriptor+0x184>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <USBD_GetDescriptor+0xdc>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	08006911 	.word	0x08006911
 80068fc:	08006929 	.word	0x08006929
 8006900:	08006941 	.word	0x08006941
 8006904:	08006959 	.word	0x08006959
 8006908:	08006971 	.word	0x08006971
 800690c:	08006989 	.word	0x08006989
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 010a 	add.w	r1, r7, #10
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
      break;
 8006926:	e040      	b.n	80069aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7c12      	ldrb	r2, [r2, #16]
 8006934:	f107 010a 	add.w	r1, r7, #10
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
      break;
 800693e:	e034      	b.n	80069aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	7c12      	ldrb	r2, [r2, #16]
 800694c:	f107 010a 	add.w	r1, r7, #10
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	60f8      	str	r0, [r7, #12]
      break;
 8006956:	e028      	b.n	80069aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7c12      	ldrb	r2, [r2, #16]
 8006964:	f107 010a 	add.w	r1, r7, #10
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
      break;
 800696e:	e01c      	b.n	80069aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	7c12      	ldrb	r2, [r2, #16]
 800697c:	f107 010a 	add.w	r1, r7, #10
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
      break;
 8006986:	e010      	b.n	80069aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7c12      	ldrb	r2, [r2, #16]
 8006994:	f107 010a 	add.w	r1, r7, #10
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
      break;
 800699e:	e004      	b.n	80069aa <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f9f9 	bl	8006d9a <USBD_CtlError>
      return;
 80069a8:	e04b      	b.n	8006a42 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 80069aa:	e02e      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7c1b      	ldrb	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	f107 020a 	add.w	r2, r7, #10
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
      break;
 80069c6:	e020      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9e5 	bl	8006d9a <USBD_CtlError>
      return;
 80069d0:	e037      	b.n	8006a42 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	7c1b      	ldrb	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f107 020a 	add.w	r2, r7, #10
 80069e6:	4610      	mov	r0, r2
 80069e8:	4798      	blx	r3
 80069ea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	2207      	movs	r2, #7
 80069f2:	701a      	strb	r2, [r3, #0]
      break;
 80069f4:	e009      	b.n	8006a0a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f9ce 	bl	8006d9a <USBD_CtlError>
      return;
 80069fe:	e020      	b.n	8006a42 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9c9 	bl	8006d9a <USBD_CtlError>
    return;
 8006a08:	e01b      	b.n	8006a42 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006a0a:	897b      	ldrh	r3, [r7, #10]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d011      	beq.n	8006a34 <USBD_GetDescriptor+0x218>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00d      	beq.n	8006a34 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88da      	ldrh	r2, [r3, #6]
 8006a1c:	897b      	ldrh	r3, [r7, #10]
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	bf28      	it	cs
 8006a22:	4613      	movcs	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006a28:	897b      	ldrh	r3, [r7, #10]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68f9      	ldr	r1, [r7, #12]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa1e 	bl	8006e70 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	88db      	ldrh	r3, [r3, #6]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa75 	bl	8006f2c <USBD_CtlSendStatus>
  }
}
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	889b      	ldrh	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d130      	bne.n	8006abc <USBD_SetAddress+0x74>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	88db      	ldrh	r3, [r3, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d12c      	bne.n	8006abc <USBD_SetAddress+0x74>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	885b      	ldrh	r3, [r3, #2]
 8006a66:	2b7f      	cmp	r3, #127	; 0x7f
 8006a68:	d828      	bhi.n	8006abc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	885b      	ldrh	r3, [r3, #2]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d104      	bne.n	8006a8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f989 	bl	8006d9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a88:	e01c      	b.n	8006ac4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7bfa      	ldrb	r2, [r7, #15]
 8006a8e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f003 fcec 	bl	800a474 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa45 	bl	8006f2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab0:	e008      	b.n	8006ac4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aba:	e003      	b.n	8006ac4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f96b 	bl	8006d9a <USBD_CtlError>
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	4b41      	ldr	r3, [pc, #260]	; (8006be4 <USBD_SetConfig+0x118>)
 8006ade:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ae0:	4b40      	ldr	r3, [pc, #256]	; (8006be4 <USBD_SetConfig+0x118>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d904      	bls.n	8006af2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f955 	bl	8006d9a <USBD_CtlError>
 8006af0:	e075      	b.n	8006bde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d002      	beq.n	8006b02 <USBD_SetConfig+0x36>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d023      	beq.n	8006b48 <USBD_SetConfig+0x7c>
 8006b00:	e062      	b.n	8006bc8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006b02:	4b38      	ldr	r3, [pc, #224]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01a      	beq.n	8006b40 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006b0a:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2203      	movs	r2, #3
 8006b18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b1c:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fa0d 	bl	8005f42 <USBD_SetClassConfig>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d104      	bne.n	8006b38 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f932 	bl	8006d9a <USBD_CtlError>
          return;
 8006b36:	e052      	b.n	8006bde <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9f7 	bl	8006f2c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006b3e:	e04e      	b.n	8006bde <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f9f3 	bl	8006f2c <USBD_CtlSendStatus>
      break;
 8006b46:	e04a      	b.n	8006bde <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b48:	4b26      	ldr	r3, [pc, #152]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d112      	bne.n	8006b76 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006b58:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b62:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fa09 	bl	8005f80 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9dc 	bl	8006f2c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006b74:	e033      	b.n	8006bde <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006b76:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d01d      	beq.n	8006bc0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff f9f7 	bl	8005f80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b92:	4b14      	ldr	r3, [pc, #80]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b9c:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <USBD_SetConfig+0x118>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff f9cd 	bl	8005f42 <USBD_SetClassConfig>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d104      	bne.n	8006bb8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f8f2 	bl	8006d9a <USBD_CtlError>
          return;
 8006bb6:	e012      	b.n	8006bde <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f9b7 	bl	8006f2c <USBD_CtlSendStatus>
      break;
 8006bbe:	e00e      	b.n	8006bde <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f9b3 	bl	8006f2c <USBD_CtlSendStatus>
      break;
 8006bc6:	e00a      	b.n	8006bde <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8e5 	bl	8006d9a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <USBD_SetConfig+0x118>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff f9d2 	bl	8005f80 <USBD_ClrClassConfig>
      break;
 8006bdc:	bf00      	nop
    }
  }
}
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20000214 	.word	0x20000214

08006be8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d004      	beq.n	8006c04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f8cc 	bl	8006d9a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006c02:	e021      	b.n	8006c48 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	db17      	blt.n	8006c3e <USBD_GetConfig+0x56>
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	dd02      	ble.n	8006c18 <USBD_GetConfig+0x30>
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d00b      	beq.n	8006c2e <USBD_GetConfig+0x46>
 8006c16:	e012      	b.n	8006c3e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3308      	adds	r3, #8
 8006c22:	2201      	movs	r2, #1
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f922 	bl	8006e70 <USBD_CtlSendData>
      break;
 8006c2c:	e00c      	b.n	8006c48 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3304      	adds	r3, #4
 8006c32:	2201      	movs	r2, #1
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f91a 	bl	8006e70 <USBD_CtlSendData>
      break;
 8006c3c:	e004      	b.n	8006c48 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f8aa 	bl	8006d9a <USBD_CtlError>
      break;
 8006c46:	bf00      	nop
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c60:	3b01      	subs	r3, #1
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d81e      	bhi.n	8006ca4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	88db      	ldrh	r3, [r3, #6]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d004      	beq.n	8006c78 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f892 	bl	8006d9a <USBD_CtlError>
      break;
 8006c76:	e01a      	b.n	8006cae <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f043 0202 	orr.w	r2, r3, #2
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	330c      	adds	r3, #12
 8006c98:	2202      	movs	r2, #2
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f8e7 	bl	8006e70 <USBD_CtlSendData>
    break;
 8006ca2:	e004      	b.n	8006cae <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f877 	bl	8006d9a <USBD_CtlError>
    break;
 8006cac:	bf00      	nop
  }
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d106      	bne.n	8006cd6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f92b 	bl	8006f2c <USBD_CtlSendStatus>
  }

}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d80b      	bhi.n	8006d0c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	885b      	ldrh	r3, [r3, #2]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10c      	bne.n	8006d16 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f911 	bl	8006f2c <USBD_CtlSendStatus>
    }
    break;
 8006d0a:	e004      	b.n	8006d16 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f843 	bl	8006d9a <USBD_CtlError>
    break;
 8006d14:	e000      	b.n	8006d18 <USBD_ClrFeature+0x3a>
    break;
 8006d16:	bf00      	nop
  }
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781a      	ldrb	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	785a      	ldrb	r2, [r3, #1]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	3303      	adds	r3, #3
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	4413      	add	r3, r2
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3305      	adds	r3, #5
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	3306      	adds	r3, #6
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	80da      	strh	r2, [r3, #6]

}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006da4:	2180      	movs	r1, #128	; 0x80
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f003 fafa 	bl	800a3a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f003 faf6 	bl	800a3a0 <USBD_LL_StallEP>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d032      	beq.n	8006e38 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f834 	bl	8006e40 <USBD_GetLen>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	3301      	adds	r3, #1
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	75fa      	strb	r2, [r7, #23]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	75fa      	strb	r2, [r7, #23]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4413      	add	r3, r2
 8006e04:	2203      	movs	r2, #3
 8006e06:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006e08:	e012      	b.n	8006e30 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	60fa      	str	r2, [r7, #12]
 8006e10:	7dfa      	ldrb	r2, [r7, #23]
 8006e12:	1c51      	adds	r1, r2, #1
 8006e14:	75f9      	strb	r1, [r7, #23]
 8006e16:	4611      	mov	r1, r2
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	75fa      	strb	r2, [r7, #23]
 8006e26:	461a      	mov	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e8      	bne.n	8006e0a <USBD_GetString+0x4e>
    }
  }
}
 8006e38:	bf00      	nop
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006e4c:	e005      	b.n	8006e5a <USBD_GetLen+0x1a>
    {
        len++;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	3301      	adds	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3301      	adds	r3, #1
 8006e58:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f5      	bne.n	8006e4e <USBD_GetLen+0xe>
    }

    return len;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	2100      	movs	r1, #0
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f003 fb0a 	bl	800a4b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	2100      	movs	r1, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f003 faf8 	bl	800a4b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2203      	movs	r2, #3
 8006ede:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f003 fafd 	bl	800a4f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f003 faeb 	bl	800a4f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2204      	movs	r2, #4
 8006f38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f003 fab5 	bl	800a4b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2205      	movs	r2, #5
 8006f5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006f62:	2300      	movs	r3, #0
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f003 fac5 	bl	800a4f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f7e:	f3ef 8305 	mrs	r3, IPSR
 8006f82:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10f      	bne.n	8006faa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8e:	607b      	str	r3, [r7, #4]
  return(result);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <osKernelInitialize+0x32>
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <osKernelInitialize+0x64>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d109      	bne.n	8006fb2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006faa:	f06f 0305 	mvn.w	r3, #5
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e00c      	b.n	8006fcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <osKernelInitialize+0x64>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d105      	bne.n	8006fc6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006fba:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <osKernelInitialize+0x64>)
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e002      	b.n	8006fcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000218 	.word	0x20000218

08006fe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe6:	f3ef 8305 	mrs	r3, IPSR
 8006fea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10f      	bne.n	8007012 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	607b      	str	r3, [r7, #4]
  return(result);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <osKernelStart+0x32>
 8006ffe:	4b11      	ldr	r3, [pc, #68]	; (8007044 <osKernelStart+0x64>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d109      	bne.n	800701a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007006:	f3ef 8311 	mrs	r3, BASEPRI
 800700a:	603b      	str	r3, [r7, #0]
  return(result);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007012:	f06f 0305 	mvn.w	r3, #5
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e00e      	b.n	8007038 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800701a:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <osKernelStart+0x64>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d107      	bne.n	8007032 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <osKernelStart+0x64>)
 8007024:	2202      	movs	r2, #2
 8007026:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007028:	f001 f97c 	bl	8008324 <vTaskStartScheduler>
      stat = osOK;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e002      	b.n	8007038 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007032:	f04f 33ff 	mov.w	r3, #4294967295
 8007036:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000218 	.word	0x20000218

08007048 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800704e:	f3ef 8305 	mrs	r3, IPSR
 8007052:	60bb      	str	r3, [r7, #8]
  return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10f      	bne.n	800707a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705a:	f3ef 8310 	mrs	r3, PRIMASK
 800705e:	607b      	str	r3, [r7, #4]
  return(result);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <osKernelGetTickCount+0x32>
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <osKernelGetTickCount+0x4c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d109      	bne.n	8007082 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800706e:	f3ef 8311 	mrs	r3, BASEPRI
 8007072:	603b      	str	r3, [r7, #0]
  return(result);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800707a:	f001 fa77 	bl	800856c <xTaskGetTickCountFromISR>
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	e002      	b.n	8007088 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8007082:	f001 fa63 	bl	800854c <xTaskGetTickCount>
 8007086:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000218 	.word	0x20000218

08007098 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800709c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b092      	sub	sp, #72	; 0x48
 80070b0:	af04      	add	r7, sp, #16
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070bc:	f3ef 8305 	mrs	r3, IPSR
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f040 8094 	bne.w	80071f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ca:	f3ef 8310 	mrs	r3, PRIMASK
 80070ce:	623b      	str	r3, [r7, #32]
  return(result);
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f040 808d 	bne.w	80071f2 <osThreadNew+0x146>
 80070d8:	4b48      	ldr	r3, [pc, #288]	; (80071fc <osThreadNew+0x150>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d106      	bne.n	80070ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e0:	f3ef 8311 	mrs	r3, BASEPRI
 80070e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8082 	bne.w	80071f2 <osThreadNew+0x146>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d07e      	beq.n	80071f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80070f8:	2318      	movs	r3, #24
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80070fc:	2300      	movs	r3, #0
 80070fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007100:	f107 031b 	add.w	r3, r7, #27
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d045      	beq.n	800719e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <osThreadNew+0x74>
        name = attr->name;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <osThreadNew+0x9a>
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	2b38      	cmp	r3, #56	; 0x38
 8007138:	d805      	bhi.n	8007146 <osThreadNew+0x9a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <osThreadNew+0x9e>
        return (NULL);
 8007146:	2300      	movs	r3, #0
 8007148:	e054      	b.n	80071f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <osThreadNew+0xd4>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	2b5b      	cmp	r3, #91	; 0x5b
 8007168:	d90a      	bls.n	8007180 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800716e:	2b00      	cmp	r3, #0
 8007170:	d006      	beq.n	8007180 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <osThreadNew+0xd4>
        mem = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
 800717e:	e010      	b.n	80071a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10c      	bne.n	80071a2 <osThreadNew+0xf6>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d108      	bne.n	80071a2 <osThreadNew+0xf6>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <osThreadNew+0xf6>
          mem = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	62bb      	str	r3, [r7, #40]	; 0x28
 800719c:	e001      	b.n	80071a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d110      	bne.n	80071ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071b0:	9202      	str	r2, [sp, #8]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fe5e 	bl	8007e80 <xTaskCreateStatic>
 80071c4:	4603      	mov	r3, r0
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e013      	b.n	80071f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d110      	bne.n	80071f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f107 0314 	add.w	r3, r7, #20
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 feab 	bl	8007f3e <xTaskCreate>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d001      	beq.n	80071f2 <osThreadNew+0x146>
          hTask = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071f2:	697b      	ldr	r3, [r7, #20]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3738      	adds	r7, #56	; 0x38
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000218 	.word	0x20000218

08007200 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007208:	f3ef 8305 	mrs	r3, IPSR
 800720c:	613b      	str	r3, [r7, #16]
  return(result);
 800720e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10f      	bne.n	8007234 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007214:	f3ef 8310 	mrs	r3, PRIMASK
 8007218:	60fb      	str	r3, [r7, #12]
  return(result);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <osDelay+0x34>
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <osDelay+0x58>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d109      	bne.n	800723c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007228:	f3ef 8311 	mrs	r3, BASEPRI
 800722c:	60bb      	str	r3, [r7, #8]
  return(result);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <osDelay+0x3c>
    stat = osErrorISR;
 8007234:	f06f 0305 	mvn.w	r3, #5
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	e007      	b.n	800724c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 f836 	bl	80082b8 <vTaskDelay>
    }
  }

  return (stat);
 800724c:	697b      	ldr	r3, [r7, #20]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000218 	.word	0x20000218

0800725c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007264:	f3ef 8305 	mrs	r3, IPSR
 8007268:	61bb      	str	r3, [r7, #24]
  return(result);
 800726a:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10f      	bne.n	8007290 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007270:	f3ef 8310 	mrs	r3, PRIMASK
 8007274:	617b      	str	r3, [r7, #20]
  return(result);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d109      	bne.n	8007290 <osDelayUntil+0x34>
 800727c:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <osDelayUntil+0x64>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d109      	bne.n	8007298 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007284:	f3ef 8311 	mrs	r3, BASEPRI
 8007288:	613b      	str	r3, [r7, #16]
  return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8007290:	f06f 0305 	mvn.w	r3, #5
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	e00e      	b.n	80072b6 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800729c:	f001 f956 	bl	800854c <xTaskGetTickCount>
 80072a0:	4603      	mov	r3, r0
 80072a2:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 ff81 	bl	80081b8 <vTaskDelayUntil>
  }

  return (stat);
 80072b6:	69fb      	ldr	r3, [r7, #28]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000218 	.word	0x20000218

080072c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80072d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4a06      	ldr	r2, [pc, #24]	; (80072f4 <vApplicationGetIdleTaskMemory+0x30>)
 80072da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2280      	movs	r2, #128	; 0x80
 80072e0:	601a      	str	r2, [r3, #0]
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	2000021c 	.word	0x2000021c
 80072f4:	20000278 	.word	0x20000278

080072f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a07      	ldr	r2, [pc, #28]	; (8007324 <vApplicationGetTimerTaskMemory+0x2c>)
 8007308:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4a06      	ldr	r2, [pc, #24]	; (8007328 <vApplicationGetTimerTaskMemory+0x30>)
 800730e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007316:	601a      	str	r2, [r3, #0]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	20000478 	.word	0x20000478
 8007328:	200004d4 	.word	0x200004d4

0800732c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f103 0208 	add.w	r2, r3, #8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f103 0208 	add.w	r2, r3, #8
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f103 0208 	add.w	r2, r3, #8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d103      	bne.n	80073ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e00c      	b.n	8007408 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3308      	adds	r3, #8
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e002      	b.n	80073fc <vListInsert+0x2e>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	429a      	cmp	r2, r3
 8007406:	d2f6      	bcs.n	80073f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6892      	ldr	r2, [r2, #8]
 8007456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6852      	ldr	r2, [r2, #4]
 8007460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d103      	bne.n	8007474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	1e5a      	subs	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	b672      	cpsid	i
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	b662      	cpsie	i
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	e7fe      	b.n	80074be <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80074c0:	f002 f89a 	bl	80095f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	441a      	add	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	3b01      	subs	r3, #1
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	441a      	add	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	22ff      	movs	r2, #255	; 0xff
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	22ff      	movs	r2, #255	; 0xff
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d114      	bne.n	8007540 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01a      	beq.n	8007554 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3310      	adds	r3, #16
 8007522:	4618      	mov	r0, r3
 8007524:	f001 f9a4 	bl	8008870 <xTaskRemoveFromEventList>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d012      	beq.n	8007554 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <xQueueGenericReset+0xd0>)
 8007530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	e009      	b.n	8007554 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3310      	adds	r3, #16
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fef1 	bl	800732c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3324      	adds	r3, #36	; 0x24
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff feec 	bl	800732c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007554:	f002 f882 	bl	800965c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007558:	2301      	movs	r3, #1
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08e      	sub	sp, #56	; 0x38
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10b      	bne.n	8007594 <xQueueGenericCreateStatic+0x2c>
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	b672      	cpsid	i
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	b662      	cpsie	i
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
 8007592:	e7fe      	b.n	8007592 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <xQueueGenericCreateStatic+0x4a>
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	b672      	cpsid	i
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	b662      	cpsie	i
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
 80075b0:	e7fe      	b.n	80075b0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <xQueueGenericCreateStatic+0x56>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <xQueueGenericCreateStatic+0x5a>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <xQueueGenericCreateStatic+0x5c>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xQueueGenericCreateStatic+0x78>
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	b672      	cpsid	i
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	b662      	cpsie	i
 80075dc:	623b      	str	r3, [r7, #32]
 80075de:	e7fe      	b.n	80075de <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <xQueueGenericCreateStatic+0x84>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <xQueueGenericCreateStatic+0x88>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <xQueueGenericCreateStatic+0x8a>
 80075f0:	2300      	movs	r3, #0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <xQueueGenericCreateStatic+0xa6>
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e7fe      	b.n	800760c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800760e:	2350      	movs	r3, #80	; 0x50
 8007610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b50      	cmp	r3, #80	; 0x50
 8007616:	d00b      	beq.n	8007630 <xQueueGenericCreateStatic+0xc8>
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	b672      	cpsid	i
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	b662      	cpsie	i
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	e7fe      	b.n	800762e <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00d      	beq.n	8007656 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007642:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f805 	bl	8007660 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007658:	4618      	mov	r0, r3
 800765a:	3730      	adds	r7, #48	; 0x30
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e002      	b.n	8007682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800768e:	2101      	movs	r1, #1
 8007690:	69b8      	ldr	r0, [r7, #24]
 8007692:	f7ff feff 	bl	8007494 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08e      	sub	sp, #56	; 0x38
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076b6:	2300      	movs	r3, #0
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10b      	bne.n	80076dc <xQueueGenericSend+0x34>
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	b672      	cpsid	i
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	b662      	cpsie	i
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076da:	e7fe      	b.n	80076da <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <xQueueGenericSend+0x42>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <xQueueGenericSend+0x46>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <xQueueGenericSend+0x48>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10b      	bne.n	800770c <xQueueGenericSend+0x64>
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	b672      	cpsid	i
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	b662      	cpsie	i
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
 800770a:	e7fe      	b.n	800770a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d103      	bne.n	800771a <xQueueGenericSend+0x72>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <xQueueGenericSend+0x76>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueGenericSend+0x78>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xQueueGenericSend+0x94>
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	b672      	cpsid	i
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	b662      	cpsie	i
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	e7fe      	b.n	800773a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800773c:	f001 fa5c 	bl	8008bf8 <xTaskGetSchedulerState>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <xQueueGenericSend+0xa4>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <xQueueGenericSend+0xa8>
 800774c:	2301      	movs	r3, #1
 800774e:	e000      	b.n	8007752 <xQueueGenericSend+0xaa>
 8007750:	2300      	movs	r3, #0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <xQueueGenericSend+0xc6>
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	b672      	cpsid	i
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	b662      	cpsie	i
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e7fe      	b.n	800776c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800776e:	f001 ff43 	bl	80095f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777a:	429a      	cmp	r2, r3
 800777c:	d302      	bcc.n	8007784 <xQueueGenericSend+0xdc>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d129      	bne.n	80077d8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800778a:	f000 fa0d 	bl	8007ba8 <prvCopyDataToQueue>
 800778e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d010      	beq.n	80077ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f001 f867 	bl	8008870 <xTaskRemoveFromEventList>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077a8:	4b3f      	ldr	r3, [pc, #252]	; (80078a8 <xQueueGenericSend+0x200>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	e00a      	b.n	80077d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077c0:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <xQueueGenericSend+0x200>)
 80077c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077d0:	f001 ff44 	bl	800965c <vPortExitCritical>
				return pdPASS;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e063      	b.n	80078a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077de:	f001 ff3d 	bl	800965c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e05c      	b.n	80078a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077ec:	f107 0314 	add.w	r3, r7, #20
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f8a1 	bl	8008938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077f6:	2301      	movs	r3, #1
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077fa:	f001 ff2f 	bl	800965c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077fe:	f000 fdf9 	bl	80083f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007802:	f001 fef9 	bl	80095f8 <vPortEnterCritical>
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800780c:	b25b      	sxtb	r3, r3
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d103      	bne.n	800781c <xQueueGenericSend+0x174>
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007822:	b25b      	sxtb	r3, r3
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007828:	d103      	bne.n	8007832 <xQueueGenericSend+0x18a>
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007832:	f001 ff13 	bl	800965c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007836:	1d3a      	adds	r2, r7, #4
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f001 f890 	bl	8008964 <xTaskCheckForTimeOut>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d124      	bne.n	8007894 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800784a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800784c:	f000 faa4 	bl	8007d98 <prvIsQueueFull>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d018      	beq.n	8007888 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	3310      	adds	r3, #16
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f000 ffb4 	bl	80087cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007866:	f000 fa2f 	bl	8007cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800786a:	f000 fdd1 	bl	8008410 <xTaskResumeAll>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	f47f af7c 	bne.w	800776e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <xQueueGenericSend+0x200>)
 8007878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	e772      	b.n	800776e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800788a:	f000 fa1d 	bl	8007cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800788e:	f000 fdbf 	bl	8008410 <xTaskResumeAll>
 8007892:	e76c      	b.n	800776e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007896:	f000 fa17 	bl	8007cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800789a:	f000 fdb9 	bl	8008410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800789e:	2300      	movs	r3, #0
		}
	}
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3738      	adds	r7, #56	; 0x38
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08e      	sub	sp, #56	; 0x38
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10b      	bne.n	80078dc <xQueueGenericSendFromISR+0x30>
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	b672      	cpsid	i
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	b662      	cpsie	i
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
 80078da:	e7fe      	b.n	80078da <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <xQueueGenericSendFromISR+0x3e>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <xQueueGenericSendFromISR+0x42>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <xQueueGenericSendFromISR+0x44>
 80078ee:	2300      	movs	r3, #0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10b      	bne.n	800790c <xQueueGenericSendFromISR+0x60>
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	b672      	cpsid	i
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	b662      	cpsie	i
 8007908:	623b      	str	r3, [r7, #32]
 800790a:	e7fe      	b.n	800790a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d103      	bne.n	800791a <xQueueGenericSendFromISR+0x6e>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <xQueueGenericSendFromISR+0x72>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <xQueueGenericSendFromISR+0x74>
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10b      	bne.n	800793c <xQueueGenericSendFromISR+0x90>
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	b672      	cpsid	i
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	b662      	cpsie	i
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	e7fe      	b.n	800793a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800793c:	f001 ff3c 	bl	80097b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007940:	f3ef 8211 	mrs	r2, BASEPRI
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
 8007958:	61ba      	str	r2, [r7, #24]
 800795a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800795c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	429a      	cmp	r2, r3
 800796a:	d302      	bcc.n	8007972 <xQueueGenericSendFromISR+0xc6>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d12c      	bne.n	80079cc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007982:	f000 f911 	bl	8007ba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007986:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d112      	bne.n	80079b6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d016      	beq.n	80079c6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	4618      	mov	r0, r3
 800799e:	f000 ff67 	bl	8008870 <xTaskRemoveFromEventList>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00e      	beq.n	80079c6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e007      	b.n	80079c6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079ba:	3301      	adds	r3, #1
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	b25a      	sxtb	r2, r3
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079c6:	2301      	movs	r3, #1
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80079ca:	e001      	b.n	80079d0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3738      	adds	r7, #56	; 0x38
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08c      	sub	sp, #48	; 0x30
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <xQueueReceive+0x32>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	b672      	cpsid	i
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	b662      	cpsie	i
 8007a12:	623b      	str	r3, [r7, #32]
 8007a14:	e7fe      	b.n	8007a14 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <xQueueReceive+0x40>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <xQueueReceive+0x44>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <xQueueReceive+0x46>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <xQueueReceive+0x62>
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	b672      	cpsid	i
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	b662      	cpsie	i
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e7fe      	b.n	8007a44 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a46:	f001 f8d7 	bl	8008bf8 <xTaskGetSchedulerState>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <xQueueReceive+0x72>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <xQueueReceive+0x76>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueReceive+0x78>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <xQueueReceive+0x94>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	b672      	cpsid	i
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	b662      	cpsie	i
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e7fe      	b.n	8007a76 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a78:	f001 fdbe 	bl	80095f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01f      	beq.n	8007ac8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a8c:	f000 f8f6 	bl	8007c7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	1e5a      	subs	r2, r3, #1
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00f      	beq.n	8007ac0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	3310      	adds	r3, #16
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fee3 	bl	8008870 <xTaskRemoveFromEventList>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ab0:	4b3c      	ldr	r3, [pc, #240]	; (8007ba4 <xQueueReceive+0x1c0>)
 8007ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ac0:	f001 fdcc 	bl	800965c <vPortExitCritical>
				return pdPASS;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e069      	b.n	8007b9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d103      	bne.n	8007ad6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ace:	f001 fdc5 	bl	800965c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e062      	b.n	8007b9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007adc:	f107 0310 	add.w	r3, r7, #16
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 ff29 	bl	8008938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aea:	f001 fdb7 	bl	800965c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aee:	f000 fc81 	bl	80083f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007af2:	f001 fd81 	bl	80095f8 <vPortEnterCritical>
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007afc:	b25b      	sxtb	r3, r3
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d103      	bne.n	8007b0c <xQueueReceive+0x128>
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b12:	b25b      	sxtb	r3, r3
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d103      	bne.n	8007b22 <xQueueReceive+0x13e>
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b22:	f001 fd9b 	bl	800965c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b26:	1d3a      	adds	r2, r7, #4
 8007b28:	f107 0310 	add.w	r3, r7, #16
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 ff18 	bl	8008964 <xTaskCheckForTimeOut>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d123      	bne.n	8007b82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b3c:	f000 f916 	bl	8007d6c <prvIsQueueEmpty>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d017      	beq.n	8007b76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	3324      	adds	r3, #36	; 0x24
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fe3c 	bl	80087cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b56:	f000 f8b7 	bl	8007cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b5a:	f000 fc59 	bl	8008410 <xTaskResumeAll>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d189      	bne.n	8007a78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <xQueueReceive+0x1c0>)
 8007b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	e780      	b.n	8007a78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b78:	f000 f8a6 	bl	8007cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b7c:	f000 fc48 	bl	8008410 <xTaskResumeAll>
 8007b80:	e77a      	b.n	8007a78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b84:	f000 f8a0 	bl	8007cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b88:	f000 fc42 	bl	8008410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8e:	f000 f8ed 	bl	8007d6c <prvIsQueueEmpty>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f43f af6f 	beq.w	8007a78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3730      	adds	r7, #48	; 0x30
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	e000ed04 	.word	0xe000ed04

08007ba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10d      	bne.n	8007be2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d14d      	bne.n	8007c6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f001 f82e 	bl	8008c34 <xTaskPriorityDisinherit>
 8007bd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	e043      	b.n	8007c6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d119      	bne.n	8007c1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6898      	ldr	r0, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	f002 fd70 	bl	800a6d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d32b      	bcc.n	8007c6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	609a      	str	r2, [r3, #8]
 8007c1a:	e026      	b.n	8007c6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68d8      	ldr	r0, [r3, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	461a      	mov	r2, r3
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	f002 fd56 	bl	800a6d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	425b      	negs	r3, r3
 8007c36:	441a      	add	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d207      	bcs.n	8007c58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	425b      	negs	r3, r3
 8007c52:	441a      	add	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d105      	bne.n	8007c6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007c72:	697b      	ldr	r3, [r7, #20]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d018      	beq.n	8007cc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	441a      	add	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d303      	bcc.n	8007cb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68d9      	ldr	r1, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6838      	ldr	r0, [r7, #0]
 8007cbc:	f002 fd0c 	bl	800a6d8 <memcpy>
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cd0:	f001 fc92 	bl	80095f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cdc:	e011      	b.n	8007d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d012      	beq.n	8007d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3324      	adds	r3, #36	; 0x24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fdc0 	bl	8008870 <xTaskRemoveFromEventList>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cf6:	f000 fe99 	bl	8008a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dce9      	bgt.n	8007cde <prvUnlockQueue+0x16>
 8007d0a:	e000      	b.n	8007d0e <prvUnlockQueue+0x46>
					break;
 8007d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	22ff      	movs	r2, #255	; 0xff
 8007d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d16:	f001 fca1 	bl	800965c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d1a:	f001 fc6d 	bl	80095f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d26:	e011      	b.n	8007d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d012      	beq.n	8007d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3310      	adds	r3, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fd9b 	bl	8008870 <xTaskRemoveFromEventList>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d40:	f000 fe74 	bl	8008a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dce9      	bgt.n	8007d28 <prvUnlockQueue+0x60>
 8007d54:	e000      	b.n	8007d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	22ff      	movs	r2, #255	; 0xff
 8007d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d60:	f001 fc7c 	bl	800965c <vPortExitCritical>
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d74:	f001 fc40 	bl	80095f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e001      	b.n	8007d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d8a:	f001 fc67 	bl	800965c <vPortExitCritical>

	return xReturn;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da0:	f001 fc2a 	bl	80095f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d102      	bne.n	8007db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007db0:	2301      	movs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e001      	b.n	8007dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dba:	f001 fc4f 	bl	800965c <vPortExitCritical>

	return xReturn;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	e014      	b.n	8007e02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dd8:	4a0e      	ldr	r2, [pc, #56]	; (8007e14 <vQueueAddToRegistry+0x4c>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007de4:	490b      	ldr	r1, [pc, #44]	; (8007e14 <vQueueAddToRegistry+0x4c>)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007dee:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <vQueueAddToRegistry+0x4c>)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4413      	add	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007dfa:	e005      	b.n	8007e08 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d9e7      	bls.n	8007dd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	20006490 	.word	0x20006490

08007e18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e28:	f001 fbe6 	bl	80095f8 <vPortEnterCritical>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e32:	b25b      	sxtb	r3, r3
 8007e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e38:	d103      	bne.n	8007e42 <vQueueWaitForMessageRestricted+0x2a>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e48:	b25b      	sxtb	r3, r3
 8007e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4e:	d103      	bne.n	8007e58 <vQueueWaitForMessageRestricted+0x40>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e58:	f001 fc00 	bl	800965c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	3324      	adds	r3, #36	; 0x24
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fcd3 	bl	8008818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e72:	6978      	ldr	r0, [r7, #20]
 8007e74:	f7ff ff28 	bl	8007cc8 <prvUnlockQueue>
	}
 8007e78:	bf00      	nop
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08e      	sub	sp, #56	; 0x38
 8007e84:	af04      	add	r7, sp, #16
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <xTaskCreateStatic+0x2c>
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	b672      	cpsid	i
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	b662      	cpsie	i
 8007ea8:	623b      	str	r3, [r7, #32]
 8007eaa:	e7fe      	b.n	8007eaa <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10b      	bne.n	8007eca <xTaskCreateStatic+0x4a>
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	b672      	cpsid	i
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	b662      	cpsie	i
 8007ec6:	61fb      	str	r3, [r7, #28]
 8007ec8:	e7fe      	b.n	8007ec8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007eca:	235c      	movs	r3, #92	; 0x5c
 8007ecc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ed2:	d00b      	beq.n	8007eec <xTaskCreateStatic+0x6c>
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	e7fe      	b.n	8007eea <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01e      	beq.n	8007f30 <xTaskCreateStatic+0xb0>
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01b      	beq.n	8007f30 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9303      	str	r3, [sp, #12]
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	9302      	str	r3, [sp, #8]
 8007f12:	f107 0314 	add.w	r3, r7, #20
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f850 	bl	8007fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f2a:	f000 f8d5 	bl	80080d8 <prvAddNewTaskToReadyList>
 8007f2e:	e001      	b.n	8007f34 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f34:	697b      	ldr	r3, [r7, #20]
	}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3728      	adds	r7, #40	; 0x28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b08c      	sub	sp, #48	; 0x30
 8007f42:	af04      	add	r7, sp, #16
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 fc72 	bl	800983c <pvPortMalloc>
 8007f58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00e      	beq.n	8007f7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f60:	205c      	movs	r0, #92	; 0x5c
 8007f62:	f001 fc6b 	bl	800983c <pvPortMalloc>
 8007f66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30
 8007f74:	e005      	b.n	8007f82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f76:	6978      	ldr	r0, [r7, #20]
 8007f78:	f001 fd28 	bl	80099cc <vPortFree>
 8007f7c:	e001      	b.n	8007f82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d017      	beq.n	8007fb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	2300      	movs	r3, #0
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f80e 	bl	8007fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fac:	69f8      	ldr	r0, [r7, #28]
 8007fae:	f000 f893 	bl	80080d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	e002      	b.n	8007fbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	461a      	mov	r2, r3
 8007fe0:	21a5      	movs	r1, #165	; 0xa5
 8007fe2:	f002 fb84 	bl	800a6ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007ff0:	440b      	add	r3, r1
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <prvInitialiseNewTask+0x5a>
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	b672      	cpsid	i
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	b662      	cpsie	i
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e7fe      	b.n	8008020 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
 8008026:	e012      	b.n	800804e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	7819      	ldrb	r1, [r3, #0]
 8008030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	3334      	adds	r3, #52	; 0x34
 8008038:	460a      	mov	r2, r1
 800803a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d006      	beq.n	8008056 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	3301      	adds	r3, #1
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	2b0f      	cmp	r3, #15
 8008052:	d9e9      	bls.n	8008028 <prvInitialiseNewTask+0x60>
 8008054:	e000      	b.n	8008058 <prvInitialiseNewTask+0x90>
		{
			break;
 8008056:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b37      	cmp	r3, #55	; 0x37
 8008064:	d901      	bls.n	800806a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008066:	2337      	movs	r3, #55	; 0x37
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008074:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	2200      	movs	r2, #0
 800807a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	3304      	adds	r3, #4
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff f973 	bl	800736c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	3318      	adds	r3, #24
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff f96e 	bl	800736c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008094:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	2200      	movs	r2, #0
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	69b8      	ldr	r0, [r7, #24]
 80080ba:	f001 f997 	bl	80093ec <pxPortInitialiseStack>
 80080be:	4602      	mov	r2, r0
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080d0:	bf00      	nop
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080e0:	f001 fa8a 	bl	80095f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080e4:	4b2d      	ldr	r3, [pc, #180]	; (800819c <prvAddNewTaskToReadyList+0xc4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	4a2c      	ldr	r2, [pc, #176]	; (800819c <prvAddNewTaskToReadyList+0xc4>)
 80080ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080ee:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080f6:	4a2a      	ldr	r2, [pc, #168]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080fc:	4b27      	ldr	r3, [pc, #156]	; (800819c <prvAddNewTaskToReadyList+0xc4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d110      	bne.n	8008126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008104:	f000 fcb6 	bl	8008a74 <prvInitialiseTaskLists>
 8008108:	e00d      	b.n	8008126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <prvAddNewTaskToReadyList+0xcc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008112:	4b23      	ldr	r3, [pc, #140]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	429a      	cmp	r2, r3
 800811e:	d802      	bhi.n	8008126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008120:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008126:	4b20      	ldr	r3, [pc, #128]	; (80081a8 <prvAddNewTaskToReadyList+0xd0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	4a1e      	ldr	r2, [pc, #120]	; (80081a8 <prvAddNewTaskToReadyList+0xd0>)
 800812e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008130:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <prvAddNewTaskToReadyList+0xd0>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <prvAddNewTaskToReadyList+0xd4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d903      	bls.n	800814c <prvAddNewTaskToReadyList+0x74>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	4a18      	ldr	r2, [pc, #96]	; (80081ac <prvAddNewTaskToReadyList+0xd4>)
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <prvAddNewTaskToReadyList+0xd8>)
 800815a:	441a      	add	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7ff f90f 	bl	8007386 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008168:	f001 fa78 	bl	800965c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <prvAddNewTaskToReadyList+0xcc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00e      	beq.n	8008192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	429a      	cmp	r2, r3
 8008180:	d207      	bcs.n	8008192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <prvAddNewTaskToReadyList+0xdc>)
 8008184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000da8 	.word	0x20000da8
 80081a0:	200008d4 	.word	0x200008d4
 80081a4:	20000db4 	.word	0x20000db4
 80081a8:	20000dc4 	.word	0x20000dc4
 80081ac:	20000db0 	.word	0x20000db0
 80081b0:	200008d8 	.word	0x200008d8
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <vTaskDelayUntil+0x2c>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	b672      	cpsid	i
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	b662      	cpsie	i
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	e7fe      	b.n	80081e2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <vTaskDelayUntil+0x4a>
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	b672      	cpsid	i
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	b662      	cpsie	i
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	e7fe      	b.n	8008200 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8008202:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <vTaskDelayUntil+0xf4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <vTaskDelayUntil+0x6a>
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	b672      	cpsid	i
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	b662      	cpsie	i
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e7fe      	b.n	8008220 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8008222:	f000 f8e7 	bl	80083f4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008226:	4b22      	ldr	r3, [pc, #136]	; (80082b0 <vTaskDelayUntil+0xf8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	4413      	add	r3, r2
 8008234:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6a3a      	ldr	r2, [r7, #32]
 800823c:	429a      	cmp	r2, r3
 800823e:	d20b      	bcs.n	8008258 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	429a      	cmp	r2, r3
 8008248:	d211      	bcs.n	800826e <vTaskDelayUntil+0xb6>
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	429a      	cmp	r2, r3
 8008250:	d90d      	bls.n	800826e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008252:	2301      	movs	r3, #1
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	e00a      	b.n	800826e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	429a      	cmp	r2, r3
 8008260:	d303      	bcc.n	800826a <vTaskDelayUntil+0xb2>
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	429a      	cmp	r2, r3
 8008268:	d901      	bls.n	800826e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800826a:	2301      	movs	r3, #1
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d006      	beq.n	8008288 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fd46 	bl	8008d14 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008288:	f000 f8c2 	bl	8008410 <xTaskResumeAll>
 800828c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d107      	bne.n	80082a4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <vTaskDelayUntil+0xfc>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082a4:	bf00      	nop
 80082a6:	3728      	adds	r7, #40	; 0x28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20000dd0 	.word	0x20000dd0
 80082b0:	20000dac 	.word	0x20000dac
 80082b4:	e000ed04 	.word	0xe000ed04

080082b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d018      	beq.n	80082fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082ca:	4b14      	ldr	r3, [pc, #80]	; (800831c <vTaskDelay+0x64>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <vTaskDelay+0x32>
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	b672      	cpsid	i
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	b662      	cpsie	i
 80082e6:	60bb      	str	r3, [r7, #8]
 80082e8:	e7fe      	b.n	80082e8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80082ea:	f000 f883 	bl	80083f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fd0f 	bl	8008d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082f6:	f000 f88b 	bl	8008410 <xTaskResumeAll>
 80082fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d107      	bne.n	8008312 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <vTaskDelay+0x68>)
 8008304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000dd0 	.word	0x20000dd0
 8008320:	e000ed04 	.word	0xe000ed04

08008324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008332:	463a      	mov	r2, r7
 8008334:	1d39      	adds	r1, r7, #4
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe ffc2 	bl	80072c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	9202      	str	r2, [sp, #8]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	2300      	movs	r3, #0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	460a      	mov	r2, r1
 8008352:	4922      	ldr	r1, [pc, #136]	; (80083dc <vTaskStartScheduler+0xb8>)
 8008354:	4822      	ldr	r0, [pc, #136]	; (80083e0 <vTaskStartScheduler+0xbc>)
 8008356:	f7ff fd93 	bl	8007e80 <xTaskCreateStatic>
 800835a:	4602      	mov	r2, r0
 800835c:	4b21      	ldr	r3, [pc, #132]	; (80083e4 <vTaskStartScheduler+0xc0>)
 800835e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008360:	4b20      	ldr	r3, [pc, #128]	; (80083e4 <vTaskStartScheduler+0xc0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008368:	2301      	movs	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e001      	b.n	8008372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d102      	bne.n	800837e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008378:	f000 fd20 	bl	8008dbc <xTimerCreateTimerTask>
 800837c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d117      	bne.n	80083b4 <vTaskStartScheduler+0x90>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	b672      	cpsid	i
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	b662      	cpsie	i
 8008398:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <vTaskStartScheduler+0xc4>)
 800839c:	f04f 32ff 	mov.w	r2, #4294967295
 80083a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <vTaskStartScheduler+0xc8>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80083a8:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <vTaskStartScheduler+0xcc>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083ae:	f001 f8a7 	bl	8009500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083b2:	e00f      	b.n	80083d4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d10b      	bne.n	80083d4 <vTaskStartScheduler+0xb0>
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	b672      	cpsid	i
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	b662      	cpsie	i
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	e7fe      	b.n	80083d2 <vTaskStartScheduler+0xae>
}
 80083d4:	bf00      	nop
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	0800b97c 	.word	0x0800b97c
 80083e0:	08008a45 	.word	0x08008a45
 80083e4:	20000dcc 	.word	0x20000dcc
 80083e8:	20000dc8 	.word	0x20000dc8
 80083ec:	20000db4 	.word	0x20000db4
 80083f0:	20000dac 	.word	0x20000dac

080083f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <vTaskSuspendAll+0x18>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3301      	adds	r3, #1
 80083fe:	4a03      	ldr	r2, [pc, #12]	; (800840c <vTaskSuspendAll+0x18>)
 8008400:	6013      	str	r3, [r2, #0]
}
 8008402:	bf00      	nop
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	20000dd0 	.word	0x20000dd0

08008410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800841a:	2300      	movs	r3, #0
 800841c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800841e:	4b42      	ldr	r3, [pc, #264]	; (8008528 <xTaskResumeAll+0x118>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10b      	bne.n	800843e <xTaskResumeAll+0x2e>
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	e7fe      	b.n	800843c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800843e:	f001 f8db 	bl	80095f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008442:	4b39      	ldr	r3, [pc, #228]	; (8008528 <xTaskResumeAll+0x118>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a37      	ldr	r2, [pc, #220]	; (8008528 <xTaskResumeAll+0x118>)
 800844a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <xTaskResumeAll+0x118>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d162      	bne.n	800851a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008454:	4b35      	ldr	r3, [pc, #212]	; (800852c <xTaskResumeAll+0x11c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d05e      	beq.n	800851a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800845c:	e02f      	b.n	80084be <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800845e:	4b34      	ldr	r3, [pc, #208]	; (8008530 <xTaskResumeAll+0x120>)
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3318      	adds	r3, #24
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe ffe8 	bl	8007440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe ffe3 	bl	8007440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	4b2d      	ldr	r3, [pc, #180]	; (8008534 <xTaskResumeAll+0x124>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d903      	bls.n	800848e <xTaskResumeAll+0x7e>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <xTaskResumeAll+0x124>)
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4a27      	ldr	r2, [pc, #156]	; (8008538 <xTaskResumeAll+0x128>)
 800849c:	441a      	add	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f7fe ff6e 	bl	8007386 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	4b23      	ldr	r3, [pc, #140]	; (800853c <xTaskResumeAll+0x12c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d302      	bcc.n	80084be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084b8:	4b21      	ldr	r3, [pc, #132]	; (8008540 <xTaskResumeAll+0x130>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084be:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <xTaskResumeAll+0x120>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1cb      	bne.n	800845e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084cc:	f000 fb6e 	bl	8008bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084d0:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <xTaskResumeAll+0x134>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d010      	beq.n	80084fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084dc:	f000 f858 	bl	8008590 <xTaskIncrementTick>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084e6:	4b16      	ldr	r3, [pc, #88]	; (8008540 <xTaskResumeAll+0x130>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f1      	bne.n	80084dc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80084f8:	4b12      	ldr	r3, [pc, #72]	; (8008544 <xTaskResumeAll+0x134>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084fe:	4b10      	ldr	r3, [pc, #64]	; (8008540 <xTaskResumeAll+0x130>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskResumeAll+0x138>)
 800850c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800851a:	f001 f89f 	bl	800965c <vPortExitCritical>

	return xAlreadyYielded;
 800851e:	68bb      	ldr	r3, [r7, #8]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20000dd0 	.word	0x20000dd0
 800852c:	20000da8 	.word	0x20000da8
 8008530:	20000d68 	.word	0x20000d68
 8008534:	20000db0 	.word	0x20000db0
 8008538:	200008d8 	.word	0x200008d8
 800853c:	200008d4 	.word	0x200008d4
 8008540:	20000dbc 	.word	0x20000dbc
 8008544:	20000db8 	.word	0x20000db8
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <xTaskGetTickCount+0x1c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008558:	687b      	ldr	r3, [r7, #4]
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	20000dac 	.word	0x20000dac

0800856c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008572:	f001 f921 	bl	80097b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008576:	2300      	movs	r3, #0
 8008578:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800857a:	4b04      	ldr	r3, [pc, #16]	; (800858c <xTaskGetTickCountFromISR+0x20>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008580:	683b      	ldr	r3, [r7, #0]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000dac 	.word	0x20000dac

08008590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859a:	4b52      	ldr	r3, [pc, #328]	; (80086e4 <xTaskIncrementTick+0x154>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f040 808f 	bne.w	80086c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085a4:	4b50      	ldr	r3, [pc, #320]	; (80086e8 <xTaskIncrementTick+0x158>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085ac:	4a4e      	ldr	r2, [pc, #312]	; (80086e8 <xTaskIncrementTick+0x158>)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d121      	bne.n	80085fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085b8:	4b4c      	ldr	r3, [pc, #304]	; (80086ec <xTaskIncrementTick+0x15c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <xTaskIncrementTick+0x4a>
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	e7fe      	b.n	80085d8 <xTaskIncrementTick+0x48>
 80085da:	4b44      	ldr	r3, [pc, #272]	; (80086ec <xTaskIncrementTick+0x15c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	4b43      	ldr	r3, [pc, #268]	; (80086f0 <xTaskIncrementTick+0x160>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a41      	ldr	r2, [pc, #260]	; (80086ec <xTaskIncrementTick+0x15c>)
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	4a41      	ldr	r2, [pc, #260]	; (80086f0 <xTaskIncrementTick+0x160>)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <xTaskIncrementTick+0x164>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	4a3f      	ldr	r2, [pc, #252]	; (80086f4 <xTaskIncrementTick+0x164>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	f000 fad8 	bl	8008bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085fc:	4b3e      	ldr	r3, [pc, #248]	; (80086f8 <xTaskIncrementTick+0x168>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	429a      	cmp	r2, r3
 8008604:	d34e      	bcc.n	80086a4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008606:	4b39      	ldr	r3, [pc, #228]	; (80086ec <xTaskIncrementTick+0x15c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <xTaskIncrementTick+0x84>
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <xTaskIncrementTick+0x86>
 8008614:	2300      	movs	r3, #0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861a:	4b37      	ldr	r3, [pc, #220]	; (80086f8 <xTaskIncrementTick+0x168>)
 800861c:	f04f 32ff 	mov.w	r2, #4294967295
 8008620:	601a      	str	r2, [r3, #0]
					break;
 8008622:	e03f      	b.n	80086a4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008624:	4b31      	ldr	r3, [pc, #196]	; (80086ec <xTaskIncrementTick+0x15c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	429a      	cmp	r2, r3
 800863a:	d203      	bcs.n	8008644 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800863c:	4a2e      	ldr	r2, [pc, #184]	; (80086f8 <xTaskIncrementTick+0x168>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6013      	str	r3, [r2, #0]
						break;
 8008642:	e02f      	b.n	80086a4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	3304      	adds	r3, #4
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fef9 	bl	8007440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	3318      	adds	r3, #24
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fef0 	bl	8007440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	4b25      	ldr	r3, [pc, #148]	; (80086fc <xTaskIncrementTick+0x16c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d903      	bls.n	8008674 <xTaskIncrementTick+0xe4>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	4a22      	ldr	r2, [pc, #136]	; (80086fc <xTaskIncrementTick+0x16c>)
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	4613      	mov	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <xTaskIncrementTick+0x170>)
 8008682:	441a      	add	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	3304      	adds	r3, #4
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f7fe fe7b 	bl	8007386 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <xTaskIncrementTick+0x174>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869a:	429a      	cmp	r2, r3
 800869c:	d3b3      	bcc.n	8008606 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a2:	e7b0      	b.n	8008606 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086a4:	4b17      	ldr	r3, [pc, #92]	; (8008704 <xTaskIncrementTick+0x174>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	4915      	ldr	r1, [pc, #84]	; (8008700 <xTaskIncrementTick+0x170>)
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d907      	bls.n	80086cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e004      	b.n	80086cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086c2:	4b11      	ldr	r3, [pc, #68]	; (8008708 <xTaskIncrementTick+0x178>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3301      	adds	r3, #1
 80086c8:	4a0f      	ldr	r2, [pc, #60]	; (8008708 <xTaskIncrementTick+0x178>)
 80086ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086cc:	4b0f      	ldr	r3, [pc, #60]	; (800870c <xTaskIncrementTick+0x17c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086d8:	697b      	ldr	r3, [r7, #20]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20000dd0 	.word	0x20000dd0
 80086e8:	20000dac 	.word	0x20000dac
 80086ec:	20000d60 	.word	0x20000d60
 80086f0:	20000d64 	.word	0x20000d64
 80086f4:	20000dc0 	.word	0x20000dc0
 80086f8:	20000dc8 	.word	0x20000dc8
 80086fc:	20000db0 	.word	0x20000db0
 8008700:	200008d8 	.word	0x200008d8
 8008704:	200008d4 	.word	0x200008d4
 8008708:	20000db8 	.word	0x20000db8
 800870c:	20000dbc 	.word	0x20000dbc

08008710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008716:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <vTaskSwitchContext+0xa8>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800871e:	4b27      	ldr	r3, [pc, #156]	; (80087bc <vTaskSwitchContext+0xac>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008724:	e042      	b.n	80087ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008726:	4b25      	ldr	r3, [pc, #148]	; (80087bc <vTaskSwitchContext+0xac>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800872c:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <vTaskSwitchContext+0xb0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e011      	b.n	8008758 <vTaskSwitchContext+0x48>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <vTaskSwitchContext+0x42>
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	b672      	cpsid	i
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	b662      	cpsie	i
 800874e:	607b      	str	r3, [r7, #4]
 8008750:	e7fe      	b.n	8008750 <vTaskSwitchContext+0x40>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3b01      	subs	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	491a      	ldr	r1, [pc, #104]	; (80087c4 <vTaskSwitchContext+0xb4>)
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0e3      	beq.n	8008734 <vTaskSwitchContext+0x24>
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <vTaskSwitchContext+0xb4>)
 8008778:	4413      	add	r3, r2
 800877a:	60bb      	str	r3, [r7, #8]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3308      	adds	r3, #8
 800878e:	429a      	cmp	r2, r3
 8008790:	d104      	bne.n	800879c <vTaskSwitchContext+0x8c>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	605a      	str	r2, [r3, #4]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	4a09      	ldr	r2, [pc, #36]	; (80087c8 <vTaskSwitchContext+0xb8>)
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vTaskSwitchContext+0xb0>)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6013      	str	r3, [r2, #0]
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000dd0 	.word	0x20000dd0
 80087bc:	20000dbc 	.word	0x20000dbc
 80087c0:	20000db0 	.word	0x20000db0
 80087c4:	200008d8 	.word	0x200008d8
 80087c8:	200008d4 	.word	0x200008d4

080087cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10b      	bne.n	80087f4 <vTaskPlaceOnEventList+0x28>
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	b672      	cpsid	i
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	b662      	cpsie	i
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	e7fe      	b.n	80087f2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <vTaskPlaceOnEventList+0x48>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3318      	adds	r3, #24
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f7fe fde6 	bl	80073ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008802:	2101      	movs	r1, #1
 8008804:	6838      	ldr	r0, [r7, #0]
 8008806:	f000 fa85 	bl	8008d14 <prvAddCurrentTaskToDelayedList>
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200008d4 	.word	0x200008d4

08008818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <vTaskPlaceOnEventListRestricted+0x2a>
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	b672      	cpsid	i
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	b662      	cpsie	i
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	e7fe      	b.n	8008840 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <vTaskPlaceOnEventListRestricted+0x54>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3318      	adds	r3, #24
 8008848:	4619      	mov	r1, r3
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7fe fd9b 	bl	8007386 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008856:	f04f 33ff 	mov.w	r3, #4294967295
 800885a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	68b8      	ldr	r0, [r7, #8]
 8008860:	f000 fa58 	bl	8008d14 <prvAddCurrentTaskToDelayedList>
	}
 8008864:	bf00      	nop
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200008d4 	.word	0x200008d4

08008870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <xTaskRemoveFromEventList+0x2e>
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	b672      	cpsid	i
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	b662      	cpsie	i
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e7fe      	b.n	800889c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3318      	adds	r3, #24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fdcc 	bl	8007440 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <xTaskRemoveFromEventList+0xb0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d11d      	bne.n	80088ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fdc3 	bl	8007440 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4b19      	ldr	r3, [pc, #100]	; (8008924 <xTaskRemoveFromEventList+0xb4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <xTaskRemoveFromEventList+0x5e>
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4a16      	ldr	r2, [pc, #88]	; (8008924 <xTaskRemoveFromEventList+0xb4>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a13      	ldr	r2, [pc, #76]	; (8008928 <xTaskRemoveFromEventList+0xb8>)
 80088dc:	441a      	add	r2, r3
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fe fd4e 	bl	8007386 <vListInsertEnd>
 80088ea:	e005      	b.n	80088f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	3318      	adds	r3, #24
 80088f0:	4619      	mov	r1, r3
 80088f2:	480e      	ldr	r0, [pc, #56]	; (800892c <xTaskRemoveFromEventList+0xbc>)
 80088f4:	f7fe fd47 	bl	8007386 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fc:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <xTaskRemoveFromEventList+0xc0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	429a      	cmp	r2, r3
 8008904:	d905      	bls.n	8008912 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800890a:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <xTaskRemoveFromEventList+0xc4>)
 800890c:	2201      	movs	r2, #1
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e001      	b.n	8008916 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008916:	697b      	ldr	r3, [r7, #20]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000dd0 	.word	0x20000dd0
 8008924:	20000db0 	.word	0x20000db0
 8008928:	200008d8 	.word	0x200008d8
 800892c:	20000d68 	.word	0x20000d68
 8008930:	200008d4 	.word	0x200008d4
 8008934:	20000dbc 	.word	0x20000dbc

08008938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <vTaskInternalSetTimeOutState+0x24>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <vTaskInternalSetTimeOutState+0x28>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	605a      	str	r2, [r3, #4]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	20000dc0 	.word	0x20000dc0
 8008960:	20000dac 	.word	0x20000dac

08008964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <xTaskCheckForTimeOut+0x28>
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	b672      	cpsid	i
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	b662      	cpsie	i
 8008988:	613b      	str	r3, [r7, #16]
 800898a:	e7fe      	b.n	800898a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <xTaskCheckForTimeOut+0x46>
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	b672      	cpsid	i
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	b662      	cpsie	i
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	e7fe      	b.n	80089a8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80089aa:	f000 fe25 	bl	80095f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089ae:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <xTaskCheckForTimeOut+0xc0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d102      	bne.n	80089ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	e023      	b.n	8008a16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <xTaskCheckForTimeOut+0xc4>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d007      	beq.n	80089ea <xTaskCheckForTimeOut+0x86>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d302      	bcc.n	80089ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	e015      	b.n	8008a16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d20b      	bcs.n	8008a0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff ff99 	bl	8008938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
 8008a0a:	e004      	b.n	8008a16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a16:	f000 fe21 	bl	800965c <vPortExitCritical>

	return xReturn;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3720      	adds	r7, #32
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20000dac 	.word	0x20000dac
 8008a28:	20000dc0 	.word	0x20000dc0

08008a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a30:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <vTaskMissedYield+0x14>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]
}
 8008a36:	bf00      	nop
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	20000dbc 	.word	0x20000dbc

08008a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a4c:	f000 f852 	bl	8008af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <prvIdleTask+0x28>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d9f9      	bls.n	8008a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <prvIdleTask+0x2c>)
 8008a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a68:	e7f0      	b.n	8008a4c <prvIdleTask+0x8>
 8008a6a:	bf00      	nop
 8008a6c:	200008d8 	.word	0x200008d8
 8008a70:	e000ed04 	.word	0xe000ed04

08008a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	607b      	str	r3, [r7, #4]
 8008a7e:	e00c      	b.n	8008a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <prvInitialiseTaskLists+0x60>)
 8008a8c:	4413      	add	r3, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fc4c 	bl	800732c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3301      	adds	r3, #1
 8008a98:	607b      	str	r3, [r7, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b37      	cmp	r3, #55	; 0x37
 8008a9e:	d9ef      	bls.n	8008a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008aa0:	480d      	ldr	r0, [pc, #52]	; (8008ad8 <prvInitialiseTaskLists+0x64>)
 8008aa2:	f7fe fc43 	bl	800732c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aa6:	480d      	ldr	r0, [pc, #52]	; (8008adc <prvInitialiseTaskLists+0x68>)
 8008aa8:	f7fe fc40 	bl	800732c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008aac:	480c      	ldr	r0, [pc, #48]	; (8008ae0 <prvInitialiseTaskLists+0x6c>)
 8008aae:	f7fe fc3d 	bl	800732c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ab2:	480c      	ldr	r0, [pc, #48]	; (8008ae4 <prvInitialiseTaskLists+0x70>)
 8008ab4:	f7fe fc3a 	bl	800732c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ab8:	480b      	ldr	r0, [pc, #44]	; (8008ae8 <prvInitialiseTaskLists+0x74>)
 8008aba:	f7fe fc37 	bl	800732c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008abe:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <prvInitialiseTaskLists+0x78>)
 8008ac0:	4a05      	ldr	r2, [pc, #20]	; (8008ad8 <prvInitialiseTaskLists+0x64>)
 8008ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <prvInitialiseTaskLists+0x7c>)
 8008ac6:	4a05      	ldr	r2, [pc, #20]	; (8008adc <prvInitialiseTaskLists+0x68>)
 8008ac8:	601a      	str	r2, [r3, #0]
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200008d8 	.word	0x200008d8
 8008ad8:	20000d38 	.word	0x20000d38
 8008adc:	20000d4c 	.word	0x20000d4c
 8008ae0:	20000d68 	.word	0x20000d68
 8008ae4:	20000d7c 	.word	0x20000d7c
 8008ae8:	20000d94 	.word	0x20000d94
 8008aec:	20000d60 	.word	0x20000d60
 8008af0:	20000d64 	.word	0x20000d64

08008af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008afa:	e019      	b.n	8008b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008afc:	f000 fd7c 	bl	80095f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b00:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <prvCheckTasksWaitingTermination+0x4c>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fc97 	bl	8007440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <prvCheckTasksWaitingTermination+0x50>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <prvCheckTasksWaitingTermination+0x50>)
 8008b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <prvCheckTasksWaitingTermination+0x54>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	4a09      	ldr	r2, [pc, #36]	; (8008b48 <prvCheckTasksWaitingTermination+0x54>)
 8008b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b26:	f000 fd99 	bl	800965c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f80e 	bl	8008b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b30:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <prvCheckTasksWaitingTermination+0x54>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e1      	bne.n	8008afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000d7c 	.word	0x20000d7c
 8008b44:	20000da8 	.word	0x20000da8
 8008b48:	20000d90 	.word	0x20000d90

08008b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d108      	bne.n	8008b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 ff32 	bl	80099cc <vPortFree>
				vPortFree( pxTCB );
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 ff2f 	bl	80099cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b6e:	e019      	b.n	8008ba4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d103      	bne.n	8008b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 ff26 	bl	80099cc <vPortFree>
	}
 8008b80:	e010      	b.n	8008ba4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d00b      	beq.n	8008ba4 <prvDeleteTCB+0x58>
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	b672      	cpsid	i
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	b662      	cpsie	i
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	e7fe      	b.n	8008ba2 <prvDeleteTCB+0x56>
	}
 8008ba4:	bf00      	nop
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <prvResetNextTaskUnblockTime+0x44>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <prvResetNextTaskUnblockTime+0x14>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <prvResetNextTaskUnblockTime+0x16>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <prvResetNextTaskUnblockTime+0x48>)
 8008bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bce:	e008      	b.n	8008be2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <prvResetNextTaskUnblockTime+0x44>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	4a05      	ldr	r2, [pc, #20]	; (8008bf4 <prvResetNextTaskUnblockTime+0x48>)
 8008be0:	6013      	str	r3, [r2, #0]
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20000d60 	.word	0x20000d60
 8008bf4:	20000dc8 	.word	0x20000dc8

08008bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <xTaskGetSchedulerState+0x34>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c06:	2301      	movs	r3, #1
 8008c08:	607b      	str	r3, [r7, #4]
 8008c0a:	e008      	b.n	8008c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c0c:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <xTaskGetSchedulerState+0x38>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d102      	bne.n	8008c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c14:	2302      	movs	r3, #2
 8008c16:	607b      	str	r3, [r7, #4]
 8008c18:	e001      	b.n	8008c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c1e:	687b      	ldr	r3, [r7, #4]
	}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	20000db4 	.word	0x20000db4
 8008c30:	20000dd0 	.word	0x20000dd0

08008c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d058      	beq.n	8008cfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <xTaskPriorityDisinherit+0xd4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d00b      	beq.n	8008c6c <xTaskPriorityDisinherit+0x38>
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	b672      	cpsid	i
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	b662      	cpsie	i
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e7fe      	b.n	8008c6a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xTaskPriorityDisinherit+0x58>
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	b672      	cpsid	i
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	b662      	cpsie	i
 8008c88:	60bb      	str	r3, [r7, #8]
 8008c8a:	e7fe      	b.n	8008c8a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c90:	1e5a      	subs	r2, r3, #1
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d02c      	beq.n	8008cfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d128      	bne.n	8008cfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fbc6 	bl	8007440 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <xTaskPriorityDisinherit+0xd8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d903      	bls.n	8008cdc <xTaskPriorityDisinherit+0xa8>
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <xTaskPriorityDisinherit+0xd8>)
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <xTaskPriorityDisinherit+0xdc>)
 8008cea:	441a      	add	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f7fe fb47 	bl	8007386 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cfc:	697b      	ldr	r3, [r7, #20]
	}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	200008d4 	.word	0x200008d4
 8008d0c:	20000db0 	.word	0x20000db0
 8008d10:	200008d8 	.word	0x200008d8

08008d14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d1e:	4b21      	ldr	r3, [pc, #132]	; (8008da4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d24:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fb88 	bl	8007440 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d36:	d10a      	bne.n	8008d4e <prvAddCurrentTaskToDelayedList+0x3a>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d3e:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4819      	ldr	r0, [pc, #100]	; (8008dac <prvAddCurrentTaskToDelayedList+0x98>)
 8008d48:	f7fe fb1d 	bl	8007386 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d4c:	e026      	b.n	8008d9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4413      	add	r3, r2
 8008d54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d209      	bcs.n	8008d7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d66:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7fe fb2b 	bl	80073ce <vListInsert>
}
 8008d78:	e010      	b.n	8008d9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d7a:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3304      	adds	r3, #4
 8008d84:	4619      	mov	r1, r3
 8008d86:	4610      	mov	r0, r2
 8008d88:	f7fe fb21 	bl	80073ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d202      	bcs.n	8008d9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d96:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	6013      	str	r3, [r2, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20000dac 	.word	0x20000dac
 8008da8:	200008d4 	.word	0x200008d4
 8008dac:	20000d94 	.word	0x20000d94
 8008db0:	20000d64 	.word	0x20000d64
 8008db4:	20000d60 	.word	0x20000d60
 8008db8:	20000dc8 	.word	0x20000dc8

08008dbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dc6:	f000 fad1 	bl	800936c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dca:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <xTimerCreateTimerTask+0x84>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d021      	beq.n	8008e16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dda:	1d3a      	adds	r2, r7, #4
 8008ddc:	f107 0108 	add.w	r1, r7, #8
 8008de0:	f107 030c 	add.w	r3, r7, #12
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fa87 	bl	80072f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	9202      	str	r2, [sp, #8]
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	2302      	movs	r3, #2
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	460a      	mov	r2, r1
 8008dfc:	4911      	ldr	r1, [pc, #68]	; (8008e44 <xTimerCreateTimerTask+0x88>)
 8008dfe:	4812      	ldr	r0, [pc, #72]	; (8008e48 <xTimerCreateTimerTask+0x8c>)
 8008e00:	f7ff f83e 	bl	8007e80 <xTaskCreateStatic>
 8008e04:	4602      	mov	r2, r0
 8008e06:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <xTimerCreateTimerTask+0x90>)
 8008e08:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <xTimerCreateTimerTask+0x90>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e12:	2301      	movs	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <xTimerCreateTimerTask+0x78>
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	b672      	cpsid	i
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	b662      	cpsie	i
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	e7fe      	b.n	8008e32 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8008e34:	697b      	ldr	r3, [r7, #20]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000e04 	.word	0x20000e04
 8008e44:	0800b984 	.word	0x0800b984
 8008e48:	08008f71 	.word	0x08008f71
 8008e4c:	20000e08 	.word	0x20000e08

08008e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10b      	bne.n	8008e80 <xTimerGenericCommand+0x30>
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	b672      	cpsid	i
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	b662      	cpsie	i
 8008e7c:	623b      	str	r3, [r7, #32]
 8008e7e:	e7fe      	b.n	8008e7e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e80:	4b19      	ldr	r3, [pc, #100]	; (8008ee8 <xTimerGenericCommand+0x98>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d02a      	beq.n	8008ede <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	dc18      	bgt.n	8008ecc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e9a:	f7ff fead 	bl	8008bf8 <xTaskGetSchedulerState>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d109      	bne.n	8008eb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ea4:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <xTimerGenericCommand+0x98>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	f107 0110 	add.w	r1, r7, #16
 8008eac:	2300      	movs	r3, #0
 8008eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb0:	f7fe fbfa 	bl	80076a8 <xQueueGenericSend>
 8008eb4:	6278      	str	r0, [r7, #36]	; 0x24
 8008eb6:	e012      	b.n	8008ede <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <xTimerGenericCommand+0x98>)
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	f107 0110 	add.w	r1, r7, #16
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f7fe fbf0 	bl	80076a8 <xQueueGenericSend>
 8008ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8008eca:	e008      	b.n	8008ede <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <xTimerGenericCommand+0x98>)
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	f107 0110 	add.w	r1, r7, #16
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	f7fe fce8 	bl	80078ac <xQueueGenericSendFromISR>
 8008edc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3728      	adds	r7, #40	; 0x28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000e04 	.word	0x20000e04

08008eec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <prvProcessExpiredTimer+0x80>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	3304      	adds	r3, #4
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fe fa9b 	bl	8007440 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d123      	bne.n	8008f5a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	18d1      	adds	r1, r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f000 f8ca 	bl	80090b8 <prvInsertTimerInActiveList>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d017      	beq.n	8008f5a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	2100      	movs	r1, #0
 8008f34:	6978      	ldr	r0, [r7, #20]
 8008f36:	f7ff ff8b 	bl	8008e50 <xTimerGenericCommand>
 8008f3a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <prvProcessExpiredTimer+0x6e>
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	b672      	cpsid	i
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	b662      	cpsie	i
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	e7fe      	b.n	8008f58 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	6978      	ldr	r0, [r7, #20]
 8008f60:	4798      	blx	r3
}
 8008f62:	bf00      	nop
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000dfc 	.word	0x20000dfc

08008f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f78:	f107 0308 	add.w	r3, r7, #8
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f857 	bl	8009030 <prvGetNextExpireTime>
 8008f82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	4619      	mov	r1, r3
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f803 	bl	8008f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f8e:	f000 f8d5 	bl	800913c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f92:	e7f1      	b.n	8008f78 <prvTimerTask+0x8>

08008f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f9e:	f7ff fa29 	bl	80083f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f866 	bl	8009078 <prvSampleTimeNow>
 8008fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d130      	bne.n	8009016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <prvProcessTimerOrBlockTask+0x3c>
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d806      	bhi.n	8008fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fc2:	f7ff fa25 	bl	8008410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fc6:	68f9      	ldr	r1, [r7, #12]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff8f 	bl	8008eec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fce:	e024      	b.n	800901a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d008      	beq.n	8008fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fd6:	4b13      	ldr	r3, [pc, #76]	; (8009024 <prvProcessTimerOrBlockTask+0x90>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	bf0c      	ite	eq
 8008fe0:	2301      	moveq	r3, #1
 8008fe2:	2300      	movne	r3, #0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <prvProcessTimerOrBlockTask+0x94>)
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f7fe ff0f 	bl	8007e18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ffa:	f7ff fa09 	bl	8008410 <xTaskResumeAll>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009004:	4b09      	ldr	r3, [pc, #36]	; (800902c <prvProcessTimerOrBlockTask+0x98>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
}
 8009014:	e001      	b.n	800901a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009016:	f7ff f9fb 	bl	8008410 <xTaskResumeAll>
}
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000e00 	.word	0x20000e00
 8009028:	20000e04 	.word	0x20000e04
 800902c:	e000ed04 	.word	0xe000ed04

08009030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <prvGetNextExpireTime+0x44>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bf0c      	ite	eq
 8009042:	2301      	moveq	r3, #1
 8009044:	2300      	movne	r3, #0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d105      	bne.n	8009062 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009056:	4b07      	ldr	r3, [pc, #28]	; (8009074 <prvGetNextExpireTime+0x44>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e001      	b.n	8009066 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009066:	68fb      	ldr	r3, [r7, #12]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	20000dfc 	.word	0x20000dfc

08009078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009080:	f7ff fa64 	bl	800854c <xTaskGetTickCount>
 8009084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <prvSampleTimeNow+0x3c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	429a      	cmp	r2, r3
 800908e:	d205      	bcs.n	800909c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009090:	f000 f90a 	bl	80092a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	e002      	b.n	80090a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090a2:	4a04      	ldr	r2, [pc, #16]	; (80090b4 <prvSampleTimeNow+0x3c>)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090a8:	68fb      	ldr	r3, [r7, #12]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20000e0c 	.word	0x20000e0c

080090b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d812      	bhi.n	8009104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d302      	bcc.n	80090f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090ec:	2301      	movs	r3, #1
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e01b      	b.n	800912a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090f2:	4b10      	ldr	r3, [pc, #64]	; (8009134 <prvInsertTimerInActiveList+0x7c>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3304      	adds	r3, #4
 80090fa:	4619      	mov	r1, r3
 80090fc:	4610      	mov	r0, r2
 80090fe:	f7fe f966 	bl	80073ce <vListInsert>
 8009102:	e012      	b.n	800912a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d206      	bcs.n	800911a <prvInsertTimerInActiveList+0x62>
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d302      	bcc.n	800911a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	e007      	b.n	800912a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <prvInsertTimerInActiveList+0x80>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3304      	adds	r3, #4
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7fe f952 	bl	80073ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800912a:	697b      	ldr	r3, [r7, #20]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	20000e00 	.word	0x20000e00
 8009138:	20000dfc 	.word	0x20000dfc

0800913c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08e      	sub	sp, #56	; 0x38
 8009140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009142:	e09f      	b.n	8009284 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da19      	bge.n	800917e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800914a:	1d3b      	adds	r3, r7, #4
 800914c:	3304      	adds	r3, #4
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10b      	bne.n	800916e <prvProcessReceivedCommands+0x32>
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	b672      	cpsid	i
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	b662      	cpsie	i
 800916a:	61fb      	str	r3, [r7, #28]
 800916c:	e7fe      	b.n	800916c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009174:	6850      	ldr	r0, [r2, #4]
 8009176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009178:	6892      	ldr	r2, [r2, #8]
 800917a:	4611      	mov	r1, r2
 800917c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db7e      	blt.n	8009282 <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe f953 	bl	8007440 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800919a:	463b      	mov	r3, r7
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff ff6b 	bl	8009078 <prvSampleTimeNow>
 80091a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d86c      	bhi.n	8009284 <prvProcessReceivedCommands+0x148>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <prvProcessReceivedCommands+0x74>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091d9 	.word	0x080091d9
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091d9 	.word	0x080091d9
 80091bc:	08009285 	.word	0x08009285
 80091c0:	08009237 	.word	0x08009237
 80091c4:	08009271 	.word	0x08009271
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091d9 	.word	0x080091d9
 80091d0:	08009285 	.word	0x08009285
 80091d4:	08009237 	.word	0x08009237
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	18d1      	adds	r1, r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e6:	f7ff ff67 	bl	80090b8 <prvInsertTimerInActiveList>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d049      	beq.n	8009284 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d141      	bne.n	8009284 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	441a      	add	r2, r3
 8009208:	2300      	movs	r3, #0
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	2300      	movs	r3, #0
 800920e:	2100      	movs	r1, #0
 8009210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009212:	f7ff fe1d 	bl	8008e50 <xTimerGenericCommand>
 8009216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d132      	bne.n	8009284 <prvProcessReceivedCommands+0x148>
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	b672      	cpsid	i
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	b662      	cpsie	i
 8009232:	61bb      	str	r3, [r7, #24]
 8009234:	e7fe      	b.n	8009234 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10b      	bne.n	800925c <prvProcessReceivedCommands+0x120>
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	b672      	cpsid	i
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	b662      	cpsie	i
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e7fe      	b.n	800925a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	699a      	ldr	r2, [r3, #24]
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	18d1      	adds	r1, r2, r3
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926a:	f7ff ff25 	bl	80090b8 <prvInsertTimerInActiveList>
					break;
 800926e:	e009      	b.n	8009284 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 800927a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800927c:	f000 fba6 	bl	80099cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009280:	e000      	b.n	8009284 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009282:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009284:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <prvProcessReceivedCommands+0x168>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	1d39      	adds	r1, r7, #4
 800928a:	2200      	movs	r2, #0
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fba9 	bl	80079e4 <xQueueReceive>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	f47f af55 	bne.w	8009144 <prvProcessReceivedCommands+0x8>
	}
}
 800929a:	bf00      	nop
 800929c:	3730      	adds	r7, #48	; 0x30
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000e04 	.word	0x20000e04

080092a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092ae:	e046      	b.n	800933e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b0:	4b2c      	ldr	r3, [pc, #176]	; (8009364 <prvSwitchTimerLists+0xbc>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092ba:	4b2a      	ldr	r3, [pc, #168]	; (8009364 <prvSwitchTimerLists+0xbc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe f8b9 	bl	8007440 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d12f      	bne.n	800933e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4413      	add	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d90e      	bls.n	800930e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092fc:	4b19      	ldr	r3, [pc, #100]	; (8009364 <prvSwitchTimerLists+0xbc>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fe f861 	bl	80073ce <vListInsert>
 800930c:	e017      	b.n	800933e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800930e:	2300      	movs	r3, #0
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	2300      	movs	r3, #0
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	2100      	movs	r1, #0
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff fd99 	bl	8008e50 <xTimerGenericCommand>
 800931e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10b      	bne.n	800933e <prvSwitchTimerLists+0x96>
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	e7fe      	b.n	800933c <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <prvSwitchTimerLists+0xbc>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1b3      	bne.n	80092b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009348:	4b06      	ldr	r3, [pc, #24]	; (8009364 <prvSwitchTimerLists+0xbc>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <prvSwitchTimerLists+0xc0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a04      	ldr	r2, [pc, #16]	; (8009364 <prvSwitchTimerLists+0xbc>)
 8009354:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009356:	4a04      	ldr	r2, [pc, #16]	; (8009368 <prvSwitchTimerLists+0xc0>)
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	bf00      	nop
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000dfc 	.word	0x20000dfc
 8009368:	20000e00 	.word	0x20000e00

0800936c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009372:	f000 f941 	bl	80095f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <prvCheckForValidListAndQueue+0x60>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d120      	bne.n	80093c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800937e:	4814      	ldr	r0, [pc, #80]	; (80093d0 <prvCheckForValidListAndQueue+0x64>)
 8009380:	f7fd ffd4 	bl	800732c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009384:	4813      	ldr	r0, [pc, #76]	; (80093d4 <prvCheckForValidListAndQueue+0x68>)
 8009386:	f7fd ffd1 	bl	800732c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800938a:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <prvCheckForValidListAndQueue+0x6c>)
 800938c:	4a10      	ldr	r2, [pc, #64]	; (80093d0 <prvCheckForValidListAndQueue+0x64>)
 800938e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009390:	4b12      	ldr	r3, [pc, #72]	; (80093dc <prvCheckForValidListAndQueue+0x70>)
 8009392:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <prvCheckForValidListAndQueue+0x68>)
 8009394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009396:	2300      	movs	r3, #0
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <prvCheckForValidListAndQueue+0x74>)
 800939c:	4a11      	ldr	r2, [pc, #68]	; (80093e4 <prvCheckForValidListAndQueue+0x78>)
 800939e:	2110      	movs	r1, #16
 80093a0:	200a      	movs	r0, #10
 80093a2:	f7fe f8e1 	bl	8007568 <xQueueGenericCreateStatic>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4b08      	ldr	r3, [pc, #32]	; (80093cc <prvCheckForValidListAndQueue+0x60>)
 80093aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093ac:	4b07      	ldr	r3, [pc, #28]	; (80093cc <prvCheckForValidListAndQueue+0x60>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d005      	beq.n	80093c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <prvCheckForValidListAndQueue+0x60>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	490b      	ldr	r1, [pc, #44]	; (80093e8 <prvCheckForValidListAndQueue+0x7c>)
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fd04 	bl	8007dc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093c0:	f000 f94c 	bl	800965c <vPortExitCritical>
}
 80093c4:	bf00      	nop
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000e04 	.word	0x20000e04
 80093d0:	20000dd4 	.word	0x20000dd4
 80093d4:	20000de8 	.word	0x20000de8
 80093d8:	20000dfc 	.word	0x20000dfc
 80093dc:	20000e00 	.word	0x20000e00
 80093e0:	20000eb0 	.word	0x20000eb0
 80093e4:	20000e10 	.word	0x20000e10
 80093e8:	0800b98c 	.word	0x0800b98c

080093ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3b04      	subs	r3, #4
 80093fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3b04      	subs	r3, #4
 800940a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f023 0201 	bic.w	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3b04      	subs	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800941c:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <pxPortInitialiseStack+0x64>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3b14      	subs	r3, #20
 8009426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3b04      	subs	r3, #4
 8009432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f06f 0202 	mvn.w	r2, #2
 800943a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3b20      	subs	r3, #32
 8009440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009442:	68fb      	ldr	r3, [r7, #12]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	08009455 	.word	0x08009455

08009454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <prvTaskExitError+0x58>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009466:	d00b      	beq.n	8009480 <prvTaskExitError+0x2c>
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	b672      	cpsid	i
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	b662      	cpsie	i
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e7fe      	b.n	800947e <prvTaskExitError+0x2a>
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	b672      	cpsid	i
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	b662      	cpsie	i
 8009494:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009496:	bf00      	nop
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0fc      	beq.n	8009498 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000118 	.word	0x20000118

080094b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <pxCurrentTCBConst2>)
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	6808      	ldr	r0, [r1, #0]
 80094b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	f380 8809 	msr	PSP, r0
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f380 8811 	msr	BASEPRI, r0
 80094ca:	4770      	bx	lr
 80094cc:	f3af 8000 	nop.w

080094d0 <pxCurrentTCBConst2>:
 80094d0:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop

080094d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094d8:	4808      	ldr	r0, [pc, #32]	; (80094fc <prvPortStartFirstTask+0x24>)
 80094da:	6800      	ldr	r0, [r0, #0]
 80094dc:	6800      	ldr	r0, [r0, #0]
 80094de:	f380 8808 	msr	MSP, r0
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8814 	msr	CONTROL, r0
 80094ea:	b662      	cpsie	i
 80094ec:	b661      	cpsie	f
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	df00      	svc	0
 80094f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094fa:	bf00      	nop
 80094fc:	e000ed08 	.word	0xe000ed08

08009500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009506:	4b36      	ldr	r3, [pc, #216]	; (80095e0 <xPortStartScheduler+0xe0>)
 8009508:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009528:	b2da      	uxtb	r2, r3
 800952a:	4b2e      	ldr	r3, [pc, #184]	; (80095e4 <xPortStartScheduler+0xe4>)
 800952c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800952e:	4b2e      	ldr	r3, [pc, #184]	; (80095e8 <xPortStartScheduler+0xe8>)
 8009530:	2207      	movs	r2, #7
 8009532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009534:	e009      	b.n	800954a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009536:	4b2c      	ldr	r3, [pc, #176]	; (80095e8 <xPortStartScheduler+0xe8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3b01      	subs	r3, #1
 800953c:	4a2a      	ldr	r2, [pc, #168]	; (80095e8 <xPortStartScheduler+0xe8>)
 800953e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b80      	cmp	r3, #128	; 0x80
 8009554:	d0ef      	beq.n	8009536 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009556:	4b24      	ldr	r3, [pc, #144]	; (80095e8 <xPortStartScheduler+0xe8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1c3 0307 	rsb	r3, r3, #7
 800955e:	2b04      	cmp	r3, #4
 8009560:	d00b      	beq.n	800957a <xPortStartScheduler+0x7a>
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	b672      	cpsid	i
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	b662      	cpsie	i
 8009576:	60bb      	str	r3, [r7, #8]
 8009578:	e7fe      	b.n	8009578 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800957a:	4b1b      	ldr	r3, [pc, #108]	; (80095e8 <xPortStartScheduler+0xe8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <xPortStartScheduler+0xe8>)
 8009582:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009584:	4b18      	ldr	r3, [pc, #96]	; (80095e8 <xPortStartScheduler+0xe8>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <xPortStartScheduler+0xe8>)
 800958e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009598:	4b14      	ldr	r3, [pc, #80]	; (80095ec <xPortStartScheduler+0xec>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a13      	ldr	r2, [pc, #76]	; (80095ec <xPortStartScheduler+0xec>)
 800959e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095a4:	4b11      	ldr	r3, [pc, #68]	; (80095ec <xPortStartScheduler+0xec>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a10      	ldr	r2, [pc, #64]	; (80095ec <xPortStartScheduler+0xec>)
 80095aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095b0:	f000 f8d4 	bl	800975c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <xPortStartScheduler+0xf0>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095ba:	f000 f8f3 	bl	80097a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095be:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <xPortStartScheduler+0xf4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a0c      	ldr	r2, [pc, #48]	; (80095f4 <xPortStartScheduler+0xf4>)
 80095c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095ca:	f7ff ff85 	bl	80094d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095ce:	f7ff f89f 	bl	8008710 <vTaskSwitchContext>
	prvTaskExitError();
 80095d2:	f7ff ff3f 	bl	8009454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	e000e400 	.word	0xe000e400
 80095e4:	20000f00 	.word	0x20000f00
 80095e8:	20000f04 	.word	0x20000f04
 80095ec:	e000ed20 	.word	0xe000ed20
 80095f0:	20000118 	.word	0x20000118
 80095f4:	e000ef34 	.word	0xe000ef34

080095f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	b672      	cpsid	i
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	b662      	cpsie	i
 8009612:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009614:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <vPortEnterCritical+0x5c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	4a0e      	ldr	r2, [pc, #56]	; (8009654 <vPortEnterCritical+0x5c>)
 800961c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <vPortEnterCritical+0x5c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d110      	bne.n	8009648 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <vPortEnterCritical+0x60>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <vPortEnterCritical+0x50>
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	b672      	cpsid	i
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	b662      	cpsie	i
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	e7fe      	b.n	8009646 <vPortEnterCritical+0x4e>
	}
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	20000118 	.word	0x20000118
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <vPortExitCritical+0x50>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10b      	bne.n	8009682 <vPortExitCritical+0x26>
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	b672      	cpsid	i
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	b662      	cpsie	i
 800967e:	607b      	str	r3, [r7, #4]
 8009680:	e7fe      	b.n	8009680 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <vPortExitCritical+0x50>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	4a08      	ldr	r2, [pc, #32]	; (80096ac <vPortExitCritical+0x50>)
 800968a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800968c:	4b07      	ldr	r3, [pc, #28]	; (80096ac <vPortExitCritical+0x50>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d104      	bne.n	800969e <vPortExitCritical+0x42>
 8009694:	2300      	movs	r3, #0
 8009696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000118 	.word	0x20000118

080096b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096b0:	f3ef 8009 	mrs	r0, PSP
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	4b15      	ldr	r3, [pc, #84]	; (8009710 <pxCurrentTCBConst>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	f01e 0f10 	tst.w	lr, #16
 80096c0:	bf08      	it	eq
 80096c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	6010      	str	r0, [r2, #0]
 80096cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096d4:	b672      	cpsid	i
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	b662      	cpsie	i
 80096e4:	f7ff f814 	bl	8008710 <vTaskSwitchContext>
 80096e8:	f04f 0000 	mov.w	r0, #0
 80096ec:	f380 8811 	msr	BASEPRI, r0
 80096f0:	bc09      	pop	{r0, r3}
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	6808      	ldr	r0, [r1, #0]
 80096f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	f01e 0f10 	tst.w	lr, #16
 80096fe:	bf08      	it	eq
 8009700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009704:	f380 8809 	msr	PSP, r0
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop

08009710 <pxCurrentTCBConst>:
 8009710:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	b672      	cpsid	i
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	b662      	cpsie	i
 8009732:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009734:	f7fe ff2c 	bl	8008590 <xTaskIncrementTick>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800973e:	4b06      	ldr	r3, [pc, #24]	; (8009758 <SysTick_Handler+0x40>)
 8009740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	603b      	str	r3, [r7, #0]
	__asm volatile
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009760:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <vPortSetupTimerInterrupt+0x34>)
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <vPortSetupTimerInterrupt+0x38>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <vPortSetupTimerInterrupt+0x3c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <vPortSetupTimerInterrupt+0x40>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	099b      	lsrs	r3, r3, #6
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <vPortSetupTimerInterrupt+0x44>)
 800977a:	3b01      	subs	r3, #1
 800977c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <vPortSetupTimerInterrupt+0x34>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	e000e010 	.word	0xe000e010
 8009794:	e000e018 	.word	0xe000e018
 8009798:	20000000 	.word	0x20000000
 800979c:	10624dd3 	.word	0x10624dd3
 80097a0:	e000e014 	.word	0xe000e014

080097a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097b4 <vPortEnableVFP+0x10>
 80097a8:	6801      	ldr	r1, [r0, #0]
 80097aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097ae:	6001      	str	r1, [r0, #0]
 80097b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097b2:	bf00      	nop
 80097b4:	e000ed88 	.word	0xe000ed88

080097b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097be:	f3ef 8305 	mrs	r3, IPSR
 80097c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	d915      	bls.n	80097f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097ca:	4a18      	ldr	r2, [pc, #96]	; (800982c <vPortValidateInterruptPriority+0x74>)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097d4:	4b16      	ldr	r3, [pc, #88]	; (8009830 <vPortValidateInterruptPriority+0x78>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	7afa      	ldrb	r2, [r7, #11]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d20b      	bcs.n	80097f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	b672      	cpsid	i
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	b662      	cpsie	i
 80097f2:	607b      	str	r3, [r7, #4]
 80097f4:	e7fe      	b.n	80097f4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097f6:	4b0f      	ldr	r3, [pc, #60]	; (8009834 <vPortValidateInterruptPriority+0x7c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <vPortValidateInterruptPriority+0x80>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	429a      	cmp	r2, r3
 8009804:	d90b      	bls.n	800981e <vPortValidateInterruptPriority+0x66>
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	b672      	cpsid	i
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	b662      	cpsie	i
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	e7fe      	b.n	800981c <vPortValidateInterruptPriority+0x64>
	}
 800981e:	bf00      	nop
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	e000e3f0 	.word	0xe000e3f0
 8009830:	20000f00 	.word	0x20000f00
 8009834:	e000ed0c 	.word	0xe000ed0c
 8009838:	20000f04 	.word	0x20000f04

0800983c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08a      	sub	sp, #40	; 0x28
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009848:	f7fe fdd4 	bl	80083f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800984c:	4b5a      	ldr	r3, [pc, #360]	; (80099b8 <pvPortMalloc+0x17c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009854:	f000 f916 	bl	8009a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009858:	4b58      	ldr	r3, [pc, #352]	; (80099bc <pvPortMalloc+0x180>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4013      	ands	r3, r2
 8009860:	2b00      	cmp	r3, #0
 8009862:	f040 8090 	bne.w	8009986 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01e      	beq.n	80098aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800986c:	2208      	movs	r2, #8
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4413      	add	r3, r2
 8009872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b00      	cmp	r3, #0
 800987c:	d015      	beq.n	80098aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f023 0307 	bic.w	r3, r3, #7
 8009884:	3308      	adds	r3, #8
 8009886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f003 0307 	and.w	r3, r3, #7
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <pvPortMalloc+0x6e>
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	b672      	cpsid	i
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	b662      	cpsie	i
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e7fe      	b.n	80098a8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d06a      	beq.n	8009986 <pvPortMalloc+0x14a>
 80098b0:	4b43      	ldr	r3, [pc, #268]	; (80099c0 <pvPortMalloc+0x184>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d865      	bhi.n	8009986 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098ba:	4b42      	ldr	r3, [pc, #264]	; (80099c4 <pvPortMalloc+0x188>)
 80098bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098be:	4b41      	ldr	r3, [pc, #260]	; (80099c4 <pvPortMalloc+0x188>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098c4:	e004      	b.n	80098d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d903      	bls.n	80098e2 <pvPortMalloc+0xa6>
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f1      	bne.n	80098c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098e2:	4b35      	ldr	r3, [pc, #212]	; (80099b8 <pvPortMalloc+0x17c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d04c      	beq.n	8009986 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2208      	movs	r2, #8
 80098f2:	4413      	add	r3, r2
 80098f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	1ad2      	subs	r2, r2, r3
 8009906:	2308      	movs	r3, #8
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	429a      	cmp	r2, r3
 800990c:	d920      	bls.n	8009950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800990e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4413      	add	r3, r2
 8009914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <pvPortMalloc+0xfc>
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e7fe      	b.n	8009936 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800994a:	69b8      	ldr	r0, [r7, #24]
 800994c:	f000 f8fc 	bl	8009b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009950:	4b1b      	ldr	r3, [pc, #108]	; (80099c0 <pvPortMalloc+0x184>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	4a19      	ldr	r2, [pc, #100]	; (80099c0 <pvPortMalloc+0x184>)
 800995c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800995e:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <pvPortMalloc+0x184>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b19      	ldr	r3, [pc, #100]	; (80099c8 <pvPortMalloc+0x18c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d203      	bcs.n	8009972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800996a:	4b15      	ldr	r3, [pc, #84]	; (80099c0 <pvPortMalloc+0x184>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a16      	ldr	r2, [pc, #88]	; (80099c8 <pvPortMalloc+0x18c>)
 8009970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	4b11      	ldr	r3, [pc, #68]	; (80099bc <pvPortMalloc+0x180>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	431a      	orrs	r2, r3
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009986:	f7fe fd43 	bl	8008410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	f003 0307 	and.w	r3, r3, #7
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00b      	beq.n	80099ac <pvPortMalloc+0x170>
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	b672      	cpsid	i
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	b662      	cpsie	i
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	e7fe      	b.n	80099aa <pvPortMalloc+0x16e>
	return pvReturn;
 80099ac:	69fb      	ldr	r3, [r7, #28]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3728      	adds	r7, #40	; 0x28
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20004b10 	.word	0x20004b10
 80099bc:	20004b1c 	.word	0x20004b1c
 80099c0:	20004b14 	.word	0x20004b14
 80099c4:	20004b08 	.word	0x20004b08
 80099c8:	20004b18 	.word	0x20004b18

080099cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d04a      	beq.n	8009a74 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099de:	2308      	movs	r3, #8
 80099e0:	425b      	negs	r3, r3
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	4b22      	ldr	r3, [pc, #136]	; (8009a7c <vPortFree+0xb0>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <vPortFree+0x46>
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	b672      	cpsid	i
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	b662      	cpsie	i
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	e7fe      	b.n	8009a10 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <vPortFree+0x66>
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	b672      	cpsid	i
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	b662      	cpsie	i
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	e7fe      	b.n	8009a30 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <vPortFree+0xb0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d019      	beq.n	8009a74 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d115      	bne.n	8009a74 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <vPortFree+0xb0>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	43db      	mvns	r3, r3
 8009a52:	401a      	ands	r2, r3
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a58:	f7fe fccc 	bl	80083f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <vPortFree+0xb4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4413      	add	r3, r2
 8009a66:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <vPortFree+0xb4>)
 8009a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a6a:	6938      	ldr	r0, [r7, #16]
 8009a6c:	f000 f86c 	bl	8009b48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a70:	f7fe fcce 	bl	8008410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a74:	bf00      	nop
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20004b1c 	.word	0x20004b1c
 8009a80:	20004b14 	.word	0x20004b14

08009a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a90:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <prvHeapInit+0xac>)
 8009a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00c      	beq.n	8009ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3307      	adds	r3, #7
 8009aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	4a1f      	ldr	r2, [pc, #124]	; (8009b30 <prvHeapInit+0xac>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009abc:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <prvHeapInit+0xb0>)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <prvHeapInit+0xb0>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1a9b      	subs	r3, r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4a15      	ldr	r2, [pc, #84]	; (8009b38 <prvHeapInit+0xb4>)
 8009ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <prvHeapInit+0xb4>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <prvHeapInit+0xb4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b04:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <prvHeapInit+0xb4>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <prvHeapInit+0xb8>)
 8009b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a09      	ldr	r2, [pc, #36]	; (8009b40 <prvHeapInit+0xbc>)
 8009b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b1c:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <prvHeapInit+0xc0>)
 8009b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b22:	601a      	str	r2, [r3, #0]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20000f08 	.word	0x20000f08
 8009b34:	20004b08 	.word	0x20004b08
 8009b38:	20004b10 	.word	0x20004b10
 8009b3c:	20004b18 	.word	0x20004b18
 8009b40:	20004b14 	.word	0x20004b14
 8009b44:	20004b1c 	.word	0x20004b1c

08009b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <prvInsertBlockIntoFreeList+0xac>)
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e002      	b.n	8009b5c <prvInsertBlockIntoFreeList+0x14>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d8f7      	bhi.n	8009b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4413      	add	r3, r2
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d108      	bne.n	8009b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	441a      	add	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	441a      	add	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d118      	bne.n	8009bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d00d      	beq.n	8009bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	441a      	add	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e008      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bc6:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e003      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d002      	beq.n	8009be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009be6:	bf00      	nop
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20004b08 	.word	0x20004b08
 8009bf8:	20004b10 	.word	0x20004b10

08009bfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c00:	2200      	movs	r2, #0
 8009c02:	4912      	ldr	r1, [pc, #72]	; (8009c4c <MX_USB_DEVICE_Init+0x50>)
 8009c04:	4812      	ldr	r0, [pc, #72]	; (8009c50 <MX_USB_DEVICE_Init+0x54>)
 8009c06:	f7fc f940 	bl	8005e8a <USBD_Init>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c10:	f7f7 fa7c 	bl	800110c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c14:	490f      	ldr	r1, [pc, #60]	; (8009c54 <MX_USB_DEVICE_Init+0x58>)
 8009c16:	480e      	ldr	r0, [pc, #56]	; (8009c50 <MX_USB_DEVICE_Init+0x54>)
 8009c18:	f7fc f962 	bl	8005ee0 <USBD_RegisterClass>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c22:	f7f7 fa73 	bl	800110c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c26:	490c      	ldr	r1, [pc, #48]	; (8009c58 <MX_USB_DEVICE_Init+0x5c>)
 8009c28:	4809      	ldr	r0, [pc, #36]	; (8009c50 <MX_USB_DEVICE_Init+0x54>)
 8009c2a:	f7fc f8bf 	bl	8005dac <USBD_CDC_RegisterInterface>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c34:	f7f7 fa6a 	bl	800110c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c38:	4805      	ldr	r0, [pc, #20]	; (8009c50 <MX_USB_DEVICE_Init+0x54>)
 8009c3a:	f7fc f96b 	bl	8005f14 <USBD_Start>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c44:	f7f7 fa62 	bl	800110c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c48:	bf00      	nop
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	2000012c 	.word	0x2000012c
 8009c50:	200064d0 	.word	0x200064d0
 8009c54:	20000014 	.word	0x20000014
 8009c58:	2000011c 	.word	0x2000011c

08009c5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c60:	2200      	movs	r2, #0
 8009c62:	4905      	ldr	r1, [pc, #20]	; (8009c78 <CDC_Init_FS+0x1c>)
 8009c64:	4805      	ldr	r0, [pc, #20]	; (8009c7c <CDC_Init_FS+0x20>)
 8009c66:	f7fc f8b8 	bl	8005dda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c6a:	4905      	ldr	r1, [pc, #20]	; (8009c80 <CDC_Init_FS+0x24>)
 8009c6c:	4803      	ldr	r0, [pc, #12]	; (8009c7c <CDC_Init_FS+0x20>)
 8009c6e:	f7fc f8ce 	bl	8005e0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20006f6c 	.word	0x20006f6c
 8009c7c:	200064d0 	.word	0x200064d0
 8009c80:	2000676c 	.word	0x2000676c

08009c84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	2b23      	cmp	r3, #35	; 0x23
 8009ca8:	d84a      	bhi.n	8009d40 <CDC_Control_FS+0xac>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <CDC_Control_FS+0x1c>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009d41 	.word	0x08009d41
 8009cb4:	08009d41 	.word	0x08009d41
 8009cb8:	08009d41 	.word	0x08009d41
 8009cbc:	08009d41 	.word	0x08009d41
 8009cc0:	08009d41 	.word	0x08009d41
 8009cc4:	08009d41 	.word	0x08009d41
 8009cc8:	08009d41 	.word	0x08009d41
 8009ccc:	08009d41 	.word	0x08009d41
 8009cd0:	08009d41 	.word	0x08009d41
 8009cd4:	08009d41 	.word	0x08009d41
 8009cd8:	08009d41 	.word	0x08009d41
 8009cdc:	08009d41 	.word	0x08009d41
 8009ce0:	08009d41 	.word	0x08009d41
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d41 	.word	0x08009d41
 8009cec:	08009d41 	.word	0x08009d41
 8009cf0:	08009d41 	.word	0x08009d41
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d41 	.word	0x08009d41
 8009cfc:	08009d41 	.word	0x08009d41
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
 8009d08:	08009d41 	.word	0x08009d41
 8009d0c:	08009d41 	.word	0x08009d41
 8009d10:	08009d41 	.word	0x08009d41
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	08009d41 	.word	0x08009d41
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d41 	.word	0x08009d41
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009d41 	.word	0x08009d41
 8009d2c:	08009d41 	.word	0x08009d41
 8009d30:	08009d41 	.word	0x08009d41
 8009d34:	08009d41 	.word	0x08009d41
 8009d38:	08009d41 	.word	0x08009d41
 8009d3c:	08009d41 	.word	0x08009d41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d40:	bf00      	nop
  }

  return (USBD_OK);
 8009d42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	4805      	ldr	r0, [pc, #20]	; (8009d74 <CDC_Receive_FS+0x24>)
 8009d5e:	f7fc f856 	bl	8005e0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d62:	4804      	ldr	r0, [pc, #16]	; (8009d74 <CDC_Receive_FS+0x24>)
 8009d64:	f7fc f867 	bl	8005e36 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	200064d0 	.word	0x200064d0

08009d78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2212      	movs	r2, #18
 8009d88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d8a:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	2000014c 	.word	0x2000014c

08009d9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2204      	movs	r2, #4
 8009dac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dae:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	2000016c 	.word	0x2000016c

08009dc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4907      	ldr	r1, [pc, #28]	; (8009df4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009dd6:	4808      	ldr	r0, [pc, #32]	; (8009df8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009dd8:	f7fc fff0 	bl	8006dbc <USBD_GetString>
 8009ddc:	e004      	b.n	8009de8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4904      	ldr	r1, [pc, #16]	; (8009df4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009de2:	4805      	ldr	r0, [pc, #20]	; (8009df8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009de4:	f7fc ffea 	bl	8006dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000776c 	.word	0x2000776c
 8009df8:	0800b994 	.word	0x0800b994

08009dfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	4904      	ldr	r1, [pc, #16]	; (8009e1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e0c:	4804      	ldr	r0, [pc, #16]	; (8009e20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e0e:	f7fc ffd5 	bl	8006dbc <USBD_GetString>
  return USBD_StrDesc;
 8009e12:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	2000776c 	.word	0x2000776c
 8009e20:	0800b9ac 	.word	0x0800b9ac

08009e24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	6039      	str	r1, [r7, #0]
 8009e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	221a      	movs	r2, #26
 8009e34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e36:	f000 f855 	bl	8009ee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e3a:	4b02      	ldr	r3, [pc, #8]	; (8009e44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20000170 	.word	0x20000170

08009e48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d105      	bne.n	8009e66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	4907      	ldr	r1, [pc, #28]	; (8009e7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e5e:	4808      	ldr	r0, [pc, #32]	; (8009e80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e60:	f7fc ffac 	bl	8006dbc <USBD_GetString>
 8009e64:	e004      	b.n	8009e70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	4904      	ldr	r1, [pc, #16]	; (8009e7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e6a:	4805      	ldr	r0, [pc, #20]	; (8009e80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e6c:	f7fc ffa6 	bl	8006dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e70:	4b02      	ldr	r3, [pc, #8]	; (8009e7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	2000776c 	.word	0x2000776c
 8009e80:	0800b9c0 	.word	0x0800b9c0

08009e84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d105      	bne.n	8009ea2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4907      	ldr	r1, [pc, #28]	; (8009eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e9a:	4808      	ldr	r0, [pc, #32]	; (8009ebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e9c:	f7fc ff8e 	bl	8006dbc <USBD_GetString>
 8009ea0:	e004      	b.n	8009eac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	4904      	ldr	r1, [pc, #16]	; (8009eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ea6:	4805      	ldr	r0, [pc, #20]	; (8009ebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ea8:	f7fc ff88 	bl	8006dbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	2000776c 	.word	0x2000776c
 8009ebc:	0800b9cc 	.word	0x0800b9cc

08009ec0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	6039      	str	r1, [r7, #0]
 8009eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	220c      	movs	r2, #12
 8009ed0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009ed2:	4b03      	ldr	r3, [pc, #12]	; (8009ee0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	20000160 	.word	0x20000160

08009ee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009eea:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <Get_SerialNum+0x44>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ef0:	4b0e      	ldr	r3, [pc, #56]	; (8009f2c <Get_SerialNum+0x48>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ef6:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <Get_SerialNum+0x4c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4413      	add	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d009      	beq.n	8009f1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f0a:	2208      	movs	r2, #8
 8009f0c:	4909      	ldr	r1, [pc, #36]	; (8009f34 <Get_SerialNum+0x50>)
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f000 f814 	bl	8009f3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f14:	2204      	movs	r2, #4
 8009f16:	4908      	ldr	r1, [pc, #32]	; (8009f38 <Get_SerialNum+0x54>)
 8009f18:	68b8      	ldr	r0, [r7, #8]
 8009f1a:	f000 f80f 	bl	8009f3c <IntToUnicode>
  }
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	1ff0f420 	.word	0x1ff0f420
 8009f2c:	1ff0f424 	.word	0x1ff0f424
 8009f30:	1ff0f428 	.word	0x1ff0f428
 8009f34:	20000172 	.word	0x20000172
 8009f38:	20000182 	.word	0x20000182

08009f3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	4613      	mov	r3, r2
 8009f48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	75fb      	strb	r3, [r7, #23]
 8009f52:	e027      	b.n	8009fa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	0f1b      	lsrs	r3, r3, #28
 8009f58:	2b09      	cmp	r3, #9
 8009f5a:	d80b      	bhi.n	8009f74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	0f1b      	lsrs	r3, r3, #28
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	4619      	mov	r1, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	440b      	add	r3, r1
 8009f6c:	3230      	adds	r2, #48	; 0x30
 8009f6e:	b2d2      	uxtb	r2, r2
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	e00a      	b.n	8009f8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	0f1b      	lsrs	r3, r3, #28
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	4619      	mov	r1, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	440b      	add	r3, r1
 8009f84:	3237      	adds	r2, #55	; 0x37
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	3301      	adds	r3, #1
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	4413      	add	r3, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]
 8009fa4:	7dfa      	ldrb	r2, [r7, #23]
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d3d3      	bcc.n	8009f54 <IntToUnicode+0x18>
  }
}
 8009fac:	bf00      	nop
 8009fae:	371c      	adds	r7, #28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fc0:	f107 0314 	add.w	r3, r7, #20
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	605a      	str	r2, [r3, #4]
 8009fca:	609a      	str	r2, [r3, #8]
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fd8:	d13c      	bne.n	800a054 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fda:	4b20      	ldr	r3, [pc, #128]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 8009fe0:	f043 0301 	orr.w	r3, r3, #1
 8009fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8009fe6:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 8009fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a000:	2303      	movs	r3, #3
 800a002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a004:	230a      	movs	r3, #10
 800a006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a008:	f107 0314 	add.w	r3, r7, #20
 800a00c:	4619      	mov	r1, r3
 800a00e:	4814      	ldr	r0, [pc, #80]	; (800a060 <HAL_PCD_MspInit+0xa8>)
 800a010:	f7f7 fbea 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a014:	4b11      	ldr	r3, [pc, #68]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 800a016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a018:	4a10      	ldr	r2, [pc, #64]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 800a01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01e:	6353      	str	r3, [r2, #52]	; 0x34
 800a020:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 800a022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 800a02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a030:	4a0a      	ldr	r2, [pc, #40]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 800a032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a036:	6453      	str	r3, [r2, #68]	; 0x44
 800a038:	4b08      	ldr	r3, [pc, #32]	; (800a05c <HAL_PCD_MspInit+0xa4>)
 800a03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a040:	60bb      	str	r3, [r7, #8]
 800a042:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a044:	2200      	movs	r2, #0
 800a046:	2105      	movs	r1, #5
 800a048:	2043      	movs	r0, #67	; 0x43
 800a04a:	f7f7 fba3 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a04e:	2043      	movs	r0, #67	; 0x43
 800a050:	f7f7 fbbc 	bl	80017cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a054:	bf00      	nop
 800a056:	3728      	adds	r7, #40	; 0x28
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40023800 	.word	0x40023800
 800a060:	40020000 	.word	0x40020000

0800a064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f7fb ff93 	bl	8005fa6 <USBD_LL_SetupStage>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a09a:	78fa      	ldrb	r2, [r7, #3]
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	1a9b      	subs	r3, r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	440b      	add	r3, r1
 800a0a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f7fb ffc3 	bl	800603c <USBD_LL_DataOutStage>
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	6879      	ldr	r1, [r7, #4]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	1a9b      	subs	r3, r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	440b      	add	r3, r1
 800a0de:	3348      	adds	r3, #72	; 0x48
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f7fc f81a 	bl	800611e <USBD_LL_DataInStage>
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a100:	4618      	mov	r0, r3
 800a102:	f7fc f928 	bl	8006356 <USBD_LL_SOF>
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a116:	2301      	movs	r3, #1
 800a118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a122:	2300      	movs	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
 800a126:	e008      	b.n	800a13a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d102      	bne.n	800a136 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
 800a134:	e001      	b.n	800a13a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a136:	f7f6 ffe9 	bl	800110c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a140:	7bfa      	ldrb	r2, [r7, #15]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7fc f8d0 	bl	80062ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a150:	4618      	mov	r0, r3
 800a152:	f7fc f889 	bl	8006268 <USBD_LL_Reset>
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
	...

0800a160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fc f8cb 	bl	800630a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a186:	f043 0301 	orr.w	r3, r3, #1
 800a18a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a194:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <HAL_PCD_SuspendCallback+0x48>)
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	4a03      	ldr	r2, [pc, #12]	; (800a1a8 <HAL_PCD_SuspendCallback+0x48>)
 800a19a:	f043 0306 	orr.w	r3, r3, #6
 800a19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed00 	.word	0xe000ed00

0800a1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fc f8ba 	bl	8006334 <USBD_LL_Resume>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1da:	78fa      	ldrb	r2, [r7, #3]
 800a1dc:	4611      	mov	r1, r2
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fc f8e0 	bl	80063a4 <USBD_LL_IsoOUTIncomplete>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1fe:	78fa      	ldrb	r2, [r7, #3]
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7fc f8c1 	bl	800638a <USBD_LL_IsoINIncomplete>
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fc f8cd 	bl	80063be <USBD_LL_DevConnected>
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fc f8ca 	bl	80063d4 <USBD_LL_DevDisconnected>
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d13c      	bne.n	800a2d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a258:	4a20      	ldr	r2, [pc, #128]	; (800a2dc <USBD_LL_Init+0x94>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a1e      	ldr	r2, [pc, #120]	; (800a2dc <USBD_LL_Init+0x94>)
 800a264:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a268:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <USBD_LL_Init+0x94>)
 800a26a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a26e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a270:	4b1a      	ldr	r3, [pc, #104]	; (800a2dc <USBD_LL_Init+0x94>)
 800a272:	2206      	movs	r2, #6
 800a274:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a276:	4b19      	ldr	r3, [pc, #100]	; (800a2dc <USBD_LL_Init+0x94>)
 800a278:	2202      	movs	r2, #2
 800a27a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a27c:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <USBD_LL_Init+0x94>)
 800a27e:	2200      	movs	r2, #0
 800a280:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a282:	4b16      	ldr	r3, [pc, #88]	; (800a2dc <USBD_LL_Init+0x94>)
 800a284:	2202      	movs	r2, #2
 800a286:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a288:	4b14      	ldr	r3, [pc, #80]	; (800a2dc <USBD_LL_Init+0x94>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <USBD_LL_Init+0x94>)
 800a290:	2200      	movs	r2, #0
 800a292:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a294:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <USBD_LL_Init+0x94>)
 800a296:	2200      	movs	r2, #0
 800a298:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a29a:	4b10      	ldr	r3, [pc, #64]	; (800a2dc <USBD_LL_Init+0x94>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2a0:	4b0e      	ldr	r3, [pc, #56]	; (800a2dc <USBD_LL_Init+0x94>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2a6:	480d      	ldr	r0, [pc, #52]	; (800a2dc <USBD_LL_Init+0x94>)
 800a2a8:	f7f7 fc48 	bl	8001b3c <HAL_PCD_Init>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2b2:	f7f6 ff2b 	bl	800110c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2b6:	2180      	movs	r1, #128	; 0x80
 800a2b8:	4808      	ldr	r0, [pc, #32]	; (800a2dc <USBD_LL_Init+0x94>)
 800a2ba:	f7f8 fdc8 	bl	8002e4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2be:	2240      	movs	r2, #64	; 0x40
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4806      	ldr	r0, [pc, #24]	; (800a2dc <USBD_LL_Init+0x94>)
 800a2c4:	f7f8 fd7c 	bl	8002dc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a2c8:	2280      	movs	r2, #128	; 0x80
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	4803      	ldr	r0, [pc, #12]	; (800a2dc <USBD_LL_Init+0x94>)
 800a2ce:	f7f8 fd77 	bl	8002dc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	2000796c 	.word	0x2000796c

0800a2e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7f7 fd38 	bl	8001d6c <HAL_PCD_Start>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f982 	bl	800a60c <USBD_Get_USB_Status>
 800a308:	4603      	mov	r3, r0
 800a30a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	4608      	mov	r0, r1
 800a320:	4611      	mov	r1, r2
 800a322:	461a      	mov	r2, r3
 800a324:	4603      	mov	r3, r0
 800a326:	70fb      	strb	r3, [r7, #3]
 800a328:	460b      	mov	r3, r1
 800a32a:	70bb      	strb	r3, [r7, #2]
 800a32c:	4613      	mov	r3, r2
 800a32e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a33e:	78bb      	ldrb	r3, [r7, #2]
 800a340:	883a      	ldrh	r2, [r7, #0]
 800a342:	78f9      	ldrb	r1, [r7, #3]
 800a344:	f7f8 f92d 	bl	80025a2 <HAL_PCD_EP_Open>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 f95c 	bl	800a60c <USBD_Get_USB_Status>
 800a354:	4603      	mov	r3, r0
 800a356:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a358:	7bbb      	ldrb	r3, [r7, #14]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a37c:	78fa      	ldrb	r2, [r7, #3]
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f7f8 f976 	bl	8002672 <HAL_PCD_EP_Close>
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 f93d 	bl	800a60c <USBD_Get_USB_Status>
 800a392:	4603      	mov	r3, r0
 800a394:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a396:	7bbb      	ldrb	r3, [r7, #14]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a3ba:	78fa      	ldrb	r2, [r7, #3]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f8 fa4e 	bl	8002860 <HAL_PCD_EP_SetStall>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 f91e 	bl	800a60c <USBD_Get_USB_Status>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a3f8:	78fa      	ldrb	r2, [r7, #3]
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f8 fa93 	bl	8002928 <HAL_PCD_EP_ClrStall>
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a406:	7bfb      	ldrb	r3, [r7, #15]
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 f8ff 	bl	800a60c <USBD_Get_USB_Status>
 800a40e:	4603      	mov	r3, r0
 800a410:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a412:	7bbb      	ldrb	r3, [r7, #14]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a42e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a434:	2b00      	cmp	r3, #0
 800a436:	da0b      	bge.n	800a450 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a43e:	68f9      	ldr	r1, [r7, #12]
 800a440:	4613      	mov	r3, r2
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	333e      	adds	r3, #62	; 0x3e
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	e00b      	b.n	800a468 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	4613      	mov	r3, r2
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	440b      	add	r3, r1
 800a462:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a466:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f7f8 f860 	bl	8002558 <HAL_PCD_SetAddress>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f8b4 	bl	800a60c <USBD_Get_USB_Status>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b086      	sub	sp, #24
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	60f8      	str	r0, [r7, #12]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	460b      	mov	r3, r1
 800a4c0:	72fb      	strb	r3, [r7, #11]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a4d4:	893b      	ldrh	r3, [r7, #8]
 800a4d6:	7af9      	ldrb	r1, [r7, #11]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	f7f8 f977 	bl	80027cc <HAL_PCD_EP_Transmit>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 f891 	bl	800a60c <USBD_Get_USB_Status>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a4ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	607a      	str	r2, [r7, #4]
 800a502:	461a      	mov	r2, r3
 800a504:	460b      	mov	r3, r1
 800a506:	72fb      	strb	r3, [r7, #11]
 800a508:	4613      	mov	r3, r2
 800a50a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800a51a:	893b      	ldrh	r3, [r7, #8]
 800a51c:	7af9      	ldrb	r1, [r7, #11]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	f7f8 f8f1 	bl	8002706 <HAL_PCD_EP_Receive>
 800a524:	4603      	mov	r3, r0
 800a526:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f86e 	bl	800a60c <USBD_Get_USB_Status>
 800a530:	4603      	mov	r3, r0
 800a532:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a534:	7dbb      	ldrb	r3, [r7, #22]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f7f8 f921 	bl	800279c <HAL_PCD_EP_GetRxCount>
 800a55a:	4603      	mov	r3, r0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <HAL_PCDEx_LPM_Callback+0x18>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d01f      	beq.n	800a5ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800a57a:	e03b      	b.n	800a5f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d007      	beq.n	800a594 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a584:	f000 f83c 	bl	800a600 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a588:	4b1c      	ldr	r3, [pc, #112]	; (800a5fc <HAL_PCDEx_LPM_Callback+0x98>)
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	4a1b      	ldr	r2, [pc, #108]	; (800a5fc <HAL_PCDEx_LPM_Callback+0x98>)
 800a58e:	f023 0306 	bic.w	r3, r3, #6
 800a592:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fb febe 	bl	8006334 <USBD_LL_Resume>
    break;
 800a5b8:	e01c      	b.n	800a5f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6812      	ldr	r2, [r2, #0]
 800a5c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5cc:	f043 0301 	orr.w	r3, r3, #1
 800a5d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fb fe96 	bl	800630a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <HAL_PCDEx_LPM_Callback+0x98>)
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	4a04      	ldr	r2, [pc, #16]	; (800a5fc <HAL_PCDEx_LPM_Callback+0x98>)
 800a5ec:	f043 0306 	orr.w	r3, r3, #6
 800a5f0:	6113      	str	r3, [r2, #16]
    break;   
 800a5f2:	bf00      	nop
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a604:	f7f6 fcb6 	bl	8000f74 <SystemClock_Config>
}
 800a608:	bf00      	nop
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	4603      	mov	r3, r0
 800a614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d817      	bhi.n	800a650 <USBD_Get_USB_Status+0x44>
 800a620:	a201      	add	r2, pc, #4	; (adr r2, 800a628 <USBD_Get_USB_Status+0x1c>)
 800a622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a626:	bf00      	nop
 800a628:	0800a639 	.word	0x0800a639
 800a62c:	0800a63f 	.word	0x0800a63f
 800a630:	0800a645 	.word	0x0800a645
 800a634:	0800a64b 	.word	0x0800a64b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
    break;
 800a63c:	e00b      	b.n	800a656 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a63e:	2302      	movs	r3, #2
 800a640:	73fb      	strb	r3, [r7, #15]
    break;
 800a642:	e008      	b.n	800a656 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a644:	2301      	movs	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
    break;
 800a648:	e005      	b.n	800a656 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a64a:	2302      	movs	r3, #2
 800a64c:	73fb      	strb	r3, [r7, #15]
    break;
 800a64e:	e002      	b.n	800a656 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a650:	2302      	movs	r3, #2
 800a652:	73fb      	strb	r3, [r7, #15]
    break;
 800a654:	bf00      	nop
  }
  return usb_status;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <__errno>:
 800a664:	4b01      	ldr	r3, [pc, #4]	; (800a66c <__errno+0x8>)
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	2000018c 	.word	0x2000018c

0800a670 <__libc_init_array>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	4e0d      	ldr	r6, [pc, #52]	; (800a6a8 <__libc_init_array+0x38>)
 800a674:	4c0d      	ldr	r4, [pc, #52]	; (800a6ac <__libc_init_array+0x3c>)
 800a676:	1ba4      	subs	r4, r4, r6
 800a678:	10a4      	asrs	r4, r4, #2
 800a67a:	2500      	movs	r5, #0
 800a67c:	42a5      	cmp	r5, r4
 800a67e:	d109      	bne.n	800a694 <__libc_init_array+0x24>
 800a680:	4e0b      	ldr	r6, [pc, #44]	; (800a6b0 <__libc_init_array+0x40>)
 800a682:	4c0c      	ldr	r4, [pc, #48]	; (800a6b4 <__libc_init_array+0x44>)
 800a684:	f001 f94e 	bl	800b924 <_init>
 800a688:	1ba4      	subs	r4, r4, r6
 800a68a:	10a4      	asrs	r4, r4, #2
 800a68c:	2500      	movs	r5, #0
 800a68e:	42a5      	cmp	r5, r4
 800a690:	d105      	bne.n	800a69e <__libc_init_array+0x2e>
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a698:	4798      	blx	r3
 800a69a:	3501      	adds	r5, #1
 800a69c:	e7ee      	b.n	800a67c <__libc_init_array+0xc>
 800a69e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6a2:	4798      	blx	r3
 800a6a4:	3501      	adds	r5, #1
 800a6a6:	e7f2      	b.n	800a68e <__libc_init_array+0x1e>
 800a6a8:	0800ba40 	.word	0x0800ba40
 800a6ac:	0800ba40 	.word	0x0800ba40
 800a6b0:	0800ba40 	.word	0x0800ba40
 800a6b4:	0800ba44 	.word	0x0800ba44

0800a6b8 <malloc>:
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <malloc+0xc>)
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f000 b86d 	b.w	800a79c <_malloc_r>
 800a6c2:	bf00      	nop
 800a6c4:	2000018c 	.word	0x2000018c

0800a6c8 <free>:
 800a6c8:	4b02      	ldr	r3, [pc, #8]	; (800a6d4 <free+0xc>)
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f000 b817 	b.w	800a700 <_free_r>
 800a6d2:	bf00      	nop
 800a6d4:	2000018c 	.word	0x2000018c

0800a6d8 <memcpy>:
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	1e43      	subs	r3, r0, #1
 800a6dc:	440a      	add	r2, r1
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	d100      	bne.n	800a6e4 <memcpy+0xc>
 800a6e2:	bd10      	pop	{r4, pc}
 800a6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6ec:	e7f7      	b.n	800a6de <memcpy+0x6>

0800a6ee <memset>:
 800a6ee:	4402      	add	r2, r0
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d100      	bne.n	800a6f8 <memset+0xa>
 800a6f6:	4770      	bx	lr
 800a6f8:	f803 1b01 	strb.w	r1, [r3], #1
 800a6fc:	e7f9      	b.n	800a6f2 <memset+0x4>
	...

0800a700 <_free_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4605      	mov	r5, r0
 800a704:	2900      	cmp	r1, #0
 800a706:	d045      	beq.n	800a794 <_free_r+0x94>
 800a708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a70c:	1f0c      	subs	r4, r1, #4
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfb8      	it	lt
 800a712:	18e4      	addlt	r4, r4, r3
 800a714:	f000 f8ac 	bl	800a870 <__malloc_lock>
 800a718:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <_free_r+0x98>)
 800a71a:	6813      	ldr	r3, [r2, #0]
 800a71c:	4610      	mov	r0, r2
 800a71e:	b933      	cbnz	r3, 800a72e <_free_r+0x2e>
 800a720:	6063      	str	r3, [r4, #4]
 800a722:	6014      	str	r4, [r2, #0]
 800a724:	4628      	mov	r0, r5
 800a726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72a:	f000 b8a2 	b.w	800a872 <__malloc_unlock>
 800a72e:	42a3      	cmp	r3, r4
 800a730:	d90c      	bls.n	800a74c <_free_r+0x4c>
 800a732:	6821      	ldr	r1, [r4, #0]
 800a734:	1862      	adds	r2, r4, r1
 800a736:	4293      	cmp	r3, r2
 800a738:	bf04      	itt	eq
 800a73a:	681a      	ldreq	r2, [r3, #0]
 800a73c:	685b      	ldreq	r3, [r3, #4]
 800a73e:	6063      	str	r3, [r4, #4]
 800a740:	bf04      	itt	eq
 800a742:	1852      	addeq	r2, r2, r1
 800a744:	6022      	streq	r2, [r4, #0]
 800a746:	6004      	str	r4, [r0, #0]
 800a748:	e7ec      	b.n	800a724 <_free_r+0x24>
 800a74a:	4613      	mov	r3, r2
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	b10a      	cbz	r2, 800a754 <_free_r+0x54>
 800a750:	42a2      	cmp	r2, r4
 800a752:	d9fa      	bls.n	800a74a <_free_r+0x4a>
 800a754:	6819      	ldr	r1, [r3, #0]
 800a756:	1858      	adds	r0, r3, r1
 800a758:	42a0      	cmp	r0, r4
 800a75a:	d10b      	bne.n	800a774 <_free_r+0x74>
 800a75c:	6820      	ldr	r0, [r4, #0]
 800a75e:	4401      	add	r1, r0
 800a760:	1858      	adds	r0, r3, r1
 800a762:	4282      	cmp	r2, r0
 800a764:	6019      	str	r1, [r3, #0]
 800a766:	d1dd      	bne.n	800a724 <_free_r+0x24>
 800a768:	6810      	ldr	r0, [r2, #0]
 800a76a:	6852      	ldr	r2, [r2, #4]
 800a76c:	605a      	str	r2, [r3, #4]
 800a76e:	4401      	add	r1, r0
 800a770:	6019      	str	r1, [r3, #0]
 800a772:	e7d7      	b.n	800a724 <_free_r+0x24>
 800a774:	d902      	bls.n	800a77c <_free_r+0x7c>
 800a776:	230c      	movs	r3, #12
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	e7d3      	b.n	800a724 <_free_r+0x24>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	1821      	adds	r1, r4, r0
 800a780:	428a      	cmp	r2, r1
 800a782:	bf04      	itt	eq
 800a784:	6811      	ldreq	r1, [r2, #0]
 800a786:	6852      	ldreq	r2, [r2, #4]
 800a788:	6062      	str	r2, [r4, #4]
 800a78a:	bf04      	itt	eq
 800a78c:	1809      	addeq	r1, r1, r0
 800a78e:	6021      	streq	r1, [r4, #0]
 800a790:	605c      	str	r4, [r3, #4]
 800a792:	e7c7      	b.n	800a724 <_free_r+0x24>
 800a794:	bd38      	pop	{r3, r4, r5, pc}
 800a796:	bf00      	nop
 800a798:	20004b20 	.word	0x20004b20

0800a79c <_malloc_r>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	1ccd      	adds	r5, r1, #3
 800a7a0:	f025 0503 	bic.w	r5, r5, #3
 800a7a4:	3508      	adds	r5, #8
 800a7a6:	2d0c      	cmp	r5, #12
 800a7a8:	bf38      	it	cc
 800a7aa:	250c      	movcc	r5, #12
 800a7ac:	2d00      	cmp	r5, #0
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	db01      	blt.n	800a7b6 <_malloc_r+0x1a>
 800a7b2:	42a9      	cmp	r1, r5
 800a7b4:	d903      	bls.n	800a7be <_malloc_r+0x22>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	6033      	str	r3, [r6, #0]
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	bd70      	pop	{r4, r5, r6, pc}
 800a7be:	f000 f857 	bl	800a870 <__malloc_lock>
 800a7c2:	4a21      	ldr	r2, [pc, #132]	; (800a848 <_malloc_r+0xac>)
 800a7c4:	6814      	ldr	r4, [r2, #0]
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	b991      	cbnz	r1, 800a7f0 <_malloc_r+0x54>
 800a7ca:	4c20      	ldr	r4, [pc, #128]	; (800a84c <_malloc_r+0xb0>)
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	b91b      	cbnz	r3, 800a7d8 <_malloc_r+0x3c>
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 f83d 	bl	800a850 <_sbrk_r>
 800a7d6:	6020      	str	r0, [r4, #0]
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f000 f838 	bl	800a850 <_sbrk_r>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d124      	bne.n	800a82e <_malloc_r+0x92>
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	6033      	str	r3, [r6, #0]
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	f000 f842 	bl	800a872 <__malloc_unlock>
 800a7ee:	e7e4      	b.n	800a7ba <_malloc_r+0x1e>
 800a7f0:	680b      	ldr	r3, [r1, #0]
 800a7f2:	1b5b      	subs	r3, r3, r5
 800a7f4:	d418      	bmi.n	800a828 <_malloc_r+0x8c>
 800a7f6:	2b0b      	cmp	r3, #11
 800a7f8:	d90f      	bls.n	800a81a <_malloc_r+0x7e>
 800a7fa:	600b      	str	r3, [r1, #0]
 800a7fc:	50cd      	str	r5, [r1, r3]
 800a7fe:	18cc      	adds	r4, r1, r3
 800a800:	4630      	mov	r0, r6
 800a802:	f000 f836 	bl	800a872 <__malloc_unlock>
 800a806:	f104 000b 	add.w	r0, r4, #11
 800a80a:	1d23      	adds	r3, r4, #4
 800a80c:	f020 0007 	bic.w	r0, r0, #7
 800a810:	1ac3      	subs	r3, r0, r3
 800a812:	d0d3      	beq.n	800a7bc <_malloc_r+0x20>
 800a814:	425a      	negs	r2, r3
 800a816:	50e2      	str	r2, [r4, r3]
 800a818:	e7d0      	b.n	800a7bc <_malloc_r+0x20>
 800a81a:	428c      	cmp	r4, r1
 800a81c:	684b      	ldr	r3, [r1, #4]
 800a81e:	bf16      	itet	ne
 800a820:	6063      	strne	r3, [r4, #4]
 800a822:	6013      	streq	r3, [r2, #0]
 800a824:	460c      	movne	r4, r1
 800a826:	e7eb      	b.n	800a800 <_malloc_r+0x64>
 800a828:	460c      	mov	r4, r1
 800a82a:	6849      	ldr	r1, [r1, #4]
 800a82c:	e7cc      	b.n	800a7c8 <_malloc_r+0x2c>
 800a82e:	1cc4      	adds	r4, r0, #3
 800a830:	f024 0403 	bic.w	r4, r4, #3
 800a834:	42a0      	cmp	r0, r4
 800a836:	d005      	beq.n	800a844 <_malloc_r+0xa8>
 800a838:	1a21      	subs	r1, r4, r0
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 f808 	bl	800a850 <_sbrk_r>
 800a840:	3001      	adds	r0, #1
 800a842:	d0cf      	beq.n	800a7e4 <_malloc_r+0x48>
 800a844:	6025      	str	r5, [r4, #0]
 800a846:	e7db      	b.n	800a800 <_malloc_r+0x64>
 800a848:	20004b20 	.word	0x20004b20
 800a84c:	20004b24 	.word	0x20004b24

0800a850 <_sbrk_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4c06      	ldr	r4, [pc, #24]	; (800a86c <_sbrk_r+0x1c>)
 800a854:	2300      	movs	r3, #0
 800a856:	4605      	mov	r5, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	f7f6 fd0c 	bl	8001278 <_sbrk>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_sbrk_r+0x1a>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	b103      	cbz	r3, 800a86a <_sbrk_r+0x1a>
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	20007d70 	.word	0x20007d70

0800a870 <__malloc_lock>:
 800a870:	4770      	bx	lr

0800a872 <__malloc_unlock>:
 800a872:	4770      	bx	lr

0800a874 <pow>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	ed2d 8b04 	vpush	{d8-d9}
 800a87c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800ab50 <pow+0x2dc>
 800a880:	b08d      	sub	sp, #52	; 0x34
 800a882:	ec57 6b10 	vmov	r6, r7, d0
 800a886:	ec55 4b11 	vmov	r4, r5, d1
 800a88a:	f000 f965 	bl	800ab58 <__ieee754_pow>
 800a88e:	f999 3000 	ldrsb.w	r3, [r9]
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	3301      	adds	r3, #1
 800a896:	eeb0 8a40 	vmov.f32	s16, s0
 800a89a:	eef0 8a60 	vmov.f32	s17, s1
 800a89e:	46c8      	mov	r8, r9
 800a8a0:	d05f      	beq.n	800a962 <pow+0xee>
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	462b      	mov	r3, r5
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	f7f6 f907 	bl	8000abc <__aeabi_dcmpun>
 800a8ae:	4683      	mov	fp, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d156      	bne.n	800a962 <pow+0xee>
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f6 f8fe 	bl	8000abc <__aeabi_dcmpun>
 800a8c0:	9001      	str	r0, [sp, #4]
 800a8c2:	b1e8      	cbz	r0, 800a900 <pow+0x8c>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f6 f8c4 	bl	8000a58 <__aeabi_dcmpeq>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d046      	beq.n	800a962 <pow+0xee>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	9302      	str	r3, [sp, #8]
 800a8d8:	4b96      	ldr	r3, [pc, #600]	; (800ab34 <pow+0x2c0>)
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	4b96      	ldr	r3, [pc, #600]	; (800ab38 <pow+0x2c4>)
 800a8de:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8e8:	9b00      	ldr	r3, [sp, #0]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a8f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a8f4:	d033      	beq.n	800a95e <pow+0xea>
 800a8f6:	a802      	add	r0, sp, #8
 800a8f8:	f000 fefd 	bl	800b6f6 <matherr>
 800a8fc:	bb48      	cbnz	r0, 800a952 <pow+0xde>
 800a8fe:	e05d      	b.n	800a9bc <pow+0x148>
 800a900:	f04f 0a00 	mov.w	sl, #0
 800a904:	f04f 0b00 	mov.w	fp, #0
 800a908:	4652      	mov	r2, sl
 800a90a:	465b      	mov	r3, fp
 800a90c:	4630      	mov	r0, r6
 800a90e:	4639      	mov	r1, r7
 800a910:	f7f6 f8a2 	bl	8000a58 <__aeabi_dcmpeq>
 800a914:	ec4b ab19 	vmov	d9, sl, fp
 800a918:	2800      	cmp	r0, #0
 800a91a:	d054      	beq.n	800a9c6 <pow+0x152>
 800a91c:	4652      	mov	r2, sl
 800a91e:	465b      	mov	r3, fp
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	f7f6 f898 	bl	8000a58 <__aeabi_dcmpeq>
 800a928:	4680      	mov	r8, r0
 800a92a:	b318      	cbz	r0, 800a974 <pow+0x100>
 800a92c:	2301      	movs	r3, #1
 800a92e:	9302      	str	r3, [sp, #8]
 800a930:	4b80      	ldr	r3, [pc, #512]	; (800ab34 <pow+0x2c0>)
 800a932:	9303      	str	r3, [sp, #12]
 800a934:	9b01      	ldr	r3, [sp, #4]
 800a936:	930a      	str	r3, [sp, #40]	; 0x28
 800a938:	9b00      	ldr	r3, [sp, #0]
 800a93a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a93e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a942:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0d5      	beq.n	800a8f6 <pow+0x82>
 800a94a:	4b7b      	ldr	r3, [pc, #492]	; (800ab38 <pow+0x2c4>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a954:	b11b      	cbz	r3, 800a95e <pow+0xea>
 800a956:	f7ff fe85 	bl	800a664 <__errno>
 800a95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a95c:	6003      	str	r3, [r0, #0]
 800a95e:	ed9d 8b08 	vldr	d8, [sp, #32]
 800a962:	eeb0 0a48 	vmov.f32	s0, s16
 800a966:	eef0 0a68 	vmov.f32	s1, s17
 800a96a:	b00d      	add	sp, #52	; 0x34
 800a96c:	ecbd 8b04 	vpop	{d8-d9}
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	ec45 4b10 	vmov	d0, r4, r5
 800a978:	f000 feb5 	bl	800b6e6 <finite>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d0f0      	beq.n	800a962 <pow+0xee>
 800a980:	4652      	mov	r2, sl
 800a982:	465b      	mov	r3, fp
 800a984:	4620      	mov	r0, r4
 800a986:	4629      	mov	r1, r5
 800a988:	f7f6 f870 	bl	8000a6c <__aeabi_dcmplt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d0e8      	beq.n	800a962 <pow+0xee>
 800a990:	2301      	movs	r3, #1
 800a992:	9302      	str	r3, [sp, #8]
 800a994:	4b67      	ldr	r3, [pc, #412]	; (800ab34 <pow+0x2c0>)
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	f999 3000 	ldrsb.w	r3, [r9]
 800a99c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a9a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a9a8:	b913      	cbnz	r3, 800a9b0 <pow+0x13c>
 800a9aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a9ae:	e7a2      	b.n	800a8f6 <pow+0x82>
 800a9b0:	4962      	ldr	r1, [pc, #392]	; (800ab3c <pow+0x2c8>)
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d19c      	bne.n	800a8f6 <pow+0x82>
 800a9bc:	f7ff fe52 	bl	800a664 <__errno>
 800a9c0:	2321      	movs	r3, #33	; 0x21
 800a9c2:	6003      	str	r3, [r0, #0]
 800a9c4:	e7c5      	b.n	800a952 <pow+0xde>
 800a9c6:	eeb0 0a48 	vmov.f32	s0, s16
 800a9ca:	eef0 0a68 	vmov.f32	s1, s17
 800a9ce:	f000 fe8a 	bl	800b6e6 <finite>
 800a9d2:	9000      	str	r0, [sp, #0]
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f040 8081 	bne.w	800aadc <pow+0x268>
 800a9da:	ec47 6b10 	vmov	d0, r6, r7
 800a9de:	f000 fe82 	bl	800b6e6 <finite>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d07a      	beq.n	800aadc <pow+0x268>
 800a9e6:	ec45 4b10 	vmov	d0, r4, r5
 800a9ea:	f000 fe7c 	bl	800b6e6 <finite>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d074      	beq.n	800aadc <pow+0x268>
 800a9f2:	ec53 2b18 	vmov	r2, r3, d8
 800a9f6:	ee18 0a10 	vmov	r0, s16
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f7f6 f85e 	bl	8000abc <__aeabi_dcmpun>
 800aa00:	f999 9000 	ldrsb.w	r9, [r9]
 800aa04:	4b4b      	ldr	r3, [pc, #300]	; (800ab34 <pow+0x2c0>)
 800aa06:	b1b0      	cbz	r0, 800aa36 <pow+0x1c2>
 800aa08:	2201      	movs	r2, #1
 800aa0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa0e:	9b00      	ldr	r3, [sp, #0]
 800aa10:	930a      	str	r3, [sp, #40]	; 0x28
 800aa12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aa16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aa1a:	f1b9 0f00 	cmp.w	r9, #0
 800aa1e:	d0c4      	beq.n	800a9aa <pow+0x136>
 800aa20:	4652      	mov	r2, sl
 800aa22:	465b      	mov	r3, fp
 800aa24:	4650      	mov	r0, sl
 800aa26:	4659      	mov	r1, fp
 800aa28:	f7f5 fed8 	bl	80007dc <__aeabi_ddiv>
 800aa2c:	f1b9 0f02 	cmp.w	r9, #2
 800aa30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa34:	e7c1      	b.n	800a9ba <pow+0x146>
 800aa36:	2203      	movs	r2, #3
 800aa38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa3c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4620      	mov	r0, r4
 800aa42:	2200      	movs	r2, #0
 800aa44:	4b3e      	ldr	r3, [pc, #248]	; (800ab40 <pow+0x2cc>)
 800aa46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aa4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aa4e:	f7f5 fd9b 	bl	8000588 <__aeabi_dmul>
 800aa52:	4604      	mov	r4, r0
 800aa54:	460d      	mov	r5, r1
 800aa56:	f1b9 0f00 	cmp.w	r9, #0
 800aa5a:	d124      	bne.n	800aaa6 <pow+0x232>
 800aa5c:	4b39      	ldr	r3, [pc, #228]	; (800ab44 <pow+0x2d0>)
 800aa5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800aa62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa66:	4630      	mov	r0, r6
 800aa68:	4652      	mov	r2, sl
 800aa6a:	465b      	mov	r3, fp
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f5 fffd 	bl	8000a6c <__aeabi_dcmplt>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d056      	beq.n	800ab24 <pow+0x2b0>
 800aa76:	ec45 4b10 	vmov	d0, r4, r5
 800aa7a:	f000 fe49 	bl	800b710 <rint>
 800aa7e:	4622      	mov	r2, r4
 800aa80:	462b      	mov	r3, r5
 800aa82:	ec51 0b10 	vmov	r0, r1, d0
 800aa86:	f7f5 ffe7 	bl	8000a58 <__aeabi_dcmpeq>
 800aa8a:	b920      	cbnz	r0, 800aa96 <pow+0x222>
 800aa8c:	4b2e      	ldr	r3, [pc, #184]	; (800ab48 <pow+0x2d4>)
 800aa8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800aa92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa96:	f998 3000 	ldrsb.w	r3, [r8]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d142      	bne.n	800ab24 <pow+0x2b0>
 800aa9e:	f7ff fde1 	bl	800a664 <__errno>
 800aaa2:	2322      	movs	r3, #34	; 0x22
 800aaa4:	e78d      	b.n	800a9c2 <pow+0x14e>
 800aaa6:	4b29      	ldr	r3, [pc, #164]	; (800ab4c <pow+0x2d8>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aaae:	4630      	mov	r0, r6
 800aab0:	4652      	mov	r2, sl
 800aab2:	465b      	mov	r3, fp
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7f5 ffd9 	bl	8000a6c <__aeabi_dcmplt>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d0eb      	beq.n	800aa96 <pow+0x222>
 800aabe:	ec45 4b10 	vmov	d0, r4, r5
 800aac2:	f000 fe25 	bl	800b710 <rint>
 800aac6:	4622      	mov	r2, r4
 800aac8:	462b      	mov	r3, r5
 800aaca:	ec51 0b10 	vmov	r0, r1, d0
 800aace:	f7f5 ffc3 	bl	8000a58 <__aeabi_dcmpeq>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d1df      	bne.n	800aa96 <pow+0x222>
 800aad6:	2200      	movs	r2, #0
 800aad8:	4b18      	ldr	r3, [pc, #96]	; (800ab3c <pow+0x2c8>)
 800aada:	e7da      	b.n	800aa92 <pow+0x21e>
 800aadc:	2200      	movs	r2, #0
 800aade:	2300      	movs	r3, #0
 800aae0:	ec51 0b18 	vmov	r0, r1, d8
 800aae4:	f7f5 ffb8 	bl	8000a58 <__aeabi_dcmpeq>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f43f af3a 	beq.w	800a962 <pow+0xee>
 800aaee:	ec47 6b10 	vmov	d0, r6, r7
 800aaf2:	f000 fdf8 	bl	800b6e6 <finite>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f43f af33 	beq.w	800a962 <pow+0xee>
 800aafc:	ec45 4b10 	vmov	d0, r4, r5
 800ab00:	f000 fdf1 	bl	800b6e6 <finite>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f43f af2c 	beq.w	800a962 <pow+0xee>
 800ab0a:	2304      	movs	r3, #4
 800ab0c:	9302      	str	r3, [sp, #8]
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <pow+0x2c0>)
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	2300      	movs	r3, #0
 800ab14:	930a      	str	r3, [sp, #40]	; 0x28
 800ab16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ab1e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800ab22:	e7b8      	b.n	800aa96 <pow+0x222>
 800ab24:	a802      	add	r0, sp, #8
 800ab26:	f000 fde6 	bl	800b6f6 <matherr>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f47f af11 	bne.w	800a952 <pow+0xde>
 800ab30:	e7b5      	b.n	800aa9e <pow+0x22a>
 800ab32:	bf00      	nop
 800ab34:	0800b9f4 	.word	0x0800b9f4
 800ab38:	3ff00000 	.word	0x3ff00000
 800ab3c:	fff00000 	.word	0xfff00000
 800ab40:	3fe00000 	.word	0x3fe00000
 800ab44:	47efffff 	.word	0x47efffff
 800ab48:	c7efffff 	.word	0xc7efffff
 800ab4c:	7ff00000 	.word	0x7ff00000
 800ab50:	200001f0 	.word	0x200001f0
 800ab54:	00000000 	.word	0x00000000

0800ab58 <__ieee754_pow>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	b091      	sub	sp, #68	; 0x44
 800ab5e:	ed8d 1b00 	vstr	d1, [sp]
 800ab62:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ab66:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ab6a:	ea58 0302 	orrs.w	r3, r8, r2
 800ab6e:	ec57 6b10 	vmov	r6, r7, d0
 800ab72:	f000 84be 	beq.w	800b4f2 <__ieee754_pow+0x99a>
 800ab76:	4b7a      	ldr	r3, [pc, #488]	; (800ad60 <__ieee754_pow+0x208>)
 800ab78:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	463d      	mov	r5, r7
 800ab80:	ee10 aa10 	vmov	sl, s0
 800ab84:	dc09      	bgt.n	800ab9a <__ieee754_pow+0x42>
 800ab86:	d103      	bne.n	800ab90 <__ieee754_pow+0x38>
 800ab88:	b93e      	cbnz	r6, 800ab9a <__ieee754_pow+0x42>
 800ab8a:	45a0      	cmp	r8, r4
 800ab8c:	dc0d      	bgt.n	800abaa <__ieee754_pow+0x52>
 800ab8e:	e001      	b.n	800ab94 <__ieee754_pow+0x3c>
 800ab90:	4598      	cmp	r8, r3
 800ab92:	dc02      	bgt.n	800ab9a <__ieee754_pow+0x42>
 800ab94:	4598      	cmp	r8, r3
 800ab96:	d10e      	bne.n	800abb6 <__ieee754_pow+0x5e>
 800ab98:	b16a      	cbz	r2, 800abb6 <__ieee754_pow+0x5e>
 800ab9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ab9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aba2:	ea54 030a 	orrs.w	r3, r4, sl
 800aba6:	f000 84a4 	beq.w	800b4f2 <__ieee754_pow+0x99a>
 800abaa:	486e      	ldr	r0, [pc, #440]	; (800ad64 <__ieee754_pow+0x20c>)
 800abac:	b011      	add	sp, #68	; 0x44
 800abae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb2:	f000 bda5 	b.w	800b700 <nan>
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	da53      	bge.n	800ac62 <__ieee754_pow+0x10a>
 800abba:	4b6b      	ldr	r3, [pc, #428]	; (800ad68 <__ieee754_pow+0x210>)
 800abbc:	4598      	cmp	r8, r3
 800abbe:	dc4d      	bgt.n	800ac5c <__ieee754_pow+0x104>
 800abc0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800abc4:	4598      	cmp	r8, r3
 800abc6:	dd4c      	ble.n	800ac62 <__ieee754_pow+0x10a>
 800abc8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800abcc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800abd0:	2b14      	cmp	r3, #20
 800abd2:	dd26      	ble.n	800ac22 <__ieee754_pow+0xca>
 800abd4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800abd8:	fa22 f103 	lsr.w	r1, r2, r3
 800abdc:	fa01 f303 	lsl.w	r3, r1, r3
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d13e      	bne.n	800ac62 <__ieee754_pow+0x10a>
 800abe4:	f001 0101 	and.w	r1, r1, #1
 800abe8:	f1c1 0b02 	rsb	fp, r1, #2
 800abec:	2a00      	cmp	r2, #0
 800abee:	d15b      	bne.n	800aca8 <__ieee754_pow+0x150>
 800abf0:	4b5b      	ldr	r3, [pc, #364]	; (800ad60 <__ieee754_pow+0x208>)
 800abf2:	4598      	cmp	r8, r3
 800abf4:	d124      	bne.n	800ac40 <__ieee754_pow+0xe8>
 800abf6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800abfa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800abfe:	ea53 030a 	orrs.w	r3, r3, sl
 800ac02:	f000 8476 	beq.w	800b4f2 <__ieee754_pow+0x99a>
 800ac06:	4b59      	ldr	r3, [pc, #356]	; (800ad6c <__ieee754_pow+0x214>)
 800ac08:	429c      	cmp	r4, r3
 800ac0a:	dd2d      	ble.n	800ac68 <__ieee754_pow+0x110>
 800ac0c:	f1b9 0f00 	cmp.w	r9, #0
 800ac10:	f280 8473 	bge.w	800b4fa <__ieee754_pow+0x9a2>
 800ac14:	2000      	movs	r0, #0
 800ac16:	2100      	movs	r1, #0
 800ac18:	ec41 0b10 	vmov	d0, r0, r1
 800ac1c:	b011      	add	sp, #68	; 0x44
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	d13e      	bne.n	800aca4 <__ieee754_pow+0x14c>
 800ac26:	f1c3 0314 	rsb	r3, r3, #20
 800ac2a:	fa48 f103 	asr.w	r1, r8, r3
 800ac2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac32:	4543      	cmp	r3, r8
 800ac34:	f040 8469 	bne.w	800b50a <__ieee754_pow+0x9b2>
 800ac38:	f001 0101 	and.w	r1, r1, #1
 800ac3c:	f1c1 0b02 	rsb	fp, r1, #2
 800ac40:	4b4b      	ldr	r3, [pc, #300]	; (800ad70 <__ieee754_pow+0x218>)
 800ac42:	4598      	cmp	r8, r3
 800ac44:	d118      	bne.n	800ac78 <__ieee754_pow+0x120>
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	f280 845a 	bge.w	800b502 <__ieee754_pow+0x9aa>
 800ac4e:	4948      	ldr	r1, [pc, #288]	; (800ad70 <__ieee754_pow+0x218>)
 800ac50:	4632      	mov	r2, r6
 800ac52:	463b      	mov	r3, r7
 800ac54:	2000      	movs	r0, #0
 800ac56:	f7f5 fdc1 	bl	80007dc <__aeabi_ddiv>
 800ac5a:	e7dd      	b.n	800ac18 <__ieee754_pow+0xc0>
 800ac5c:	f04f 0b02 	mov.w	fp, #2
 800ac60:	e7c4      	b.n	800abec <__ieee754_pow+0x94>
 800ac62:	f04f 0b00 	mov.w	fp, #0
 800ac66:	e7c1      	b.n	800abec <__ieee754_pow+0x94>
 800ac68:	f1b9 0f00 	cmp.w	r9, #0
 800ac6c:	dad2      	bge.n	800ac14 <__ieee754_pow+0xbc>
 800ac6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ac72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ac76:	e7cf      	b.n	800ac18 <__ieee754_pow+0xc0>
 800ac78:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ac7c:	d106      	bne.n	800ac8c <__ieee754_pow+0x134>
 800ac7e:	4632      	mov	r2, r6
 800ac80:	463b      	mov	r3, r7
 800ac82:	4610      	mov	r0, r2
 800ac84:	4619      	mov	r1, r3
 800ac86:	f7f5 fc7f 	bl	8000588 <__aeabi_dmul>
 800ac8a:	e7c5      	b.n	800ac18 <__ieee754_pow+0xc0>
 800ac8c:	4b39      	ldr	r3, [pc, #228]	; (800ad74 <__ieee754_pow+0x21c>)
 800ac8e:	4599      	cmp	r9, r3
 800ac90:	d10a      	bne.n	800aca8 <__ieee754_pow+0x150>
 800ac92:	2d00      	cmp	r5, #0
 800ac94:	db08      	blt.n	800aca8 <__ieee754_pow+0x150>
 800ac96:	ec47 6b10 	vmov	d0, r6, r7
 800ac9a:	b011      	add	sp, #68	; 0x44
 800ac9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	f000 bc68 	b.w	800b574 <__ieee754_sqrt>
 800aca4:	f04f 0b00 	mov.w	fp, #0
 800aca8:	ec47 6b10 	vmov	d0, r6, r7
 800acac:	f000 fd12 	bl	800b6d4 <fabs>
 800acb0:	ec51 0b10 	vmov	r0, r1, d0
 800acb4:	f1ba 0f00 	cmp.w	sl, #0
 800acb8:	d127      	bne.n	800ad0a <__ieee754_pow+0x1b2>
 800acba:	b124      	cbz	r4, 800acc6 <__ieee754_pow+0x16e>
 800acbc:	4b2c      	ldr	r3, [pc, #176]	; (800ad70 <__ieee754_pow+0x218>)
 800acbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d121      	bne.n	800ad0a <__ieee754_pow+0x1b2>
 800acc6:	f1b9 0f00 	cmp.w	r9, #0
 800acca:	da05      	bge.n	800acd8 <__ieee754_pow+0x180>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	2000      	movs	r0, #0
 800acd2:	4927      	ldr	r1, [pc, #156]	; (800ad70 <__ieee754_pow+0x218>)
 800acd4:	f7f5 fd82 	bl	80007dc <__aeabi_ddiv>
 800acd8:	2d00      	cmp	r5, #0
 800acda:	da9d      	bge.n	800ac18 <__ieee754_pow+0xc0>
 800acdc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ace0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ace4:	ea54 030b 	orrs.w	r3, r4, fp
 800ace8:	d108      	bne.n	800acfc <__ieee754_pow+0x1a4>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4610      	mov	r0, r2
 800acf0:	4619      	mov	r1, r3
 800acf2:	f7f5 fa91 	bl	8000218 <__aeabi_dsub>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	e7ac      	b.n	800ac56 <__ieee754_pow+0xfe>
 800acfc:	f1bb 0f01 	cmp.w	fp, #1
 800ad00:	d18a      	bne.n	800ac18 <__ieee754_pow+0xc0>
 800ad02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad06:	4619      	mov	r1, r3
 800ad08:	e786      	b.n	800ac18 <__ieee754_pow+0xc0>
 800ad0a:	0fed      	lsrs	r5, r5, #31
 800ad0c:	1e6b      	subs	r3, r5, #1
 800ad0e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad10:	ea5b 0303 	orrs.w	r3, fp, r3
 800ad14:	d102      	bne.n	800ad1c <__ieee754_pow+0x1c4>
 800ad16:	4632      	mov	r2, r6
 800ad18:	463b      	mov	r3, r7
 800ad1a:	e7e8      	b.n	800acee <__ieee754_pow+0x196>
 800ad1c:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <__ieee754_pow+0x220>)
 800ad1e:	4598      	cmp	r8, r3
 800ad20:	f340 80fe 	ble.w	800af20 <__ieee754_pow+0x3c8>
 800ad24:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ad28:	4598      	cmp	r8, r3
 800ad2a:	dd0a      	ble.n	800ad42 <__ieee754_pow+0x1ea>
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <__ieee754_pow+0x214>)
 800ad2e:	429c      	cmp	r4, r3
 800ad30:	dc0d      	bgt.n	800ad4e <__ieee754_pow+0x1f6>
 800ad32:	f1b9 0f00 	cmp.w	r9, #0
 800ad36:	f6bf af6d 	bge.w	800ac14 <__ieee754_pow+0xbc>
 800ad3a:	a307      	add	r3, pc, #28	; (adr r3, 800ad58 <__ieee754_pow+0x200>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	e79f      	b.n	800ac82 <__ieee754_pow+0x12a>
 800ad42:	4b0e      	ldr	r3, [pc, #56]	; (800ad7c <__ieee754_pow+0x224>)
 800ad44:	429c      	cmp	r4, r3
 800ad46:	ddf4      	ble.n	800ad32 <__ieee754_pow+0x1da>
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <__ieee754_pow+0x218>)
 800ad4a:	429c      	cmp	r4, r3
 800ad4c:	dd18      	ble.n	800ad80 <__ieee754_pow+0x228>
 800ad4e:	f1b9 0f00 	cmp.w	r9, #0
 800ad52:	dcf2      	bgt.n	800ad3a <__ieee754_pow+0x1e2>
 800ad54:	e75e      	b.n	800ac14 <__ieee754_pow+0xbc>
 800ad56:	bf00      	nop
 800ad58:	8800759c 	.word	0x8800759c
 800ad5c:	7e37e43c 	.word	0x7e37e43c
 800ad60:	7ff00000 	.word	0x7ff00000
 800ad64:	0800b9f7 	.word	0x0800b9f7
 800ad68:	433fffff 	.word	0x433fffff
 800ad6c:	3fefffff 	.word	0x3fefffff
 800ad70:	3ff00000 	.word	0x3ff00000
 800ad74:	3fe00000 	.word	0x3fe00000
 800ad78:	41e00000 	.word	0x41e00000
 800ad7c:	3feffffe 	.word	0x3feffffe
 800ad80:	2200      	movs	r2, #0
 800ad82:	4b63      	ldr	r3, [pc, #396]	; (800af10 <__ieee754_pow+0x3b8>)
 800ad84:	f7f5 fa48 	bl	8000218 <__aeabi_dsub>
 800ad88:	a355      	add	r3, pc, #340	; (adr r3, 800aee0 <__ieee754_pow+0x388>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	f7f5 fbf9 	bl	8000588 <__aeabi_dmul>
 800ad96:	a354      	add	r3, pc, #336	; (adr r3, 800aee8 <__ieee754_pow+0x390>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fbf0 	bl	8000588 <__aeabi_dmul>
 800ada8:	2200      	movs	r2, #0
 800adaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adae:	4b59      	ldr	r3, [pc, #356]	; (800af14 <__ieee754_pow+0x3bc>)
 800adb0:	4620      	mov	r0, r4
 800adb2:	4629      	mov	r1, r5
 800adb4:	f7f5 fbe8 	bl	8000588 <__aeabi_dmul>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	a14c      	add	r1, pc, #304	; (adr r1, 800aef0 <__ieee754_pow+0x398>)
 800adbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc2:	f7f5 fa29 	bl	8000218 <__aeabi_dsub>
 800adc6:	4622      	mov	r2, r4
 800adc8:	462b      	mov	r3, r5
 800adca:	f7f5 fbdd 	bl	8000588 <__aeabi_dmul>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	2000      	movs	r0, #0
 800add4:	4950      	ldr	r1, [pc, #320]	; (800af18 <__ieee754_pow+0x3c0>)
 800add6:	f7f5 fa1f 	bl	8000218 <__aeabi_dsub>
 800adda:	4622      	mov	r2, r4
 800addc:	462b      	mov	r3, r5
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fbcf 	bl	8000588 <__aeabi_dmul>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4640      	mov	r0, r8
 800adf0:	4649      	mov	r1, r9
 800adf2:	f7f5 fbc9 	bl	8000588 <__aeabi_dmul>
 800adf6:	a340      	add	r3, pc, #256	; (adr r3, 800aef8 <__ieee754_pow+0x3a0>)
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	f7f5 fbc4 	bl	8000588 <__aeabi_dmul>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae08:	f7f5 fa06 	bl	8000218 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fa00 	bl	800021c <__adddf3>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae22:	4632      	mov	r2, r6
 800ae24:	463b      	mov	r3, r7
 800ae26:	f7f5 f9f7 	bl	8000218 <__aeabi_dsub>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 f9f1 	bl	8000218 <__aeabi_dsub>
 800ae36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae38:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	f040 81eb 	bne.w	800b21c <__ieee754_pow+0x6c4>
 800ae46:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800af00 <__ieee754_pow+0x3a8>
 800ae4a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ae4e:	2400      	movs	r4, #0
 800ae50:	4622      	mov	r2, r4
 800ae52:	462b      	mov	r3, r5
 800ae54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae5c:	f7f5 f9dc 	bl	8000218 <__aeabi_dsub>
 800ae60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae64:	f7f5 fb90 	bl	8000588 <__aeabi_dmul>
 800ae68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	4689      	mov	r9, r1
 800ae70:	4630      	mov	r0, r6
 800ae72:	4639      	mov	r1, r7
 800ae74:	f7f5 fb88 	bl	8000588 <__aeabi_dmul>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	4649      	mov	r1, r9
 800ae80:	f7f5 f9cc 	bl	800021c <__adddf3>
 800ae84:	4622      	mov	r2, r4
 800ae86:	462b      	mov	r3, r5
 800ae88:	4680      	mov	r8, r0
 800ae8a:	4689      	mov	r9, r1
 800ae8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae90:	f7f5 fb7a 	bl	8000588 <__aeabi_dmul>
 800ae94:	460b      	mov	r3, r1
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	4640      	mov	r0, r8
 800aea0:	e9cd 4500 	strd	r4, r5, [sp]
 800aea4:	f7f5 f9ba 	bl	800021c <__adddf3>
 800aea8:	4b1c      	ldr	r3, [pc, #112]	; (800af1c <__ieee754_pow+0x3c4>)
 800aeaa:	4299      	cmp	r1, r3
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	468b      	mov	fp, r1
 800aeb2:	f340 82f7 	ble.w	800b4a4 <__ieee754_pow+0x94c>
 800aeb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aeba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aebe:	4303      	orrs	r3, r0
 800aec0:	f000 81ea 	beq.w	800b298 <__ieee754_pow+0x740>
 800aec4:	a310      	add	r3, pc, #64	; (adr r3, 800af08 <__ieee754_pow+0x3b0>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aece:	f7f5 fb5b 	bl	8000588 <__aeabi_dmul>
 800aed2:	a30d      	add	r3, pc, #52	; (adr r3, 800af08 <__ieee754_pow+0x3b0>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	e6d5      	b.n	800ac86 <__ieee754_pow+0x12e>
 800aeda:	bf00      	nop
 800aedc:	f3af 8000 	nop.w
 800aee0:	60000000 	.word	0x60000000
 800aee4:	3ff71547 	.word	0x3ff71547
 800aee8:	f85ddf44 	.word	0xf85ddf44
 800aeec:	3e54ae0b 	.word	0x3e54ae0b
 800aef0:	55555555 	.word	0x55555555
 800aef4:	3fd55555 	.word	0x3fd55555
 800aef8:	652b82fe 	.word	0x652b82fe
 800aefc:	3ff71547 	.word	0x3ff71547
 800af00:	00000000 	.word	0x00000000
 800af04:	bff00000 	.word	0xbff00000
 800af08:	8800759c 	.word	0x8800759c
 800af0c:	7e37e43c 	.word	0x7e37e43c
 800af10:	3ff00000 	.word	0x3ff00000
 800af14:	3fd00000 	.word	0x3fd00000
 800af18:	3fe00000 	.word	0x3fe00000
 800af1c:	408fffff 	.word	0x408fffff
 800af20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800af24:	f04f 0200 	mov.w	r2, #0
 800af28:	da05      	bge.n	800af36 <__ieee754_pow+0x3de>
 800af2a:	4bd3      	ldr	r3, [pc, #844]	; (800b278 <__ieee754_pow+0x720>)
 800af2c:	f7f5 fb2c 	bl	8000588 <__aeabi_dmul>
 800af30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800af34:	460c      	mov	r4, r1
 800af36:	1523      	asrs	r3, r4, #20
 800af38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af3c:	4413      	add	r3, r2
 800af3e:	9309      	str	r3, [sp, #36]	; 0x24
 800af40:	4bce      	ldr	r3, [pc, #824]	; (800b27c <__ieee754_pow+0x724>)
 800af42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800af46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800af4a:	429c      	cmp	r4, r3
 800af4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af50:	dd08      	ble.n	800af64 <__ieee754_pow+0x40c>
 800af52:	4bcb      	ldr	r3, [pc, #812]	; (800b280 <__ieee754_pow+0x728>)
 800af54:	429c      	cmp	r4, r3
 800af56:	f340 815e 	ble.w	800b216 <__ieee754_pow+0x6be>
 800af5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5c:	3301      	adds	r3, #1
 800af5e:	9309      	str	r3, [sp, #36]	; 0x24
 800af60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800af64:	f04f 0a00 	mov.w	sl, #0
 800af68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800af6c:	930c      	str	r3, [sp, #48]	; 0x30
 800af6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af70:	4bc4      	ldr	r3, [pc, #784]	; (800b284 <__ieee754_pow+0x72c>)
 800af72:	4413      	add	r3, r2
 800af74:	ed93 7b00 	vldr	d7, [r3]
 800af78:	4629      	mov	r1, r5
 800af7a:	ec53 2b17 	vmov	r2, r3, d7
 800af7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af86:	f7f5 f947 	bl	8000218 <__aeabi_dsub>
 800af8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af96:	f7f5 f941 	bl	800021c <__adddf3>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	2000      	movs	r0, #0
 800afa0:	49b9      	ldr	r1, [pc, #740]	; (800b288 <__ieee754_pow+0x730>)
 800afa2:	f7f5 fc1b 	bl	80007dc <__aeabi_ddiv>
 800afa6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	f7f5 fae9 	bl	8000588 <__aeabi_dmul>
 800afb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800afbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800afc2:	2300      	movs	r3, #0
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800afca:	106d      	asrs	r5, r5, #1
 800afcc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800afd0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800afd4:	2200      	movs	r2, #0
 800afd6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	4614      	mov	r4, r2
 800afe0:	461d      	mov	r5, r3
 800afe2:	f7f5 fad1 	bl	8000588 <__aeabi_dmul>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4630      	mov	r0, r6
 800afec:	4639      	mov	r1, r7
 800afee:	f7f5 f913 	bl	8000218 <__aeabi_dsub>
 800aff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aff6:	4606      	mov	r6, r0
 800aff8:	460f      	mov	r7, r1
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 f90b 	bl	8000218 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b00a:	f7f5 f905 	bl	8000218 <__aeabi_dsub>
 800b00e:	4642      	mov	r2, r8
 800b010:	464b      	mov	r3, r9
 800b012:	f7f5 fab9 	bl	8000588 <__aeabi_dmul>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4630      	mov	r0, r6
 800b01c:	4639      	mov	r1, r7
 800b01e:	f7f5 f8fb 	bl	8000218 <__aeabi_dsub>
 800b022:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b026:	f7f5 faaf 	bl	8000588 <__aeabi_dmul>
 800b02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b02e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b032:	4610      	mov	r0, r2
 800b034:	4619      	mov	r1, r3
 800b036:	f7f5 faa7 	bl	8000588 <__aeabi_dmul>
 800b03a:	a37b      	add	r3, pc, #492	; (adr r3, 800b228 <__ieee754_pow+0x6d0>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	4604      	mov	r4, r0
 800b042:	460d      	mov	r5, r1
 800b044:	f7f5 faa0 	bl	8000588 <__aeabi_dmul>
 800b048:	a379      	add	r3, pc, #484	; (adr r3, 800b230 <__ieee754_pow+0x6d8>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 f8e5 	bl	800021c <__adddf3>
 800b052:	4622      	mov	r2, r4
 800b054:	462b      	mov	r3, r5
 800b056:	f7f5 fa97 	bl	8000588 <__aeabi_dmul>
 800b05a:	a377      	add	r3, pc, #476	; (adr r3, 800b238 <__ieee754_pow+0x6e0>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 f8dc 	bl	800021c <__adddf3>
 800b064:	4622      	mov	r2, r4
 800b066:	462b      	mov	r3, r5
 800b068:	f7f5 fa8e 	bl	8000588 <__aeabi_dmul>
 800b06c:	a374      	add	r3, pc, #464	; (adr r3, 800b240 <__ieee754_pow+0x6e8>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 f8d3 	bl	800021c <__adddf3>
 800b076:	4622      	mov	r2, r4
 800b078:	462b      	mov	r3, r5
 800b07a:	f7f5 fa85 	bl	8000588 <__aeabi_dmul>
 800b07e:	a372      	add	r3, pc, #456	; (adr r3, 800b248 <__ieee754_pow+0x6f0>)
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	f7f5 f8ca 	bl	800021c <__adddf3>
 800b088:	4622      	mov	r2, r4
 800b08a:	462b      	mov	r3, r5
 800b08c:	f7f5 fa7c 	bl	8000588 <__aeabi_dmul>
 800b090:	a36f      	add	r3, pc, #444	; (adr r3, 800b250 <__ieee754_pow+0x6f8>)
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f7f5 f8c1 	bl	800021c <__adddf3>
 800b09a:	4622      	mov	r2, r4
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	f7f5 fa6f 	bl	8000588 <__aeabi_dmul>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 fa69 	bl	8000588 <__aeabi_dmul>
 800b0b6:	4642      	mov	r2, r8
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	464b      	mov	r3, r9
 800b0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c2:	f7f5 f8ab 	bl	800021c <__adddf3>
 800b0c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0ca:	f7f5 fa5d 	bl	8000588 <__aeabi_dmul>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	f7f5 f8a3 	bl	800021c <__adddf3>
 800b0d6:	4642      	mov	r2, r8
 800b0d8:	4606      	mov	r6, r0
 800b0da:	460f      	mov	r7, r1
 800b0dc:	464b      	mov	r3, r9
 800b0de:	4640      	mov	r0, r8
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	f7f5 fa51 	bl	8000588 <__aeabi_dmul>
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4b68      	ldr	r3, [pc, #416]	; (800b28c <__ieee754_pow+0x734>)
 800b0ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b0ee:	f7f5 f895 	bl	800021c <__adddf3>
 800b0f2:	4632      	mov	r2, r6
 800b0f4:	463b      	mov	r3, r7
 800b0f6:	f7f5 f891 	bl	800021c <__adddf3>
 800b0fa:	9802      	ldr	r0, [sp, #8]
 800b0fc:	460d      	mov	r5, r1
 800b0fe:	4604      	mov	r4, r0
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4640      	mov	r0, r8
 800b106:	4649      	mov	r1, r9
 800b108:	f7f5 fa3e 	bl	8000588 <__aeabi_dmul>
 800b10c:	2200      	movs	r2, #0
 800b10e:	4680      	mov	r8, r0
 800b110:	4689      	mov	r9, r1
 800b112:	4b5e      	ldr	r3, [pc, #376]	; (800b28c <__ieee754_pow+0x734>)
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 f87e 	bl	8000218 <__aeabi_dsub>
 800b11c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b120:	f7f5 f87a 	bl	8000218 <__aeabi_dsub>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4630      	mov	r0, r6
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7f5 f874 	bl	8000218 <__aeabi_dsub>
 800b130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b134:	f7f5 fa28 	bl	8000588 <__aeabi_dmul>
 800b138:	4622      	mov	r2, r4
 800b13a:	4606      	mov	r6, r0
 800b13c:	460f      	mov	r7, r1
 800b13e:	462b      	mov	r3, r5
 800b140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b144:	f7f5 fa20 	bl	8000588 <__aeabi_dmul>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4630      	mov	r0, r6
 800b14e:	4639      	mov	r1, r7
 800b150:	f7f5 f864 	bl	800021c <__adddf3>
 800b154:	4606      	mov	r6, r0
 800b156:	460f      	mov	r7, r1
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 f85c 	bl	800021c <__adddf3>
 800b164:	9802      	ldr	r0, [sp, #8]
 800b166:	a33c      	add	r3, pc, #240	; (adr r3, 800b258 <__ieee754_pow+0x700>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	4604      	mov	r4, r0
 800b16e:	460d      	mov	r5, r1
 800b170:	f7f5 fa0a 	bl	8000588 <__aeabi_dmul>
 800b174:	4642      	mov	r2, r8
 800b176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b17a:	464b      	mov	r3, r9
 800b17c:	4620      	mov	r0, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	f7f5 f84a 	bl	8000218 <__aeabi_dsub>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	4630      	mov	r0, r6
 800b18a:	4639      	mov	r1, r7
 800b18c:	f7f5 f844 	bl	8000218 <__aeabi_dsub>
 800b190:	a333      	add	r3, pc, #204	; (adr r3, 800b260 <__ieee754_pow+0x708>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 f9f7 	bl	8000588 <__aeabi_dmul>
 800b19a:	a333      	add	r3, pc, #204	; (adr r3, 800b268 <__ieee754_pow+0x710>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	460f      	mov	r7, r1
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f5 f9ee 	bl	8000588 <__aeabi_dmul>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	4639      	mov	r1, r7
 800b1b4:	f7f5 f832 	bl	800021c <__adddf3>
 800b1b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1ba:	4b35      	ldr	r3, [pc, #212]	; (800b290 <__ieee754_pow+0x738>)
 800b1bc:	4413      	add	r3, r2
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	f7f5 f82b 	bl	800021c <__adddf3>
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	f7f5 f972 	bl	80004b4 <__aeabi_i2d>
 800b1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1d2:	4b30      	ldr	r3, [pc, #192]	; (800b294 <__ieee754_pow+0x73c>)
 800b1d4:	4413      	add	r3, r2
 800b1d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1da:	4606      	mov	r6, r0
 800b1dc:	460f      	mov	r7, r1
 800b1de:	4622      	mov	r2, r4
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1e6:	f7f5 f819 	bl	800021c <__adddf3>
 800b1ea:	4642      	mov	r2, r8
 800b1ec:	464b      	mov	r3, r9
 800b1ee:	f7f5 f815 	bl	800021c <__adddf3>
 800b1f2:	4632      	mov	r2, r6
 800b1f4:	463b      	mov	r3, r7
 800b1f6:	f7f5 f811 	bl	800021c <__adddf3>
 800b1fa:	9802      	ldr	r0, [sp, #8]
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	463b      	mov	r3, r7
 800b200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b204:	f7f5 f808 	bl	8000218 <__aeabi_dsub>
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	f7f5 f804 	bl	8000218 <__aeabi_dsub>
 800b210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b214:	e607      	b.n	800ae26 <__ieee754_pow+0x2ce>
 800b216:	f04f 0a01 	mov.w	sl, #1
 800b21a:	e6a5      	b.n	800af68 <__ieee754_pow+0x410>
 800b21c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b270 <__ieee754_pow+0x718>
 800b220:	e613      	b.n	800ae4a <__ieee754_pow+0x2f2>
 800b222:	bf00      	nop
 800b224:	f3af 8000 	nop.w
 800b228:	4a454eef 	.word	0x4a454eef
 800b22c:	3fca7e28 	.word	0x3fca7e28
 800b230:	93c9db65 	.word	0x93c9db65
 800b234:	3fcd864a 	.word	0x3fcd864a
 800b238:	a91d4101 	.word	0xa91d4101
 800b23c:	3fd17460 	.word	0x3fd17460
 800b240:	518f264d 	.word	0x518f264d
 800b244:	3fd55555 	.word	0x3fd55555
 800b248:	db6fabff 	.word	0xdb6fabff
 800b24c:	3fdb6db6 	.word	0x3fdb6db6
 800b250:	33333303 	.word	0x33333303
 800b254:	3fe33333 	.word	0x3fe33333
 800b258:	e0000000 	.word	0xe0000000
 800b25c:	3feec709 	.word	0x3feec709
 800b260:	dc3a03fd 	.word	0xdc3a03fd
 800b264:	3feec709 	.word	0x3feec709
 800b268:	145b01f5 	.word	0x145b01f5
 800b26c:	be3e2fe0 	.word	0xbe3e2fe0
 800b270:	00000000 	.word	0x00000000
 800b274:	3ff00000 	.word	0x3ff00000
 800b278:	43400000 	.word	0x43400000
 800b27c:	0003988e 	.word	0x0003988e
 800b280:	000bb679 	.word	0x000bb679
 800b284:	0800b9f8 	.word	0x0800b9f8
 800b288:	3ff00000 	.word	0x3ff00000
 800b28c:	40080000 	.word	0x40080000
 800b290:	0800ba18 	.word	0x0800ba18
 800b294:	0800ba08 	.word	0x0800ba08
 800b298:	a3b4      	add	r3, pc, #720	; (adr r3, 800b56c <__ieee754_pow+0xa14>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	f7f4 ffbb 	bl	800021c <__adddf3>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2ac:	462b      	mov	r3, r5
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f4 ffb1 	bl	8000218 <__aeabi_dsub>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2be:	f7f5 fbf3 	bl	8000aa8 <__aeabi_dcmpgt>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f47f adfe 	bne.w	800aec4 <__ieee754_pow+0x36c>
 800b2c8:	4aa3      	ldr	r2, [pc, #652]	; (800b558 <__ieee754_pow+0xa00>)
 800b2ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	f340 810a 	ble.w	800b4e8 <__ieee754_pow+0x990>
 800b2d4:	151b      	asrs	r3, r3, #20
 800b2d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b2da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b2de:	fa4a f303 	asr.w	r3, sl, r3
 800b2e2:	445b      	add	r3, fp
 800b2e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b2e8:	4e9c      	ldr	r6, [pc, #624]	; (800b55c <__ieee754_pow+0xa04>)
 800b2ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b2ee:	4116      	asrs	r6, r2
 800b2f0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	ea23 0106 	bic.w	r1, r3, r6
 800b2fa:	f1c2 0214 	rsb	r2, r2, #20
 800b2fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b302:	fa4a fa02 	asr.w	sl, sl, r2
 800b306:	f1bb 0f00 	cmp.w	fp, #0
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	bfb8      	it	lt
 800b314:	f1ca 0a00 	rsblt	sl, sl, #0
 800b318:	f7f4 ff7e 	bl	8000218 <__aeabi_dsub>
 800b31c:	e9cd 0100 	strd	r0, r1, [sp]
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b328:	f7f4 ff78 	bl	800021c <__adddf3>
 800b32c:	2000      	movs	r0, #0
 800b32e:	a378      	add	r3, pc, #480	; (adr r3, 800b510 <__ieee754_pow+0x9b8>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	f7f5 f926 	bl	8000588 <__aeabi_dmul>
 800b33c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b340:	4606      	mov	r6, r0
 800b342:	460f      	mov	r7, r1
 800b344:	4620      	mov	r0, r4
 800b346:	4629      	mov	r1, r5
 800b348:	f7f4 ff66 	bl	8000218 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4640      	mov	r0, r8
 800b352:	4649      	mov	r1, r9
 800b354:	f7f4 ff60 	bl	8000218 <__aeabi_dsub>
 800b358:	a36f      	add	r3, pc, #444	; (adr r3, 800b518 <__ieee754_pow+0x9c0>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f913 	bl	8000588 <__aeabi_dmul>
 800b362:	a36f      	add	r3, pc, #444	; (adr r3, 800b520 <__ieee754_pow+0x9c8>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	4680      	mov	r8, r0
 800b36a:	4689      	mov	r9, r1
 800b36c:	4620      	mov	r0, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 f90a 	bl	8000588 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f7f4 ff4e 	bl	800021c <__adddf3>
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f4 ff46 	bl	800021c <__adddf3>
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	f7f4 ff3e 	bl	8000218 <__aeabi_dsub>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f4 ff38 	bl	8000218 <__aeabi_dsub>
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460f      	mov	r7, r1
 800b3ae:	464b      	mov	r3, r9
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f5 f8e8 	bl	8000588 <__aeabi_dmul>
 800b3b8:	a35b      	add	r3, pc, #364	; (adr r3, 800b528 <__ieee754_pow+0x9d0>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	4604      	mov	r4, r0
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	f7f5 f8e1 	bl	8000588 <__aeabi_dmul>
 800b3c6:	a35a      	add	r3, pc, #360	; (adr r3, 800b530 <__ieee754_pow+0x9d8>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff24 	bl	8000218 <__aeabi_dsub>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f8d8 	bl	8000588 <__aeabi_dmul>
 800b3d8:	a357      	add	r3, pc, #348	; (adr r3, 800b538 <__ieee754_pow+0x9e0>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff1d 	bl	800021c <__adddf3>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	f7f5 f8cf 	bl	8000588 <__aeabi_dmul>
 800b3ea:	a355      	add	r3, pc, #340	; (adr r3, 800b540 <__ieee754_pow+0x9e8>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff12 	bl	8000218 <__aeabi_dsub>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	f7f5 f8c6 	bl	8000588 <__aeabi_dmul>
 800b3fc:	a352      	add	r3, pc, #328	; (adr r3, 800b548 <__ieee754_pow+0x9f0>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 ff0b 	bl	800021c <__adddf3>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	f7f5 f8bd 	bl	8000588 <__aeabi_dmul>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f4 feff 	bl	8000218 <__aeabi_dsub>
 800b41a:	4604      	mov	r4, r0
 800b41c:	460d      	mov	r5, r1
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f5 f8af 	bl	8000588 <__aeabi_dmul>
 800b42a:	2200      	movs	r2, #0
 800b42c:	e9cd 0100 	strd	r0, r1, [sp]
 800b430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b434:	4620      	mov	r0, r4
 800b436:	4629      	mov	r1, r5
 800b438:	f7f4 feee 	bl	8000218 <__aeabi_dsub>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b444:	f7f5 f9ca 	bl	80007dc <__aeabi_ddiv>
 800b448:	4632      	mov	r2, r6
 800b44a:	4604      	mov	r4, r0
 800b44c:	460d      	mov	r5, r1
 800b44e:	463b      	mov	r3, r7
 800b450:	4640      	mov	r0, r8
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 f898 	bl	8000588 <__aeabi_dmul>
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	f7f4 fede 	bl	800021c <__adddf3>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f4 fed6 	bl	8000218 <__aeabi_dsub>
 800b46c:	4642      	mov	r2, r8
 800b46e:	464b      	mov	r3, r9
 800b470:	f7f4 fed2 	bl	8000218 <__aeabi_dsub>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	2000      	movs	r0, #0
 800b47a:	4939      	ldr	r1, [pc, #228]	; (800b560 <__ieee754_pow+0xa08>)
 800b47c:	f7f4 fecc 	bl	8000218 <__aeabi_dsub>
 800b480:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b484:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	da2f      	bge.n	800b4ee <__ieee754_pow+0x996>
 800b48e:	4650      	mov	r0, sl
 800b490:	ec43 2b10 	vmov	d0, r2, r3
 800b494:	f000 f9c0 	bl	800b818 <scalbn>
 800b498:	ec51 0b10 	vmov	r0, r1, d0
 800b49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4a0:	f7ff bbf1 	b.w	800ac86 <__ieee754_pow+0x12e>
 800b4a4:	4b2f      	ldr	r3, [pc, #188]	; (800b564 <__ieee754_pow+0xa0c>)
 800b4a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4aa:	429e      	cmp	r6, r3
 800b4ac:	f77f af0c 	ble.w	800b2c8 <__ieee754_pow+0x770>
 800b4b0:	4b2d      	ldr	r3, [pc, #180]	; (800b568 <__ieee754_pow+0xa10>)
 800b4b2:	440b      	add	r3, r1
 800b4b4:	4303      	orrs	r3, r0
 800b4b6:	d00b      	beq.n	800b4d0 <__ieee754_pow+0x978>
 800b4b8:	a325      	add	r3, pc, #148	; (adr r3, 800b550 <__ieee754_pow+0x9f8>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c2:	f7f5 f861 	bl	8000588 <__aeabi_dmul>
 800b4c6:	a322      	add	r3, pc, #136	; (adr r3, 800b550 <__ieee754_pow+0x9f8>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7ff bbdb 	b.w	800ac86 <__ieee754_pow+0x12e>
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	f7f4 fea0 	bl	8000218 <__aeabi_dsub>
 800b4d8:	4642      	mov	r2, r8
 800b4da:	464b      	mov	r3, r9
 800b4dc:	f7f5 fada 	bl	8000a94 <__aeabi_dcmpge>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	f43f aef1 	beq.w	800b2c8 <__ieee754_pow+0x770>
 800b4e6:	e7e7      	b.n	800b4b8 <__ieee754_pow+0x960>
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	e718      	b.n	800b320 <__ieee754_pow+0x7c8>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	e7d4      	b.n	800b49c <__ieee754_pow+0x944>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	491a      	ldr	r1, [pc, #104]	; (800b560 <__ieee754_pow+0xa08>)
 800b4f6:	f7ff bb8f 	b.w	800ac18 <__ieee754_pow+0xc0>
 800b4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4fe:	f7ff bb8b 	b.w	800ac18 <__ieee754_pow+0xc0>
 800b502:	4630      	mov	r0, r6
 800b504:	4639      	mov	r1, r7
 800b506:	f7ff bb87 	b.w	800ac18 <__ieee754_pow+0xc0>
 800b50a:	4693      	mov	fp, r2
 800b50c:	f7ff bb98 	b.w	800ac40 <__ieee754_pow+0xe8>
 800b510:	00000000 	.word	0x00000000
 800b514:	3fe62e43 	.word	0x3fe62e43
 800b518:	fefa39ef 	.word	0xfefa39ef
 800b51c:	3fe62e42 	.word	0x3fe62e42
 800b520:	0ca86c39 	.word	0x0ca86c39
 800b524:	be205c61 	.word	0xbe205c61
 800b528:	72bea4d0 	.word	0x72bea4d0
 800b52c:	3e663769 	.word	0x3e663769
 800b530:	c5d26bf1 	.word	0xc5d26bf1
 800b534:	3ebbbd41 	.word	0x3ebbbd41
 800b538:	af25de2c 	.word	0xaf25de2c
 800b53c:	3f11566a 	.word	0x3f11566a
 800b540:	16bebd93 	.word	0x16bebd93
 800b544:	3f66c16c 	.word	0x3f66c16c
 800b548:	5555553e 	.word	0x5555553e
 800b54c:	3fc55555 	.word	0x3fc55555
 800b550:	c2f8f359 	.word	0xc2f8f359
 800b554:	01a56e1f 	.word	0x01a56e1f
 800b558:	3fe00000 	.word	0x3fe00000
 800b55c:	000fffff 	.word	0x000fffff
 800b560:	3ff00000 	.word	0x3ff00000
 800b564:	4090cbff 	.word	0x4090cbff
 800b568:	3f6f3400 	.word	0x3f6f3400
 800b56c:	652b82fe 	.word	0x652b82fe
 800b570:	3c971547 	.word	0x3c971547

0800b574 <__ieee754_sqrt>:
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	4955      	ldr	r1, [pc, #340]	; (800b6d0 <__ieee754_sqrt+0x15c>)
 800b57a:	ec55 4b10 	vmov	r4, r5, d0
 800b57e:	43a9      	bics	r1, r5
 800b580:	462b      	mov	r3, r5
 800b582:	462a      	mov	r2, r5
 800b584:	d112      	bne.n	800b5ac <__ieee754_sqrt+0x38>
 800b586:	ee10 2a10 	vmov	r2, s0
 800b58a:	ee10 0a10 	vmov	r0, s0
 800b58e:	4629      	mov	r1, r5
 800b590:	f7f4 fffa 	bl	8000588 <__aeabi_dmul>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f4 fe3e 	bl	800021c <__adddf3>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	ec45 4b10 	vmov	d0, r4, r5
 800b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	ee10 0a10 	vmov	r0, s0
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	dc0f      	bgt.n	800b5d6 <__ieee754_sqrt+0x62>
 800b5b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5ba:	4330      	orrs	r0, r6
 800b5bc:	d0f2      	beq.n	800b5a4 <__ieee754_sqrt+0x30>
 800b5be:	b155      	cbz	r5, 800b5d6 <__ieee754_sqrt+0x62>
 800b5c0:	ee10 2a10 	vmov	r2, s0
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	f7f4 fe26 	bl	8000218 <__aeabi_dsub>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	f7f5 f904 	bl	80007dc <__aeabi_ddiv>
 800b5d4:	e7e4      	b.n	800b5a0 <__ieee754_sqrt+0x2c>
 800b5d6:	151b      	asrs	r3, r3, #20
 800b5d8:	d073      	beq.n	800b6c2 <__ieee754_sqrt+0x14e>
 800b5da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5de:	07dd      	lsls	r5, r3, #31
 800b5e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b5e4:	bf48      	it	mi
 800b5e6:	0fc8      	lsrmi	r0, r1, #31
 800b5e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b5ec:	bf44      	itt	mi
 800b5ee:	0049      	lslmi	r1, r1, #1
 800b5f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b5f4:	2500      	movs	r5, #0
 800b5f6:	1058      	asrs	r0, r3, #1
 800b5f8:	0fcb      	lsrs	r3, r1, #31
 800b5fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b5fe:	0049      	lsls	r1, r1, #1
 800b600:	2316      	movs	r3, #22
 800b602:	462c      	mov	r4, r5
 800b604:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b608:	19a7      	adds	r7, r4, r6
 800b60a:	4297      	cmp	r7, r2
 800b60c:	bfde      	ittt	le
 800b60e:	19bc      	addle	r4, r7, r6
 800b610:	1bd2      	suble	r2, r2, r7
 800b612:	19ad      	addle	r5, r5, r6
 800b614:	0fcf      	lsrs	r7, r1, #31
 800b616:	3b01      	subs	r3, #1
 800b618:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b61c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b620:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b624:	d1f0      	bne.n	800b608 <__ieee754_sqrt+0x94>
 800b626:	f04f 0c20 	mov.w	ip, #32
 800b62a:	469e      	mov	lr, r3
 800b62c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b630:	42a2      	cmp	r2, r4
 800b632:	eb06 070e 	add.w	r7, r6, lr
 800b636:	dc02      	bgt.n	800b63e <__ieee754_sqrt+0xca>
 800b638:	d112      	bne.n	800b660 <__ieee754_sqrt+0xec>
 800b63a:	428f      	cmp	r7, r1
 800b63c:	d810      	bhi.n	800b660 <__ieee754_sqrt+0xec>
 800b63e:	2f00      	cmp	r7, #0
 800b640:	eb07 0e06 	add.w	lr, r7, r6
 800b644:	da42      	bge.n	800b6cc <__ieee754_sqrt+0x158>
 800b646:	f1be 0f00 	cmp.w	lr, #0
 800b64a:	db3f      	blt.n	800b6cc <__ieee754_sqrt+0x158>
 800b64c:	f104 0801 	add.w	r8, r4, #1
 800b650:	1b12      	subs	r2, r2, r4
 800b652:	428f      	cmp	r7, r1
 800b654:	bf88      	it	hi
 800b656:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b65a:	1bc9      	subs	r1, r1, r7
 800b65c:	4433      	add	r3, r6
 800b65e:	4644      	mov	r4, r8
 800b660:	0052      	lsls	r2, r2, #1
 800b662:	f1bc 0c01 	subs.w	ip, ip, #1
 800b666:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b66a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b66e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b672:	d1dd      	bne.n	800b630 <__ieee754_sqrt+0xbc>
 800b674:	430a      	orrs	r2, r1
 800b676:	d006      	beq.n	800b686 <__ieee754_sqrt+0x112>
 800b678:	1c5c      	adds	r4, r3, #1
 800b67a:	bf13      	iteet	ne
 800b67c:	3301      	addne	r3, #1
 800b67e:	3501      	addeq	r5, #1
 800b680:	4663      	moveq	r3, ip
 800b682:	f023 0301 	bicne.w	r3, r3, #1
 800b686:	106a      	asrs	r2, r5, #1
 800b688:	085b      	lsrs	r3, r3, #1
 800b68a:	07e9      	lsls	r1, r5, #31
 800b68c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b690:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b694:	bf48      	it	mi
 800b696:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b69a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b69e:	461c      	mov	r4, r3
 800b6a0:	e780      	b.n	800b5a4 <__ieee754_sqrt+0x30>
 800b6a2:	0aca      	lsrs	r2, r1, #11
 800b6a4:	3815      	subs	r0, #21
 800b6a6:	0549      	lsls	r1, r1, #21
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	d0fa      	beq.n	800b6a2 <__ieee754_sqrt+0x12e>
 800b6ac:	02d6      	lsls	r6, r2, #11
 800b6ae:	d50a      	bpl.n	800b6c6 <__ieee754_sqrt+0x152>
 800b6b0:	f1c3 0420 	rsb	r4, r3, #32
 800b6b4:	fa21 f404 	lsr.w	r4, r1, r4
 800b6b8:	1e5d      	subs	r5, r3, #1
 800b6ba:	4099      	lsls	r1, r3
 800b6bc:	4322      	orrs	r2, r4
 800b6be:	1b43      	subs	r3, r0, r5
 800b6c0:	e78b      	b.n	800b5da <__ieee754_sqrt+0x66>
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	e7f0      	b.n	800b6a8 <__ieee754_sqrt+0x134>
 800b6c6:	0052      	lsls	r2, r2, #1
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	e7ef      	b.n	800b6ac <__ieee754_sqrt+0x138>
 800b6cc:	46a0      	mov	r8, r4
 800b6ce:	e7bf      	b.n	800b650 <__ieee754_sqrt+0xdc>
 800b6d0:	7ff00000 	.word	0x7ff00000

0800b6d4 <fabs>:
 800b6d4:	ec51 0b10 	vmov	r0, r1, d0
 800b6d8:	ee10 2a10 	vmov	r2, s0
 800b6dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6e0:	ec43 2b10 	vmov	d0, r2, r3
 800b6e4:	4770      	bx	lr

0800b6e6 <finite>:
 800b6e6:	ee10 3a90 	vmov	r3, s1
 800b6ea:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b6ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b6f2:	0fc0      	lsrs	r0, r0, #31
 800b6f4:	4770      	bx	lr

0800b6f6 <matherr>:
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	4770      	bx	lr
 800b6fa:	0000      	movs	r0, r0
 800b6fc:	0000      	movs	r0, r0
	...

0800b700 <nan>:
 800b700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b708 <nan+0x8>
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	00000000 	.word	0x00000000
 800b70c:	7ff80000 	.word	0x7ff80000

0800b710 <rint>:
 800b710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b712:	ec51 0b10 	vmov	r0, r1, d0
 800b716:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b71a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b71e:	2e13      	cmp	r6, #19
 800b720:	460b      	mov	r3, r1
 800b722:	ee10 4a10 	vmov	r4, s0
 800b726:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b72a:	dc56      	bgt.n	800b7da <rint+0xca>
 800b72c:	2e00      	cmp	r6, #0
 800b72e:	da2b      	bge.n	800b788 <rint+0x78>
 800b730:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b734:	4302      	orrs	r2, r0
 800b736:	d023      	beq.n	800b780 <rint+0x70>
 800b738:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b73c:	4302      	orrs	r2, r0
 800b73e:	4254      	negs	r4, r2
 800b740:	4314      	orrs	r4, r2
 800b742:	0c4b      	lsrs	r3, r1, #17
 800b744:	0b24      	lsrs	r4, r4, #12
 800b746:	045b      	lsls	r3, r3, #17
 800b748:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b74c:	ea44 0103 	orr.w	r1, r4, r3
 800b750:	460b      	mov	r3, r1
 800b752:	492f      	ldr	r1, [pc, #188]	; (800b810 <rint+0x100>)
 800b754:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b758:	e9d1 6700 	ldrd	r6, r7, [r1]
 800b75c:	4602      	mov	r2, r0
 800b75e:	4639      	mov	r1, r7
 800b760:	4630      	mov	r0, r6
 800b762:	f7f4 fd5b 	bl	800021c <__adddf3>
 800b766:	e9cd 0100 	strd	r0, r1, [sp]
 800b76a:	463b      	mov	r3, r7
 800b76c:	4632      	mov	r2, r6
 800b76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b772:	f7f4 fd51 	bl	8000218 <__aeabi_dsub>
 800b776:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b77a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b77e:	4639      	mov	r1, r7
 800b780:	ec41 0b10 	vmov	d0, r0, r1
 800b784:	b003      	add	sp, #12
 800b786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b788:	4a22      	ldr	r2, [pc, #136]	; (800b814 <rint+0x104>)
 800b78a:	4132      	asrs	r2, r6
 800b78c:	ea01 0702 	and.w	r7, r1, r2
 800b790:	4307      	orrs	r7, r0
 800b792:	d0f5      	beq.n	800b780 <rint+0x70>
 800b794:	0852      	lsrs	r2, r2, #1
 800b796:	4011      	ands	r1, r2
 800b798:	430c      	orrs	r4, r1
 800b79a:	d00b      	beq.n	800b7b4 <rint+0xa4>
 800b79c:	ea23 0202 	bic.w	r2, r3, r2
 800b7a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b7a4:	2e13      	cmp	r6, #19
 800b7a6:	fa43 f306 	asr.w	r3, r3, r6
 800b7aa:	bf0c      	ite	eq
 800b7ac:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b7b0:	2400      	movne	r4, #0
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	4916      	ldr	r1, [pc, #88]	; (800b810 <rint+0x100>)
 800b7b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	f7f4 fd2a 	bl	800021c <__adddf3>
 800b7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	462b      	mov	r3, r5
 800b7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d4:	f7f4 fd20 	bl	8000218 <__aeabi_dsub>
 800b7d8:	e7d2      	b.n	800b780 <rint+0x70>
 800b7da:	2e33      	cmp	r6, #51	; 0x33
 800b7dc:	dd07      	ble.n	800b7ee <rint+0xde>
 800b7de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b7e2:	d1cd      	bne.n	800b780 <rint+0x70>
 800b7e4:	ee10 2a10 	vmov	r2, s0
 800b7e8:	f7f4 fd18 	bl	800021c <__adddf3>
 800b7ec:	e7c8      	b.n	800b780 <rint+0x70>
 800b7ee:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	40f2      	lsrs	r2, r6
 800b7f8:	4210      	tst	r0, r2
 800b7fa:	d0c1      	beq.n	800b780 <rint+0x70>
 800b7fc:	0852      	lsrs	r2, r2, #1
 800b7fe:	4210      	tst	r0, r2
 800b800:	bf1f      	itttt	ne
 800b802:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b806:	ea20 0202 	bicne.w	r2, r0, r2
 800b80a:	4134      	asrne	r4, r6
 800b80c:	4314      	orrne	r4, r2
 800b80e:	e7d1      	b.n	800b7b4 <rint+0xa4>
 800b810:	0800ba28 	.word	0x0800ba28
 800b814:	000fffff 	.word	0x000fffff

0800b818 <scalbn>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	ec55 4b10 	vmov	r4, r5, d0
 800b81e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b822:	4606      	mov	r6, r0
 800b824:	462b      	mov	r3, r5
 800b826:	b9aa      	cbnz	r2, 800b854 <scalbn+0x3c>
 800b828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b82c:	4323      	orrs	r3, r4
 800b82e:	d03b      	beq.n	800b8a8 <scalbn+0x90>
 800b830:	4b31      	ldr	r3, [pc, #196]	; (800b8f8 <scalbn+0xe0>)
 800b832:	4629      	mov	r1, r5
 800b834:	2200      	movs	r2, #0
 800b836:	ee10 0a10 	vmov	r0, s0
 800b83a:	f7f4 fea5 	bl	8000588 <__aeabi_dmul>
 800b83e:	4b2f      	ldr	r3, [pc, #188]	; (800b8fc <scalbn+0xe4>)
 800b840:	429e      	cmp	r6, r3
 800b842:	4604      	mov	r4, r0
 800b844:	460d      	mov	r5, r1
 800b846:	da12      	bge.n	800b86e <scalbn+0x56>
 800b848:	a327      	add	r3, pc, #156	; (adr r3, 800b8e8 <scalbn+0xd0>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7f4 fe9b 	bl	8000588 <__aeabi_dmul>
 800b852:	e009      	b.n	800b868 <scalbn+0x50>
 800b854:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b858:	428a      	cmp	r2, r1
 800b85a:	d10c      	bne.n	800b876 <scalbn+0x5e>
 800b85c:	ee10 2a10 	vmov	r2, s0
 800b860:	4620      	mov	r0, r4
 800b862:	4629      	mov	r1, r5
 800b864:	f7f4 fcda 	bl	800021c <__adddf3>
 800b868:	4604      	mov	r4, r0
 800b86a:	460d      	mov	r5, r1
 800b86c:	e01c      	b.n	800b8a8 <scalbn+0x90>
 800b86e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b872:	460b      	mov	r3, r1
 800b874:	3a36      	subs	r2, #54	; 0x36
 800b876:	4432      	add	r2, r6
 800b878:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b87c:	428a      	cmp	r2, r1
 800b87e:	dd0b      	ble.n	800b898 <scalbn+0x80>
 800b880:	ec45 4b11 	vmov	d1, r4, r5
 800b884:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b8f0 <scalbn+0xd8>
 800b888:	f000 f83c 	bl	800b904 <copysign>
 800b88c:	a318      	add	r3, pc, #96	; (adr r3, 800b8f0 <scalbn+0xd8>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	ec51 0b10 	vmov	r0, r1, d0
 800b896:	e7da      	b.n	800b84e <scalbn+0x36>
 800b898:	2a00      	cmp	r2, #0
 800b89a:	dd08      	ble.n	800b8ae <scalbn+0x96>
 800b89c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8a8:	ec45 4b10 	vmov	d0, r4, r5
 800b8ac:	bd70      	pop	{r4, r5, r6, pc}
 800b8ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8b2:	da0d      	bge.n	800b8d0 <scalbn+0xb8>
 800b8b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8b8:	429e      	cmp	r6, r3
 800b8ba:	ec45 4b11 	vmov	d1, r4, r5
 800b8be:	dce1      	bgt.n	800b884 <scalbn+0x6c>
 800b8c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b8e8 <scalbn+0xd0>
 800b8c4:	f000 f81e 	bl	800b904 <copysign>
 800b8c8:	a307      	add	r3, pc, #28	; (adr r3, 800b8e8 <scalbn+0xd0>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	e7e0      	b.n	800b892 <scalbn+0x7a>
 800b8d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8d4:	3236      	adds	r2, #54	; 0x36
 800b8d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8de:	4620      	mov	r0, r4
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <scalbn+0xe8>)
 800b8e6:	e7b2      	b.n	800b84e <scalbn+0x36>
 800b8e8:	c2f8f359 	.word	0xc2f8f359
 800b8ec:	01a56e1f 	.word	0x01a56e1f
 800b8f0:	8800759c 	.word	0x8800759c
 800b8f4:	7e37e43c 	.word	0x7e37e43c
 800b8f8:	43500000 	.word	0x43500000
 800b8fc:	ffff3cb0 	.word	0xffff3cb0
 800b900:	3c900000 	.word	0x3c900000

0800b904 <copysign>:
 800b904:	ec51 0b10 	vmov	r0, r1, d0
 800b908:	ee11 0a90 	vmov	r0, s3
 800b90c:	ee10 2a10 	vmov	r2, s0
 800b910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b914:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b918:	ea41 0300 	orr.w	r3, r1, r0
 800b91c:	ec43 2b10 	vmov	d0, r2, r3
 800b920:	4770      	bx	lr
	...

0800b924 <_init>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr

0800b930 <_fini>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr
